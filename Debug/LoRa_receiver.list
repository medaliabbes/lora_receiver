
LoRa_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  0800e528  0800e528  0001e528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f72c  0800f72c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f734  0800f734  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f734  0800f734  0001f734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f738  0800f738  0001f738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001e4  0800f920  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800f920  00020600  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b74  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f7d  00000000  00000000  00045d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  0004ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e599  00000000  00000000  0004e160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4f5  00000000  00000000  0006c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7662  00000000  00000000  00087bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008594  00000000  00000000  0012f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e510 	.word	0x0800e510

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800e510 	.word	0x0800e510

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__gesf2>:
 8000e74:	f04f 3cff 	mov.w	ip, #4294967295
 8000e78:	e006      	b.n	8000e88 <__cmpsf2+0x4>
 8000e7a:	bf00      	nop

08000e7c <__lesf2>:
 8000e7c:	f04f 0c01 	mov.w	ip, #1
 8000e80:	e002      	b.n	8000e88 <__cmpsf2+0x4>
 8000e82:	bf00      	nop

08000e84 <__cmpsf2>:
 8000e84:	f04f 0c01 	mov.w	ip, #1
 8000e88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	bf18      	it	ne
 8000e9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9e:	d011      	beq.n	8000ec4 <__cmpsf2+0x40>
 8000ea0:	b001      	add	sp, #4
 8000ea2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea6:	bf18      	it	ne
 8000ea8:	ea90 0f01 	teqne	r0, r1
 8000eac:	bf58      	it	pl
 8000eae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eb2:	bf88      	it	hi
 8000eb4:	17c8      	asrhi	r0, r1, #31
 8000eb6:	bf38      	it	cc
 8000eb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ebc:	bf18      	it	ne
 8000ebe:	f040 0001 	orrne.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec8:	d102      	bne.n	8000ed0 <__cmpsf2+0x4c>
 8000eca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ece:	d105      	bne.n	8000edc <__cmpsf2+0x58>
 8000ed0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed4:	d1e4      	bne.n	8000ea0 <__cmpsf2+0x1c>
 8000ed6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eda:	d0e1      	beq.n	8000ea0 <__cmpsf2+0x1c>
 8000edc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_cfrcmple>:
 8000ee4:	4684      	mov	ip, r0
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	4661      	mov	r1, ip
 8000eea:	e7ff      	b.n	8000eec <__aeabi_cfcmpeq>

08000eec <__aeabi_cfcmpeq>:
 8000eec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eee:	f7ff ffc9 	bl	8000e84 <__cmpsf2>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	bf48      	it	mi
 8000ef6:	f110 0f00 	cmnmi.w	r0, #0
 8000efa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000efc <__aeabi_fcmpeq>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff fff4 	bl	8000eec <__aeabi_cfcmpeq>
 8000f04:	bf0c      	ite	eq
 8000f06:	2001      	moveq	r0, #1
 8000f08:	2000      	movne	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmplt>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffea 	bl	8000eec <__aeabi_cfcmpeq>
 8000f18:	bf34      	ite	cc
 8000f1a:	2001      	movcc	r0, #1
 8000f1c:	2000      	movcs	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmple>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffe0 	bl	8000eec <__aeabi_cfcmpeq>
 8000f2c:	bf94      	ite	ls
 8000f2e:	2001      	movls	r0, #1
 8000f30:	2000      	movhi	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmpge>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffd2 	bl	8000ee4 <__aeabi_cfrcmple>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpgt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffc8 	bl	8000ee4 <__aeabi_cfrcmple>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_uldivmod>:
 8000f60:	b953      	cbnz	r3, 8000f78 <__aeabi_uldivmod+0x18>
 8000f62:	b94a      	cbnz	r2, 8000f78 <__aeabi_uldivmod+0x18>
 8000f64:	2900      	cmp	r1, #0
 8000f66:	bf08      	it	eq
 8000f68:	2800      	cmpeq	r0, #0
 8000f6a:	bf1c      	itt	ne
 8000f6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f70:	f04f 30ff 	movne.w	r0, #4294967295
 8000f74:	f000 b9a4 	b.w	80012c0 <__aeabi_idiv0>
 8000f78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f80:	f000 f83e 	bl	8001000 <__udivmoddi4>
 8000f84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f8c:	b004      	add	sp, #16
 8000f8e:	4770      	bx	lr

08000f90 <__aeabi_d2lz>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4605      	mov	r5, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4628      	mov	r0, r5
 8000f98:	4621      	mov	r1, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f7ff fd85 	bl	8000aac <__aeabi_dcmplt>
 8000fa2:	b928      	cbnz	r0, 8000fb0 <__aeabi_d2lz+0x20>
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fac:	f000 b80a 	b.w	8000fc4 <__aeabi_d2ulz>
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fb6:	f000 f805 	bl	8000fc4 <__aeabi_d2ulz>
 8000fba:	4240      	negs	r0, r0
 8000fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_d2ulz>:
 8000fc4:	b5d0      	push	{r4, r6, r7, lr}
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__aeabi_d2ulz+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4606      	mov	r6, r0
 8000fcc:	460f      	mov	r7, r1
 8000fce:	f7ff fafb 	bl	80005c8 <__aeabi_dmul>
 8000fd2:	f7ff fdd1 	bl	8000b78 <__aeabi_d2uiz>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	f7ff fa7c 	bl	80004d4 <__aeabi_ui2d>
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <__aeabi_d2ulz+0x38>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f7ff faf2 	bl	80005c8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4630      	mov	r0, r6
 8000fea:	4639      	mov	r1, r7
 8000fec:	f7ff f934 	bl	8000258 <__aeabi_dsub>
 8000ff0:	f7ff fdc2 	bl	8000b78 <__aeabi_d2uiz>
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ff8:	3df00000 	.word	0x3df00000
 8000ffc:	41f00000 	.word	0x41f00000

08001000 <__udivmoddi4>:
 8001000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	9e08      	ldr	r6, [sp, #32]
 8001006:	460d      	mov	r5, r1
 8001008:	4604      	mov	r4, r0
 800100a:	468e      	mov	lr, r1
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 8082 	bne.w	8001116 <__udivmoddi4+0x116>
 8001012:	428a      	cmp	r2, r1
 8001014:	4617      	mov	r7, r2
 8001016:	d946      	bls.n	80010a6 <__udivmoddi4+0xa6>
 8001018:	fab2 f282 	clz	r2, r2
 800101c:	b14a      	cbz	r2, 8001032 <__udivmoddi4+0x32>
 800101e:	f1c2 0120 	rsb	r1, r2, #32
 8001022:	fa05 f302 	lsl.w	r3, r5, r2
 8001026:	fa20 f101 	lsr.w	r1, r0, r1
 800102a:	4097      	lsls	r7, r2
 800102c:	ea41 0e03 	orr.w	lr, r1, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fbbe fcf8 	udiv	ip, lr, r8
 800103c:	b2b9      	uxth	r1, r7
 800103e:	fb08 ee1c 	mls	lr, r8, ip, lr
 8001042:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001046:	fb0c f001 	mul.w	r0, ip, r1
 800104a:	4298      	cmp	r0, r3
 800104c:	d90a      	bls.n	8001064 <__udivmoddi4+0x64>
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	f10c 35ff 	add.w	r5, ip, #4294967295
 8001054:	f080 8116 	bcs.w	8001284 <__udivmoddi4+0x284>
 8001058:	4298      	cmp	r0, r3
 800105a:	f240 8113 	bls.w	8001284 <__udivmoddi4+0x284>
 800105e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001062:	443b      	add	r3, r7
 8001064:	1a1b      	subs	r3, r3, r0
 8001066:	b2a4      	uxth	r4, r4
 8001068:	fbb3 f0f8 	udiv	r0, r3, r8
 800106c:	fb08 3310 	mls	r3, r8, r0, r3
 8001070:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001074:	fb00 f101 	mul.w	r1, r0, r1
 8001078:	42a1      	cmp	r1, r4
 800107a:	d909      	bls.n	8001090 <__udivmoddi4+0x90>
 800107c:	193c      	adds	r4, r7, r4
 800107e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001082:	f080 8101 	bcs.w	8001288 <__udivmoddi4+0x288>
 8001086:	42a1      	cmp	r1, r4
 8001088:	f240 80fe 	bls.w	8001288 <__udivmoddi4+0x288>
 800108c:	3802      	subs	r0, #2
 800108e:	443c      	add	r4, r7
 8001090:	1a64      	subs	r4, r4, r1
 8001092:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001096:	2100      	movs	r1, #0
 8001098:	b11e      	cbz	r6, 80010a2 <__udivmoddi4+0xa2>
 800109a:	40d4      	lsrs	r4, r2
 800109c:	2300      	movs	r3, #0
 800109e:	e9c6 4300 	strd	r4, r3, [r6]
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	b902      	cbnz	r2, 80010aa <__udivmoddi4+0xaa>
 80010a8:	deff      	udf	#255	; 0xff
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d14f      	bne.n	8001152 <__udivmoddi4+0x152>
 80010b2:	1bcb      	subs	r3, r1, r7
 80010b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b8:	fa1f f887 	uxth.w	r8, r7
 80010bc:	2101      	movs	r1, #1
 80010be:	fbb3 fcfe 	udiv	ip, r3, lr
 80010c2:	0c25      	lsrs	r5, r4, #16
 80010c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80010c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010cc:	fb08 f30c 	mul.w	r3, r8, ip
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d907      	bls.n	80010e4 <__udivmoddi4+0xe4>
 80010d4:	197d      	adds	r5, r7, r5
 80010d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010da:	d202      	bcs.n	80010e2 <__udivmoddi4+0xe2>
 80010dc:	42ab      	cmp	r3, r5
 80010de:	f200 80e7 	bhi.w	80012b0 <__udivmoddi4+0x2b0>
 80010e2:	4684      	mov	ip, r0
 80010e4:	1aed      	subs	r5, r5, r3
 80010e6:	b2a3      	uxth	r3, r4
 80010e8:	fbb5 f0fe 	udiv	r0, r5, lr
 80010ec:	fb0e 5510 	mls	r5, lr, r0, r5
 80010f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80010f4:	fb08 f800 	mul.w	r8, r8, r0
 80010f8:	45a0      	cmp	r8, r4
 80010fa:	d907      	bls.n	800110c <__udivmoddi4+0x10c>
 80010fc:	193c      	adds	r4, r7, r4
 80010fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x10a>
 8001104:	45a0      	cmp	r8, r4
 8001106:	f200 80d7 	bhi.w	80012b8 <__udivmoddi4+0x2b8>
 800110a:	4618      	mov	r0, r3
 800110c:	eba4 0408 	sub.w	r4, r4, r8
 8001110:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001114:	e7c0      	b.n	8001098 <__udivmoddi4+0x98>
 8001116:	428b      	cmp	r3, r1
 8001118:	d908      	bls.n	800112c <__udivmoddi4+0x12c>
 800111a:	2e00      	cmp	r6, #0
 800111c:	f000 80af 	beq.w	800127e <__udivmoddi4+0x27e>
 8001120:	2100      	movs	r1, #0
 8001122:	e9c6 0500 	strd	r0, r5, [r6]
 8001126:	4608      	mov	r0, r1
 8001128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112c:	fab3 f183 	clz	r1, r3
 8001130:	2900      	cmp	r1, #0
 8001132:	d14b      	bne.n	80011cc <__udivmoddi4+0x1cc>
 8001134:	42ab      	cmp	r3, r5
 8001136:	d302      	bcc.n	800113e <__udivmoddi4+0x13e>
 8001138:	4282      	cmp	r2, r0
 800113a:	f200 80b7 	bhi.w	80012ac <__udivmoddi4+0x2ac>
 800113e:	1a84      	subs	r4, r0, r2
 8001140:	eb65 0303 	sbc.w	r3, r5, r3
 8001144:	2001      	movs	r0, #1
 8001146:	469e      	mov	lr, r3
 8001148:	2e00      	cmp	r6, #0
 800114a:	d0aa      	beq.n	80010a2 <__udivmoddi4+0xa2>
 800114c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001150:	e7a7      	b.n	80010a2 <__udivmoddi4+0xa2>
 8001152:	f1c2 0c20 	rsb	ip, r2, #32
 8001156:	fa01 f302 	lsl.w	r3, r1, r2
 800115a:	4097      	lsls	r7, r2
 800115c:	fa20 f00c 	lsr.w	r0, r0, ip
 8001160:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001164:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001168:	4318      	orrs	r0, r3
 800116a:	fbbc f1fe 	udiv	r1, ip, lr
 800116e:	0c05      	lsrs	r5, r0, #16
 8001170:	fb0e cc11 	mls	ip, lr, r1, ip
 8001174:	fa1f f887 	uxth.w	r8, r7
 8001178:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800117c:	fb01 f308 	mul.w	r3, r1, r8
 8001180:	42ab      	cmp	r3, r5
 8001182:	fa04 f402 	lsl.w	r4, r4, r2
 8001186:	d909      	bls.n	800119c <__udivmoddi4+0x19c>
 8001188:	197d      	adds	r5, r7, r5
 800118a:	f101 3cff 	add.w	ip, r1, #4294967295
 800118e:	f080 808b 	bcs.w	80012a8 <__udivmoddi4+0x2a8>
 8001192:	42ab      	cmp	r3, r5
 8001194:	f240 8088 	bls.w	80012a8 <__udivmoddi4+0x2a8>
 8001198:	3902      	subs	r1, #2
 800119a:	443d      	add	r5, r7
 800119c:	1aeb      	subs	r3, r5, r3
 800119e:	b285      	uxth	r5, r0
 80011a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80011a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80011a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80011ac:	fb00 f308 	mul.w	r3, r0, r8
 80011b0:	42ab      	cmp	r3, r5
 80011b2:	d907      	bls.n	80011c4 <__udivmoddi4+0x1c4>
 80011b4:	197d      	adds	r5, r7, r5
 80011b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80011ba:	d271      	bcs.n	80012a0 <__udivmoddi4+0x2a0>
 80011bc:	42ab      	cmp	r3, r5
 80011be:	d96f      	bls.n	80012a0 <__udivmoddi4+0x2a0>
 80011c0:	3802      	subs	r0, #2
 80011c2:	443d      	add	r5, r7
 80011c4:	1aeb      	subs	r3, r5, r3
 80011c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011ca:	e778      	b.n	80010be <__udivmoddi4+0xbe>
 80011cc:	f1c1 0c20 	rsb	ip, r1, #32
 80011d0:	408b      	lsls	r3, r1
 80011d2:	fa22 f70c 	lsr.w	r7, r2, ip
 80011d6:	431f      	orrs	r7, r3
 80011d8:	fa20 f40c 	lsr.w	r4, r0, ip
 80011dc:	fa05 f301 	lsl.w	r3, r5, r1
 80011e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e4:	fa25 f50c 	lsr.w	r5, r5, ip
 80011e8:	431c      	orrs	r4, r3
 80011ea:	0c23      	lsrs	r3, r4, #16
 80011ec:	fbb5 f9fe 	udiv	r9, r5, lr
 80011f0:	fa1f f887 	uxth.w	r8, r7
 80011f4:	fb0e 5519 	mls	r5, lr, r9, r5
 80011f8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80011fc:	fb09 fa08 	mul.w	sl, r9, r8
 8001200:	45aa      	cmp	sl, r5
 8001202:	fa02 f201 	lsl.w	r2, r2, r1
 8001206:	fa00 f301 	lsl.w	r3, r0, r1
 800120a:	d908      	bls.n	800121e <__udivmoddi4+0x21e>
 800120c:	197d      	adds	r5, r7, r5
 800120e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001212:	d247      	bcs.n	80012a4 <__udivmoddi4+0x2a4>
 8001214:	45aa      	cmp	sl, r5
 8001216:	d945      	bls.n	80012a4 <__udivmoddi4+0x2a4>
 8001218:	f1a9 0902 	sub.w	r9, r9, #2
 800121c:	443d      	add	r5, r7
 800121e:	eba5 050a 	sub.w	r5, r5, sl
 8001222:	b2a4      	uxth	r4, r4
 8001224:	fbb5 f0fe 	udiv	r0, r5, lr
 8001228:	fb0e 5510 	mls	r5, lr, r0, r5
 800122c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001230:	fb00 f808 	mul.w	r8, r0, r8
 8001234:	45a0      	cmp	r8, r4
 8001236:	d907      	bls.n	8001248 <__udivmoddi4+0x248>
 8001238:	193c      	adds	r4, r7, r4
 800123a:	f100 35ff 	add.w	r5, r0, #4294967295
 800123e:	d22d      	bcs.n	800129c <__udivmoddi4+0x29c>
 8001240:	45a0      	cmp	r8, r4
 8001242:	d92b      	bls.n	800129c <__udivmoddi4+0x29c>
 8001244:	3802      	subs	r0, #2
 8001246:	443c      	add	r4, r7
 8001248:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800124c:	eba4 0408 	sub.w	r4, r4, r8
 8001250:	fba0 8902 	umull	r8, r9, r0, r2
 8001254:	454c      	cmp	r4, r9
 8001256:	46c6      	mov	lr, r8
 8001258:	464d      	mov	r5, r9
 800125a:	d319      	bcc.n	8001290 <__udivmoddi4+0x290>
 800125c:	d016      	beq.n	800128c <__udivmoddi4+0x28c>
 800125e:	b15e      	cbz	r6, 8001278 <__udivmoddi4+0x278>
 8001260:	ebb3 020e 	subs.w	r2, r3, lr
 8001264:	eb64 0405 	sbc.w	r4, r4, r5
 8001268:	fa04 fc0c 	lsl.w	ip, r4, ip
 800126c:	40ca      	lsrs	r2, r1
 800126e:	ea4c 0202 	orr.w	r2, ip, r2
 8001272:	40cc      	lsrs	r4, r1
 8001274:	e9c6 2400 	strd	r2, r4, [r6]
 8001278:	2100      	movs	r1, #0
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	4631      	mov	r1, r6
 8001280:	4630      	mov	r0, r6
 8001282:	e70e      	b.n	80010a2 <__udivmoddi4+0xa2>
 8001284:	46ac      	mov	ip, r5
 8001286:	e6ed      	b.n	8001064 <__udivmoddi4+0x64>
 8001288:	4618      	mov	r0, r3
 800128a:	e701      	b.n	8001090 <__udivmoddi4+0x90>
 800128c:	4543      	cmp	r3, r8
 800128e:	d2e6      	bcs.n	800125e <__udivmoddi4+0x25e>
 8001290:	ebb8 0e02 	subs.w	lr, r8, r2
 8001294:	eb69 0507 	sbc.w	r5, r9, r7
 8001298:	3801      	subs	r0, #1
 800129a:	e7e0      	b.n	800125e <__udivmoddi4+0x25e>
 800129c:	4628      	mov	r0, r5
 800129e:	e7d3      	b.n	8001248 <__udivmoddi4+0x248>
 80012a0:	4660      	mov	r0, ip
 80012a2:	e78f      	b.n	80011c4 <__udivmoddi4+0x1c4>
 80012a4:	4681      	mov	r9, r0
 80012a6:	e7ba      	b.n	800121e <__udivmoddi4+0x21e>
 80012a8:	4661      	mov	r1, ip
 80012aa:	e777      	b.n	800119c <__udivmoddi4+0x19c>
 80012ac:	4608      	mov	r0, r1
 80012ae:	e74b      	b.n	8001148 <__udivmoddi4+0x148>
 80012b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012b4:	443d      	add	r5, r7
 80012b6:	e715      	b.n	80010e4 <__udivmoddi4+0xe4>
 80012b8:	3802      	subs	r0, #2
 80012ba:	443c      	add	r4, r7
 80012bc:	e726      	b.n	800110c <__udivmoddi4+0x10c>
 80012be:	bf00      	nop

080012c0 <__aeabi_idiv0>:
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop

080012c4 <flash_read_storage>:

/*
 * this function will read 3 * 64 bit from the address FLASH_USER_START_ADDR
 */
static void flash_read_storage(uint8_t * buffer  )
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	uint32_t adress = FLASH_USER_START_ADDR ;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <flash_read_storage+0x3c>)
 80012ce:	60fb      	str	r3, [r7, #12]

	for(int i = 0 ; i< 24 ; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e00b      	b.n	80012ee <flash_read_storage+0x2a>
	{
	  buffer[i] =*(uint8_t*)(adress);
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	440b      	add	r3, r1
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
	for(int i = 0 ; i< 24 ; i++)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b17      	cmp	r3, #23
 80012f2:	ddf0      	ble.n	80012d6 <flash_read_storage+0x12>
	}

}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	0803f800 	.word	0x0803f800

08001304 <flash_write_storage>:

static int flash_write_storage(uint8_t * buffer)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

	uint32_t  PAGEError = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]

	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef sta ;
	uint32_t adress = FLASH_USER_START_ADDR ;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <flash_write_storage+0xd0>)
 8001312:	627b      	str	r3, [r7, #36]	; 0x24


	EraseInitStruct.TypeErase =  FLASH_TYPEERASE_PAGES ;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Page      =  FLASH_PAGE_NB - 1     ;
 8001318:	237f      	movs	r3, #127	; 0x7f
 800131a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages   =  1 ;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]

	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 8001320:	f107 021c 	add.w	r2, r7, #28
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fc08 	bl	8002b40 <HAL_FLASHEx_Erase>


	uint64_t mydata ;


	memcpy(&mydata , &buffer[0] , sizeof(uint64_t));
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2208      	movs	r2, #8
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f008 fb99 	bl	8009a70 <memcpy>

	sta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD ,adress , mydata);
 800133e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001344:	2001      	movs	r0, #1
 8001346:	f001 facf 	bl	80028e8 <HAL_FLASH_Program>
 800134a:	4603      	mov	r3, r0
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(sta != HAL_OK )
 8001350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <flash_write_storage+0x58>
	{
	  return CONFIG_ERROR ;
 8001358:	2301      	movs	r3, #1
 800135a:	e036      	b.n	80013ca <flash_write_storage+0xc6>
	}
	adress += 8 ;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3308      	adds	r3, #8
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

	memcpy(&mydata , &buffer[8] , sizeof(uint64_t));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f103 0108 	add.w	r1, r3, #8
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	2208      	movs	r2, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f008 fb7e 	bl	8009a70 <memcpy>

	sta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD ,adress , mydata);
 8001374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137a:	2001      	movs	r0, #1
 800137c:	f001 fab4 	bl	80028e8 <HAL_FLASH_Program>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(sta != HAL_OK )
 8001386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <flash_write_storage+0x8e>
	{
	  return CONFIG_ERROR ;
 800138e:	2301      	movs	r3, #1
 8001390:	e01b      	b.n	80013ca <flash_write_storage+0xc6>
	}
	adress += 8 ;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3308      	adds	r3, #8
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

	memcpy(&mydata , &buffer[16] , sizeof(uint64_t));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 0110 	add.w	r1, r3, #16
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2208      	movs	r2, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 fb63 	bl	8009a70 <memcpy>

	sta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD ,adress , mydata);
 80013aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 fa99 	bl	80028e8 <HAL_FLASH_Program>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(sta != HAL_OK )
 80013bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <flash_write_storage+0xc4>
	{
	  return CONFIG_ERROR ;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <flash_write_storage+0xc6>
	}

	return CONFIG_OK ;
 80013c8:	2300      	movs	r3, #0

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0803f800 	.word	0x0803f800

080013d8 <config_init>:

void config_init()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	  FLASH_WaitForLastOperation(1000);
 80013dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e0:	f001 fae8 	bl	80029b4 <FLASH_WaitForLastOperation>
	  HAL_FLASH_Unlock() ;
 80013e4:	f001 fac4 	bl	8002970 <HAL_FLASH_Unlock>
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <config_init+0x1c>)
 80013ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58004000 	.word	0x58004000

080013f8 <config_save1>:

int config_save1(config_t * param)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

	uint8_t buffer[24] ;

	flash_read_storage(buffer) ;
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <flash_read_storage>

	memcpy(&buffer[0] ,  param , sizeof(config_t) );
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2208      	movs	r2, #8
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fb2c 	bl	8009a70 <memcpy>

	uint64_t key = VALIDE_CONFIGURATION ;
 8001418:	a30d      	add	r3, pc, #52	; (adr r3, 8001450 <config_save1+0x58>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memcpy(&buffer[8] , &key , sizeof(uint64_t));
 8001422:	f107 0108 	add.w	r1, r7, #8
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	3308      	adds	r3, #8
 800142c:	2208      	movs	r2, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f008 fb1e 	bl	8009a70 <memcpy>

	int sta = flash_write_storage(buffer) ;
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff63 	bl	8001304 <flash_write_storage>
 800143e:	62f8      	str	r0, [r7, #44]	; 0x2c

	(void) buffer ;

	return sta ;
 8001440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001442:	4618      	mov	r0, r3
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	004ea1c1 	.word	0x004ea1c1
 8001454:	00000000 	.word	0x00000000

08001458 <config_load>:
	return 0 ;
}


int config_load(config_t * param)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8001460:	2008      	movs	r0, #8
 8001462:	f008 faf5 	bl	8009a50 <malloc>
 8001466:	4603      	mov	r3, r0
 8001468:	613b      	str	r3, [r7, #16]

	uint32_t adress = FLASH_USER_START_ADDR ;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <config_load+0xa8>)
 800146c:	61fb      	str	r3, [r7, #28]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e00b      	b.n	800148c <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	440b      	add	r3, r1
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3301      	adds	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b07      	cmp	r3, #7
 8001490:	d9f0      	bls.n	8001474 <config_load+0x1c>
	}

	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8001492:	2208      	movs	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f008 faea 	bl	8009a70 <memcpy>


	//read from the validation address
	adress = FLASH_USER_START_ADDR + 8 ;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <config_load+0xac>)
 800149e:	61fb      	str	r3, [r7, #28]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00b      	b.n	80014be <config_load+0x66>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	6939      	ldr	r1, [r7, #16]
 80014ac:	440b      	add	r3, r1
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d9f0      	bls.n	80014a6 <config_load+0x4e>
	}

	uint64_t key ;

	memcpy(&key , p_mydata ,sizeof(uint64_t) ) ;
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	2208      	movs	r2, #8
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 facf 	bl	8009a70 <memcpy>

	free(p_mydata) ;
 80014d2:	6938      	ldr	r0, [r7, #16]
 80014d4:	f008 fac4 	bl	8009a60 <free>

	if(key == VALIDE_CONFIGURATION)
 80014d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014dc:	a106      	add	r1, pc, #24	; (adr r1, 80014f8 <config_load+0xa0>)
 80014de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e2:	428b      	cmp	r3, r1
 80014e4:	bf08      	it	eq
 80014e6:	4282      	cmpeq	r2, r0
 80014e8:	d101      	bne.n	80014ee <config_load+0x96>
	{
		return CONFIG_OK ;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <config_load+0x98>
	}
	else
	{
		return CONFIG_ERROR ;
 80014ee:	2301      	movs	r3, #1
	}
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	004ea1c1 	.word	0x004ea1c1
 80014fc:	00000000 	.word	0x00000000
 8001500:	0803f800 	.word	0x0803f800
 8001504:	0803f808 	.word	0x0803f808

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	f023 0218 	bic.w	r2, r3, #24
 80015a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <callBack>:
void close_vanne() ;

int number_of_pulses  = 0 ;

void callBack()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	printf("Ask CallBack reset counter\n");
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <callBack+0x14>)
 80015f6:	f009 f87d 	bl	800a6f4 <puts>
	number_of_pulses = 0 ;
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <callBack+0x18>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	0800e528 	.word	0x0800e528
 8001608:	20000200 	.word	0x20000200

0800160c <main>:


int main(void)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b0a7      	sub	sp, #156	; 0x9c
 8001610:	af02      	add	r7, sp, #8

  int feedback_periode ;

  HAL_Init();
 8001612:	f000 fef5 	bl	8002400 <HAL_Init>

  SystemClock_Config();
 8001616:	f000 f983 	bl	8001920 <SystemClock_Config>

  MX_USART1_UART_Init();
 800161a:	f000 f9db 	bl	80019d4 <MX_USART1_UART_Init>

  SubghzApp_Init();
 800161e:	f000 fc2f 	bl	8001e80 <SubghzApp_Init>

  MX_GPIO_Init();
 8001622:	f000 fa2b 	bl	8001a7c <MX_GPIO_Init>

  config_t param ;

  config_init();
 8001626:	f7ff fed7 	bl	80013d8 <config_init>

  int sta = config_load(&param) ;
 800162a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff12 	bl	8001458 <config_load>
 8001634:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  printf("Node receiver \n");
 8001638:	4874      	ldr	r0, [pc, #464]	; (800180c <main+0x200>)
 800163a:	f009 f85b 	bl	800a6f4 <puts>

  printf("saved param seuil %f , periode %d\n",param.seuil , param.periode) ;
 800163e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff69 	bl	8000518 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800164c:	9100      	str	r1, [sp, #0]
 800164e:	4870      	ldr	r0, [pc, #448]	; (8001810 <main+0x204>)
 8001650:	f008 ffca 	bl	800a5e8 <iprintf>

  if(sta == CONFIG_OK)
 8001654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	d106      	bne.n	800166a <main+0x5e>
  {
	  printf("Valid data\n");
 800165c:	486d      	ldr	r0, [pc, #436]	; (8001814 <main+0x208>)
 800165e:	f009 f849 	bl	800a6f4 <puts>

	  feedback_periode = param.periode ;
 8001662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001668:	e006      	b.n	8001678 <main+0x6c>
  }
  else{

	  printf("Invalid data\n");
 800166a:	486b      	ldr	r0, [pc, #428]	; (8001818 <main+0x20c>)
 800166c:	f009 f842 	bl	800a6f4 <puts>

	  feedback_periode = DEFAULT_FEEDBACK_PERIOD ;
 8001670:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  }

  ll_init(RECEIVER_ADDRESS) ;
 8001678:	204d      	movs	r0, #77	; 0x4d
 800167a:	f007 fcc9 	bl	8009010 <ll_init>
  char feedback[50];

  u8 recv[50] ;

  //to send data whene started
  uint32_t feedback_timer = HAL_GetTick() + (feedback_periode *1000)+ 1 ;
 800167e:	f000 ff2b 	bl	80024d8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  uint32_t tx_monitor = HAL_GetTick() ;
 8001698:	f000 ff1e 	bl	80024d8 <HAL_GetTick>
 800169c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

  int len = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  int src = ll_get_recv(recv , &len) ;
 80016a4:	1d3a      	adds	r2, r7, #4
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f007 ff77 	bl	80095a0 <ll_get_recv>
 80016b2:	67f8      	str	r0, [r7, #124]	; 0x7c

	  if(len>0)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dd32      	ble.n	8001720 <main+0x114>
	  {
		  recv[len] = 0 ;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80016c0:	4413      	add	r3, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	f803 2c88 	strb.w	r2, [r3, #-136]

		  printf("data from %d: %s$\n" , src ,recv) ;
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	461a      	mov	r2, r3
 80016ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80016d0:	4852      	ldr	r0, [pc, #328]	; (800181c <main+0x210>)
 80016d2:	f008 ff89 	bl	800a5e8 <iprintf>

		  //Valide transmitter frame
		  if( parse_transmetter_data((char*)recv , len ,&param.seuil,&param.periode ) == 0)
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80016dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e0:	1d1a      	adds	r2, r3, #4
 80016e2:	f107 0008 	add.w	r0, r7, #8
 80016e6:	4623      	mov	r3, r4
 80016e8:	f000 f8a8 	bl	800183c <parse_transmetter_data>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <main+0x114>
		  {
			  printf("config seuil :%0.2f, per :%d\n",param.seuil , param.periode);
 80016f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff0f 	bl	8000518 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001700:	9100      	str	r1, [sp, #0]
 8001702:	4847      	ldr	r0, [pc, #284]	; (8001820 <main+0x214>)
 8001704:	f008 ff70 	bl	800a5e8 <iprintf>
			  //save to the flash
			  config_save1(&param) ;
 8001708:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fe73 	bl	80013f8 <config_save1>

			  feedback_periode = param.periode ;
 8001712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			  feedback_timer =  HAL_GetTick() ;
 8001718:	f000 fede 	bl	80024d8 <HAL_GetTick>
 800171c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		  }

	  }

	  //sending feedback every feedback_periode
	  if(HAL_GetTick() - feedback_timer >= feedback_periode * 1000)
 8001720:	f000 feda 	bl	80024d8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001734:	fb01 f202 	mul.w	r2, r1, r2
 8001738:	4293      	cmp	r3, r2
 800173a:	d334      	bcc.n	80017a6 <main+0x19a>
	  {
		  float flow = get_flow(feedback_periode /1000) ;
 800173c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001740:	4a38      	ldr	r2, [pc, #224]	; (8001824 <main+0x218>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1192      	asrs	r2, r2, #6
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f8cd 	bl	80018ec <get_flow>
 8001752:	67b8      	str	r0, [r7, #120]	; 0x78
		  sprintf(feedback ,"seuil :%f" ,flow);
 8001754:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001756:	f7fe fedf 	bl	8000518 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001762:	4931      	ldr	r1, [pc, #196]	; (8001828 <main+0x21c>)
 8001764:	f008 ffde 	bl	800a724 <siprintf>
		  ll_send_to(TRANSMITTER_ADDRESS ,(u8*) feedback , strlen(feedback) ,&callBack );
 8001768:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd11 	bl	8000194 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <main+0x220>)
 800177c:	2034      	movs	r0, #52	; 0x34
 800177e:	f007 fce9 	bl	8009154 <ll_send_to>
		  printf("nb pulse %d ,debit %f ,periode %d\n" ,number_of_pulses ,flow ,feedback_periode) ;
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <main+0x224>)
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001788:	f7fe fec6 	bl	8000518 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001794:	9100      	str	r1, [sp, #0]
 8001796:	4621      	mov	r1, r4
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <main+0x228>)
 800179a:	f008 ff25 	bl	800a5e8 <iprintf>
		  feedback_timer = HAL_GetTick() ;
 800179e:	f000 fe9b 	bl	80024d8 <HAL_GetTick>
 80017a2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  }

	  if(HAL_GetTick() - tx_monitor >= 5000 )
 80017a6:	f000 fe97 	bl	80024d8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d90e      	bls.n	80017d8 <main+0x1cc>
	  {
		printf("tx buffer size :%d , rx buffer size :%d\n",get_tx_size(),get_rx_size() );
 80017ba:	f007 fce9 	bl	8009190 <get_tx_size>
 80017be:	4604      	mov	r4, r0
 80017c0:	f007 fcf2 	bl	80091a8 <get_rx_size>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4621      	mov	r1, r4
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <main+0x22c>)
 80017cc:	f008 ff0c 	bl	800a5e8 <iprintf>
		tx_monitor = HAL_GetTick() ;
 80017d0:	f000 fe82 	bl	80024d8 <HAL_GetTick>
 80017d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  }

	  if(get_flow(feedback_periode /1000) >= param.seuil)
 80017d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <main+0x218>)
 80017de:	fb82 1203 	smull	r1, r2, r2, r3
 80017e2:	1192      	asrs	r2, r2, #6
 80017e4:	17db      	asrs	r3, r3, #31
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f87f 	bl	80018ec <get_flow>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017f2:	4619      	mov	r1, r3
 80017f4:	4610      	mov	r0, r2
 80017f6:	f7ff fb9f 	bl	8000f38 <__aeabi_fcmpge>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <main+0x1f8>
	  {
		  close_vanne() ;
 8001800:	f000 f888 	bl	8001914 <close_vanne>
	  else
	  {

	  }

	  ll_process() ;
 8001804:	f007 ff2c 	bl	8009660 <ll_process>
  {
 8001808:	e74c      	b.n	80016a4 <main+0x98>
 800180a:	bf00      	nop
 800180c:	0800e544 	.word	0x0800e544
 8001810:	0800e554 	.word	0x0800e554
 8001814:	0800e578 	.word	0x0800e578
 8001818:	0800e584 	.word	0x0800e584
 800181c:	0800e594 	.word	0x0800e594
 8001820:	0800e5a8 	.word	0x0800e5a8
 8001824:	10624dd3 	.word	0x10624dd3
 8001828:	0800e5c8 	.word	0x0800e5c8
 800182c:	080015f1 	.word	0x080015f1
 8001830:	20000200 	.word	0x20000200
 8001834:	0800e5d4 	.word	0x0800e5d4
 8001838:	0800e5f8 	.word	0x0800e5f8

0800183c <parse_transmetter_data>:
  /* USER CODE END 3 */
}


int parse_transmetter_data(char * t_data , int len , float *seuil , int *periode)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
	char tmp[6] ;

	//seuil :%0.2f , periode : %d
	char * per = strstr(t_data , ", periode :");
 800184a:	4926      	ldr	r1, [pc, #152]	; (80018e4 <parse_transmetter_data+0xa8>)
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f009 f96f 	bl	800ab30 <strstr>
 8001852:	61f8      	str	r0, [r7, #28]

	if(per == NULL)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <parse_transmetter_data+0x24>
	{
		return -1 ;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e03c      	b.n	80018da <parse_transmetter_data+0x9e>
	}

	char * se = strstr(t_data , "seuil :");
 8001860:	4921      	ldr	r1, [pc, #132]	; (80018e8 <parse_transmetter_data+0xac>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f009 f964 	bl	800ab30 <strstr>
 8001868:	61b8      	str	r0, [r7, #24]

	if(se == NULL)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <parse_transmetter_data+0x3a>
	{
		return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	e031      	b.n	80018da <parse_transmetter_data+0x9e>
	}

	se += 7 ;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3307      	adds	r3, #7
 800187a:	61bb      	str	r3, [r7, #24]
	memcpy(tmp , se, per - se);
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	461a      	mov	r2, r3
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	69b9      	ldr	r1, [r7, #24]
 800188a:	4618      	mov	r0, r3
 800188c:	f008 f8f0 	bl	8009a70 <memcpy>
	*seuil = atof(tmp) ;
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f008 f8aa 	bl	80099ee <atof>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f989 	bl	8000bb8 <__aeabi_d2f>
 80018a6:	4602      	mov	r2, r0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	601a      	str	r2, [r3, #0]

	per += 12;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	330c      	adds	r3, #12
 80018b0:	61fb      	str	r3, [r7, #28]
	memcpy(tmp , per ,(t_data+len - 1) - per) ;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	441a      	add	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f008 f8d2 	bl	8009a70 <memcpy>

	*periode = atoi(per) ;
 80018cc:	69f8      	ldr	r0, [r7, #28]
 80018ce:	f008 f891 	bl	80099f4 <atoi>
 80018d2:	4602      	mov	r2, r0
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	601a      	str	r2, [r3, #0]

	return 0 ;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800e624 	.word	0x0800e624
 80018e8:	0800e630 	.word	0x0800e630

080018ec <get_flow>:

//debit
float get_flow(int periode)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	return (float) (number_of_pulses / periode) ;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <get_flow+0x24>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa64 	bl	8000dcc <__aeabi_i2f>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000200 	.word	0x20000200

08001914 <close_vanne>:
{

}

void close_vanne()
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09a      	sub	sp, #104	; 0x68
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2248      	movs	r2, #72	; 0x48
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f008 f8ac 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001946:	f001 fb69 	bl	800301c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fe22 	bl	8001594 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <SystemClock_Config+0xb0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <SystemClock_Config+0xb0>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <SystemClock_Config+0xb0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800196c:	2324      	movs	r3, #36	; 0x24
 800196e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001970:	2381      	movs	r3, #129	; 0x81
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800197c:	23b0      	movs	r3, #176	; 0xb0
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fdf1 	bl	8003570 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001994:	f000 f8bc 	bl	8001b10 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001998:	234f      	movs	r3, #79	; 0x4f
 800199a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	2102      	movs	r1, #2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 f974 	bl	8003ca4 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019c2:	f000 f8a5 	bl	8001b10 <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3768      	adds	r7, #104	; 0x68
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	58000400 	.word	0x58000400

080019d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019da:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <MX_USART1_UART_Init+0xa4>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1c:	4815      	ldr	r0, [pc, #84]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a1e:	f003 fad6 	bl	8004fce <HAL_UART_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a28:	f000 f872 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4811      	ldr	r0, [pc, #68]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a30:	f004 f8c2 	bl	8005bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a3a:	f000 f869 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a42:	f004 f8f7 	bl	8005c34 <HAL_UARTEx_SetRxFifoThreshold>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a4c:	f000 f860 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <MX_USART1_UART_Init+0xa0>)
 8001a52:	f004 f879 	bl	8005b48 <HAL_UARTEx_DisableFifoMode>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a5c:	f000 f858 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 8001a60:	2024      	movs	r0, #36	; 0x24
 8001a62:	f7ff fd51 	bl	8001508 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 8001a66:	2101      	movs	r1, #1
 8001a68:	2024      	movs	r0, #36	; 0x24
 8001a6a:	f7ff fd69 	bl	8001540 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000478 	.word	0x20000478
 8001a78:	40013800 	.word	0x40013800

08001a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fd9b 	bl	80015be <LL_AHB2_GRP1_EnableClock>
  GPIO_InitTypeDef pin ;

  EXTI_ConfigTypeDef exti ;
  EXTI_HandleTypeDef exti_handler ;

  exti_handler.Line = EXTI_LINE_0 ;
 8001a88:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8001a8c:	607b      	str	r3, [r7, #4]

  exti.Line    =  EXTI_LINE_0;
 8001a8e:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8001a92:	60fb      	str	r3, [r7, #12]
  exti.Mode    =  EXTI_MODE_INTERRUPT;
 8001a94:	2301      	movs	r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
  exti.Trigger =  EXTI_TRIGGER_RISING;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  exti.GPIOSel =  EXTI_GPIOB;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61bb      	str	r3, [r7, #24]


  HAL_EXTI_SetConfigLine(&exti_handler , &exti ) ;
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fe4f 	bl	800274c <HAL_EXTI_SetConfigLine>

  pin.Mode  = GPIO_MODE_IT_RISING ;
 8001aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab2:	623b      	str	r3, [r7, #32]
  pin.Pin   = GPIO_PIN_0  ;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
  pin.Pull  = GPIO_PULLDOWN  ;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  pin.Speed = GPIO_SPEED_FREQ_HIGH ;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(GPIOB , &pin ) ;
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_GPIO_Init+0x68>)
 8001ac8:	f001 f90e 	bl	8002ce8 <HAL_GPIO_Init>

  __NVIC_EnableIRQ(EXTI0_IRQn);
 8001acc:	2006      	movs	r0, #6
 8001ace:	f7ff fd1b 	bl	8001508 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(EXTI0_IRQn , 0x0);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2006      	movs	r0, #6
 8001ad6:	f7ff fd33 	bl	8001540 <__NVIC_SetPriority>

}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	number_of_pulses++;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <EXTI0_IRQHandler+0x20>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <EXTI0_IRQHandler+0x20>)
 8001af4:	6013      	str	r3, [r2, #0]
	printf("int\n");
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <EXTI0_IRQHandler+0x24>)
 8001af8:	f008 fdfc 	bl	800a6f4 <puts>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0) ;
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 fa6b 	bl	8002fd8 <HAL_GPIO_EXTI_IRQHandler>

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000200 	.word	0x20000200
 8001b0c:	0800e638 	.word	0x0800e638

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>

08001b1a <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32  sys_get_tick()
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 8001b1e:	f000 fcdb 	bl	80024d8 <HAL_GetTick>
 8001b22:	4603      	mov	r3, r0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <sys_random>:

extern u8   sys_random()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 8001b2c:	f000 f99e 	bl	8001e6c <get_random>
 8001b30:	4601      	mov	r1, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <sys_random+0x20>)
 8001b34:	fba3 2301 	umull	r2, r3, r3, r1
 8001b38:	09da      	lsrs	r2, r3, #7
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	1aca      	subs	r2, r1, r3
 8001b42:	b2d3      	uxtb	r3, r2
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	80808081 	.word	0x80808081

08001b4c <__io_getchar>:

int __io_getchar(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 8001b52:	1d39      	adds	r1, r7, #4
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <__io_getchar+0x20>)
 8001b5c:	f003 fb1d 	bl	800519a <HAL_UART_Receive>
	return ch ;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000478 	.word	0x20000478

08001b70 <__io_putchar>:

int __io_putchar(int ch)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 8001b78:	1d39      	adds	r1, r7, #4
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <__io_putchar+0x20>)
 8001b80:	f003 fa75 	bl	800506e <HAL_UART_Transmit>
	return ch ;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000478 	.word	0x20000478

08001b94 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001b98:	f000 fb82 	bl	80022a0 <BSP_RADIO_Init>
 8001b9c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fbb4 	bl	800231c <BSP_RADIO_ConfigRFSwitch>
 8001bb4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001bc2:	f000 fc07 	bl	80023d4 <BSP_RADIO_GetTxConfig>
 8001bc6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001bd0:	f000 fc07 	bl	80023e2 <BSP_RADIO_IsTCXO>
 8001bd4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001bde:	f000 fc07 	bl	80023f0 <BSP_RADIO_IsDCDC>
 8001be2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <ring_pushOver+0x28>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e002      	b.n	8001c16 <ring_pushOver+0x2e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	3301      	adds	r3, #1
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d110      	bne.n	8001c48 <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d302      	bcc.n	8001c3a <ring_pushOver+0x52>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e002      	b.n	8001c40 <ring_pushOver+0x58>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	60d3      	str	r3, [r2, #12]
        return 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <ring_pushOver+0x62>
    }
    
    return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_AHB2_GRP1_EnableClock>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b096      	sub	sp, #88	; 0x58
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2238      	movs	r2, #56	; 0x38
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f007 fed3 	bl	8009a8c <memset>
  if(huart->Instance==USART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_UART_MspInit+0x94>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12d      	bne.n	8001d4c <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cf4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001cf8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fb76 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f7ff ff01 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d12:	f7ff ffb7 	bl	8001c84 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7ff ff9c 	bl	8001c54 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d1c:	23c0      	movs	r3, #192	; 0xc0
 8001d1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d34:	4619      	mov	r1, r3
 8001d36:	4808      	ldr	r0, [pc, #32]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001d38:	f000 ffd6 	bl	8002ce8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2024      	movs	r0, #36	; 0x24
 8001d42:	f000 fcce 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d46:	2024      	movs	r0, #36	; 0x24
 8001d48:	f000 fce5 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3758      	adds	r7, #88	; 0x58
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40013800 	.word	0x40013800
 8001d58:	48000400 	.word	0x48000400

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f000 fb87 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <USART1_IRQHandler+0x2c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <USART1_IRQHandler+0x2c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fa10 	bl	80021f0 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000478 	.word	0x20000478

08001ddc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <SUBGHZ_Radio_IRQHandler+0x10>)
 8001de2:	f002 ff35 	bl	8004c50 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000508 	.word	0x20000508

08001df0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_SUBGHZ_Init+0x20>)
 8001e26:	2208      	movs	r2, #8
 8001e28:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_SUBGHZ_Init+0x20>)
 8001e2c:	f002 fc94 	bl	8004758 <HAL_SUBGHZ_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e36:	f7ff fe6b 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000508 	.word	0x20000508

08001e44 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff ffcf 	bl	8001df0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2032      	movs	r0, #50	; 0x32
 8001e58:	f000 fc43 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e5c:	2032      	movs	r0, #50	; 0x32
 8001e5e:	f000 fc5a 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <get_random+0x10>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4798      	blx	r3
 8001e76:	4603      	mov	r3, r0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	0800eaac 	.word	0x0800eaac

08001e80 <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 8001e86:	2300      	movs	r3, #0
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	483d      	ldr	r0, [pc, #244]	; (8001f84 <SubghzApp_Init+0x104>)
 8001e8e:	f008 fbab 	bl	800a5e8 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <SubghzApp_Init+0x108>)
 8001e94:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <SubghzApp_Init+0x10c>)
 8001e96:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <SubghzApp_Init+0x108>)
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <SubghzApp_Init+0x110>)
 8001e9c:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <SubghzApp_Init+0x108>)
 8001ea0:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <SubghzApp_Init+0x114>)
 8001ea2:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <SubghzApp_Init+0x108>)
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <SubghzApp_Init+0x118>)
 8001ea8:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <SubghzApp_Init+0x108>)
 8001eac:	4a3b      	ldr	r2, [pc, #236]	; (8001f9c <SubghzApp_Init+0x11c>)
 8001eae:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4834      	ldr	r0, [pc, #208]	; (8001f88 <SubghzApp_Init+0x108>)
 8001eb6:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4839      	ldr	r0, [pc, #228]	; (8001fa4 <SubghzApp_Init+0x124>)
 8001ebe:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001ec0:	4839      	ldr	r0, [pc, #228]	; (8001fa8 <SubghzApp_Init+0x128>)
 8001ec2:	f008 fb91 	bl	800a5e8 <iprintf>
  printf("LORA_MODULATION\n\r");
 8001ec6:	4839      	ldr	r0, [pc, #228]	; (8001fac <SubghzApp_Init+0x12c>)
 8001ec8:	f008 fb8e 	bl	800a5e8 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001ecc:	217d      	movs	r1, #125	; 0x7d
 8001ece:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <SubghzApp_Init+0x130>)
 8001ed0:	f008 fb8a 	bl	800a5e8 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001ed4:	2107      	movs	r1, #7
 8001ed6:	4837      	ldr	r0, [pc, #220]	; (8001fb4 <SubghzApp_Init+0x134>)
 8001ed8:	f008 fb86 	bl	800a5e8 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001ede:	69dc      	ldr	r4, [r3, #28]
 8001ee0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ee4:	9308      	str	r3, [sp, #32]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9307      	str	r3, [sp, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9306      	str	r3, [sp, #24]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9305      	str	r3, [sp, #20]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9304      	str	r3, [sp, #16]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9303      	str	r3, [sp, #12]
 8001efa:	2308      	movs	r3, #8
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2307      	movs	r3, #7
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2114      	movs	r1, #20
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001f10:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001f12:	699c      	ldr	r4, [r3, #24]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9309      	str	r3, [sp, #36]	; 0x24
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9308      	str	r3, [sp, #32]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9307      	str	r3, [sp, #28]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9306      	str	r3, [sp, #24]
 8001f24:	2301      	movs	r3, #1
 8001f26:	9305      	str	r3, [sp, #20]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9304      	str	r3, [sp, #16]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9303      	str	r3, [sp, #12]
 8001f30:	2305      	movs	r3, #5
 8001f32:	9302      	str	r3, [sp, #8]
 8001f34:	2308      	movs	r3, #8
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2207      	movs	r2, #7
 8001f40:	2100      	movs	r1, #0
 8001f42:	2001      	movs	r0, #1
 8001f44:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	21ff      	movs	r1, #255	; 0xff
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	4798      	blx	r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	0d9b      	lsrs	r3, r3, #22
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <SubghzApp_Init+0x138>)
 8001f5e:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001f60:	22ff      	movs	r2, #255	; 0xff
 8001f62:	2100      	movs	r1, #0
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <SubghzApp_Init+0x13c>)
 8001f66:	f007 fd91 	bl	8009a8c <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <SubghzApp_Init+0x120>)
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <SubghzApp_Init+0x138>)
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8001f76:	4610      	mov	r0, r2
 8001f78:	4798      	blx	r3

}
 8001f7a:	bf00      	nop
 8001f7c:	3704      	adds	r7, #4
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800e63c 	.word	0x0800e63c
 8001f88:	20000204 	.word	0x20000204
 8001f8c:	08001fc1 	.word	0x08001fc1
 8001f90:	08001fcd 	.word	0x08001fcd
 8001f94:	08001ff9 	.word	0x08001ff9
 8001f98:	08002015 	.word	0x08002015
 8001f9c:	08002031 	.word	0x08002031
 8001fa0:	0800eaac 	.word	0x0800eaac
 8001fa4:	33bca100 	.word	0x33bca100
 8001fa8:	0800e658 	.word	0x0800e658
 8001fac:	0800e66c 	.word	0x0800e66c
 8001fb0:	0800e680 	.word	0x0800e680
 8001fb4:	0800e694 	.word	0x0800e694
 8001fb8:	20000324 	.word	0x20000324
 8001fbc:	20000224 	.word	0x20000224

08001fc0 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001fc4:	f007 fb76 	bl	80096b4 <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f007 f990 	bl	8009310 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <OnTxTimeout+0x14>)
 8001ffe:	f008 faf3 	bl	800a5e8 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <OnTxTimeout+0x18>)
 8002004:	2204      	movs	r2, #4
 8002006:	701a      	strb	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800e6a4 	.word	0x0800e6a4
 8002010:	20000220 	.word	0x20000220

08002014 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <OnRxTimeout+0x14>)
 800201a:	f008 fae5 	bl	800a5e8 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800201e:	4b03      	ldr	r3, [pc, #12]	; (800202c <OnRxTimeout+0x18>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	0800e6b4 	.word	0x0800e6b4
 800202c:	20000220 	.word	0x20000220

08002030 <OnRxError>:

static void OnRxError(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8002034:	4803      	ldr	r0, [pc, #12]	; (8002044 <OnRxError+0x14>)
 8002036:	f008 fad7 	bl	800a5e8 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <OnRxError+0x18>)
 800203c:	2202      	movs	r2, #2
 800203e:	701a      	strb	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	0800e6c4 	.word	0x0800e6c4
 8002048:	20000220 	.word	0x20000220

0800204c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_kill>:

int _kill(int pid, int sig)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002064:	f007 fcca 	bl	80099fc <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	2216      	movs	r2, #22
 800206c:	601a      	str	r2, [r3, #0]
	return -1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_exit>:

void _exit (int status)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002082:	f04f 31ff 	mov.w	r1, #4294967295
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffe7 	bl	800205a <_kill>
	while (1) {}		/* Make sure we hang here */
 800208c:	e7fe      	b.n	800208c <_exit+0x12>

0800208e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e00a      	b.n	80020b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a0:	f7ff fd54 	bl	8001b4c <__io_getchar>
 80020a4:	4601      	mov	r1, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbf0      	blt.n	80020a0 <_read+0x12>
	}

return len;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e009      	b.n	80020ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	60ba      	str	r2, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fd44 	bl	8001b70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbf1      	blt.n	80020da <_write+0x12>
	}
	return len;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_close>:

int _close(int file)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002126:	605a      	str	r2, [r3, #4]
	return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <_isatty>:

int _isatty(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f007 fc34 	bl	80099fc <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20008000 	.word	0x20008000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000328 	.word	0x20000328
 80021c8:	20000600 	.word	0x20000600

080021cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <set_NL_detection+0x14>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000032c 	.word	0x2000032c

080021f0 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b0a      	cmp	r3, #10
 80021fe:	d101      	bne.n	8002204 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8002200:	f7ff ffea 	bl	80021d8 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4619      	mov	r1, r3
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <uart_RX_interrupt_hanlder+0x28>)
 800220a:	f7ff fced 	bl	8001be8 <ring_pushOver>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000514 	.word	0x20000514

0800221c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800221e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002220:	f7ff ffd4 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	; (800225c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800224a:	f007 fbdd 	bl	8009a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224e:	f7ff f9dd 	bl	800160c <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
  ldr   r0, =_estack
 8002254:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002260:	0800f73c 	.word	0x0800f73c
  ldr r2, =_sbss
 8002264:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002268:	20000600 	.word	0x20000600

0800226c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC_IRQHandler>

0800226e <LL_AHB2_GRP1_EnableClock>:
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800227c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4313      	orrs	r3, r2
 8002284:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80022b4:	2004      	movs	r0, #4
 80022b6:	f7ff ffda 	bl	800226e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80022ba:	2310      	movs	r3, #16
 80022bc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4812      	ldr	r0, [pc, #72]	; (8002318 <BSP_RADIO_Init+0x78>)
 80022d0:	f000 fd0a 	bl	8002ce8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80022d4:	2320      	movs	r3, #32
 80022d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <BSP_RADIO_Init+0x78>)
 80022de:	f000 fd03 	bl	8002ce8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80022e2:	2308      	movs	r3, #8
 80022e4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <BSP_RADIO_Init+0x78>)
 80022ec:	f000 fcfc 	bl	8002ce8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80022f0:	2200      	movs	r2, #0
 80022f2:	2120      	movs	r1, #32
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <BSP_RADIO_Init+0x78>)
 80022f6:	f000 fe57 	bl	8002fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80022fa:	2200      	movs	r2, #0
 80022fc:	2110      	movs	r1, #16
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <BSP_RADIO_Init+0x78>)
 8002300:	f000 fe52 	bl	8002fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002304:	2200      	movs	r2, #0
 8002306:	2108      	movs	r1, #8
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <BSP_RADIO_Init+0x78>)
 800230a:	f000 fe4d 	bl	8002fa8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	48000800 	.word	0x48000800

0800231c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d84b      	bhi.n	80023c4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002345 	.word	0x08002345
 8002338:	08002365 	.word	0x08002365
 800233c:	08002385 	.word	0x08002385
 8002340:	080023a5 	.word	0x080023a5
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2108      	movs	r1, #8
 8002348:	4821      	ldr	r0, [pc, #132]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800234a:	f000 fe2d 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2110      	movs	r1, #16
 8002352:	481f      	ldr	r0, [pc, #124]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002354:	f000 fe28 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2120      	movs	r1, #32
 800235c:	481c      	ldr	r0, [pc, #112]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800235e:	f000 fe23 	bl	8002fa8 <HAL_GPIO_WritePin>
      break;      
 8002362:	e030      	b.n	80023c6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2108      	movs	r1, #8
 8002368:	4819      	ldr	r0, [pc, #100]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800236a:	f000 fe1d 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	4817      	ldr	r0, [pc, #92]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002374:	f000 fe18 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002378:	2200      	movs	r2, #0
 800237a:	2120      	movs	r1, #32
 800237c:	4814      	ldr	r0, [pc, #80]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800237e:	f000 fe13 	bl	8002fa8 <HAL_GPIO_WritePin>
      break;
 8002382:	e020      	b.n	80023c6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	2108      	movs	r1, #8
 8002388:	4811      	ldr	r0, [pc, #68]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800238a:	f000 fe0d 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800238e:	2201      	movs	r2, #1
 8002390:	2110      	movs	r1, #16
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002394:	f000 fe08 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002398:	2201      	movs	r2, #1
 800239a:	2120      	movs	r1, #32
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800239e:	f000 fe03 	bl	8002fa8 <HAL_GPIO_WritePin>
      break;
 80023a2:	e010      	b.n	80023c6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2108      	movs	r1, #8
 80023a8:	4809      	ldr	r0, [pc, #36]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80023aa:	f000 fdfd 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80023ae:	2200      	movs	r2, #0
 80023b0:	2110      	movs	r1, #16
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80023b4:	f000 fdf8 	bl	8002fa8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80023b8:	2201      	movs	r2, #1
 80023ba:	2120      	movs	r1, #32
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80023be:	f000 fdf3 	bl	8002fa8 <HAL_GPIO_WritePin>
      break;
 80023c2:	e000      	b.n	80023c6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80023c4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	48000800 	.word	0x48000800

080023d4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240a:	2003      	movs	r0, #3
 800240c:	f000 f95e 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002410:	f001 fe0c 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8002414:	4603      	mov	r3, r0
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_Init+0x3c>)
 8002418:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241a:	200f      	movs	r0, #15
 800241c:	f000 f810 	bl	8002440 <HAL_InitTick>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	e001      	b.n	8002430 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800242c:	f7ff fc42 	bl	8001cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002430:	79fb      	ldrb	r3, [r7, #7]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_InitTick+0x6c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d024      	beq.n	800249e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002454:	f001 fdea 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_InitTick+0x6c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	fbb3 f3f1 	udiv	r3, r3, r1
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f960 	bl	8002732 <HAL_SYSTICK_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	d809      	bhi.n	8002492 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247e:	2200      	movs	r2, #0
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
 8002486:	f000 f92c 	bl	80026e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_InitTick+0x70>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e007      	b.n	80024a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	e004      	b.n	80024a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e001      	b.n	80024a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_IncTick+0x20>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000588 	.word	0x20000588

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000588 	.word	0x20000588

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000008 	.word	0x20000008

08002534 <__NVIC_SetPriorityGrouping>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <__NVIC_EnableIRQ+0x34>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff90 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff2d 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff44 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff92 	bl	8002624 <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff61 	bl	80025d0 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff37 	bl	8002598 <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa4 	bl	8002688 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_EXTI_SetConfigLine+0x16>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0b9      	b.n	80028da <HAL_EXTI_SetConfigLine+0x18e>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8002784:	2201      	movs	r2, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d064      	beq.n	8002864 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	015b      	lsls	r3, r3, #5
 800279e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80027a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a6:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_EXTI_SetConfigLine+0x78>
    {
      regval |= maskline;
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e004      	b.n	80027ce <HAL_EXTI_SetConfigLine+0x82>
    }
    else
    {
      regval &= ~maskline;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	015b      	lsls	r3, r3, #5
 80027d8:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80027dc:	f603 0304 	addw	r3, r3, #2052	; 0x804
 80027e0:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_EXTI_SetConfigLine+0xb2>
    {
      regval |= maskline;
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e004      	b.n	8002808 <HAL_EXTI_SetConfigLine+0xbc>
    }
    else
    {
      regval &= ~maskline;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4013      	ands	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002816:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800281a:	d123      	bne.n	8002864 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_EXTI_SetConfigLine+0x198>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	61fb      	str	r3, [r7, #28]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	2207      	movs	r2, #7
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	4013      	ands	r3, r2
 800283e:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	4313      	orrs	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8002856:	4923      	ldr	r1, [pc, #140]	; (80028e4 <HAL_EXTI_SetConfigLine+0x198>)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* Configure interrupt mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800286c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8002870:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_EXTI_SetConfigLine+0x142>
  {
    regval |= maskline;
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e004      	b.n	8002898 <HAL_EXTI_SetConfigLine+0x14c>
  }
  else
  {
    regval &= ~maskline;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4013      	ands	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	601a      	str	r2, [r3, #0]

  /* Configure event mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80028a6:	f603 0384 	addw	r3, r3, #2180	; 0x884
 80028aa:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_EXTI_SetConfigLine+0x17c>
  {
    /* The event mode cannot be configured if the line does not support it */
    assert_param(IS_EXTI_EVENT_PRESENT(pExtiConfig->Line));
    regval |= maskline;
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e004      	b.n	80028d2 <HAL_EXTI_SetConfigLine+0x186>
  }
  else
  {
    regval &= ~maskline;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40010000 	.word	0x40010000

080028e8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_FLASH_Program+0x80>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_FLASH_Program+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e02d      	b.n	800295e <HAL_FLASH_Program+0x76>
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_FLASH_Program+0x80>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_FLASH_Program+0x80>)
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800290e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002912:	f000 f84f 	bl	80029b4 <FLASH_WaitForLastOperation>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11a      	bne.n	8002956 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800292a:	68b8      	ldr	r0, [r7, #8]
 800292c:	f000 f8a4 	bl	8002a78 <FLASH_Program_DoubleWord>
 8002930:	e004      	b.n	800293c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	f000 f8c4 	bl	8002ac4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800293c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002940:	f000 f838 	bl	80029b4 <FLASH_WaitForLastOperation>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_FLASH_Program+0x84>)
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	4906      	ldr	r1, [pc, #24]	; (800296c <HAL_FLASH_Program+0x84>)
 8002952:	4013      	ands	r3, r2
 8002954:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_FLASH_Program+0x80>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000330 	.word	0x20000330
 800296c:	58004000 	.word	0x58004000

08002970 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_FLASH_Unlock+0x38>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	da0b      	bge.n	800299a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_FLASH_Unlock+0x38>)
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_FLASH_Unlock+0x3c>)
 8002986:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_FLASH_Unlock+0x38>)
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_FLASH_Unlock+0x40>)
 800298c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_FLASH_Unlock+0x38>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da01      	bge.n	800299a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800299a:	79fb      	ldrb	r3, [r7, #7]
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	58004000 	.word	0x58004000
 80029ac:	45670123 	.word	0x45670123
 80029b0:	cdef89ab 	.word	0xcdef89ab

080029b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff fd8c 	bl	80024d8 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80029c2:	e009      	b.n	80029d8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80029c4:	f7ff fd88 	bl	80024d8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d801      	bhi.n	80029d8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e047      	b.n	8002a68 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d0ee      	beq.n	80029c4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002a02:	4013      	ands	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <FLASH_WaitForLastOperation+0x6c>
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002a1a:	4915      	ldr	r1, [pc, #84]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	618b      	str	r3, [r1, #24]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <FLASH_WaitForLastOperation+0x80>
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a32:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <FLASH_WaitForLastOperation+0xc0>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e011      	b.n	8002a68 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002a44:	f7ff fd48 	bl	80024d8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d801      	bhi.n	8002a58 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e007      	b.n	8002a68 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <FLASH_WaitForLastOperation+0xbc>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a64:	d0ee      	beq.n	8002a44 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	58004000 	.word	0x58004000
 8002a74:	20000330 	.word	0x20000330

08002a78 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <FLASH_Program_DoubleWord+0x48>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <FLASH_Program_DoubleWord+0x48>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002a96:	f3bf 8f6f 	isb	sy
}
 8002a9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	2300      	movs	r3, #0
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	3104      	adds	r1, #4
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58004000 	.word	0x58004000

08002ac4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <FLASH_Program_Fast+0x78>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <FLASH_Program_Fast+0x78>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8002aec:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8002aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
}
 8002af2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	3304      	adds	r3, #4
 8002b00:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3304      	adds	r3, #4
 8002b06:	617b      	str	r3, [r7, #20]
    row_index--;
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ef      	bne.n	8002af4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8002b14:	bf00      	nop
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <FLASH_Program_Fast+0x78>)
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d0f8      	beq.n	8002b16 <FLASH_Program_Fast+0x52>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	58004000 	.word	0x58004000

08002b40 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_FLASHEx_Erase+0xac>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_FLASHEx_Erase+0x16>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e046      	b.n	8002be4 <HAL_FLASHEx_Erase+0xa4>
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_FLASHEx_Erase+0xac>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b5c:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_FLASHEx_Erase+0xac>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b66:	f7ff ff25 	bl	80029b4 <FLASH_WaitForLastOperation>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d133      	bne.n	8002bdc <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d108      	bne.n	8002b8e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8002b7c:	f000 f838 	bl	8002bf0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b84:	f7ff ff16 	bl	80029b4 <FLASH_WaitForLastOperation>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e024      	b.n	8002bd8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	e012      	b.n	8002bc4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8002b9e:	68b8      	ldr	r0, [r7, #8]
 8002ba0:	f000 f836 	bl	8002c10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ba8:	f7ff ff04 	bl	80029b4 <FLASH_WaitForLastOperation>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	601a      	str	r2, [r3, #0]
          break;
 8002bbc:	e00a      	b.n	8002bd4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4413      	add	r3, r2
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3e4      	bcc.n	8002b9e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8002bd4:	f000 f878 	bl	8002cc8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002bd8:	f000 f832 	bl	8002c40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_FLASHEx_Erase+0xac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]

  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000330 	.word	0x20000330

08002bf0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <FLASH_MassErase+0x1c>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <FLASH_MassErase+0x1c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6153      	str	r3, [r2, #20]
#endif
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	58004000 	.word	0x58004000

08002c10 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <FLASH_PageErase+0x2c>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <FLASH_PageErase+0x2c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6153      	str	r3, [r2, #20]
#endif
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	58004000 	.word	0x58004000

08002c40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d117      	bne.n	8002c80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d117      	bne.n	8002cbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <FLASH_FlushCaches+0x84>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	58004000 	.word	0x58004000

08002cc8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <FLASH_AcknowledgePageErase+0x1c>)
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <FLASH_AcknowledgePageErase+0x1c>)
 8002cd2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002cd6:	f023 0302 	bic.w	r3, r3, #2
 8002cda:	6153      	str	r3, [r2, #20]
#endif
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	58004000 	.word	0x58004000

08002ce8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	e140      	b.n	8002f7a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8132 	beq.w	8002f74 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d005      	beq.n	8002d28 <HAL_GPIO_Init+0x40>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d130      	bne.n	8002d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5e:	2201      	movs	r2, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0201 	and.w	r2, r3, #1
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d017      	beq.n	8002dc6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d123      	bne.n	8002e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	6939      	ldr	r1, [r7, #16]
 8002e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0203 	and.w	r2, r3, #3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 808c 	beq.w	8002f74 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e5c:	4a4e      	ldr	r2, [pc, #312]	; (8002f98 <HAL_GPIO_Init+0x2b0>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	2207      	movs	r2, #7
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e86:	d00d      	beq.n	8002ea4 <HAL_GPIO_Init+0x1bc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a44      	ldr	r2, [pc, #272]	; (8002f9c <HAL_GPIO_Init+0x2b4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_GPIO_Init+0x1b8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <HAL_GPIO_Init+0x2b8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_GPIO_Init+0x1b4>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e004      	b.n	8002ea6 <HAL_GPIO_Init+0x1be>
 8002e9c:	2307      	movs	r3, #7
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0x1be>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_Init+0x1be>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	f002 0203 	and.w	r2, r2, #3
 8002eac:	0092      	lsls	r2, r2, #2
 8002eae:	4093      	lsls	r3, r2
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eb6:	4938      	ldr	r1, [pc, #224]	; (8002f98 <HAL_GPIO_Init+0x2b0>)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002eea:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_GPIO_Init+0x2bc>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f47f aeb7 	bne.w	8002cf8 <HAL_GPIO_Init+0x10>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	58000800 	.word	0x58000800

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f806 	bl	8003008 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58000800 	.word	0x58000800

08003008 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a03      	ldr	r2, [pc, #12]	; (8003034 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	58000400 	.word	0x58000400

08003038 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_PWREx_GetVoltageRange+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d101      	bne.n	8003066 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	58000400 	.word	0x58000400

08003074 <LL_RCC_HSE_EnableTcxo>:
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_RCC_HSE_DisableTcxo>:
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030be:	d101      	bne.n	80030c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_HSE_Enable>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_HSE_Disable>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <LL_RCC_HSE_IsReady>:
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003118:	d101      	bne.n	800311e <LL_RCC_HSE_IsReady+0x18>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <LL_RCC_HSE_IsReady+0x1a>
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <LL_RCC_HSI_Enable>:
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <LL_RCC_HSI_Disable>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <LL_RCC_HSI_IsReady>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d101      	bne.n	8003178 <LL_RCC_HSI_IsReady+0x18>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <LL_RCC_HSI_IsReady+0x1a>
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d101      	bne.n	80031c2 <LL_RCC_LSE_IsReady+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_RCC_LSE_IsReady+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d101      	bne.n	8003224 <LL_RCC_LSI_IsReady+0x18>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_RCC_LSI_IsReady+0x1a>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d101      	bne.n	800327c <LL_RCC_MSI_IsReady+0x16>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <LL_RCC_MSI_IsReady+0x18>
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d101      	bne.n	800329c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 030c 	and.w	r3, r3, #12
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800336e:	f023 020f 	bic.w	r2, r3, #15
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003444:	6013      	str	r3, [r2, #0]
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003460:	6013      	str	r3, [r2, #0]
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347c:	d101      	bne.n	8003482 <LL_RCC_PLL_IsReady+0x18>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <LL_RCC_PLL_IsReady+0x1a>
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d101      	bne.n	80034fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d101      	bne.n	8003522 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800353e:	d101      	bne.n	8003544 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003560:	d101      	bne.n	8003566 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e38a      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003582:	f7ff fece 	bl	8003322 <LL_RCC_GetSysClkSource>
 8003586:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003588:	f7ff ffa2 	bl	80034d0 <LL_RCC_PLL_GetMainSource>
 800358c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80c9 	beq.w	800372e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x3e>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d17b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d178      	bne.n	80036a0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ae:	f7ff fe5a 	bl	8003266 <LL_RCC_MSI_IsReady>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x54>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e369      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x72>
 80035d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e0:	e006      	b.n	80035f0 <HAL_RCC_OscConfig+0x80>
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d222      	bcs.n	800363a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fd4f 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e347      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe4e 	bl	80032d4 <LL_RCC_MSI_SetCalibTrimming>
 8003638:	e021      	b.n	800367e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fe35 	bl	80032d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fd14 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e30c      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800367e:	f000 fcd5 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8003682:	4603      	mov	r3, r0
 8003684:	4ab4      	ldr	r2, [pc, #720]	; (8003958 <HAL_RCC_OscConfig+0x3e8>)
 8003686:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003688:	4bb4      	ldr	r3, [pc, #720]	; (800395c <HAL_RCC_OscConfig+0x3ec>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fed7 	bl	8002440 <HAL_InitTick>
 8003692:	4603      	mov	r3, r0
 8003694:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d047      	beq.n	800372c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	e2fb      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d02c      	beq.n	8003702 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036a8:	f7ff fdc1 	bl	800322e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ac:	f7fe ff14 	bl	80024d8 <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036b4:	f7fe ff10 	bl	80024d8 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e2e8      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80036c6:	f7ff fdce 	bl	8003266 <LL_RCC_MSI_IsReady>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f1      	beq.n	80036b4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fdea 	bl	80032d4 <LL_RCC_MSI_SetCalibTrimming>
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003702:	f7ff fda2 	bl	800324a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003706:	f7fe fee7 	bl	80024d8 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370e:	f7fe fee3 	bl	80024d8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e2bb      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003720:	f7ff fda1 	bl	8003266 <LL_RCC_MSI_IsReady>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f1      	bne.n	800370e <HAL_RCC_OscConfig+0x19e>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05f      	beq.n	80037fa <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x1dc>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d10d      	bne.n	8003762 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10a      	bne.n	8003762 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	f7ff fcdb 	bl	8003106 <LL_RCC_HSE_IsReady>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d050      	beq.n	80037f8 <HAL_RCC_OscConfig+0x288>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d14c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e29a      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x218>
 8003782:	f7ff fca4 	bl	80030ce <LL_RCC_HSE_Enable>
 8003786:	e00d      	b.n	80037a4 <HAL_RCC_OscConfig+0x234>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003790:	d104      	bne.n	800379c <HAL_RCC_OscConfig+0x22c>
 8003792:	f7ff fc6f 	bl	8003074 <LL_RCC_HSE_EnableTcxo>
 8003796:	f7ff fc9a 	bl	80030ce <LL_RCC_HSE_Enable>
 800379a:	e003      	b.n	80037a4 <HAL_RCC_OscConfig+0x234>
 800379c:	f7ff fca5 	bl	80030ea <LL_RCC_HSE_Disable>
 80037a0:	f7ff fc76 	bl	8003090 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d012      	beq.n	80037d2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fe94 	bl	80024d8 <HAL_GetTick>
 80037b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fe90 	bl	80024d8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e268      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80037c6:	f7ff fc9e 	bl	8003106 <LL_RCC_HSE_IsReady>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f1      	beq.n	80037b4 <HAL_RCC_OscConfig+0x244>
 80037d0:	e013      	b.n	80037fa <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe fe81 	bl	80024d8 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037da:	f7fe fe7d 	bl	80024d8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	; 0x64
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e255      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80037ec:	f7ff fc8b 	bl	8003106 <LL_RCC_HSE_IsReady>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f1      	bne.n	80037da <HAL_RCC_OscConfig+0x26a>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04b      	beq.n	800389e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x2a8>
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d113      	bne.n	800383a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d110      	bne.n	800383a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	f7ff fca2 	bl	8003160 <LL_RCC_HSI_IsReady>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x2be>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e234      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fca5 	bl	8003182 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003838:	e031      	b.n	800389e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003842:	f7ff fc71 	bl	8003128 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fe fe47 	bl	80024d8 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384e:	f7fe fe43 	bl	80024d8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e21b      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003860:	f7ff fc7e 	bl	8003160 <LL_RCC_HSI_IsReady>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f1      	beq.n	800384e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fc87 	bl	8003182 <LL_RCC_HSI_SetCalibTrimming>
 8003874:	e013      	b.n	800389e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	f7ff fc65 	bl	8003144 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe fe2d 	bl	80024d8 <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7fe fe29 	bl	80024d8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e201      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003894:	f7ff fc64 	bl	8003160 <LL_RCC_HSI_IsReady>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f1      	bne.n	8003882 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d06e      	beq.n	8003988 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d056      	beq.n	8003960 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ba:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d031      	beq.n	800392e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1da      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80038ec:	f7ff fc7e 	bl	80031ec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038f0:	f7fe fdf2 	bl	80024d8 <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fe fdee 	bl	80024d8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b11      	cmp	r3, #17
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1c6      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800390a:	f7ff fc7f 	bl	800320c <LL_RCC_LSI_IsReady>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f1      	bne.n	80038f8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	f023 0210 	bic.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	f7ff fc4d 	bl	80031cc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe fdd1 	bl	80024d8 <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe fdcd 	bl	80024d8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b11      	cmp	r3, #17
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1a5      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800394c:	f7ff fc5e 	bl	800320c <LL_RCC_LSI_IsReady>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f1      	beq.n	800393a <HAL_RCC_OscConfig+0x3ca>
 8003956:	e017      	b.n	8003988 <HAL_RCC_OscConfig+0x418>
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	f7ff fc44 	bl	80031ec <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fdb8 	bl	80024d8 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fdb4 	bl	80024d8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b11      	cmp	r3, #17
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e18c      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800397e:	f7ff fc45 	bl	800320c <LL_RCC_LSI_IsReady>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f1      	bne.n	800396c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80d8 	beq.w	8003b46 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003996:	f7ff fb5b 	bl	8003050 <LL_PWR_IsEnabledBkUpAccess>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80039a0:	f7ff fb3c 	bl	800301c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a4:	f7fe fd98 	bl	80024d8 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fe fd94 	bl	80024d8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e16c      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80039be:	f7ff fb47 	bl	8003050 <LL_PWR_IsEnabledBkUpAccess>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f1      	beq.n	80039ac <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b85      	cmp	r3, #133	; 0x85
 80039d6:	d003      	beq.n	80039e0 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d109      	bne.n	80039f4 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ec:	f043 0304 	orr.w	r3, r3, #4
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe fd70 	bl	80024d8 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fe fd62 	bl	80024d8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e138      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a26:	f7ff fbc0 	bl	80031aa <LL_RCC_LSE_IsReady>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ef      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b81      	cmp	r3, #129	; 0x81
 8003a36:	d003      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b85      	cmp	r3, #133	; 0x85
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fd4a 	bl	80024d8 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fd3c 	bl	80024d8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e112      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ec      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a82:	e060      	b.n	8003b46 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fd28 	bl	80024d8 <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fd1a 	bl	80024d8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0f0      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ec      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x530>
 8003ac6:	e03e      	b.n	8003b46 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe fd06 	bl	80024d8 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fcf8 	bl	80024d8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0ce      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ec      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fce5 	bl	80024d8 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fcd7 	bl	80024d8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0ad      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b3c:	f7ff fb35 	bl	80031aa <LL_RCC_LSE_IsReady>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ef      	bne.n	8003b26 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a3 	beq.w	8003c96 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d076      	beq.n	8003c44 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d14b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	f7ff fc76 	bl	800344e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fe fcb9 	bl	80024d8 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fcb5 	bl	80024d8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b0a      	cmp	r3, #10
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e08d      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b7c:	f7ff fc75 	bl	800346a <LL_RCC_PLL_IsReady>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f1      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	4b44      	ldr	r3, [pc, #272]	; (8003ca0 <HAL_RCC_OscConfig+0x730>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b98:	4311      	orrs	r1, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b9e:	0212      	lsls	r2, r2, #8
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	f7ff fc39 	bl	8003432 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fc82 	bl	80024d8 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fc7e 	bl	80024d8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b0a      	cmp	r3, #10
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e056      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003bea:	f7ff fc3e 	bl	800346a <LL_RCC_PLL_IsReady>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f1      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x668>
 8003bf4:	e04f      	b.n	8003c96 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	f7ff fc2a 	bl	800344e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c14:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fc5b 	bl	80024d8 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fe fc57 	bl	80024d8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b0a      	cmp	r3, #10
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e02f      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003c38:	f7ff fc17 	bl	800346a <LL_RCC_PLL_IsReady>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f1      	bne.n	8003c26 <HAL_RCC_OscConfig+0x6b6>
 8003c42:	e028      	b.n	8003c96 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e023      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0203 	and.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d115      	bne.n	8003c92 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d10e      	bne.n	8003c92 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	11c1808c 	.word	0x11c1808c

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e10f      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d91b      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4984      	ldr	r1, [pc, #528]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fe fbff 	bl	80024d8 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cde:	f7fe fbfb 	bl	80024d8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0f3      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf0:	4b7b      	ldr	r3, [pc, #492]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d1ef      	bne.n	8003cde <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fb12 	bl	8003338 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d14:	f7fe fbe0 	bl	80024d8 <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d1c:	f7fe fbdc 	bl	80024d8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0d4      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d2e:	f7ff fbda 	bl	80034e6 <LL_RCC_IsActiveFlag_HPRE>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f1      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d016      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fb08 	bl	800335e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d4e:	f7fe fbc3 	bl	80024d8 <HAL_GetTick>
 8003d52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d56:	f7fe fbbf 	bl	80024d8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0b7      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d68:	f7ff fbce 	bl	8003508 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f1      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fb01 	bl	800338a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d88:	f7fe fba6 	bl	80024d8 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d90:	f7fe fba2 	bl	80024d8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e09a      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003da2:	f7ff fbc3 	bl	800352c <LL_RCC_IsActiveFlag_PPRE1>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f1      	beq.n	8003d90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d017      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff faf6 	bl	80033b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fb88 	bl	80024d8 <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dcc:	f7fe fb84 	bl	80024d8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e07c      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dde:	f7ff fbb6 	bl	800354e <LL_RCC_IsActiveFlag_PPRE2>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f1      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003dfc:	f7ff f983 	bl	8003106 <LL_RCC_HSE_IsReady>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11e      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e066      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e12:	f7ff fb2a 	bl	800346a <LL_RCC_PLL_IsReady>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d113      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e05b      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e28:	f7ff fa1d 	bl	8003266 <LL_RCC_MSI_IsReady>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e050      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e36:	f7ff f993 	bl	8003160 <LL_RCC_HSI_IsReady>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e049      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fa57 	bl	80032fc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4e:	f7fe fb43 	bl	80024d8 <HAL_GetTick>
 8003e52:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e56:	f7fe fb3f 	bl	80024d8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e035      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6c:	f7ff fa59 	bl	8003322 <LL_RCC_GetSysClkSource>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d1ec      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d21b      	bcs.n	8003ec2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4913      	ldr	r1, [pc, #76]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9a:	f7fe fb1d 	bl	80024d8 <HAL_GetTick>
 8003e9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ea2:	f7fe fb19 	bl	80024d8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x23c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d1ef      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ec2:	f000 f8b3 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <HAL_RCC_ClockConfig+0x240>)
 8003eca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fab5 	bl	8002440 <HAL_InitTick>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58004000 	.word	0x58004000
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efa:	f7ff fa12 	bl	8003322 <LL_RCC_GetSysClkSource>
 8003efe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f00:	f7ff fae6 	bl	80034d0 <LL_RCC_PLL_GetMainSource>
 8003f04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x2c>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d139      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d136      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f18:	f7ff f9b5 	bl	8003286 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d115      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x62>
 8003f22:	f7ff f9b0 	bl	8003286 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_GetSysClockFreq+0x4e>
 8003f2c:	f7ff f9bb 	bl	80032a6 <LL_RCC_MSI_GetRange>
 8003f30:	4603      	mov	r3, r0
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	e005      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x5a>
 8003f3a:	f7ff f9bf 	bl	80032bc <LL_RCC_MSI_GetRangeAfterStandby>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a36      	ldr	r2, [pc, #216]	; (8004020 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x8c>
 8003f4e:	f7ff f99a 	bl	8003286 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_GetSysClockFreq+0x7a>
 8003f58:	f7ff f9a5 	bl	80032a6 <LL_RCC_MSI_GetRange>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x86>
 8003f66:	f7ff f9a9 	bl	80032bc <LL_RCC_MSI_GetRangeAfterStandby>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f84:	e012      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e00c      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d109      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f98:	f7ff f888 	bl	80030ac <LL_RCC_HSE_IsEnabledDiv2>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d102      	bne.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e001      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003faa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fac:	f7ff f9b9 	bl	8003322 <LL_RCC_GetSysClkSource>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d12f      	bne.n	8004016 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003fb6:	f7ff fa8b 	bl	80034d0 <LL_RCC_PLL_GetMainSource>
 8003fba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0xde>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003fc8:	e00d      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fcc:	60fb      	str	r3, [r7, #12]
        break;
 8003fce:	e00d      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003fd0:	f7ff f86c 	bl	80030ac <LL_RCC_HSE_IsEnabledDiv2>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fdc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fde:	e005      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fe2:	60fb      	str	r3, [r7, #12]
        break;
 8003fe4:	e002      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	60fb      	str	r3, [r7, #12]
        break;
 8003fea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fec:	f7ff fa4e 	bl	800348c <LL_RCC_PLL_GetN>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	fb03 f402 	mul.w	r4, r3, r2
 8003ff8:	f7ff fa5f 	bl	80034ba <LL_RCC_PLL_GetDivider>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	3301      	adds	r3, #1
 8004002:	fbb4 f4f3 	udiv	r4, r4, r3
 8004006:	f7ff fa4d 	bl	80034a4 <LL_RCC_PLL_GetR>
 800400a:	4603      	mov	r3, r0
 800400c:	0f5b      	lsrs	r3, r3, #29
 800400e:	3301      	adds	r3, #1
 8004010:	fbb4 f3f3 	udiv	r3, r4, r3
 8004014:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004016:	697b      	ldr	r3, [r7, #20]
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	0800ea44 	.word	0x0800ea44
 8004024:	00f42400 	.word	0x00f42400
 8004028:	01e84800 	.word	0x01e84800

0800402c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b598      	push	{r3, r4, r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004030:	f7ff ff5c 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8004034:	4604      	mov	r4, r0
 8004036:	f7ff f9ce 	bl	80033d6 <LL_RCC_GetAHBPrescaler>
 800403a:	4603      	mov	r3, r0
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	4a03      	ldr	r2, [pc, #12]	; (8004050 <HAL_RCC_GetHCLKFreq+0x24>)
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd98      	pop	{r3, r4, r7, pc}
 8004050:	0800e9e4 	.word	0x0800e9e4

08004054 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004054:	b598      	push	{r3, r4, r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004058:	f7ff ffe8 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800405c:	4604      	mov	r4, r0
 800405e:	f7ff f9d2 	bl	8003406 <LL_RCC_GetAPB1Prescaler>
 8004062:	4603      	mov	r3, r0
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	4a03      	ldr	r2, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd98      	pop	{r3, r4, r7, pc}
 8004074:	0800ea24 	.word	0x0800ea24

08004078 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b598      	push	{r3, r4, r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800407c:	f7ff ffd6 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004080:	4604      	mov	r4, r0
 8004082:	f7ff f9cb 	bl	800341c <LL_RCC_GetAPB2Prescaler>
 8004086:	4603      	mov	r3, r0
 8004088:	0adb      	lsrs	r3, r3, #11
 800408a:	4a03      	ldr	r2, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x20>)
 800408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004090:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd98      	pop	{r3, r4, r7, pc}
 8004098:	0800ea24 	.word	0x0800ea24

0800409c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80040ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80040b4:	f7ff f99a 	bl	80033ec <LL_RCC_GetAHB3Prescaler>
 80040b8:	4603      	mov	r3, r0
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80040c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0c9c      	lsrs	r4, r3, #18
 80040d8:	f7fe ffae 	bl	8003038 <HAL_PWREx_GetVoltageRange>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 f80b 	bl	80040fc <RCC_SetFlashLatency>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}
 80040f0:	0800ea44 	.word	0x0800ea44
 80040f4:	0800e9e4 	.word	0x0800e9e4
 80040f8:	431bde83 	.word	0x431bde83

080040fc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08e      	sub	sp, #56	; 0x38
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004106:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <RCC_SetFlashLatency+0xfc>)
 8004108:	f107 0320 	add.w	r3, r7, #32
 800410c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004110:	6018      	str	r0, [r3, #0]
 8004112:	3304      	adds	r3, #4
 8004114:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004116:	4a39      	ldr	r2, [pc, #228]	; (80041fc <RCC_SetFlashLatency+0x100>)
 8004118:	f107 0318 	add.w	r3, r7, #24
 800411c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	3304      	adds	r3, #4
 8004124:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004126:	4a36      	ldr	r2, [pc, #216]	; (8004200 <RCC_SetFlashLatency+0x104>)
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	ca07      	ldmia	r2, {r0, r1, r2}
 800412e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413c:	d11d      	bne.n	800417a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800413e:	2300      	movs	r3, #0
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
 8004142:	e016      	b.n	8004172 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800414c:	4413      	add	r3, r2
 800414e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4293      	cmp	r3, r2
 8004158:	d808      	bhi.n	800416c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004162:	4413      	add	r3, r2
 8004164:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800416a:	e023      	b.n	80041b4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	3301      	adds	r3, #1
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2b02      	cmp	r3, #2
 8004176:	d9e5      	bls.n	8004144 <RCC_SetFlashLatency+0x48>
 8004178:	e01c      	b.n	80041b4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417e:	e016      	b.n	80041ae <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004188:	4413      	add	r3, r2
 800418a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4293      	cmp	r3, r2
 8004194:	d808      	bhi.n	80041a8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800419e:	4413      	add	r3, r2
 80041a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a6:	e005      	b.n	80041b4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	3301      	adds	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d9e5      	bls.n	8004180 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <RCC_SetFlashLatency+0x108>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 0207 	bic.w	r2, r3, #7
 80041bc:	4911      	ldr	r1, [pc, #68]	; (8004204 <RCC_SetFlashLatency+0x108>)
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041c4:	f7fe f988 	bl	80024d8 <HAL_GetTick>
 80041c8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ca:	e008      	b.n	80041de <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041cc:	f7fe f984 	bl	80024d8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e007      	b.n	80041ee <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <RCC_SetFlashLatency+0x108>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1ef      	bne.n	80041cc <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3738      	adds	r7, #56	; 0x38
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	0800e704 	.word	0x0800e704
 80041fc:	0800e70c 	.word	0x0800e70c
 8004200:	0800e714 	.word	0x0800e714
 8004204:	58004000 	.word	0x58004000

08004208 <LL_RCC_LSE_IsReady>:
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d101      	bne.n	8004220 <LL_RCC_LSE_IsReady+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_RCC_LSE_IsReady+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <LL_RCC_SetUSARTClockSource>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	43db      	mvns	r3, r3
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_RCC_SetI2SClockSource>:
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <LL_RCC_SetLPUARTClockSource>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_SetI2CClockSource>:
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042c6:	43db      	mvns	r3, r3
 80042c8:	401a      	ands	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_SetLPTIMClockSource>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <LL_RCC_SetRNGClockSource>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800432c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <LL_RCC_SetADCClockSource>:
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800434a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <LL_RCC_SetRTCClockSource>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <LL_RCC_GetRTCClockSource>:
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_ForceBackupDomainReset>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004400:	2300      	movs	r3, #0
 8004402:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d058      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004410:	f7fe fe04 	bl	800301c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fe f860 	bl	80024d8 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fe f85c 	bl	80024d8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d902      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	74fb      	strb	r3, [r7, #19]
        break;
 800442e:	e006      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004430:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d1ee      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d13c      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004444:	f7ff ffa7 	bl	8004396 <LL_RCC_GetRTCClockSource>
 8004448:	4602      	mov	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	429a      	cmp	r2, r3
 8004450:	d00f      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004460:	f7ff ffa5 	bl	80043ae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004464:	f7ff ffb3 	bl	80043ce <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d014      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe f82c 	bl	80024d8 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004482:	e00b      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fe f828 	bl	80024d8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d902      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	74fb      	strb	r3, [r7, #19]
            break;
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800449c:	f7ff feb4 	bl	8004208 <LL_RCC_LSE_IsReady>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d1ee      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff5b 	bl	800436c <LL_RCC_SetRTCClockSource>
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
 80044bc:	e001      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fea9 	bl	800422a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fe9e 	bl	800422a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fec0 	bl	8004284 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fee6 	bl	80042e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fedb 	bl	80042e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fed0 	bl	80042e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fea9 	bl	80042ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fe9e 	bl	80042ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fe93 	bl	80042ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fe5e 	bl	800425a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d107      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fea5 	bl	8004318 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fea3 	bl	8004342 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004604:	d107      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004614:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004616:	7cbb      	ldrb	r3, [r7, #18]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58000400 	.word	0x58000400

08004624 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004634:	4904      	ldr	r1, [pc, #16]	; (8004648 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	58000400 	.word	0x58000400

0800464c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	4a04      	ldr	r2, [pc, #16]	; (8004668 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	58000400 	.word	0x58000400

0800466c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a04      	ldr	r2, [pc, #16]	; (8004688 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	58000400 	.word	0x58000400

0800468c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004696:	619a      	str	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	58000400 	.word	0x58000400

080046a4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d101      	bne.n	80046b8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	58000400 	.word	0x58000400

080046c8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d101      	bne.n	80046dc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58000400 	.word	0x58000400

080046ec <LL_RCC_RF_DisableReset>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <LL_RCC_IsRFUnderReset>:
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004720:	d101      	bne.n	8004726 <LL_RCC_IsRFUnderReset+0x1a>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <LL_RCC_IsRFUnderReset+0x1c>
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <LL_EXTI_EnableIT_32_63+0x24>)
 800473a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800473e:	4905      	ldr	r1, [pc, #20]	; (8004754 <LL_EXTI_EnableIT_32_63+0x24>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	58000800 	.word	0x58000800

08004758 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
    return status;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	e04b      	b.n	8004806 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	799b      	ldrb	r3, [r3, #6]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fb5e 	bl	8001e44 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800478e:	f7ff ffad 	bl	80046ec <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_SUBGHZ_Init+0xb8>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	0cdb      	lsrs	r3, r3, #19
 80047a0:	2264      	movs	r2, #100	; 0x64
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e007      	b.n	80047ca <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80047c0:	f7ff ffa4 	bl	800470c <LL_RCC_IsRFUnderReset>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ee      	bne.n	80047a8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80047ca:	f7ff ff3f 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80047ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047d2:	f7ff ffad 	bl	8004730 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80047d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047da:	f7ff ff23 	bl	8004624 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80047de:	f7ff ff55 	bl	800468c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 faad 	bl	8004d4c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	719a      	strb	r2, [r3, #6]

  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	461a      	mov	r2, r3
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
 8004824:	4613      	mov	r3, r2
 8004826:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	799b      	ldrb	r3, [r3, #6]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d14a      	bne.n	80048c8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	795b      	ldrb	r3, [r3, #5]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800483a:	2302      	movs	r3, #2
 800483c:	e045      	b.n	80048ca <HAL_SUBGHZ_WriteRegisters+0xb6>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2202      	movs	r2, #2
 8004848:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fb4c 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004850:	f7ff ff0c 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004854:	210d      	movs	r1, #13
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fa98 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800485c:	897b      	ldrh	r3, [r7, #10]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	4619      	mov	r1, r3
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fa90 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800486c:	897b      	ldrh	r3, [r7, #10]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fa8a 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004878:	2300      	movs	r3, #0
 800487a:	82bb      	strh	r3, [r7, #20]
 800487c:	e00a      	b.n	8004894 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800487e:	8abb      	ldrh	r3, [r7, #20]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	4619      	mov	r1, r3
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fa7f 	bl	8004d8c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800488e:	8abb      	ldrh	r3, [r7, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	82bb      	strh	r3, [r7, #20]
 8004894:	8aba      	ldrh	r2, [r7, #20]
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d3f0      	bcc.n	800487e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800489c:	f7ff fed6 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fb45 	bl	8004f30 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
 80048b2:	e001      	b.n	80048b8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	715a      	strb	r2, [r3, #5]

    return status;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	e000      	b.n	80048ca <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b088      	sub	sp, #32
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	461a      	mov	r2, r3
 80048de:	460b      	mov	r3, r1
 80048e0:	817b      	strh	r3, [r7, #10]
 80048e2:	4613      	mov	r3, r2
 80048e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	799b      	ldrb	r3, [r3, #6]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d14a      	bne.n	800498a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	795b      	ldrb	r3, [r3, #5]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e045      	b.n	800498c <HAL_SUBGHZ_ReadRegisters+0xba>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 faee 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800490c:	f7ff feae 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004910:	211d      	movs	r1, #29
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa3a 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004918:	897b      	ldrh	r3, [r7, #10]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	b29b      	uxth	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	4619      	mov	r1, r3
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa32 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004928:	897b      	ldrh	r3, [r7, #10]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	4619      	mov	r1, r3
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fa2c 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004934:	2100      	movs	r1, #0
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa28 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	82fb      	strh	r3, [r7, #22]
 8004940:	e009      	b.n	8004956 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fa77 	bl	8004e38 <SUBGHZSPI_Receive>
      pData++;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	3301      	adds	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004950:	8afb      	ldrh	r3, [r7, #22]
 8004952:	3301      	adds	r3, #1
 8004954:	82fb      	strh	r3, [r7, #22]
 8004956:	8afa      	ldrh	r2, [r7, #22]
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d3f1      	bcc.n	8004942 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800495e:	f7ff fe75 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fae4 	bl	8004f30 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e001      	b.n	800497a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	715a      	strb	r2, [r3, #5]

    return status;
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	e000      	b.n	800498c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	461a      	mov	r2, r3
 80049a0:	460b      	mov	r3, r1
 80049a2:	72fb      	strb	r3, [r7, #11]
 80049a4:	4613      	mov	r3, r2
 80049a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	799b      	ldrb	r3, [r3, #6]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d14a      	bne.n	8004a48 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	795b      	ldrb	r3, [r3, #5]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e045      	b.n	8004a4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa8f 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b84      	cmp	r3, #132	; 0x84
 80049ce:	d002      	beq.n	80049d6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	2b94      	cmp	r3, #148	; 0x94
 80049d4:	d103      	bne.n	80049de <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	711a      	strb	r2, [r3, #4]
 80049dc:	e002      	b.n	80049e4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049e4:	f7ff fe42 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f9cd 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	82bb      	strh	r3, [r7, #20]
 80049f6:	e00a      	b.n	8004a0e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049f8:	8abb      	ldrh	r3, [r7, #20]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f9c2 	bl	8004d8c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a08:	8abb      	ldrh	r3, [r7, #20]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	82bb      	strh	r3, [r7, #20]
 8004a0e:	8aba      	ldrh	r2, [r7, #20]
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3f0      	bcc.n	80049f8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a16:	f7ff fe19 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004a1a:	7afb      	ldrb	r3, [r7, #11]
 8004a1c:	2b84      	cmp	r3, #132	; 0x84
 8004a1e:	d002      	beq.n	8004a26 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa85 	bl	8004f30 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
 8004a32:	e001      	b.n	8004a38 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	715a      	strb	r2, [r3, #5]

    return status;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	e000      	b.n	8004a4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	460b      	mov	r3, r1
 8004a60:	72fb      	strb	r3, [r7, #11]
 8004a62:	4613      	mov	r3, r2
 8004a64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	799b      	ldrb	r3, [r3, #6]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d13d      	bne.n	8004af0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	795b      	ldrb	r3, [r3, #5]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e038      	b.n	8004af2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa2e 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a8c:	f7ff fdee 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a90:	7afb      	ldrb	r3, [r7, #11]
 8004a92:	4619      	mov	r1, r3
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f979 	bl	8004d8c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f975 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	82fb      	strh	r3, [r7, #22]
 8004aa6:	e009      	b.n	8004abc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f9c4 	bl	8004e38 <SUBGHZSPI_Receive>
      pData++;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	82fb      	strh	r3, [r7, #22]
 8004abc:	8afa      	ldrh	r2, [r7, #22]
 8004abe:	893b      	ldrh	r3, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3f1      	bcc.n	8004aa8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ac4:	f7ff fdc2 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fa31 	bl	8004f30 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e001      	b.n	8004ae0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	715a      	strb	r2, [r3, #5]

    return status;
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	e000      	b.n	8004af2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	461a      	mov	r2, r3
 8004b06:	460b      	mov	r3, r1
 8004b08:	72fb      	strb	r3, [r7, #11]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	799b      	ldrb	r3, [r3, #6]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d13e      	bne.n	8004b96 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	795b      	ldrb	r3, [r3, #5]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e039      	b.n	8004b98 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f9dc 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b30:	f7ff fd9c 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004b34:	210e      	movs	r1, #14
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f928 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f923 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b46:	2300      	movs	r3, #0
 8004b48:	82bb      	strh	r3, [r7, #20]
 8004b4a:	e00a      	b.n	8004b62 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b4c:	8abb      	ldrh	r3, [r7, #20]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f918 	bl	8004d8c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b5c:	8abb      	ldrh	r3, [r7, #20]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	82bb      	strh	r3, [r7, #20]
 8004b62:	8aba      	ldrh	r2, [r7, #20]
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3f0      	bcc.n	8004b4c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b6a:	f7ff fd6f 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f9de 	bl	8004f30 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
 8004b80:	e001      	b.n	8004b86 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	715a      	strb	r2, [r3, #5]

    return status;
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	e000      	b.n	8004b98 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	461a      	mov	r2, r3
 8004bac:	460b      	mov	r3, r1
 8004bae:	72fb      	strb	r3, [r7, #11]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	799b      	ldrb	r3, [r3, #6]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d141      	bne.n	8004c46 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	795b      	ldrb	r3, [r3, #5]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e03c      	b.n	8004c48 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f987 	bl	8004ee8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004bda:	f7ff fd47 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004bde:	211e      	movs	r1, #30
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f8d3 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004be6:	7afb      	ldrb	r3, [r7, #11]
 8004be8:	4619      	mov	r1, r3
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8ce 	bl	8004d8c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f8ca 	bl	8004d8c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	82fb      	strh	r3, [r7, #22]
 8004bfc:	e009      	b.n	8004c12 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bfe:	69b9      	ldr	r1, [r7, #24]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f919 	bl	8004e38 <SUBGHZSPI_Receive>
      pData++;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004c0c:	8afb      	ldrh	r3, [r7, #22]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	82fb      	strh	r3, [r7, #22]
 8004c12:	8afa      	ldrh	r2, [r7, #22]
 8004c14:	893b      	ldrh	r3, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d3f1      	bcc.n	8004bfe <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c1a:	f7ff fd17 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f986 	bl	8004f30 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e001      	b.n	8004c36 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	715a      	strb	r2, [r3, #5]

    return status;
 8004c42:	7ffb      	ldrb	r3, [r7, #31]
 8004c44:	e000      	b.n	8004c48 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004c58:	2300      	movs	r3, #0
 8004c5a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004c5c:	f107 020c 	add.w	r2, r7, #12
 8004c60:	2302      	movs	r3, #2
 8004c62:	2112      	movs	r1, #18
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fef4 	bl	8004a52 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004c6a:	7b3b      	ldrb	r3, [r7, #12]
 8004c6c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	b21a      	sxth	r2, r3
 8004c74:	7b7b      	ldrb	r3, [r7, #13]
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b21b      	sxth	r3, r3
 8004c7c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c7e:	89fb      	ldrh	r3, [r7, #14]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f003 fdd3 	bl	8008834 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f003 fdd8 	bl	8008850 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f003 fe27 	bl	8008900 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f003 fe2c 	bl	800891c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f003 fe31 	bl	8008938 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004cd6:	89fb      	ldrh	r3, [r7, #14]
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f003 fdfe 	bl	80088e4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f003 fdb9 	bl	800886c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004cfa:	89fb      	ldrh	r3, [r7, #14]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004d12:	2101      	movs	r1, #1
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f003 fdb7 	bl	8008888 <HAL_SUBGHZ_CADStatusCallback>
 8004d1a:	e003      	b.n	8004d24 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f003 fdb2 	bl	8008888 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004d24:	89fb      	ldrh	r3, [r7, #14]
 8004d26:	0a5b      	lsrs	r3, r3, #9
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f003 fdc7 	bl	80088c4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004d36:	f107 020c 	add.w	r2, r7, #12
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fe28 	bl	8004994 <HAL_SUBGHZ_ExecSetCmd>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0b      	ldr	r2, [pc, #44]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004d60:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004d68:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d6c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004d70:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a04      	ldr	r2, [pc, #16]	; (8004d88 <SUBGHZSPI_Init+0x3c>)
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	6013      	str	r3, [r2, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	58010000 	.word	0x58010000

08004d8c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d9c:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <SUBGHZSPI_Transmit+0xa0>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	0cdb      	lsrs	r3, r3, #19
 8004daa:	2264      	movs	r2, #100	; 0x64
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	609a      	str	r2, [r3, #8]
      break;
 8004dc2:	e008      	b.n	8004dd6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004dca:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <SUBGHZSPI_Transmit+0xa4>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d1ed      	bne.n	8004db2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004dd6:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <SUBGHZSPI_Transmit+0xa8>)
 8004dd8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <SUBGHZSPI_Transmit+0xa0>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	0cdb      	lsrs	r3, r3, #19
 8004dee:	2264      	movs	r2, #100	; 0x64
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	609a      	str	r2, [r3, #8]
      break;
 8004e06:	e008      	b.n	8004e1a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <SUBGHZSPI_Transmit+0xa4>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d1ed      	bne.n	8004df6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <SUBGHZSPI_Transmit+0xa4>)
 8004e1c:	68db      	ldr	r3, [r3, #12]

  return status;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	58010000 	.word	0x58010000
 8004e34:	5801000c 	.word	0x5801000c

08004e38 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <SUBGHZSPI_Receive+0xa4>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	0cdb      	lsrs	r3, r3, #19
 8004e54:	2264      	movs	r2, #100	; 0x64
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	609a      	str	r2, [r3, #8]
      break;
 8004e6c:	e008      	b.n	8004e80 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <SUBGHZSPI_Receive+0xa8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d1ed      	bne.n	8004e5c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <SUBGHZSPI_Receive+0xac>)
 8004e82:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	22ff      	movs	r2, #255	; 0xff
 8004e88:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <SUBGHZSPI_Receive+0xa4>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	0cdb      	lsrs	r3, r3, #19
 8004e98:	2264      	movs	r2, #100	; 0x64
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	609a      	str	r2, [r3, #8]
      break;
 8004eb0:	e008      	b.n	8004ec4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <SUBGHZSPI_Receive+0xa8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d1ed      	bne.n	8004ea0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <SUBGHZSPI_Receive+0xa8>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	701a      	strb	r2, [r3, #0]

  return status;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	58010000 	.word	0x58010000
 8004ee4:	5801000c 	.word	0x5801000c

08004ee8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	791b      	ldrb	r3, [r3, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d111      	bne.n	8004f1c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <SUBGHZ_CheckDeviceReady+0x44>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004f08:	f7ff fbb0 	bl	800466c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f9      	bne.n	8004f0c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004f18:	f7ff fb98 	bl	800464c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f807 	bl	8004f30 <SUBGHZ_WaitOnBusy>
 8004f22:	4603      	mov	r3, r0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000000 	.word	0x20000000

08004f30 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <SUBGHZ_WaitOnBusy+0x58>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	0d1b      	lsrs	r3, r3, #20
 8004f4a:	2264      	movs	r2, #100	; 0x64
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004f52:	f7ff fbb9 	bl	80046c8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004f56:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	609a      	str	r2, [r3, #8]
      break;
 8004f68:	e009      	b.n	8004f7e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f70:	f7ff fb98 	bl	80046a4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d0e9      	beq.n	8004f52 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000000 	.word	0x20000000

08004f8c <LL_RCC_GetUSARTClockSource>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	4313      	orrs	r3, r2
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_GetLPUARTClockSource>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4013      	ands	r3, r2
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e042      	b.n	8005066 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fe64 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	; 0x24
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f995 	bl	8005340 <UART_SetConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e022      	b.n	8005066 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fbd9 	bl	80057e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fc5f 	bl	8005922 <UART_CheckIdleState>
 8005064:	4603      	mov	r3, r0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b08a      	sub	sp, #40	; 0x28
 8005072:	af02      	add	r7, sp, #8
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	2b20      	cmp	r3, #32
 8005086:	f040 8083 	bne.w	8005190 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_UART_Transmit+0x28>
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07b      	b.n	8005192 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_UART_Transmit+0x3a>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e074      	b.n	8005192 <HAL_UART_Transmit+0x124>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c0:	f7fd fa0a 	bl	80024d8 <HAL_GetTick>
 80050c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	d108      	bne.n	80050f2 <HAL_UART_Transmit+0x84>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e003      	b.n	80050fa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005102:	e02c      	b.n	800515e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fc52 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e039      	b.n	8005192 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3302      	adds	r3, #2
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e007      	b.n	800514c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1cc      	bne.n	8005104 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2140      	movs	r1, #64	; 0x40
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fc1f 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e006      	b.n	8005192 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b08a      	sub	sp, #40	; 0x28
 800519e:	af02      	add	r7, sp, #8
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	f040 80c0 	bne.w	8005336 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_Receive+0x28>
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0b8      	b.n	8005338 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UART_Receive+0x3a>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e0b1      	b.n	8005338 <HAL_UART_Receive+0x19e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2222      	movs	r2, #34	; 0x22
 80051e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f2:	f7fd f971 	bl	80024d8 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d10e      	bne.n	8005230 <HAL_UART_Receive+0x96>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <HAL_UART_Receive+0x8c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005224:	e02d      	b.n	8005282 <HAL_UART_Receive+0xe8>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	22ff      	movs	r2, #255	; 0xff
 800522a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800522e:	e028      	b.n	8005282 <HAL_UART_Receive+0xe8>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10d      	bne.n	8005254 <HAL_UART_Receive+0xba>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_UART_Receive+0xb0>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	22ff      	movs	r2, #255	; 0xff
 8005244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005248:	e01b      	b.n	8005282 <HAL_UART_Receive+0xe8>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	227f      	movs	r2, #127	; 0x7f
 800524e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005252:	e016      	b.n	8005282 <HAL_UART_Receive+0xe8>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525c:	d10d      	bne.n	800527a <HAL_UART_Receive+0xe0>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <HAL_UART_Receive+0xd6>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	227f      	movs	r2, #127	; 0x7f
 800526a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800526e:	e008      	b.n	8005282 <HAL_UART_Receive+0xe8>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	223f      	movs	r2, #63	; 0x3f
 8005274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005278:	e003      	b.n	8005282 <HAL_UART_Receive+0xe8>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005288:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d108      	bne.n	80052a6 <HAL_UART_Receive+0x10c>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	e003      	b.n	80052ae <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052b6:	e032      	b.n	800531e <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2200      	movs	r2, #0
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fb78 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e032      	b.n	8005338 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10c      	bne.n	80052f2 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	b29a      	uxth	r2, r3
 80052e0:	8a7b      	ldrh	r3, [r7, #18]
 80052e2:	4013      	ands	r3, r2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	3302      	adds	r3, #2
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	e00c      	b.n	800530c <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	8a7b      	ldrh	r3, [r7, #18]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	4013      	ands	r3, r2
 8005300:	b2da      	uxtb	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3301      	adds	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1c6      	bne.n	80052b8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4bab      	ldr	r3, [pc, #684]	; (8005618 <UART_SetConfig+0x2d8>)
 800536c:	4013      	ands	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	69f9      	ldr	r1, [r7, #28]
 8005374:	430b      	orrs	r3, r1
 8005376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4aa0      	ldr	r2, [pc, #640]	; (800561c <UART_SetConfig+0x2dc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	69f9      	ldr	r1, [r7, #28]
 80053bc:	430b      	orrs	r3, r1
 80053be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f023 010f 	bic.w	r1, r3, #15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a91      	ldr	r2, [pc, #580]	; (8005620 <UART_SetConfig+0x2e0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d122      	bne.n	8005426 <UART_SetConfig+0xe6>
 80053e0:	2003      	movs	r0, #3
 80053e2:	f7ff fdd3 	bl	8004f8c <LL_RCC_GetUSARTClockSource>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d817      	bhi.n	8005420 <UART_SetConfig+0xe0>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xb8>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	08005409 	.word	0x08005409
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800540f 	.word	0x0800540f
 8005404:	0800541b 	.word	0x0800541b
 8005408:	2301      	movs	r3, #1
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e072      	b.n	80054f4 <UART_SetConfig+0x1b4>
 800540e:	2302      	movs	r3, #2
 8005410:	76fb      	strb	r3, [r7, #27]
 8005412:	e06f      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005414:	2304      	movs	r3, #4
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e06c      	b.n	80054f4 <UART_SetConfig+0x1b4>
 800541a:	2308      	movs	r3, #8
 800541c:	76fb      	strb	r3, [r7, #27]
 800541e:	e069      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005420:	2310      	movs	r3, #16
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e066      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7e      	ldr	r2, [pc, #504]	; (8005624 <UART_SetConfig+0x2e4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d134      	bne.n	800549a <UART_SetConfig+0x15a>
 8005430:	200c      	movs	r0, #12
 8005432:	f7ff fdab 	bl	8004f8c <LL_RCC_GetUSARTClockSource>
 8005436:	4603      	mov	r3, r0
 8005438:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d829      	bhi.n	8005494 <UART_SetConfig+0x154>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x108>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800547d 	.word	0x0800547d
 800544c:	08005495 	.word	0x08005495
 8005450:	08005495 	.word	0x08005495
 8005454:	08005495 	.word	0x08005495
 8005458:	08005489 	.word	0x08005489
 800545c:	08005495 	.word	0x08005495
 8005460:	08005495 	.word	0x08005495
 8005464:	08005495 	.word	0x08005495
 8005468:	08005483 	.word	0x08005483
 800546c:	08005495 	.word	0x08005495
 8005470:	08005495 	.word	0x08005495
 8005474:	08005495 	.word	0x08005495
 8005478:	0800548f 	.word	0x0800548f
 800547c:	2300      	movs	r3, #0
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e038      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005482:	2302      	movs	r3, #2
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e035      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005488:	2304      	movs	r3, #4
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	e032      	b.n	80054f4 <UART_SetConfig+0x1b4>
 800548e:	2308      	movs	r3, #8
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e02f      	b.n	80054f4 <UART_SetConfig+0x1b4>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e02c      	b.n	80054f4 <UART_SetConfig+0x1b4>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5f      	ldr	r2, [pc, #380]	; (800561c <UART_SetConfig+0x2dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d125      	bne.n	80054f0 <UART_SetConfig+0x1b0>
 80054a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80054a8:	f7ff fd82 	bl	8004fb0 <LL_RCC_GetLPUARTClockSource>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b2:	d017      	beq.n	80054e4 <UART_SetConfig+0x1a4>
 80054b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b8:	d817      	bhi.n	80054ea <UART_SetConfig+0x1aa>
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054be:	d00b      	beq.n	80054d8 <UART_SetConfig+0x198>
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	d811      	bhi.n	80054ea <UART_SetConfig+0x1aa>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <UART_SetConfig+0x192>
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d006      	beq.n	80054de <UART_SetConfig+0x19e>
 80054d0:	e00b      	b.n	80054ea <UART_SetConfig+0x1aa>
 80054d2:	2300      	movs	r3, #0
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e00d      	b.n	80054f4 <UART_SetConfig+0x1b4>
 80054d8:	2302      	movs	r3, #2
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e00a      	b.n	80054f4 <UART_SetConfig+0x1b4>
 80054de:	2304      	movs	r3, #4
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e007      	b.n	80054f4 <UART_SetConfig+0x1b4>
 80054e4:	2308      	movs	r3, #8
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	e004      	b.n	80054f4 <UART_SetConfig+0x1b4>
 80054ea:	2310      	movs	r3, #16
 80054ec:	76fb      	strb	r3, [r7, #27]
 80054ee:	e001      	b.n	80054f4 <UART_SetConfig+0x1b4>
 80054f0:	2310      	movs	r3, #16
 80054f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a48      	ldr	r2, [pc, #288]	; (800561c <UART_SetConfig+0x2dc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f040 8098 	bne.w	8005630 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005500:	7efb      	ldrb	r3, [r7, #27]
 8005502:	2b08      	cmp	r3, #8
 8005504:	d823      	bhi.n	800554e <UART_SetConfig+0x20e>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x1cc>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	0800554f 	.word	0x0800554f
 8005514:	08005539 	.word	0x08005539
 8005518:	0800554f 	.word	0x0800554f
 800551c:	0800553f 	.word	0x0800553f
 8005520:	0800554f 	.word	0x0800554f
 8005524:	0800554f 	.word	0x0800554f
 8005528:	0800554f 	.word	0x0800554f
 800552c:	08005547 	.word	0x08005547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe fd90 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 8005534:	6178      	str	r0, [r7, #20]
        break;
 8005536:	e00f      	b.n	8005558 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005538:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <UART_SetConfig+0x2e8>)
 800553a:	617b      	str	r3, [r7, #20]
        break;
 800553c:	e00c      	b.n	8005558 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553e:	f7fe fcd5 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8005542:	6178      	str	r0, [r7, #20]
        break;
 8005544:	e008      	b.n	8005558 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554a:	617b      	str	r3, [r7, #20]
        break;
 800554c:	e004      	b.n	8005558 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	76bb      	strb	r3, [r7, #26]
        break;
 8005556:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8128 	beq.w	80057b0 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	4a31      	ldr	r2, [pc, #196]	; (800562c <UART_SetConfig+0x2ec>)
 8005566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556a:	461a      	mov	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005572:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d305      	bcc.n	8005590 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	d902      	bls.n	8005596 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	76bb      	strb	r3, [r7, #26]
 8005594:	e10c      	b.n	80057b0 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4618      	mov	r0, r3
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <UART_SetConfig+0x2ec>)
 80055a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f7fb fcd7 	bl	8000f60 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	020b      	lsls	r3, r1, #8
 80055c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055c8:	0202      	lsls	r2, r0, #8
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	6849      	ldr	r1, [r1, #4]
 80055ce:	0849      	lsrs	r1, r1, #1
 80055d0:	4608      	mov	r0, r1
 80055d2:	f04f 0100 	mov.w	r1, #0
 80055d6:	1814      	adds	r4, r2, r0
 80055d8:	eb43 0501 	adc.w	r5, r3, r1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fb fcb9 	bl	8000f60 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4613      	mov	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fc:	d308      	bcc.n	8005610 <UART_SetConfig+0x2d0>
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	d204      	bcs.n	8005610 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e0cf      	b.n	80057b0 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	76bb      	strb	r3, [r7, #26]
 8005614:	e0cc      	b.n	80057b0 <UART_SetConfig+0x470>
 8005616:	bf00      	nop
 8005618:	cfff69f3 	.word	0xcfff69f3
 800561c:	40008000 	.word	0x40008000
 8005620:	40013800 	.word	0x40013800
 8005624:	40004400 	.word	0x40004400
 8005628:	00f42400 	.word	0x00f42400
 800562c:	0800ea84 	.word	0x0800ea84
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	d165      	bne.n	8005706 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800563a:	7efb      	ldrb	r3, [r7, #27]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d828      	bhi.n	8005692 <UART_SetConfig+0x352>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x308>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fe fcf2 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 8005670:	6178      	str	r0, [r7, #20]
        break;
 8005672:	e013      	b.n	800569c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fe fd00 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005678:	6178      	str	r0, [r7, #20]
        break;
 800567a:	e00f      	b.n	800569c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <UART_SetConfig+0x498>)
 800567e:	617b      	str	r3, [r7, #20]
        break;
 8005680:	e00c      	b.n	800569c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fe fc33 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8005686:	6178      	str	r0, [r7, #20]
        break;
 8005688:	e008      	b.n	800569c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e004      	b.n	800569c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	76bb      	strb	r3, [r7, #26]
        break;
 800569a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8086 	beq.w	80057b0 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	4a4c      	ldr	r2, [pc, #304]	; (80057dc <UART_SetConfig+0x49c>)
 80056aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ae:	461a      	mov	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b6:	005a      	lsls	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	441a      	add	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	d916      	bls.n	8005700 <UART_SetConfig+0x3c0>
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d8:	d212      	bcs.n	8005700 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f023 030f 	bic.w	r3, r3, #15
 80056e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	89fb      	ldrh	r3, [r7, #14]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	89fa      	ldrh	r2, [r7, #14]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	e057      	b.n	80057b0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	76bb      	strb	r3, [r7, #26]
 8005704:	e054      	b.n	80057b0 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005706:	7efb      	ldrb	r3, [r7, #27]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d828      	bhi.n	800575e <UART_SetConfig+0x41e>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x3d4>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fc8c 	bl	8004054 <HAL_RCC_GetPCLK1Freq>
 800573c:	6178      	str	r0, [r7, #20]
        break;
 800573e:	e013      	b.n	8005768 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fc9a 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005744:	6178      	str	r0, [r7, #20]
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <UART_SetConfig+0x498>)
 800574a:	617b      	str	r3, [r7, #20]
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe fbcd 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8005752:	6178      	str	r0, [r7, #20]
        break;
 8005754:	e008      	b.n	8005768 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	617b      	str	r3, [r7, #20]
        break;
 800575c:	e004      	b.n	8005768 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	76bb      	strb	r3, [r7, #26]
        break;
 8005766:	bf00      	nop
    }

    if (pclk != 0U)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d020      	beq.n	80057b0 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <UART_SetConfig+0x49c>)
 8005774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005778:	461a      	mov	r2, r3
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	b29b      	uxth	r3, r3
 8005792:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b0f      	cmp	r3, #15
 8005798:	d908      	bls.n	80057ac <UART_SetConfig+0x46c>
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d204      	bcs.n	80057ac <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	e001      	b.n	80057b0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80057cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bdb0      	pop	{r4, r5, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	0800ea84 	.word	0x0800ea84

080057e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058de:	d10a      	bne.n	80058f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af02      	add	r7, sp, #8
 8005928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005932:	f7fc fdd1 	bl	80024d8 <HAL_GetTick>
 8005936:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b08      	cmp	r3, #8
 8005944:	d10e      	bne.n	8005964 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f82f 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e025      	b.n	80059b0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d10e      	bne.n	8005990 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f819 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e00f      	b.n	80059b0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b09c      	sub	sp, #112	; 0x70
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c8:	e0a9      	b.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	f000 80a5 	beq.w	8005b1e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d4:	f7fc fd80 	bl	80024d8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <UART_WaitOnFlagUntilTimeout+0x32>
 80059e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d140      	bne.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a0a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	663b      	str	r3, [r7, #96]	; 0x60
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e069      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d051      	beq.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a88:	d149      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ae6:	623a      	str	r2, [r7, #32]
 8005ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e010      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	f43f af46 	beq.w	80059ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3770      	adds	r7, #112	; 0x70
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_UARTEx_DisableFifoMode+0x16>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e027      	b.n	8005bae <HAL_UARTEx_DisableFifoMode+0x66>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2224      	movs	r2, #36	; 0x24
 8005b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e02d      	b.n	8005c2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f84f 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e02d      	b.n	8005ca8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f811 	bl	8005cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cd0:	e031      	b.n	8005d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	0e5b      	lsrs	r3, r3, #25
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	0f5b      	lsrs	r3, r3, #29
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	7b3a      	ldrb	r2, [r7, #12]
 8005cfe:	4910      	ldr	r1, [pc, #64]	; (8005d40 <UARTEx_SetNbDataToProcess+0x90>)
 8005d00:	5c8a      	ldrb	r2, [r1, r2]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d06:	7b3a      	ldrb	r2, [r7, #12]
 8005d08:	490e      	ldr	r1, [pc, #56]	; (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	7b7a      	ldrb	r2, [r7, #13]
 8005d1c:	4908      	ldr	r1, [pc, #32]	; (8005d40 <UARTEx_SetNbDataToProcess+0x90>)
 8005d1e:	5c8a      	ldrb	r2, [r1, r2]
 8005d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d24:	7b7a      	ldrb	r2, [r7, #13]
 8005d26:	4907      	ldr	r1, [pc, #28]	; (8005d44 <UARTEx_SetNbDataToProcess+0x94>)
 8005d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	0800ea9c 	.word	0x0800ea9c
 8005d44:	0800eaa4 	.word	0x0800eaa4

08005d48 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <RadioInit+0x60>)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <RadioInit+0x64>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <RadioInit+0x64>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <RadioInit+0x64>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005d68:	4811      	ldr	r0, [pc, #68]	; (8005db0 <RadioInit+0x68>)
 8005d6a:	f001 fdc1 	bl	80078f0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f000 ffb0 	bl	8006cd4 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8005d74:	f002 f852 	bl	8007e1c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005d78:	2100      	movs	r1, #0
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f002 fba8 	bl	80084d0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005d80:	2204      	movs	r2, #4
 8005d82:	2100      	movs	r1, #0
 8005d84:	2001      	movs	r0, #1
 8005d86:	f002 f9d3 	bl	8008130 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d96:	f002 f907 	bl	8007fa8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005d9a:	f000 fe4f 	bl	8006a3c <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000448 	.word	0x20000448
 8005dac:	2000058c 	.word	0x2000058c
 8005db0:	08006d41 	.word	0x08006d41

08005db4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005db8:	f001 fddc 	bl	8007974 <SUBGRF_GetOperatingMode>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b07      	cmp	r3, #7
 8005dc0:	d00a      	beq.n	8005dd8 <RadioGetStatus+0x24>
 8005dc2:	2b07      	cmp	r3, #7
 8005dc4:	dc0a      	bgt.n	8005ddc <RadioGetStatus+0x28>
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d002      	beq.n	8005dd0 <RadioGetStatus+0x1c>
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d002      	beq.n	8005dd4 <RadioGetStatus+0x20>
 8005dce:	e005      	b.n	8005ddc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e004      	b.n	8005dde <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e002      	b.n	8005dde <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e000      	b.n	8005dde <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005ddc:	2300      	movs	r3, #0
    }
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005dee:	4a25      	ldr	r2, [pc, #148]	; (8005e84 <RadioSetModem+0xa0>)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f002 fedf 	bl	8008bba <RFW_SetRadioModem>
    switch( modem )
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d80b      	bhi.n	8005e1c <RadioSetModem+0x38>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <RadioSetModem+0x28>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e2b 	.word	0x08005e2b
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e5f 	.word	0x08005e5f
 8005e18:	08005e6d 	.word	0x08005e6d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f002 f961 	bl	80080e4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005e22:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <RadioSetModem+0xa0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	735a      	strb	r2, [r3, #13]
        break;
 8005e28:	e028      	b.n	8005e7c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f002 f95a 	bl	80080e4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <RadioSetModem+0xa0>)
 8005e32:	7b5a      	ldrb	r2, [r3, #13]
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <RadioSetModem+0xa0>)
 8005e36:	7b1b      	ldrb	r3, [r3, #12]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d01e      	beq.n	8005e7a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005e3c:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <RadioSetModem+0xa0>)
 8005e3e:	7b1a      	ldrb	r2, [r3, #12]
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <RadioSetModem+0xa0>)
 8005e42:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <RadioSetModem+0xa0>)
 8005e46:	7b5b      	ldrb	r3, [r3, #13]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ff43 	bl	8006cd4 <RadioSetPublicNetwork>
        }
        break;
 8005e4e:	e014      	b.n	8005e7a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e50:	2002      	movs	r0, #2
 8005e52:	f002 f947 	bl	80080e4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <RadioSetModem+0xa0>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	735a      	strb	r2, [r3, #13]
        break;
 8005e5c:	e00e      	b.n	8005e7c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005e5e:	2002      	movs	r0, #2
 8005e60:	f002 f940 	bl	80080e4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <RadioSetModem+0xa0>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	735a      	strb	r2, [r3, #13]
        break;
 8005e6a:	e007      	b.n	8005e7c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f002 f939 	bl	80080e4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <RadioSetModem+0xa0>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	735a      	strb	r2, [r3, #13]
        break;
 8005e78:	e000      	b.n	8005e7c <RadioSetModem+0x98>
        break;
 8005e7a:	bf00      	nop
    }
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000058c 	.word	0x2000058c

08005e88 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 f8e5 	bl	8008060 <SUBGRF_SetRfFrequency>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b090      	sub	sp, #64	; 0x40
 8005ea2:	af0a      	add	r7, sp, #40	; 0x28
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005eba:	f000 fdd2 	bl	8006a62 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f7ff ff90 	bl	8005de4 <RadioSetModem>

    RadioSetChannel( freq );
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ffdf 	bl	8005e88 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005eca:	2301      	movs	r3, #1
 8005ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9308      	str	r3, [sp, #32]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9306      	str	r3, [sp, #24]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9303      	str	r3, [sp, #12]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9302      	str	r3, [sp, #8]
 8005eea:	2303      	movs	r3, #3
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	2000      	movs	r0, #0
 8005efc:	f000 f826 	bl	8005f4c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005f00:	2000      	movs	r0, #0
 8005f02:	f000 fdb5 	bl	8006a70 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8005f06:	f000 ff13 	bl	8006d30 <RadioGetWakeupTime>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fc faed 	bl	80024ec <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005f12:	f000 fda6 	bl	8006a62 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f7ff ff5a 	bl	8005de4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005f30:	2300      	movs	r3, #0
 8005f32:	2200      	movs	r2, #0
 8005f34:	2100      	movs	r1, #0
 8005f36:	2000      	movs	r0, #0
 8005f38:	f002 f836 	bl	8007fa8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8005f3c:	f001 fdeb 	bl	8007b16 <SUBGRF_GetRandom>
 8005f40:	6078      	str	r0, [r7, #4]

    return rnd;
 8005f42:	687b      	ldr	r3, [r7, #4]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	461a      	mov	r2, r3
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8005f60:	4abd      	ldr	r2, [pc, #756]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005f62:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005f66:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005f68:	f002 fde5 	bl	8008b36 <RFW_DeInit>
    if( rxContinuous == true )
 8005f6c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005f78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8005f80:	4ab6      	ldr	r2, [pc, #728]	; (800625c <RadioSetRxConfig+0x310>)
 8005f82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f86:	7013      	strb	r3, [r2, #0]
 8005f88:	e002      	b.n	8005f90 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005f8a:	4bb4      	ldr	r3, [pc, #720]	; (800625c <RadioSetRxConfig+0x310>)
 8005f8c:	22ff      	movs	r2, #255	; 0xff
 8005f8e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d009      	beq.n	8005faa <RadioSetRxConfig+0x5e>
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	f300 81da 	bgt.w	8006350 <RadioSetRxConfig+0x404>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80bf 	beq.w	8006120 <RadioSetRxConfig+0x1d4>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f000 812c 	beq.w	8006200 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005fa8:	e1d2      	b.n	8006350 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005faa:	2001      	movs	r0, #1
 8005fac:	f001 fef8 	bl	8007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005fb0:	4ba9      	ldr	r3, [pc, #676]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005fb8:	4aa7      	ldr	r2, [pc, #668]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005fbe:	4ba6      	ldr	r3, [pc, #664]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fc0:	2209      	movs	r2, #9
 8005fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005fc6:	4ba4      	ldr	r3, [pc, #656]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005fce:	68b8      	ldr	r0, [r7, #8]
 8005fd0:	f002 fce2 	bl	8008998 <SUBGRF_GetFskBandwidthRegValue>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b9f      	ldr	r3, [pc, #636]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005fde:	4b9e      	ldr	r3, [pc, #632]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005fe4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	4b9b      	ldr	r3, [pc, #620]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005fec:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005fee:	4b9a      	ldr	r3, [pc, #616]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005ff4:	4b98      	ldr	r3, [pc, #608]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005ffa:	4b97      	ldr	r3, [pc, #604]	; (8006258 <RadioSetRxConfig+0x30c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006000:	4b95      	ldr	r3, [pc, #596]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006002:	2200      	movs	r2, #0
 8006004:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006006:	4b95      	ldr	r3, [pc, #596]	; (800625c <RadioSetRxConfig+0x310>)
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	4b93      	ldr	r3, [pc, #588]	; (8006258 <RadioSetRxConfig+0x30c>)
 800600c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800600e:	4b92      	ldr	r3, [pc, #584]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006010:	2201      	movs	r2, #1
 8006012:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006014:	4b90      	ldr	r3, [pc, #576]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006016:	2200      	movs	r2, #0
 8006018:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800601a:	2004      	movs	r0, #4
 800601c:	f7ff fee2 	bl	8005de4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006020:	488f      	ldr	r0, [pc, #572]	; (8006260 <RadioSetRxConfig+0x314>)
 8006022:	f002 f8eb 	bl	80081fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006026:	488f      	ldr	r0, [pc, #572]	; (8006264 <RadioSetRxConfig+0x318>)
 8006028:	f002 f9b4 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800602c:	4a8e      	ldr	r2, [pc, #568]	; (8006268 <RadioSetRxConfig+0x31c>)
 800602e:	f107 031c 	add.w	r3, r7, #28
 8006032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006036:	e883 0003 	stmia.w	r3, {r0, r1}
 800603a:	f107 031c 	add.w	r3, r7, #28
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fce7 	bl	8007a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006044:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006048:	f001 fd32 	bl	8007ab0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800604c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006050:	f000 fdde 	bl	8006c10 <RadioRead>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800605a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605e:	f023 0310 	bic.w	r3, r3, #16
 8006062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8006066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800606a:	4619      	mov	r1, r3
 800606c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006070:	f000 fdbc 	bl	8006bec <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8006074:	2104      	movs	r1, #4
 8006076:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800607a:	f000 fdb7 	bl	8006bec <RadioWrite>
            modReg= RadioRead(0x89b);
 800607e:	f640 009b 	movw	r0, #2203	; 0x89b
 8006082:	f000 fdc5 	bl	8006c10 <RadioRead>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800608c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006090:	f023 031c 	bic.w	r3, r3, #28
 8006094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8006098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	f640 009b 	movw	r0, #2203	; 0x89b
 80060a8:	f000 fda0 	bl	8006bec <RadioWrite>
            modReg= RadioRead(0x6d1);
 80060ac:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80060b0:	f000 fdae 	bl	8006c10 <RadioRead>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80060ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060be:	f023 0318 	bic.w	r3, r3, #24
 80060c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80060c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ca:	f043 0318 	orr.w	r3, r3, #24
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80060d6:	f000 fd89 	bl	8006bec <RadioWrite>
            modReg= RadioRead(0x6ac);
 80060da:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80060de:	f000 fd97 	bl	8006c10 <RadioRead>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80060e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006104:	f000 fd72 	bl	8006bec <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800610a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	4a4f      	ldr	r2, [pc, #316]	; (8006258 <RadioSetRxConfig+0x30c>)
 800611c:	6093      	str	r3, [r2, #8]
            break;
 800611e:	e118      	b.n	8006352 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006120:	2000      	movs	r0, #0
 8006122:	f001 fe3d 	bl	8007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006126:	4b4c      	ldr	r3, [pc, #304]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800612e:	4a4a      	ldr	r2, [pc, #296]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006134:	4b48      	ldr	r3, [pc, #288]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006136:	220b      	movs	r2, #11
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f002 fc2b 	bl	8008998 <SUBGRF_GetFskBandwidthRegValue>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	4b44      	ldr	r3, [pc, #272]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800614c:	4b42      	ldr	r3, [pc, #264]	; (8006258 <RadioSetRxConfig+0x30c>)
 800614e:	2200      	movs	r2, #0
 8006150:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006152:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	b29a      	uxth	r2, r3
 8006158:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <RadioSetRxConfig+0x30c>)
 800615a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <RadioSetRxConfig+0x30c>)
 800615e:	2204      	movs	r2, #4
 8006160:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006162:	4b3d      	ldr	r3, [pc, #244]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006164:	2218      	movs	r2, #24
 8006166:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006168:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <RadioSetRxConfig+0x30c>)
 800616a:	2200      	movs	r2, #0
 800616c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800616e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006172:	f083 0301 	eor.w	r3, r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	4b37      	ldr	r3, [pc, #220]	; (8006258 <RadioSetRxConfig+0x30c>)
 800617c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800617e:	4b37      	ldr	r3, [pc, #220]	; (800625c <RadioSetRxConfig+0x310>)
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	4b35      	ldr	r3, [pc, #212]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006184:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006186:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800618e:	4b32      	ldr	r3, [pc, #200]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006190:	22f2      	movs	r2, #242	; 0xf2
 8006192:	75da      	strb	r2, [r3, #23]
 8006194:	e002      	b.n	800619c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006196:	4b30      	ldr	r3, [pc, #192]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006198:	2201      	movs	r2, #1
 800619a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800619c:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <RadioSetRxConfig+0x30c>)
 800619e:	2201      	movs	r2, #1
 80061a0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80061a2:	f000 fc5e 	bl	8006a62 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80061a6:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <RadioSetRxConfig+0x30c>)
 80061a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fe14 	bl	8005de4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80061bc:	4828      	ldr	r0, [pc, #160]	; (8006260 <RadioSetRxConfig+0x314>)
 80061be:	f002 f81d 	bl	80081fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80061c2:	4828      	ldr	r0, [pc, #160]	; (8006264 <RadioSetRxConfig+0x318>)
 80061c4:	f002 f8e6 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <RadioSetRxConfig+0x320>)
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fc19 	bl	8007a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80061e0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061e4:	f001 fc64 	bl	8007ab0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80061e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <RadioSetRxConfig+0x30c>)
 80061fc:	6093      	str	r3, [r2, #8]
            break;
 80061fe:	e0a8      	b.n	8006352 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006200:	2000      	movs	r0, #0
 8006202:	f001 fdcd 	bl	8007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <RadioSetRxConfig+0x324>)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006226:	4a0c      	ldr	r2, [pc, #48]	; (8006258 <RadioSetRxConfig+0x30c>)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <RadioSetRxConfig+0x2f4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b0b      	cmp	r3, #11
 8006238:	d008      	beq.n	800624c <RadioSetRxConfig+0x300>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d005      	beq.n	800624c <RadioSetRxConfig+0x300>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d116      	bne.n	8006274 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b0c      	cmp	r3, #12
 800624a:	d113      	bne.n	8006274 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <RadioSetRxConfig+0x30c>)
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006254:	e012      	b.n	800627c <RadioSetRxConfig+0x330>
 8006256:	bf00      	nop
 8006258:	2000058c 	.word	0x2000058c
 800625c:	20000009 	.word	0x20000009
 8006260:	200005c4 	.word	0x200005c4
 8006264:	2000059a 	.word	0x2000059a
 8006268:	0800e720 	.word	0x0800e720
 800626c:	0800e728 	.word	0x0800e728
 8006270:	0800eb30 	.word	0x0800eb30
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006274:	4b39      	ldr	r3, [pc, #228]	; (800635c <RadioSetRxConfig+0x410>)
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800627c:	4b37      	ldr	r3, [pc, #220]	; (800635c <RadioSetRxConfig+0x410>)
 800627e:	2201      	movs	r2, #1
 8006280:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006282:	4b36      	ldr	r3, [pc, #216]	; (800635c <RadioSetRxConfig+0x410>)
 8006284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006288:	2b05      	cmp	r3, #5
 800628a:	d004      	beq.n	8006296 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800628c:	4b33      	ldr	r3, [pc, #204]	; (800635c <RadioSetRxConfig+0x410>)
 800628e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006292:	2b06      	cmp	r3, #6
 8006294:	d10a      	bne.n	80062ac <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8006296:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006298:	2b0b      	cmp	r3, #11
 800629a:	d803      	bhi.n	80062a4 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800629c:	4b2f      	ldr	r3, [pc, #188]	; (800635c <RadioSetRxConfig+0x410>)
 800629e:	220c      	movs	r2, #12
 80062a0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80062a2:	e006      	b.n	80062b2 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80062a4:	4a2d      	ldr	r2, [pc, #180]	; (800635c <RadioSetRxConfig+0x410>)
 80062a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062a8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80062aa:	e002      	b.n	80062b2 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80062ac:	4a2b      	ldr	r2, [pc, #172]	; (800635c <RadioSetRxConfig+0x410>)
 80062ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062b0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80062b2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80062b6:	4b29      	ldr	r3, [pc, #164]	; (800635c <RadioSetRxConfig+0x410>)
 80062b8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80062ba:	4b29      	ldr	r3, [pc, #164]	; (8006360 <RadioSetRxConfig+0x414>)
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <RadioSetRxConfig+0x410>)
 80062c0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80062c2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80062c6:	4b25      	ldr	r3, [pc, #148]	; (800635c <RadioSetRxConfig+0x410>)
 80062c8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80062cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <RadioSetRxConfig+0x410>)
 80062d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80062d6:	f000 fbc4 	bl	8006a62 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80062da:	4b20      	ldr	r3, [pc, #128]	; (800635c <RadioSetRxConfig+0x410>)
 80062dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fd7a 	bl	8005de4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80062f0:	481c      	ldr	r0, [pc, #112]	; (8006364 <RadioSetRxConfig+0x418>)
 80062f2:	f001 ff83 	bl	80081fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80062f6:	481c      	ldr	r0, [pc, #112]	; (8006368 <RadioSetRxConfig+0x41c>)
 80062f8:	f002 f84c 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80062fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fd5c 	bl	8007dbe <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <RadioSetRxConfig+0x410>)
 8006308:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10d      	bne.n	800632c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006310:	f240 7036 	movw	r0, #1846	; 0x736
 8006314:	f002 f99a 	bl	800864c <SUBGRF_ReadRegister>
 8006318:	4603      	mov	r3, r0
 800631a:	f023 0304 	bic.w	r3, r3, #4
 800631e:	b2db      	uxtb	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	f240 7036 	movw	r0, #1846	; 0x736
 8006326:	f002 f97d 	bl	8008624 <SUBGRF_WriteRegister>
 800632a:	e00c      	b.n	8006346 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800632c:	f240 7036 	movw	r0, #1846	; 0x736
 8006330:	f002 f98c 	bl	800864c <SUBGRF_ReadRegister>
 8006334:	4603      	mov	r3, r0
 8006336:	f043 0304 	orr.w	r3, r3, #4
 800633a:	b2db      	uxtb	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	f240 7036 	movw	r0, #1846	; 0x736
 8006342:	f002 f96f 	bl	8008624 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <RadioSetRxConfig+0x410>)
 8006348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800634c:	609a      	str	r2, [r3, #8]
            break;
 800634e:	e000      	b.n	8006352 <RadioSetRxConfig+0x406>
            break;
 8006350:	bf00      	nop
    }
}
 8006352:	bf00      	nop
 8006354:	3728      	adds	r7, #40	; 0x28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000058c 	.word	0x2000058c
 8006360:	20000009 	.word	0x20000009
 8006364:	200005c4 	.word	0x200005c4
 8006368:	2000059a 	.word	0x2000059a

0800636c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60ba      	str	r2, [r7, #8]
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	460b      	mov	r3, r1
 800637c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800637e:	f002 fbda 	bl	8008b36 <RFW_DeInit>
    switch( modem )
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b03      	cmp	r3, #3
 8006386:	f000 80d7 	beq.w	8006538 <RadioSetTxConfig+0x1cc>
 800638a:	2b03      	cmp	r3, #3
 800638c:	f300 80e6 	bgt.w	800655c <RadioSetTxConfig+0x1f0>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <RadioSetTxConfig+0x2e>
 8006394:	2b01      	cmp	r3, #1
 8006396:	d061      	beq.n	800645c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8006398:	e0e0      	b.n	800655c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800639a:	4b7c      	ldr	r3, [pc, #496]	; (800658c <RadioSetTxConfig+0x220>)
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80063a2:	4a7a      	ldr	r2, [pc, #488]	; (800658c <RadioSetTxConfig+0x220>)
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80063a8:	4b78      	ldr	r3, [pc, #480]	; (800658c <RadioSetTxConfig+0x220>)
 80063aa:	220b      	movs	r2, #11
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f002 faf1 	bl	8008998 <SUBGRF_GetFskBandwidthRegValue>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b74      	ldr	r3, [pc, #464]	; (800658c <RadioSetTxConfig+0x220>)
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80063c0:	4a72      	ldr	r2, [pc, #456]	; (800658c <RadioSetTxConfig+0x220>)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80063c6:	4b71      	ldr	r3, [pc, #452]	; (800658c <RadioSetTxConfig+0x220>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80063cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	4b6e      	ldr	r3, [pc, #440]	; (800658c <RadioSetTxConfig+0x220>)
 80063d4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80063d6:	4b6d      	ldr	r3, [pc, #436]	; (800658c <RadioSetTxConfig+0x220>)
 80063d8:	2204      	movs	r2, #4
 80063da:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80063dc:	4b6b      	ldr	r3, [pc, #428]	; (800658c <RadioSetTxConfig+0x220>)
 80063de:	2218      	movs	r2, #24
 80063e0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80063e2:	4b6a      	ldr	r3, [pc, #424]	; (800658c <RadioSetTxConfig+0x220>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80063e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	4b65      	ldr	r3, [pc, #404]	; (800658c <RadioSetTxConfig+0x220>)
 80063f6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80063f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006400:	4b62      	ldr	r3, [pc, #392]	; (800658c <RadioSetTxConfig+0x220>)
 8006402:	22f2      	movs	r2, #242	; 0xf2
 8006404:	75da      	strb	r2, [r3, #23]
 8006406:	e002      	b.n	800640e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006408:	4b60      	ldr	r3, [pc, #384]	; (800658c <RadioSetTxConfig+0x220>)
 800640a:	2201      	movs	r2, #1
 800640c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800640e:	4b5f      	ldr	r3, [pc, #380]	; (800658c <RadioSetTxConfig+0x220>)
 8006410:	2201      	movs	r2, #1
 8006412:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006414:	f000 fb25 	bl	8006a62 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006418:	4b5c      	ldr	r3, [pc, #368]	; (800658c <RadioSetTxConfig+0x220>)
 800641a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fcdb 	bl	8005de4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800642e:	4858      	ldr	r0, [pc, #352]	; (8006590 <RadioSetTxConfig+0x224>)
 8006430:	f001 fee4 	bl	80081fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006434:	4857      	ldr	r0, [pc, #348]	; (8006594 <RadioSetTxConfig+0x228>)
 8006436:	f001 ffad 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800643a:	4a57      	ldr	r2, [pc, #348]	; (8006598 <RadioSetTxConfig+0x22c>)
 800643c:	f107 0310 	add.w	r3, r7, #16
 8006440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006444:	e883 0003 	stmia.w	r3, {r0, r1}
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	4618      	mov	r0, r3
 800644e:	f001 fae0 	bl	8007a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006456:	f001 fb2b 	bl	8007ab0 <SUBGRF_SetWhiteningSeed>
            break;
 800645a:	e080      	b.n	800655e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800645c:	4b4b      	ldr	r3, [pc, #300]	; (800658c <RadioSetTxConfig+0x220>)
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	4b48      	ldr	r3, [pc, #288]	; (800658c <RadioSetTxConfig+0x220>)
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800646e:	4a4b      	ldr	r2, [pc, #300]	; (800659c <RadioSetTxConfig+0x230>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	781a      	ldrb	r2, [r3, #0]
 8006476:	4b45      	ldr	r3, [pc, #276]	; (800658c <RadioSetTxConfig+0x220>)
 8006478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800647c:	4a43      	ldr	r2, [pc, #268]	; (800658c <RadioSetTxConfig+0x220>)
 800647e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006482:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <RadioSetTxConfig+0x12c>
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b0b      	cmp	r3, #11
 8006490:	d008      	beq.n	80064a4 <RadioSetTxConfig+0x138>
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2b0c      	cmp	r3, #12
 8006496:	d005      	beq.n	80064a4 <RadioSetTxConfig+0x138>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d107      	bne.n	80064ae <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	d104      	bne.n	80064ae <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80064a4:	4b39      	ldr	r3, [pc, #228]	; (800658c <RadioSetTxConfig+0x220>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80064ac:	e003      	b.n	80064b6 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80064ae:	4b37      	ldr	r3, [pc, #220]	; (800658c <RadioSetTxConfig+0x220>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80064b6:	4b35      	ldr	r3, [pc, #212]	; (800658c <RadioSetTxConfig+0x220>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80064bc:	4b33      	ldr	r3, [pc, #204]	; (800658c <RadioSetTxConfig+0x220>)
 80064be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d004      	beq.n	80064d0 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80064c6:	4b31      	ldr	r3, [pc, #196]	; (800658c <RadioSetTxConfig+0x220>)
 80064c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80064cc:	2b06      	cmp	r3, #6
 80064ce:	d10a      	bne.n	80064e6 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80064d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064d2:	2b0b      	cmp	r3, #11
 80064d4:	d803      	bhi.n	80064de <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80064d6:	4b2d      	ldr	r3, [pc, #180]	; (800658c <RadioSetTxConfig+0x220>)
 80064d8:	220c      	movs	r2, #12
 80064da:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80064dc:	e006      	b.n	80064ec <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80064de:	4a2b      	ldr	r2, [pc, #172]	; (800658c <RadioSetTxConfig+0x220>)
 80064e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80064e4:	e002      	b.n	80064ec <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80064e6:	4a29      	ldr	r2, [pc, #164]	; (800658c <RadioSetTxConfig+0x220>)
 80064e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ea:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80064ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80064f0:	4b26      	ldr	r3, [pc, #152]	; (800658c <RadioSetTxConfig+0x220>)
 80064f2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80064f4:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <RadioSetTxConfig+0x234>)
 80064f6:	781a      	ldrb	r2, [r3, #0]
 80064f8:	4b24      	ldr	r3, [pc, #144]	; (800658c <RadioSetTxConfig+0x220>)
 80064fa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80064fc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <RadioSetTxConfig+0x220>)
 8006502:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006506:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800650a:	4b20      	ldr	r3, [pc, #128]	; (800658c <RadioSetTxConfig+0x220>)
 800650c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006510:	f000 faa7 	bl	8006a62 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <RadioSetTxConfig+0x220>)
 8006516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fc5d 	bl	8005de4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800652a:	4819      	ldr	r0, [pc, #100]	; (8006590 <RadioSetTxConfig+0x224>)
 800652c:	f001 fe66 	bl	80081fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006530:	4818      	ldr	r0, [pc, #96]	; (8006594 <RadioSetTxConfig+0x228>)
 8006532:	f001 ff2f 	bl	8008394 <SUBGRF_SetPacketParams>
            break;
 8006536:	e012      	b.n	800655e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006538:	2003      	movs	r0, #3
 800653a:	f7ff fc53 	bl	8005de4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <RadioSetTxConfig+0x220>)
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006546:	4a11      	ldr	r2, [pc, #68]	; (800658c <RadioSetTxConfig+0x220>)
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800654c:	4b0f      	ldr	r3, [pc, #60]	; (800658c <RadioSetTxConfig+0x220>)
 800654e:	2216      	movs	r2, #22
 8006550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006554:	480e      	ldr	r0, [pc, #56]	; (8006590 <RadioSetTxConfig+0x224>)
 8006556:	f001 fe51 	bl	80081fc <SUBGRF_SetModulationParams>
            break;
 800655a:	e000      	b.n	800655e <RadioSetTxConfig+0x1f2>
            break;
 800655c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800655e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006562:	4618      	mov	r0, r3
 8006564:	f002 f92a 	bl	80087bc <SUBGRF_SetRfTxPower>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	4b07      	ldr	r3, [pc, #28]	; (800658c <RadioSetTxConfig+0x220>)
 800656e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <RadioSetTxConfig+0x220>)
 8006574:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006578:	4618      	mov	r0, r3
 800657a:	f002 faf0 	bl	8008b5e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800657e:	4a03      	ldr	r2, [pc, #12]	; (800658c <RadioSetTxConfig+0x220>)
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	6053      	str	r3, [r2, #4]
}
 8006584:	bf00      	nop
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	2000058c 	.word	0x2000058c
 8006590:	200005c4 	.word	0x200005c4
 8006594:	2000059a 	.word	0x2000059a
 8006598:	0800e728 	.word	0x0800e728
 800659c:	0800eb30 	.word	0x0800eb30
 80065a0:	20000009 	.word	0x20000009

080065a4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
    return true;
 80065ac:	2301      	movs	r3, #1
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b0a      	cmp	r3, #10
 80065ca:	d83e      	bhi.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006611 	.word	0x08006611
 80065dc:	08006621 	.word	0x08006621
 80065e0:	08006631 	.word	0x08006631
 80065e4:	08006639 	.word	0x08006639
 80065e8:	0800663f 	.word	0x0800663f
 80065ec:	08006645 	.word	0x08006645
 80065f0:	0800664b 	.word	0x0800664b
 80065f4:	08006609 	.word	0x08006609
 80065f8:	08006619 	.word	0x08006619
 80065fc:	08006629 	.word	0x08006629
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006600:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006604:	60fb      	str	r3, [r7, #12]
        break;
 8006606:	e020      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006608:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800660c:	60fb      	str	r3, [r7, #12]
        break;
 800660e:	e01c      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006610:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006614:	60fb      	str	r3, [r7, #12]
        break;
 8006616:	e018      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006618:	f245 1361 	movw	r3, #20833	; 0x5161
 800661c:	60fb      	str	r3, [r7, #12]
        break;
 800661e:	e014      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006620:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006624:	60fb      	str	r3, [r7, #12]
        break;
 8006626:	e010      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006628:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800662c:	60fb      	str	r3, [r7, #12]
        break;
 800662e:	e00c      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006630:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006634:	60fb      	str	r3, [r7, #12]
        break;
 8006636:	e008      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <RadioGetLoRaBandwidthInHz+0xa0>)
 800663a:	60fb      	str	r3, [r7, #12]
        break;
 800663c:	e005      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <RadioGetLoRaBandwidthInHz+0xa4>)
 8006640:	60fb      	str	r3, [r7, #12]
        break;
 8006642:	e002      	b.n	800664a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <RadioGetLoRaBandwidthInHz+0xa8>)
 8006646:	60fb      	str	r3, [r7, #12]
        break;
 8006648:	bf00      	nop
    }

    return bandwidthInHz;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	0001e848 	.word	0x0001e848
 800665c:	0003d090 	.word	0x0003d090
 8006660:	0007a120 	.word	0x0007a120

08006664 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4603      	mov	r3, r0
 8006674:	70fb      	strb	r3, [r7, #3]
 8006676:	460b      	mov	r3, r1
 8006678:	803b      	strh	r3, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800667e:	883b      	ldrh	r3, [r7, #0]
 8006680:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006682:	78ba      	ldrb	r2, [r7, #2]
 8006684:	f082 0201 	eor.w	r2, r2, #1
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	2a00      	cmp	r2, #0
 800668c:	d001      	beq.n	8006692 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800668e:	2208      	movs	r2, #8
 8006690:	e000      	b.n	8006694 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006692:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006694:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006696:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800669a:	7c3b      	ldrb	r3, [r7, #16]
 800669c:	7d39      	ldrb	r1, [r7, #20]
 800669e:	2900      	cmp	r1, #0
 80066a0:	d001      	beq.n	80066a6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80066a2:	2102      	movs	r1, #2
 80066a4:	e000      	b.n	80066a8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80066a6:	2100      	movs	r1, #0
 80066a8:	440b      	add	r3, r1
 80066aa:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80066ac:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b08b      	sub	sp, #44	; 0x2c
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	460b      	mov	r3, r1
 80066c8:	71fb      	strb	r3, [r7, #7]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	3304      	adds	r3, #4
 80066d2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b05      	cmp	r3, #5
 80066de:	d002      	beq.n	80066e6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d104      	bne.n	80066f0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80066e6:	88bb      	ldrh	r3, [r7, #4]
 80066e8:	2b0b      	cmp	r3, #11
 80066ea:	d801      	bhi.n	80066f0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80066ec:	230c      	movs	r3, #12
 80066ee:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b0b      	cmp	r3, #11
 80066fa:	d008      	beq.n	800670e <RadioGetLoRaTimeOnAirNumerator+0x56>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d005      	beq.n	800670e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d105      	bne.n	8006714 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d102      	bne.n	8006714 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006714:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006718:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800671a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800671e:	2a00      	cmp	r2, #0
 8006720:	d001      	beq.n	8006726 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006722:	2210      	movs	r2, #16
 8006724:	e000      	b.n	8006728 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8006726:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006728:	4413      	add	r3, r2
 800672a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006730:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006732:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006736:	2a00      	cmp	r2, #0
 8006738:	d001      	beq.n	800673e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800673a:	2200      	movs	r2, #0
 800673c:	e000      	b.n	8006740 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800673e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006740:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006742:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b06      	cmp	r3, #6
 8006748:	d803      	bhi.n	8006752 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	623b      	str	r3, [r7, #32]
 8006750:	e00e      	b.n	8006770 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3308      	adds	r3, #8
 8006756:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3b02      	subs	r3, #2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	e002      	b.n	8006770 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	da01      	bge.n	800677a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	4413      	add	r3, r2
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	fb92 f3f3 	sdiv	r3, r2, r3
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	fb02 f203 	mul.w	r2, r2, r3
 800678e:	88bb      	ldrh	r3, [r7, #4]
 8006790:	4413      	add	r3, r2
    int32_t intermediate =
 8006792:	330c      	adds	r3, #12
 8006794:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b06      	cmp	r3, #6
 800679a:	d802      	bhi.n	80067a2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	3302      	adds	r3, #2
 80067a0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	3b02      	subs	r3, #2
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	372c      	adds	r7, #44	; 0x2c
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
	...

080067bc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	461a      	mov	r2, r3
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	4613      	mov	r3, r2
 80067ce:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80067d4:	2301      	movs	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <RadioTimeOnAir+0x28>
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d017      	beq.n	8006812 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80067e2:	e035      	b.n	8006850 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80067e4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80067e8:	8c3a      	ldrh	r2, [r7, #32]
 80067ea:	7bb9      	ldrb	r1, [r7, #14]
 80067ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4603      	mov	r3, r0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ff32 	bl	8006664 <RadioGetGfskTimeOnAirNumerator>
 8006800:	4603      	mov	r3, r0
 8006802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	613b      	str	r3, [r7, #16]
        break;
 8006810:	e01e      	b.n	8006850 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006812:	8c39      	ldrh	r1, [r7, #32]
 8006814:	7bba      	ldrb	r2, [r7, #14]
 8006816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800681a:	9302      	str	r3, [sp, #8]
 800681c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	460b      	mov	r3, r1
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68b8      	ldr	r0, [r7, #8]
 800682e:	f7ff ff43 	bl	80066b8 <RadioGetLoRaTimeOnAirNumerator>
 8006832:	4603      	mov	r3, r0
 8006834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800683e:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <RadioTimeOnAir+0xac>)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff feb6 	bl	80065b8 <RadioGetLoRaBandwidthInHz>
 800684c:	6138      	str	r0, [r7, #16]
        break;
 800684e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	1e5a      	subs	r2, r3, #1
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	0800eb30 	.word	0x0800eb30

0800686c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	f240 2101 	movw	r1, #513	; 0x201
 8006880:	f240 2001 	movw	r0, #513	; 0x201
 8006884:	f001 fb90 	bl	8007fa8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8006888:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <RadioSend+0x1c4>)
 800688a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f001 ff6b 	bl	800876c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8006896:	4b66      	ldr	r3, [pc, #408]	; (8006a30 <RadioSend+0x1c4>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d112      	bne.n	80068c4 <RadioSend+0x58>
 800689e:	4b64      	ldr	r3, [pc, #400]	; (8006a30 <RadioSend+0x1c4>)
 80068a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a4:	2b06      	cmp	r3, #6
 80068a6:	d10d      	bne.n	80068c4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80068a8:	f640 0089 	movw	r0, #2185	; 0x889
 80068ac:	f001 fece 	bl	800864c <SUBGRF_ReadRegister>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f023 0304 	bic.w	r3, r3, #4
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	f640 0089 	movw	r0, #2185	; 0x889
 80068be:	f001 feb1 	bl	8008624 <SUBGRF_WriteRegister>
 80068c2:	e00c      	b.n	80068de <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80068c4:	f640 0089 	movw	r0, #2185	; 0x889
 80068c8:	f001 fec0 	bl	800864c <SUBGRF_ReadRegister>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f043 0304 	orr.w	r3, r3, #4
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	f640 0089 	movw	r0, #2185	; 0x889
 80068da:	f001 fea3 	bl	8008624 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80068de:	4b54      	ldr	r3, [pc, #336]	; (8006a30 <RadioSend+0x1c4>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	f200 809e 	bhi.w	8006a24 <RadioSend+0x1b8>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <RadioSend+0x84>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	0800691b 	.word	0x0800691b
 80068f4:	08006901 	.word	0x08006901
 80068f8:	0800696d 	.word	0x0800696d
 80068fc:	0800698d 	.word	0x0800698d
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006900:	4a4b      	ldr	r2, [pc, #300]	; (8006a30 <RadioSend+0x1c4>)
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006906:	484b      	ldr	r0, [pc, #300]	; (8006a34 <RadioSend+0x1c8>)
 8006908:	f001 fd44 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	2200      	movs	r2, #0
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f86a 	bl	80079ec <SUBGRF_SendPayload>
            break;
 8006918:	e087      	b.n	8006a2a <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800691a:	f002 f912 	bl	8008b42 <RFW_Is_Init>
 800691e:	4603      	mov	r3, r0
 8006920:	2b01      	cmp	r3, #1
 8006922:	d116      	bne.n	8006952 <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006924:	f107 020d 	add.w	r2, r7, #13
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f002 f920 	bl	8008b72 <RFW_TransmitInit>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d177      	bne.n	8006a28 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006938:	7b7a      	ldrb	r2, [r7, #13]
 800693a:	4b3d      	ldr	r3, [pc, #244]	; (8006a30 <RadioSend+0x1c4>)
 800693c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800693e:	483d      	ldr	r0, [pc, #244]	; (8006a34 <RadioSend+0x1c8>)
 8006940:	f001 fd28 	bl	8008394 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8006944:	7b7b      	ldrb	r3, [r7, #13]
 8006946:	2200      	movs	r2, #0
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f84e 	bl	80079ec <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006950:	e06b      	b.n	8006a2a <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006952:	4a37      	ldr	r2, [pc, #220]	; (8006a30 <RadioSend+0x1c4>)
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006958:	4836      	ldr	r0, [pc, #216]	; (8006a34 <RadioSend+0x1c8>)
 800695a:	f001 fd1b 	bl	8008394 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	2200      	movs	r2, #0
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f841 	bl	80079ec <SUBGRF_SendPayload>
            break;
 800696a:	e05e      	b.n	8006a2a <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800696c:	4b30      	ldr	r3, [pc, #192]	; (8006a30 <RadioSend+0x1c4>)
 800696e:	2202      	movs	r2, #2
 8006970:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006972:	4a2f      	ldr	r2, [pc, #188]	; (8006a30 <RadioSend+0x1c4>)
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006978:	482e      	ldr	r0, [pc, #184]	; (8006a34 <RadioSend+0x1c8>)
 800697a:	f001 fd0b 	bl	8008394 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	2200      	movs	r2, #0
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f831 	bl	80079ec <SUBGRF_SendPayload>
            break;
 800698a:	e04e      	b.n	8006a2a <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	461a      	mov	r2, r3
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4829      	ldr	r0, [pc, #164]	; (8006a38 <RadioSend+0x1cc>)
 8006994:	f000 fbb1 	bl	80070fa <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <RadioSend+0x1c4>)
 800699a:	2202      	movs	r2, #2
 800699c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	3301      	adds	r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <RadioSend+0x1c4>)
 80069a6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069a8:	4822      	ldr	r0, [pc, #136]	; (8006a34 <RadioSend+0x1c8>)
 80069aa:	f001 fcf3 	bl	8008394 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80069ae:	2100      	movs	r1, #0
 80069b0:	20f1      	movs	r0, #241	; 0xf1
 80069b2:	f000 f91b 	bl	8006bec <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80069b6:	2100      	movs	r1, #0
 80069b8:	20f0      	movs	r0, #240	; 0xf0
 80069ba:	f000 f917 	bl	8006bec <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80069be:	4b1c      	ldr	r3, [pc, #112]	; (8006a30 <RadioSend+0x1c4>)
 80069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c2:	2b64      	cmp	r3, #100	; 0x64
 80069c4:	d108      	bne.n	80069d8 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80069c6:	2170      	movs	r1, #112	; 0x70
 80069c8:	20f3      	movs	r0, #243	; 0xf3
 80069ca:	f000 f90f 	bl	8006bec <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80069ce:	211d      	movs	r1, #29
 80069d0:	20f2      	movs	r0, #242	; 0xf2
 80069d2:	f000 f90b 	bl	8006bec <RadioWrite>
 80069d6:	e007      	b.n	80069e8 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80069d8:	21e1      	movs	r1, #225	; 0xe1
 80069da:	20f3      	movs	r0, #243	; 0xf3
 80069dc:	f000 f906 	bl	8006bec <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80069e0:	2104      	movs	r1, #4
 80069e2:	20f2      	movs	r0, #242	; 0xf2
 80069e4:	f000 f902 	bl	8006bec <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3302      	adds	r3, #2
 80069f2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80069f4:	89fb      	ldrh	r3, [r7, #14]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	20f4      	movs	r0, #244	; 0xf4
 8006a00:	f000 f8f4 	bl	8006bec <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	20f5      	movs	r0, #245	; 0xf5
 8006a0c:	f000 f8ee 	bl	8006bec <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	3301      	adds	r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4806      	ldr	r0, [pc, #24]	; (8006a38 <RadioSend+0x1cc>)
 8006a1e:	f000 ffe5 	bl	80079ec <SUBGRF_SendPayload>
            break;
 8006a22:	e002      	b.n	8006a2a <RadioSend+0x1be>
        }
        default:
            break;
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <RadioSend+0x1be>
                return;
 8006a28:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2000058c 	.word	0x2000058c
 8006a34:	2000059a 	.word	0x2000059a
 8006a38:	20000348 	.word	0x20000348

08006a3c <RadioSleep>:

static void RadioSleep( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006a42:	2300      	movs	r3, #0
 8006a44:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006a46:	793b      	ldrb	r3, [r7, #4]
 8006a48:	f043 0304 	orr.w	r3, r3, #4
 8006a4c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006a4e:	7938      	ldrb	r0, [r7, #4]
 8006a50:	f001 f8a8 	bl	8007ba4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006a54:	2002      	movs	r0, #2
 8006a56:	f7fb fd49 	bl	80024ec <HAL_Delay>
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <RadioStandby>:

static void RadioStandby( void )
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8006a66:	2000      	movs	r0, #0
 8006a68:	f001 f8ce 	bl	8007c08 <SUBGRF_SetStandby>
}
 8006a6c:	bf00      	nop
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8006a78:	f002 f863 	bl	8008b42 <RFW_Is_Init>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d102      	bne.n	8006a88 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8006a82:	f002 f886 	bl	8008b92 <RFW_ReceiveInit>
 8006a86:	e007      	b.n	8006a98 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f240 2162 	movw	r1, #610	; 0x262
 8006a90:	f240 2062 	movw	r0, #610	; 0x262
 8006a94:	f001 fa88 	bl	8007fa8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <RadioRx+0x5c>)
 8006a9a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 fe63 	bl	800876c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <RadioRx+0x5c>)
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d004      	beq.n	8006ab8 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006aae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006ab2:	f001 f8e5 	bl	8007c80 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8006ab6:	e005      	b.n	8006ac4 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <RadioRx+0x5c>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 f8de 	bl	8007c80 <SUBGRF_SetRx>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	2000058c 	.word	0x2000058c

08006ad0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006ad8:	f002 f833 	bl	8008b42 <RFW_Is_Init>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d102      	bne.n	8006ae8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8006ae2:	f002 f856 	bl	8008b92 <RFW_ReceiveInit>
 8006ae6:	e007      	b.n	8006af8 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2200      	movs	r2, #0
 8006aec:	f240 2162 	movw	r1, #610	; 0x262
 8006af0:	f240 2062 	movw	r0, #610	; 0x262
 8006af4:	f001 fa58 	bl	8007fa8 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <RadioRxBoosted+0x5c>)
 8006afa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fe33 	bl	800876c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <RadioRxBoosted+0x5c>)
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006b0e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006b12:	f001 f8d5 	bl	8007cc0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8006b16:	e005      	b.n	8006b24 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <RadioRxBoosted+0x5c>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f8ce 	bl	8007cc0 <SUBGRF_SetRxBoosted>
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2000058c 	.word	0x2000058c

08006b30 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <RadioSetRxDutyCycle+0x28>)
 8006b3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fe12 	bl	800876c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f8dc 	bl	8007d08 <SUBGRF_SetRxDutyCycle>
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	2000058c 	.word	0x2000058c

08006b5c <RadioStartCad>:

static void RadioStartCad( void )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006b60:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <RadioStartCad+0x2c>)
 8006b62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b66:	2100      	movs	r1, #0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fdff 	bl	800876c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8006b76:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8006b7a:	f001 fa15 	bl	8007fa8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006b7e:	f001 f8ef 	bl	8007d60 <SUBGRF_SetCad>
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	2000058c 	.word	0x2000058c

08006b8c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006b9c:	883b      	ldrh	r3, [r7, #0]
 8006b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fa59 	bl	8008060 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fe02 	bl	80087bc <SUBGRF_SetRfTxPower>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006bbc:	7afb      	ldrb	r3, [r7, #11]
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fdd3 	bl	800876c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8006bc6:	f001 f8d9 	bl	8007d7c <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	4603      	mov	r3, r0
 8006bda:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006bdc:	f001 fc8f 	bl	80084fe <SUBGRF_GetRssiInst>
 8006be0:	4603      	mov	r3, r0
 8006be2:	b21b      	sxth	r3, r3
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	80fb      	strh	r3, [r7, #6]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006bfc:	797a      	ldrb	r2, [r7, #5]
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fd0e 	bl	8008624 <SUBGRF_WriteRegister>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fd15 	bl	800864c <SUBGRF_ReadRegister>
 8006c22:	4603      	mov	r3, r0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	6039      	str	r1, [r7, #0]
 8006c36:	80fb      	strh	r3, [r7, #6]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006c3c:	797b      	ldrb	r3, [r7, #5]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 fd15 	bl	8008674 <SUBGRF_WriteRegisters>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	4603      	mov	r3, r0
 8006c5a:	6039      	str	r1, [r7, #0]
 8006c5c:	80fb      	strh	r3, [r7, #6]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8006c62:	797b      	ldrb	r3, [r7, #5]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fd16 	bl	800869c <SUBGRF_ReadRegisters>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	460a      	mov	r2, r1
 8006c82:	71fb      	strb	r3, [r7, #7]
 8006c84:	4613      	mov	r3, r2
 8006c86:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d10a      	bne.n	8006ca4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006c8e:	4a0e      	ldr	r2, [pc, #56]	; (8006cc8 <RadioSetMaxPayloadLength+0x50>)
 8006c90:	79bb      	ldrb	r3, [r7, #6]
 8006c92:	7013      	strb	r3, [r2, #0]
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <RadioSetMaxPayloadLength+0x50>)
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <RadioSetMaxPayloadLength+0x54>)
 8006c9a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c9c:	480c      	ldr	r0, [pc, #48]	; (8006cd0 <RadioSetMaxPayloadLength+0x58>)
 8006c9e:	f001 fb79 	bl	8008394 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8006ca2:	e00d      	b.n	8006cc0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006ca4:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <RadioSetMaxPayloadLength+0x54>)
 8006ca6:	7d5b      	ldrb	r3, [r3, #21]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d109      	bne.n	8006cc0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006cac:	4a06      	ldr	r2, [pc, #24]	; (8006cc8 <RadioSetMaxPayloadLength+0x50>)
 8006cae:	79bb      	ldrb	r3, [r7, #6]
 8006cb0:	7013      	strb	r3, [r2, #0]
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <RadioSetMaxPayloadLength+0x50>)
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <RadioSetMaxPayloadLength+0x54>)
 8006cb8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cba:	4805      	ldr	r0, [pc, #20]	; (8006cd0 <RadioSetMaxPayloadLength+0x58>)
 8006cbc:	f001 fb6a 	bl	8008394 <SUBGRF_SetPacketParams>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000009 	.word	0x20000009
 8006ccc:	2000058c 	.word	0x2000058c
 8006cd0:	2000059a 	.word	0x2000059a

08006cd4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <RadioSetPublicNetwork+0x58>)
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	7313      	strb	r3, [r2, #12]
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <RadioSetPublicNetwork+0x58>)
 8006ce6:	7b1a      	ldrb	r2, [r3, #12]
 8006ce8:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <RadioSetPublicNetwork+0x58>)
 8006cea:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7ff f879 	bl	8005de4 <RadioSetModem>
    if( enable == true )
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006cf8:	2134      	movs	r1, #52	; 0x34
 8006cfa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006cfe:	f001 fc91 	bl	8008624 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006d02:	2144      	movs	r1, #68	; 0x44
 8006d04:	f240 7041 	movw	r0, #1857	; 0x741
 8006d08:	f001 fc8c 	bl	8008624 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006d0c:	e009      	b.n	8006d22 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006d0e:	2114      	movs	r1, #20
 8006d10:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006d14:	f001 fc86 	bl	8008624 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006d18:	2124      	movs	r1, #36	; 0x24
 8006d1a:	f240 7041 	movw	r0, #1857	; 0x741
 8006d1e:	f001 fc81 	bl	8008624 <SUBGRF_WriteRegister>
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000058c 	.word	0x2000058c

08006d30 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8006d34:	f001 fd76 	bl	8008824 <SUBGRF_GetRadioWakeUpTime>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	3303      	adds	r3, #3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8006d4a:	4a05      	ldr	r2, [pc, #20]	; (8006d60 <RadioOnDioIrq+0x20>)
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8006d52:	f000 f807 	bl	8006d64 <RadioIrqProcess>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000058c 	.word	0x2000058c

08006d64 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8006d72:	4bab      	ldr	r3, [pc, #684]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006d74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7c:	f000 8104 	beq.w	8006f88 <RadioIrqProcess+0x224>
 8006d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d84:	f300 816e 	bgt.w	8007064 <RadioIrqProcess+0x300>
 8006d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8c:	f000 80ea 	beq.w	8006f64 <RadioIrqProcess+0x200>
 8006d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d94:	f300 8166 	bgt.w	8007064 <RadioIrqProcess+0x300>
 8006d98:	2b80      	cmp	r3, #128	; 0x80
 8006d9a:	f000 80cf 	beq.w	8006f3c <RadioIrqProcess+0x1d8>
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	f300 8160 	bgt.w	8007064 <RadioIrqProcess+0x300>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	dc49      	bgt.n	8006e3c <RadioIrqProcess+0xd8>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f340 815b 	ble.w	8007064 <RadioIrqProcess+0x300>
 8006dae:	3b01      	subs	r3, #1
 8006db0:	2b1f      	cmp	r3, #31
 8006db2:	f200 8157 	bhi.w	8007064 <RadioIrqProcess+0x300>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <RadioIrqProcess+0x58>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e45 	.word	0x08006e45
 8006dc0:	08006e79 	.word	0x08006e79
 8006dc4:	08007065 	.word	0x08007065
 8006dc8:	08007065 	.word	0x08007065
 8006dcc:	08007065 	.word	0x08007065
 8006dd0:	08007065 	.word	0x08007065
 8006dd4:	08007065 	.word	0x08007065
 8006dd8:	08006fe1 	.word	0x08006fe1
 8006ddc:	08007065 	.word	0x08007065
 8006de0:	08007065 	.word	0x08007065
 8006de4:	08007065 	.word	0x08007065
 8006de8:	08007065 	.word	0x08007065
 8006dec:	08007065 	.word	0x08007065
 8006df0:	08007065 	.word	0x08007065
 8006df4:	08007065 	.word	0x08007065
 8006df8:	08007065 	.word	0x08007065
 8006dfc:	08007065 	.word	0x08007065
 8006e00:	08007065 	.word	0x08007065
 8006e04:	08007065 	.word	0x08007065
 8006e08:	08007065 	.word	0x08007065
 8006e0c:	08007065 	.word	0x08007065
 8006e10:	08007065 	.word	0x08007065
 8006e14:	08007065 	.word	0x08007065
 8006e18:	08007065 	.word	0x08007065
 8006e1c:	08007065 	.word	0x08007065
 8006e20:	08007065 	.word	0x08007065
 8006e24:	08007065 	.word	0x08007065
 8006e28:	08007065 	.word	0x08007065
 8006e2c:	08007065 	.word	0x08007065
 8006e30:	08007065 	.word	0x08007065
 8006e34:	08007065 	.word	0x08007065
 8006e38:	08006ff1 	.word	0x08006ff1
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	f000 80f9 	beq.w	8007034 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8006e42:	e10f      	b.n	8007064 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 8006e44:	2000      	movs	r0, #0
 8006e46:	f000 fedf 	bl	8007c08 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8006e4a:	f001 fe81 	bl	8008b50 <RFW_Is_LongPacketModeEnabled>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8006e54:	f001 fea5 	bl	8008ba2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006e58:	4b72      	ldr	r3, [pc, #456]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8103 	beq.w	8007068 <RadioIrqProcess+0x304>
 8006e62:	4b70      	ldr	r3, [pc, #448]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80fd 	beq.w	8007068 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 8006e6e:	4b6d      	ldr	r3, [pc, #436]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4798      	blx	r3
        break;
 8006e76:	e0f7      	b.n	8007068 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8006e78:	4b69      	ldr	r3, [pc, #420]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	f083 0301 	eor.w	r3, r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 8006e86:	2000      	movs	r0, #0
 8006e88:	f000 febe 	bl	8007c08 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f640 1002 	movw	r0, #2306	; 0x902
 8006e92:	f001 fbc7 	bl	8008624 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8006e96:	f640 1044 	movw	r0, #2372	; 0x944
 8006e9a:	f001 fbd7 	bl	800864c <SUBGRF_ReadRegister>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f043 0302 	orr.w	r3, r3, #2
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f640 1044 	movw	r0, #2372	; 0x944
 8006eac:	f001 fbba 	bl	8008624 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006eb0:	1dfb      	adds	r3, r7, #7
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	485c      	ldr	r0, [pc, #368]	; (8007028 <RadioIrqProcess+0x2c4>)
 8006eb8:	f000 fd76 	bl	80079a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006ebc:	485b      	ldr	r0, [pc, #364]	; (800702c <RadioIrqProcess+0x2c8>)
 8006ebe:	f001 fb5f 	bl	8008580 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006ec2:	4b58      	ldr	r3, [pc, #352]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <RadioIrqProcess+0x1d4>
 8006eca:	4b56      	ldr	r3, [pc, #344]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d031      	beq.n	8006f38 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 8006ed4:	4b52      	ldr	r3, [pc, #328]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10e      	bne.n	8006efc <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689c      	ldr	r4, [r3, #8]
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	b299      	uxth	r1, r3
 8006ee8:	4b4d      	ldr	r3, [pc, #308]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006eea:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006eee:	b21a      	sxth	r2, r3
 8006ef0:	4b4b      	ldr	r3, [pc, #300]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006ef2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006ef6:	484c      	ldr	r0, [pc, #304]	; (8007028 <RadioIrqProcess+0x2c4>)
 8006ef8:	47a0      	blx	r4
                break;
 8006efa:	e01e      	b.n	8006f3a <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006efc:	4b48      	ldr	r3, [pc, #288]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	463a      	mov	r2, r7
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fd6f 	bl	80089e8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8006f0a:	4b46      	ldr	r3, [pc, #280]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689c      	ldr	r4, [r3, #8]
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	b299      	uxth	r1, r3
 8006f14:	4b42      	ldr	r3, [pc, #264]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006f16:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8006f1a:	b218      	sxth	r0, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f22:	4a43      	ldr	r2, [pc, #268]	; (8007030 <RadioIrqProcess+0x2cc>)
 8006f24:	fb82 c203 	smull	ip, r2, r2, r3
 8006f28:	1192      	asrs	r2, r2, #6
 8006f2a:	17db      	asrs	r3, r3, #31
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	4602      	mov	r2, r0
 8006f32:	483d      	ldr	r0, [pc, #244]	; (8007028 <RadioIrqProcess+0x2c4>)
 8006f34:	47a0      	blx	r4
                break;
 8006f36:	e000      	b.n	8006f3a <RadioIrqProcess+0x1d6>
        }
 8006f38:	bf00      	nop
        break;
 8006f3a:	e0a2      	b.n	8007082 <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f000 fe63 	bl	8007c08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006f42:	4b38      	ldr	r3, [pc, #224]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8090 	beq.w	800706c <RadioIrqProcess+0x308>
 8006f4c:	4b35      	ldr	r3, [pc, #212]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 808a 	beq.w	800706c <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8006f58:	4b32      	ldr	r3, [pc, #200]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	2000      	movs	r0, #0
 8006f60:	4798      	blx	r3
        break;
 8006f62:	e083      	b.n	800706c <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 8006f64:	2000      	movs	r0, #0
 8006f66:	f000 fe4f 	bl	8007c08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006f6a:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d07e      	beq.n	8007070 <RadioIrqProcess+0x30c>
 8006f72:	4b2c      	ldr	r3, [pc, #176]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d079      	beq.n	8007070 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2001      	movs	r0, #1
 8006f84:	4798      	blx	r3
        break;
 8006f86:	e073      	b.n	8007070 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006f88:	f000 fcf4 	bl	8007974 <SUBGRF_GetOperatingMode>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d110      	bne.n	8006fb4 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 8006f92:	2000      	movs	r0, #0
 8006f94:	f000 fe38 	bl	8007c08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d069      	beq.n	8007074 <RadioIrqProcess+0x310>
 8006fa0:	4b20      	ldr	r3, [pc, #128]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d064      	beq.n	8007074 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006faa:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	4798      	blx	r3
        break;
 8006fb2:	e05f      	b.n	8007074 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006fb4:	f000 fcde 	bl	8007974 <SUBGRF_GetOperatingMode>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d15a      	bne.n	8007074 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f000 fe22 	bl	8007c08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d053      	beq.n	8007074 <RadioIrqProcess+0x310>
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d04e      	beq.n	8007074 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8006fd6:	4b13      	ldr	r3, [pc, #76]	; (8007024 <RadioIrqProcess+0x2c0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4798      	blx	r3
        break;
 8006fde:	e049      	b.n	8007074 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006fe0:	f001 fdaf 	bl	8008b42 <RFW_Is_Init>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d146      	bne.n	8007078 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006fea:	f001 fde0 	bl	8008bae <RFW_ReceivePayload>
        break;
 8006fee:	e043      	b.n	8007078 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <RadioIrqProcess+0x2bc>)
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	f083 0301 	eor.w	r3, r3, #1
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006ffe:	2000      	movs	r0, #0
 8007000:	f000 fe02 	bl	8007c08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <RadioIrqProcess+0x2c0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d037      	beq.n	800707c <RadioIrqProcess+0x318>
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <RadioIrqProcess+0x2c0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d032      	beq.n	800707c <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <RadioIrqProcess+0x2c0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4798      	blx	r3
        break;
 800701e:	e02d      	b.n	800707c <RadioIrqProcess+0x318>
 8007020:	2000058c 	.word	0x2000058c
 8007024:	20000448 	.word	0x20000448
 8007028:	20000348 	.word	0x20000348
 800702c:	200005b0 	.word	0x200005b0
 8007030:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8007034:	4b15      	ldr	r3, [pc, #84]	; (800708c <RadioIrqProcess+0x328>)
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	f083 0301 	eor.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 8007042:	2000      	movs	r0, #0
 8007044:	f000 fde0 	bl	8007c08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <RadioIrqProcess+0x32c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d017      	beq.n	8007080 <RadioIrqProcess+0x31c>
 8007050:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <RadioIrqProcess+0x32c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d012      	beq.n	8007080 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 800705a:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <RadioIrqProcess+0x32c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	4798      	blx	r3
        break;
 8007062:	e00d      	b.n	8007080 <RadioIrqProcess+0x31c>
        break;
 8007064:	bf00      	nop
 8007066:	e00c      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 8007068:	bf00      	nop
 800706a:	e00a      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 800706c:	bf00      	nop
 800706e:	e008      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 8007070:	bf00      	nop
 8007072:	e006      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 8007074:	bf00      	nop
 8007076:	e004      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 8007078:	bf00      	nop
 800707a:	e002      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <RadioIrqProcess+0x31e>
        break;
 8007080:	bf00      	nop
  }
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
 800708a:	bf00      	nop
 800708c:	2000058c 	.word	0x2000058c
 8007090:	20000448 	.word	0x20000448

08007094 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <RadioTxPrbs+0x2c>)
 800709a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800709e:	2101      	movs	r1, #1
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fb63 	bl	800876c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <RadioTxPrbs+0x30>)
 80070a8:	212d      	movs	r1, #45	; 0x2d
 80070aa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80070ae:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80070b0:	f000 fe6d 	bl	8007d8e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80070b4:	4804      	ldr	r0, [pc, #16]	; (80070c8 <RadioTxPrbs+0x34>)
 80070b6:	f000 fdc3 	bl	8007c40 <SUBGRF_SetTx>
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	2000058c 	.word	0x2000058c
 80070c4:	08006bed 	.word	0x08006bed
 80070c8:	000fffff 	.word	0x000fffff

080070cc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80070d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fb6e 	bl	80087bc <SUBGRF_SetRfTxPower>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2101      	movs	r1, #1
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fb3f 	bl	800876c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80070ee:	f000 fe45 	bl	8007d7c <SUBGRF_SetTxContinuousWave>
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80070fa:	b480      	push	{r7}
 80070fc:	b089      	sub	sp, #36	; 0x24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e011      	b.n	800713a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	4413      	add	r3, r2
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	440b      	add	r3, r1
 8007124:	43d2      	mvns	r2, r2
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	3301      	adds	r3, #1
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	429a      	cmp	r2, r3
 8007140:	dbe9      	blt.n	8007116 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e049      	b.n	80071dc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	425a      	negs	r2, r3
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	f002 0207 	and.w	r2, r2, #7
 8007154:	bf58      	it	pl
 8007156:	4253      	negpl	r3, r2
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f1c3 0307 	rsb	r3, r3, #7
 800715e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	da00      	bge.n	8007168 <payload_integration+0x6e>
 8007166:	3307      	adds	r3, #7
 8007168:	10db      	asrs	r3, r3, #3
 800716a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	3301      	adds	r3, #1
 8007170:	425a      	negs	r2, r3
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	f002 0207 	and.w	r2, r2, #7
 800717a:	bf58      	it	pl
 800717c:	4253      	negpl	r3, r2
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f1c3 0307 	rsb	r3, r3, #7
 8007184:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	3301      	adds	r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	da00      	bge.n	8007190 <payload_integration+0x96>
 800718e:	3307      	adds	r3, #7
 8007190:	10db      	asrs	r3, r3, #3
 8007192:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007194:	7dbb      	ldrb	r3, [r7, #22]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	fa42 f303 	asr.w	r3, r2, r3
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80071ac:	7ffa      	ldrb	r2, [r7, #31]
 80071ae:	7cfb      	ldrb	r3, [r7, #19]
 80071b0:	4053      	eors	r3, r2
 80071b2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80071b4:	7d3b      	ldrb	r3, [r7, #20]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b25a      	sxtb	r2, r3
 80071be:	7ff9      	ldrb	r1, [r7, #31]
 80071c0:	7d7b      	ldrb	r3, [r7, #21]
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b259      	sxtb	r1, r3
 80071cc:	7d3b      	ldrb	r3, [r7, #20]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	b2ca      	uxtb	r2, r1
 80071d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	3301      	adds	r3, #1
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	dbb0      	blt.n	8007148 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	01db      	lsls	r3, r3, #7
 80071ea:	b25a      	sxtb	r2, r3
 80071ec:	7ffb      	ldrb	r3, [r7, #31]
 80071ee:	019b      	lsls	r3, r3, #6
 80071f0:	b25b      	sxtb	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	7ffa      	ldrb	r2, [r7, #31]
 80071f8:	2a00      	cmp	r2, #0
 80071fa:	d101      	bne.n	8007200 <payload_integration+0x106>
 80071fc:	2220      	movs	r2, #32
 80071fe:	e000      	b.n	8007202 <payload_integration+0x108>
 8007200:	2200      	movs	r2, #0
 8007202:	4313      	orrs	r3, r2
 8007204:	b259      	sxtb	r1, r3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	b2ca      	uxtb	r2, r1
 800720e:	701a      	strb	r2, [r3, #0]
}
 8007210:	bf00      	nop
 8007212:	3724      	adds	r7, #36	; 0x24
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
	...

0800721c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	; 0x30
 8007220:	af00      	add	r7, sp, #0
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8007230:	2300      	movs	r3, #0
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	2300      	movs	r3, #0
 8007236:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007238:	f001 fc7d 	bl	8008b36 <RFW_DeInit>

    if( rxContinuous != 0 )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2da      	uxtb	r2, r3
 8007252:	4ba9      	ldr	r3, [pc, #676]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007254:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <RadioSetRxGenericConfig+0x48>
 800725c:	2b01      	cmp	r3, #1
 800725e:	f000 80e8 	beq.w	8007432 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007262:	e1a0      	b.n	80075a6 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <RadioSetRxGenericConfig+0x58>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295
 8007278:	e196      	b.n	80075a8 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7d5b      	ldrb	r3, [r3, #21]
 800727e:	2b08      	cmp	r3, #8
 8007280:	d902      	bls.n	8007288 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	e18f      	b.n	80075a8 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007288:	2300      	movs	r3, #0
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
 800728c:	e00d      	b.n	80072aa <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	4413      	add	r3, r2
 8007296:	7819      	ldrb	r1, [r3, #0]
 8007298:	f107 021c 	add.w	r2, r7, #28
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	4413      	add	r3, r2
 80072a0:	460a      	mov	r2, r1
 80072a2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	3301      	adds	r3, #1
 80072a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	7d5b      	ldrb	r3, [r3, #21]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	4293      	cmp	r3, r2
 80072b4:	dbeb      	blt.n	800728e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fd6b 	bl	8007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80072ca:	4b8b      	ldr	r3, [pc, #556]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	4a88      	ldr	r2, [pc, #544]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80072d8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	791a      	ldrb	r2, [r3, #4]
 80072de:	4b86      	ldr	r3, [pc, #536]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80072e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 fb55 	bl	8008998 <SUBGRF_GetFskBandwidthRegValue>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	4b81      	ldr	r3, [pc, #516]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80072f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80072f8:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	b29b      	uxth	r3, r3
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	b29a      	uxth	r2, r3
 8007308:	4b7b      	ldr	r3, [pc, #492]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800730a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	7d1a      	ldrb	r2, [r3, #20]
 8007310:	4b79      	ldr	r3, [pc, #484]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007312:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	7d5b      	ldrb	r3, [r3, #21]
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	b2da      	uxtb	r2, r3
 800731c:	4b76      	ldr	r3, [pc, #472]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800731e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007326:	4b74      	ldr	r3, [pc, #464]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007328:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b6f      	ldr	r3, [pc, #444]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800733c:	759a      	strb	r2, [r3, #22]
 800733e:	e00b      	b.n	8007358 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007346:	2b02      	cmp	r3, #2
 8007348:	d103      	bne.n	8007352 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800734a:	4b6b      	ldr	r3, [pc, #428]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800734c:	22ff      	movs	r2, #255	; 0xff
 800734e:	759a      	strb	r2, [r3, #22]
 8007350:	e002      	b.n	8007358 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007352:	4b69      	ldr	r3, [pc, #420]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007354:	22ff      	movs	r2, #255	; 0xff
 8007356:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800735e:	2b02      	cmp	r3, #2
 8007360:	d004      	beq.n	800736c <RadioSetRxGenericConfig+0x150>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007368:	2b02      	cmp	r3, #2
 800736a:	d12d      	bne.n	80073c8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007372:	2bf1      	cmp	r3, #241	; 0xf1
 8007374:	d00c      	beq.n	8007390 <RadioSetRxGenericConfig+0x174>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800737c:	2bf2      	cmp	r3, #242	; 0xf2
 800737e:	d007      	beq.n	8007390 <RadioSetRxGenericConfig+0x174>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007386:	2b01      	cmp	r3, #1
 8007388:	d002      	beq.n	8007390 <RadioSetRxGenericConfig+0x174>
            return -1;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	e10b      	b.n	80075a8 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8007390:	2300      	movs	r3, #0
 8007392:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007398:	4b58      	ldr	r3, [pc, #352]	; (80074fc <RadioSetRxGenericConfig+0x2e0>)
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	4a57      	ldr	r2, [pc, #348]	; (8007500 <RadioSetRxGenericConfig+0x2e4>)
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 fbba 	bl	8008b1c <RFW_Init>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <RadioSetRxGenericConfig+0x198>
            return -1;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	e0f9      	b.n	80075a8 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80073b4:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80073ba:	4b4f      	ldr	r3, [pc, #316]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073bc:	2201      	movs	r2, #1
 80073be:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80073c0:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	755a      	strb	r2, [r3, #21]
        {
 80073c6:	e00e      	b.n	80073e6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80073ce:	4b4a      	ldr	r3, [pc, #296]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073d0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80073d8:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073da:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80073e2:	4b45      	ldr	r3, [pc, #276]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80073e4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80073e6:	f7ff fb3c 	bl	8006a62 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80073ea:	2000      	movs	r0, #0
 80073ec:	f7fe fcfa 	bl	8005de4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80073f0:	4844      	ldr	r0, [pc, #272]	; (8007504 <RadioSetRxGenericConfig+0x2e8>)
 80073f2:	f000 ff03 	bl	80081fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073f6:	4844      	ldr	r0, [pc, #272]	; (8007508 <RadioSetRxGenericConfig+0x2ec>)
 80073f8:	f000 ffcc 	bl	8008394 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80073fc:	f107 031c 	add.w	r3, r7, #28
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fb06 	bl	8007a12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	8c1b      	ldrh	r3, [r3, #32]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fb50 	bl	8007ab0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fb2b 	bl	8007a70 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007420:	fb02 f203 	mul.w	r2, r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	fbb2 f3f3 	udiv	r3, r2, r3
 800742c:	4a32      	ldr	r2, [pc, #200]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800742e:	6093      	str	r3, [r2, #8]
        break;
 8007430:	e0b9      	b.n	80075a6 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <RadioSetRxGenericConfig+0x224>
            return -1;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e0b3      	b.n	80075a8 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007446:	2b01      	cmp	r3, #1
 8007448:	d104      	bne.n	8007454 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007452:	e002      	b.n	800745a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8007454:	23ff      	movs	r3, #255	; 0xff
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf14      	ite	ne
 8007462:	2301      	movne	r3, #1
 8007464:	2300      	moveq	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fc99 	bl	8007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fca3 	bl	8007dbe <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007478:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007486:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8007492:	4b19      	ldr	r3, [pc, #100]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80074a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d010      	beq.n	80074d0 <RadioSetRxGenericConfig+0x2b4>
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	dc2c      	bgt.n	800750c <RadioSetRxGenericConfig+0x2f0>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <RadioSetRxGenericConfig+0x2a0>
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d005      	beq.n	80074c6 <RadioSetRxGenericConfig+0x2aa>
            break;
 80074ba:	e027      	b.n	800750c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80074c4:	e023      	b.n	800750e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80074ce:	e01e      	b.n	800750e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074d6:	2b0b      	cmp	r3, #11
 80074d8:	d004      	beq.n	80074e4 <RadioSetRxGenericConfig+0x2c8>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d104      	bne.n	80074ee <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80074ec:	e00f      	b.n	800750e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80074ee:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <RadioSetRxGenericConfig+0x2dc>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80074f6:	e00a      	b.n	800750e <RadioSetRxGenericConfig+0x2f2>
 80074f8:	2000058c 	.word	0x2000058c
 80074fc:	20000448 	.word	0x20000448
 8007500:	200005e5 	.word	0x200005e5
 8007504:	200005c4 	.word	0x200005c4
 8007508:	2000059a 	.word	0x2000059a
            break;
 800750c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800750e:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 8007510:	2201      	movs	r2, #1
 8007512:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 800751a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8007522:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 8007524:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007526:	4a22      	ldr	r2, [pc, #136]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 8007528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800752c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007534:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 8007536:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007540:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 8007542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007546:	f7ff fa8c 	bl	8006a62 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800754a:	2001      	movs	r0, #1
 800754c:	f7fe fc4a 	bl	8005de4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007550:	4818      	ldr	r0, [pc, #96]	; (80075b4 <RadioSetRxGenericConfig+0x398>)
 8007552:	f000 fe53 	bl	80081fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007556:	4818      	ldr	r0, [pc, #96]	; (80075b8 <RadioSetRxGenericConfig+0x39c>)
 8007558:	f000 ff1c 	bl	8008394 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800755c:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 800755e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10d      	bne.n	8007582 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8007566:	f240 7036 	movw	r0, #1846	; 0x736
 800756a:	f001 f86f 	bl	800864c <SUBGRF_ReadRegister>
 800756e:	4603      	mov	r3, r0
 8007570:	f023 0304 	bic.w	r3, r3, #4
 8007574:	b2db      	uxtb	r3, r3
 8007576:	4619      	mov	r1, r3
 8007578:	f240 7036 	movw	r0, #1846	; 0x736
 800757c:	f001 f852 	bl	8008624 <SUBGRF_WriteRegister>
 8007580:	e00c      	b.n	800759c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8007582:	f240 7036 	movw	r0, #1846	; 0x736
 8007586:	f001 f861 	bl	800864c <SUBGRF_ReadRegister>
 800758a:	4603      	mov	r3, r0
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4619      	mov	r1, r3
 8007594:	f240 7036 	movw	r0, #1846	; 0x736
 8007598:	f001 f844 	bl	8008624 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <RadioSetRxGenericConfig+0x394>)
 800759e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a2:	609a      	str	r2, [r3, #8]
        break;
 80075a4:	bf00      	nop
    }
    return status;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3730      	adds	r7, #48	; 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	2000058c 	.word	0x2000058c
 80075b4:	200005c4 	.word	0x200005c4
 80075b8:	2000059a 	.word	0x2000059a

080075bc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	; 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607b      	str	r3, [r7, #4]
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
 80075ca:	4613      	mov	r3, r2
 80075cc:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	2300      	movs	r3, #0
 80075d4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80075d6:	f001 faae 	bl	8008b36 <RFW_DeInit>
    switch( modem )
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	f000 8144 	beq.w	800786a <RadioSetTxGenericConfig+0x2ae>
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	f300 8160 	bgt.w	80078a8 <RadioSetTxGenericConfig+0x2ec>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <RadioSetTxGenericConfig+0x38>
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	f000 80b7 	beq.w	8007760 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80075f2:	e159      	b.n	80078a8 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <RadioSetTxGenericConfig+0x48>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8007604:	f04f 33ff 	mov.w	r3, #4294967295
 8007608:	e163      	b.n	80078d2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	7d1b      	ldrb	r3, [r3, #20]
 800760e:	2b08      	cmp	r3, #8
 8007610:	d902      	bls.n	8007618 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8007612:	f04f 33ff 	mov.w	r3, #4294967295
 8007616:	e15c      	b.n	80078d2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007618:	2300      	movs	r3, #0
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
 800761c:	e00d      	b.n	800763a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	4413      	add	r3, r2
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	f107 021c 	add.w	r2, r7, #28
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	4413      	add	r3, r2
 8007630:	460a      	mov	r2, r1
 8007632:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	3301      	adds	r3, #1
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	7d1b      	ldrb	r3, [r3, #20]
 800763e:	461a      	mov	r2, r3
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	4293      	cmp	r3, r2
 8007644:	dbeb      	blt.n	800761e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007646:	4ba5      	ldr	r3, [pc, #660]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	4aa2      	ldr	r2, [pc, #648]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007654:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	4ba0      	ldr	r3, [pc, #640]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800765c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f997 	bl	8008998 <SUBGRF_GetFskBandwidthRegValue>
 800766a:	4603      	mov	r3, r0
 800766c:	461a      	mov	r2, r3
 800766e:	4b9b      	ldr	r3, [pc, #620]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4a98      	ldr	r2, [pc, #608]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800767a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800767c:	4b97      	ldr	r3, [pc, #604]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800767e:	2200      	movs	r2, #0
 8007680:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	b29b      	uxth	r3, r3
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	b29a      	uxth	r2, r3
 800768c:	4b93      	ldr	r3, [pc, #588]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800768e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007690:	4b92      	ldr	r3, [pc, #584]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007692:	2204      	movs	r2, #4
 8007694:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	7d1b      	ldrb	r3, [r3, #20]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	b2da      	uxtb	r2, r3
 800769e:	4b8f      	ldr	r3, [pc, #572]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80076a0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80076a2:	4b8e      	ldr	r3, [pc, #568]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d003      	beq.n	80076ba <RadioSetTxGenericConfig+0xfe>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	7f9b      	ldrb	r3, [r3, #30]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d12a      	bne.n	8007710 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	7fdb      	ldrb	r3, [r3, #31]
 80076be:	2bf1      	cmp	r3, #241	; 0xf1
 80076c0:	d00a      	beq.n	80076d8 <RadioSetTxGenericConfig+0x11c>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	7fdb      	ldrb	r3, [r3, #31]
 80076c6:	2bf2      	cmp	r3, #242	; 0xf2
 80076c8:	d006      	beq.n	80076d8 <RadioSetTxGenericConfig+0x11c>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	7fdb      	ldrb	r3, [r3, #31]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d002      	beq.n	80076d8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	e0fc      	b.n	80078d2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80076d8:	2301      	movs	r3, #1
 80076da:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80076e0:	4b7f      	ldr	r3, [pc, #508]	; (80078e0 <RadioSetTxGenericConfig+0x324>)
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	4a7e      	ldr	r2, [pc, #504]	; (80078e4 <RadioSetTxGenericConfig+0x328>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fa16 	bl	8008b1c <RFW_Init>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <RadioSetTxGenericConfig+0x140>
              return -1;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e0ea      	b.n	80078d2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80076fc:	4b77      	ldr	r3, [pc, #476]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80076fe:	2200      	movs	r2, #0
 8007700:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8007702:	4b76      	ldr	r3, [pc, #472]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007704:	2201      	movs	r2, #1
 8007706:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007708:	4b74      	ldr	r3, [pc, #464]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800770a:	2200      	movs	r2, #0
 800770c:	755a      	strb	r2, [r3, #21]
        {
 800770e:	e00c      	b.n	800772a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	7fda      	ldrb	r2, [r3, #31]
 8007714:	4b71      	ldr	r3, [pc, #452]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007716:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800771e:	4b6f      	ldr	r3, [pc, #444]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007720:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7f9a      	ldrb	r2, [r3, #30]
 8007726:	4b6d      	ldr	r3, [pc, #436]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007728:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800772a:	f7ff f99a 	bl	8006a62 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800772e:	2000      	movs	r0, #0
 8007730:	f7fe fb58 	bl	8005de4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007734:	486c      	ldr	r0, [pc, #432]	; (80078e8 <RadioSetTxGenericConfig+0x32c>)
 8007736:	f000 fd61 	bl	80081fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800773a:	486c      	ldr	r0, [pc, #432]	; (80078ec <RadioSetTxGenericConfig+0x330>)
 800773c:	f000 fe2a 	bl	8008394 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007740:	f107 031c 	add.w	r3, r7, #28
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f964 	bl	8007a12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	8b9b      	ldrh	r3, [r3, #28]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f9ae 	bl	8007ab0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	8c1b      	ldrh	r3, [r3, #32]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f989 	bl	8007a70 <SUBGRF_SetCrcPolynomial>
        break;
 800775e:	e0a4      	b.n	80078aa <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007760:	4b5e      	ldr	r3, [pc, #376]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800776e:	4b5b      	ldr	r3, [pc, #364]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800777a:	4b58      	ldr	r3, [pc, #352]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800777c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007786:	4b55      	ldr	r3, [pc, #340]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007788:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007792:	2b02      	cmp	r3, #2
 8007794:	d010      	beq.n	80077b8 <RadioSetTxGenericConfig+0x1fc>
 8007796:	2b02      	cmp	r3, #2
 8007798:	dc22      	bgt.n	80077e0 <RadioSetTxGenericConfig+0x224>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <RadioSetTxGenericConfig+0x1e8>
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d005      	beq.n	80077ae <RadioSetTxGenericConfig+0x1f2>
            break;
 80077a2:	e01d      	b.n	80077e0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80077ac:	e019      	b.n	80077e2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80077ae:	4b4b      	ldr	r3, [pc, #300]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80077b6:	e014      	b.n	80077e2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077be:	2b0b      	cmp	r3, #11
 80077c0:	d004      	beq.n	80077cc <RadioSetTxGenericConfig+0x210>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c8:	2b0c      	cmp	r3, #12
 80077ca:	d104      	bne.n	80077d6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80077cc:	4b43      	ldr	r3, [pc, #268]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80077d4:	e005      	b.n	80077e2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80077d6:	4b41      	ldr	r3, [pc, #260]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80077de:	e000      	b.n	80077e2 <RadioSetTxGenericConfig+0x226>
            break;
 80077e0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80077e2:	4b3e      	ldr	r3, [pc, #248]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077ec:	4b3b      	ldr	r3, [pc, #236]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077ee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80077f6:	4b39      	ldr	r3, [pc, #228]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80077f8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007800:	4b36      	ldr	r3, [pc, #216]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007802:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800780c:	4b33      	ldr	r3, [pc, #204]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800780e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007812:	f7ff f926 	bl	8006a62 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007816:	2001      	movs	r0, #1
 8007818:	f7fe fae4 	bl	8005de4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800781c:	4832      	ldr	r0, [pc, #200]	; (80078e8 <RadioSetTxGenericConfig+0x32c>)
 800781e:	f000 fced 	bl	80081fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007822:	4832      	ldr	r0, [pc, #200]	; (80078ec <RadioSetTxGenericConfig+0x330>)
 8007824:	f000 fdb6 	bl	8008394 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8007828:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800782a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782e:	2b06      	cmp	r3, #6
 8007830:	d10d      	bne.n	800784e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007832:	f640 0089 	movw	r0, #2185	; 0x889
 8007836:	f000 ff09 	bl	800864c <SUBGRF_ReadRegister>
 800783a:	4603      	mov	r3, r0
 800783c:	f023 0304 	bic.w	r3, r3, #4
 8007840:	b2db      	uxtb	r3, r3
 8007842:	4619      	mov	r1, r3
 8007844:	f640 0089 	movw	r0, #2185	; 0x889
 8007848:	f000 feec 	bl	8008624 <SUBGRF_WriteRegister>
        break;
 800784c:	e02d      	b.n	80078aa <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800784e:	f640 0089 	movw	r0, #2185	; 0x889
 8007852:	f000 fefb 	bl	800864c <SUBGRF_ReadRegister>
 8007856:	4603      	mov	r3, r0
 8007858:	f043 0304 	orr.w	r3, r3, #4
 800785c:	b2db      	uxtb	r3, r3
 800785e:	4619      	mov	r1, r3
 8007860:	f640 0089 	movw	r0, #2185	; 0x889
 8007864:	f000 fede 	bl	8008624 <SUBGRF_WriteRegister>
        break;
 8007868:	e01f      	b.n	80078aa <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <RadioSetTxGenericConfig+0x2c0>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800787a:	d902      	bls.n	8007882 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800787c:	f04f 33ff 	mov.w	r3, #4294967295
 8007880:	e027      	b.n	80078d2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8007882:	2002      	movs	r0, #2
 8007884:	f7fe faae 	bl	8005de4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007888:	4b14      	ldr	r3, [pc, #80]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	4a11      	ldr	r2, [pc, #68]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 8007896:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007898:	4b10      	ldr	r3, [pc, #64]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 800789a:	2216      	movs	r2, #22
 800789c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078a0:	4811      	ldr	r0, [pc, #68]	; (80078e8 <RadioSetTxGenericConfig+0x32c>)
 80078a2:	f000 fcab 	bl	80081fc <SUBGRF_SetModulationParams>
        break;
 80078a6:	e000      	b.n	80078aa <RadioSetTxGenericConfig+0x2ee>
        break;
 80078a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80078aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff84 	bl	80087bc <SUBGRF_SetRfTxPower>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80078ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80078c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f94a 	bl	8008b5e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80078ca:	4a04      	ldr	r2, [pc, #16]	; (80078dc <RadioSetTxGenericConfig+0x320>)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6053      	str	r3, [r2, #4]
    return 0;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	2000058c 	.word	0x2000058c
 80078e0:	20000448 	.word	0x20000448
 80078e4:	200005e4 	.word	0x200005e4
 80078e8:	200005c4 	.word	0x200005c4
 80078ec:	2000059a 	.word	0x2000059a

080078f0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <SUBGRF_Init+0x78>)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8007904:	f7fa fa8c 	bl	8001e20 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007908:	2002      	movs	r0, #2
 800790a:	f001 f823 	bl	8008954 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800790e:	4b17      	ldr	r3, [pc, #92]	; (800796c <SUBGRF_Init+0x7c>)
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8007914:	2000      	movs	r0, #0
 8007916:	f000 f977 	bl	8007c08 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800791a:	f7fa f957 	bl	8001bcc <RBI_IsTCXO>
 800791e:	4603      	mov	r3, r0
 8007920:	2b01      	cmp	r3, #1
 8007922:	d10e      	bne.n	8007942 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007924:	2140      	movs	r1, #64	; 0x40
 8007926:	2001      	movs	r0, #1
 8007928:	f000 fb78 	bl	800801c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800792c:	2100      	movs	r1, #0
 800792e:	f640 1011 	movw	r0, #2321	; 0x911
 8007932:	f000 fe77 	bl	8008624 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8007936:	237f      	movs	r3, #127	; 0x7f
 8007938:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800793a:	7b38      	ldrb	r0, [r7, #12]
 800793c:	f000 fa85 	bl	8007e4a <SUBGRF_Calibrate>
 8007940:	e009      	b.n	8007956 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007942:	2120      	movs	r1, #32
 8007944:	f640 1011 	movw	r0, #2321	; 0x911
 8007948:	f000 fe6c 	bl	8008624 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800794c:	2120      	movs	r1, #32
 800794e:	f640 1012 	movw	r0, #2322	; 0x912
 8007952:	f000 fe67 	bl	8008624 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8007956:	f7fa f91d 	bl	8001b94 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <SUBGRF_Init+0x80>)
 800795c:	2201      	movs	r2, #1
 800795e:	701a      	strb	r2, [r3, #0]
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000458 	.word	0x20000458
 800796c:	20000454 	.word	0x20000454
 8007970:	2000044c 	.word	0x2000044c

08007974 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <SUBGRF_GetOperatingMode+0x10>)
 800797a:	781b      	ldrb	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr
 8007984:	2000044c 	.word	0x2000044c

08007988 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	461a      	mov	r2, r3
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	2000      	movs	r0, #0
 800799c:	f000 fe92 	bl	80086c4 <SUBGRF_WriteBuffer>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80079ba:	f107 0317 	add.w	r3, r7, #23
 80079be:	4619      	mov	r1, r3
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f000 fdb1 	bl	8008528 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	79fa      	ldrb	r2, [r7, #7]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d201      	bcs.n	80079d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e007      	b.n	80079e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80079d4:	7df8      	ldrb	r0, [r7, #23]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	f000 fe87 	bl	80086f0 <SUBGRF_ReadBuffer>

    return 0;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	460b      	mov	r3, r1
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f7ff ffc2 	bl	8007988 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f91b 	bl	8007c40 <SUBGRF_SetTx>
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8007a22:	f000 fe27 	bl	8008674 <SUBGRF_WriteRegisters>
    return 0;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	0a1b      	lsrs	r3, r3, #8
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007a4a:	f000 fb67 	bl	800811c <SUBGRF_GetPacketType>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d108      	bne.n	8007a66 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	2202      	movs	r2, #2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007a60:	f000 fe08 	bl	8008674 <SUBGRF_WriteRegisters>
            break;
 8007a64:	e000      	b.n	8007a68 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8007a66:	bf00      	nop
    }
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	0a1b      	lsrs	r3, r3, #8
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007a8a:	f000 fb47 	bl	800811c <SUBGRF_GetPacketType>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007a94:	f107 030c 	add.w	r3, r7, #12
 8007a98:	2202      	movs	r2, #2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f240 60be 	movw	r0, #1726	; 0x6be
 8007aa0:	f000 fde8 	bl	8008674 <SUBGRF_WriteRegisters>
            break;
 8007aa4:	e000      	b.n	8007aa8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007aa6:	bf00      	nop
    }
}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007abe:	f000 fb2d 	bl	800811c <SUBGRF_GetPacketType>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d121      	bne.n	8007b0c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007ac8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007acc:	f000 fdbe 	bl	800864c <SUBGRF_ReadRegister>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	b25b      	sxtb	r3, r3
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	b25a      	sxtb	r2, r3
 8007ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007af8:	f000 fd94 	bl	8008624 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	4619      	mov	r1, r3
 8007b02:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8007b06:	f000 fd8d 	bl	8008624 <SUBGRF_WriteRegister>
            break;
 8007b0a:	e000      	b.n	8007b0e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8007b0c:	bf00      	nop
    }
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007b28:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007b2c:	f000 fd8e 	bl	800864c <SUBGRF_ReadRegister>
 8007b30:	4603      	mov	r3, r0
 8007b32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007b42:	f000 fd6f 	bl	8008624 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8007b46:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007b4a:	f000 fd7f 	bl	800864c <SUBGRF_ReadRegister>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007b52:	79bb      	ldrb	r3, [r7, #6]
 8007b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007b60:	f000 fd60 	bl	8008624 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007b64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007b68:	f000 f88a 	bl	8007c80 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	2204      	movs	r2, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	f640 0019 	movw	r0, #2073	; 0x819
 8007b76:	f000 fd91 	bl	800869c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f000 f844 	bl	8007c08 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	4619      	mov	r1, r3
 8007b84:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007b88:	f000 fd4c 	bl	8008624 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007b8c:	79bb      	ldrb	r3, [r7, #6]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007b94:	f000 fd46 	bl	8008624 <SUBGRF_WriteRegister>

    return number;
 8007b98:	683b      	ldr	r3, [r7, #0]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007bac:	2000      	movs	r0, #0
 8007bae:	f7f9 fff8 	bl	8001ba2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007bb2:	2002      	movs	r0, #2
 8007bb4:	f000 fece 	bl	8008954 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007bb8:	793b      	ldrb	r3, [r7, #4]
 8007bba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007bc4:	793b      	ldrb	r3, [r7, #4]
 8007bc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8007bd4:	793b      	ldrb	r3, [r7, #4]
 8007bd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007be4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8007be6:	f107 030f 	add.w	r3, r7, #15
 8007bea:	2201      	movs	r2, #1
 8007bec:	4619      	mov	r1, r3
 8007bee:	2084      	movs	r0, #132	; 0x84
 8007bf0:	f000 fd94 	bl	800871c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <SUBGRF_SetSleep+0x60>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	2000044c 	.word	0x2000044c

08007c08 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8007c12:	1dfb      	adds	r3, r7, #7
 8007c14:	2201      	movs	r2, #1
 8007c16:	4619      	mov	r1, r3
 8007c18:	2080      	movs	r0, #128	; 0x80
 8007c1a:	f000 fd7f 	bl	800871c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <SUBGRF_SetStandby+0x34>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8007c2a:	e002      	b.n	8007c32 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8007c2c:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <SUBGRF_SetStandby+0x34>)
 8007c2e:	2202      	movs	r2, #2
 8007c30:	701a      	strb	r2, [r3, #0]
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	2000044c 	.word	0x2000044c

08007c40 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <SUBGRF_SetTx+0x3c>)
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	2203      	movs	r2, #3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	2083      	movs	r0, #131	; 0x83
 8007c6e:	f000 fd55 	bl	800871c <SUBGRF_WriteCommand>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000044c 	.word	0x2000044c

08007c80 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007c88:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <SUBGRF_SetRx+0x3c>)
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007ca4:	f107 030c 	add.w	r3, r7, #12
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4619      	mov	r1, r3
 8007cac:	2082      	movs	r0, #130	; 0x82
 8007cae:	f000 fd35 	bl	800871c <SUBGRF_WriteCommand>
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000044c 	.word	0x2000044c

08007cc0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <SUBGRF_SetRxBoosted+0x44>)
 8007cca:	2205      	movs	r2, #5
 8007ccc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8007cce:	2197      	movs	r1, #151	; 0x97
 8007cd0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8007cd4:	f000 fca6 	bl	8008624 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	0c1b      	lsrs	r3, r3, #16
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007cee:	f107 030c 	add.w	r3, r7, #12
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	2082      	movs	r0, #130	; 0x82
 8007cf8:	f000 fd10 	bl	800871c <SUBGRF_WriteCommand>
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000044c 	.word	0x2000044c

08007d08 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	0a1b      	lsrs	r3, r3, #8
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	2206      	movs	r2, #6
 8007d44:	4619      	mov	r1, r3
 8007d46:	2094      	movs	r0, #148	; 0x94
 8007d48:	f000 fce8 	bl	800871c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <SUBGRF_SetRxDutyCycle+0x54>)
 8007d4e:	2206      	movs	r2, #6
 8007d50:	701a      	strb	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2000044c 	.word	0x2000044c

08007d60 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007d64:	2200      	movs	r2, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	20c5      	movs	r0, #197	; 0xc5
 8007d6a:	f000 fcd7 	bl	800871c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8007d6e:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <SUBGRF_SetCad+0x18>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	701a      	strb	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	2000044c 	.word	0x2000044c

08007d7c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	20d1      	movs	r0, #209	; 0xd1
 8007d86:	f000 fcc9 	bl	800871c <SUBGRF_WriteCommand>
}
 8007d8a:	bf00      	nop
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8007d92:	2200      	movs	r2, #0
 8007d94:	2100      	movs	r1, #0
 8007d96:	20d2      	movs	r0, #210	; 0xd2
 8007d98:	f000 fcc0 	bl	800871c <SUBGRF_WriteCommand>
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007daa:	1dfb      	adds	r3, r7, #7
 8007dac:	2201      	movs	r2, #1
 8007dae:	4619      	mov	r1, r3
 8007db0:	209f      	movs	r0, #159	; 0x9f
 8007db2:	f000 fcb3 	bl	800871c <SUBGRF_WriteCommand>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007dc8:	1dfb      	adds	r3, r7, #7
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4619      	mov	r1, r3
 8007dce:	20a0      	movs	r0, #160	; 0xa0
 8007dd0:	f000 fca4 	bl	800871c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8007dd8:	d91c      	bls.n	8007e14 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007de8:	e005      	b.n	8007df6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	089b      	lsrs	r3, r3, #2
 8007dee:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	3301      	adds	r3, #1
 8007df4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b1f      	cmp	r3, #31
 8007dfa:	d8f6      	bhi.n	8007dea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	4413      	add	r3, r2
 8007e06:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8007e08:	7b7b      	ldrb	r3, [r7, #13]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f240 7006 	movw	r0, #1798	; 0x706
 8007e10:	f000 fc08 	bl	8008624 <SUBGRF_WriteRegister>
    }
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8007e22:	f7f9 feda 	bl	8001bda <RBI_IsDCDC>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d102      	bne.n	8007e32 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	e001      	b.n	8007e36 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8007e32:	2300      	movs	r3, #0
 8007e34:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8007e36:	1dfb      	adds	r3, r7, #7
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	2096      	movs	r0, #150	; 0x96
 8007e3e:	f000 fc6d 	bl	800871c <SUBGRF_WriteCommand>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007e52:	793b      	ldrb	r3, [r7, #4]
 8007e54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	019b      	lsls	r3, r3, #6
 8007e5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007e5e:	793b      	ldrb	r3, [r7, #4]
 8007e60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007e6e:	793b      	ldrb	r3, [r7, #4]
 8007e70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007e7e:	793b      	ldrb	r3, [r7, #4]
 8007e80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007e8e:	793b      	ldrb	r3, [r7, #4]
 8007e90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007e9e:	793b      	ldrb	r3, [r7, #4]
 8007ea0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007eae:	793b      	ldrb	r3, [r7, #4]
 8007eb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b25b      	sxtb	r3, r3
 8007ebc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007ebe:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007ec0:	f107 030f 	add.w	r3, r7, #15
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	2089      	movs	r0, #137	; 0x89
 8007eca:	f000 fc27 	bl	800871c <SUBGRF_WriteCommand>
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <SUBGRF_CalibrateImage+0x78>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d904      	bls.n	8007ef2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007ee8:	23e1      	movs	r3, #225	; 0xe1
 8007eea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007eec:	23e9      	movs	r3, #233	; 0xe9
 8007eee:	737b      	strb	r3, [r7, #13]
 8007ef0:	e022      	b.n	8007f38 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a17      	ldr	r2, [pc, #92]	; (8007f54 <SUBGRF_CalibrateImage+0x7c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d904      	bls.n	8007f04 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007efa:	23d7      	movs	r3, #215	; 0xd7
 8007efc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8007efe:	23db      	movs	r3, #219	; 0xdb
 8007f00:	737b      	strb	r3, [r7, #13]
 8007f02:	e019      	b.n	8007f38 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <SUBGRF_CalibrateImage+0x80>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d904      	bls.n	8007f16 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8007f0c:	23c1      	movs	r3, #193	; 0xc1
 8007f0e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8007f10:	23c5      	movs	r3, #197	; 0xc5
 8007f12:	737b      	strb	r3, [r7, #13]
 8007f14:	e010      	b.n	8007f38 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a10      	ldr	r2, [pc, #64]	; (8007f5c <SUBGRF_CalibrateImage+0x84>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d904      	bls.n	8007f28 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8007f1e:	2375      	movs	r3, #117	; 0x75
 8007f20:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8007f22:	2381      	movs	r3, #129	; 0x81
 8007f24:	737b      	strb	r3, [r7, #13]
 8007f26:	e007      	b.n	8007f38 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a0d      	ldr	r2, [pc, #52]	; (8007f60 <SUBGRF_CalibrateImage+0x88>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d903      	bls.n	8007f38 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8007f30:	236b      	movs	r3, #107	; 0x6b
 8007f32:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8007f34:	236f      	movs	r3, #111	; 0x6f
 8007f36:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	2098      	movs	r0, #152	; 0x98
 8007f42:	f000 fbeb 	bl	800871c <SUBGRF_WriteCommand>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	35a4e900 	.word	0x35a4e900
 8007f54:	32a9f880 	.word	0x32a9f880
 8007f58:	2de54480 	.word	0x2de54480
 8007f5c:	1b6b0b00 	.word	0x1b6b0b00
 8007f60:	1954fc40 	.word	0x1954fc40

08007f64 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	71fb      	strb	r3, [r7, #7]
 8007f76:	4603      	mov	r3, r0
 8007f78:	71bb      	strb	r3, [r7, #6]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	717b      	strb	r3, [r7, #5]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8007f86:	79bb      	ldrb	r3, [r7, #6]
 8007f88:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007f8a:	797b      	ldrb	r3, [r7, #5]
 8007f8c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007f8e:	793b      	ldrb	r3, [r7, #4]
 8007f90:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8007f92:	f107 030c 	add.w	r3, r7, #12
 8007f96:	2204      	movs	r2, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	2095      	movs	r0, #149	; 0x95
 8007f9c:	f000 fbbe 	bl	800871c <SUBGRF_WriteCommand>
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd90      	pop	{r4, r7, pc}

08007fa8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007fa8:	b590      	push	{r4, r7, lr}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4623      	mov	r3, r4
 8007fb8:	80fb      	strh	r3, [r7, #6]
 8007fba:	4603      	mov	r3, r0
 8007fbc:	80bb      	strh	r3, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	807b      	strh	r3, [r7, #2]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	0a1b      	lsrs	r3, r3, #8
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007fd6:	88bb      	ldrh	r3, [r7, #4]
 8007fd8:	0a1b      	lsrs	r3, r3, #8
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007fe0:	88bb      	ldrh	r3, [r7, #4]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	0a1b      	lsrs	r3, r3, #8
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007ff6:	883b      	ldrh	r3, [r7, #0]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008000:	883b      	ldrh	r3, [r7, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	2208      	movs	r2, #8
 800800c:	4619      	mov	r1, r3
 800800e:	2008      	movs	r0, #8
 8008010:	f000 fb84 	bl	800871c <SUBGRF_WriteCommand>
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	bd90      	pop	{r4, r7, pc}

0800801c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	b2db      	uxtb	r3, r3
 8008030:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	b2db      	uxtb	r3, r3
 8008038:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	b2db      	uxtb	r3, r3
 8008040:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008048:	f107 030c 	add.w	r3, r7, #12
 800804c:	2204      	movs	r2, #4
 800804e:	4619      	mov	r1, r3
 8008050:	2097      	movs	r0, #151	; 0x97
 8008052:	f000 fb63 	bl	800871c <SUBGRF_WriteCommand>
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008060:	b5b0      	push	{r4, r5, r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <SUBGRF_SetRfFrequency+0x7c>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	f083 0301 	eor.w	r3, r3, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ff2c 	bl	8007ed8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8008080:	4b16      	ldr	r3, [pc, #88]	; (80080dc <SUBGRF_SetRfFrequency+0x7c>)
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	461a      	mov	r2, r3
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	09d5      	lsrs	r5, r2, #7
 8008090:	0654      	lsls	r4, r2, #25
 8008092:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <SUBGRF_SetRfFrequency+0x80>)
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 ff60 	bl	8000f60 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4613      	mov	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	0e1b      	lsrs	r3, r3, #24
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80080c6:	f107 0308 	add.w	r3, r7, #8
 80080ca:	2204      	movs	r2, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	2086      	movs	r0, #134	; 0x86
 80080d0:	f000 fb24 	bl	800871c <SUBGRF_WriteCommand>
}
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bdb0      	pop	{r4, r5, r7, pc}
 80080dc:	20000454 	.word	0x20000454
 80080e0:	01e84800 	.word	0x01e84800

080080e4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80080ee:	79fa      	ldrb	r2, [r7, #7]
 80080f0:	4b09      	ldr	r3, [pc, #36]	; (8008118 <SUBGRF_SetPacketType+0x34>)
 80080f2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80080fa:	2100      	movs	r1, #0
 80080fc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008100:	f000 fa90 	bl	8008624 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008104:	1dfb      	adds	r3, r7, #7
 8008106:	2201      	movs	r2, #1
 8008108:	4619      	mov	r1, r3
 800810a:	208a      	movs	r0, #138	; 0x8a
 800810c:	f000 fb06 	bl	800871c <SUBGRF_WriteCommand>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	2000044d 	.word	0x2000044d

0800811c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
    return PacketType;
 8008120:	4b02      	ldr	r3, [pc, #8]	; (800812c <SUBGRF_GetPacketType+0x10>)
 8008122:	781b      	ldrb	r3, [r3, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	2000044d 	.word	0x2000044d

08008130 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
 800813a:	460b      	mov	r3, r1
 800813c:	71bb      	strb	r3, [r7, #6]
 800813e:	4613      	mov	r3, r2
 8008140:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d124      	bne.n	8008192 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8008148:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800814c:	2b0f      	cmp	r3, #15
 800814e:	d106      	bne.n	800815e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8008150:	2301      	movs	r3, #1
 8008152:	2201      	movs	r2, #1
 8008154:	2100      	movs	r1, #0
 8008156:	2006      	movs	r0, #6
 8008158:	f7ff ff04 	bl	8007f64 <SUBGRF_SetPaConfig>
 800815c:	e005      	b.n	800816a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800815e:	2301      	movs	r3, #1
 8008160:	2201      	movs	r2, #1
 8008162:	2100      	movs	r1, #0
 8008164:	2004      	movs	r0, #4
 8008166:	f7ff fefd 	bl	8007f64 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800816a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800816e:	2b0d      	cmp	r3, #13
 8008170:	dd02      	ble.n	8008178 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8008172:	230e      	movs	r3, #14
 8008174:	71bb      	strb	r3, [r7, #6]
 8008176:	e006      	b.n	8008186 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8008178:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800817c:	f113 0f11 	cmn.w	r3, #17
 8008180:	da01      	bge.n	8008186 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8008182:	23ef      	movs	r3, #239	; 0xef
 8008184:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8008186:	2118      	movs	r1, #24
 8008188:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800818c:	f000 fa4a 	bl	8008624 <SUBGRF_WriteRegister>
 8008190:	e025      	b.n	80081de <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8008192:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008196:	f000 fa59 	bl	800864c <SUBGRF_ReadRegister>
 800819a:	4603      	mov	r3, r0
 800819c:	f043 031e 	orr.w	r3, r3, #30
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80081a8:	f000 fa3c 	bl	8008624 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80081ac:	2301      	movs	r3, #1
 80081ae:	2200      	movs	r2, #0
 80081b0:	2107      	movs	r1, #7
 80081b2:	2004      	movs	r0, #4
 80081b4:	f7ff fed6 	bl	8007f64 <SUBGRF_SetPaConfig>
        if( power > 22 )
 80081b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80081bc:	2b16      	cmp	r3, #22
 80081be:	dd02      	ble.n	80081c6 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 80081c0:	2316      	movs	r3, #22
 80081c2:	71bb      	strb	r3, [r7, #6]
 80081c4:	e006      	b.n	80081d4 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 80081c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80081ca:	f113 0f09 	cmn.w	r3, #9
 80081ce:	da01      	bge.n	80081d4 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 80081d0:	23f7      	movs	r3, #247	; 0xf7
 80081d2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 80081d4:	2138      	movs	r1, #56	; 0x38
 80081d6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80081da:	f000 fa23 	bl	8008624 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80081de:	79bb      	ldrb	r3, [r7, #6]
 80081e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 80081e2:	797b      	ldrb	r3, [r7, #5]
 80081e4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80081e6:	f107 030c 	add.w	r3, r7, #12
 80081ea:	2202      	movs	r2, #2
 80081ec:	4619      	mov	r1, r3
 80081ee:	208e      	movs	r0, #142	; 0x8e
 80081f0:	f000 fa94 	bl	800871c <SUBGRF_WriteCommand>
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80081fc:	b5b0      	push	{r4, r5, r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008208:	4a5e      	ldr	r2, [pc, #376]	; (8008384 <SUBGRF_SetModulationParams+0x188>)
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008212:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	781a      	ldrb	r2, [r3, #0]
 800821a:	4b5b      	ldr	r3, [pc, #364]	; (8008388 <SUBGRF_SetModulationParams+0x18c>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d004      	beq.n	800822c <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ff5c 	bl	80080e4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b03      	cmp	r3, #3
 8008232:	f200 80a2 	bhi.w	800837a <SUBGRF_SetModulationParams+0x17e>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <SUBGRF_SetModulationParams+0x40>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008309 	.word	0x08008309
 8008244:	080082cb 	.word	0x080082cb
 8008248:	08008337 	.word	0x08008337
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800824c:	2308      	movs	r3, #8
 800824e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	4a4d      	ldr	r2, [pc, #308]	; (800838c <SUBGRF_SetModulationParams+0x190>)
 8008256:	fbb2 f3f3 	udiv	r3, r2, r3
 800825a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	b2db      	uxtb	r3, r3
 8008262:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	b2db      	uxtb	r3, r3
 800826a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	7b1b      	ldrb	r3, [r3, #12]
 8008276:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7b5b      	ldrb	r3, [r3, #13]
 800827c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	461a      	mov	r2, r3
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	09d5      	lsrs	r5, r2, #7
 800828a:	0654      	lsls	r4, r2, #25
 800828c:	4a40      	ldr	r2, [pc, #256]	; (8008390 <SUBGRF_SetModulationParams+0x194>)
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fe63 	bl	8000f60 <__aeabi_uldivmod>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4613      	mov	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	0c1b      	lsrs	r3, r3, #16
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f107 0308 	add.w	r3, r7, #8
 80082c0:	4619      	mov	r1, r3
 80082c2:	208b      	movs	r0, #139	; 0x8b
 80082c4:	f000 fa2a 	bl	800871c <SUBGRF_WriteCommand>
        break;
 80082c8:	e058      	b.n	800837c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 80082ca:	2304      	movs	r3, #4
 80082cc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	4a2e      	ldr	r2, [pc, #184]	; (800838c <SUBGRF_SetModulationParams+0x190>)
 80082d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	0c1b      	lsrs	r3, r3, #16
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	0a1b      	lsrs	r3, r3, #8
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80082f6:	7cfb      	ldrb	r3, [r7, #19]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4619      	mov	r1, r3
 8008300:	208b      	movs	r0, #139	; 0x8b
 8008302:	f000 fa0b 	bl	800871c <SUBGRF_WriteCommand>
        break;
 8008306:	e039      	b.n	800837c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8008308:	2304      	movs	r3, #4
 800830a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7e1b      	ldrb	r3, [r3, #24]
 8008310:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7e5b      	ldrb	r3, [r3, #25]
 8008316:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7e9b      	ldrb	r3, [r3, #26]
 800831c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7edb      	ldrb	r3, [r3, #27]
 8008322:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008324:	7cfb      	ldrb	r3, [r7, #19]
 8008326:	b29a      	uxth	r2, r3
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	4619      	mov	r1, r3
 800832e:	208b      	movs	r0, #139	; 0x8b
 8008330:	f000 f9f4 	bl	800871c <SUBGRF_WriteCommand>

        break;
 8008334:	e022      	b.n	800837c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8008336:	2305      	movs	r3, #5
 8008338:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4a13      	ldr	r2, [pc, #76]	; (800838c <SUBGRF_SetModulationParams+0x190>)
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	b2db      	uxtb	r3, r3
 800834c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	b2db      	uxtb	r3, r3
 8008354:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7b5b      	ldrb	r3, [r3, #13]
 8008366:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008368:	7cfb      	ldrb	r3, [r7, #19]
 800836a:	b29a      	uxth	r2, r3
 800836c:	f107 0308 	add.w	r3, r7, #8
 8008370:	4619      	mov	r1, r3
 8008372:	208b      	movs	r0, #139	; 0x8b
 8008374:	f000 f9d2 	bl	800871c <SUBGRF_WriteCommand>
        break;
 8008378:	e000      	b.n	800837c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800837a:	bf00      	nop
    }
}
 800837c:	bf00      	nop
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bdb0      	pop	{r4, r5, r7, pc}
 8008384:	0800e730 	.word	0x0800e730
 8008388:	2000044d 	.word	0x2000044d
 800838c:	3d090000 	.word	0x3d090000
 8008390:	01e84800 	.word	0x01e84800

08008394 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80083a0:	4a48      	ldr	r2, [pc, #288]	; (80084c4 <SUBGRF_SetPacketParams+0x130>)
 80083a2:	f107 030c 	add.w	r3, r7, #12
 80083a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80083a8:	c303      	stmia	r3!, {r0, r1}
 80083aa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	4b45      	ldr	r3, [pc, #276]	; (80084c8 <SUBGRF_SetPacketParams+0x134>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d004      	beq.n	80083c2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fe91 	bl	80080e4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d878      	bhi.n	80084bc <SUBGRF_SetPacketParams+0x128>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <SUBGRF_SetPacketParams+0x3c>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	08008471 	.word	0x08008471
 80083d8:	08008465 	.word	0x08008465
 80083dc:	080083e1 	.word	0x080083e1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7a5b      	ldrb	r3, [r3, #9]
 80083e4:	2bf1      	cmp	r3, #241	; 0xf1
 80083e6:	d10a      	bne.n	80083fe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80083e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80083ec:	f7ff fb20 	bl	8007a30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80083f0:	f248 0005 	movw	r0, #32773	; 0x8005
 80083f4:	f7ff fb3c 	bl	8007a70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80083f8:	2302      	movs	r3, #2
 80083fa:	75bb      	strb	r3, [r7, #22]
 80083fc:	e011      	b.n	8008422 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7a5b      	ldrb	r3, [r3, #9]
 8008402:	2bf2      	cmp	r3, #242	; 0xf2
 8008404:	d10a      	bne.n	800841c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8008406:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800840a:	f7ff fb11 	bl	8007a30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800840e:	f241 0021 	movw	r0, #4129	; 0x1021
 8008412:	f7ff fb2d 	bl	8007a70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008416:	2306      	movs	r3, #6
 8008418:	75bb      	strb	r3, [r7, #22]
 800841a:	e002      	b.n	8008422 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7a5b      	ldrb	r3, [r3, #9]
 8008420:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008422:	2309      	movs	r3, #9
 8008424:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	b29b      	uxth	r3, r3
 800842e:	b2db      	uxtb	r3, r3
 8008430:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	791b      	ldrb	r3, [r3, #4]
 800843e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	795b      	ldrb	r3, [r3, #5]
 8008444:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	799b      	ldrb	r3, [r3, #6]
 800844a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	79db      	ldrb	r3, [r3, #7]
 8008450:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7a1b      	ldrb	r3, [r3, #8]
 8008456:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8008458:	7dbb      	ldrb	r3, [r7, #22]
 800845a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7a9b      	ldrb	r3, [r3, #10]
 8008460:	753b      	strb	r3, [r7, #20]
        break;
 8008462:	e022      	b.n	80084aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7b1b      	ldrb	r3, [r3, #12]
 800846c:	733b      	strb	r3, [r7, #12]
        break;
 800846e:	e01c      	b.n	80084aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8008470:	2306      	movs	r3, #6
 8008472:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	89db      	ldrh	r3, [r3, #14]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	b29b      	uxth	r3, r3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	89db      	ldrh	r3, [r3, #14]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7c1a      	ldrb	r2, [r3, #16]
 800848c:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <SUBGRF_SetPacketParams+0x138>)
 800848e:	4611      	mov	r1, r2
 8008490:	7019      	strb	r1, [r3, #0]
 8008492:	4613      	mov	r3, r2
 8008494:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7c5b      	ldrb	r3, [r3, #17]
 800849a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7c9b      	ldrb	r3, [r3, #18]
 80084a0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7cdb      	ldrb	r3, [r3, #19]
 80084a6:	747b      	strb	r3, [r7, #17]
        break;
 80084a8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	4619      	mov	r1, r3
 80084b4:	208c      	movs	r0, #140	; 0x8c
 80084b6:	f000 f931 	bl	800871c <SUBGRF_WriteCommand>
 80084ba:	e000      	b.n	80084be <SUBGRF_SetPacketParams+0x12a>
        return;
 80084bc:	bf00      	nop
}
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	0800e738 	.word	0x0800e738
 80084c8:	2000044d 	.word	0x2000044d
 80084cc:	2000044e 	.word	0x2000044e

080084d0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	460a      	mov	r2, r1
 80084da:	71fb      	strb	r3, [r7, #7]
 80084dc:	4613      	mov	r3, r2
 80084de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80084e4:	79bb      	ldrb	r3, [r7, #6]
 80084e6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	2202      	movs	r2, #2
 80084ee:	4619      	mov	r1, r3
 80084f0:	208f      	movs	r0, #143	; 0x8f
 80084f2:	f000 f913 	bl	800871c <SUBGRF_WriteCommand>
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	2201      	movs	r2, #1
 800850c:	4619      	mov	r1, r3
 800850e:	2015      	movs	r0, #21
 8008510:	f000 f918 	bl	8008744 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008514:	793b      	ldrb	r3, [r7, #4]
 8008516:	425b      	negs	r3, r3
 8008518:	105b      	asrs	r3, r3, #1
 800851a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800851c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008532:	f107 030c 	add.w	r3, r7, #12
 8008536:	2202      	movs	r2, #2
 8008538:	4619      	mov	r1, r3
 800853a:	2013      	movs	r0, #19
 800853c:	f000 f902 	bl	8008744 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008540:	f7ff fdec 	bl	800811c <SUBGRF_GetPacketType>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d10d      	bne.n	8008566 <SUBGRF_GetRxBufferStatus+0x3e>
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <SUBGRF_GetRxBufferStatus+0x54>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d108      	bne.n	8008566 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008554:	f240 7002 	movw	r0, #1794	; 0x702
 8008558:	f000 f878 	bl	800864c <SUBGRF_ReadRegister>
 800855c:	4603      	mov	r3, r0
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e002      	b.n	800856c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8008566:	7b3a      	ldrb	r2, [r7, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800856c:	7b7a      	ldrb	r2, [r7, #13]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	701a      	strb	r2, [r3, #0]
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2000044e 	.word	0x2000044e

08008580 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	2203      	movs	r2, #3
 800858e:	4619      	mov	r1, r3
 8008590:	2014      	movs	r0, #20
 8008592:	f000 f8d7 	bl	8008744 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8008596:	f7ff fdc1 	bl	800811c <SUBGRF_GetPacketType>
 800859a:	4603      	mov	r3, r0
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <SUBGRF_GetPacketStatus+0x30>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d013      	beq.n	80085d6 <SUBGRF_GetPacketStatus+0x56>
 80085ae:	e02a      	b.n	8008606 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80085b0:	7b3a      	ldrb	r2, [r7, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80085b6:	7b7b      	ldrb	r3, [r7, #13]
 80085b8:	425b      	negs	r3, r3
 80085ba:	105b      	asrs	r3, r3, #1
 80085bc:	b25a      	sxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	425b      	negs	r3, r3
 80085c6:	105b      	asrs	r3, r3, #1
 80085c8:	b25a      	sxtb	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	609a      	str	r2, [r3, #8]
            break;
 80085d4:	e020      	b.n	8008618 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80085d6:	7b3b      	ldrb	r3, [r7, #12]
 80085d8:	425b      	negs	r3, r3
 80085da:	105b      	asrs	r3, r3, #1
 80085dc:	b25a      	sxtb	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80085e2:	7b7b      	ldrb	r3, [r7, #13]
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	3302      	adds	r3, #2
 80085e8:	109b      	asrs	r3, r3, #2
 80085ea:	b25a      	sxtb	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	425b      	negs	r3, r3
 80085f4:	105b      	asrs	r3, r3, #1
 80085f6:	b25a      	sxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <SUBGRF_GetPacketStatus+0xa0>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	611a      	str	r2, [r3, #16]
            break;
 8008604:	e008      	b.n	8008618 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008606:	2214      	movs	r2, #20
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fa3e 	bl	8009a8c <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	220f      	movs	r2, #15
 8008614:	701a      	strb	r2, [r3, #0]
            break;
 8008616:	bf00      	nop
    }
}
 8008618:	bf00      	nop
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20000450 	.word	0x20000450

08008624 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	460a      	mov	r2, r1
 800862e:	80fb      	strh	r3, [r7, #6]
 8008630:	4613      	mov	r3, r2
 8008632:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008634:	1d7a      	adds	r2, r7, #5
 8008636:	88f9      	ldrh	r1, [r7, #6]
 8008638:	2301      	movs	r3, #1
 800863a:	4803      	ldr	r0, [pc, #12]	; (8008648 <SUBGRF_WriteRegister+0x24>)
 800863c:	f7fc f8ea 	bl	8004814 <HAL_SUBGHZ_WriteRegisters>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20000508 	.word	0x20000508

0800864c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8008656:	f107 020f 	add.w	r2, r7, #15
 800865a:	88f9      	ldrh	r1, [r7, #6]
 800865c:	2301      	movs	r3, #1
 800865e:	4804      	ldr	r0, [pc, #16]	; (8008670 <SUBGRF_ReadRegister+0x24>)
 8008660:	f7fc f937 	bl	80048d2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000508 	.word	0x20000508

08008674 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	80fb      	strh	r3, [r7, #6]
 8008680:	4613      	mov	r3, r2
 8008682:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	88f9      	ldrh	r1, [r7, #6]
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	4803      	ldr	r0, [pc, #12]	; (8008698 <SUBGRF_WriteRegisters+0x24>)
 800868c:	f7fc f8c2 	bl	8004814 <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000508 	.word	0x20000508

0800869c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	80fb      	strh	r3, [r7, #6]
 80086a8:	4613      	mov	r3, r2
 80086aa:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80086ac:	88bb      	ldrh	r3, [r7, #4]
 80086ae:	88f9      	ldrh	r1, [r7, #6]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	4803      	ldr	r0, [pc, #12]	; (80086c0 <SUBGRF_ReadRegisters+0x24>)
 80086b4:	f7fc f90d 	bl	80048d2 <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20000508 	.word	0x20000508

080086c4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	71fb      	strb	r3, [r7, #7]
 80086d0:	4613      	mov	r3, r2
 80086d2:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80086d4:	79bb      	ldrb	r3, [r7, #6]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	79f9      	ldrb	r1, [r7, #7]
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4803      	ldr	r0, [pc, #12]	; (80086ec <SUBGRF_WriteBuffer+0x28>)
 80086de:	f7fc fa0c 	bl	8004afa <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000508 	.word	0x20000508

080086f0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
 80086fc:	4613      	mov	r3, r2
 80086fe:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	b29b      	uxth	r3, r3
 8008704:	79f9      	ldrb	r1, [r7, #7]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4803      	ldr	r0, [pc, #12]	; (8008718 <SUBGRF_ReadBuffer+0x28>)
 800870a:	f7fc fa49 	bl	8004ba0 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000508 	.word	0x20000508

0800871c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
 8008728:	4613      	mov	r3, r2
 800872a:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800872c:	88bb      	ldrh	r3, [r7, #4]
 800872e:	79f9      	ldrb	r1, [r7, #7]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	4803      	ldr	r0, [pc, #12]	; (8008740 <SUBGRF_WriteCommand+0x24>)
 8008734:	f7fc f92e 	bl	8004994 <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000508 	.word	0x20000508

08008744 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
 8008750:	4613      	mov	r3, r2
 8008752:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008754:	88bb      	ldrh	r3, [r7, #4]
 8008756:	79f9      	ldrb	r1, [r7, #7]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	4803      	ldr	r0, [pc, #12]	; (8008768 <SUBGRF_ReadCommand+0x24>)
 800875c:	f7fc f979 	bl	8004a52 <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000508 	.word	0x20000508

0800876c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	460a      	mov	r2, r1
 8008776:	71fb      	strb	r3, [r7, #7]
 8008778:	4613      	mov	r3, r2
 800877a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8008780:	79bb      	ldrb	r3, [r7, #6]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10d      	bne.n	80087a2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d104      	bne.n	8008796 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800878c:	2302      	movs	r3, #2
 800878e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008790:	2004      	movs	r0, #4
 8008792:	f000 f8df 	bl	8008954 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d107      	bne.n	80087ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e004      	b.n	80087ac <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80087a2:	79bb      	ldrb	r3, [r7, #6]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7f9 f9f7 	bl	8001ba2 <RBI_ConfigRFSwitch>
}
 80087b4:	bf00      	nop
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80087ca:	f7f9 f9f8 	bl	8001bbe <RBI_GetTxConfig>
 80087ce:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d016      	beq.n	8008804 <SUBGRF_SetRfTxPower+0x48>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	dc16      	bgt.n	800880a <SUBGRF_SetRfTxPower+0x4e>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <SUBGRF_SetRfTxPower+0x2e>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d00a      	beq.n	80087fe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80087e8:	e00f      	b.n	800880a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80087ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	dd02      	ble.n	80087f8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80087f2:	2302      	movs	r3, #2
 80087f4:	73fb      	strb	r3, [r7, #15]
            break;
 80087f6:	e009      	b.n	800880c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
            break;
 80087fc:	e006      	b.n	800880c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
            break;
 8008802:	e003      	b.n	800880c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8008804:	2302      	movs	r3, #2
 8008806:	73fb      	strb	r3, [r7, #15]
            break;
 8008808:	e000      	b.n	800880c <SUBGRF_SetRfTxPower+0x50>
            break;
 800880a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800880c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	2202      	movs	r2, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff fc8b 	bl	8008130 <SUBGRF_SetTxParams>

    return paSelect;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008828:	2301      	movs	r3, #1
}
 800882a:	4618      	mov	r0, r3
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr
	...

08008834 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800883c:	4b03      	ldr	r3, [pc, #12]	; (800884c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2001      	movs	r0, #1
 8008842:	4798      	blx	r3
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000458 	.word	0x20000458

08008850 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2002      	movs	r0, #2
 800885e:	4798      	blx	r3
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000458 	.word	0x20000458

0800886c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008874:	4b03      	ldr	r3, [pc, #12]	; (8008884 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2040      	movs	r0, #64	; 0x40
 800887a:	4798      	blx	r3
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000458 	.word	0x20000458

08008888 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800889a:	2b01      	cmp	r3, #1
 800889c:	d005      	beq.n	80088aa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800889e:	e00a      	b.n	80088b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2080      	movs	r0, #128	; 0x80
 80088a6:	4798      	blx	r3
            break;
 80088a8:	e005      	b.n	80088b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80088b2:	4798      	blx	r3
            break;
 80088b4:	bf00      	nop
    }
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20000458 	.word	0x20000458

080088c4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80088d4:	4798      	blx	r3
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000458 	.word	0x20000458

080088e4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80088ec:	4b03      	ldr	r3, [pc, #12]	; (80088fc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2020      	movs	r0, #32
 80088f2:	4798      	blx	r3
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000458 	.word	0x20000458

08008900 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008908:	4b03      	ldr	r3, [pc, #12]	; (8008918 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2004      	movs	r0, #4
 800890e:	4798      	blx	r3
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000458 	.word	0x20000458

0800891c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2008      	movs	r0, #8
 800892a:	4798      	blx	r3
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000458 	.word	0x20000458

08008938 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2010      	movs	r0, #16
 8008946:	4798      	blx	r3
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000458 	.word	0x20000458

08008954 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800895e:	f7f9 f93c 	bl	8001bda <RBI_IsDCDC>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d112      	bne.n	800898e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8008968:	f640 1023 	movw	r0, #2339	; 0x923
 800896c:	f7ff fe6e 	bl	800864c <SUBGRF_ReadRegister>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	f023 0306 	bic.w	r3, r3, #6
 800897a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	4313      	orrs	r3, r2
 8008982:	b2db      	uxtb	r3, r3
 8008984:	4619      	mov	r1, r3
 8008986:	f640 1023 	movw	r0, #2339	; 0x923
 800898a:	f7ff fe4b 	bl	8008624 <SUBGRF_WriteRegister>
  }
}
 800898e:	bf00      	nop
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80089a6:	231f      	movs	r3, #31
 80089a8:	e016      	b.n	80089d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
 80089ae:	e00f      	b.n	80089d0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4a0c      	ldr	r2, [pc, #48]	; (80089e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80089b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d205      	bcs.n	80089ca <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	4a08      	ldr	r2, [pc, #32]	; (80089e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	791b      	ldrb	r3, [r3, #4]
 80089c8:	e006      	b.n	80089d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	3301      	adds	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b15      	cmp	r3, #21
 80089d4:	d9ec      	bls.n	80089b0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80089d6:	e7fe      	b.n	80089d6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	0800eb34 	.word	0x0800eb34

080089e8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80089f2:	4b36      	ldr	r3, [pc, #216]	; (8008acc <SUBGRF_GetCFO+0xe4>)
 80089f4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80089f6:	f640 0007 	movw	r0, #2055	; 0x807
 80089fa:	f7ff fe27 	bl	800864c <SUBGRF_ReadRegister>
 80089fe:	4603      	mov	r3, r0
 8008a00:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8008a02:	7ffb      	ldrb	r3, [r7, #31]
 8008a04:	08db      	lsrs	r3, r3, #3
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a10:	4413      	add	r3, r2
 8008a12:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008a16:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8008a18:	7ffb      	ldrb	r3, [r7, #31]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8008a20:	7fba      	ldrb	r2, [r7, #30]
 8008a22:	7f7b      	ldrb	r3, [r7, #29]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4b28      	ldr	r3, [pc, #160]	; (8008ad0 <SUBGRF_GetCFO+0xe8>)
 8008a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
 8008a4e:	2b07      	cmp	r3, #7
 8008a50:	d802      	bhi.n	8008a58 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8008a52:	2302      	movs	r3, #2
 8008a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8008a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d802      	bhi.n	8008a6c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8008a66:	2304      	movs	r3, #4
 8008a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008a6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8008a78:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8008a7c:	f7ff fde6 	bl	800864c <SUBGRF_ReadRegister>
 8008a80:	4603      	mov	r3, r0
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a88:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8008a8a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008a8e:	f7ff fddd 	bl	800864c <SUBGRF_ReadRegister>
 8008a92:	4603      	mov	r3, r0
 8008a94:	461a      	mov	r2, r3
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008aac:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008ab0:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	6a3a      	ldr	r2, [r7, #32]
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
 8008abc:	11da      	asrs	r2, r3, #7
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	601a      	str	r2, [r3, #0]
}
 8008ac2:	bf00      	nop
 8008ac4:	3728      	adds	r7, #40	; 0x28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	0c0a0804 	.word	0x0c0a0804
 8008ad0:	01e84800 	.word	0x01e84800

08008ad4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8008ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aea:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008aec:	697b      	ldr	r3, [r7, #20]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr

08008af8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8008b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008b10:	697b      	ldr	r3, [r7, #20]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8008b3a:	bf00      	nop
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8008b42:	b480      	push	{r7}
 8008b44:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8008b46:	2300      	movs	r3, #0
#endif
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8008b54:	2300      	movs	r3, #0
#endif
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	4603      	mov	r3, r0
 8008b66:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b087      	sub	sp, #28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8008b86:	697b      	ldr	r3, [r7, #20]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc80      	pop	{r7}
 8008b90:	4770      	bx	lr

08008b92 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8008b92:	b480      	push	{r7}
 8008b94:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr

08008ba2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr

08008bae <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bc80      	pop	{r7}
 8008bb8:	4770      	bx	lr

08008bba <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
	...

08008bd0 <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8008bda:	2010      	movs	r0, #16
 8008bdc:	f000 ff38 	bl	8009a50 <malloc>
 8008be0:	4603      	mov	r3, r0
 8008be2:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d104      	bne.n	8008bf4 <list_new+0x24>
		perror("list_new()");
 8008bea:	4818      	ldr	r0, [pc, #96]	; (8008c4c <list_new+0x7c>)
 8008bec:	f001 fcf4 	bl	800a5d8 <perror>
		return NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e027      	b.n	8008c44 <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f000 f958 	bl	8008eac <list_node_new>
 8008bfc:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d104      	bne.n	8008c0e <list_new+0x3e>
		free(l);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 ff2b 	bl	8009a60 <free>
		return NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e01a      	b.n	8008c44 <list_new+0x74>
	}

	l->sentinel = sentinel;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	601a      	str	r2, [r3, #0]
	l->size = 0;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <list_new+0x66>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	e000      	b.n	8008c38 <list_new+0x68>
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <list_new+0x80>)
	l->compare = (compare == NULL)
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	60da      	str	r2, [r3, #12]

	return l;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	0800e744 	.word	0x0800e744
 8008c50:	08008e85 	.word	0x08008e85

08008c54 <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d104      	bne.n	8008c70 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 8008c66:	480e      	ldr	r0, [pc, #56]	; (8008ca0 <list_insert+0x4c>)
 8008c68:	f000 f99b 	bl	8008fa2 <list_debug>
		return NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e012      	b.n	8008c96 <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f89c 	bl	8008db0 <list_index>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f945 	bl	8008f0c <list_node_link>
 8008c82:	6078      	str	r0, [r7, #4]
	if (n)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <list_insert+0x40>
		++self->size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	605a      	str	r2, [r3, #4]
	return n;
 8008c94:	687b      	ldr	r3, [r7, #4]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	0800e750 	.word	0x0800e750

08008ca4 <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f856 	bl	8008d60 <list_head>
 8008cb4:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 8008cb6:	e00e      	b.n	8008cd6 <list_search+0x32>
		
		if (self->compare(data, n->data))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	68d2      	ldr	r2, [r2, #12]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	6838      	ldr	r0, [r7, #0]
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <list_search+0x2c>
			return n;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	e00c      	b.n	8008cea <list_search+0x46>
		n = n->next;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f8c0 	bl	8008e5c <list_end>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f083 0301 	eor.w	r3, r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e7      	bne.n	8008cb8 <list_search+0x14>
	}
	return NULL;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 8008d04:	480b      	ldr	r0, [pc, #44]	; (8008d34 <list_remove+0x40>)
 8008d06:	f001 fc6f 	bl	800a5e8 <iprintf>
		return ;
 8008d0a:	e010      	b.n	8008d2e <list_remove+0x3a>
	}

	if(node == NULL)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 8008d12:	6838      	ldr	r0, [r7, #0]
 8008d14:	f000 f928 	bl	8008f68 <list_node_unlink>
 8008d18:	60f8      	str	r0, [r7, #12]
	if (n)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <list_remove+0x3a>
	{
		--self->size;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	1e5a      	subs	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
 8008d2a:	e000      	b.n	8008d2e <list_remove+0x3a>
		return ;
 8008d2c:	bf00      	nop
	
	}

}
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	0800e770 	.word	0x0800e770

08008d38 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f876 	bl	8008e34 <list_size>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff ff80 	bl	8008c54 <list_insert>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d104      	bne.n	8008d78 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 8008d6e:	480e      	ldr	r0, [pc, #56]	; (8008da8 <list_head+0x48>)
 8008d70:	f000 f917 	bl	8008fa2 <list_debug>
		return NULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e012      	b.n	8008d9e <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f86d 	bl	8008e5c <list_end>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f083 0301 	eor.w	r3, r3, #1
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 8008d8e:	4807      	ldr	r0, [pc, #28]	; (8008dac <list_head+0x4c>)
 8008d90:	f000 f907 	bl	8008fa2 <list_debug>
		return NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e002      	b.n	8008d9e <list_head+0x3e>
	}

	return self->sentinel->next;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	0800e790 	.word	0x0800e790
 8008dac:	0800e7ac 	.word	0x0800e7ac

08008db0 <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f83a 	bl	8008e34 <list_size>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da03      	bge.n	8008dd2 <list_index+0x22>
		pos += s;
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4413      	add	r3, r2
 8008dd0:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	0fda      	lsrs	r2, r3, #31
 8008dda:	4413      	add	r3, r2
 8008ddc:	105b      	asrs	r3, r3, #1
 8008dde:	461a      	mov	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	dc11      	bgt.n	8008e0a <list_index+0x5a>
		n = list_head(self);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ffba 	bl	8008d60 <list_head>
 8008dec:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008dee:	2300      	movs	r3, #0
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	e005      	b.n	8008e00 <list_index+0x50>
			n = n->next;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	dbf5      	blt.n	8008df4 <list_index+0x44>
 8008e08:	e00f      	b.n	8008e2a <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e005      	b.n	8008e22 <list_index+0x72>
			n = n->prev;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	dcf5      	bgt.n	8008e16 <list_index+0x66>
	}

	return n;
 8008e2a:	697b      	ldr	r3, [r7, #20]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <list_size+0x18>
		list_debug("list_size(): self was NULL");
 8008e42:	4805      	ldr	r0, [pc, #20]	; (8008e58 <list_size+0x24>)
 8008e44:	f000 f8ad 	bl	8008fa2 <list_debug>
		return 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e001      	b.n	8008e50 <list_size+0x1c>
	}

	return self->size;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0800e810 	.word	0x0800e810

08008e5c <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d104      	bne.n	8008e74 <list_end+0x18>
		list_debug("list_end(): n was NULL");
 8008e6a:	4805      	ldr	r0, [pc, #20]	; (8008e80 <list_end+0x24>)
 8008e6c:	f000 f899 	bl	8008fa2 <list_debug>
		return false;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e001      	b.n	8008e78 <list_end+0x1c>
	}

	return n->sentinel;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7a1b      	ldrb	r3, [r3, #8]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	0800e82c 	.word	0x0800e82c

08008e84 <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7f7 f975 	bl	8000180 <strcmp>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2301      	moveq	r3, #1
 8008e9e:	2300      	movne	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	f000 fdca 	bl	8009a50 <malloc>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <list_node_new+0x24>
		perror("list_node_new()");
 8008ec6:	4810      	ldr	r0, [pc, #64]	; (8008f08 <list_node_new+0x5c>)
 8008ec8:	f001 fb86 	bl	800a5d8 <perror>
		return NULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e017      	b.n	8008f00 <list_node_new+0x54>
	}

	n->sentinel = false;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 8008ee2:	6838      	ldr	r0, [r7, #0]
 8008ee4:	f000 fdb4 	bl	8009a50 <malloc>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fdb9 	bl	8009a70 <memcpy>
	return n;
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	0800e8b8 	.word	0x0800e8b8

08008f0c <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 8008f1c:	4810      	ldr	r0, [pc, #64]	; (8008f60 <list_node_link+0x54>)
 8008f1e:	f000 f840 	bl	8008fa2 <list_debug>
		return NULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e017      	b.n	8008f56 <list_node_link+0x4a>
	}

	if (c == NULL) {
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 8008f2c:	480d      	ldr	r0, [pc, #52]	; (8008f64 <list_node_link+0x58>)
 8008f2e:	f000 f838 	bl	8008fa2 <list_debug>
		return NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	e00f      	b.n	8008f56 <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]

	a->next = b;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
	b->prev = a;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	605a      	str	r2, [r3, #4]
	b->next = c;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
	c->prev = b;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	605a      	str	r2, [r3, #4]

	return b;
 8008f54:	687b      	ldr	r3, [r7, #4]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	0800e8c8 	.word	0x0800e8c8
 8008f64:	0800e8e8 	.word	0x0800e8e8

08008f68 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff73 	bl	8008e5c <list_end>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <list_node_unlink+0x18>
		return NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e00c      	b.n	8008f9a <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60bb      	str	r3, [r7, #8]

	a->next = c;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	601a      	str	r2, [r3, #0]
	c->prev = a;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	605a      	str	r2, [r3, #4]

	return b;
 8008f98:	687b      	ldr	r3, [r7, #4]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <list_debug>:

static void list_debug(const char *format, ...)
{
 8008fa2:	b40f      	push	{r0, r1, r2, r3}
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	b004      	add	sp, #16
 8008fb2:	4770      	bx	lr

08008fb4 <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	789b      	ldrb	r3, [r3, #2]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d101      	bne.n	8008fd6 <find_packet_by_Id+0x22>
    {
        return true ;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 8008fd6:	2300      	movs	r3, #0
    }
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr

08008fe2 <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d101      	bne.n	8009004 <rx_find_by_id+0x22>
	{
		return true ;
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <rx_find_by_id+0x24>
	}
	else{
		return false ;
 8009004:	2300      	movs	r3, #0
	}
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 800901a:	4a0d      	ldr	r2, [pc, #52]	; (8009050 <ll_init+0x40>)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 8009020:	490c      	ldr	r1, [pc, #48]	; (8009054 <ll_init+0x44>)
 8009022:	480d      	ldr	r0, [pc, #52]	; (8009058 <ll_init+0x48>)
 8009024:	f7ff fdd4 	bl	8008bd0 <list_new>
 8009028:	4603      	mov	r3, r0
 800902a:	4a0c      	ldr	r2, [pc, #48]	; (800905c <ll_init+0x4c>)
 800902c:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 800902e:	4909      	ldr	r1, [pc, #36]	; (8009054 <ll_init+0x44>)
 8009030:	480b      	ldr	r0, [pc, #44]	; (8009060 <ll_init+0x50>)
 8009032:	f7ff fdcd 	bl	8008bd0 <list_new>
 8009036:	4603      	mov	r3, r0
 8009038:	4a0a      	ldr	r2, [pc, #40]	; (8009064 <ll_init+0x54>)
 800903a:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <ll_init+0x58>)
 800903e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009044:	4798      	blx	r3

	return 0 ;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	2000000a 	.word	0x2000000a
 8009054:	08009a61 	.word	0x08009a61
 8009058:	08008fb5 	.word	0x08008fb5
 800905c:	200005ec 	.word	0x200005ec
 8009060:	08008fe3 	.word	0x08008fe3
 8009064:	200005e8 	.word	0x200005e8
 8009068:	0800eaac 	.word	0x0800eaac

0800906c <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len ,ask_received_callback CallBack)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b091      	sub	sp, #68	; 0x44
 8009070:	af04      	add	r7, sp, #16
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	4603      	mov	r3, r0
 8009076:	71fb      	strb	r3, [r7, #7]
 8009078:	460b      	mov	r3, r1
 800907a:	71bb      	strb	r3, [r7, #6]
 800907c:	4613      	mov	r3, r2
 800907e:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <ll_send_packet+0x84>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff fed5 	bl	8008e34 <list_size>
 800908a:	4603      	mov	r3, r0
 800908c:	2b09      	cmp	r3, #9
 800908e:	d902      	bls.n	8009096 <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 8009090:	f06f 0309 	mvn.w	r3, #9
 8009094:	e028      	b.n	80090e8 <ll_send_packet+0x7c>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	tmp_holder.Ask_callback = CallBack ;
 8009096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009098:	623b      	str	r3, [r7, #32]
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 800909a:	4b16      	ldr	r3, [pc, #88]	; (80090f4 <ll_send_packet+0x88>)
 800909c:	7819      	ldrb	r1, [r3, #0]
 800909e:	79bc      	ldrb	r4, [r7, #6]
 80090a0:	79fa      	ldrb	r2, [r7, #7]
 80090a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	797b      	ldrb	r3, [r7, #5]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	4623      	mov	r3, r4
 80090b6:	f000 fb09 	bl	80096cc <packet>
	
	tmp_holder.packet = tmp ;
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80090c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80090c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 80090cc:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <ll_send_packet+0x84>)
 80090ce:	681c      	ldr	r4, [r3, #0]
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	211c      	movs	r1, #28
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fee8 	bl	8008eac <list_node_new>
 80090dc:	4603      	mov	r3, r0
 80090de:	4619      	mov	r1, r3
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff fe29 	bl	8008d38 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3734      	adds	r7, #52	; 0x34
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}
 80090f0:	200005ec 	.word	0x200005ec
 80090f4:	2000000a 	.word	0x2000000a

080090f8 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	4603      	mov	r3, r0
 8009100:	460a      	mov	r2, r1
 8009102:	71fb      	strb	r3, [r7, #7]
 8009104:	4613      	mov	r3, r2
 8009106:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0 ,NULL);
 8009108:	79ba      	ldrb	r2, [r7, #6]
 800910a:	79f8      	ldrb	r0, [r7, #7]
 800910c:	2300      	movs	r3, #0
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2300      	movs	r3, #0
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	2102      	movs	r1, #2
 8009118:	f7ff ffa8 	bl	800906c <ll_send_packet>
 800911c:	4603      	mov	r3, r0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af02      	add	r7, sp, #8
 800912c:	4603      	mov	r3, r0
 800912e:	460a      	mov	r2, r1
 8009130:	71fb      	strb	r3, [r7, #7]
 8009132:	4613      	mov	r3, r2
 8009134:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0 ,NULL);
 8009136:	79ba      	ldrb	r2, [r7, #6]
 8009138:	79f8      	ldrb	r0, [r7, #7]
 800913a:	2300      	movs	r3, #0
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	2300      	movs	r3, #0
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	2103      	movs	r1, #3
 8009146:	f7ff ff91 	bl	800906c <ll_send_packet>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len ,ask_received_callback CallBack )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 8009164:	f7f8 fce0 	bl	8001b28 <sys_random>
 8009168:	4603      	mov	r3, r0
 800916a:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len , CallBack);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	7df9      	ldrb	r1, [r7, #23]
 8009172:	7bf8      	ldrb	r0, [r7, #15]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	460a      	mov	r2, r1
 800917e:	2101      	movs	r1, #1
 8009180:	f7ff ff74 	bl	800906c <ll_send_packet>
 8009184:	4603      	mov	r3, r0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <get_tx_size>:

int get_tx_size()
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
	return list_size(Tx_packet_list)  ;
 8009194:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <get_tx_size+0x14>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fe4b 	bl	8008e34 <list_size>
 800919e:	4603      	mov	r3, r0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200005ec 	.word	0x200005ec

080091a8 <get_rx_size>:

int get_rx_size()
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
	return list_size(Rx_packet_list)  ;
 80091ac:	4b03      	ldr	r3, [pc, #12]	; (80091bc <get_rx_size+0x14>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fe3f 	bl	8008e34 <list_size>
 80091b6:	4603      	mov	r3, r0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	200005e8 	.word	0x200005e8

080091c0 <ll_transmit>:

void ll_transmit(void) 
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 80091c6:	4b4d      	ldr	r3, [pc, #308]	; (80092fc <ll_transmit+0x13c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fe32 	bl	8008e34 <list_size>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 808d 	beq.w	80092f2 <ll_transmit+0x132>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 80091d8:	e073      	b.n	80092c2 <ll_transmit+0x102>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 80091da:	4b48      	ldr	r3, [pc, #288]	; (80092fc <ll_transmit+0x13c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a48      	ldr	r2, [pc, #288]	; (8009300 <ll_transmit+0x140>)
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fde3 	bl	8008db0 <list_index>
 80091ea:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fbed 	bl	80099d6 <packet_get_size>
 80091fc:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fc25 	bl	8009a50 <malloc>
 8009206:	4603      	mov	r3, r0
 8009208:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 fae6 	bl	80097de <packet_serialize>

		//send to network
		if(buff != NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01c      	beq.n	8009252 <ll_transmit+0x92>
		{
			network_transmit_index++;
 8009218:	4b39      	ldr	r3, [pc, #228]	; (8009300 <ll_transmit+0x140>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3301      	adds	r3, #1
 800921e:	4a38      	ldr	r2, [pc, #224]	; (8009300 <ll_transmit+0x140>)
 8009220:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	615a      	str	r2, [r3, #20]
			Radio.Send(buff , packet_size) ;
 800922c:	4b35      	ldr	r3, [pc, #212]	; (8009304 <ll_transmit+0x144>)
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	4611      	mov	r1, r2
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
			//wait for the transmition to complete
			while(tarnsmition_done == false);
 800923a:	bf00      	nop
 800923c:	4b32      	ldr	r3, [pc, #200]	; (8009308 <ll_transmit+0x148>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f083 0301 	eor.w	r3, r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1f8      	bne.n	800923c <ll_transmit+0x7c>
			//break ;
			free(buff) ;
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc08 	bl	8009a60 <free>
 8009250:	e005      	b.n	800925e <ll_transmit+0x9e>
		}
		else if(buff == NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <ll_transmit+0x9e>
		{
			printf("\npacket_serialize FAILED\n");
 8009258:	482c      	ldr	r0, [pc, #176]	; (800930c <ll_transmit+0x14c>)
 800925a:	f001 fa4b 	bl	800a6f4 <puts>
		}

		

		tarnsmition_done = false ;
 800925e:	4b2a      	ldr	r3, [pc, #168]	; (8009308 <ll_transmit+0x148>)
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	78db      	ldrb	r3, [r3, #3]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d10e      	bne.n	800928a <ll_transmit+0xca>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 800926c:	4b23      	ldr	r3, [pc, #140]	; (80092fc <ll_transmit+0x13c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff fd3e 	bl	8008cf4 <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fbf1 	bl	8009a60 <free>
			free(holder);
 800927e:	6938      	ldr	r0, [r7, #16]
 8009280:	f000 fbee 	bl	8009a60 <free>
			free(node) ;
 8009284:	6978      	ldr	r0, [r7, #20]
 8009286:	f000 fbeb 	bl	8009a60 <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	2b04      	cmp	r3, #4
 8009290:	dd17      	ble.n	80092c2 <ll_transmit+0x102>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 8009292:	4b1a      	ldr	r3, [pc, #104]	; (80092fc <ll_transmit+0x13c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6979      	ldr	r1, [r7, #20]
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fd2b 	bl	8008cf4 <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	78db      	ldrb	r3, [r3, #3]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d104      	bne.n	80092b0 <ll_transmit+0xf0>
			{
				free(pack->payload) ;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fbd8 	bl	8009a60 <free>
			}

			free(pack) ;
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 fbd5 	bl	8009a60 <free>
			free(holder);
 80092b6:	6938      	ldr	r0, [r7, #16]
 80092b8:	f000 fbd2 	bl	8009a60 <free>
			free(node);
 80092bc:	6978      	ldr	r0, [r7, #20]
 80092be:	f000 fbcf 	bl	8009a60 <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <ll_transmit+0x13c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fdb4 	bl	8008e34 <list_size>
 80092cc:	4602      	mov	r2, r0
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <ll_transmit+0x140>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d881      	bhi.n	80091da <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <ll_transmit+0x13c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fdaa 	bl	8008e34 <list_size>
 80092e0:	4602      	mov	r2, r0
 80092e2:	4b07      	ldr	r3, [pc, #28]	; (8009300 <ll_transmit+0x140>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d804      	bhi.n	80092f4 <ll_transmit+0x134>
	{
		network_transmit_index = 0 ;	
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <ll_transmit+0x140>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	e000      	b.n	80092f4 <ll_transmit+0x134>
		return ;
 80092f2:	bf00      	nop
	}
}
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200005ec 	.word	0x200005ec
 8009300:	2000045c 	.word	0x2000045c
 8009304:	0800eaac 	.word	0x0800eaac
 8009308:	20000468 	.word	0x20000468
 800930c:	0800e908 	.word	0x0800e908

08009310 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8009310:	b590      	push	{r4, r7, lr}
 8009312:	b091      	sub	sp, #68	; 0x44
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 800931a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800931e:	461a      	mov	r2, r3
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fab8 	bl	8009898 <packet_desirialize>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d152      	bne.n	80093d4 <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 800932e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8009332:	4b2e      	ldr	r3, [pc, #184]	; (80093ec <ll_receive+0xdc>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d14f      	bne.n	80093da <ll_receive+0xca>
 800933a:	4b2d      	ldr	r3, [pc, #180]	; (80093f0 <ll_receive+0xe0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fd78 	bl	8008e34 <list_size>
 8009344:	4603      	mov	r3, r0
 8009346:	2b09      	cmp	r3, #9
 8009348:	d847      	bhi.n	80093da <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 800934a:	4b29      	ldr	r3, [pc, #164]	; (80093f0 <ll_receive+0xe0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fd70 	bl	8008e34 <list_size>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d021      	beq.n	800939e <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 800935a:	4b25      	ldr	r3, [pc, #148]	; (80093f0 <ll_receive+0xe0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff fc9d 	bl	8008ca4 <list_search>
 800936a:	63f8      	str	r0, [r7, #60]	; 0x3c
				if(n != NULL )
 800936c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d015      	beq.n	800939e <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 8009372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	63bb      	str	r3, [r7, #56]	; 0x38
					packet_t * pack = (packet_t*) &(holder)->packet ;
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	637b      	str	r3, [r7, #52]	; 0x34

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	78da      	ldrb	r2, [r3, #3]
 8009380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009384:	429a      	cmp	r2, r3
 8009386:	d10a      	bne.n	800939e <ll_receive+0x8e>
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	791a      	ldrb	r2, [r3, #4]
 800938c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009390:	429a      	cmp	r2, r3
 8009392:	d104      	bne.n	800939e <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fb62 	bl	8009a60 <free>
 800939c:	e022      	b.n	80093e4 <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80093a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80093a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 80093ac:	f7f8 fbb5 	bl	8001b1a <sys_get_tick>
 80093b0:	4603      	mov	r3, r0
 80093b2:	61fb      	str	r3, [r7, #28]
			packet_holder.number_of_transmition = 0 ;
 80093b4:	2300      	movs	r3, #0
 80093b6:	623b      	str	r3, [r7, #32]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 80093b8:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <ll_receive+0xe0>)
 80093ba:	681c      	ldr	r4, [r3, #0]
 80093bc:	f107 030c 	add.w	r3, r7, #12
 80093c0:	211c      	movs	r1, #28
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff fd72 	bl	8008eac <list_node_new>
 80093c8:	4603      	mov	r3, r0
 80093ca:	4619      	mov	r1, r3
 80093cc:	4620      	mov	r0, r4
 80093ce:	f7ff fcb3 	bl	8008d38 <list_push_back>
 80093d2:	e002      	b.n	80093da <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 80093d4:	4807      	ldr	r0, [pc, #28]	; (80093f4 <ll_receive+0xe4>)
 80093d6:	f001 f98d 	bl	800a6f4 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 80093da:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <ll_receive+0xe8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	4a05      	ldr	r2, [pc, #20]	; (80093f8 <ll_receive+0xe8>)
 80093e2:	6013      	str	r3, [r2, #0]

}
 80093e4:	3744      	adds	r7, #68	; 0x44
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd90      	pop	{r4, r7, pc}
 80093ea:	bf00      	nop
 80093ec:	2000000a 	.word	0x2000000a
 80093f0:	200005e8 	.word	0x200005e8
 80093f4:	0800e924 	.word	0x0800e924
 80093f8:	20000464 	.word	0x20000464

080093fc <ll_process_received>:

void ll_process_received()
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08a      	sub	sp, #40	; 0x28
 8009400:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 8009402:	e0ab      	b.n	800955c <ll_process_received+0x160>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8009404:	4b63      	ldr	r3, [pc, #396]	; (8009594 <ll_process_received+0x198>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a63      	ldr	r2, [pc, #396]	; (8009598 <ll_process_received+0x19c>)
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fcce 	bl	8008db0 <list_index>
 8009414:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	61fb      	str	r3, [r7, #28]
			free(holder) ;
			free(n) ;
			printf("removed from list\n");
		}
#endif /*LL_RX_TIMEOUT_REMOVE*/
		if(packet->type == PACK_TYPE_DATA)
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	78db      	ldrb	r3, [r3, #3]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d110      	bne.n	800944a <ll_process_received+0x4e>
			//data packet will be removed by ll_get_recv_from
			/*
			 * holder->number_of_transmition is used here to indicate if an ASK packet
			 * was sent to confirm the receive
			 */
			if( holder->number_of_transmition == 0)
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 8090 	bne.w	8009552 <ll_process_received+0x156>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	789b      	ldrb	r3, [r3, #2]
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7ff fe5b 	bl	80090f8 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	2201      	movs	r2, #1
 8009446:	615a      	str	r2, [r3, #20]
 8009448:	e083      	b.n	8009552 <ll_process_received+0x156>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d148      	bne.n	80094e4 <ll_process_received+0xe8>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8009452:	4b52      	ldr	r3, [pc, #328]	; (800959c <ll_process_received+0x1a0>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	789b      	ldrb	r3, [r3, #2]
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7ff fc21 	bl	8008ca4 <list_search>
 8009462:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10f      	bne.n	800948a <ll_process_received+0x8e>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 800946a:	4b4a      	ldr	r3, [pc, #296]	; (8009594 <ll_process_received+0x198>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fc3f 	bl	8008cf4 <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 8009476:	69f8      	ldr	r0, [r7, #28]
 8009478:	f000 faf2 	bl	8009a60 <free>
				free(holder) ;
 800947c:	6a38      	ldr	r0, [r7, #32]
 800947e:	f000 faef 	bl	8009a60 <free>
				free(n);
 8009482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009484:	f000 faec 	bl	8009a60 <free>
 8009488:	e063      	b.n	8009552 <ll_process_received+0x156>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	78db      	ldrb	r3, [r3, #3]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d15a      	bne.n	8009552 <ll_process_received+0x156>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	789b      	ldrb	r3, [r3, #2]
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7ff fe3d 	bl	8009126 <ll_send_NANK>

					//execute callback function
					if(h->Ask_callback != NULL)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <ll_process_received+0xbe>
					{
						h->Ask_callback();
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	4798      	blx	r3
					}
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 80094ba:	4b38      	ldr	r3, [pc, #224]	; (800959c <ll_process_received+0x1a0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fc17 	bl	8008cf4 <list_remove>
					//free memory
					free(pack_p->payload) ;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 fac8 	bl	8009a60 <free>
					free(pack_p) ;
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fac5 	bl	8009a60 <free>
					free(h);
 80094d6:	68b8      	ldr	r0, [r7, #8]
 80094d8:	f000 fac2 	bl	8009a60 <free>
					free(tx_data_node) ;
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fabf 	bl	8009a60 <free>
 80094e2:	e036      	b.n	8009552 <ll_process_received+0x156>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	78db      	ldrb	r3, [r3, #3]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d132      	bne.n	8009552 <ll_process_received+0x156>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 80094ec:	4b2b      	ldr	r3, [pc, #172]	; (800959c <ll_process_received+0x1a0>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	789b      	ldrb	r3, [r3, #2]
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	f7ff fbd4 	bl	8008ca4 <list_search>
 80094fc:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d017      	beq.n	8009534 <ll_process_received+0x138>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	78db      	ldrb	r3, [r3, #3]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d10e      	bne.n	8009534 <ll_process_received+0x138>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 8009516:	4b21      	ldr	r3, [pc, #132]	; (800959c <ll_process_received+0x1a0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69b9      	ldr	r1, [r7, #24]
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fbe9 	bl	8008cf4 <list_remove>

					//release memory

					free(ask_packet);
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f000 fa9c 	bl	8009a60 <free>
					free(p_holder) ;
 8009528:	6978      	ldr	r0, [r7, #20]
 800952a:	f000 fa99 	bl	8009a60 <free>
					free(tx_ask_node) ;
 800952e:	69b8      	ldr	r0, [r7, #24]
 8009530:	f000 fa96 	bl	8009a60 <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 8009534:	4b17      	ldr	r3, [pc, #92]	; (8009594 <ll_process_received+0x198>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fbda 	bl	8008cf4 <list_remove>
			free(packet);
 8009540:	69f8      	ldr	r0, [r7, #28]
 8009542:	f000 fa8d 	bl	8009a60 <free>
			free(holder);
 8009546:	6a38      	ldr	r0, [r7, #32]
 8009548:	f000 fa8a 	bl	8009a60 <free>
			free(n);
 800954c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800954e:	f000 fa87 	bl	8009a60 <free>
		}

		rx_packet_index++;
 8009552:	4b11      	ldr	r3, [pc, #68]	; (8009598 <ll_process_received+0x19c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	4a0f      	ldr	r2, [pc, #60]	; (8009598 <ll_process_received+0x19c>)
 800955a:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 800955c:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <ll_process_received+0x198>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fc67 	bl	8008e34 <list_size>
 8009566:	4602      	mov	r2, r0
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <ll_process_received+0x19c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	f63f af49 	bhi.w	8009404 <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index >= list_size(Rx_packet_list))
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <ll_process_received+0x198>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fc5c 	bl	8008e34 <list_size>
 800957c:	4602      	mov	r2, r0
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <ll_process_received+0x19c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d802      	bhi.n	800958c <ll_process_received+0x190>
	{
		rx_packet_index = 0;
 8009586:	4b04      	ldr	r3, [pc, #16]	; (8009598 <ll_process_received+0x19c>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
	}

}
 800958c:	bf00      	nop
 800958e:	3728      	adds	r7, #40	; 0x28
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200005e8 	.word	0x200005e8
 8009598:	20000460 	.word	0x20000460
 800959c:	200005ec 	.word	0x200005ec

080095a0 <ll_get_recv>:

/**
 *
 */
int ll_get_recv(u8 * data ,int * len )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]

	int rx_list_size = list_size(Rx_packet_list) ;
 80095aa:	4b2c      	ldr	r3, [pc, #176]	; (800965c <ll_get_recv+0xbc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff fc40 	bl	8008e34 <list_size>
 80095b4:	4603      	mov	r3, r0
 80095b6:	61bb      	str	r3, [r7, #24]
	struct list_node * node ;
	packet_holder_t  * holder ;
	packet_t         * pack ;


	for(int i = 0;i<  rx_list_size ;i++)
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	e041      	b.n	8009642 <ll_get_recv+0xa2>
	{
		node   = list_index(Rx_packet_list , i) ;
 80095be:	4b27      	ldr	r3, [pc, #156]	; (800965c <ll_get_recv+0xbc>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69f9      	ldr	r1, [r7, #28]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fbf3 	bl	8008db0 <list_index>
 80095ca:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t*) node->data ;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	613b      	str	r3, [r7, #16]
		pack   = (packet_t*) &(holder)->packet ;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	60fb      	str	r3, [r7, #12]

		if(pack->type == PACK_TYPE_DATA)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	78db      	ldrb	r3, [r3, #3]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d12e      	bne.n	800963c <ll_get_recv+0x9c>
		{
			//
			memcpy(data , pack->payload , pack->payload_length) ;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6899      	ldr	r1, [r3, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	791b      	ldrb	r3, [r3, #4]
 80095e6:	461a      	mov	r2, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fa41 	bl	8009a70 <memcpy>
			*len = pack->payload_length ;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	461a      	mov	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	601a      	str	r2, [r3, #0]

			int source_node =  pack->src ;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	60bb      	str	r3, [r7, #8]

			if(holder->transmition_time == 0)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <ll_get_recv+0x76>
			{
				ll_send_ASK(pack->src , pack->id) ;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	781a      	ldrb	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	789b      	ldrb	r3, [r3, #2]
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7ff fd71 	bl	80090f8 <ll_send_ASK>

			}
			list_remove(Rx_packet_list , node) ;
 8009616:	4b11      	ldr	r3, [pc, #68]	; (800965c <ll_get_recv+0xbc>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff fb69 	bl	8008cf4 <list_remove>
			//remove the packet
			free(pack->payload) ;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fa1a 	bl	8009a60 <free>
			free(holder) ;
 800962c:	6938      	ldr	r0, [r7, #16]
 800962e:	f000 fa17 	bl	8009a60 <free>
			free(node) ;
 8009632:	6978      	ldr	r0, [r7, #20]
 8009634:	f000 fa14 	bl	8009a60 <free>

			return source_node ;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	e00b      	b.n	8009654 <ll_get_recv+0xb4>
	for(int i = 0;i<  rx_list_size ;i++)
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	429a      	cmp	r2, r3
 8009648:	dbb9      	blt.n	80095be <ll_get_recv+0x1e>

	(void) node   ;
	(void) holder ;
	(void) pack   ;

	*len = 0;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
	return -1 ;
 8009650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200005e8 	.word	0x200005e8

08009660 <ll_process>:

u32 process_tmr = 0;
uint32_t tx_trans_timer  = 1000 ;
//this function should manage send and receive operations
void ll_process(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0

	ll_process_received();
 8009664:	f7ff feca 	bl	80093fc <ll_process_received>
    if(sys_get_tick() - process_tmr >= tx_trans_timer)
 8009668:	f7f8 fa57 	bl	8001b1a <sys_get_tick>
 800966c:	4602      	mov	r2, r0
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <ll_process+0x48>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <ll_process+0x4c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d30b      	bcc.n	8009694 <ll_process+0x34>
    {
	    ll_transmit() ;
 800967c:	f7ff fda0 	bl	80091c0 <ll_transmit>
	    Radio.Rx(1000);
 8009680:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <ll_process+0x50>)
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009688:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 800968a:	f7f8 fa46 	bl	8001b1a <sys_get_tick>
 800968e:	4603      	mov	r3, r0
 8009690:	4a05      	ldr	r2, [pc, #20]	; (80096a8 <ll_process+0x48>)
 8009692:	6013      	str	r3, [r2, #0]
    }

    if( get_tx_size() >= LL_TX_BUTTLE_NECK)
 8009694:	f7ff fd7c 	bl	8009190 <get_tx_size>
 8009698:	4603      	mov	r3, r0
 800969a:	2b05      	cmp	r3, #5
 800969c:	dd02      	ble.n	80096a4 <ll_process+0x44>
    {
    	tx_trans_timer = 200 ;
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <ll_process+0x4c>)
 80096a0:	22c8      	movs	r2, #200	; 0xc8
 80096a2:	601a      	str	r2, [r3, #0]

		default:
			break ;
		}
	*/
}
 80096a4:	bf00      	nop
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000046c 	.word	0x2000046c
 80096ac:	2000000c 	.word	0x2000000c
 80096b0:	0800eaac 	.word	0x0800eaac

080096b4 <ll_set_transmition_done>:
		debug_packet(pp) ;
	}
}

void ll_set_transmition_done()
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 80096b8:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <ll_set_transmition_done+0x14>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bc80      	pop	{r7}
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	20000468 	.word	0x20000468

080096cc <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	461a      	mov	r2, r3
 80096da:	4603      	mov	r3, r0
 80096dc:	70fb      	strb	r3, [r7, #3]
 80096de:	460b      	mov	r3, r1
 80096e0:	70bb      	strb	r3, [r7, #2]
 80096e2:	4613      	mov	r3, r2
 80096e4:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f819 	bl	8009722 <packet_set_src>
	packet_set_dest(pack  , dest) ;
 80096f0:	78bb      	ldrb	r3, [r7, #2]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f822 	bl	800973e <packet_set_dest>
	packet_set_type(pack , type );
 80096fa:	787b      	ldrb	r3, [r7, #1]
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f82b 	bl	800975a <packet_set_type>
	packet_set_id(pack ,id) ;
 8009704:	7c3b      	ldrb	r3, [r7, #16]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f85a 	bl	80097c2 <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 800970e:	7e3b      	ldrb	r3, [r7, #24]
 8009710:	461a      	mov	r2, r3
 8009712:	6979      	ldr	r1, [r7, #20]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f82e 	bl	8009776 <packet_set_payload>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	701a      	strb	r2, [r3, #0]
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr

0800973e <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	705a      	strb	r2, [r3, #1]
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	70da      	strb	r2, [r3, #3]
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	bc80      	pop	{r7}
 8009774:	4770      	bx	lr

08009776 <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d016      	beq.n	80097b6 <packet_set_payload+0x40>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d013      	beq.n	80097b6 <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f95d 	bl	8009a50 <malloc>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f962 	bl	8009a70 <memcpy>
		pack->payload_length = len ;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	711a      	strb	r2, [r3, #4]
		return ;
 80097b4:	e002      	b.n	80097bc <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	711a      	strb	r2, [r3, #4]
	
}
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	709a      	strb	r2, [r3, #2]
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr

080097de <packet_serialize>:
	printf("\n");
	
}

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b086      	sub	sp, #24
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	791b      	ldrb	r3, [r3, #4]
 80097ec:	3307      	adds	r3, #7
 80097ee:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d04a      	beq.n	800988c <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	785a      	ldrb	r2, [r3, #1]
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3301      	adds	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	3301      	adds	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	789a      	ldrb	r2, [r3, #2]
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	3301      	adds	r3, #1
 8009822:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	78da      	ldrb	r2, [r3, #3]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	791a      	ldrb	r2, [r3, #4]
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3301      	adds	r3, #1
 800983e:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6899      	ldr	r1, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	791b      	ldrb	r3, [r3, #4]
 8009848:	461a      	mov	r2, r3
 800984a:	6938      	ldr	r0, [r7, #16]
 800984c:	f000 f910 	bl	8009a70 <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	791b      	ldrb	r3, [r3, #4]
 8009854:	3305      	adds	r3, #5
 8009856:	4619      	mov	r1, r3
 8009858:	6838      	ldr	r0, [r7, #0]
 800985a:	f000 f873 	bl	8009944 <check_sum>
 800985e:	4603      	mov	r3, r0
 8009860:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	791b      	ldrb	r3, [r3, #4]
 8009866:	461a      	mov	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 800986e:	89fb      	ldrh	r3, [r7, #14]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b29b      	uxth	r3, r3
 8009874:	b2da      	uxtb	r2, r3
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	b2da      	uxtb	r2, r3
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	e000      	b.n	800988e <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 800988c:	2300      	movs	r3, #0
	}
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	3b02      	subs	r3, #2
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	b29a      	uxth	r2, r3
 80098be:	8afb      	ldrh	r3, [r7, #22]
 80098c0:	4413      	add	r3, r2
 80098c2:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3b02      	subs	r3, #2
 80098c8:	4619      	mov	r1, r3
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 f83a 	bl	8009944 <check_sum>
 80098d0:	4603      	mov	r3, r0
 80098d2:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 80098d4:	8aba      	ldrh	r2, [r7, #20]
 80098d6:	8afb      	ldrh	r3, [r7, #22]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d005      	beq.n	80098e8 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 80098dc:	4818      	ldr	r0, [pc, #96]	; (8009940 <packet_desirialize+0xa8>)
 80098de:	f000 ff09 	bl	800a6f4 <puts>
		return PACK_CHECKSUM_ERROR ;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295
 80098e6:	e026      	b.n	8009936 <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	785a      	ldrb	r2, [r3, #1]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	78da      	ldrb	r2, [r3, #3]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	789a      	ldrb	r2, [r3, #2]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	791a      	ldrb	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	791b      	ldrb	r3, [r3, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f89b 	bl	8009a50 <malloc>
 800991a:	4603      	mov	r3, r0
 800991c:	461a      	mov	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6898      	ldr	r0, [r3, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	1d59      	adds	r1, r3, #5
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	461a      	mov	r2, r3
 8009930:	f000 f89e 	bl	8009a70 <memcpy>
	
	return PACK_OK ;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	0800e9d4 	.word	0x0800e9d4

08009944 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8009956:	e017      	b.n	8009988 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	b29b      	uxth	r3, r3
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	3301      	adds	r3, #1
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	4413      	add	r3, r2
 800997a:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	3b02      	subs	r3, #2
 8009980:	603b      	str	r3, [r7, #0]
		i += 2;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	3302      	adds	r3, #2
 8009986:	617b      	str	r3, [r7, #20]
	while(len>1)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b01      	cmp	r3, #1
 800998c:	dce4      	bgt.n	8009958 <check_sum+0x14>
	}
	
	if(len >0)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dd13      	ble.n	80099bc <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	3b01      	subs	r3, #1
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4413      	add	r3, r2
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	4413      	add	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 80099a6:	e009      	b.n	80099bc <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	0c1b      	lsrs	r3, r3, #16
 80099b2:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 80099b4:	89fb      	ldrh	r3, [r7, #14]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	4413      	add	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c2:	daf1      	bge.n	80099a8 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	43db      	mvns	r3, r3
 80099ca:	b29b      	uxth	r3, r3
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr

080099d6 <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	791b      	ldrb	r3, [r3, #4]
 80099e2:	3307      	adds	r3, #7
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr

080099ee <atof>:
 80099ee:	2100      	movs	r1, #0
 80099f0:	f001 beca 	b.w	800b788 <strtod>

080099f4 <atoi>:
 80099f4:	220a      	movs	r2, #10
 80099f6:	2100      	movs	r1, #0
 80099f8:	f001 bf58 	b.w	800b8ac <strtol>

080099fc <__errno>:
 80099fc:	4b01      	ldr	r3, [pc, #4]	; (8009a04 <__errno+0x8>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20000010 	.word	0x20000010

08009a08 <__libc_init_array>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	4d0d      	ldr	r5, [pc, #52]	; (8009a40 <__libc_init_array+0x38>)
 8009a0c:	4c0d      	ldr	r4, [pc, #52]	; (8009a44 <__libc_init_array+0x3c>)
 8009a0e:	1b64      	subs	r4, r4, r5
 8009a10:	10a4      	asrs	r4, r4, #2
 8009a12:	2600      	movs	r6, #0
 8009a14:	42a6      	cmp	r6, r4
 8009a16:	d109      	bne.n	8009a2c <__libc_init_array+0x24>
 8009a18:	4d0b      	ldr	r5, [pc, #44]	; (8009a48 <__libc_init_array+0x40>)
 8009a1a:	4c0c      	ldr	r4, [pc, #48]	; (8009a4c <__libc_init_array+0x44>)
 8009a1c:	f004 fd78 	bl	800e510 <_init>
 8009a20:	1b64      	subs	r4, r4, r5
 8009a22:	10a4      	asrs	r4, r4, #2
 8009a24:	2600      	movs	r6, #0
 8009a26:	42a6      	cmp	r6, r4
 8009a28:	d105      	bne.n	8009a36 <__libc_init_array+0x2e>
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a30:	4798      	blx	r3
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7ee      	b.n	8009a14 <__libc_init_array+0xc>
 8009a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3a:	4798      	blx	r3
 8009a3c:	3601      	adds	r6, #1
 8009a3e:	e7f2      	b.n	8009a26 <__libc_init_array+0x1e>
 8009a40:	0800f734 	.word	0x0800f734
 8009a44:	0800f734 	.word	0x0800f734
 8009a48:	0800f734 	.word	0x0800f734
 8009a4c:	0800f738 	.word	0x0800f738

08009a50 <malloc>:
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <malloc+0xc>)
 8009a52:	4601      	mov	r1, r0
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f000 b86f 	b.w	8009b38 <_malloc_r>
 8009a5a:	bf00      	nop
 8009a5c:	20000010 	.word	0x20000010

08009a60 <free>:
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <free+0xc>)
 8009a62:	4601      	mov	r1, r0
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	f000 b819 	b.w	8009a9c <_free_r>
 8009a6a:	bf00      	nop
 8009a6c:	20000010 	.word	0x20000010

08009a70 <memcpy>:
 8009a70:	440a      	add	r2, r1
 8009a72:	4291      	cmp	r1, r2
 8009a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a78:	d100      	bne.n	8009a7c <memcpy+0xc>
 8009a7a:	4770      	bx	lr
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a86:	4291      	cmp	r1, r2
 8009a88:	d1f9      	bne.n	8009a7e <memcpy+0xe>
 8009a8a:	bd10      	pop	{r4, pc}

08009a8c <memset>:
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <_free_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d045      	beq.n	8009b30 <_free_r+0x94>
 8009aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa8:	1f0c      	subs	r4, r1, #4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bfb8      	it	lt
 8009aae:	18e4      	addlt	r4, r4, r3
 8009ab0:	f003 fc2a 	bl	800d308 <__malloc_lock>
 8009ab4:	4a1f      	ldr	r2, [pc, #124]	; (8009b34 <_free_r+0x98>)
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	4610      	mov	r0, r2
 8009aba:	b933      	cbnz	r3, 8009aca <_free_r+0x2e>
 8009abc:	6063      	str	r3, [r4, #4]
 8009abe:	6014      	str	r4, [r2, #0]
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac6:	f003 bc25 	b.w	800d314 <__malloc_unlock>
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	d90b      	bls.n	8009ae6 <_free_r+0x4a>
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	1862      	adds	r2, r4, r1
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	bf04      	itt	eq
 8009ad6:	681a      	ldreq	r2, [r3, #0]
 8009ad8:	685b      	ldreq	r3, [r3, #4]
 8009ada:	6063      	str	r3, [r4, #4]
 8009adc:	bf04      	itt	eq
 8009ade:	1852      	addeq	r2, r2, r1
 8009ae0:	6022      	streq	r2, [r4, #0]
 8009ae2:	6004      	str	r4, [r0, #0]
 8009ae4:	e7ec      	b.n	8009ac0 <_free_r+0x24>
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	b10b      	cbz	r3, 8009af0 <_free_r+0x54>
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	d9fa      	bls.n	8009ae6 <_free_r+0x4a>
 8009af0:	6811      	ldr	r1, [r2, #0]
 8009af2:	1850      	adds	r0, r2, r1
 8009af4:	42a0      	cmp	r0, r4
 8009af6:	d10b      	bne.n	8009b10 <_free_r+0x74>
 8009af8:	6820      	ldr	r0, [r4, #0]
 8009afa:	4401      	add	r1, r0
 8009afc:	1850      	adds	r0, r2, r1
 8009afe:	4283      	cmp	r3, r0
 8009b00:	6011      	str	r1, [r2, #0]
 8009b02:	d1dd      	bne.n	8009ac0 <_free_r+0x24>
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	6053      	str	r3, [r2, #4]
 8009b0a:	4401      	add	r1, r0
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	e7d7      	b.n	8009ac0 <_free_r+0x24>
 8009b10:	d902      	bls.n	8009b18 <_free_r+0x7c>
 8009b12:	230c      	movs	r3, #12
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	e7d3      	b.n	8009ac0 <_free_r+0x24>
 8009b18:	6820      	ldr	r0, [r4, #0]
 8009b1a:	1821      	adds	r1, r4, r0
 8009b1c:	428b      	cmp	r3, r1
 8009b1e:	bf04      	itt	eq
 8009b20:	6819      	ldreq	r1, [r3, #0]
 8009b22:	685b      	ldreq	r3, [r3, #4]
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	bf04      	itt	eq
 8009b28:	1809      	addeq	r1, r1, r0
 8009b2a:	6021      	streq	r1, [r4, #0]
 8009b2c:	6054      	str	r4, [r2, #4]
 8009b2e:	e7c7      	b.n	8009ac0 <_free_r+0x24>
 8009b30:	bd38      	pop	{r3, r4, r5, pc}
 8009b32:	bf00      	nop
 8009b34:	20000470 	.word	0x20000470

08009b38 <_malloc_r>:
 8009b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3a:	1ccd      	adds	r5, r1, #3
 8009b3c:	f025 0503 	bic.w	r5, r5, #3
 8009b40:	3508      	adds	r5, #8
 8009b42:	2d0c      	cmp	r5, #12
 8009b44:	bf38      	it	cc
 8009b46:	250c      	movcc	r5, #12
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	db01      	blt.n	8009b52 <_malloc_r+0x1a>
 8009b4e:	42a9      	cmp	r1, r5
 8009b50:	d903      	bls.n	8009b5a <_malloc_r+0x22>
 8009b52:	230c      	movs	r3, #12
 8009b54:	6033      	str	r3, [r6, #0]
 8009b56:	2000      	movs	r0, #0
 8009b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b5a:	f003 fbd5 	bl	800d308 <__malloc_lock>
 8009b5e:	4921      	ldr	r1, [pc, #132]	; (8009be4 <_malloc_r+0xac>)
 8009b60:	680a      	ldr	r2, [r1, #0]
 8009b62:	4614      	mov	r4, r2
 8009b64:	b99c      	cbnz	r4, 8009b8e <_malloc_r+0x56>
 8009b66:	4f20      	ldr	r7, [pc, #128]	; (8009be8 <_malloc_r+0xb0>)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	b923      	cbnz	r3, 8009b76 <_malloc_r+0x3e>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f000 fdc8 	bl	800a704 <_sbrk_r>
 8009b74:	6038      	str	r0, [r7, #0]
 8009b76:	4629      	mov	r1, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f000 fdc3 	bl	800a704 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d123      	bne.n	8009bca <_malloc_r+0x92>
 8009b82:	230c      	movs	r3, #12
 8009b84:	6033      	str	r3, [r6, #0]
 8009b86:	4630      	mov	r0, r6
 8009b88:	f003 fbc4 	bl	800d314 <__malloc_unlock>
 8009b8c:	e7e3      	b.n	8009b56 <_malloc_r+0x1e>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	1b5b      	subs	r3, r3, r5
 8009b92:	d417      	bmi.n	8009bc4 <_malloc_r+0x8c>
 8009b94:	2b0b      	cmp	r3, #11
 8009b96:	d903      	bls.n	8009ba0 <_malloc_r+0x68>
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	441c      	add	r4, r3
 8009b9c:	6025      	str	r5, [r4, #0]
 8009b9e:	e004      	b.n	8009baa <_malloc_r+0x72>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	42a2      	cmp	r2, r4
 8009ba4:	bf0c      	ite	eq
 8009ba6:	600b      	streq	r3, [r1, #0]
 8009ba8:	6053      	strne	r3, [r2, #4]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f003 fbb2 	bl	800d314 <__malloc_unlock>
 8009bb0:	f104 000b 	add.w	r0, r4, #11
 8009bb4:	1d23      	adds	r3, r4, #4
 8009bb6:	f020 0007 	bic.w	r0, r0, #7
 8009bba:	1ac2      	subs	r2, r0, r3
 8009bbc:	d0cc      	beq.n	8009b58 <_malloc_r+0x20>
 8009bbe:	1a1b      	subs	r3, r3, r0
 8009bc0:	50a3      	str	r3, [r4, r2]
 8009bc2:	e7c9      	b.n	8009b58 <_malloc_r+0x20>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	6864      	ldr	r4, [r4, #4]
 8009bc8:	e7cc      	b.n	8009b64 <_malloc_r+0x2c>
 8009bca:	1cc4      	adds	r4, r0, #3
 8009bcc:	f024 0403 	bic.w	r4, r4, #3
 8009bd0:	42a0      	cmp	r0, r4
 8009bd2:	d0e3      	beq.n	8009b9c <_malloc_r+0x64>
 8009bd4:	1a21      	subs	r1, r4, r0
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f000 fd94 	bl	800a704 <_sbrk_r>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d1dd      	bne.n	8009b9c <_malloc_r+0x64>
 8009be0:	e7cf      	b.n	8009b82 <_malloc_r+0x4a>
 8009be2:	bf00      	nop
 8009be4:	20000470 	.word	0x20000470
 8009be8:	20000474 	.word	0x20000474

08009bec <__cvt>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	b088      	sub	sp, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	461f      	mov	r7, r3
 8009bf6:	4614      	mov	r4, r2
 8009bf8:	bfb8      	it	lt
 8009bfa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c00:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009c02:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009c06:	bfb6      	itet	lt
 8009c08:	461f      	movlt	r7, r3
 8009c0a:	2300      	movge	r3, #0
 8009c0c:	232d      	movlt	r3, #45	; 0x2d
 8009c0e:	7013      	strb	r3, [r2, #0]
 8009c10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c12:	f023 0820 	bic.w	r8, r3, #32
 8009c16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c1a:	d005      	beq.n	8009c28 <__cvt+0x3c>
 8009c1c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c20:	d100      	bne.n	8009c24 <__cvt+0x38>
 8009c22:	3501      	adds	r5, #1
 8009c24:	2302      	movs	r3, #2
 8009c26:	e000      	b.n	8009c2a <__cvt+0x3e>
 8009c28:	2303      	movs	r3, #3
 8009c2a:	aa07      	add	r2, sp, #28
 8009c2c:	9204      	str	r2, [sp, #16]
 8009c2e:	aa06      	add	r2, sp, #24
 8009c30:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009c34:	e9cd 3500 	strd	r3, r5, [sp]
 8009c38:	4622      	mov	r2, r4
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	f001 ffa0 	bl	800bb80 <_dtoa_r>
 8009c40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c44:	4606      	mov	r6, r0
 8009c46:	d102      	bne.n	8009c4e <__cvt+0x62>
 8009c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c4a:	07db      	lsls	r3, r3, #31
 8009c4c:	d522      	bpl.n	8009c94 <__cvt+0xa8>
 8009c4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c52:	eb06 0905 	add.w	r9, r6, r5
 8009c56:	d110      	bne.n	8009c7a <__cvt+0x8e>
 8009c58:	7833      	ldrb	r3, [r6, #0]
 8009c5a:	2b30      	cmp	r3, #48	; 0x30
 8009c5c:	d10a      	bne.n	8009c74 <__cvt+0x88>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	4620      	mov	r0, r4
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 ff17 	bl	8000a98 <__aeabi_dcmpeq>
 8009c6a:	b918      	cbnz	r0, 8009c74 <__cvt+0x88>
 8009c6c:	f1c5 0501 	rsb	r5, r5, #1
 8009c70:	f8ca 5000 	str.w	r5, [sl]
 8009c74:	f8da 3000 	ldr.w	r3, [sl]
 8009c78:	4499      	add	r9, r3
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 ff09 	bl	8000a98 <__aeabi_dcmpeq>
 8009c86:	b108      	cbz	r0, 8009c8c <__cvt+0xa0>
 8009c88:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c8c:	2230      	movs	r2, #48	; 0x30
 8009c8e:	9b07      	ldr	r3, [sp, #28]
 8009c90:	454b      	cmp	r3, r9
 8009c92:	d307      	bcc.n	8009ca4 <__cvt+0xb8>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c98:	1b9b      	subs	r3, r3, r6
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	6013      	str	r3, [r2, #0]
 8009c9e:	b008      	add	sp, #32
 8009ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca4:	1c59      	adds	r1, r3, #1
 8009ca6:	9107      	str	r1, [sp, #28]
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e7f0      	b.n	8009c8e <__cvt+0xa2>

08009cac <__exponent>:
 8009cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	bfb8      	it	lt
 8009cb4:	4249      	neglt	r1, r1
 8009cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8009cba:	bfb4      	ite	lt
 8009cbc:	222d      	movlt	r2, #45	; 0x2d
 8009cbe:	222b      	movge	r2, #43	; 0x2b
 8009cc0:	2909      	cmp	r1, #9
 8009cc2:	7042      	strb	r2, [r0, #1]
 8009cc4:	dd2a      	ble.n	8009d1c <__exponent+0x70>
 8009cc6:	f10d 0407 	add.w	r4, sp, #7
 8009cca:	46a4      	mov	ip, r4
 8009ccc:	270a      	movs	r7, #10
 8009cce:	46a6      	mov	lr, r4
 8009cd0:	460a      	mov	r2, r1
 8009cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8009cda:	3530      	adds	r5, #48	; 0x30
 8009cdc:	2a63      	cmp	r2, #99	; 0x63
 8009cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	dcf1      	bgt.n	8009cce <__exponent+0x22>
 8009cea:	3130      	adds	r1, #48	; 0x30
 8009cec:	f1ae 0502 	sub.w	r5, lr, #2
 8009cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cf4:	1c44      	adds	r4, r0, #1
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4561      	cmp	r1, ip
 8009cfa:	d30a      	bcc.n	8009d12 <__exponent+0x66>
 8009cfc:	f10d 0209 	add.w	r2, sp, #9
 8009d00:	eba2 020e 	sub.w	r2, r2, lr
 8009d04:	4565      	cmp	r5, ip
 8009d06:	bf88      	it	hi
 8009d08:	2200      	movhi	r2, #0
 8009d0a:	4413      	add	r3, r2
 8009d0c:	1a18      	subs	r0, r3, r0
 8009d0e:	b003      	add	sp, #12
 8009d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d1a:	e7ed      	b.n	8009cf8 <__exponent+0x4c>
 8009d1c:	2330      	movs	r3, #48	; 0x30
 8009d1e:	3130      	adds	r1, #48	; 0x30
 8009d20:	7083      	strb	r3, [r0, #2]
 8009d22:	70c1      	strb	r1, [r0, #3]
 8009d24:	1d03      	adds	r3, r0, #4
 8009d26:	e7f1      	b.n	8009d0c <__exponent+0x60>

08009d28 <_printf_float>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	b091      	sub	sp, #68	; 0x44
 8009d2e:	460c      	mov	r4, r1
 8009d30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009d34:	4616      	mov	r6, r2
 8009d36:	461f      	mov	r7, r3
 8009d38:	4605      	mov	r5, r0
 8009d3a:	f003 fa67 	bl	800d20c <_localeconv_r>
 8009d3e:	6803      	ldr	r3, [r0, #0]
 8009d40:	9309      	str	r3, [sp, #36]	; 0x24
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f6 fa26 	bl	8000194 <strlen>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d50:	900a      	str	r0, [sp, #40]	; 0x28
 8009d52:	3307      	adds	r3, #7
 8009d54:	f023 0307 	bic.w	r3, r3, #7
 8009d58:	f103 0208 	add.w	r2, r3, #8
 8009d5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d60:	f8d4 b000 	ldr.w	fp, [r4]
 8009d64:	f8c8 2000 	str.w	r2, [r8]
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009d74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d7c:	4b9c      	ldr	r3, [pc, #624]	; (8009ff0 <_printf_float+0x2c8>)
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	4640      	mov	r0, r8
 8009d84:	f7f6 feba 	bl	8000afc <__aeabi_dcmpun>
 8009d88:	bb70      	cbnz	r0, 8009de8 <_printf_float+0xc0>
 8009d8a:	4b99      	ldr	r3, [pc, #612]	; (8009ff0 <_printf_float+0x2c8>)
 8009d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d92:	4640      	mov	r0, r8
 8009d94:	f7f6 fe94 	bl	8000ac0 <__aeabi_dcmple>
 8009d98:	bb30      	cbnz	r0, 8009de8 <_printf_float+0xc0>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4651      	mov	r1, sl
 8009da2:	f7f6 fe83 	bl	8000aac <__aeabi_dcmplt>
 8009da6:	b110      	cbz	r0, 8009dae <_printf_float+0x86>
 8009da8:	232d      	movs	r3, #45	; 0x2d
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dae:	4b91      	ldr	r3, [pc, #580]	; (8009ff4 <_printf_float+0x2cc>)
 8009db0:	4891      	ldr	r0, [pc, #580]	; (8009ff8 <_printf_float+0x2d0>)
 8009db2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009db6:	bf94      	ite	ls
 8009db8:	4698      	movls	r8, r3
 8009dba:	4680      	movhi	r8, r0
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	f02b 0304 	bic.w	r3, fp, #4
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	f04f 0a00 	mov.w	sl, #0
 8009dca:	9700      	str	r7, [sp, #0]
 8009dcc:	4633      	mov	r3, r6
 8009dce:	aa0f      	add	r2, sp, #60	; 0x3c
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f9d2 	bl	800a17c <_printf_common>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f040 808f 	bne.w	8009efc <_printf_float+0x1d4>
 8009dde:	f04f 30ff 	mov.w	r0, #4294967295
 8009de2:	b011      	add	sp, #68	; 0x44
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	4642      	mov	r2, r8
 8009dea:	4653      	mov	r3, sl
 8009dec:	4640      	mov	r0, r8
 8009dee:	4651      	mov	r1, sl
 8009df0:	f7f6 fe84 	bl	8000afc <__aeabi_dcmpun>
 8009df4:	b140      	cbz	r0, 8009e08 <_printf_float+0xe0>
 8009df6:	f1ba 0f00 	cmp.w	sl, #0
 8009dfa:	bfbc      	itt	lt
 8009dfc:	232d      	movlt	r3, #45	; 0x2d
 8009dfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e02:	487e      	ldr	r0, [pc, #504]	; (8009ffc <_printf_float+0x2d4>)
 8009e04:	4b7e      	ldr	r3, [pc, #504]	; (800a000 <_printf_float+0x2d8>)
 8009e06:	e7d4      	b.n	8009db2 <_printf_float+0x8a>
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009e10:	d142      	bne.n	8009e98 <_printf_float+0x170>
 8009e12:	2306      	movs	r3, #6
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	9206      	str	r2, [sp, #24]
 8009e1a:	aa0e      	add	r2, sp, #56	; 0x38
 8009e1c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009e20:	aa0d      	add	r2, sp, #52	; 0x34
 8009e22:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009e26:	9203      	str	r2, [sp, #12]
 8009e28:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009e2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	4642      	mov	r2, r8
 8009e38:	4653      	mov	r3, sl
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e3e:	f7ff fed5 	bl	8009bec <__cvt>
 8009e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e44:	2947      	cmp	r1, #71	; 0x47
 8009e46:	4680      	mov	r8, r0
 8009e48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e4a:	d108      	bne.n	8009e5e <_printf_float+0x136>
 8009e4c:	1cc8      	adds	r0, r1, #3
 8009e4e:	db02      	blt.n	8009e56 <_printf_float+0x12e>
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	4299      	cmp	r1, r3
 8009e54:	dd40      	ble.n	8009ed8 <_printf_float+0x1b0>
 8009e56:	f1a9 0902 	sub.w	r9, r9, #2
 8009e5a:	fa5f f989 	uxtb.w	r9, r9
 8009e5e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e62:	d81f      	bhi.n	8009ea4 <_printf_float+0x17c>
 8009e64:	3901      	subs	r1, #1
 8009e66:	464a      	mov	r2, r9
 8009e68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e6c:	910d      	str	r1, [sp, #52]	; 0x34
 8009e6e:	f7ff ff1d 	bl	8009cac <__exponent>
 8009e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e74:	1813      	adds	r3, r2, r0
 8009e76:	2a01      	cmp	r2, #1
 8009e78:	4682      	mov	sl, r0
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	dc02      	bgt.n	8009e84 <_printf_float+0x15c>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	07d2      	lsls	r2, r2, #31
 8009e82:	d501      	bpl.n	8009e88 <_printf_float+0x160>
 8009e84:	3301      	adds	r3, #1
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d09c      	beq.n	8009dca <_printf_float+0xa2>
 8009e90:	232d      	movs	r3, #45	; 0x2d
 8009e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e96:	e798      	b.n	8009dca <_printf_float+0xa2>
 8009e98:	2947      	cmp	r1, #71	; 0x47
 8009e9a:	d1bc      	bne.n	8009e16 <_printf_float+0xee>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1ba      	bne.n	8009e16 <_printf_float+0xee>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e7b7      	b.n	8009e14 <_printf_float+0xec>
 8009ea4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009ea8:	d118      	bne.n	8009edc <_printf_float+0x1b4>
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	dd0b      	ble.n	8009ec8 <_printf_float+0x1a0>
 8009eb0:	6121      	str	r1, [r4, #16]
 8009eb2:	b913      	cbnz	r3, 8009eba <_printf_float+0x192>
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	07d0      	lsls	r0, r2, #31
 8009eb8:	d502      	bpl.n	8009ec0 <_printf_float+0x198>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	440b      	add	r3, r1
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ec2:	f04f 0a00 	mov.w	sl, #0
 8009ec6:	e7df      	b.n	8009e88 <_printf_float+0x160>
 8009ec8:	b913      	cbnz	r3, 8009ed0 <_printf_float+0x1a8>
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	07d2      	lsls	r2, r2, #31
 8009ece:	d501      	bpl.n	8009ed4 <_printf_float+0x1ac>
 8009ed0:	3302      	adds	r3, #2
 8009ed2:	e7f4      	b.n	8009ebe <_printf_float+0x196>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e7f2      	b.n	8009ebe <_printf_float+0x196>
 8009ed8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ede:	4299      	cmp	r1, r3
 8009ee0:	db05      	blt.n	8009eee <_printf_float+0x1c6>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	6121      	str	r1, [r4, #16]
 8009ee6:	07d8      	lsls	r0, r3, #31
 8009ee8:	d5ea      	bpl.n	8009ec0 <_printf_float+0x198>
 8009eea:	1c4b      	adds	r3, r1, #1
 8009eec:	e7e7      	b.n	8009ebe <_printf_float+0x196>
 8009eee:	2900      	cmp	r1, #0
 8009ef0:	bfd4      	ite	le
 8009ef2:	f1c1 0202 	rsble	r2, r1, #2
 8009ef6:	2201      	movgt	r2, #1
 8009ef8:	4413      	add	r3, r2
 8009efa:	e7e0      	b.n	8009ebe <_printf_float+0x196>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	055a      	lsls	r2, r3, #21
 8009f00:	d407      	bmi.n	8009f12 <_printf_float+0x1ea>
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	4642      	mov	r2, r8
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d12b      	bne.n	8009f68 <_printf_float+0x240>
 8009f10:	e765      	b.n	8009dde <_printf_float+0xb6>
 8009f12:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f16:	f240 80dc 	bls.w	800a0d2 <_printf_float+0x3aa>
 8009f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	f7f6 fdb9 	bl	8000a98 <__aeabi_dcmpeq>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d033      	beq.n	8009f92 <_printf_float+0x26a>
 8009f2a:	4a36      	ldr	r2, [pc, #216]	; (800a004 <_printf_float+0x2dc>)
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b8      	blx	r7
 8009f34:	3001      	adds	r0, #1
 8009f36:	f43f af52 	beq.w	8009dde <_printf_float+0xb6>
 8009f3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	db02      	blt.n	8009f48 <_printf_float+0x220>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	07d8      	lsls	r0, r3, #31
 8009f46:	d50f      	bpl.n	8009f68 <_printf_float+0x240>
 8009f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f af43 	beq.w	8009dde <_printf_float+0xb6>
 8009f58:	f04f 0800 	mov.w	r8, #0
 8009f5c:	f104 091a 	add.w	r9, r4, #26
 8009f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f62:	3b01      	subs	r3, #1
 8009f64:	4543      	cmp	r3, r8
 8009f66:	dc09      	bgt.n	8009f7c <_printf_float+0x254>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	079b      	lsls	r3, r3, #30
 8009f6c:	f100 8101 	bmi.w	800a172 <_printf_float+0x44a>
 8009f70:	68e0      	ldr	r0, [r4, #12]
 8009f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f74:	4298      	cmp	r0, r3
 8009f76:	bfb8      	it	lt
 8009f78:	4618      	movlt	r0, r3
 8009f7a:	e732      	b.n	8009de2 <_printf_float+0xba>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	464a      	mov	r2, r9
 8009f80:	4631      	mov	r1, r6
 8009f82:	4628      	mov	r0, r5
 8009f84:	47b8      	blx	r7
 8009f86:	3001      	adds	r0, #1
 8009f88:	f43f af29 	beq.w	8009dde <_printf_float+0xb6>
 8009f8c:	f108 0801 	add.w	r8, r8, #1
 8009f90:	e7e6      	b.n	8009f60 <_printf_float+0x238>
 8009f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dc37      	bgt.n	800a008 <_printf_float+0x2e0>
 8009f98:	4a1a      	ldr	r2, [pc, #104]	; (800a004 <_printf_float+0x2dc>)
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b8      	blx	r7
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f43f af1b 	beq.w	8009dde <_printf_float+0xb6>
 8009fa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fac:	4313      	orrs	r3, r2
 8009fae:	d102      	bne.n	8009fb6 <_printf_float+0x28e>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07d9      	lsls	r1, r3, #31
 8009fb4:	d5d8      	bpl.n	8009f68 <_printf_float+0x240>
 8009fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f af0c 	beq.w	8009dde <_printf_float+0xb6>
 8009fc6:	f04f 0900 	mov.w	r9, #0
 8009fca:	f104 0a1a 	add.w	sl, r4, #26
 8009fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd0:	425b      	negs	r3, r3
 8009fd2:	454b      	cmp	r3, r9
 8009fd4:	dc01      	bgt.n	8009fda <_printf_float+0x2b2>
 8009fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd8:	e794      	b.n	8009f04 <_printf_float+0x1dc>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4652      	mov	r2, sl
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b8      	blx	r7
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	f43f aefa 	beq.w	8009dde <_printf_float+0xb6>
 8009fea:	f109 0901 	add.w	r9, r9, #1
 8009fee:	e7ee      	b.n	8009fce <_printf_float+0x2a6>
 8009ff0:	7fefffff 	.word	0x7fefffff
 8009ff4:	0800ebe8 	.word	0x0800ebe8
 8009ff8:	0800ebec 	.word	0x0800ebec
 8009ffc:	0800ebf4 	.word	0x0800ebf4
 800a000:	0800ebf0 	.word	0x0800ebf0
 800a004:	0800ebf8 	.word	0x0800ebf8
 800a008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a00c:	429a      	cmp	r2, r3
 800a00e:	bfa8      	it	ge
 800a010:	461a      	movge	r2, r3
 800a012:	2a00      	cmp	r2, #0
 800a014:	4691      	mov	r9, r2
 800a016:	dc37      	bgt.n	800a088 <_printf_float+0x360>
 800a018:	f04f 0b00 	mov.w	fp, #0
 800a01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a020:	f104 021a 	add.w	r2, r4, #26
 800a024:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a028:	ebaa 0309 	sub.w	r3, sl, r9
 800a02c:	455b      	cmp	r3, fp
 800a02e:	dc33      	bgt.n	800a098 <_printf_float+0x370>
 800a030:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a034:	429a      	cmp	r2, r3
 800a036:	db3b      	blt.n	800a0b0 <_printf_float+0x388>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	07da      	lsls	r2, r3, #31
 800a03c:	d438      	bmi.n	800a0b0 <_printf_float+0x388>
 800a03e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a040:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a042:	eba2 030a 	sub.w	r3, r2, sl
 800a046:	eba2 0901 	sub.w	r9, r2, r1
 800a04a:	4599      	cmp	r9, r3
 800a04c:	bfa8      	it	ge
 800a04e:	4699      	movge	r9, r3
 800a050:	f1b9 0f00 	cmp.w	r9, #0
 800a054:	dc34      	bgt.n	800a0c0 <_printf_float+0x398>
 800a056:	f04f 0800 	mov.w	r8, #0
 800a05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a05e:	f104 0a1a 	add.w	sl, r4, #26
 800a062:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a066:	1a9b      	subs	r3, r3, r2
 800a068:	eba3 0309 	sub.w	r3, r3, r9
 800a06c:	4543      	cmp	r3, r8
 800a06e:	f77f af7b 	ble.w	8009f68 <_printf_float+0x240>
 800a072:	2301      	movs	r3, #1
 800a074:	4652      	mov	r2, sl
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f aeae 	beq.w	8009dde <_printf_float+0xb6>
 800a082:	f108 0801 	add.w	r8, r8, #1
 800a086:	e7ec      	b.n	800a062 <_printf_float+0x33a>
 800a088:	4613      	mov	r3, r2
 800a08a:	4631      	mov	r1, r6
 800a08c:	4642      	mov	r2, r8
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	d1c0      	bne.n	800a018 <_printf_float+0x2f0>
 800a096:	e6a2      	b.n	8009dde <_printf_float+0xb6>
 800a098:	2301      	movs	r3, #1
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f43f ae9b 	beq.w	8009dde <_printf_float+0xb6>
 800a0a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0aa:	f10b 0b01 	add.w	fp, fp, #1
 800a0ae:	e7b9      	b.n	800a024 <_printf_float+0x2fc>
 800a0b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d1bf      	bne.n	800a03e <_printf_float+0x316>
 800a0be:	e68e      	b.n	8009dde <_printf_float+0xb6>
 800a0c0:	464b      	mov	r3, r9
 800a0c2:	eb08 020a 	add.w	r2, r8, sl
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d1c2      	bne.n	800a056 <_printf_float+0x32e>
 800a0d0:	e685      	b.n	8009dde <_printf_float+0xb6>
 800a0d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0d4:	2a01      	cmp	r2, #1
 800a0d6:	dc01      	bgt.n	800a0dc <_printf_float+0x3b4>
 800a0d8:	07db      	lsls	r3, r3, #31
 800a0da:	d537      	bpl.n	800a14c <_printf_float+0x424>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4642      	mov	r2, r8
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	47b8      	blx	r7
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	f43f ae79 	beq.w	8009dde <_printf_float+0xb6>
 800a0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	47b8      	blx	r7
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	f43f ae71 	beq.w	8009dde <_printf_float+0xb6>
 800a0fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a100:	2200      	movs	r2, #0
 800a102:	2300      	movs	r3, #0
 800a104:	f7f6 fcc8 	bl	8000a98 <__aeabi_dcmpeq>
 800a108:	b9d8      	cbnz	r0, 800a142 <_printf_float+0x41a>
 800a10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a10c:	f108 0201 	add.w	r2, r8, #1
 800a110:	3b01      	subs	r3, #1
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	d10e      	bne.n	800a13a <_printf_float+0x412>
 800a11c:	e65f      	b.n	8009dde <_printf_float+0xb6>
 800a11e:	2301      	movs	r3, #1
 800a120:	464a      	mov	r2, r9
 800a122:	4631      	mov	r1, r6
 800a124:	4628      	mov	r0, r5
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f ae58 	beq.w	8009dde <_printf_float+0xb6>
 800a12e:	f108 0801 	add.w	r8, r8, #1
 800a132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a134:	3b01      	subs	r3, #1
 800a136:	4543      	cmp	r3, r8
 800a138:	dcf1      	bgt.n	800a11e <_printf_float+0x3f6>
 800a13a:	4653      	mov	r3, sl
 800a13c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a140:	e6e1      	b.n	8009f06 <_printf_float+0x1de>
 800a142:	f04f 0800 	mov.w	r8, #0
 800a146:	f104 091a 	add.w	r9, r4, #26
 800a14a:	e7f2      	b.n	800a132 <_printf_float+0x40a>
 800a14c:	2301      	movs	r3, #1
 800a14e:	4642      	mov	r2, r8
 800a150:	e7df      	b.n	800a112 <_printf_float+0x3ea>
 800a152:	2301      	movs	r3, #1
 800a154:	464a      	mov	r2, r9
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f ae3e 	beq.w	8009dde <_printf_float+0xb6>
 800a162:	f108 0801 	add.w	r8, r8, #1
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a16a:	1a5b      	subs	r3, r3, r1
 800a16c:	4543      	cmp	r3, r8
 800a16e:	dcf0      	bgt.n	800a152 <_printf_float+0x42a>
 800a170:	e6fe      	b.n	8009f70 <_printf_float+0x248>
 800a172:	f04f 0800 	mov.w	r8, #0
 800a176:	f104 0919 	add.w	r9, r4, #25
 800a17a:	e7f4      	b.n	800a166 <_printf_float+0x43e>

0800a17c <_printf_common>:
 800a17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	4616      	mov	r6, r2
 800a182:	4699      	mov	r9, r3
 800a184:	688a      	ldr	r2, [r1, #8]
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a18c:	4293      	cmp	r3, r2
 800a18e:	bfb8      	it	lt
 800a190:	4613      	movlt	r3, r2
 800a192:	6033      	str	r3, [r6, #0]
 800a194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a198:	4607      	mov	r7, r0
 800a19a:	460c      	mov	r4, r1
 800a19c:	b10a      	cbz	r2, 800a1a2 <_printf_common+0x26>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	6033      	str	r3, [r6, #0]
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	0699      	lsls	r1, r3, #26
 800a1a6:	bf42      	ittt	mi
 800a1a8:	6833      	ldrmi	r3, [r6, #0]
 800a1aa:	3302      	addmi	r3, #2
 800a1ac:	6033      	strmi	r3, [r6, #0]
 800a1ae:	6825      	ldr	r5, [r4, #0]
 800a1b0:	f015 0506 	ands.w	r5, r5, #6
 800a1b4:	d106      	bne.n	800a1c4 <_printf_common+0x48>
 800a1b6:	f104 0a19 	add.w	sl, r4, #25
 800a1ba:	68e3      	ldr	r3, [r4, #12]
 800a1bc:	6832      	ldr	r2, [r6, #0]
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	dc26      	bgt.n	800a212 <_printf_common+0x96>
 800a1c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c8:	1e13      	subs	r3, r2, #0
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	bf18      	it	ne
 800a1ce:	2301      	movne	r3, #1
 800a1d0:	0692      	lsls	r2, r2, #26
 800a1d2:	d42b      	bmi.n	800a22c <_printf_common+0xb0>
 800a1d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c0      	blx	r8
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d01e      	beq.n	800a220 <_printf_common+0xa4>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	68e5      	ldr	r5, [r4, #12]
 800a1e6:	6832      	ldr	r2, [r6, #0]
 800a1e8:	f003 0306 	and.w	r3, r3, #6
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	bf08      	it	eq
 800a1f0:	1aad      	subeq	r5, r5, r2
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	6922      	ldr	r2, [r4, #16]
 800a1f6:	bf0c      	ite	eq
 800a1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1fc:	2500      	movne	r5, #0
 800a1fe:	4293      	cmp	r3, r2
 800a200:	bfc4      	itt	gt
 800a202:	1a9b      	subgt	r3, r3, r2
 800a204:	18ed      	addgt	r5, r5, r3
 800a206:	2600      	movs	r6, #0
 800a208:	341a      	adds	r4, #26
 800a20a:	42b5      	cmp	r5, r6
 800a20c:	d11a      	bne.n	800a244 <_printf_common+0xc8>
 800a20e:	2000      	movs	r0, #0
 800a210:	e008      	b.n	800a224 <_printf_common+0xa8>
 800a212:	2301      	movs	r3, #1
 800a214:	4652      	mov	r2, sl
 800a216:	4649      	mov	r1, r9
 800a218:	4638      	mov	r0, r7
 800a21a:	47c0      	blx	r8
 800a21c:	3001      	adds	r0, #1
 800a21e:	d103      	bne.n	800a228 <_printf_common+0xac>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	3501      	adds	r5, #1
 800a22a:	e7c6      	b.n	800a1ba <_printf_common+0x3e>
 800a22c:	18e1      	adds	r1, r4, r3
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	2030      	movs	r0, #48	; 0x30
 800a232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a236:	4422      	add	r2, r4
 800a238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a240:	3302      	adds	r3, #2
 800a242:	e7c7      	b.n	800a1d4 <_printf_common+0x58>
 800a244:	2301      	movs	r3, #1
 800a246:	4622      	mov	r2, r4
 800a248:	4649      	mov	r1, r9
 800a24a:	4638      	mov	r0, r7
 800a24c:	47c0      	blx	r8
 800a24e:	3001      	adds	r0, #1
 800a250:	d0e6      	beq.n	800a220 <_printf_common+0xa4>
 800a252:	3601      	adds	r6, #1
 800a254:	e7d9      	b.n	800a20a <_printf_common+0x8e>
	...

0800a258 <_printf_i>:
 800a258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a25c:	460c      	mov	r4, r1
 800a25e:	4691      	mov	r9, r2
 800a260:	7e27      	ldrb	r7, [r4, #24]
 800a262:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a264:	2f78      	cmp	r7, #120	; 0x78
 800a266:	4680      	mov	r8, r0
 800a268:	469a      	mov	sl, r3
 800a26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a26e:	d807      	bhi.n	800a280 <_printf_i+0x28>
 800a270:	2f62      	cmp	r7, #98	; 0x62
 800a272:	d80a      	bhi.n	800a28a <_printf_i+0x32>
 800a274:	2f00      	cmp	r7, #0
 800a276:	f000 80d8 	beq.w	800a42a <_printf_i+0x1d2>
 800a27a:	2f58      	cmp	r7, #88	; 0x58
 800a27c:	f000 80a3 	beq.w	800a3c6 <_printf_i+0x16e>
 800a280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a288:	e03a      	b.n	800a300 <_printf_i+0xa8>
 800a28a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28e:	2b15      	cmp	r3, #21
 800a290:	d8f6      	bhi.n	800a280 <_printf_i+0x28>
 800a292:	a001      	add	r0, pc, #4	; (adr r0, 800a298 <_printf_i+0x40>)
 800a294:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a298:	0800a2f1 	.word	0x0800a2f1
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a281 	.word	0x0800a281
 800a2a4:	0800a281 	.word	0x0800a281
 800a2a8:	0800a281 	.word	0x0800a281
 800a2ac:	0800a281 	.word	0x0800a281
 800a2b0:	0800a305 	.word	0x0800a305
 800a2b4:	0800a281 	.word	0x0800a281
 800a2b8:	0800a281 	.word	0x0800a281
 800a2bc:	0800a281 	.word	0x0800a281
 800a2c0:	0800a281 	.word	0x0800a281
 800a2c4:	0800a411 	.word	0x0800a411
 800a2c8:	0800a335 	.word	0x0800a335
 800a2cc:	0800a3f3 	.word	0x0800a3f3
 800a2d0:	0800a281 	.word	0x0800a281
 800a2d4:	0800a281 	.word	0x0800a281
 800a2d8:	0800a433 	.word	0x0800a433
 800a2dc:	0800a281 	.word	0x0800a281
 800a2e0:	0800a335 	.word	0x0800a335
 800a2e4:	0800a281 	.word	0x0800a281
 800a2e8:	0800a281 	.word	0x0800a281
 800a2ec:	0800a3fb 	.word	0x0800a3fb
 800a2f0:	680b      	ldr	r3, [r1, #0]
 800a2f2:	1d1a      	adds	r2, r3, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	600a      	str	r2, [r1, #0]
 800a2f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a300:	2301      	movs	r3, #1
 800a302:	e0a3      	b.n	800a44c <_printf_i+0x1f4>
 800a304:	6825      	ldr	r5, [r4, #0]
 800a306:	6808      	ldr	r0, [r1, #0]
 800a308:	062e      	lsls	r6, r5, #24
 800a30a:	f100 0304 	add.w	r3, r0, #4
 800a30e:	d50a      	bpl.n	800a326 <_printf_i+0xce>
 800a310:	6805      	ldr	r5, [r0, #0]
 800a312:	600b      	str	r3, [r1, #0]
 800a314:	2d00      	cmp	r5, #0
 800a316:	da03      	bge.n	800a320 <_printf_i+0xc8>
 800a318:	232d      	movs	r3, #45	; 0x2d
 800a31a:	426d      	negs	r5, r5
 800a31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a320:	485e      	ldr	r0, [pc, #376]	; (800a49c <_printf_i+0x244>)
 800a322:	230a      	movs	r3, #10
 800a324:	e019      	b.n	800a35a <_printf_i+0x102>
 800a326:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a32a:	6805      	ldr	r5, [r0, #0]
 800a32c:	600b      	str	r3, [r1, #0]
 800a32e:	bf18      	it	ne
 800a330:	b22d      	sxthne	r5, r5
 800a332:	e7ef      	b.n	800a314 <_printf_i+0xbc>
 800a334:	680b      	ldr	r3, [r1, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	1d18      	adds	r0, r3, #4
 800a33a:	6008      	str	r0, [r1, #0]
 800a33c:	0628      	lsls	r0, r5, #24
 800a33e:	d501      	bpl.n	800a344 <_printf_i+0xec>
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	e002      	b.n	800a34a <_printf_i+0xf2>
 800a344:	0669      	lsls	r1, r5, #25
 800a346:	d5fb      	bpl.n	800a340 <_printf_i+0xe8>
 800a348:	881d      	ldrh	r5, [r3, #0]
 800a34a:	4854      	ldr	r0, [pc, #336]	; (800a49c <_printf_i+0x244>)
 800a34c:	2f6f      	cmp	r7, #111	; 0x6f
 800a34e:	bf0c      	ite	eq
 800a350:	2308      	moveq	r3, #8
 800a352:	230a      	movne	r3, #10
 800a354:	2100      	movs	r1, #0
 800a356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a35a:	6866      	ldr	r6, [r4, #4]
 800a35c:	60a6      	str	r6, [r4, #8]
 800a35e:	2e00      	cmp	r6, #0
 800a360:	bfa2      	ittt	ge
 800a362:	6821      	ldrge	r1, [r4, #0]
 800a364:	f021 0104 	bicge.w	r1, r1, #4
 800a368:	6021      	strge	r1, [r4, #0]
 800a36a:	b90d      	cbnz	r5, 800a370 <_printf_i+0x118>
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	d04d      	beq.n	800a40c <_printf_i+0x1b4>
 800a370:	4616      	mov	r6, r2
 800a372:	fbb5 f1f3 	udiv	r1, r5, r3
 800a376:	fb03 5711 	mls	r7, r3, r1, r5
 800a37a:	5dc7      	ldrb	r7, [r0, r7]
 800a37c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a380:	462f      	mov	r7, r5
 800a382:	42bb      	cmp	r3, r7
 800a384:	460d      	mov	r5, r1
 800a386:	d9f4      	bls.n	800a372 <_printf_i+0x11a>
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d10b      	bne.n	800a3a4 <_printf_i+0x14c>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	07df      	lsls	r7, r3, #31
 800a390:	d508      	bpl.n	800a3a4 <_printf_i+0x14c>
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	6861      	ldr	r1, [r4, #4]
 800a396:	4299      	cmp	r1, r3
 800a398:	bfde      	ittt	le
 800a39a:	2330      	movle	r3, #48	; 0x30
 800a39c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3a4:	1b92      	subs	r2, r2, r6
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	f8cd a000 	str.w	sl, [sp]
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	aa03      	add	r2, sp, #12
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f7ff fee2 	bl	800a17c <_printf_common>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d14c      	bne.n	800a456 <_printf_i+0x1fe>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b004      	add	sp, #16
 800a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c6:	4835      	ldr	r0, [pc, #212]	; (800a49c <_printf_i+0x244>)
 800a3c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	680e      	ldr	r6, [r1, #0]
 800a3d0:	061f      	lsls	r7, r3, #24
 800a3d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3d6:	600e      	str	r6, [r1, #0]
 800a3d8:	d514      	bpl.n	800a404 <_printf_i+0x1ac>
 800a3da:	07d9      	lsls	r1, r3, #31
 800a3dc:	bf44      	itt	mi
 800a3de:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e2:	6023      	strmi	r3, [r4, #0]
 800a3e4:	b91d      	cbnz	r5, 800a3ee <_printf_i+0x196>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	f023 0320 	bic.w	r3, r3, #32
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	2310      	movs	r3, #16
 800a3f0:	e7b0      	b.n	800a354 <_printf_i+0xfc>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f043 0320 	orr.w	r3, r3, #32
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	2378      	movs	r3, #120	; 0x78
 800a3fc:	4828      	ldr	r0, [pc, #160]	; (800a4a0 <_printf_i+0x248>)
 800a3fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a402:	e7e3      	b.n	800a3cc <_printf_i+0x174>
 800a404:	065e      	lsls	r6, r3, #25
 800a406:	bf48      	it	mi
 800a408:	b2ad      	uxthmi	r5, r5
 800a40a:	e7e6      	b.n	800a3da <_printf_i+0x182>
 800a40c:	4616      	mov	r6, r2
 800a40e:	e7bb      	b.n	800a388 <_printf_i+0x130>
 800a410:	680b      	ldr	r3, [r1, #0]
 800a412:	6826      	ldr	r6, [r4, #0]
 800a414:	6960      	ldr	r0, [r4, #20]
 800a416:	1d1d      	adds	r5, r3, #4
 800a418:	600d      	str	r5, [r1, #0]
 800a41a:	0635      	lsls	r5, r6, #24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	d501      	bpl.n	800a424 <_printf_i+0x1cc>
 800a420:	6018      	str	r0, [r3, #0]
 800a422:	e002      	b.n	800a42a <_printf_i+0x1d2>
 800a424:	0671      	lsls	r1, r6, #25
 800a426:	d5fb      	bpl.n	800a420 <_printf_i+0x1c8>
 800a428:	8018      	strh	r0, [r3, #0]
 800a42a:	2300      	movs	r3, #0
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	4616      	mov	r6, r2
 800a430:	e7ba      	b.n	800a3a8 <_printf_i+0x150>
 800a432:	680b      	ldr	r3, [r1, #0]
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	600a      	str	r2, [r1, #0]
 800a438:	681e      	ldr	r6, [r3, #0]
 800a43a:	6862      	ldr	r2, [r4, #4]
 800a43c:	2100      	movs	r1, #0
 800a43e:	4630      	mov	r0, r6
 800a440:	f7f5 feb6 	bl	80001b0 <memchr>
 800a444:	b108      	cbz	r0, 800a44a <_printf_i+0x1f2>
 800a446:	1b80      	subs	r0, r0, r6
 800a448:	6060      	str	r0, [r4, #4]
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	2300      	movs	r3, #0
 800a450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a454:	e7a8      	b.n	800a3a8 <_printf_i+0x150>
 800a456:	6923      	ldr	r3, [r4, #16]
 800a458:	4632      	mov	r2, r6
 800a45a:	4649      	mov	r1, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	47d0      	blx	sl
 800a460:	3001      	adds	r0, #1
 800a462:	d0ab      	beq.n	800a3bc <_printf_i+0x164>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	079b      	lsls	r3, r3, #30
 800a468:	d413      	bmi.n	800a492 <_printf_i+0x23a>
 800a46a:	68e0      	ldr	r0, [r4, #12]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	4298      	cmp	r0, r3
 800a470:	bfb8      	it	lt
 800a472:	4618      	movlt	r0, r3
 800a474:	e7a4      	b.n	800a3c0 <_printf_i+0x168>
 800a476:	2301      	movs	r3, #1
 800a478:	4632      	mov	r2, r6
 800a47a:	4649      	mov	r1, r9
 800a47c:	4640      	mov	r0, r8
 800a47e:	47d0      	blx	sl
 800a480:	3001      	adds	r0, #1
 800a482:	d09b      	beq.n	800a3bc <_printf_i+0x164>
 800a484:	3501      	adds	r5, #1
 800a486:	68e3      	ldr	r3, [r4, #12]
 800a488:	9903      	ldr	r1, [sp, #12]
 800a48a:	1a5b      	subs	r3, r3, r1
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	dcf2      	bgt.n	800a476 <_printf_i+0x21e>
 800a490:	e7eb      	b.n	800a46a <_printf_i+0x212>
 800a492:	2500      	movs	r5, #0
 800a494:	f104 0619 	add.w	r6, r4, #25
 800a498:	e7f5      	b.n	800a486 <_printf_i+0x22e>
 800a49a:	bf00      	nop
 800a49c:	0800ebfa 	.word	0x0800ebfa
 800a4a0:	0800ec0b 	.word	0x0800ec0b

0800a4a4 <_perror_r>:
 800a4a4:	6983      	ldr	r3, [r0, #24]
 800a4a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a8:	68c4      	ldr	r4, [r0, #12]
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	460e      	mov	r6, r1
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <_perror_r+0x10>
 800a4b0:	f002 faac 	bl	800ca0c <__sinit>
 800a4b4:	4b43      	ldr	r3, [pc, #268]	; (800a5c4 <_perror_r+0x120>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	d132      	bne.n	800a520 <_perror_r+0x7c>
 800a4ba:	686c      	ldr	r4, [r5, #4]
 800a4bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4be:	07d8      	lsls	r0, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_perror_r+0x2a>
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	0599      	lsls	r1, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_perror_r+0x2a>
 800a4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ca:	f002 fea4 	bl	800d216 <__retarget_lock_acquire_recursive>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f002 f9c9 	bl	800c868 <_fflush_r>
 800a4d6:	bb6e      	cbnz	r6, 800a534 <_perror_r+0x90>
 800a4d8:	6829      	ldr	r1, [r5, #0]
 800a4da:	ab01      	add	r3, sp, #4
 800a4dc:	2201      	movs	r2, #1
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f000 f940 	bl	800a764 <_strerror_r>
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d14f      	bne.n	800a58a <_perror_r+0xe6>
 800a4ea:	4837      	ldr	r0, [pc, #220]	; (800a5c8 <_perror_r+0x124>)
 800a4ec:	4f36      	ldr	r7, [pc, #216]	; (800a5c8 <_perror_r+0x124>)
 800a4ee:	f7f5 fe51 	bl	8000194 <strlen>
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	b156      	cbz	r6, 800a50c <_perror_r+0x68>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f002 f9f2 	bl	800c8e0 <fileno>
 800a4fc:	4633      	mov	r3, r6
 800a4fe:	4601      	mov	r1, r0
 800a500:	463a      	mov	r2, r7
 800a502:	4628      	mov	r0, r5
 800a504:	f001 fa30 	bl	800b968 <_write_r>
 800a508:	2800      	cmp	r0, #0
 800a50a:	da51      	bge.n	800a5b0 <_perror_r+0x10c>
 800a50c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a510:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a516:	07d2      	lsls	r2, r2, #31
 800a518:	81a3      	strh	r3, [r4, #12]
 800a51a:	d54c      	bpl.n	800a5b6 <_perror_r+0x112>
 800a51c:	b003      	add	sp, #12
 800a51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a520:	4b2a      	ldr	r3, [pc, #168]	; (800a5cc <_perror_r+0x128>)
 800a522:	429c      	cmp	r4, r3
 800a524:	d101      	bne.n	800a52a <_perror_r+0x86>
 800a526:	68ac      	ldr	r4, [r5, #8]
 800a528:	e7c8      	b.n	800a4bc <_perror_r+0x18>
 800a52a:	4b29      	ldr	r3, [pc, #164]	; (800a5d0 <_perror_r+0x12c>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	bf08      	it	eq
 800a530:	68ec      	ldreq	r4, [r5, #12]
 800a532:	e7c3      	b.n	800a4bc <_perror_r+0x18>
 800a534:	7833      	ldrb	r3, [r6, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0ce      	beq.n	800a4d8 <_perror_r+0x34>
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7f5 fe2a 	bl	8000194 <strlen>
 800a540:	4607      	mov	r7, r0
 800a542:	b157      	cbz	r7, 800a55a <_perror_r+0xb6>
 800a544:	4620      	mov	r0, r4
 800a546:	f002 f9cb 	bl	800c8e0 <fileno>
 800a54a:	463b      	mov	r3, r7
 800a54c:	4601      	mov	r1, r0
 800a54e:	4632      	mov	r2, r6
 800a550:	4628      	mov	r0, r5
 800a552:	f001 fa09 	bl	800b968 <_write_r>
 800a556:	2800      	cmp	r0, #0
 800a558:	da14      	bge.n	800a584 <_perror_r+0xe0>
 800a55a:	481e      	ldr	r0, [pc, #120]	; (800a5d4 <_perror_r+0x130>)
 800a55c:	4f1d      	ldr	r7, [pc, #116]	; (800a5d4 <_perror_r+0x130>)
 800a55e:	f7f5 fe19 	bl	8000194 <strlen>
 800a562:	4606      	mov	r6, r0
 800a564:	2e00      	cmp	r6, #0
 800a566:	d0b7      	beq.n	800a4d8 <_perror_r+0x34>
 800a568:	4620      	mov	r0, r4
 800a56a:	f002 f9b9 	bl	800c8e0 <fileno>
 800a56e:	4633      	mov	r3, r6
 800a570:	4601      	mov	r1, r0
 800a572:	463a      	mov	r2, r7
 800a574:	4628      	mov	r0, r5
 800a576:	f001 f9f7 	bl	800b968 <_write_r>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	dbac      	blt.n	800a4d8 <_perror_r+0x34>
 800a57e:	1a36      	subs	r6, r6, r0
 800a580:	4407      	add	r7, r0
 800a582:	e7ef      	b.n	800a564 <_perror_r+0xc0>
 800a584:	1a3f      	subs	r7, r7, r0
 800a586:	4406      	add	r6, r0
 800a588:	e7db      	b.n	800a542 <_perror_r+0x9e>
 800a58a:	f7f5 fe03 	bl	8000194 <strlen>
 800a58e:	4606      	mov	r6, r0
 800a590:	2e00      	cmp	r6, #0
 800a592:	d0aa      	beq.n	800a4ea <_perror_r+0x46>
 800a594:	4620      	mov	r0, r4
 800a596:	f002 f9a3 	bl	800c8e0 <fileno>
 800a59a:	4633      	mov	r3, r6
 800a59c:	4601      	mov	r1, r0
 800a59e:	463a      	mov	r2, r7
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f001 f9e1 	bl	800b968 <_write_r>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	db9f      	blt.n	800a4ea <_perror_r+0x46>
 800a5aa:	1a36      	subs	r6, r6, r0
 800a5ac:	4407      	add	r7, r0
 800a5ae:	e7ef      	b.n	800a590 <_perror_r+0xec>
 800a5b0:	1a36      	subs	r6, r6, r0
 800a5b2:	4407      	add	r7, r0
 800a5b4:	e79e      	b.n	800a4f4 <_perror_r+0x50>
 800a5b6:	059b      	lsls	r3, r3, #22
 800a5b8:	d4b0      	bmi.n	800a51c <_perror_r+0x78>
 800a5ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5bc:	f002 fe2c 	bl	800d218 <__retarget_lock_release_recursive>
 800a5c0:	e7ac      	b.n	800a51c <_perror_r+0x78>
 800a5c2:	bf00      	nop
 800a5c4:	0800f4c0 	.word	0x0800f4c0
 800a5c8:	0800f727 	.word	0x0800f727
 800a5cc:	0800f4e0 	.word	0x0800f4e0
 800a5d0:	0800f4a0 	.word	0x0800f4a0
 800a5d4:	0800f6f7 	.word	0x0800f6f7

0800a5d8 <perror>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <perror+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f7ff bf61 	b.w	800a4a4 <_perror_r>
 800a5e2:	bf00      	nop
 800a5e4:	20000010 	.word	0x20000010

0800a5e8 <iprintf>:
 800a5e8:	b40f      	push	{r0, r1, r2, r3}
 800a5ea:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <iprintf+0x2c>)
 800a5ec:	b513      	push	{r0, r1, r4, lr}
 800a5ee:	681c      	ldr	r4, [r3, #0]
 800a5f0:	b124      	cbz	r4, 800a5fc <iprintf+0x14>
 800a5f2:	69a3      	ldr	r3, [r4, #24]
 800a5f4:	b913      	cbnz	r3, 800a5fc <iprintf+0x14>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f002 fa08 	bl	800ca0c <__sinit>
 800a5fc:	ab05      	add	r3, sp, #20
 800a5fe:	9a04      	ldr	r2, [sp, #16]
 800a600:	68a1      	ldr	r1, [r4, #8]
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	4620      	mov	r0, r4
 800a606:	f003 fcd1 	bl	800dfac <_vfiprintf_r>
 800a60a:	b002      	add	sp, #8
 800a60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a610:	b004      	add	sp, #16
 800a612:	4770      	bx	lr
 800a614:	20000010 	.word	0x20000010

0800a618 <_puts_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	460e      	mov	r6, r1
 800a61c:	4605      	mov	r5, r0
 800a61e:	b118      	cbz	r0, 800a628 <_puts_r+0x10>
 800a620:	6983      	ldr	r3, [r0, #24]
 800a622:	b90b      	cbnz	r3, 800a628 <_puts_r+0x10>
 800a624:	f002 f9f2 	bl	800ca0c <__sinit>
 800a628:	69ab      	ldr	r3, [r5, #24]
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	b913      	cbnz	r3, 800a634 <_puts_r+0x1c>
 800a62e:	4628      	mov	r0, r5
 800a630:	f002 f9ec 	bl	800ca0c <__sinit>
 800a634:	4b2c      	ldr	r3, [pc, #176]	; (800a6e8 <_puts_r+0xd0>)
 800a636:	429c      	cmp	r4, r3
 800a638:	d120      	bne.n	800a67c <_puts_r+0x64>
 800a63a:	686c      	ldr	r4, [r5, #4]
 800a63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d405      	bmi.n	800a64e <_puts_r+0x36>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	0598      	lsls	r0, r3, #22
 800a646:	d402      	bmi.n	800a64e <_puts_r+0x36>
 800a648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64a:	f002 fde4 	bl	800d216 <__retarget_lock_acquire_recursive>
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	0719      	lsls	r1, r3, #28
 800a652:	d51d      	bpl.n	800a690 <_puts_r+0x78>
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	b1db      	cbz	r3, 800a690 <_puts_r+0x78>
 800a658:	3e01      	subs	r6, #1
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a660:	3b01      	subs	r3, #1
 800a662:	60a3      	str	r3, [r4, #8]
 800a664:	bb39      	cbnz	r1, 800a6b6 <_puts_r+0x9e>
 800a666:	2b00      	cmp	r3, #0
 800a668:	da38      	bge.n	800a6dc <_puts_r+0xc4>
 800a66a:	4622      	mov	r2, r4
 800a66c:	210a      	movs	r1, #10
 800a66e:	4628      	mov	r0, r5
 800a670:	f001 f928 	bl	800b8c4 <__swbuf_r>
 800a674:	3001      	adds	r0, #1
 800a676:	d011      	beq.n	800a69c <_puts_r+0x84>
 800a678:	250a      	movs	r5, #10
 800a67a:	e011      	b.n	800a6a0 <_puts_r+0x88>
 800a67c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <_puts_r+0xd4>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	d101      	bne.n	800a686 <_puts_r+0x6e>
 800a682:	68ac      	ldr	r4, [r5, #8]
 800a684:	e7da      	b.n	800a63c <_puts_r+0x24>
 800a686:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <_puts_r+0xd8>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	bf08      	it	eq
 800a68c:	68ec      	ldreq	r4, [r5, #12]
 800a68e:	e7d5      	b.n	800a63c <_puts_r+0x24>
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f001 f97a 	bl	800b98c <__swsetup_r>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0dd      	beq.n	800a658 <_puts_r+0x40>
 800a69c:	f04f 35ff 	mov.w	r5, #4294967295
 800a6a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6a2:	07da      	lsls	r2, r3, #31
 800a6a4:	d405      	bmi.n	800a6b2 <_puts_r+0x9a>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	059b      	lsls	r3, r3, #22
 800a6aa:	d402      	bmi.n	800a6b2 <_puts_r+0x9a>
 800a6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ae:	f002 fdb3 	bl	800d218 <__retarget_lock_release_recursive>
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	da04      	bge.n	800a6c4 <_puts_r+0xac>
 800a6ba:	69a2      	ldr	r2, [r4, #24]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	dc06      	bgt.n	800a6ce <_puts_r+0xb6>
 800a6c0:	290a      	cmp	r1, #10
 800a6c2:	d004      	beq.n	800a6ce <_puts_r+0xb6>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	6022      	str	r2, [r4, #0]
 800a6ca:	7019      	strb	r1, [r3, #0]
 800a6cc:	e7c5      	b.n	800a65a <_puts_r+0x42>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f001 f8f7 	bl	800b8c4 <__swbuf_r>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d1bf      	bne.n	800a65a <_puts_r+0x42>
 800a6da:	e7df      	b.n	800a69c <_puts_r+0x84>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	250a      	movs	r5, #10
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	701d      	strb	r5, [r3, #0]
 800a6e6:	e7db      	b.n	800a6a0 <_puts_r+0x88>
 800a6e8:	0800f4c0 	.word	0x0800f4c0
 800a6ec:	0800f4e0 	.word	0x0800f4e0
 800a6f0:	0800f4a0 	.word	0x0800f4a0

0800a6f4 <puts>:
 800a6f4:	4b02      	ldr	r3, [pc, #8]	; (800a700 <puts+0xc>)
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f7ff bf8d 	b.w	800a618 <_puts_r>
 800a6fe:	bf00      	nop
 800a700:	20000010 	.word	0x20000010

0800a704 <_sbrk_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d06      	ldr	r5, [pc, #24]	; (800a720 <_sbrk_r+0x1c>)
 800a708:	2300      	movs	r3, #0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f7 fd26 	bl	8002160 <_sbrk>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_sbrk_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_sbrk_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	200005fc 	.word	0x200005fc

0800a724 <siprintf>:
 800a724:	b40e      	push	{r1, r2, r3}
 800a726:	b500      	push	{lr}
 800a728:	b09c      	sub	sp, #112	; 0x70
 800a72a:	ab1d      	add	r3, sp, #116	; 0x74
 800a72c:	9002      	str	r0, [sp, #8]
 800a72e:	9006      	str	r0, [sp, #24]
 800a730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a734:	4809      	ldr	r0, [pc, #36]	; (800a75c <siprintf+0x38>)
 800a736:	9107      	str	r1, [sp, #28]
 800a738:	9104      	str	r1, [sp, #16]
 800a73a:	4909      	ldr	r1, [pc, #36]	; (800a760 <siprintf+0x3c>)
 800a73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a740:	9105      	str	r1, [sp, #20]
 800a742:	6800      	ldr	r0, [r0, #0]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	a902      	add	r1, sp, #8
 800a748:	f003 fb08 	bl	800dd5c <_svfiprintf_r>
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	b01c      	add	sp, #112	; 0x70
 800a754:	f85d eb04 	ldr.w	lr, [sp], #4
 800a758:	b003      	add	sp, #12
 800a75a:	4770      	bx	lr
 800a75c:	20000010 	.word	0x20000010
 800a760:	ffff0208 	.word	0xffff0208

0800a764 <_strerror_r>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	288e      	cmp	r0, #142	; 0x8e
 800a76e:	f200 812f 	bhi.w	800a9d0 <_strerror_r+0x26c>
 800a772:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a776:	0138      	.short	0x0138
 800a778:	0091008f 	.word	0x0091008f
 800a77c:	00950093 	.word	0x00950093
 800a780:	00990097 	.word	0x00990097
 800a784:	009d009b 	.word	0x009d009b
 800a788:	00a300a1 	.word	0x00a300a1
 800a78c:	00a900a7 	.word	0x00a900a7
 800a790:	00ad00ab 	.word	0x00ad00ab
 800a794:	00af012d 	.word	0x00af012d
 800a798:	00b300b1 	.word	0x00b300b1
 800a79c:	00b700b5 	.word	0x00b700b5
 800a7a0:	00bf00bd 	.word	0x00bf00bd
 800a7a4:	00c700c5 	.word	0x00c700c5
 800a7a8:	00cb00c9 	.word	0x00cb00c9
 800a7ac:	00d100cd 	.word	0x00d100cd
 800a7b0:	00d700d5 	.word	0x00d700d5
 800a7b4:	00db00d9 	.word	0x00db00d9
 800a7b8:	00df00dd 	.word	0x00df00dd
 800a7bc:	00e300e1 	.word	0x00e300e1
 800a7c0:	012d012d 	.word	0x012d012d
 800a7c4:	012d012d 	.word	0x012d012d
 800a7c8:	012d012d 	.word	0x012d012d
 800a7cc:	012d012d 	.word	0x012d012d
 800a7d0:	00eb00e7 	.word	0x00eb00e7
 800a7d4:	012d012d 	.word	0x012d012d
 800a7d8:	012d012d 	.word	0x012d012d
 800a7dc:	012d012d 	.word	0x012d012d
 800a7e0:	012d012d 	.word	0x012d012d
 800a7e4:	012d012d 	.word	0x012d012d
 800a7e8:	012d012d 	.word	0x012d012d
 800a7ec:	00ed012d 	.word	0x00ed012d
 800a7f0:	00ef0107 	.word	0x00ef0107
 800a7f4:	012d00f1 	.word	0x012d00f1
 800a7f8:	012d012d 	.word	0x012d012d
 800a7fc:	012d00f3 	.word	0x012d00f3
 800a800:	012d012d 	.word	0x012d012d
 800a804:	012d00f5 	.word	0x012d00f5
 800a808:	00f9012d 	.word	0x00f9012d
 800a80c:	012d012d 	.word	0x012d012d
 800a810:	012d00fb 	.word	0x012d00fb
 800a814:	012d012d 	.word	0x012d012d
 800a818:	012d012d 	.word	0x012d012d
 800a81c:	012d012d 	.word	0x012d012d
 800a820:	012d012d 	.word	0x012d012d
 800a824:	00fd012d 	.word	0x00fd012d
 800a828:	00ff012d 	.word	0x00ff012d
 800a82c:	01030101 	.word	0x01030101
 800a830:	012d012d 	.word	0x012d012d
 800a834:	012d0125 	.word	0x012d0125
 800a838:	012d012d 	.word	0x012d012d
 800a83c:	012d012d 	.word	0x012d012d
 800a840:	012d012d 	.word	0x012d012d
 800a844:	0113012d 	.word	0x0113012d
 800a848:	01090105 	.word	0x01090105
 800a84c:	010d010b 	.word	0x010d010b
 800a850:	012d010f 	.word	0x012d010f
 800a854:	01150111 	.word	0x01150111
 800a858:	00e90119 	.word	0x00e90119
 800a85c:	012b00c1 	.word	0x012b00c1
 800a860:	00cf00b9 	.word	0x00cf00b9
 800a864:	009f00bb 	.word	0x009f00bb
 800a868:	012900a5 	.word	0x012900a5
 800a86c:	012d00f7 	.word	0x012d00f7
 800a870:	00c30117 	.word	0x00c30117
 800a874:	011b011d 	.word	0x011b011d
 800a878:	012d012d 	.word	0x012d012d
 800a87c:	012d012d 	.word	0x012d012d
 800a880:	00d3012d 	.word	0x00d3012d
 800a884:	012d012d 	.word	0x012d012d
 800a888:	00e5012d 	.word	0x00e5012d
 800a88c:	011f0127 	.word	0x011f0127
 800a890:	01230121 	.word	0x01230121
 800a894:	4855      	ldr	r0, [pc, #340]	; (800a9ec <_strerror_r+0x288>)
 800a896:	bd10      	pop	{r4, pc}
 800a898:	4855      	ldr	r0, [pc, #340]	; (800a9f0 <_strerror_r+0x28c>)
 800a89a:	e7fc      	b.n	800a896 <_strerror_r+0x132>
 800a89c:	4855      	ldr	r0, [pc, #340]	; (800a9f4 <_strerror_r+0x290>)
 800a89e:	e7fa      	b.n	800a896 <_strerror_r+0x132>
 800a8a0:	4855      	ldr	r0, [pc, #340]	; (800a9f8 <_strerror_r+0x294>)
 800a8a2:	e7f8      	b.n	800a896 <_strerror_r+0x132>
 800a8a4:	4855      	ldr	r0, [pc, #340]	; (800a9fc <_strerror_r+0x298>)
 800a8a6:	e7f6      	b.n	800a896 <_strerror_r+0x132>
 800a8a8:	4855      	ldr	r0, [pc, #340]	; (800aa00 <_strerror_r+0x29c>)
 800a8aa:	e7f4      	b.n	800a896 <_strerror_r+0x132>
 800a8ac:	4855      	ldr	r0, [pc, #340]	; (800aa04 <_strerror_r+0x2a0>)
 800a8ae:	e7f2      	b.n	800a896 <_strerror_r+0x132>
 800a8b0:	4855      	ldr	r0, [pc, #340]	; (800aa08 <_strerror_r+0x2a4>)
 800a8b2:	e7f0      	b.n	800a896 <_strerror_r+0x132>
 800a8b4:	4855      	ldr	r0, [pc, #340]	; (800aa0c <_strerror_r+0x2a8>)
 800a8b6:	e7ee      	b.n	800a896 <_strerror_r+0x132>
 800a8b8:	4855      	ldr	r0, [pc, #340]	; (800aa10 <_strerror_r+0x2ac>)
 800a8ba:	e7ec      	b.n	800a896 <_strerror_r+0x132>
 800a8bc:	4855      	ldr	r0, [pc, #340]	; (800aa14 <_strerror_r+0x2b0>)
 800a8be:	e7ea      	b.n	800a896 <_strerror_r+0x132>
 800a8c0:	4855      	ldr	r0, [pc, #340]	; (800aa18 <_strerror_r+0x2b4>)
 800a8c2:	e7e8      	b.n	800a896 <_strerror_r+0x132>
 800a8c4:	4855      	ldr	r0, [pc, #340]	; (800aa1c <_strerror_r+0x2b8>)
 800a8c6:	e7e6      	b.n	800a896 <_strerror_r+0x132>
 800a8c8:	4855      	ldr	r0, [pc, #340]	; (800aa20 <_strerror_r+0x2bc>)
 800a8ca:	e7e4      	b.n	800a896 <_strerror_r+0x132>
 800a8cc:	4855      	ldr	r0, [pc, #340]	; (800aa24 <_strerror_r+0x2c0>)
 800a8ce:	e7e2      	b.n	800a896 <_strerror_r+0x132>
 800a8d0:	4855      	ldr	r0, [pc, #340]	; (800aa28 <_strerror_r+0x2c4>)
 800a8d2:	e7e0      	b.n	800a896 <_strerror_r+0x132>
 800a8d4:	4855      	ldr	r0, [pc, #340]	; (800aa2c <_strerror_r+0x2c8>)
 800a8d6:	e7de      	b.n	800a896 <_strerror_r+0x132>
 800a8d8:	4855      	ldr	r0, [pc, #340]	; (800aa30 <_strerror_r+0x2cc>)
 800a8da:	e7dc      	b.n	800a896 <_strerror_r+0x132>
 800a8dc:	4855      	ldr	r0, [pc, #340]	; (800aa34 <_strerror_r+0x2d0>)
 800a8de:	e7da      	b.n	800a896 <_strerror_r+0x132>
 800a8e0:	4855      	ldr	r0, [pc, #340]	; (800aa38 <_strerror_r+0x2d4>)
 800a8e2:	e7d8      	b.n	800a896 <_strerror_r+0x132>
 800a8e4:	4855      	ldr	r0, [pc, #340]	; (800aa3c <_strerror_r+0x2d8>)
 800a8e6:	e7d6      	b.n	800a896 <_strerror_r+0x132>
 800a8e8:	4855      	ldr	r0, [pc, #340]	; (800aa40 <_strerror_r+0x2dc>)
 800a8ea:	e7d4      	b.n	800a896 <_strerror_r+0x132>
 800a8ec:	4855      	ldr	r0, [pc, #340]	; (800aa44 <_strerror_r+0x2e0>)
 800a8ee:	e7d2      	b.n	800a896 <_strerror_r+0x132>
 800a8f0:	4855      	ldr	r0, [pc, #340]	; (800aa48 <_strerror_r+0x2e4>)
 800a8f2:	e7d0      	b.n	800a896 <_strerror_r+0x132>
 800a8f4:	4855      	ldr	r0, [pc, #340]	; (800aa4c <_strerror_r+0x2e8>)
 800a8f6:	e7ce      	b.n	800a896 <_strerror_r+0x132>
 800a8f8:	4855      	ldr	r0, [pc, #340]	; (800aa50 <_strerror_r+0x2ec>)
 800a8fa:	e7cc      	b.n	800a896 <_strerror_r+0x132>
 800a8fc:	4855      	ldr	r0, [pc, #340]	; (800aa54 <_strerror_r+0x2f0>)
 800a8fe:	e7ca      	b.n	800a896 <_strerror_r+0x132>
 800a900:	4855      	ldr	r0, [pc, #340]	; (800aa58 <_strerror_r+0x2f4>)
 800a902:	e7c8      	b.n	800a896 <_strerror_r+0x132>
 800a904:	4855      	ldr	r0, [pc, #340]	; (800aa5c <_strerror_r+0x2f8>)
 800a906:	e7c6      	b.n	800a896 <_strerror_r+0x132>
 800a908:	4855      	ldr	r0, [pc, #340]	; (800aa60 <_strerror_r+0x2fc>)
 800a90a:	e7c4      	b.n	800a896 <_strerror_r+0x132>
 800a90c:	4855      	ldr	r0, [pc, #340]	; (800aa64 <_strerror_r+0x300>)
 800a90e:	e7c2      	b.n	800a896 <_strerror_r+0x132>
 800a910:	4855      	ldr	r0, [pc, #340]	; (800aa68 <_strerror_r+0x304>)
 800a912:	e7c0      	b.n	800a896 <_strerror_r+0x132>
 800a914:	4855      	ldr	r0, [pc, #340]	; (800aa6c <_strerror_r+0x308>)
 800a916:	e7be      	b.n	800a896 <_strerror_r+0x132>
 800a918:	4855      	ldr	r0, [pc, #340]	; (800aa70 <_strerror_r+0x30c>)
 800a91a:	e7bc      	b.n	800a896 <_strerror_r+0x132>
 800a91c:	4855      	ldr	r0, [pc, #340]	; (800aa74 <_strerror_r+0x310>)
 800a91e:	e7ba      	b.n	800a896 <_strerror_r+0x132>
 800a920:	4855      	ldr	r0, [pc, #340]	; (800aa78 <_strerror_r+0x314>)
 800a922:	e7b8      	b.n	800a896 <_strerror_r+0x132>
 800a924:	4855      	ldr	r0, [pc, #340]	; (800aa7c <_strerror_r+0x318>)
 800a926:	e7b6      	b.n	800a896 <_strerror_r+0x132>
 800a928:	4855      	ldr	r0, [pc, #340]	; (800aa80 <_strerror_r+0x31c>)
 800a92a:	e7b4      	b.n	800a896 <_strerror_r+0x132>
 800a92c:	4855      	ldr	r0, [pc, #340]	; (800aa84 <_strerror_r+0x320>)
 800a92e:	e7b2      	b.n	800a896 <_strerror_r+0x132>
 800a930:	4855      	ldr	r0, [pc, #340]	; (800aa88 <_strerror_r+0x324>)
 800a932:	e7b0      	b.n	800a896 <_strerror_r+0x132>
 800a934:	4855      	ldr	r0, [pc, #340]	; (800aa8c <_strerror_r+0x328>)
 800a936:	e7ae      	b.n	800a896 <_strerror_r+0x132>
 800a938:	4855      	ldr	r0, [pc, #340]	; (800aa90 <_strerror_r+0x32c>)
 800a93a:	e7ac      	b.n	800a896 <_strerror_r+0x132>
 800a93c:	4855      	ldr	r0, [pc, #340]	; (800aa94 <_strerror_r+0x330>)
 800a93e:	e7aa      	b.n	800a896 <_strerror_r+0x132>
 800a940:	4855      	ldr	r0, [pc, #340]	; (800aa98 <_strerror_r+0x334>)
 800a942:	e7a8      	b.n	800a896 <_strerror_r+0x132>
 800a944:	4855      	ldr	r0, [pc, #340]	; (800aa9c <_strerror_r+0x338>)
 800a946:	e7a6      	b.n	800a896 <_strerror_r+0x132>
 800a948:	4855      	ldr	r0, [pc, #340]	; (800aaa0 <_strerror_r+0x33c>)
 800a94a:	e7a4      	b.n	800a896 <_strerror_r+0x132>
 800a94c:	4855      	ldr	r0, [pc, #340]	; (800aaa4 <_strerror_r+0x340>)
 800a94e:	e7a2      	b.n	800a896 <_strerror_r+0x132>
 800a950:	4855      	ldr	r0, [pc, #340]	; (800aaa8 <_strerror_r+0x344>)
 800a952:	e7a0      	b.n	800a896 <_strerror_r+0x132>
 800a954:	4855      	ldr	r0, [pc, #340]	; (800aaac <_strerror_r+0x348>)
 800a956:	e79e      	b.n	800a896 <_strerror_r+0x132>
 800a958:	4855      	ldr	r0, [pc, #340]	; (800aab0 <_strerror_r+0x34c>)
 800a95a:	e79c      	b.n	800a896 <_strerror_r+0x132>
 800a95c:	4855      	ldr	r0, [pc, #340]	; (800aab4 <_strerror_r+0x350>)
 800a95e:	e79a      	b.n	800a896 <_strerror_r+0x132>
 800a960:	4855      	ldr	r0, [pc, #340]	; (800aab8 <_strerror_r+0x354>)
 800a962:	e798      	b.n	800a896 <_strerror_r+0x132>
 800a964:	4855      	ldr	r0, [pc, #340]	; (800aabc <_strerror_r+0x358>)
 800a966:	e796      	b.n	800a896 <_strerror_r+0x132>
 800a968:	4855      	ldr	r0, [pc, #340]	; (800aac0 <_strerror_r+0x35c>)
 800a96a:	e794      	b.n	800a896 <_strerror_r+0x132>
 800a96c:	4855      	ldr	r0, [pc, #340]	; (800aac4 <_strerror_r+0x360>)
 800a96e:	e792      	b.n	800a896 <_strerror_r+0x132>
 800a970:	4855      	ldr	r0, [pc, #340]	; (800aac8 <_strerror_r+0x364>)
 800a972:	e790      	b.n	800a896 <_strerror_r+0x132>
 800a974:	4855      	ldr	r0, [pc, #340]	; (800aacc <_strerror_r+0x368>)
 800a976:	e78e      	b.n	800a896 <_strerror_r+0x132>
 800a978:	4855      	ldr	r0, [pc, #340]	; (800aad0 <_strerror_r+0x36c>)
 800a97a:	e78c      	b.n	800a896 <_strerror_r+0x132>
 800a97c:	4855      	ldr	r0, [pc, #340]	; (800aad4 <_strerror_r+0x370>)
 800a97e:	e78a      	b.n	800a896 <_strerror_r+0x132>
 800a980:	4855      	ldr	r0, [pc, #340]	; (800aad8 <_strerror_r+0x374>)
 800a982:	e788      	b.n	800a896 <_strerror_r+0x132>
 800a984:	4855      	ldr	r0, [pc, #340]	; (800aadc <_strerror_r+0x378>)
 800a986:	e786      	b.n	800a896 <_strerror_r+0x132>
 800a988:	4855      	ldr	r0, [pc, #340]	; (800aae0 <_strerror_r+0x37c>)
 800a98a:	e784      	b.n	800a896 <_strerror_r+0x132>
 800a98c:	4855      	ldr	r0, [pc, #340]	; (800aae4 <_strerror_r+0x380>)
 800a98e:	e782      	b.n	800a896 <_strerror_r+0x132>
 800a990:	4855      	ldr	r0, [pc, #340]	; (800aae8 <_strerror_r+0x384>)
 800a992:	e780      	b.n	800a896 <_strerror_r+0x132>
 800a994:	4855      	ldr	r0, [pc, #340]	; (800aaec <_strerror_r+0x388>)
 800a996:	e77e      	b.n	800a896 <_strerror_r+0x132>
 800a998:	4855      	ldr	r0, [pc, #340]	; (800aaf0 <_strerror_r+0x38c>)
 800a99a:	e77c      	b.n	800a896 <_strerror_r+0x132>
 800a99c:	4855      	ldr	r0, [pc, #340]	; (800aaf4 <_strerror_r+0x390>)
 800a99e:	e77a      	b.n	800a896 <_strerror_r+0x132>
 800a9a0:	4855      	ldr	r0, [pc, #340]	; (800aaf8 <_strerror_r+0x394>)
 800a9a2:	e778      	b.n	800a896 <_strerror_r+0x132>
 800a9a4:	4855      	ldr	r0, [pc, #340]	; (800aafc <_strerror_r+0x398>)
 800a9a6:	e776      	b.n	800a896 <_strerror_r+0x132>
 800a9a8:	4855      	ldr	r0, [pc, #340]	; (800ab00 <_strerror_r+0x39c>)
 800a9aa:	e774      	b.n	800a896 <_strerror_r+0x132>
 800a9ac:	4855      	ldr	r0, [pc, #340]	; (800ab04 <_strerror_r+0x3a0>)
 800a9ae:	e772      	b.n	800a896 <_strerror_r+0x132>
 800a9b0:	4855      	ldr	r0, [pc, #340]	; (800ab08 <_strerror_r+0x3a4>)
 800a9b2:	e770      	b.n	800a896 <_strerror_r+0x132>
 800a9b4:	4855      	ldr	r0, [pc, #340]	; (800ab0c <_strerror_r+0x3a8>)
 800a9b6:	e76e      	b.n	800a896 <_strerror_r+0x132>
 800a9b8:	4855      	ldr	r0, [pc, #340]	; (800ab10 <_strerror_r+0x3ac>)
 800a9ba:	e76c      	b.n	800a896 <_strerror_r+0x132>
 800a9bc:	4855      	ldr	r0, [pc, #340]	; (800ab14 <_strerror_r+0x3b0>)
 800a9be:	e76a      	b.n	800a896 <_strerror_r+0x132>
 800a9c0:	4855      	ldr	r0, [pc, #340]	; (800ab18 <_strerror_r+0x3b4>)
 800a9c2:	e768      	b.n	800a896 <_strerror_r+0x132>
 800a9c4:	4855      	ldr	r0, [pc, #340]	; (800ab1c <_strerror_r+0x3b8>)
 800a9c6:	e766      	b.n	800a896 <_strerror_r+0x132>
 800a9c8:	4855      	ldr	r0, [pc, #340]	; (800ab20 <_strerror_r+0x3bc>)
 800a9ca:	e764      	b.n	800a896 <_strerror_r+0x132>
 800a9cc:	4855      	ldr	r0, [pc, #340]	; (800ab24 <_strerror_r+0x3c0>)
 800a9ce:	e762      	b.n	800a896 <_strerror_r+0x132>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bf14      	ite	ne
 800a9d4:	461a      	movne	r2, r3
 800a9d6:	4622      	moveq	r2, r4
 800a9d8:	f000 ff72 	bl	800b8c0 <_user_strerror>
 800a9dc:	4b52      	ldr	r3, [pc, #328]	; (800ab28 <_strerror_r+0x3c4>)
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	bf08      	it	eq
 800a9e2:	4618      	moveq	r0, r3
 800a9e4:	e757      	b.n	800a896 <_strerror_r+0x132>
 800a9e6:	4851      	ldr	r0, [pc, #324]	; (800ab2c <_strerror_r+0x3c8>)
 800a9e8:	e755      	b.n	800a896 <_strerror_r+0x132>
 800a9ea:	bf00      	nop
 800a9ec:	0800ec1c 	.word	0x0800ec1c
 800a9f0:	0800ec26 	.word	0x0800ec26
 800a9f4:	0800ec40 	.word	0x0800ec40
 800a9f8:	0800ec50 	.word	0x0800ec50
 800a9fc:	0800ec68 	.word	0x0800ec68
 800aa00:	0800ec72 	.word	0x0800ec72
 800aa04:	0800ec8c 	.word	0x0800ec8c
 800aa08:	0800ec9e 	.word	0x0800ec9e
 800aa0c:	0800ecb0 	.word	0x0800ecb0
 800aa10:	0800ecc9 	.word	0x0800ecc9
 800aa14:	0800ecd9 	.word	0x0800ecd9
 800aa18:	0800ece5 	.word	0x0800ece5
 800aa1c:	0800ed02 	.word	0x0800ed02
 800aa20:	0800ed14 	.word	0x0800ed14
 800aa24:	0800ed25 	.word	0x0800ed25
 800aa28:	0800ed37 	.word	0x0800ed37
 800aa2c:	0800ed43 	.word	0x0800ed43
 800aa30:	0800ed5b 	.word	0x0800ed5b
 800aa34:	0800ed67 	.word	0x0800ed67
 800aa38:	0800ed79 	.word	0x0800ed79
 800aa3c:	0800ed88 	.word	0x0800ed88
 800aa40:	0800ed98 	.word	0x0800ed98
 800aa44:	0800eda5 	.word	0x0800eda5
 800aa48:	0800edc4 	.word	0x0800edc4
 800aa4c:	0800edd3 	.word	0x0800edd3
 800aa50:	0800ede4 	.word	0x0800ede4
 800aa54:	0800ee08 	.word	0x0800ee08
 800aa58:	0800ee26 	.word	0x0800ee26
 800aa5c:	0800ee44 	.word	0x0800ee44
 800aa60:	0800ee64 	.word	0x0800ee64
 800aa64:	0800ee7b 	.word	0x0800ee7b
 800aa68:	0800ee8a 	.word	0x0800ee8a
 800aa6c:	0800ee99 	.word	0x0800ee99
 800aa70:	0800eead 	.word	0x0800eead
 800aa74:	0800eec5 	.word	0x0800eec5
 800aa78:	0800eed3 	.word	0x0800eed3
 800aa7c:	0800eee0 	.word	0x0800eee0
 800aa80:	0800eef6 	.word	0x0800eef6
 800aa84:	0800ef05 	.word	0x0800ef05
 800aa88:	0800ef11 	.word	0x0800ef11
 800aa8c:	0800ef40 	.word	0x0800ef40
 800aa90:	0800ef51 	.word	0x0800ef51
 800aa94:	0800ef6c 	.word	0x0800ef6c
 800aa98:	0800ef7f 	.word	0x0800ef7f
 800aa9c:	0800ef95 	.word	0x0800ef95
 800aaa0:	0800ef9e 	.word	0x0800ef9e
 800aaa4:	0800efb5 	.word	0x0800efb5
 800aaa8:	0800efbd 	.word	0x0800efbd
 800aaac:	0800efca 	.word	0x0800efca
 800aab0:	0800efdf 	.word	0x0800efdf
 800aab4:	0800eff3 	.word	0x0800eff3
 800aab8:	0800f00b 	.word	0x0800f00b
 800aabc:	0800f01a 	.word	0x0800f01a
 800aac0:	0800f02b 	.word	0x0800f02b
 800aac4:	0800f03e 	.word	0x0800f03e
 800aac8:	0800f04a 	.word	0x0800f04a
 800aacc:	0800f063 	.word	0x0800f063
 800aad0:	0800f077 	.word	0x0800f077
 800aad4:	0800f092 	.word	0x0800f092
 800aad8:	0800f0aa 	.word	0x0800f0aa
 800aadc:	0800f0c4 	.word	0x0800f0c4
 800aae0:	0800f0cc 	.word	0x0800f0cc
 800aae4:	0800f0fc 	.word	0x0800f0fc
 800aae8:	0800f11b 	.word	0x0800f11b
 800aaec:	0800f13a 	.word	0x0800f13a
 800aaf0:	0800f151 	.word	0x0800f151
 800aaf4:	0800f164 	.word	0x0800f164
 800aaf8:	0800f17d 	.word	0x0800f17d
 800aafc:	0800f194 	.word	0x0800f194
 800ab00:	0800f1aa 	.word	0x0800f1aa
 800ab04:	0800f1cb 	.word	0x0800f1cb
 800ab08:	0800f1e3 	.word	0x0800f1e3
 800ab0c:	0800f1ff 	.word	0x0800f1ff
 800ab10:	0800f212 	.word	0x0800f212
 800ab14:	0800f228 	.word	0x0800f228
 800ab18:	0800f23c 	.word	0x0800f23c
 800ab1c:	0800f25e 	.word	0x0800f25e
 800ab20:	0800f284 	.word	0x0800f284
 800ab24:	0800f295 	.word	0x0800f295
 800ab28:	0800f728 	.word	0x0800f728
 800ab2c:	0800f2aa 	.word	0x0800f2aa

0800ab30 <strstr>:
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	780c      	ldrb	r4, [r1, #0]
 800ab34:	b164      	cbz	r4, 800ab50 <strstr+0x20>
 800ab36:	4603      	mov	r3, r0
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	1c5e      	adds	r6, r3, #1
 800ab3e:	b90a      	cbnz	r2, 800ab44 <strstr+0x14>
 800ab40:	4610      	mov	r0, r2
 800ab42:	e005      	b.n	800ab50 <strstr+0x20>
 800ab44:	4294      	cmp	r4, r2
 800ab46:	d108      	bne.n	800ab5a <strstr+0x2a>
 800ab48:	460d      	mov	r5, r1
 800ab4a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ab4e:	b902      	cbnz	r2, 800ab52 <strstr+0x22>
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab52:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ab56:	4297      	cmp	r7, r2
 800ab58:	d0f7      	beq.n	800ab4a <strstr+0x1a>
 800ab5a:	4633      	mov	r3, r6
 800ab5c:	e7ec      	b.n	800ab38 <strstr+0x8>

0800ab5e <sulp>:
 800ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	460f      	mov	r7, r1
 800ab64:	4690      	mov	r8, r2
 800ab66:	f002 ff47 	bl	800d9f8 <__ulp>
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	d011      	beq.n	800ab98 <sulp+0x3a>
 800ab74:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dd0b      	ble.n	800ab98 <sulp+0x3a>
 800ab80:	051b      	lsls	r3, r3, #20
 800ab82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab86:	2400      	movs	r4, #0
 800ab88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	462b      	mov	r3, r5
 800ab90:	f7f5 fd1a 	bl	80005c8 <__aeabi_dmul>
 800ab94:	4604      	mov	r4, r0
 800ab96:	460d      	mov	r5, r1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aba0 <_strtod_l>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	b0a1      	sub	sp, #132	; 0x84
 800aba6:	469b      	mov	fp, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	931c      	str	r3, [sp, #112]	; 0x70
 800abac:	4ba1      	ldr	r3, [pc, #644]	; (800ae34 <_strtod_l+0x294>)
 800abae:	9217      	str	r2, [sp, #92]	; 0x5c
 800abb0:	681f      	ldr	r7, [r3, #0]
 800abb2:	4682      	mov	sl, r0
 800abb4:	4638      	mov	r0, r7
 800abb6:	460e      	mov	r6, r1
 800abb8:	f7f5 faec 	bl	8000194 <strlen>
 800abbc:	f04f 0800 	mov.w	r8, #0
 800abc0:	4604      	mov	r4, r0
 800abc2:	f04f 0900 	mov.w	r9, #0
 800abc6:	961b      	str	r6, [sp, #108]	; 0x6c
 800abc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	2a2b      	cmp	r2, #43	; 0x2b
 800abce:	d04c      	beq.n	800ac6a <_strtod_l+0xca>
 800abd0:	d83a      	bhi.n	800ac48 <_strtod_l+0xa8>
 800abd2:	2a0d      	cmp	r2, #13
 800abd4:	d833      	bhi.n	800ac3e <_strtod_l+0x9e>
 800abd6:	2a08      	cmp	r2, #8
 800abd8:	d833      	bhi.n	800ac42 <_strtod_l+0xa2>
 800abda:	2a00      	cmp	r2, #0
 800abdc:	d03d      	beq.n	800ac5a <_strtod_l+0xba>
 800abde:	2300      	movs	r3, #0
 800abe0:	930c      	str	r3, [sp, #48]	; 0x30
 800abe2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800abe4:	782b      	ldrb	r3, [r5, #0]
 800abe6:	2b30      	cmp	r3, #48	; 0x30
 800abe8:	f040 80af 	bne.w	800ad4a <_strtod_l+0x1aa>
 800abec:	786b      	ldrb	r3, [r5, #1]
 800abee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abf2:	2b58      	cmp	r3, #88	; 0x58
 800abf4:	d16c      	bne.n	800acd0 <_strtod_l+0x130>
 800abf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	ab1c      	add	r3, sp, #112	; 0x70
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4a8e      	ldr	r2, [pc, #568]	; (800ae38 <_strtod_l+0x298>)
 800ac00:	f8cd b008 	str.w	fp, [sp, #8]
 800ac04:	ab1d      	add	r3, sp, #116	; 0x74
 800ac06:	a91b      	add	r1, sp, #108	; 0x6c
 800ac08:	4650      	mov	r0, sl
 800ac0a:	f002 f803 	bl	800cc14 <__gethex>
 800ac0e:	f010 0607 	ands.w	r6, r0, #7
 800ac12:	4604      	mov	r4, r0
 800ac14:	d005      	beq.n	800ac22 <_strtod_l+0x82>
 800ac16:	2e06      	cmp	r6, #6
 800ac18:	d129      	bne.n	800ac6e <_strtod_l+0xce>
 800ac1a:	3501      	adds	r5, #1
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	951b      	str	r5, [sp, #108]	; 0x6c
 800ac20:	930c      	str	r3, [sp, #48]	; 0x30
 800ac22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f040 8596 	bne.w	800b756 <_strtod_l+0xbb6>
 800ac2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2c:	b1d3      	cbz	r3, 800ac64 <_strtod_l+0xc4>
 800ac2e:	4642      	mov	r2, r8
 800ac30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac34:	4610      	mov	r0, r2
 800ac36:	4619      	mov	r1, r3
 800ac38:	b021      	add	sp, #132	; 0x84
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	2a20      	cmp	r2, #32
 800ac40:	d1cd      	bne.n	800abde <_strtod_l+0x3e>
 800ac42:	3301      	adds	r3, #1
 800ac44:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac46:	e7bf      	b.n	800abc8 <_strtod_l+0x28>
 800ac48:	2a2d      	cmp	r2, #45	; 0x2d
 800ac4a:	d1c8      	bne.n	800abde <_strtod_l+0x3e>
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	920c      	str	r2, [sp, #48]	; 0x30
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac54:	785b      	ldrb	r3, [r3, #1]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1c3      	bne.n	800abe2 <_strtod_l+0x42>
 800ac5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac5c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f040 8577 	bne.w	800b752 <_strtod_l+0xbb2>
 800ac64:	4642      	mov	r2, r8
 800ac66:	464b      	mov	r3, r9
 800ac68:	e7e4      	b.n	800ac34 <_strtod_l+0x94>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	e7ef      	b.n	800ac4e <_strtod_l+0xae>
 800ac6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ac70:	b13a      	cbz	r2, 800ac82 <_strtod_l+0xe2>
 800ac72:	2135      	movs	r1, #53	; 0x35
 800ac74:	a81e      	add	r0, sp, #120	; 0x78
 800ac76:	f002 ffc3 	bl	800dc00 <__copybits>
 800ac7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	f002 fb8f 	bl	800d3a0 <_Bfree>
 800ac82:	3e01      	subs	r6, #1
 800ac84:	2e05      	cmp	r6, #5
 800ac86:	d807      	bhi.n	800ac98 <_strtod_l+0xf8>
 800ac88:	e8df f006 	tbb	[pc, r6]
 800ac8c:	1d180b0e 	.word	0x1d180b0e
 800ac90:	030e      	.short	0x030e
 800ac92:	f04f 0900 	mov.w	r9, #0
 800ac96:	46c8      	mov	r8, r9
 800ac98:	0721      	lsls	r1, r4, #28
 800ac9a:	d5c2      	bpl.n	800ac22 <_strtod_l+0x82>
 800ac9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800aca0:	e7bf      	b.n	800ac22 <_strtod_l+0x82>
 800aca2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800aca6:	e7f7      	b.n	800ac98 <_strtod_l+0xf8>
 800aca8:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800acac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800acae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800acb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800acba:	e7ed      	b.n	800ac98 <_strtod_l+0xf8>
 800acbc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ae3c <_strtod_l+0x29c>
 800acc0:	f04f 0800 	mov.w	r8, #0
 800acc4:	e7e8      	b.n	800ac98 <_strtod_l+0xf8>
 800acc6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800acca:	f04f 38ff 	mov.w	r8, #4294967295
 800acce:	e7e3      	b.n	800ac98 <_strtod_l+0xf8>
 800acd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	921b      	str	r2, [sp, #108]	; 0x6c
 800acd6:	785b      	ldrb	r3, [r3, #1]
 800acd8:	2b30      	cmp	r3, #48	; 0x30
 800acda:	d0f9      	beq.n	800acd0 <_strtod_l+0x130>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0a0      	beq.n	800ac22 <_strtod_l+0x82>
 800ace0:	2301      	movs	r3, #1
 800ace2:	9307      	str	r3, [sp, #28]
 800ace4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ace6:	9308      	str	r3, [sp, #32]
 800ace8:	2300      	movs	r3, #0
 800acea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800acee:	469b      	mov	fp, r3
 800acf0:	220a      	movs	r2, #10
 800acf2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800acf4:	7805      	ldrb	r5, [r0, #0]
 800acf6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800acfa:	b2d9      	uxtb	r1, r3
 800acfc:	2909      	cmp	r1, #9
 800acfe:	d926      	bls.n	800ad4e <_strtod_l+0x1ae>
 800ad00:	4622      	mov	r2, r4
 800ad02:	4639      	mov	r1, r7
 800ad04:	f003 facb 	bl	800e29e <strncmp>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d032      	beq.n	800ad72 <_strtod_l+0x1d2>
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	462b      	mov	r3, r5
 800ad10:	465c      	mov	r4, fp
 800ad12:	9004      	str	r0, [sp, #16]
 800ad14:	4602      	mov	r2, r0
 800ad16:	2b65      	cmp	r3, #101	; 0x65
 800ad18:	d001      	beq.n	800ad1e <_strtod_l+0x17e>
 800ad1a:	2b45      	cmp	r3, #69	; 0x45
 800ad1c:	d113      	bne.n	800ad46 <_strtod_l+0x1a6>
 800ad1e:	b91c      	cbnz	r4, 800ad28 <_strtod_l+0x188>
 800ad20:	9b07      	ldr	r3, [sp, #28]
 800ad22:	4303      	orrs	r3, r0
 800ad24:	d099      	beq.n	800ac5a <_strtod_l+0xba>
 800ad26:	2400      	movs	r4, #0
 800ad28:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ad2a:	1c73      	adds	r3, r6, #1
 800ad2c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad2e:	7873      	ldrb	r3, [r6, #1]
 800ad30:	2b2b      	cmp	r3, #43	; 0x2b
 800ad32:	d078      	beq.n	800ae26 <_strtod_l+0x286>
 800ad34:	2b2d      	cmp	r3, #45	; 0x2d
 800ad36:	d07b      	beq.n	800ae30 <_strtod_l+0x290>
 800ad38:	2700      	movs	r7, #0
 800ad3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ad3e:	2909      	cmp	r1, #9
 800ad40:	f240 8082 	bls.w	800ae48 <_strtod_l+0x2a8>
 800ad44:	961b      	str	r6, [sp, #108]	; 0x6c
 800ad46:	2500      	movs	r5, #0
 800ad48:	e09e      	b.n	800ae88 <_strtod_l+0x2e8>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e7c9      	b.n	800ace2 <_strtod_l+0x142>
 800ad4e:	f1bb 0f08 	cmp.w	fp, #8
 800ad52:	bfd5      	itete	le
 800ad54:	9906      	ldrle	r1, [sp, #24]
 800ad56:	9905      	ldrgt	r1, [sp, #20]
 800ad58:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad60:	f100 0001 	add.w	r0, r0, #1
 800ad64:	bfd4      	ite	le
 800ad66:	9306      	strle	r3, [sp, #24]
 800ad68:	9305      	strgt	r3, [sp, #20]
 800ad6a:	f10b 0b01 	add.w	fp, fp, #1
 800ad6e:	901b      	str	r0, [sp, #108]	; 0x6c
 800ad70:	e7bf      	b.n	800acf2 <_strtod_l+0x152>
 800ad72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad74:	191a      	adds	r2, r3, r4
 800ad76:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad78:	5d1b      	ldrb	r3, [r3, r4]
 800ad7a:	f1bb 0f00 	cmp.w	fp, #0
 800ad7e:	d036      	beq.n	800adee <_strtod_l+0x24e>
 800ad80:	9004      	str	r0, [sp, #16]
 800ad82:	465c      	mov	r4, fp
 800ad84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ad88:	2a09      	cmp	r2, #9
 800ad8a:	d912      	bls.n	800adb2 <_strtod_l+0x212>
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	e7c2      	b.n	800ad16 <_strtod_l+0x176>
 800ad90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad96:	785b      	ldrb	r3, [r3, #1]
 800ad98:	3001      	adds	r0, #1
 800ad9a:	2b30      	cmp	r3, #48	; 0x30
 800ad9c:	d0f8      	beq.n	800ad90 <_strtod_l+0x1f0>
 800ad9e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ada2:	2a08      	cmp	r2, #8
 800ada4:	f200 84dc 	bhi.w	800b760 <_strtod_l+0xbc0>
 800ada8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800adaa:	9004      	str	r0, [sp, #16]
 800adac:	2000      	movs	r0, #0
 800adae:	9208      	str	r2, [sp, #32]
 800adb0:	4604      	mov	r4, r0
 800adb2:	3b30      	subs	r3, #48	; 0x30
 800adb4:	f100 0201 	add.w	r2, r0, #1
 800adb8:	d013      	beq.n	800ade2 <_strtod_l+0x242>
 800adba:	9904      	ldr	r1, [sp, #16]
 800adbc:	4411      	add	r1, r2
 800adbe:	9104      	str	r1, [sp, #16]
 800adc0:	4622      	mov	r2, r4
 800adc2:	1905      	adds	r5, r0, r4
 800adc4:	210a      	movs	r1, #10
 800adc6:	42aa      	cmp	r2, r5
 800adc8:	d113      	bne.n	800adf2 <_strtod_l+0x252>
 800adca:	1822      	adds	r2, r4, r0
 800adcc:	2a08      	cmp	r2, #8
 800adce:	f104 0401 	add.w	r4, r4, #1
 800add2:	4404      	add	r4, r0
 800add4:	dc1b      	bgt.n	800ae0e <_strtod_l+0x26e>
 800add6:	9906      	ldr	r1, [sp, #24]
 800add8:	220a      	movs	r2, #10
 800adda:	fb02 3301 	mla	r3, r2, r1, r3
 800adde:	9306      	str	r3, [sp, #24]
 800ade0:	2200      	movs	r2, #0
 800ade2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ade4:	1c59      	adds	r1, r3, #1
 800ade6:	911b      	str	r1, [sp, #108]	; 0x6c
 800ade8:	785b      	ldrb	r3, [r3, #1]
 800adea:	4610      	mov	r0, r2
 800adec:	e7ca      	b.n	800ad84 <_strtod_l+0x1e4>
 800adee:	4658      	mov	r0, fp
 800adf0:	e7d3      	b.n	800ad9a <_strtod_l+0x1fa>
 800adf2:	2a08      	cmp	r2, #8
 800adf4:	dc04      	bgt.n	800ae00 <_strtod_l+0x260>
 800adf6:	9f06      	ldr	r7, [sp, #24]
 800adf8:	434f      	muls	r7, r1
 800adfa:	9706      	str	r7, [sp, #24]
 800adfc:	3201      	adds	r2, #1
 800adfe:	e7e2      	b.n	800adc6 <_strtod_l+0x226>
 800ae00:	1c57      	adds	r7, r2, #1
 800ae02:	2f10      	cmp	r7, #16
 800ae04:	bfde      	ittt	le
 800ae06:	9f05      	ldrle	r7, [sp, #20]
 800ae08:	434f      	mulle	r7, r1
 800ae0a:	9705      	strle	r7, [sp, #20]
 800ae0c:	e7f6      	b.n	800adfc <_strtod_l+0x25c>
 800ae0e:	2c10      	cmp	r4, #16
 800ae10:	bfdf      	itttt	le
 800ae12:	9905      	ldrle	r1, [sp, #20]
 800ae14:	220a      	movle	r2, #10
 800ae16:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae1a:	9305      	strle	r3, [sp, #20]
 800ae1c:	e7e0      	b.n	800ade0 <_strtod_l+0x240>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	2201      	movs	r2, #1
 800ae24:	e77c      	b.n	800ad20 <_strtod_l+0x180>
 800ae26:	2700      	movs	r7, #0
 800ae28:	1cb3      	adds	r3, r6, #2
 800ae2a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae2c:	78b3      	ldrb	r3, [r6, #2]
 800ae2e:	e784      	b.n	800ad3a <_strtod_l+0x19a>
 800ae30:	2701      	movs	r7, #1
 800ae32:	e7f9      	b.n	800ae28 <_strtod_l+0x288>
 800ae34:	0800f56c 	.word	0x0800f56c
 800ae38:	0800f2b4 	.word	0x0800f2b4
 800ae3c:	7ff00000 	.word	0x7ff00000
 800ae40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae42:	1c59      	adds	r1, r3, #1
 800ae44:	911b      	str	r1, [sp, #108]	; 0x6c
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b30      	cmp	r3, #48	; 0x30
 800ae4a:	d0f9      	beq.n	800ae40 <_strtod_l+0x2a0>
 800ae4c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ae50:	2908      	cmp	r1, #8
 800ae52:	f63f af78 	bhi.w	800ad46 <_strtod_l+0x1a6>
 800ae56:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800ae5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	f04f 0e0a 	mov.w	lr, #10
 800ae62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae64:	1c59      	adds	r1, r3, #1
 800ae66:	911b      	str	r1, [sp, #108]	; 0x6c
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800ae6e:	2d09      	cmp	r5, #9
 800ae70:	d935      	bls.n	800aede <_strtod_l+0x33e>
 800ae72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae74:	1b49      	subs	r1, r1, r5
 800ae76:	2908      	cmp	r1, #8
 800ae78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ae7c:	dc02      	bgt.n	800ae84 <_strtod_l+0x2e4>
 800ae7e:	4565      	cmp	r5, ip
 800ae80:	bfa8      	it	ge
 800ae82:	4665      	movge	r5, ip
 800ae84:	b107      	cbz	r7, 800ae88 <_strtod_l+0x2e8>
 800ae86:	426d      	negs	r5, r5
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	d14c      	bne.n	800af26 <_strtod_l+0x386>
 800ae8c:	9907      	ldr	r1, [sp, #28]
 800ae8e:	4301      	orrs	r1, r0
 800ae90:	f47f aec7 	bne.w	800ac22 <_strtod_l+0x82>
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	f47f aee0 	bne.w	800ac5a <_strtod_l+0xba>
 800ae9a:	2b69      	cmp	r3, #105	; 0x69
 800ae9c:	d026      	beq.n	800aeec <_strtod_l+0x34c>
 800ae9e:	dc23      	bgt.n	800aee8 <_strtod_l+0x348>
 800aea0:	2b49      	cmp	r3, #73	; 0x49
 800aea2:	d023      	beq.n	800aeec <_strtod_l+0x34c>
 800aea4:	2b4e      	cmp	r3, #78	; 0x4e
 800aea6:	f47f aed8 	bne.w	800ac5a <_strtod_l+0xba>
 800aeaa:	499c      	ldr	r1, [pc, #624]	; (800b11c <_strtod_l+0x57c>)
 800aeac:	a81b      	add	r0, sp, #108	; 0x6c
 800aeae:	f002 f8fd 	bl	800d0ac <__match>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	f43f aed1 	beq.w	800ac5a <_strtod_l+0xba>
 800aeb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b28      	cmp	r3, #40	; 0x28
 800aebe:	d12c      	bne.n	800af1a <_strtod_l+0x37a>
 800aec0:	4997      	ldr	r1, [pc, #604]	; (800b120 <_strtod_l+0x580>)
 800aec2:	aa1e      	add	r2, sp, #120	; 0x78
 800aec4:	a81b      	add	r0, sp, #108	; 0x6c
 800aec6:	f002 f905 	bl	800d0d4 <__hexnan>
 800aeca:	2805      	cmp	r0, #5
 800aecc:	d125      	bne.n	800af1a <_strtod_l+0x37a>
 800aece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aed0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800aed4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aed8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aedc:	e6a1      	b.n	800ac22 <_strtod_l+0x82>
 800aede:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800aee2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800aee6:	e7bc      	b.n	800ae62 <_strtod_l+0x2c2>
 800aee8:	2b6e      	cmp	r3, #110	; 0x6e
 800aeea:	e7dc      	b.n	800aea6 <_strtod_l+0x306>
 800aeec:	498d      	ldr	r1, [pc, #564]	; (800b124 <_strtod_l+0x584>)
 800aeee:	a81b      	add	r0, sp, #108	; 0x6c
 800aef0:	f002 f8dc 	bl	800d0ac <__match>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f43f aeb0 	beq.w	800ac5a <_strtod_l+0xba>
 800aefa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aefc:	498a      	ldr	r1, [pc, #552]	; (800b128 <_strtod_l+0x588>)
 800aefe:	3b01      	subs	r3, #1
 800af00:	a81b      	add	r0, sp, #108	; 0x6c
 800af02:	931b      	str	r3, [sp, #108]	; 0x6c
 800af04:	f002 f8d2 	bl	800d0ac <__match>
 800af08:	b910      	cbnz	r0, 800af10 <_strtod_l+0x370>
 800af0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af0c:	3301      	adds	r3, #1
 800af0e:	931b      	str	r3, [sp, #108]	; 0x6c
 800af10:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800b138 <_strtod_l+0x598>
 800af14:	f04f 0800 	mov.w	r8, #0
 800af18:	e683      	b.n	800ac22 <_strtod_l+0x82>
 800af1a:	4884      	ldr	r0, [pc, #528]	; (800b12c <_strtod_l+0x58c>)
 800af1c:	f003 f976 	bl	800e20c <nan>
 800af20:	4680      	mov	r8, r0
 800af22:	4689      	mov	r9, r1
 800af24:	e67d      	b.n	800ac22 <_strtod_l+0x82>
 800af26:	9b04      	ldr	r3, [sp, #16]
 800af28:	9806      	ldr	r0, [sp, #24]
 800af2a:	1aeb      	subs	r3, r5, r3
 800af2c:	f1bb 0f00 	cmp.w	fp, #0
 800af30:	bf08      	it	eq
 800af32:	46a3      	moveq	fp, r4
 800af34:	2c10      	cmp	r4, #16
 800af36:	9307      	str	r3, [sp, #28]
 800af38:	4626      	mov	r6, r4
 800af3a:	bfa8      	it	ge
 800af3c:	2610      	movge	r6, #16
 800af3e:	f7f5 fac9 	bl	80004d4 <__aeabi_ui2d>
 800af42:	2c09      	cmp	r4, #9
 800af44:	4680      	mov	r8, r0
 800af46:	4689      	mov	r9, r1
 800af48:	dd13      	ble.n	800af72 <_strtod_l+0x3d2>
 800af4a:	4b79      	ldr	r3, [pc, #484]	; (800b130 <_strtod_l+0x590>)
 800af4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af54:	f7f5 fb38 	bl	80005c8 <__aeabi_dmul>
 800af58:	4680      	mov	r8, r0
 800af5a:	9805      	ldr	r0, [sp, #20]
 800af5c:	4689      	mov	r9, r1
 800af5e:	f7f5 fab9 	bl	80004d4 <__aeabi_ui2d>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	4640      	mov	r0, r8
 800af68:	4649      	mov	r1, r9
 800af6a:	f7f5 f977 	bl	800025c <__adddf3>
 800af6e:	4680      	mov	r8, r0
 800af70:	4689      	mov	r9, r1
 800af72:	2c0f      	cmp	r4, #15
 800af74:	dc36      	bgt.n	800afe4 <_strtod_l+0x444>
 800af76:	9b07      	ldr	r3, [sp, #28]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f43f ae52 	beq.w	800ac22 <_strtod_l+0x82>
 800af7e:	dd22      	ble.n	800afc6 <_strtod_l+0x426>
 800af80:	2b16      	cmp	r3, #22
 800af82:	dc09      	bgt.n	800af98 <_strtod_l+0x3f8>
 800af84:	4c6a      	ldr	r4, [pc, #424]	; (800b130 <_strtod_l+0x590>)
 800af86:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800af8a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800af8e:	4642      	mov	r2, r8
 800af90:	464b      	mov	r3, r9
 800af92:	f7f5 fb19 	bl	80005c8 <__aeabi_dmul>
 800af96:	e7c3      	b.n	800af20 <_strtod_l+0x380>
 800af98:	9a07      	ldr	r2, [sp, #28]
 800af9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800af9e:	4293      	cmp	r3, r2
 800afa0:	db20      	blt.n	800afe4 <_strtod_l+0x444>
 800afa2:	4d63      	ldr	r5, [pc, #396]	; (800b130 <_strtod_l+0x590>)
 800afa4:	f1c4 040f 	rsb	r4, r4, #15
 800afa8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb4:	f7f5 fb08 	bl	80005c8 <__aeabi_dmul>
 800afb8:	9b07      	ldr	r3, [sp, #28]
 800afba:	1b1c      	subs	r4, r3, r4
 800afbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800afc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc4:	e7e5      	b.n	800af92 <_strtod_l+0x3f2>
 800afc6:	9b07      	ldr	r3, [sp, #28]
 800afc8:	3316      	adds	r3, #22
 800afca:	db0b      	blt.n	800afe4 <_strtod_l+0x444>
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	4a58      	ldr	r2, [pc, #352]	; (800b130 <_strtod_l+0x590>)
 800afd0:	1b5d      	subs	r5, r3, r5
 800afd2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800afd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 fc1d 	bl	800081c <__aeabi_ddiv>
 800afe2:	e79d      	b.n	800af20 <_strtod_l+0x380>
 800afe4:	9b07      	ldr	r3, [sp, #28]
 800afe6:	1ba6      	subs	r6, r4, r6
 800afe8:	441e      	add	r6, r3
 800afea:	2e00      	cmp	r6, #0
 800afec:	dd71      	ble.n	800b0d2 <_strtod_l+0x532>
 800afee:	f016 030f 	ands.w	r3, r6, #15
 800aff2:	d00a      	beq.n	800b00a <_strtod_l+0x46a>
 800aff4:	494e      	ldr	r1, [pc, #312]	; (800b130 <_strtod_l+0x590>)
 800aff6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800affa:	4642      	mov	r2, r8
 800affc:	464b      	mov	r3, r9
 800affe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b002:	f7f5 fae1 	bl	80005c8 <__aeabi_dmul>
 800b006:	4680      	mov	r8, r0
 800b008:	4689      	mov	r9, r1
 800b00a:	f036 060f 	bics.w	r6, r6, #15
 800b00e:	d050      	beq.n	800b0b2 <_strtod_l+0x512>
 800b010:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800b014:	dd27      	ble.n	800b066 <_strtod_l+0x4c6>
 800b016:	f04f 0b00 	mov.w	fp, #0
 800b01a:	f8cd b010 	str.w	fp, [sp, #16]
 800b01e:	f8cd b020 	str.w	fp, [sp, #32]
 800b022:	f8cd b018 	str.w	fp, [sp, #24]
 800b026:	2322      	movs	r3, #34	; 0x22
 800b028:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b138 <_strtod_l+0x598>
 800b02c:	f8ca 3000 	str.w	r3, [sl]
 800b030:	f04f 0800 	mov.w	r8, #0
 800b034:	9b08      	ldr	r3, [sp, #32]
 800b036:	2b00      	cmp	r3, #0
 800b038:	f43f adf3 	beq.w	800ac22 <_strtod_l+0x82>
 800b03c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b03e:	4650      	mov	r0, sl
 800b040:	f002 f9ae 	bl	800d3a0 <_Bfree>
 800b044:	9906      	ldr	r1, [sp, #24]
 800b046:	4650      	mov	r0, sl
 800b048:	f002 f9aa 	bl	800d3a0 <_Bfree>
 800b04c:	9904      	ldr	r1, [sp, #16]
 800b04e:	4650      	mov	r0, sl
 800b050:	f002 f9a6 	bl	800d3a0 <_Bfree>
 800b054:	9908      	ldr	r1, [sp, #32]
 800b056:	4650      	mov	r0, sl
 800b058:	f002 f9a2 	bl	800d3a0 <_Bfree>
 800b05c:	4659      	mov	r1, fp
 800b05e:	4650      	mov	r0, sl
 800b060:	f002 f99e 	bl	800d3a0 <_Bfree>
 800b064:	e5dd      	b.n	800ac22 <_strtod_l+0x82>
 800b066:	2300      	movs	r3, #0
 800b068:	1136      	asrs	r6, r6, #4
 800b06a:	4640      	mov	r0, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	461f      	mov	r7, r3
 800b070:	2e01      	cmp	r6, #1
 800b072:	dc21      	bgt.n	800b0b8 <_strtod_l+0x518>
 800b074:	b10b      	cbz	r3, 800b07a <_strtod_l+0x4da>
 800b076:	4680      	mov	r8, r0
 800b078:	4689      	mov	r9, r1
 800b07a:	4b2e      	ldr	r3, [pc, #184]	; (800b134 <_strtod_l+0x594>)
 800b07c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b080:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b08c:	f7f5 fa9c 	bl	80005c8 <__aeabi_dmul>
 800b090:	4b29      	ldr	r3, [pc, #164]	; (800b138 <_strtod_l+0x598>)
 800b092:	460a      	mov	r2, r1
 800b094:	400b      	ands	r3, r1
 800b096:	4929      	ldr	r1, [pc, #164]	; (800b13c <_strtod_l+0x59c>)
 800b098:	428b      	cmp	r3, r1
 800b09a:	4680      	mov	r8, r0
 800b09c:	d8bb      	bhi.n	800b016 <_strtod_l+0x476>
 800b09e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b0a2:	428b      	cmp	r3, r1
 800b0a4:	bf86      	itte	hi
 800b0a6:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800b140 <_strtod_l+0x5a0>
 800b0aa:	f04f 38ff 	movhi.w	r8, #4294967295
 800b0ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	e07e      	b.n	800b1b6 <_strtod_l+0x616>
 800b0b8:	07f2      	lsls	r2, r6, #31
 800b0ba:	d507      	bpl.n	800b0cc <_strtod_l+0x52c>
 800b0bc:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <_strtod_l+0x594>)
 800b0be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f7f5 fa7f 	bl	80005c8 <__aeabi_dmul>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	3701      	adds	r7, #1
 800b0ce:	1076      	asrs	r6, r6, #1
 800b0d0:	e7ce      	b.n	800b070 <_strtod_l+0x4d0>
 800b0d2:	d0ee      	beq.n	800b0b2 <_strtod_l+0x512>
 800b0d4:	4276      	negs	r6, r6
 800b0d6:	f016 020f 	ands.w	r2, r6, #15
 800b0da:	d00a      	beq.n	800b0f2 <_strtod_l+0x552>
 800b0dc:	4b14      	ldr	r3, [pc, #80]	; (800b130 <_strtod_l+0x590>)
 800b0de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	f7f5 fb97 	bl	800081c <__aeabi_ddiv>
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4689      	mov	r9, r1
 800b0f2:	1136      	asrs	r6, r6, #4
 800b0f4:	d0dd      	beq.n	800b0b2 <_strtod_l+0x512>
 800b0f6:	2e1f      	cmp	r6, #31
 800b0f8:	dd24      	ble.n	800b144 <_strtod_l+0x5a4>
 800b0fa:	f04f 0b00 	mov.w	fp, #0
 800b0fe:	f8cd b010 	str.w	fp, [sp, #16]
 800b102:	f8cd b020 	str.w	fp, [sp, #32]
 800b106:	f8cd b018 	str.w	fp, [sp, #24]
 800b10a:	2322      	movs	r3, #34	; 0x22
 800b10c:	f04f 0800 	mov.w	r8, #0
 800b110:	f04f 0900 	mov.w	r9, #0
 800b114:	f8ca 3000 	str.w	r3, [sl]
 800b118:	e78c      	b.n	800b034 <_strtod_l+0x494>
 800b11a:	bf00      	nop
 800b11c:	0800ebf5 	.word	0x0800ebf5
 800b120:	0800f2c8 	.word	0x0800f2c8
 800b124:	0800ebed 	.word	0x0800ebed
 800b128:	0800f40c 	.word	0x0800f40c
 800b12c:	0800f728 	.word	0x0800f728
 800b130:	0800f608 	.word	0x0800f608
 800b134:	0800f5e0 	.word	0x0800f5e0
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	7ca00000 	.word	0x7ca00000
 800b140:	7fefffff 	.word	0x7fefffff
 800b144:	f016 0310 	ands.w	r3, r6, #16
 800b148:	bf18      	it	ne
 800b14a:	236a      	movne	r3, #106	; 0x6a
 800b14c:	4fb3      	ldr	r7, [pc, #716]	; (800b41c <_strtod_l+0x87c>)
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	4640      	mov	r0, r8
 800b152:	4649      	mov	r1, r9
 800b154:	2300      	movs	r3, #0
 800b156:	07f2      	lsls	r2, r6, #31
 800b158:	d504      	bpl.n	800b164 <_strtod_l+0x5c4>
 800b15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b15e:	f7f5 fa33 	bl	80005c8 <__aeabi_dmul>
 800b162:	2301      	movs	r3, #1
 800b164:	1076      	asrs	r6, r6, #1
 800b166:	f107 0708 	add.w	r7, r7, #8
 800b16a:	d1f4      	bne.n	800b156 <_strtod_l+0x5b6>
 800b16c:	b10b      	cbz	r3, 800b172 <_strtod_l+0x5d2>
 800b16e:	4680      	mov	r8, r0
 800b170:	4689      	mov	r9, r1
 800b172:	9b05      	ldr	r3, [sp, #20]
 800b174:	b1bb      	cbz	r3, 800b1a6 <_strtod_l+0x606>
 800b176:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800b17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b17e:	2b00      	cmp	r3, #0
 800b180:	4649      	mov	r1, r9
 800b182:	dd10      	ble.n	800b1a6 <_strtod_l+0x606>
 800b184:	2b1f      	cmp	r3, #31
 800b186:	f340 8128 	ble.w	800b3da <_strtod_l+0x83a>
 800b18a:	2b34      	cmp	r3, #52	; 0x34
 800b18c:	bfde      	ittt	le
 800b18e:	3b20      	suble	r3, #32
 800b190:	f04f 32ff 	movle.w	r2, #4294967295
 800b194:	fa02 f303 	lslle.w	r3, r2, r3
 800b198:	f04f 0800 	mov.w	r8, #0
 800b19c:	bfcc      	ite	gt
 800b19e:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b1a2:	ea03 0901 	andle.w	r9, r3, r1
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 fc73 	bl	8000a98 <__aeabi_dcmpeq>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d1a1      	bne.n	800b0fa <_strtod_l+0x55a>
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	9908      	ldr	r1, [sp, #32]
 800b1bc:	4623      	mov	r3, r4
 800b1be:	465a      	mov	r2, fp
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	f002 f959 	bl	800d478 <__s2b>
 800b1c6:	9008      	str	r0, [sp, #32]
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	f43f af24 	beq.w	800b016 <_strtod_l+0x476>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	1b5d      	subs	r5, r3, r5
 800b1d2:	9b07      	ldr	r3, [sp, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bfb4      	ite	lt
 800b1d8:	462b      	movlt	r3, r5
 800b1da:	2300      	movge	r3, #0
 800b1dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b1de:	9b07      	ldr	r3, [sp, #28]
 800b1e0:	f04f 0b00 	mov.w	fp, #0
 800b1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b1e8:	9316      	str	r3, [sp, #88]	; 0x58
 800b1ea:	f8cd b010 	str.w	fp, [sp, #16]
 800b1ee:	9b08      	ldr	r3, [sp, #32]
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	6859      	ldr	r1, [r3, #4]
 800b1f4:	f002 f894 	bl	800d320 <_Balloc>
 800b1f8:	9006      	str	r0, [sp, #24]
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	f43f af13 	beq.w	800b026 <_strtod_l+0x486>
 800b200:	9b08      	ldr	r3, [sp, #32]
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	3202      	adds	r2, #2
 800b206:	f103 010c 	add.w	r1, r3, #12
 800b20a:	0092      	lsls	r2, r2, #2
 800b20c:	300c      	adds	r0, #12
 800b20e:	f7fe fc2f 	bl	8009a70 <memcpy>
 800b212:	ab1e      	add	r3, sp, #120	; 0x78
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	ab1d      	add	r3, sp, #116	; 0x74
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4642      	mov	r2, r8
 800b21c:	464b      	mov	r3, r9
 800b21e:	4650      	mov	r0, sl
 800b220:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800b224:	f002 fc62 	bl	800daec <__d2b>
 800b228:	901c      	str	r0, [sp, #112]	; 0x70
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f aefb 	beq.w	800b026 <_strtod_l+0x486>
 800b230:	2101      	movs	r1, #1
 800b232:	4650      	mov	r0, sl
 800b234:	f002 f9b8 	bl	800d5a8 <__i2b>
 800b238:	9004      	str	r0, [sp, #16]
 800b23a:	4603      	mov	r3, r0
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f aef2 	beq.w	800b026 <_strtod_l+0x486>
 800b242:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b244:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b246:	2d00      	cmp	r5, #0
 800b248:	bfab      	itete	ge
 800b24a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b24c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b24e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800b250:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b252:	bfac      	ite	ge
 800b254:	18ee      	addge	r6, r5, r3
 800b256:	1b5c      	sublt	r4, r3, r5
 800b258:	9b05      	ldr	r3, [sp, #20]
 800b25a:	1aed      	subs	r5, r5, r3
 800b25c:	4415      	add	r5, r2
 800b25e:	4b70      	ldr	r3, [pc, #448]	; (800b420 <_strtod_l+0x880>)
 800b260:	3d01      	subs	r5, #1
 800b262:	429d      	cmp	r5, r3
 800b264:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b268:	f280 80c9 	bge.w	800b3fe <_strtod_l+0x85e>
 800b26c:	1b5b      	subs	r3, r3, r5
 800b26e:	2b1f      	cmp	r3, #31
 800b270:	eba2 0203 	sub.w	r2, r2, r3
 800b274:	f04f 0701 	mov.w	r7, #1
 800b278:	f300 80b6 	bgt.w	800b3e8 <_strtod_l+0x848>
 800b27c:	fa07 f303 	lsl.w	r3, r7, r3
 800b280:	930f      	str	r3, [sp, #60]	; 0x3c
 800b282:	2500      	movs	r5, #0
 800b284:	18b7      	adds	r7, r6, r2
 800b286:	9b05      	ldr	r3, [sp, #20]
 800b288:	42be      	cmp	r6, r7
 800b28a:	4414      	add	r4, r2
 800b28c:	441c      	add	r4, r3
 800b28e:	4633      	mov	r3, r6
 800b290:	bfa8      	it	ge
 800b292:	463b      	movge	r3, r7
 800b294:	42a3      	cmp	r3, r4
 800b296:	bfa8      	it	ge
 800b298:	4623      	movge	r3, r4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfc2      	ittt	gt
 800b29e:	1aff      	subgt	r7, r7, r3
 800b2a0:	1ae4      	subgt	r4, r4, r3
 800b2a2:	1af6      	subgt	r6, r6, r3
 800b2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	dd17      	ble.n	800b2da <_strtod_l+0x73a>
 800b2aa:	9904      	ldr	r1, [sp, #16]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	f002 fa36 	bl	800d720 <__pow5mult>
 800b2b4:	9004      	str	r0, [sp, #16]
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f43f aeb5 	beq.w	800b026 <_strtod_l+0x486>
 800b2bc:	4601      	mov	r1, r0
 800b2be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	f002 f987 	bl	800d5d4 <__multiply>
 800b2c6:	9009      	str	r0, [sp, #36]	; 0x24
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	f43f aeac 	beq.w	800b026 <_strtod_l+0x486>
 800b2ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f002 f865 	bl	800d3a0 <_Bfree>
 800b2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d8:	931c      	str	r3, [sp, #112]	; 0x70
 800b2da:	2f00      	cmp	r7, #0
 800b2dc:	f300 8093 	bgt.w	800b406 <_strtod_l+0x866>
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dd08      	ble.n	800b2f8 <_strtod_l+0x758>
 800b2e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2e8:	9906      	ldr	r1, [sp, #24]
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f002 fa18 	bl	800d720 <__pow5mult>
 800b2f0:	9006      	str	r0, [sp, #24]
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	f43f ae97 	beq.w	800b026 <_strtod_l+0x486>
 800b2f8:	2c00      	cmp	r4, #0
 800b2fa:	dd08      	ble.n	800b30e <_strtod_l+0x76e>
 800b2fc:	9906      	ldr	r1, [sp, #24]
 800b2fe:	4622      	mov	r2, r4
 800b300:	4650      	mov	r0, sl
 800b302:	f002 fa67 	bl	800d7d4 <__lshift>
 800b306:	9006      	str	r0, [sp, #24]
 800b308:	2800      	cmp	r0, #0
 800b30a:	f43f ae8c 	beq.w	800b026 <_strtod_l+0x486>
 800b30e:	2e00      	cmp	r6, #0
 800b310:	dd08      	ble.n	800b324 <_strtod_l+0x784>
 800b312:	9904      	ldr	r1, [sp, #16]
 800b314:	4632      	mov	r2, r6
 800b316:	4650      	mov	r0, sl
 800b318:	f002 fa5c 	bl	800d7d4 <__lshift>
 800b31c:	9004      	str	r0, [sp, #16]
 800b31e:	2800      	cmp	r0, #0
 800b320:	f43f ae81 	beq.w	800b026 <_strtod_l+0x486>
 800b324:	9a06      	ldr	r2, [sp, #24]
 800b326:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b328:	4650      	mov	r0, sl
 800b32a:	f002 fadb 	bl	800d8e4 <__mdiff>
 800b32e:	4683      	mov	fp, r0
 800b330:	2800      	cmp	r0, #0
 800b332:	f43f ae78 	beq.w	800b026 <_strtod_l+0x486>
 800b336:	2400      	movs	r4, #0
 800b338:	68c3      	ldr	r3, [r0, #12]
 800b33a:	9904      	ldr	r1, [sp, #16]
 800b33c:	60c4      	str	r4, [r0, #12]
 800b33e:	930d      	str	r3, [sp, #52]	; 0x34
 800b340:	f002 fab4 	bl	800d8ac <__mcmp>
 800b344:	42a0      	cmp	r0, r4
 800b346:	da71      	bge.n	800b42c <_strtod_l+0x88c>
 800b348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b34a:	ea53 0308 	orrs.w	r3, r3, r8
 800b34e:	f040 8097 	bne.w	800b480 <_strtod_l+0x8e0>
 800b352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 8092 	bne.w	800b480 <_strtod_l+0x8e0>
 800b35c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b360:	0d1b      	lsrs	r3, r3, #20
 800b362:	051b      	lsls	r3, r3, #20
 800b364:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b368:	f240 808a 	bls.w	800b480 <_strtod_l+0x8e0>
 800b36c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b370:	b923      	cbnz	r3, 800b37c <_strtod_l+0x7dc>
 800b372:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b376:	2b01      	cmp	r3, #1
 800b378:	f340 8082 	ble.w	800b480 <_strtod_l+0x8e0>
 800b37c:	4659      	mov	r1, fp
 800b37e:	2201      	movs	r2, #1
 800b380:	4650      	mov	r0, sl
 800b382:	f002 fa27 	bl	800d7d4 <__lshift>
 800b386:	9904      	ldr	r1, [sp, #16]
 800b388:	4683      	mov	fp, r0
 800b38a:	f002 fa8f 	bl	800d8ac <__mcmp>
 800b38e:	2800      	cmp	r0, #0
 800b390:	dd76      	ble.n	800b480 <_strtod_l+0x8e0>
 800b392:	9905      	ldr	r1, [sp, #20]
 800b394:	4a23      	ldr	r2, [pc, #140]	; (800b424 <_strtod_l+0x884>)
 800b396:	464b      	mov	r3, r9
 800b398:	2900      	cmp	r1, #0
 800b39a:	f000 8092 	beq.w	800b4c2 <_strtod_l+0x922>
 800b39e:	ea02 0109 	and.w	r1, r2, r9
 800b3a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b3a6:	f300 808c 	bgt.w	800b4c2 <_strtod_l+0x922>
 800b3aa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3ae:	f77f aeac 	ble.w	800b10a <_strtod_l+0x56a>
 800b3b2:	4a1d      	ldr	r2, [pc, #116]	; (800b428 <_strtod_l+0x888>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	f7f5 f901 	bl	80005c8 <__aeabi_dmul>
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4303      	orrs	r3, r0
 800b3ca:	bf08      	it	eq
 800b3cc:	2322      	moveq	r3, #34	; 0x22
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	4689      	mov	r9, r1
 800b3d2:	bf08      	it	eq
 800b3d4:	f8ca 3000 	streq.w	r3, [sl]
 800b3d8:	e630      	b.n	800b03c <_strtod_l+0x49c>
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e2:	ea03 0808 	and.w	r8, r3, r8
 800b3e6:	e6de      	b.n	800b1a6 <_strtod_l+0x606>
 800b3e8:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b3ec:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b3f0:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b3f4:	35e2      	adds	r5, #226	; 0xe2
 800b3f6:	fa07 f505 	lsl.w	r5, r7, r5
 800b3fa:	970f      	str	r7, [sp, #60]	; 0x3c
 800b3fc:	e742      	b.n	800b284 <_strtod_l+0x6e4>
 800b3fe:	2301      	movs	r3, #1
 800b400:	2500      	movs	r5, #0
 800b402:	930f      	str	r3, [sp, #60]	; 0x3c
 800b404:	e73e      	b.n	800b284 <_strtod_l+0x6e4>
 800b406:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b408:	463a      	mov	r2, r7
 800b40a:	4650      	mov	r0, sl
 800b40c:	f002 f9e2 	bl	800d7d4 <__lshift>
 800b410:	901c      	str	r0, [sp, #112]	; 0x70
 800b412:	2800      	cmp	r0, #0
 800b414:	f47f af64 	bne.w	800b2e0 <_strtod_l+0x740>
 800b418:	e605      	b.n	800b026 <_strtod_l+0x486>
 800b41a:	bf00      	nop
 800b41c:	0800f2e0 	.word	0x0800f2e0
 800b420:	fffffc02 	.word	0xfffffc02
 800b424:	7ff00000 	.word	0x7ff00000
 800b428:	39500000 	.word	0x39500000
 800b42c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b430:	d166      	bne.n	800b500 <_strtod_l+0x960>
 800b432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b438:	b35a      	cbz	r2, 800b492 <_strtod_l+0x8f2>
 800b43a:	4a9d      	ldr	r2, [pc, #628]	; (800b6b0 <_strtod_l+0xb10>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d12c      	bne.n	800b49a <_strtod_l+0x8fa>
 800b440:	9b05      	ldr	r3, [sp, #20]
 800b442:	4640      	mov	r0, r8
 800b444:	b303      	cbz	r3, 800b488 <_strtod_l+0x8e8>
 800b446:	4a9b      	ldr	r2, [pc, #620]	; (800b6b4 <_strtod_l+0xb14>)
 800b448:	464b      	mov	r3, r9
 800b44a:	401a      	ands	r2, r3
 800b44c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b450:	f04f 31ff 	mov.w	r1, #4294967295
 800b454:	d81b      	bhi.n	800b48e <_strtod_l+0x8ee>
 800b456:	0d12      	lsrs	r2, r2, #20
 800b458:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b45c:	fa01 f303 	lsl.w	r3, r1, r3
 800b460:	4298      	cmp	r0, r3
 800b462:	d11a      	bne.n	800b49a <_strtod_l+0x8fa>
 800b464:	4b94      	ldr	r3, [pc, #592]	; (800b6b8 <_strtod_l+0xb18>)
 800b466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b468:	429a      	cmp	r2, r3
 800b46a:	d102      	bne.n	800b472 <_strtod_l+0x8d2>
 800b46c:	3001      	adds	r0, #1
 800b46e:	f43f adda 	beq.w	800b026 <_strtod_l+0x486>
 800b472:	4b90      	ldr	r3, [pc, #576]	; (800b6b4 <_strtod_l+0xb14>)
 800b474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b476:	401a      	ands	r2, r3
 800b478:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b47c:	f04f 0800 	mov.w	r8, #0
 800b480:	9b05      	ldr	r3, [sp, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d195      	bne.n	800b3b2 <_strtod_l+0x812>
 800b486:	e5d9      	b.n	800b03c <_strtod_l+0x49c>
 800b488:	f04f 33ff 	mov.w	r3, #4294967295
 800b48c:	e7e8      	b.n	800b460 <_strtod_l+0x8c0>
 800b48e:	460b      	mov	r3, r1
 800b490:	e7e6      	b.n	800b460 <_strtod_l+0x8c0>
 800b492:	ea53 0308 	orrs.w	r3, r3, r8
 800b496:	f43f af7c 	beq.w	800b392 <_strtod_l+0x7f2>
 800b49a:	b1e5      	cbz	r5, 800b4d6 <_strtod_l+0x936>
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	421d      	tst	r5, r3
 800b4a0:	d0ee      	beq.n	800b480 <_strtod_l+0x8e0>
 800b4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a4:	9a05      	ldr	r2, [sp, #20]
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	b1c3      	cbz	r3, 800b4de <_strtod_l+0x93e>
 800b4ac:	f7ff fb57 	bl	800ab5e <sulp>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4b8:	f7f4 fed0 	bl	800025c <__adddf3>
 800b4bc:	4680      	mov	r8, r0
 800b4be:	4689      	mov	r9, r1
 800b4c0:	e7de      	b.n	800b480 <_strtod_l+0x8e0>
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b4cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b4d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b4d4:	e7d4      	b.n	800b480 <_strtod_l+0x8e0>
 800b4d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4d8:	ea13 0f08 	tst.w	r3, r8
 800b4dc:	e7e0      	b.n	800b4a0 <_strtod_l+0x900>
 800b4de:	f7ff fb3e 	bl	800ab5e <sulp>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4ea:	f7f4 feb5 	bl	8000258 <__aeabi_dsub>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	f7f5 facf 	bl	8000a98 <__aeabi_dcmpeq>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d0c0      	beq.n	800b480 <_strtod_l+0x8e0>
 800b4fe:	e604      	b.n	800b10a <_strtod_l+0x56a>
 800b500:	9904      	ldr	r1, [sp, #16]
 800b502:	4658      	mov	r0, fp
 800b504:	f002 fb4e 	bl	800dba4 <__ratio>
 800b508:	2200      	movs	r2, #0
 800b50a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b50e:	4606      	mov	r6, r0
 800b510:	460f      	mov	r7, r1
 800b512:	f7f5 fad5 	bl	8000ac0 <__aeabi_dcmple>
 800b516:	2800      	cmp	r0, #0
 800b518:	d075      	beq.n	800b606 <_strtod_l+0xa66>
 800b51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d047      	beq.n	800b5b0 <_strtod_l+0xa10>
 800b520:	4f66      	ldr	r7, [pc, #408]	; (800b6bc <_strtod_l+0xb1c>)
 800b522:	2600      	movs	r6, #0
 800b524:	4d65      	ldr	r5, [pc, #404]	; (800b6bc <_strtod_l+0xb1c>)
 800b526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b52c:	0d1b      	lsrs	r3, r3, #20
 800b52e:	051b      	lsls	r3, r3, #20
 800b530:	930f      	str	r3, [sp, #60]	; 0x3c
 800b532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b534:	4b62      	ldr	r3, [pc, #392]	; (800b6c0 <_strtod_l+0xb20>)
 800b536:	429a      	cmp	r2, r3
 800b538:	f040 80ca 	bne.w	800b6d0 <_strtod_l+0xb30>
 800b53c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b540:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b546:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f002 fa53 	bl	800d9f8 <__ulp>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f5 f835 	bl	80005c8 <__aeabi_dmul>
 800b55e:	4642      	mov	r2, r8
 800b560:	464b      	mov	r3, r9
 800b562:	f7f4 fe7b 	bl	800025c <__adddf3>
 800b566:	460b      	mov	r3, r1
 800b568:	4952      	ldr	r1, [pc, #328]	; (800b6b4 <_strtod_l+0xb14>)
 800b56a:	4a56      	ldr	r2, [pc, #344]	; (800b6c4 <_strtod_l+0xb24>)
 800b56c:	4019      	ands	r1, r3
 800b56e:	4291      	cmp	r1, r2
 800b570:	4680      	mov	r8, r0
 800b572:	d95e      	bls.n	800b632 <_strtod_l+0xa92>
 800b574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b576:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d103      	bne.n	800b586 <_strtod_l+0x9e6>
 800b57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b580:	3301      	adds	r3, #1
 800b582:	f43f ad50 	beq.w	800b026 <_strtod_l+0x486>
 800b586:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800b6b8 <_strtod_l+0xb18>
 800b58a:	f04f 38ff 	mov.w	r8, #4294967295
 800b58e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b590:	4650      	mov	r0, sl
 800b592:	f001 ff05 	bl	800d3a0 <_Bfree>
 800b596:	9906      	ldr	r1, [sp, #24]
 800b598:	4650      	mov	r0, sl
 800b59a:	f001 ff01 	bl	800d3a0 <_Bfree>
 800b59e:	9904      	ldr	r1, [sp, #16]
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f001 fefd 	bl	800d3a0 <_Bfree>
 800b5a6:	4659      	mov	r1, fp
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	f001 fef9 	bl	800d3a0 <_Bfree>
 800b5ae:	e61e      	b.n	800b1ee <_strtod_l+0x64e>
 800b5b0:	f1b8 0f00 	cmp.w	r8, #0
 800b5b4:	d119      	bne.n	800b5ea <_strtod_l+0xa4a>
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5bc:	b9e3      	cbnz	r3, 800b5f8 <_strtod_l+0xa58>
 800b5be:	4b3f      	ldr	r3, [pc, #252]	; (800b6bc <_strtod_l+0xb1c>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	f7f5 fa71 	bl	8000aac <__aeabi_dcmplt>
 800b5ca:	b9c8      	cbnz	r0, 800b600 <_strtod_l+0xa60>
 800b5cc:	4b3e      	ldr	r3, [pc, #248]	; (800b6c8 <_strtod_l+0xb28>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	f7f4 fff8 	bl	80005c8 <__aeabi_dmul>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b5e0:	9418      	str	r4, [sp, #96]	; 0x60
 800b5e2:	9319      	str	r3, [sp, #100]	; 0x64
 800b5e4:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b5e8:	e79d      	b.n	800b526 <_strtod_l+0x986>
 800b5ea:	f1b8 0f01 	cmp.w	r8, #1
 800b5ee:	d103      	bne.n	800b5f8 <_strtod_l+0xa58>
 800b5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f43f ad89 	beq.w	800b10a <_strtod_l+0x56a>
 800b5f8:	4f34      	ldr	r7, [pc, #208]	; (800b6cc <_strtod_l+0xb2c>)
 800b5fa:	2600      	movs	r6, #0
 800b5fc:	2400      	movs	r4, #0
 800b5fe:	e791      	b.n	800b524 <_strtod_l+0x984>
 800b600:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b602:	4d31      	ldr	r5, [pc, #196]	; (800b6c8 <_strtod_l+0xb28>)
 800b604:	e7ea      	b.n	800b5dc <_strtod_l+0xa3c>
 800b606:	4b30      	ldr	r3, [pc, #192]	; (800b6c8 <_strtod_l+0xb28>)
 800b608:	2200      	movs	r2, #0
 800b60a:	4630      	mov	r0, r6
 800b60c:	4639      	mov	r1, r7
 800b60e:	f7f4 ffdb 	bl	80005c8 <__aeabi_dmul>
 800b612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	b933      	cbnz	r3, 800b628 <_strtod_l+0xa88>
 800b61a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b61e:	9010      	str	r0, [sp, #64]	; 0x40
 800b620:	9311      	str	r3, [sp, #68]	; 0x44
 800b622:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b626:	e77e      	b.n	800b526 <_strtod_l+0x986>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b630:	e7f7      	b.n	800b622 <_strtod_l+0xa82>
 800b632:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b636:	9b05      	ldr	r3, [sp, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1a8      	bne.n	800b58e <_strtod_l+0x9ee>
 800b63c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b642:	0d1b      	lsrs	r3, r3, #20
 800b644:	051b      	lsls	r3, r3, #20
 800b646:	429a      	cmp	r2, r3
 800b648:	d1a1      	bne.n	800b58e <_strtod_l+0x9ee>
 800b64a:	4620      	mov	r0, r4
 800b64c:	4629      	mov	r1, r5
 800b64e:	f7f5 fc9f 	bl	8000f90 <__aeabi_d2lz>
 800b652:	f7f4 ff8b 	bl	800056c <__aeabi_l2d>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4620      	mov	r0, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f4 fdfb 	bl	8000258 <__aeabi_dsub>
 800b662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b668:	ea43 0308 	orr.w	r3, r3, r8
 800b66c:	4313      	orrs	r3, r2
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	d068      	beq.n	800b746 <_strtod_l+0xba6>
 800b674:	a30a      	add	r3, pc, #40	; (adr r3, 800b6a0 <_strtod_l+0xb00>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f7f5 fa17 	bl	8000aac <__aeabi_dcmplt>
 800b67e:	2800      	cmp	r0, #0
 800b680:	f47f acdc 	bne.w	800b03c <_strtod_l+0x49c>
 800b684:	a308      	add	r3, pc, #32	; (adr r3, 800b6a8 <_strtod_l+0xb08>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	4620      	mov	r0, r4
 800b68c:	4629      	mov	r1, r5
 800b68e:	f7f5 fa2b 	bl	8000ae8 <__aeabi_dcmpgt>
 800b692:	2800      	cmp	r0, #0
 800b694:	f43f af7b 	beq.w	800b58e <_strtod_l+0x9ee>
 800b698:	e4d0      	b.n	800b03c <_strtod_l+0x49c>
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w
 800b6a0:	94a03595 	.word	0x94a03595
 800b6a4:	3fdfffff 	.word	0x3fdfffff
 800b6a8:	35afe535 	.word	0x35afe535
 800b6ac:	3fe00000 	.word	0x3fe00000
 800b6b0:	000fffff 	.word	0x000fffff
 800b6b4:	7ff00000 	.word	0x7ff00000
 800b6b8:	7fefffff 	.word	0x7fefffff
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	7fe00000 	.word	0x7fe00000
 800b6c4:	7c9fffff 	.word	0x7c9fffff
 800b6c8:	3fe00000 	.word	0x3fe00000
 800b6cc:	bff00000 	.word	0xbff00000
 800b6d0:	9b05      	ldr	r3, [sp, #20]
 800b6d2:	b313      	cbz	r3, 800b71a <_strtod_l+0xb7a>
 800b6d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6da:	d81e      	bhi.n	800b71a <_strtod_l+0xb7a>
 800b6dc:	a326      	add	r3, pc, #152	; (adr r3, 800b778 <_strtod_l+0xbd8>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7f5 f9eb 	bl	8000ac0 <__aeabi_dcmple>
 800b6ea:	b190      	cbz	r0, 800b712 <_strtod_l+0xb72>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f7f5 fa42 	bl	8000b78 <__aeabi_d2uiz>
 800b6f4:	2801      	cmp	r0, #1
 800b6f6:	bf38      	it	cc
 800b6f8:	2001      	movcc	r0, #1
 800b6fa:	f7f4 feeb 	bl	80004d4 <__aeabi_ui2d>
 800b6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	b9d3      	cbnz	r3, 800b73c <_strtod_l+0xb9c>
 800b706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b70a:	9012      	str	r0, [sp, #72]	; 0x48
 800b70c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b70e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b714:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b718:	1a9f      	subs	r7, r3, r2
 800b71a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b71e:	f002 f96b 	bl	800d9f8 <__ulp>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 ff4d 	bl	80005c8 <__aeabi_dmul>
 800b72e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b732:	f7f4 fd93 	bl	800025c <__adddf3>
 800b736:	4680      	mov	r8, r0
 800b738:	4689      	mov	r9, r1
 800b73a:	e77c      	b.n	800b636 <_strtod_l+0xa96>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b744:	e7e3      	b.n	800b70e <_strtod_l+0xb6e>
 800b746:	a30e      	add	r3, pc, #56	; (adr r3, 800b780 <_strtod_l+0xbe0>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f7f5 f9ae 	bl	8000aac <__aeabi_dcmplt>
 800b750:	e79f      	b.n	800b692 <_strtod_l+0xaf2>
 800b752:	2300      	movs	r3, #0
 800b754:	930c      	str	r3, [sp, #48]	; 0x30
 800b756:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	f7ff ba65 	b.w	800ac2a <_strtod_l+0x8a>
 800b760:	2b65      	cmp	r3, #101	; 0x65
 800b762:	f43f ab5c 	beq.w	800ae1e <_strtod_l+0x27e>
 800b766:	2b45      	cmp	r3, #69	; 0x45
 800b768:	f43f ab59 	beq.w	800ae1e <_strtod_l+0x27e>
 800b76c:	2201      	movs	r2, #1
 800b76e:	f7ff bb8d 	b.w	800ae8c <_strtod_l+0x2ec>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	ffc00000 	.word	0xffc00000
 800b77c:	41dfffff 	.word	0x41dfffff
 800b780:	94a03595 	.word	0x94a03595
 800b784:	3fcfffff 	.word	0x3fcfffff

0800b788 <strtod>:
 800b788:	460a      	mov	r2, r1
 800b78a:	4601      	mov	r1, r0
 800b78c:	4802      	ldr	r0, [pc, #8]	; (800b798 <strtod+0x10>)
 800b78e:	4b03      	ldr	r3, [pc, #12]	; (800b79c <strtod+0x14>)
 800b790:	6800      	ldr	r0, [r0, #0]
 800b792:	f7ff ba05 	b.w	800aba0 <_strtod_l>
 800b796:	bf00      	nop
 800b798:	20000010 	.word	0x20000010
 800b79c:	20000078 	.word	0x20000078

0800b7a0 <_strtol_l.isra.0>:
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a6:	4686      	mov	lr, r0
 800b7a8:	d001      	beq.n	800b7ae <_strtol_l.isra.0+0xe>
 800b7aa:	2b24      	cmp	r3, #36	; 0x24
 800b7ac:	d906      	bls.n	800b7bc <_strtol_l.isra.0+0x1c>
 800b7ae:	f7fe f925 	bl	80099fc <__errno>
 800b7b2:	2316      	movs	r3, #22
 800b7b4:	6003      	str	r3, [r0, #0]
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7bc:	4e3a      	ldr	r6, [pc, #232]	; (800b8a8 <_strtol_l.isra.0+0x108>)
 800b7be:	468c      	mov	ip, r1
 800b7c0:	4660      	mov	r0, ip
 800b7c2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b7c6:	5da5      	ldrb	r5, [r4, r6]
 800b7c8:	f015 0508 	ands.w	r5, r5, #8
 800b7cc:	d1f8      	bne.n	800b7c0 <_strtol_l.isra.0+0x20>
 800b7ce:	2c2d      	cmp	r4, #45	; 0x2d
 800b7d0:	d133      	bne.n	800b83a <_strtol_l.isra.0+0x9a>
 800b7d2:	f89c 4000 	ldrb.w	r4, [ip]
 800b7d6:	f04f 0801 	mov.w	r8, #1
 800b7da:	f100 0c02 	add.w	ip, r0, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d05d      	beq.n	800b89e <_strtol_l.isra.0+0xfe>
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	d10c      	bne.n	800b800 <_strtol_l.isra.0+0x60>
 800b7e6:	2c30      	cmp	r4, #48	; 0x30
 800b7e8:	d10a      	bne.n	800b800 <_strtol_l.isra.0+0x60>
 800b7ea:	f89c 0000 	ldrb.w	r0, [ip]
 800b7ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b7f2:	2858      	cmp	r0, #88	; 0x58
 800b7f4:	d14e      	bne.n	800b894 <_strtol_l.isra.0+0xf4>
 800b7f6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b7fa:	2310      	movs	r3, #16
 800b7fc:	f10c 0c02 	add.w	ip, ip, #2
 800b800:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b804:	3f01      	subs	r7, #1
 800b806:	2500      	movs	r5, #0
 800b808:	fbb7 f9f3 	udiv	r9, r7, r3
 800b80c:	4628      	mov	r0, r5
 800b80e:	fb03 7a19 	mls	sl, r3, r9, r7
 800b812:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b816:	2e09      	cmp	r6, #9
 800b818:	d818      	bhi.n	800b84c <_strtol_l.isra.0+0xac>
 800b81a:	4634      	mov	r4, r6
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	dd24      	ble.n	800b86a <_strtol_l.isra.0+0xca>
 800b820:	2d00      	cmp	r5, #0
 800b822:	db1f      	blt.n	800b864 <_strtol_l.isra.0+0xc4>
 800b824:	4581      	cmp	r9, r0
 800b826:	d31d      	bcc.n	800b864 <_strtol_l.isra.0+0xc4>
 800b828:	d101      	bne.n	800b82e <_strtol_l.isra.0+0x8e>
 800b82a:	45a2      	cmp	sl, r4
 800b82c:	db1a      	blt.n	800b864 <_strtol_l.isra.0+0xc4>
 800b82e:	fb00 4003 	mla	r0, r0, r3, r4
 800b832:	2501      	movs	r5, #1
 800b834:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b838:	e7eb      	b.n	800b812 <_strtol_l.isra.0+0x72>
 800b83a:	2c2b      	cmp	r4, #43	; 0x2b
 800b83c:	bf08      	it	eq
 800b83e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b842:	46a8      	mov	r8, r5
 800b844:	bf08      	it	eq
 800b846:	f100 0c02 	addeq.w	ip, r0, #2
 800b84a:	e7c8      	b.n	800b7de <_strtol_l.isra.0+0x3e>
 800b84c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b850:	2e19      	cmp	r6, #25
 800b852:	d801      	bhi.n	800b858 <_strtol_l.isra.0+0xb8>
 800b854:	3c37      	subs	r4, #55	; 0x37
 800b856:	e7e1      	b.n	800b81c <_strtol_l.isra.0+0x7c>
 800b858:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b85c:	2e19      	cmp	r6, #25
 800b85e:	d804      	bhi.n	800b86a <_strtol_l.isra.0+0xca>
 800b860:	3c57      	subs	r4, #87	; 0x57
 800b862:	e7db      	b.n	800b81c <_strtol_l.isra.0+0x7c>
 800b864:	f04f 35ff 	mov.w	r5, #4294967295
 800b868:	e7e4      	b.n	800b834 <_strtol_l.isra.0+0x94>
 800b86a:	2d00      	cmp	r5, #0
 800b86c:	da08      	bge.n	800b880 <_strtol_l.isra.0+0xe0>
 800b86e:	2322      	movs	r3, #34	; 0x22
 800b870:	f8ce 3000 	str.w	r3, [lr]
 800b874:	4638      	mov	r0, r7
 800b876:	2a00      	cmp	r2, #0
 800b878:	d09e      	beq.n	800b7b8 <_strtol_l.isra.0+0x18>
 800b87a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b87e:	e007      	b.n	800b890 <_strtol_l.isra.0+0xf0>
 800b880:	f1b8 0f00 	cmp.w	r8, #0
 800b884:	d000      	beq.n	800b888 <_strtol_l.isra.0+0xe8>
 800b886:	4240      	negs	r0, r0
 800b888:	2a00      	cmp	r2, #0
 800b88a:	d095      	beq.n	800b7b8 <_strtol_l.isra.0+0x18>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	d1f4      	bne.n	800b87a <_strtol_l.isra.0+0xda>
 800b890:	6011      	str	r1, [r2, #0]
 800b892:	e791      	b.n	800b7b8 <_strtol_l.isra.0+0x18>
 800b894:	2430      	movs	r4, #48	; 0x30
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1b2      	bne.n	800b800 <_strtol_l.isra.0+0x60>
 800b89a:	2308      	movs	r3, #8
 800b89c:	e7b0      	b.n	800b800 <_strtol_l.isra.0+0x60>
 800b89e:	2c30      	cmp	r4, #48	; 0x30
 800b8a0:	d0a3      	beq.n	800b7ea <_strtol_l.isra.0+0x4a>
 800b8a2:	230a      	movs	r3, #10
 800b8a4:	e7ac      	b.n	800b800 <_strtol_l.isra.0+0x60>
 800b8a6:	bf00      	nop
 800b8a8:	0800f309 	.word	0x0800f309

0800b8ac <strtol>:
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	460a      	mov	r2, r1
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	4802      	ldr	r0, [pc, #8]	; (800b8bc <strtol+0x10>)
 800b8b4:	6800      	ldr	r0, [r0, #0]
 800b8b6:	f7ff bf73 	b.w	800b7a0 <_strtol_l.isra.0>
 800b8ba:	bf00      	nop
 800b8bc:	20000010 	.word	0x20000010

0800b8c0 <_user_strerror>:
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	4770      	bx	lr

0800b8c4 <__swbuf_r>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	460e      	mov	r6, r1
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	b118      	cbz	r0, 800b8d6 <__swbuf_r+0x12>
 800b8ce:	6983      	ldr	r3, [r0, #24]
 800b8d0:	b90b      	cbnz	r3, 800b8d6 <__swbuf_r+0x12>
 800b8d2:	f001 f89b 	bl	800ca0c <__sinit>
 800b8d6:	4b21      	ldr	r3, [pc, #132]	; (800b95c <__swbuf_r+0x98>)
 800b8d8:	429c      	cmp	r4, r3
 800b8da:	d12b      	bne.n	800b934 <__swbuf_r+0x70>
 800b8dc:	686c      	ldr	r4, [r5, #4]
 800b8de:	69a3      	ldr	r3, [r4, #24]
 800b8e0:	60a3      	str	r3, [r4, #8]
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	071a      	lsls	r2, r3, #28
 800b8e6:	d52f      	bpl.n	800b948 <__swbuf_r+0x84>
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	b36b      	cbz	r3, 800b948 <__swbuf_r+0x84>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	6820      	ldr	r0, [r4, #0]
 800b8f0:	1ac0      	subs	r0, r0, r3
 800b8f2:	6963      	ldr	r3, [r4, #20]
 800b8f4:	b2f6      	uxtb	r6, r6
 800b8f6:	4283      	cmp	r3, r0
 800b8f8:	4637      	mov	r7, r6
 800b8fa:	dc04      	bgt.n	800b906 <__swbuf_r+0x42>
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 ffb2 	bl	800c868 <_fflush_r>
 800b904:	bb30      	cbnz	r0, 800b954 <__swbuf_r+0x90>
 800b906:	68a3      	ldr	r3, [r4, #8]
 800b908:	3b01      	subs	r3, #1
 800b90a:	60a3      	str	r3, [r4, #8]
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	6022      	str	r2, [r4, #0]
 800b912:	701e      	strb	r6, [r3, #0]
 800b914:	6963      	ldr	r3, [r4, #20]
 800b916:	3001      	adds	r0, #1
 800b918:	4283      	cmp	r3, r0
 800b91a:	d004      	beq.n	800b926 <__swbuf_r+0x62>
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	07db      	lsls	r3, r3, #31
 800b920:	d506      	bpl.n	800b930 <__swbuf_r+0x6c>
 800b922:	2e0a      	cmp	r6, #10
 800b924:	d104      	bne.n	800b930 <__swbuf_r+0x6c>
 800b926:	4621      	mov	r1, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	f000 ff9d 	bl	800c868 <_fflush_r>
 800b92e:	b988      	cbnz	r0, 800b954 <__swbuf_r+0x90>
 800b930:	4638      	mov	r0, r7
 800b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <__swbuf_r+0x9c>)
 800b936:	429c      	cmp	r4, r3
 800b938:	d101      	bne.n	800b93e <__swbuf_r+0x7a>
 800b93a:	68ac      	ldr	r4, [r5, #8]
 800b93c:	e7cf      	b.n	800b8de <__swbuf_r+0x1a>
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <__swbuf_r+0xa0>)
 800b940:	429c      	cmp	r4, r3
 800b942:	bf08      	it	eq
 800b944:	68ec      	ldreq	r4, [r5, #12]
 800b946:	e7ca      	b.n	800b8de <__swbuf_r+0x1a>
 800b948:	4621      	mov	r1, r4
 800b94a:	4628      	mov	r0, r5
 800b94c:	f000 f81e 	bl	800b98c <__swsetup_r>
 800b950:	2800      	cmp	r0, #0
 800b952:	d0cb      	beq.n	800b8ec <__swbuf_r+0x28>
 800b954:	f04f 37ff 	mov.w	r7, #4294967295
 800b958:	e7ea      	b.n	800b930 <__swbuf_r+0x6c>
 800b95a:	bf00      	nop
 800b95c:	0800f4c0 	.word	0x0800f4c0
 800b960:	0800f4e0 	.word	0x0800f4e0
 800b964:	0800f4a0 	.word	0x0800f4a0

0800b968 <_write_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d07      	ldr	r5, [pc, #28]	; (800b988 <_write_r+0x20>)
 800b96c:	4604      	mov	r4, r0
 800b96e:	4608      	mov	r0, r1
 800b970:	4611      	mov	r1, r2
 800b972:	2200      	movs	r2, #0
 800b974:	602a      	str	r2, [r5, #0]
 800b976:	461a      	mov	r2, r3
 800b978:	f7f6 fba6 	bl	80020c8 <_write>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_write_r+0x1e>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_write_r+0x1e>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	200005fc 	.word	0x200005fc

0800b98c <__swsetup_r>:
 800b98c:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <__swsetup_r+0xcc>)
 800b98e:	b570      	push	{r4, r5, r6, lr}
 800b990:	681d      	ldr	r5, [r3, #0]
 800b992:	4606      	mov	r6, r0
 800b994:	460c      	mov	r4, r1
 800b996:	b125      	cbz	r5, 800b9a2 <__swsetup_r+0x16>
 800b998:	69ab      	ldr	r3, [r5, #24]
 800b99a:	b913      	cbnz	r3, 800b9a2 <__swsetup_r+0x16>
 800b99c:	4628      	mov	r0, r5
 800b99e:	f001 f835 	bl	800ca0c <__sinit>
 800b9a2:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <__swsetup_r+0xd0>)
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	d10f      	bne.n	800b9c8 <__swsetup_r+0x3c>
 800b9a8:	686c      	ldr	r4, [r5, #4]
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9b0:	0719      	lsls	r1, r3, #28
 800b9b2:	d42c      	bmi.n	800ba0e <__swsetup_r+0x82>
 800b9b4:	06dd      	lsls	r5, r3, #27
 800b9b6:	d411      	bmi.n	800b9dc <__swsetup_r+0x50>
 800b9b8:	2309      	movs	r3, #9
 800b9ba:	6033      	str	r3, [r6, #0]
 800b9bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9c0:	81a3      	strh	r3, [r4, #12]
 800b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c6:	e03e      	b.n	800ba46 <__swsetup_r+0xba>
 800b9c8:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <__swsetup_r+0xd4>)
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	d101      	bne.n	800b9d2 <__swsetup_r+0x46>
 800b9ce:	68ac      	ldr	r4, [r5, #8]
 800b9d0:	e7eb      	b.n	800b9aa <__swsetup_r+0x1e>
 800b9d2:	4b24      	ldr	r3, [pc, #144]	; (800ba64 <__swsetup_r+0xd8>)
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	bf08      	it	eq
 800b9d8:	68ec      	ldreq	r4, [r5, #12]
 800b9da:	e7e6      	b.n	800b9aa <__swsetup_r+0x1e>
 800b9dc:	0758      	lsls	r0, r3, #29
 800b9de:	d512      	bpl.n	800ba06 <__swsetup_r+0x7a>
 800b9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e2:	b141      	cbz	r1, 800b9f6 <__swsetup_r+0x6a>
 800b9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	d002      	beq.n	800b9f2 <__swsetup_r+0x66>
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7fe f855 	bl	8009a9c <_free_r>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6063      	str	r3, [r4, #4]
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f043 0308 	orr.w	r3, r3, #8
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	b94b      	cbnz	r3, 800ba26 <__swsetup_r+0x9a>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba1c:	d003      	beq.n	800ba26 <__swsetup_r+0x9a>
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4630      	mov	r0, r6
 800ba22:	f001 fc1f 	bl	800d264 <__smakebuf_r>
 800ba26:	89a0      	ldrh	r0, [r4, #12]
 800ba28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba2c:	f010 0301 	ands.w	r3, r0, #1
 800ba30:	d00a      	beq.n	800ba48 <__swsetup_r+0xbc>
 800ba32:	2300      	movs	r3, #0
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	6963      	ldr	r3, [r4, #20]
 800ba38:	425b      	negs	r3, r3
 800ba3a:	61a3      	str	r3, [r4, #24]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	b943      	cbnz	r3, 800ba52 <__swsetup_r+0xc6>
 800ba40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba44:	d1ba      	bne.n	800b9bc <__swsetup_r+0x30>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	0781      	lsls	r1, r0, #30
 800ba4a:	bf58      	it	pl
 800ba4c:	6963      	ldrpl	r3, [r4, #20]
 800ba4e:	60a3      	str	r3, [r4, #8]
 800ba50:	e7f4      	b.n	800ba3c <__swsetup_r+0xb0>
 800ba52:	2000      	movs	r0, #0
 800ba54:	e7f7      	b.n	800ba46 <__swsetup_r+0xba>
 800ba56:	bf00      	nop
 800ba58:	20000010 	.word	0x20000010
 800ba5c:	0800f4c0 	.word	0x0800f4c0
 800ba60:	0800f4e0 	.word	0x0800f4e0
 800ba64:	0800f4a0 	.word	0x0800f4a0

0800ba68 <quorem>:
 800ba68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	6903      	ldr	r3, [r0, #16]
 800ba6e:	690c      	ldr	r4, [r1, #16]
 800ba70:	42a3      	cmp	r3, r4
 800ba72:	4607      	mov	r7, r0
 800ba74:	f2c0 8081 	blt.w	800bb7a <quorem+0x112>
 800ba78:	3c01      	subs	r4, #1
 800ba7a:	f101 0814 	add.w	r8, r1, #20
 800ba7e:	f100 0514 	add.w	r5, r0, #20
 800ba82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba90:	3301      	adds	r3, #1
 800ba92:	429a      	cmp	r2, r3
 800ba94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800baa0:	d331      	bcc.n	800bb06 <quorem+0x9e>
 800baa2:	f04f 0e00 	mov.w	lr, #0
 800baa6:	4640      	mov	r0, r8
 800baa8:	46ac      	mov	ip, r5
 800baaa:	46f2      	mov	sl, lr
 800baac:	f850 2b04 	ldr.w	r2, [r0], #4
 800bab0:	b293      	uxth	r3, r2
 800bab2:	fb06 e303 	mla	r3, r6, r3, lr
 800bab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800baba:	b29b      	uxth	r3, r3
 800babc:	ebaa 0303 	sub.w	r3, sl, r3
 800bac0:	0c12      	lsrs	r2, r2, #16
 800bac2:	f8dc a000 	ldr.w	sl, [ip]
 800bac6:	fb06 e202 	mla	r2, r6, r2, lr
 800baca:	fa13 f38a 	uxtah	r3, r3, sl
 800bace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bad2:	fa1f fa82 	uxth.w	sl, r2
 800bad6:	f8dc 2000 	ldr.w	r2, [ip]
 800bada:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bae8:	4581      	cmp	r9, r0
 800baea:	f84c 3b04 	str.w	r3, [ip], #4
 800baee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800baf2:	d2db      	bcs.n	800baac <quorem+0x44>
 800baf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800baf8:	b92b      	cbnz	r3, 800bb06 <quorem+0x9e>
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	3b04      	subs	r3, #4
 800bafe:	429d      	cmp	r5, r3
 800bb00:	461a      	mov	r2, r3
 800bb02:	d32e      	bcc.n	800bb62 <quorem+0xfa>
 800bb04:	613c      	str	r4, [r7, #16]
 800bb06:	4638      	mov	r0, r7
 800bb08:	f001 fed0 	bl	800d8ac <__mcmp>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	db24      	blt.n	800bb5a <quorem+0xf2>
 800bb10:	3601      	adds	r6, #1
 800bb12:	4628      	mov	r0, r5
 800bb14:	f04f 0c00 	mov.w	ip, #0
 800bb18:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb1c:	f8d0 e000 	ldr.w	lr, [r0]
 800bb20:	b293      	uxth	r3, r2
 800bb22:	ebac 0303 	sub.w	r3, ip, r3
 800bb26:	0c12      	lsrs	r2, r2, #16
 800bb28:	fa13 f38e 	uxtah	r3, r3, lr
 800bb2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb3a:	45c1      	cmp	r9, r8
 800bb3c:	f840 3b04 	str.w	r3, [r0], #4
 800bb40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb44:	d2e8      	bcs.n	800bb18 <quorem+0xb0>
 800bb46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb4e:	b922      	cbnz	r2, 800bb5a <quorem+0xf2>
 800bb50:	3b04      	subs	r3, #4
 800bb52:	429d      	cmp	r5, r3
 800bb54:	461a      	mov	r2, r3
 800bb56:	d30a      	bcc.n	800bb6e <quorem+0x106>
 800bb58:	613c      	str	r4, [r7, #16]
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	b003      	add	sp, #12
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	3b04      	subs	r3, #4
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	d1cc      	bne.n	800bb04 <quorem+0x9c>
 800bb6a:	3c01      	subs	r4, #1
 800bb6c:	e7c7      	b.n	800bafe <quorem+0x96>
 800bb6e:	6812      	ldr	r2, [r2, #0]
 800bb70:	3b04      	subs	r3, #4
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d1f0      	bne.n	800bb58 <quorem+0xf0>
 800bb76:	3c01      	subs	r4, #1
 800bb78:	e7eb      	b.n	800bb52 <quorem+0xea>
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	e7ee      	b.n	800bb5c <quorem+0xf4>
	...

0800bb80 <_dtoa_r>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bb86:	b099      	sub	sp, #100	; 0x64
 800bb88:	4616      	mov	r6, r2
 800bb8a:	461f      	mov	r7, r3
 800bb8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bb90:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bb94:	4605      	mov	r5, r0
 800bb96:	b974      	cbnz	r4, 800bbb6 <_dtoa_r+0x36>
 800bb98:	2010      	movs	r0, #16
 800bb9a:	f7fd ff59 	bl	8009a50 <malloc>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	6268      	str	r0, [r5, #36]	; 0x24
 800bba2:	b920      	cbnz	r0, 800bbae <_dtoa_r+0x2e>
 800bba4:	4ba8      	ldr	r3, [pc, #672]	; (800be48 <_dtoa_r+0x2c8>)
 800bba6:	21ea      	movs	r1, #234	; 0xea
 800bba8:	48a8      	ldr	r0, [pc, #672]	; (800be4c <_dtoa_r+0x2cc>)
 800bbaa:	f002 fb97 	bl	800e2dc <__assert_func>
 800bbae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbb2:	6004      	str	r4, [r0, #0]
 800bbb4:	60c4      	str	r4, [r0, #12]
 800bbb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbb8:	6819      	ldr	r1, [r3, #0]
 800bbba:	b151      	cbz	r1, 800bbd2 <_dtoa_r+0x52>
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	604a      	str	r2, [r1, #4]
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	4093      	lsls	r3, r2
 800bbc4:	608b      	str	r3, [r1, #8]
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f001 fbea 	bl	800d3a0 <_Bfree>
 800bbcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	1e3b      	subs	r3, r7, #0
 800bbd4:	bfb9      	ittee	lt
 800bbd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbda:	9305      	strlt	r3, [sp, #20]
 800bbdc:	2300      	movge	r3, #0
 800bbde:	f8c8 3000 	strge.w	r3, [r8]
 800bbe2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bbe6:	4b9a      	ldr	r3, [pc, #616]	; (800be50 <_dtoa_r+0x2d0>)
 800bbe8:	bfbc      	itt	lt
 800bbea:	2201      	movlt	r2, #1
 800bbec:	f8c8 2000 	strlt.w	r2, [r8]
 800bbf0:	ea33 0309 	bics.w	r3, r3, r9
 800bbf4:	d119      	bne.n	800bc2a <_dtoa_r+0xaa>
 800bbf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbf8:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc02:	4333      	orrs	r3, r6
 800bc04:	f000 8581 	beq.w	800c70a <_dtoa_r+0xb8a>
 800bc08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc0a:	b953      	cbnz	r3, 800bc22 <_dtoa_r+0xa2>
 800bc0c:	4b91      	ldr	r3, [pc, #580]	; (800be54 <_dtoa_r+0x2d4>)
 800bc0e:	e022      	b.n	800bc56 <_dtoa_r+0xd6>
 800bc10:	4b91      	ldr	r3, [pc, #580]	; (800be58 <_dtoa_r+0x2d8>)
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	3308      	adds	r3, #8
 800bc16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	9808      	ldr	r0, [sp, #32]
 800bc1c:	b019      	add	sp, #100	; 0x64
 800bc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc22:	4b8c      	ldr	r3, [pc, #560]	; (800be54 <_dtoa_r+0x2d4>)
 800bc24:	9308      	str	r3, [sp, #32]
 800bc26:	3303      	adds	r3, #3
 800bc28:	e7f5      	b.n	800bc16 <_dtoa_r+0x96>
 800bc2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc2e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bc32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc36:	2200      	movs	r2, #0
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f7f4 ff2d 	bl	8000a98 <__aeabi_dcmpeq>
 800bc3e:	4680      	mov	r8, r0
 800bc40:	b158      	cbz	r0, 800bc5a <_dtoa_r+0xda>
 800bc42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc44:	2301      	movs	r3, #1
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 855a 	beq.w	800c704 <_dtoa_r+0xb84>
 800bc50:	4882      	ldr	r0, [pc, #520]	; (800be5c <_dtoa_r+0x2dc>)
 800bc52:	6018      	str	r0, [r3, #0]
 800bc54:	1e43      	subs	r3, r0, #1
 800bc56:	9308      	str	r3, [sp, #32]
 800bc58:	e7df      	b.n	800bc1a <_dtoa_r+0x9a>
 800bc5a:	ab16      	add	r3, sp, #88	; 0x58
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	ab17      	add	r3, sp, #92	; 0x5c
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	4628      	mov	r0, r5
 800bc64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc68:	f001 ff40 	bl	800daec <__d2b>
 800bc6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc70:	4682      	mov	sl, r0
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d07e      	beq.n	800bd74 <_dtoa_r+0x1f4>
 800bc76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bc7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc84:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bc88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bc8c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bc90:	4b73      	ldr	r3, [pc, #460]	; (800be60 <_dtoa_r+0x2e0>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	f7f4 fae0 	bl	8000258 <__aeabi_dsub>
 800bc98:	a365      	add	r3, pc, #404	; (adr r3, 800be30 <_dtoa_r+0x2b0>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fc93 	bl	80005c8 <__aeabi_dmul>
 800bca2:	a365      	add	r3, pc, #404	; (adr r3, 800be38 <_dtoa_r+0x2b8>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fad8 	bl	800025c <__adddf3>
 800bcac:	4606      	mov	r6, r0
 800bcae:	4620      	mov	r0, r4
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f7f4 fc1f 	bl	80004f4 <__aeabi_i2d>
 800bcb6:	a362      	add	r3, pc, #392	; (adr r3, 800be40 <_dtoa_r+0x2c0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fc84 	bl	80005c8 <__aeabi_dmul>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	f7f4 fac8 	bl	800025c <__adddf3>
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	f7f4 ff2a 	bl	8000b28 <__aeabi_d2iz>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4681      	mov	r9, r0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 fee5 	bl	8000aac <__aeabi_dcmplt>
 800bce2:	b148      	cbz	r0, 800bcf8 <_dtoa_r+0x178>
 800bce4:	4648      	mov	r0, r9
 800bce6:	f7f4 fc05 	bl	80004f4 <__aeabi_i2d>
 800bcea:	4632      	mov	r2, r6
 800bcec:	463b      	mov	r3, r7
 800bcee:	f7f4 fed3 	bl	8000a98 <__aeabi_dcmpeq>
 800bcf2:	b908      	cbnz	r0, 800bcf8 <_dtoa_r+0x178>
 800bcf4:	f109 39ff 	add.w	r9, r9, #4294967295
 800bcf8:	f1b9 0f16 	cmp.w	r9, #22
 800bcfc:	d857      	bhi.n	800bdae <_dtoa_r+0x22e>
 800bcfe:	4b59      	ldr	r3, [pc, #356]	; (800be64 <_dtoa_r+0x2e4>)
 800bd00:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd0c:	f7f4 fece 	bl	8000aac <__aeabi_dcmplt>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d04e      	beq.n	800bdb2 <_dtoa_r+0x232>
 800bd14:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd18:	2300      	movs	r3, #0
 800bd1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd1e:	1b1c      	subs	r4, r3, r4
 800bd20:	1e63      	subs	r3, r4, #1
 800bd22:	9309      	str	r3, [sp, #36]	; 0x24
 800bd24:	bf45      	ittet	mi
 800bd26:	f1c4 0301 	rsbmi	r3, r4, #1
 800bd2a:	9306      	strmi	r3, [sp, #24]
 800bd2c:	2300      	movpl	r3, #0
 800bd2e:	2300      	movmi	r3, #0
 800bd30:	bf4c      	ite	mi
 800bd32:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bd34:	9306      	strpl	r3, [sp, #24]
 800bd36:	f1b9 0f00 	cmp.w	r9, #0
 800bd3a:	db3c      	blt.n	800bdb6 <_dtoa_r+0x236>
 800bd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd3e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bd42:	444b      	add	r3, r9
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	2300      	movs	r3, #0
 800bd48:	930a      	str	r3, [sp, #40]	; 0x28
 800bd4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	f200 808d 	bhi.w	800be6c <_dtoa_r+0x2ec>
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	bfc4      	itt	gt
 800bd56:	3b04      	subgt	r3, #4
 800bd58:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bd5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd5c:	f1a3 0302 	sub.w	r3, r3, #2
 800bd60:	bfcc      	ite	gt
 800bd62:	2400      	movgt	r4, #0
 800bd64:	2401      	movle	r4, #1
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	f200 808c 	bhi.w	800be84 <_dtoa_r+0x304>
 800bd6c:	e8df f003 	tbb	[pc, r3]
 800bd70:	5b4d4f2d 	.word	0x5b4d4f2d
 800bd74:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bd78:	441c      	add	r4, r3
 800bd7a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bd7e:	2b20      	cmp	r3, #32
 800bd80:	bfc3      	ittte	gt
 800bd82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd86:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bd8a:	fa09 f303 	lslgt.w	r3, r9, r3
 800bd8e:	f1c3 0320 	rsble	r3, r3, #32
 800bd92:	bfc6      	itte	gt
 800bd94:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bd98:	4318      	orrgt	r0, r3
 800bd9a:	fa06 f003 	lslle.w	r0, r6, r3
 800bd9e:	f7f4 fb99 	bl	80004d4 <__aeabi_ui2d>
 800bda2:	2301      	movs	r3, #1
 800bda4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bda8:	3c01      	subs	r4, #1
 800bdaa:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdac:	e770      	b.n	800bc90 <_dtoa_r+0x110>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7b3      	b.n	800bd1a <_dtoa_r+0x19a>
 800bdb2:	900f      	str	r0, [sp, #60]	; 0x3c
 800bdb4:	e7b2      	b.n	800bd1c <_dtoa_r+0x19c>
 800bdb6:	9b06      	ldr	r3, [sp, #24]
 800bdb8:	eba3 0309 	sub.w	r3, r3, r9
 800bdbc:	9306      	str	r3, [sp, #24]
 800bdbe:	f1c9 0300 	rsb	r3, r9, #0
 800bdc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	930e      	str	r3, [sp, #56]	; 0x38
 800bdc8:	e7bf      	b.n	800bd4a <_dtoa_r+0x1ca>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dc5a      	bgt.n	800be8a <_dtoa_r+0x30a>
 800bdd4:	f04f 0b01 	mov.w	fp, #1
 800bdd8:	f8cd b008 	str.w	fp, [sp, #8]
 800bddc:	465b      	mov	r3, fp
 800bdde:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800bde2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bde4:	2200      	movs	r2, #0
 800bde6:	6042      	str	r2, [r0, #4]
 800bde8:	2204      	movs	r2, #4
 800bdea:	f102 0614 	add.w	r6, r2, #20
 800bdee:	429e      	cmp	r6, r3
 800bdf0:	6841      	ldr	r1, [r0, #4]
 800bdf2:	d950      	bls.n	800be96 <_dtoa_r+0x316>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f001 fa93 	bl	800d320 <_Balloc>
 800bdfa:	9008      	str	r0, [sp, #32]
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d14e      	bne.n	800be9e <_dtoa_r+0x31e>
 800be00:	4b19      	ldr	r3, [pc, #100]	; (800be68 <_dtoa_r+0x2e8>)
 800be02:	4602      	mov	r2, r0
 800be04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be08:	e6ce      	b.n	800bba8 <_dtoa_r+0x28>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7de      	b.n	800bdcc <_dtoa_r+0x24c>
 800be0e:	2300      	movs	r3, #0
 800be10:	930b      	str	r3, [sp, #44]	; 0x2c
 800be12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be14:	eb09 0b03 	add.w	fp, r9, r3
 800be18:	f10b 0301 	add.w	r3, fp, #1
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	bfb8      	it	lt
 800be22:	2301      	movlt	r3, #1
 800be24:	e7dd      	b.n	800bde2 <_dtoa_r+0x262>
 800be26:	2301      	movs	r3, #1
 800be28:	e7f2      	b.n	800be10 <_dtoa_r+0x290>
 800be2a:	bf00      	nop
 800be2c:	f3af 8000 	nop.w
 800be30:	636f4361 	.word	0x636f4361
 800be34:	3fd287a7 	.word	0x3fd287a7
 800be38:	8b60c8b3 	.word	0x8b60c8b3
 800be3c:	3fc68a28 	.word	0x3fc68a28
 800be40:	509f79fb 	.word	0x509f79fb
 800be44:	3fd34413 	.word	0x3fd34413
 800be48:	0800f416 	.word	0x0800f416
 800be4c:	0800f42d 	.word	0x0800f42d
 800be50:	7ff00000 	.word	0x7ff00000
 800be54:	0800f412 	.word	0x0800f412
 800be58:	0800f409 	.word	0x0800f409
 800be5c:	0800ebf9 	.word	0x0800ebf9
 800be60:	3ff80000 	.word	0x3ff80000
 800be64:	0800f608 	.word	0x0800f608
 800be68:	0800f48c 	.word	0x0800f48c
 800be6c:	2401      	movs	r4, #1
 800be6e:	2300      	movs	r3, #0
 800be70:	9322      	str	r3, [sp, #136]	; 0x88
 800be72:	940b      	str	r4, [sp, #44]	; 0x2c
 800be74:	f04f 3bff 	mov.w	fp, #4294967295
 800be78:	2200      	movs	r2, #0
 800be7a:	f8cd b008 	str.w	fp, [sp, #8]
 800be7e:	2312      	movs	r3, #18
 800be80:	9223      	str	r2, [sp, #140]	; 0x8c
 800be82:	e7ae      	b.n	800bde2 <_dtoa_r+0x262>
 800be84:	2301      	movs	r3, #1
 800be86:	930b      	str	r3, [sp, #44]	; 0x2c
 800be88:	e7f4      	b.n	800be74 <_dtoa_r+0x2f4>
 800be8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800be8e:	f8cd b008 	str.w	fp, [sp, #8]
 800be92:	465b      	mov	r3, fp
 800be94:	e7a5      	b.n	800bde2 <_dtoa_r+0x262>
 800be96:	3101      	adds	r1, #1
 800be98:	6041      	str	r1, [r0, #4]
 800be9a:	0052      	lsls	r2, r2, #1
 800be9c:	e7a5      	b.n	800bdea <_dtoa_r+0x26a>
 800be9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bea0:	9a08      	ldr	r2, [sp, #32]
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	9b02      	ldr	r3, [sp, #8]
 800bea6:	2b0e      	cmp	r3, #14
 800bea8:	f200 80a8 	bhi.w	800bffc <_dtoa_r+0x47c>
 800beac:	2c00      	cmp	r4, #0
 800beae:	f000 80a5 	beq.w	800bffc <_dtoa_r+0x47c>
 800beb2:	f1b9 0f00 	cmp.w	r9, #0
 800beb6:	dd34      	ble.n	800bf22 <_dtoa_r+0x3a2>
 800beb8:	4a9a      	ldr	r2, [pc, #616]	; (800c124 <_dtoa_r+0x5a4>)
 800beba:	f009 030f 	and.w	r3, r9, #15
 800bebe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bec6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800beca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bece:	ea4f 1429 	mov.w	r4, r9, asr #4
 800bed2:	d016      	beq.n	800bf02 <_dtoa_r+0x382>
 800bed4:	4b94      	ldr	r3, [pc, #592]	; (800c128 <_dtoa_r+0x5a8>)
 800bed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800beda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bede:	f7f4 fc9d 	bl	800081c <__aeabi_ddiv>
 800bee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bee6:	f004 040f 	and.w	r4, r4, #15
 800beea:	2703      	movs	r7, #3
 800beec:	4e8e      	ldr	r6, [pc, #568]	; (800c128 <_dtoa_r+0x5a8>)
 800beee:	b954      	cbnz	r4, 800bf06 <_dtoa_r+0x386>
 800bef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bef8:	f7f4 fc90 	bl	800081c <__aeabi_ddiv>
 800befc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf00:	e029      	b.n	800bf56 <_dtoa_r+0x3d6>
 800bf02:	2702      	movs	r7, #2
 800bf04:	e7f2      	b.n	800beec <_dtoa_r+0x36c>
 800bf06:	07e1      	lsls	r1, r4, #31
 800bf08:	d508      	bpl.n	800bf1c <_dtoa_r+0x39c>
 800bf0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf12:	f7f4 fb59 	bl	80005c8 <__aeabi_dmul>
 800bf16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf1a:	3701      	adds	r7, #1
 800bf1c:	1064      	asrs	r4, r4, #1
 800bf1e:	3608      	adds	r6, #8
 800bf20:	e7e5      	b.n	800beee <_dtoa_r+0x36e>
 800bf22:	f000 80a5 	beq.w	800c070 <_dtoa_r+0x4f0>
 800bf26:	f1c9 0400 	rsb	r4, r9, #0
 800bf2a:	4b7e      	ldr	r3, [pc, #504]	; (800c124 <_dtoa_r+0x5a4>)
 800bf2c:	4e7e      	ldr	r6, [pc, #504]	; (800c128 <_dtoa_r+0x5a8>)
 800bf2e:	f004 020f 	and.w	r2, r4, #15
 800bf32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf3e:	f7f4 fb43 	bl	80005c8 <__aeabi_dmul>
 800bf42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf46:	1124      	asrs	r4, r4, #4
 800bf48:	2300      	movs	r3, #0
 800bf4a:	2702      	movs	r7, #2
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	f040 8084 	bne.w	800c05a <_dtoa_r+0x4da>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1d2      	bne.n	800befc <_dtoa_r+0x37c>
 800bf56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 808b 	beq.w	800c074 <_dtoa_r+0x4f4>
 800bf5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bf62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bf66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf6a:	4b70      	ldr	r3, [pc, #448]	; (800c12c <_dtoa_r+0x5ac>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f7f4 fd9d 	bl	8000aac <__aeabi_dcmplt>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d07e      	beq.n	800c074 <_dtoa_r+0x4f4>
 800bf76:	9b02      	ldr	r3, [sp, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d07b      	beq.n	800c074 <_dtoa_r+0x4f4>
 800bf7c:	f1bb 0f00 	cmp.w	fp, #0
 800bf80:	dd38      	ble.n	800bff4 <_dtoa_r+0x474>
 800bf82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf86:	4b6a      	ldr	r3, [pc, #424]	; (800c130 <_dtoa_r+0x5b0>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f7f4 fb1d 	bl	80005c8 <__aeabi_dmul>
 800bf8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf92:	f109 38ff 	add.w	r8, r9, #4294967295
 800bf96:	3701      	adds	r7, #1
 800bf98:	465c      	mov	r4, fp
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7f4 faaa 	bl	80004f4 <__aeabi_i2d>
 800bfa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfa4:	f7f4 fb10 	bl	80005c8 <__aeabi_dmul>
 800bfa8:	4b62      	ldr	r3, [pc, #392]	; (800c134 <_dtoa_r+0x5b4>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f7f4 f956 	bl	800025c <__adddf3>
 800bfb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bfb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bfb8:	9611      	str	r6, [sp, #68]	; 0x44
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d15d      	bne.n	800c07a <_dtoa_r+0x4fa>
 800bfbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfc2:	4b5d      	ldr	r3, [pc, #372]	; (800c138 <_dtoa_r+0x5b8>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f7f4 f947 	bl	8000258 <__aeabi_dsub>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfd4:	4633      	mov	r3, r6
 800bfd6:	f7f4 fd87 	bl	8000ae8 <__aeabi_dcmpgt>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f040 829e 	bne.w	800c51c <_dtoa_r+0x99c>
 800bfe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfe6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bfea:	f7f4 fd5f 	bl	8000aac <__aeabi_dcmplt>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f040 8292 	bne.w	800c518 <_dtoa_r+0x998>
 800bff4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bff8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f2c0 8153 	blt.w	800c2aa <_dtoa_r+0x72a>
 800c004:	f1b9 0f0e 	cmp.w	r9, #14
 800c008:	f300 814f 	bgt.w	800c2aa <_dtoa_r+0x72a>
 800c00c:	4b45      	ldr	r3, [pc, #276]	; (800c124 <_dtoa_r+0x5a4>)
 800c00e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c012:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c016:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c01a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f280 80db 	bge.w	800c1d8 <_dtoa_r+0x658>
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f300 80d7 	bgt.w	800c1d8 <_dtoa_r+0x658>
 800c02a:	f040 8274 	bne.w	800c516 <_dtoa_r+0x996>
 800c02e:	4b42      	ldr	r3, [pc, #264]	; (800c138 <_dtoa_r+0x5b8>)
 800c030:	2200      	movs	r2, #0
 800c032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c036:	f7f4 fac7 	bl	80005c8 <__aeabi_dmul>
 800c03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03e:	f7f4 fd49 	bl	8000ad4 <__aeabi_dcmpge>
 800c042:	9c02      	ldr	r4, [sp, #8]
 800c044:	4626      	mov	r6, r4
 800c046:	2800      	cmp	r0, #0
 800c048:	f040 824a 	bne.w	800c4e0 <_dtoa_r+0x960>
 800c04c:	9f08      	ldr	r7, [sp, #32]
 800c04e:	2331      	movs	r3, #49	; 0x31
 800c050:	f807 3b01 	strb.w	r3, [r7], #1
 800c054:	f109 0901 	add.w	r9, r9, #1
 800c058:	e246      	b.n	800c4e8 <_dtoa_r+0x968>
 800c05a:	07e2      	lsls	r2, r4, #31
 800c05c:	d505      	bpl.n	800c06a <_dtoa_r+0x4ea>
 800c05e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c062:	f7f4 fab1 	bl	80005c8 <__aeabi_dmul>
 800c066:	3701      	adds	r7, #1
 800c068:	2301      	movs	r3, #1
 800c06a:	1064      	asrs	r4, r4, #1
 800c06c:	3608      	adds	r6, #8
 800c06e:	e76d      	b.n	800bf4c <_dtoa_r+0x3cc>
 800c070:	2702      	movs	r7, #2
 800c072:	e770      	b.n	800bf56 <_dtoa_r+0x3d6>
 800c074:	9c02      	ldr	r4, [sp, #8]
 800c076:	46c8      	mov	r8, r9
 800c078:	e78f      	b.n	800bf9a <_dtoa_r+0x41a>
 800c07a:	9908      	ldr	r1, [sp, #32]
 800c07c:	4b29      	ldr	r3, [pc, #164]	; (800c124 <_dtoa_r+0x5a4>)
 800c07e:	4421      	add	r1, r4
 800c080:	9112      	str	r1, [sp, #72]	; 0x48
 800c082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c084:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c088:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c08c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c090:	2900      	cmp	r1, #0
 800c092:	d055      	beq.n	800c140 <_dtoa_r+0x5c0>
 800c094:	4929      	ldr	r1, [pc, #164]	; (800c13c <_dtoa_r+0x5bc>)
 800c096:	2000      	movs	r0, #0
 800c098:	f7f4 fbc0 	bl	800081c <__aeabi_ddiv>
 800c09c:	463b      	mov	r3, r7
 800c09e:	4632      	mov	r2, r6
 800c0a0:	f7f4 f8da 	bl	8000258 <__aeabi_dsub>
 800c0a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0a8:	9f08      	ldr	r7, [sp, #32]
 800c0aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ae:	f7f4 fd3b 	bl	8000b28 <__aeabi_d2iz>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	f7f4 fa1e 	bl	80004f4 <__aeabi_i2d>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0c0:	f7f4 f8ca 	bl	8000258 <__aeabi_dsub>
 800c0c4:	3430      	adds	r4, #48	; 0x30
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0ce:	f807 4b01 	strb.w	r4, [r7], #1
 800c0d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0d6:	f7f4 fce9 	bl	8000aac <__aeabi_dcmplt>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d174      	bne.n	800c1c8 <_dtoa_r+0x648>
 800c0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e2:	4912      	ldr	r1, [pc, #72]	; (800c12c <_dtoa_r+0x5ac>)
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f7f4 f8b7 	bl	8000258 <__aeabi_dsub>
 800c0ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0ee:	f7f4 fcdd 	bl	8000aac <__aeabi_dcmplt>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	f040 80b6 	bne.w	800c264 <_dtoa_r+0x6e4>
 800c0f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0fa:	429f      	cmp	r7, r3
 800c0fc:	f43f af7a 	beq.w	800bff4 <_dtoa_r+0x474>
 800c100:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c104:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <_dtoa_r+0x5b0>)
 800c106:	2200      	movs	r2, #0
 800c108:	f7f4 fa5e 	bl	80005c8 <__aeabi_dmul>
 800c10c:	4b08      	ldr	r3, [pc, #32]	; (800c130 <_dtoa_r+0x5b0>)
 800c10e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c112:	2200      	movs	r2, #0
 800c114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c118:	f7f4 fa56 	bl	80005c8 <__aeabi_dmul>
 800c11c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c120:	e7c3      	b.n	800c0aa <_dtoa_r+0x52a>
 800c122:	bf00      	nop
 800c124:	0800f608 	.word	0x0800f608
 800c128:	0800f5e0 	.word	0x0800f5e0
 800c12c:	3ff00000 	.word	0x3ff00000
 800c130:	40240000 	.word	0x40240000
 800c134:	401c0000 	.word	0x401c0000
 800c138:	40140000 	.word	0x40140000
 800c13c:	3fe00000 	.word	0x3fe00000
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fa40 	bl	80005c8 <__aeabi_dmul>
 800c148:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c14c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c14e:	9c08      	ldr	r4, [sp, #32]
 800c150:	9314      	str	r3, [sp, #80]	; 0x50
 800c152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c156:	f7f4 fce7 	bl	8000b28 <__aeabi_d2iz>
 800c15a:	9015      	str	r0, [sp, #84]	; 0x54
 800c15c:	f7f4 f9ca 	bl	80004f4 <__aeabi_i2d>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c168:	f7f4 f876 	bl	8000258 <__aeabi_dsub>
 800c16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c16e:	3330      	adds	r3, #48	; 0x30
 800c170:	f804 3b01 	strb.w	r3, [r4], #1
 800c174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c176:	429c      	cmp	r4, r3
 800c178:	4606      	mov	r6, r0
 800c17a:	460f      	mov	r7, r1
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	d124      	bne.n	800c1cc <_dtoa_r+0x64c>
 800c182:	4bb2      	ldr	r3, [pc, #712]	; (800c44c <_dtoa_r+0x8cc>)
 800c184:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c188:	f7f4 f868 	bl	800025c <__adddf3>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 fca8 	bl	8000ae8 <__aeabi_dcmpgt>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d162      	bne.n	800c262 <_dtoa_r+0x6e2>
 800c19c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1a0:	49aa      	ldr	r1, [pc, #680]	; (800c44c <_dtoa_r+0x8cc>)
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	f7f4 f858 	bl	8000258 <__aeabi_dsub>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	f7f4 fc7c 	bl	8000aac <__aeabi_dcmplt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f43f af1d 	beq.w	800bff4 <_dtoa_r+0x474>
 800c1ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c1bc:	1e7b      	subs	r3, r7, #1
 800c1be:	9314      	str	r3, [sp, #80]	; 0x50
 800c1c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c1c4:	2b30      	cmp	r3, #48	; 0x30
 800c1c6:	d0f8      	beq.n	800c1ba <_dtoa_r+0x63a>
 800c1c8:	46c1      	mov	r9, r8
 800c1ca:	e03a      	b.n	800c242 <_dtoa_r+0x6c2>
 800c1cc:	4ba0      	ldr	r3, [pc, #640]	; (800c450 <_dtoa_r+0x8d0>)
 800c1ce:	f7f4 f9fb 	bl	80005c8 <__aeabi_dmul>
 800c1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d6:	e7bc      	b.n	800c152 <_dtoa_r+0x5d2>
 800c1d8:	9f08      	ldr	r7, [sp, #32]
 800c1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e2:	f7f4 fb1b 	bl	800081c <__aeabi_ddiv>
 800c1e6:	f7f4 fc9f 	bl	8000b28 <__aeabi_d2iz>
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	f7f4 f982 	bl	80004f4 <__aeabi_i2d>
 800c1f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f4:	f7f4 f9e8 	bl	80005c8 <__aeabi_dmul>
 800c1f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4602      	mov	r2, r0
 800c200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c204:	f7f4 f828 	bl	8000258 <__aeabi_dsub>
 800c208:	f807 6b01 	strb.w	r6, [r7], #1
 800c20c:	9e08      	ldr	r6, [sp, #32]
 800c20e:	9b02      	ldr	r3, [sp, #8]
 800c210:	1bbe      	subs	r6, r7, r6
 800c212:	42b3      	cmp	r3, r6
 800c214:	d13a      	bne.n	800c28c <_dtoa_r+0x70c>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	f7f4 f81f 	bl	800025c <__adddf3>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c22a:	f7f4 fc5d 	bl	8000ae8 <__aeabi_dcmpgt>
 800c22e:	bb58      	cbnz	r0, 800c288 <_dtoa_r+0x708>
 800c230:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c238:	f7f4 fc2e 	bl	8000a98 <__aeabi_dcmpeq>
 800c23c:	b108      	cbz	r0, 800c242 <_dtoa_r+0x6c2>
 800c23e:	07e1      	lsls	r1, r4, #31
 800c240:	d422      	bmi.n	800c288 <_dtoa_r+0x708>
 800c242:	4628      	mov	r0, r5
 800c244:	4651      	mov	r1, sl
 800c246:	f001 f8ab 	bl	800d3a0 <_Bfree>
 800c24a:	2300      	movs	r3, #0
 800c24c:	703b      	strb	r3, [r7, #0]
 800c24e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c250:	f109 0001 	add.w	r0, r9, #1
 800c254:	6018      	str	r0, [r3, #0]
 800c256:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f43f acde 	beq.w	800bc1a <_dtoa_r+0x9a>
 800c25e:	601f      	str	r7, [r3, #0]
 800c260:	e4db      	b.n	800bc1a <_dtoa_r+0x9a>
 800c262:	4627      	mov	r7, r4
 800c264:	463b      	mov	r3, r7
 800c266:	461f      	mov	r7, r3
 800c268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c26c:	2a39      	cmp	r2, #57	; 0x39
 800c26e:	d107      	bne.n	800c280 <_dtoa_r+0x700>
 800c270:	9a08      	ldr	r2, [sp, #32]
 800c272:	429a      	cmp	r2, r3
 800c274:	d1f7      	bne.n	800c266 <_dtoa_r+0x6e6>
 800c276:	9908      	ldr	r1, [sp, #32]
 800c278:	2230      	movs	r2, #48	; 0x30
 800c27a:	f108 0801 	add.w	r8, r8, #1
 800c27e:	700a      	strb	r2, [r1, #0]
 800c280:	781a      	ldrb	r2, [r3, #0]
 800c282:	3201      	adds	r2, #1
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	e79f      	b.n	800c1c8 <_dtoa_r+0x648>
 800c288:	46c8      	mov	r8, r9
 800c28a:	e7eb      	b.n	800c264 <_dtoa_r+0x6e4>
 800c28c:	4b70      	ldr	r3, [pc, #448]	; (800c450 <_dtoa_r+0x8d0>)
 800c28e:	2200      	movs	r2, #0
 800c290:	f7f4 f99a 	bl	80005c8 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f7f4 fbfa 	bl	8000a98 <__aeabi_dcmpeq>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d098      	beq.n	800c1da <_dtoa_r+0x65a>
 800c2a8:	e7cb      	b.n	800c242 <_dtoa_r+0x6c2>
 800c2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	f000 80d1 	beq.w	800c454 <_dtoa_r+0x8d4>
 800c2b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c2b4:	2a01      	cmp	r2, #1
 800c2b6:	f300 80af 	bgt.w	800c418 <_dtoa_r+0x898>
 800c2ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	f000 80a7 	beq.w	800c410 <_dtoa_r+0x890>
 800c2c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2c8:	9f06      	ldr	r7, [sp, #24]
 800c2ca:	9a06      	ldr	r2, [sp, #24]
 800c2cc:	441a      	add	r2, r3
 800c2ce:	9206      	str	r2, [sp, #24]
 800c2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	441a      	add	r2, r3
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2da:	f001 f965 	bl	800d5a8 <__i2b>
 800c2de:	4606      	mov	r6, r0
 800c2e0:	2f00      	cmp	r7, #0
 800c2e2:	dd0c      	ble.n	800c2fe <_dtoa_r+0x77e>
 800c2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dd09      	ble.n	800c2fe <_dtoa_r+0x77e>
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	9a06      	ldr	r2, [sp, #24]
 800c2ee:	bfa8      	it	ge
 800c2f0:	463b      	movge	r3, r7
 800c2f2:	1ad2      	subs	r2, r2, r3
 800c2f4:	9206      	str	r2, [sp, #24]
 800c2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f8:	1aff      	subs	r7, r7, r3
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c300:	b1f3      	cbz	r3, 800c340 <_dtoa_r+0x7c0>
 800c302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 80a9 	beq.w	800c45c <_dtoa_r+0x8dc>
 800c30a:	2c00      	cmp	r4, #0
 800c30c:	dd10      	ble.n	800c330 <_dtoa_r+0x7b0>
 800c30e:	4631      	mov	r1, r6
 800c310:	4622      	mov	r2, r4
 800c312:	4628      	mov	r0, r5
 800c314:	f001 fa04 	bl	800d720 <__pow5mult>
 800c318:	4652      	mov	r2, sl
 800c31a:	4601      	mov	r1, r0
 800c31c:	4606      	mov	r6, r0
 800c31e:	4628      	mov	r0, r5
 800c320:	f001 f958 	bl	800d5d4 <__multiply>
 800c324:	4651      	mov	r1, sl
 800c326:	4680      	mov	r8, r0
 800c328:	4628      	mov	r0, r5
 800c32a:	f001 f839 	bl	800d3a0 <_Bfree>
 800c32e:	46c2      	mov	sl, r8
 800c330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c332:	1b1a      	subs	r2, r3, r4
 800c334:	d004      	beq.n	800c340 <_dtoa_r+0x7c0>
 800c336:	4651      	mov	r1, sl
 800c338:	4628      	mov	r0, r5
 800c33a:	f001 f9f1 	bl	800d720 <__pow5mult>
 800c33e:	4682      	mov	sl, r0
 800c340:	2101      	movs	r1, #1
 800c342:	4628      	mov	r0, r5
 800c344:	f001 f930 	bl	800d5a8 <__i2b>
 800c348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	4604      	mov	r4, r0
 800c34e:	f340 8087 	ble.w	800c460 <_dtoa_r+0x8e0>
 800c352:	461a      	mov	r2, r3
 800c354:	4601      	mov	r1, r0
 800c356:	4628      	mov	r0, r5
 800c358:	f001 f9e2 	bl	800d720 <__pow5mult>
 800c35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c35e:	2b01      	cmp	r3, #1
 800c360:	4604      	mov	r4, r0
 800c362:	f340 8080 	ble.w	800c466 <_dtoa_r+0x8e6>
 800c366:	f04f 0800 	mov.w	r8, #0
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c370:	6918      	ldr	r0, [r3, #16]
 800c372:	f001 f8cb 	bl	800d50c <__hi0bits>
 800c376:	f1c0 0020 	rsb	r0, r0, #32
 800c37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37c:	4418      	add	r0, r3
 800c37e:	f010 001f 	ands.w	r0, r0, #31
 800c382:	f000 8092 	beq.w	800c4aa <_dtoa_r+0x92a>
 800c386:	f1c0 0320 	rsb	r3, r0, #32
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	f340 808a 	ble.w	800c4a4 <_dtoa_r+0x924>
 800c390:	f1c0 001c 	rsb	r0, r0, #28
 800c394:	9b06      	ldr	r3, [sp, #24]
 800c396:	4403      	add	r3, r0
 800c398:	9306      	str	r3, [sp, #24]
 800c39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39c:	4403      	add	r3, r0
 800c39e:	4407      	add	r7, r0
 800c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a2:	9b06      	ldr	r3, [sp, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dd05      	ble.n	800c3b4 <_dtoa_r+0x834>
 800c3a8:	4651      	mov	r1, sl
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f001 fa11 	bl	800d7d4 <__lshift>
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dd05      	ble.n	800c3c6 <_dtoa_r+0x846>
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f001 fa08 	bl	800d7d4 <__lshift>
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d070      	beq.n	800c4ae <_dtoa_r+0x92e>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	f001 fa6c 	bl	800d8ac <__mcmp>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	da6a      	bge.n	800c4ae <_dtoa_r+0x92e>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4651      	mov	r1, sl
 800c3dc:	220a      	movs	r2, #10
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f001 f800 	bl	800d3e4 <__multadd>
 800c3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c3ea:	4682      	mov	sl, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8193 	beq.w	800c718 <_dtoa_r+0xb98>
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	220a      	movs	r2, #10
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 fff3 	bl	800d3e4 <__multadd>
 800c3fe:	f1bb 0f00 	cmp.w	fp, #0
 800c402:	4606      	mov	r6, r0
 800c404:	f300 8093 	bgt.w	800c52e <_dtoa_r+0x9ae>
 800c408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	dc57      	bgt.n	800c4be <_dtoa_r+0x93e>
 800c40e:	e08e      	b.n	800c52e <_dtoa_r+0x9ae>
 800c410:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c412:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c416:	e756      	b.n	800c2c6 <_dtoa_r+0x746>
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	1e5c      	subs	r4, r3, #1
 800c41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41e:	42a3      	cmp	r3, r4
 800c420:	bfbf      	itttt	lt
 800c422:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c424:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c426:	1ae2      	sublt	r2, r4, r3
 800c428:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c42a:	bfb6      	itet	lt
 800c42c:	189b      	addlt	r3, r3, r2
 800c42e:	1b1c      	subge	r4, r3, r4
 800c430:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c432:	9b02      	ldr	r3, [sp, #8]
 800c434:	bfb8      	it	lt
 800c436:	2400      	movlt	r4, #0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfb9      	ittee	lt
 800c43c:	9b06      	ldrlt	r3, [sp, #24]
 800c43e:	9a02      	ldrlt	r2, [sp, #8]
 800c440:	9f06      	ldrge	r7, [sp, #24]
 800c442:	9b02      	ldrge	r3, [sp, #8]
 800c444:	bfbc      	itt	lt
 800c446:	1a9f      	sublt	r7, r3, r2
 800c448:	2300      	movlt	r3, #0
 800c44a:	e73e      	b.n	800c2ca <_dtoa_r+0x74a>
 800c44c:	3fe00000 	.word	0x3fe00000
 800c450:	40240000 	.word	0x40240000
 800c454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c456:	9f06      	ldr	r7, [sp, #24]
 800c458:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c45a:	e741      	b.n	800c2e0 <_dtoa_r+0x760>
 800c45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c45e:	e76a      	b.n	800c336 <_dtoa_r+0x7b6>
 800c460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c462:	2b01      	cmp	r3, #1
 800c464:	dc19      	bgt.n	800c49a <_dtoa_r+0x91a>
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	b9bb      	cbnz	r3, 800c49a <_dtoa_r+0x91a>
 800c46a:	9b05      	ldr	r3, [sp, #20]
 800c46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c470:	b99b      	cbnz	r3, 800c49a <_dtoa_r+0x91a>
 800c472:	9b05      	ldr	r3, [sp, #20]
 800c474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c478:	0d1b      	lsrs	r3, r3, #20
 800c47a:	051b      	lsls	r3, r3, #20
 800c47c:	b183      	cbz	r3, 800c4a0 <_dtoa_r+0x920>
 800c47e:	9b06      	ldr	r3, [sp, #24]
 800c480:	3301      	adds	r3, #1
 800c482:	9306      	str	r3, [sp, #24]
 800c484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c486:	3301      	adds	r3, #1
 800c488:	9309      	str	r3, [sp, #36]	; 0x24
 800c48a:	f04f 0801 	mov.w	r8, #1
 800c48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	f47f af6a 	bne.w	800c36a <_dtoa_r+0x7ea>
 800c496:	2001      	movs	r0, #1
 800c498:	e76f      	b.n	800c37a <_dtoa_r+0x7fa>
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	e7f6      	b.n	800c48e <_dtoa_r+0x90e>
 800c4a0:	4698      	mov	r8, r3
 800c4a2:	e7f4      	b.n	800c48e <_dtoa_r+0x90e>
 800c4a4:	f43f af7d 	beq.w	800c3a2 <_dtoa_r+0x822>
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	301c      	adds	r0, #28
 800c4ac:	e772      	b.n	800c394 <_dtoa_r+0x814>
 800c4ae:	9b02      	ldr	r3, [sp, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	dc36      	bgt.n	800c522 <_dtoa_r+0x9a2>
 800c4b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	dd33      	ble.n	800c522 <_dtoa_r+0x9a2>
 800c4ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c4be:	f1bb 0f00 	cmp.w	fp, #0
 800c4c2:	d10d      	bne.n	800c4e0 <_dtoa_r+0x960>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	465b      	mov	r3, fp
 800c4c8:	2205      	movs	r2, #5
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 ff8a 	bl	800d3e4 <__multadd>
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f001 f9e9 	bl	800d8ac <__mcmp>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	f73f adb6 	bgt.w	800c04c <_dtoa_r+0x4cc>
 800c4e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4e2:	9f08      	ldr	r7, [sp, #32]
 800c4e4:	ea6f 0903 	mvn.w	r9, r3
 800c4e8:	f04f 0800 	mov.w	r8, #0
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f000 ff56 	bl	800d3a0 <_Bfree>
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	f43f aea4 	beq.w	800c242 <_dtoa_r+0x6c2>
 800c4fa:	f1b8 0f00 	cmp.w	r8, #0
 800c4fe:	d005      	beq.n	800c50c <_dtoa_r+0x98c>
 800c500:	45b0      	cmp	r8, r6
 800c502:	d003      	beq.n	800c50c <_dtoa_r+0x98c>
 800c504:	4641      	mov	r1, r8
 800c506:	4628      	mov	r0, r5
 800c508:	f000 ff4a 	bl	800d3a0 <_Bfree>
 800c50c:	4631      	mov	r1, r6
 800c50e:	4628      	mov	r0, r5
 800c510:	f000 ff46 	bl	800d3a0 <_Bfree>
 800c514:	e695      	b.n	800c242 <_dtoa_r+0x6c2>
 800c516:	2400      	movs	r4, #0
 800c518:	4626      	mov	r6, r4
 800c51a:	e7e1      	b.n	800c4e0 <_dtoa_r+0x960>
 800c51c:	46c1      	mov	r9, r8
 800c51e:	4626      	mov	r6, r4
 800c520:	e594      	b.n	800c04c <_dtoa_r+0x4cc>
 800c522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c524:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 80fc 	beq.w	800c726 <_dtoa_r+0xba6>
 800c52e:	2f00      	cmp	r7, #0
 800c530:	dd05      	ble.n	800c53e <_dtoa_r+0x9be>
 800c532:	4631      	mov	r1, r6
 800c534:	463a      	mov	r2, r7
 800c536:	4628      	mov	r0, r5
 800c538:	f001 f94c 	bl	800d7d4 <__lshift>
 800c53c:	4606      	mov	r6, r0
 800c53e:	f1b8 0f00 	cmp.w	r8, #0
 800c542:	d05c      	beq.n	800c5fe <_dtoa_r+0xa7e>
 800c544:	6871      	ldr	r1, [r6, #4]
 800c546:	4628      	mov	r0, r5
 800c548:	f000 feea 	bl	800d320 <_Balloc>
 800c54c:	4607      	mov	r7, r0
 800c54e:	b928      	cbnz	r0, 800c55c <_dtoa_r+0x9dc>
 800c550:	4b7f      	ldr	r3, [pc, #508]	; (800c750 <_dtoa_r+0xbd0>)
 800c552:	4602      	mov	r2, r0
 800c554:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c558:	f7ff bb26 	b.w	800bba8 <_dtoa_r+0x28>
 800c55c:	6932      	ldr	r2, [r6, #16]
 800c55e:	3202      	adds	r2, #2
 800c560:	0092      	lsls	r2, r2, #2
 800c562:	f106 010c 	add.w	r1, r6, #12
 800c566:	300c      	adds	r0, #12
 800c568:	f7fd fa82 	bl	8009a70 <memcpy>
 800c56c:	2201      	movs	r2, #1
 800c56e:	4639      	mov	r1, r7
 800c570:	4628      	mov	r0, r5
 800c572:	f001 f92f 	bl	800d7d4 <__lshift>
 800c576:	9b08      	ldr	r3, [sp, #32]
 800c578:	3301      	adds	r3, #1
 800c57a:	9302      	str	r3, [sp, #8]
 800c57c:	9b08      	ldr	r3, [sp, #32]
 800c57e:	445b      	add	r3, fp
 800c580:	930a      	str	r3, [sp, #40]	; 0x28
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	46b0      	mov	r8, r6
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	4606      	mov	r6, r0
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	4621      	mov	r1, r4
 800c592:	4650      	mov	r0, sl
 800c594:	f103 3bff 	add.w	fp, r3, #4294967295
 800c598:	f7ff fa66 	bl	800ba68 <quorem>
 800c59c:	4603      	mov	r3, r0
 800c59e:	3330      	adds	r3, #48	; 0x30
 800c5a0:	9004      	str	r0, [sp, #16]
 800c5a2:	4641      	mov	r1, r8
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5a8:	f001 f980 	bl	800d8ac <__mcmp>
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	9006      	str	r0, [sp, #24]
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f001 f996 	bl	800d8e4 <__mdiff>
 800c5b8:	68c2      	ldr	r2, [r0, #12]
 800c5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5bc:	4607      	mov	r7, r0
 800c5be:	bb02      	cbnz	r2, 800c602 <_dtoa_r+0xa82>
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	f001 f972 	bl	800d8ac <__mcmp>
 800c5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c5d4:	f000 fee4 	bl	800d3a0 <_Bfree>
 800c5d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5dc:	9f02      	ldr	r7, [sp, #8]
 800c5de:	ea43 0102 	orr.w	r1, r3, r2
 800c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5e8:	d10d      	bne.n	800c606 <_dtoa_r+0xa86>
 800c5ea:	2b39      	cmp	r3, #57	; 0x39
 800c5ec:	d027      	beq.n	800c63e <_dtoa_r+0xabe>
 800c5ee:	9a06      	ldr	r2, [sp, #24]
 800c5f0:	2a00      	cmp	r2, #0
 800c5f2:	dd01      	ble.n	800c5f8 <_dtoa_r+0xa78>
 800c5f4:	9b04      	ldr	r3, [sp, #16]
 800c5f6:	3331      	adds	r3, #49	; 0x31
 800c5f8:	f88b 3000 	strb.w	r3, [fp]
 800c5fc:	e776      	b.n	800c4ec <_dtoa_r+0x96c>
 800c5fe:	4630      	mov	r0, r6
 800c600:	e7b9      	b.n	800c576 <_dtoa_r+0x9f6>
 800c602:	2201      	movs	r2, #1
 800c604:	e7e2      	b.n	800c5cc <_dtoa_r+0xa4c>
 800c606:	9906      	ldr	r1, [sp, #24]
 800c608:	2900      	cmp	r1, #0
 800c60a:	db04      	blt.n	800c616 <_dtoa_r+0xa96>
 800c60c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c60e:	4301      	orrs	r1, r0
 800c610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c612:	4301      	orrs	r1, r0
 800c614:	d120      	bne.n	800c658 <_dtoa_r+0xad8>
 800c616:	2a00      	cmp	r2, #0
 800c618:	ddee      	ble.n	800c5f8 <_dtoa_r+0xa78>
 800c61a:	4651      	mov	r1, sl
 800c61c:	2201      	movs	r2, #1
 800c61e:	4628      	mov	r0, r5
 800c620:	9302      	str	r3, [sp, #8]
 800c622:	f001 f8d7 	bl	800d7d4 <__lshift>
 800c626:	4621      	mov	r1, r4
 800c628:	4682      	mov	sl, r0
 800c62a:	f001 f93f 	bl	800d8ac <__mcmp>
 800c62e:	2800      	cmp	r0, #0
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	dc02      	bgt.n	800c63a <_dtoa_r+0xaba>
 800c634:	d1e0      	bne.n	800c5f8 <_dtoa_r+0xa78>
 800c636:	07da      	lsls	r2, r3, #31
 800c638:	d5de      	bpl.n	800c5f8 <_dtoa_r+0xa78>
 800c63a:	2b39      	cmp	r3, #57	; 0x39
 800c63c:	d1da      	bne.n	800c5f4 <_dtoa_r+0xa74>
 800c63e:	2339      	movs	r3, #57	; 0x39
 800c640:	f88b 3000 	strb.w	r3, [fp]
 800c644:	463b      	mov	r3, r7
 800c646:	461f      	mov	r7, r3
 800c648:	3b01      	subs	r3, #1
 800c64a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c64e:	2a39      	cmp	r2, #57	; 0x39
 800c650:	d050      	beq.n	800c6f4 <_dtoa_r+0xb74>
 800c652:	3201      	adds	r2, #1
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	e749      	b.n	800c4ec <_dtoa_r+0x96c>
 800c658:	2a00      	cmp	r2, #0
 800c65a:	dd03      	ble.n	800c664 <_dtoa_r+0xae4>
 800c65c:	2b39      	cmp	r3, #57	; 0x39
 800c65e:	d0ee      	beq.n	800c63e <_dtoa_r+0xabe>
 800c660:	3301      	adds	r3, #1
 800c662:	e7c9      	b.n	800c5f8 <_dtoa_r+0xa78>
 800c664:	9a02      	ldr	r2, [sp, #8]
 800c666:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c668:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c66c:	428a      	cmp	r2, r1
 800c66e:	d02a      	beq.n	800c6c6 <_dtoa_r+0xb46>
 800c670:	4651      	mov	r1, sl
 800c672:	2300      	movs	r3, #0
 800c674:	220a      	movs	r2, #10
 800c676:	4628      	mov	r0, r5
 800c678:	f000 feb4 	bl	800d3e4 <__multadd>
 800c67c:	45b0      	cmp	r8, r6
 800c67e:	4682      	mov	sl, r0
 800c680:	f04f 0300 	mov.w	r3, #0
 800c684:	f04f 020a 	mov.w	r2, #10
 800c688:	4641      	mov	r1, r8
 800c68a:	4628      	mov	r0, r5
 800c68c:	d107      	bne.n	800c69e <_dtoa_r+0xb1e>
 800c68e:	f000 fea9 	bl	800d3e4 <__multadd>
 800c692:	4680      	mov	r8, r0
 800c694:	4606      	mov	r6, r0
 800c696:	9b02      	ldr	r3, [sp, #8]
 800c698:	3301      	adds	r3, #1
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	e777      	b.n	800c58e <_dtoa_r+0xa0e>
 800c69e:	f000 fea1 	bl	800d3e4 <__multadd>
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	220a      	movs	r2, #10
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f000 fe9a 	bl	800d3e4 <__multadd>
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	e7f0      	b.n	800c696 <_dtoa_r+0xb16>
 800c6b4:	f1bb 0f00 	cmp.w	fp, #0
 800c6b8:	9a08      	ldr	r2, [sp, #32]
 800c6ba:	bfcc      	ite	gt
 800c6bc:	465f      	movgt	r7, fp
 800c6be:	2701      	movle	r7, #1
 800c6c0:	4417      	add	r7, r2
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	4651      	mov	r1, sl
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	f001 f881 	bl	800d7d4 <__lshift>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4682      	mov	sl, r0
 800c6d6:	f001 f8e9 	bl	800d8ac <__mcmp>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	dcb2      	bgt.n	800c644 <_dtoa_r+0xac4>
 800c6de:	d102      	bne.n	800c6e6 <_dtoa_r+0xb66>
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	07db      	lsls	r3, r3, #31
 800c6e4:	d4ae      	bmi.n	800c644 <_dtoa_r+0xac4>
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	461f      	mov	r7, r3
 800c6ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6ee:	2a30      	cmp	r2, #48	; 0x30
 800c6f0:	d0fa      	beq.n	800c6e8 <_dtoa_r+0xb68>
 800c6f2:	e6fb      	b.n	800c4ec <_dtoa_r+0x96c>
 800c6f4:	9a08      	ldr	r2, [sp, #32]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d1a5      	bne.n	800c646 <_dtoa_r+0xac6>
 800c6fa:	2331      	movs	r3, #49	; 0x31
 800c6fc:	f109 0901 	add.w	r9, r9, #1
 800c700:	7013      	strb	r3, [r2, #0]
 800c702:	e6f3      	b.n	800c4ec <_dtoa_r+0x96c>
 800c704:	4b13      	ldr	r3, [pc, #76]	; (800c754 <_dtoa_r+0xbd4>)
 800c706:	f7ff baa6 	b.w	800bc56 <_dtoa_r+0xd6>
 800c70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f47f aa7f 	bne.w	800bc10 <_dtoa_r+0x90>
 800c712:	4b11      	ldr	r3, [pc, #68]	; (800c758 <_dtoa_r+0xbd8>)
 800c714:	f7ff ba9f 	b.w	800bc56 <_dtoa_r+0xd6>
 800c718:	f1bb 0f00 	cmp.w	fp, #0
 800c71c:	dc03      	bgt.n	800c726 <_dtoa_r+0xba6>
 800c71e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c720:	2b02      	cmp	r3, #2
 800c722:	f73f aecc 	bgt.w	800c4be <_dtoa_r+0x93e>
 800c726:	9f08      	ldr	r7, [sp, #32]
 800c728:	4621      	mov	r1, r4
 800c72a:	4650      	mov	r0, sl
 800c72c:	f7ff f99c 	bl	800ba68 <quorem>
 800c730:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c734:	f807 3b01 	strb.w	r3, [r7], #1
 800c738:	9a08      	ldr	r2, [sp, #32]
 800c73a:	1aba      	subs	r2, r7, r2
 800c73c:	4593      	cmp	fp, r2
 800c73e:	ddb9      	ble.n	800c6b4 <_dtoa_r+0xb34>
 800c740:	4651      	mov	r1, sl
 800c742:	2300      	movs	r3, #0
 800c744:	220a      	movs	r2, #10
 800c746:	4628      	mov	r0, r5
 800c748:	f000 fe4c 	bl	800d3e4 <__multadd>
 800c74c:	4682      	mov	sl, r0
 800c74e:	e7eb      	b.n	800c728 <_dtoa_r+0xba8>
 800c750:	0800f48c 	.word	0x0800f48c
 800c754:	0800ebf8 	.word	0x0800ebf8
 800c758:	0800f409 	.word	0x0800f409

0800c75c <__sflush_r>:
 800c75c:	898a      	ldrh	r2, [r1, #12]
 800c75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	4605      	mov	r5, r0
 800c764:	0710      	lsls	r0, r2, #28
 800c766:	460c      	mov	r4, r1
 800c768:	d458      	bmi.n	800c81c <__sflush_r+0xc0>
 800c76a:	684b      	ldr	r3, [r1, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	dc05      	bgt.n	800c77c <__sflush_r+0x20>
 800c770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c772:	2b00      	cmp	r3, #0
 800c774:	dc02      	bgt.n	800c77c <__sflush_r+0x20>
 800c776:	2000      	movs	r0, #0
 800c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c77c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c77e:	2e00      	cmp	r6, #0
 800c780:	d0f9      	beq.n	800c776 <__sflush_r+0x1a>
 800c782:	2300      	movs	r3, #0
 800c784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c788:	682f      	ldr	r7, [r5, #0]
 800c78a:	602b      	str	r3, [r5, #0]
 800c78c:	d032      	beq.n	800c7f4 <__sflush_r+0x98>
 800c78e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	075a      	lsls	r2, r3, #29
 800c794:	d505      	bpl.n	800c7a2 <__sflush_r+0x46>
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	1ac0      	subs	r0, r0, r3
 800c79a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c79c:	b10b      	cbz	r3, 800c7a2 <__sflush_r+0x46>
 800c79e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7a0:	1ac0      	subs	r0, r0, r3
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7a8:	6a21      	ldr	r1, [r4, #32]
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b0      	blx	r6
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	d106      	bne.n	800c7c2 <__sflush_r+0x66>
 800c7b4:	6829      	ldr	r1, [r5, #0]
 800c7b6:	291d      	cmp	r1, #29
 800c7b8:	d82c      	bhi.n	800c814 <__sflush_r+0xb8>
 800c7ba:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <__sflush_r+0x108>)
 800c7bc:	40ca      	lsrs	r2, r1
 800c7be:	07d6      	lsls	r6, r2, #31
 800c7c0:	d528      	bpl.n	800c814 <__sflush_r+0xb8>
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	6062      	str	r2, [r4, #4]
 800c7c6:	04d9      	lsls	r1, r3, #19
 800c7c8:	6922      	ldr	r2, [r4, #16]
 800c7ca:	6022      	str	r2, [r4, #0]
 800c7cc:	d504      	bpl.n	800c7d8 <__sflush_r+0x7c>
 800c7ce:	1c42      	adds	r2, r0, #1
 800c7d0:	d101      	bne.n	800c7d6 <__sflush_r+0x7a>
 800c7d2:	682b      	ldr	r3, [r5, #0]
 800c7d4:	b903      	cbnz	r3, 800c7d8 <__sflush_r+0x7c>
 800c7d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c7d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7da:	602f      	str	r7, [r5, #0]
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	d0ca      	beq.n	800c776 <__sflush_r+0x1a>
 800c7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	d002      	beq.n	800c7ee <__sflush_r+0x92>
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f7fd f957 	bl	8009a9c <_free_r>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f2:	e7c1      	b.n	800c778 <__sflush_r+0x1c>
 800c7f4:	6a21      	ldr	r1, [r4, #32]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b0      	blx	r6
 800c7fc:	1c41      	adds	r1, r0, #1
 800c7fe:	d1c7      	bne.n	800c790 <__sflush_r+0x34>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0c4      	beq.n	800c790 <__sflush_r+0x34>
 800c806:	2b1d      	cmp	r3, #29
 800c808:	d001      	beq.n	800c80e <__sflush_r+0xb2>
 800c80a:	2b16      	cmp	r3, #22
 800c80c:	d101      	bne.n	800c812 <__sflush_r+0xb6>
 800c80e:	602f      	str	r7, [r5, #0]
 800c810:	e7b1      	b.n	800c776 <__sflush_r+0x1a>
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	e7ad      	b.n	800c778 <__sflush_r+0x1c>
 800c81c:	690f      	ldr	r7, [r1, #16]
 800c81e:	2f00      	cmp	r7, #0
 800c820:	d0a9      	beq.n	800c776 <__sflush_r+0x1a>
 800c822:	0793      	lsls	r3, r2, #30
 800c824:	680e      	ldr	r6, [r1, #0]
 800c826:	bf08      	it	eq
 800c828:	694b      	ldreq	r3, [r1, #20]
 800c82a:	600f      	str	r7, [r1, #0]
 800c82c:	bf18      	it	ne
 800c82e:	2300      	movne	r3, #0
 800c830:	eba6 0807 	sub.w	r8, r6, r7
 800c834:	608b      	str	r3, [r1, #8]
 800c836:	f1b8 0f00 	cmp.w	r8, #0
 800c83a:	dd9c      	ble.n	800c776 <__sflush_r+0x1a>
 800c83c:	6a21      	ldr	r1, [r4, #32]
 800c83e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c840:	4643      	mov	r3, r8
 800c842:	463a      	mov	r2, r7
 800c844:	4628      	mov	r0, r5
 800c846:	47b0      	blx	r6
 800c848:	2800      	cmp	r0, #0
 800c84a:	dc06      	bgt.n	800c85a <__sflush_r+0xfe>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	f04f 30ff 	mov.w	r0, #4294967295
 800c858:	e78e      	b.n	800c778 <__sflush_r+0x1c>
 800c85a:	4407      	add	r7, r0
 800c85c:	eba8 0800 	sub.w	r8, r8, r0
 800c860:	e7e9      	b.n	800c836 <__sflush_r+0xda>
 800c862:	bf00      	nop
 800c864:	20400001 	.word	0x20400001

0800c868 <_fflush_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	690b      	ldr	r3, [r1, #16]
 800c86c:	4605      	mov	r5, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b913      	cbnz	r3, 800c878 <_fflush_r+0x10>
 800c872:	2500      	movs	r5, #0
 800c874:	4628      	mov	r0, r5
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	b118      	cbz	r0, 800c882 <_fflush_r+0x1a>
 800c87a:	6983      	ldr	r3, [r0, #24]
 800c87c:	b90b      	cbnz	r3, 800c882 <_fflush_r+0x1a>
 800c87e:	f000 f8c5 	bl	800ca0c <__sinit>
 800c882:	4b14      	ldr	r3, [pc, #80]	; (800c8d4 <_fflush_r+0x6c>)
 800c884:	429c      	cmp	r4, r3
 800c886:	d11b      	bne.n	800c8c0 <_fflush_r+0x58>
 800c888:	686c      	ldr	r4, [r5, #4]
 800c88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0ef      	beq.n	800c872 <_fflush_r+0xa>
 800c892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c894:	07d0      	lsls	r0, r2, #31
 800c896:	d404      	bmi.n	800c8a2 <_fflush_r+0x3a>
 800c898:	0599      	lsls	r1, r3, #22
 800c89a:	d402      	bmi.n	800c8a2 <_fflush_r+0x3a>
 800c89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c89e:	f000 fcba 	bl	800d216 <__retarget_lock_acquire_recursive>
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f7ff ff59 	bl	800c75c <__sflush_r>
 800c8aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8ac:	07da      	lsls	r2, r3, #31
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	d4e0      	bmi.n	800c874 <_fflush_r+0xc>
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	059b      	lsls	r3, r3, #22
 800c8b6:	d4dd      	bmi.n	800c874 <_fflush_r+0xc>
 800c8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ba:	f000 fcad 	bl	800d218 <__retarget_lock_release_recursive>
 800c8be:	e7d9      	b.n	800c874 <_fflush_r+0xc>
 800c8c0:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <_fflush_r+0x70>)
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	d101      	bne.n	800c8ca <_fflush_r+0x62>
 800c8c6:	68ac      	ldr	r4, [r5, #8]
 800c8c8:	e7df      	b.n	800c88a <_fflush_r+0x22>
 800c8ca:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <_fflush_r+0x74>)
 800c8cc:	429c      	cmp	r4, r3
 800c8ce:	bf08      	it	eq
 800c8d0:	68ec      	ldreq	r4, [r5, #12]
 800c8d2:	e7da      	b.n	800c88a <_fflush_r+0x22>
 800c8d4:	0800f4c0 	.word	0x0800f4c0
 800c8d8:	0800f4e0 	.word	0x0800f4e0
 800c8dc:	0800f4a0 	.word	0x0800f4a0

0800c8e0 <fileno>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4e1a      	ldr	r6, [pc, #104]	; (800c94c <fileno+0x6c>)
 800c8e4:	6835      	ldr	r5, [r6, #0]
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	b125      	cbz	r5, 800c8f4 <fileno+0x14>
 800c8ea:	69ab      	ldr	r3, [r5, #24]
 800c8ec:	b913      	cbnz	r3, 800c8f4 <fileno+0x14>
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f000 f88c 	bl	800ca0c <__sinit>
 800c8f4:	4b16      	ldr	r3, [pc, #88]	; (800c950 <fileno+0x70>)
 800c8f6:	429c      	cmp	r4, r3
 800c8f8:	d118      	bne.n	800c92c <fileno+0x4c>
 800c8fa:	686c      	ldr	r4, [r5, #4]
 800c8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8fe:	07d8      	lsls	r0, r3, #31
 800c900:	d405      	bmi.n	800c90e <fileno+0x2e>
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	0599      	lsls	r1, r3, #22
 800c906:	d402      	bmi.n	800c90e <fileno+0x2e>
 800c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90a:	f000 fc84 	bl	800d216 <__retarget_lock_acquire_recursive>
 800c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c912:	b1ab      	cbz	r3, 800c940 <fileno+0x60>
 800c914:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800c918:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c91a:	07d2      	lsls	r2, r2, #31
 800c91c:	d404      	bmi.n	800c928 <fileno+0x48>
 800c91e:	059b      	lsls	r3, r3, #22
 800c920:	d402      	bmi.n	800c928 <fileno+0x48>
 800c922:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c924:	f000 fc78 	bl	800d218 <__retarget_lock_release_recursive>
 800c928:	4628      	mov	r0, r5
 800c92a:	bd70      	pop	{r4, r5, r6, pc}
 800c92c:	4b09      	ldr	r3, [pc, #36]	; (800c954 <fileno+0x74>)
 800c92e:	429c      	cmp	r4, r3
 800c930:	d101      	bne.n	800c936 <fileno+0x56>
 800c932:	68ac      	ldr	r4, [r5, #8]
 800c934:	e7e2      	b.n	800c8fc <fileno+0x1c>
 800c936:	4b08      	ldr	r3, [pc, #32]	; (800c958 <fileno+0x78>)
 800c938:	429c      	cmp	r4, r3
 800c93a:	bf08      	it	eq
 800c93c:	68ec      	ldreq	r4, [r5, #12]
 800c93e:	e7dd      	b.n	800c8fc <fileno+0x1c>
 800c940:	6832      	ldr	r2, [r6, #0]
 800c942:	2109      	movs	r1, #9
 800c944:	6011      	str	r1, [r2, #0]
 800c946:	f04f 35ff 	mov.w	r5, #4294967295
 800c94a:	e7e5      	b.n	800c918 <fileno+0x38>
 800c94c:	20000010 	.word	0x20000010
 800c950:	0800f4c0 	.word	0x0800f4c0
 800c954:	0800f4e0 	.word	0x0800f4e0
 800c958:	0800f4a0 	.word	0x0800f4a0

0800c95c <std>:
 800c95c:	2300      	movs	r3, #0
 800c95e:	b510      	push	{r4, lr}
 800c960:	4604      	mov	r4, r0
 800c962:	e9c0 3300 	strd	r3, r3, [r0]
 800c966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c96a:	6083      	str	r3, [r0, #8]
 800c96c:	8181      	strh	r1, [r0, #12]
 800c96e:	6643      	str	r3, [r0, #100]	; 0x64
 800c970:	81c2      	strh	r2, [r0, #14]
 800c972:	6183      	str	r3, [r0, #24]
 800c974:	4619      	mov	r1, r3
 800c976:	2208      	movs	r2, #8
 800c978:	305c      	adds	r0, #92	; 0x5c
 800c97a:	f7fd f887 	bl	8009a8c <memset>
 800c97e:	4b05      	ldr	r3, [pc, #20]	; (800c994 <std+0x38>)
 800c980:	6263      	str	r3, [r4, #36]	; 0x24
 800c982:	4b05      	ldr	r3, [pc, #20]	; (800c998 <std+0x3c>)
 800c984:	62a3      	str	r3, [r4, #40]	; 0x28
 800c986:	4b05      	ldr	r3, [pc, #20]	; (800c99c <std+0x40>)
 800c988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c98a:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <std+0x44>)
 800c98c:	6224      	str	r4, [r4, #32]
 800c98e:	6323      	str	r3, [r4, #48]	; 0x30
 800c990:	bd10      	pop	{r4, pc}
 800c992:	bf00      	nop
 800c994:	0800e219 	.word	0x0800e219
 800c998:	0800e23b 	.word	0x0800e23b
 800c99c:	0800e273 	.word	0x0800e273
 800c9a0:	0800e297 	.word	0x0800e297

0800c9a4 <_cleanup_r>:
 800c9a4:	4901      	ldr	r1, [pc, #4]	; (800c9ac <_cleanup_r+0x8>)
 800c9a6:	f000 b8af 	b.w	800cb08 <_fwalk_reent>
 800c9aa:	bf00      	nop
 800c9ac:	0800c869 	.word	0x0800c869

0800c9b0 <__sfmoreglue>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	1e4a      	subs	r2, r1, #1
 800c9b4:	2568      	movs	r5, #104	; 0x68
 800c9b6:	4355      	muls	r5, r2
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9be:	f7fd f8bb 	bl	8009b38 <_malloc_r>
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	b140      	cbz	r0, 800c9d8 <__sfmoreglue+0x28>
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	e9c0 1600 	strd	r1, r6, [r0]
 800c9cc:	300c      	adds	r0, #12
 800c9ce:	60a0      	str	r0, [r4, #8]
 800c9d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9d4:	f7fd f85a 	bl	8009a8c <memset>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	bd70      	pop	{r4, r5, r6, pc}

0800c9dc <__sfp_lock_acquire>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__sfp_lock_acquire+0x8>)
 800c9de:	f000 bc1a 	b.w	800d216 <__retarget_lock_acquire_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	200005f8 	.word	0x200005f8

0800c9e8 <__sfp_lock_release>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__sfp_lock_release+0x8>)
 800c9ea:	f000 bc15 	b.w	800d218 <__retarget_lock_release_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	200005f8 	.word	0x200005f8

0800c9f4 <__sinit_lock_acquire>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sinit_lock_acquire+0x8>)
 800c9f6:	f000 bc0e 	b.w	800d216 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	200005f3 	.word	0x200005f3

0800ca00 <__sinit_lock_release>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__sinit_lock_release+0x8>)
 800ca02:	f000 bc09 	b.w	800d218 <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	200005f3 	.word	0x200005f3

0800ca0c <__sinit>:
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	4604      	mov	r4, r0
 800ca10:	f7ff fff0 	bl	800c9f4 <__sinit_lock_acquire>
 800ca14:	69a3      	ldr	r3, [r4, #24]
 800ca16:	b11b      	cbz	r3, 800ca20 <__sinit+0x14>
 800ca18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca1c:	f7ff bff0 	b.w	800ca00 <__sinit_lock_release>
 800ca20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca24:	6523      	str	r3, [r4, #80]	; 0x50
 800ca26:	4b13      	ldr	r3, [pc, #76]	; (800ca74 <__sinit+0x68>)
 800ca28:	4a13      	ldr	r2, [pc, #76]	; (800ca78 <__sinit+0x6c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	bf04      	itt	eq
 800ca32:	2301      	moveq	r3, #1
 800ca34:	61a3      	streq	r3, [r4, #24]
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 f820 	bl	800ca7c <__sfp>
 800ca3c:	6060      	str	r0, [r4, #4]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f000 f81c 	bl	800ca7c <__sfp>
 800ca44:	60a0      	str	r0, [r4, #8]
 800ca46:	4620      	mov	r0, r4
 800ca48:	f000 f818 	bl	800ca7c <__sfp>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	60e0      	str	r0, [r4, #12]
 800ca50:	2104      	movs	r1, #4
 800ca52:	6860      	ldr	r0, [r4, #4]
 800ca54:	f7ff ff82 	bl	800c95c <std>
 800ca58:	68a0      	ldr	r0, [r4, #8]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	2109      	movs	r1, #9
 800ca5e:	f7ff ff7d 	bl	800c95c <std>
 800ca62:	68e0      	ldr	r0, [r4, #12]
 800ca64:	2202      	movs	r2, #2
 800ca66:	2112      	movs	r1, #18
 800ca68:	f7ff ff78 	bl	800c95c <std>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	61a3      	str	r3, [r4, #24]
 800ca70:	e7d2      	b.n	800ca18 <__sinit+0xc>
 800ca72:	bf00      	nop
 800ca74:	0800ebe4 	.word	0x0800ebe4
 800ca78:	0800c9a5 	.word	0x0800c9a5

0800ca7c <__sfp>:
 800ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7e:	4607      	mov	r7, r0
 800ca80:	f7ff ffac 	bl	800c9dc <__sfp_lock_acquire>
 800ca84:	4b1e      	ldr	r3, [pc, #120]	; (800cb00 <__sfp+0x84>)
 800ca86:	681e      	ldr	r6, [r3, #0]
 800ca88:	69b3      	ldr	r3, [r6, #24]
 800ca8a:	b913      	cbnz	r3, 800ca92 <__sfp+0x16>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7ff ffbd 	bl	800ca0c <__sinit>
 800ca92:	3648      	adds	r6, #72	; 0x48
 800ca94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	d503      	bpl.n	800caa4 <__sfp+0x28>
 800ca9c:	6833      	ldr	r3, [r6, #0]
 800ca9e:	b30b      	cbz	r3, 800cae4 <__sfp+0x68>
 800caa0:	6836      	ldr	r6, [r6, #0]
 800caa2:	e7f7      	b.n	800ca94 <__sfp+0x18>
 800caa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800caa8:	b9d5      	cbnz	r5, 800cae0 <__sfp+0x64>
 800caaa:	4b16      	ldr	r3, [pc, #88]	; (800cb04 <__sfp+0x88>)
 800caac:	60e3      	str	r3, [r4, #12]
 800caae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cab2:	6665      	str	r5, [r4, #100]	; 0x64
 800cab4:	f000 fbae 	bl	800d214 <__retarget_lock_init_recursive>
 800cab8:	f7ff ff96 	bl	800c9e8 <__sfp_lock_release>
 800cabc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cac4:	6025      	str	r5, [r4, #0]
 800cac6:	61a5      	str	r5, [r4, #24]
 800cac8:	2208      	movs	r2, #8
 800caca:	4629      	mov	r1, r5
 800cacc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cad0:	f7fc ffdc 	bl	8009a8c <memset>
 800cad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cadc:	4620      	mov	r0, r4
 800cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae0:	3468      	adds	r4, #104	; 0x68
 800cae2:	e7d9      	b.n	800ca98 <__sfp+0x1c>
 800cae4:	2104      	movs	r1, #4
 800cae6:	4638      	mov	r0, r7
 800cae8:	f7ff ff62 	bl	800c9b0 <__sfmoreglue>
 800caec:	4604      	mov	r4, r0
 800caee:	6030      	str	r0, [r6, #0]
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d1d5      	bne.n	800caa0 <__sfp+0x24>
 800caf4:	f7ff ff78 	bl	800c9e8 <__sfp_lock_release>
 800caf8:	230c      	movs	r3, #12
 800cafa:	603b      	str	r3, [r7, #0]
 800cafc:	e7ee      	b.n	800cadc <__sfp+0x60>
 800cafe:	bf00      	nop
 800cb00:	0800ebe4 	.word	0x0800ebe4
 800cb04:	ffff0001 	.word	0xffff0001

0800cb08 <_fwalk_reent>:
 800cb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	4688      	mov	r8, r1
 800cb10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb14:	2700      	movs	r7, #0
 800cb16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb1a:	f1b9 0901 	subs.w	r9, r9, #1
 800cb1e:	d505      	bpl.n	800cb2c <_fwalk_reent+0x24>
 800cb20:	6824      	ldr	r4, [r4, #0]
 800cb22:	2c00      	cmp	r4, #0
 800cb24:	d1f7      	bne.n	800cb16 <_fwalk_reent+0xe>
 800cb26:	4638      	mov	r0, r7
 800cb28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb2c:	89ab      	ldrh	r3, [r5, #12]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d907      	bls.n	800cb42 <_fwalk_reent+0x3a>
 800cb32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb36:	3301      	adds	r3, #1
 800cb38:	d003      	beq.n	800cb42 <_fwalk_reent+0x3a>
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	47c0      	blx	r8
 800cb40:	4307      	orrs	r7, r0
 800cb42:	3568      	adds	r5, #104	; 0x68
 800cb44:	e7e9      	b.n	800cb1a <_fwalk_reent+0x12>

0800cb46 <rshift>:
 800cb46:	6903      	ldr	r3, [r0, #16]
 800cb48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb54:	f100 0414 	add.w	r4, r0, #20
 800cb58:	dd45      	ble.n	800cbe6 <rshift+0xa0>
 800cb5a:	f011 011f 	ands.w	r1, r1, #31
 800cb5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb66:	d10c      	bne.n	800cb82 <rshift+0x3c>
 800cb68:	f100 0710 	add.w	r7, r0, #16
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	42b1      	cmp	r1, r6
 800cb70:	d334      	bcc.n	800cbdc <rshift+0x96>
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	1eea      	subs	r2, r5, #3
 800cb78:	4296      	cmp	r6, r2
 800cb7a:	bf38      	it	cc
 800cb7c:	2300      	movcc	r3, #0
 800cb7e:	4423      	add	r3, r4
 800cb80:	e015      	b.n	800cbae <rshift+0x68>
 800cb82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb86:	f1c1 0820 	rsb	r8, r1, #32
 800cb8a:	40cf      	lsrs	r7, r1
 800cb8c:	f105 0e04 	add.w	lr, r5, #4
 800cb90:	46a1      	mov	r9, r4
 800cb92:	4576      	cmp	r6, lr
 800cb94:	46f4      	mov	ip, lr
 800cb96:	d815      	bhi.n	800cbc4 <rshift+0x7e>
 800cb98:	1a9b      	subs	r3, r3, r2
 800cb9a:	009a      	lsls	r2, r3, #2
 800cb9c:	3a04      	subs	r2, #4
 800cb9e:	3501      	adds	r5, #1
 800cba0:	42ae      	cmp	r6, r5
 800cba2:	bf38      	it	cc
 800cba4:	2200      	movcc	r2, #0
 800cba6:	18a3      	adds	r3, r4, r2
 800cba8:	50a7      	str	r7, [r4, r2]
 800cbaa:	b107      	cbz	r7, 800cbae <rshift+0x68>
 800cbac:	3304      	adds	r3, #4
 800cbae:	1b1a      	subs	r2, r3, r4
 800cbb0:	42a3      	cmp	r3, r4
 800cbb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbb6:	bf08      	it	eq
 800cbb8:	2300      	moveq	r3, #0
 800cbba:	6102      	str	r2, [r0, #16]
 800cbbc:	bf08      	it	eq
 800cbbe:	6143      	streq	r3, [r0, #20]
 800cbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbc4:	f8dc c000 	ldr.w	ip, [ip]
 800cbc8:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbcc:	ea4c 0707 	orr.w	r7, ip, r7
 800cbd0:	f849 7b04 	str.w	r7, [r9], #4
 800cbd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbd8:	40cf      	lsrs	r7, r1
 800cbda:	e7da      	b.n	800cb92 <rshift+0x4c>
 800cbdc:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbe0:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbe4:	e7c3      	b.n	800cb6e <rshift+0x28>
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	e7e1      	b.n	800cbae <rshift+0x68>

0800cbea <__hexdig_fun>:
 800cbea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cbee:	2b09      	cmp	r3, #9
 800cbf0:	d802      	bhi.n	800cbf8 <__hexdig_fun+0xe>
 800cbf2:	3820      	subs	r0, #32
 800cbf4:	b2c0      	uxtb	r0, r0
 800cbf6:	4770      	bx	lr
 800cbf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cbfc:	2b05      	cmp	r3, #5
 800cbfe:	d801      	bhi.n	800cc04 <__hexdig_fun+0x1a>
 800cc00:	3847      	subs	r0, #71	; 0x47
 800cc02:	e7f7      	b.n	800cbf4 <__hexdig_fun+0xa>
 800cc04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc08:	2b05      	cmp	r3, #5
 800cc0a:	d801      	bhi.n	800cc10 <__hexdig_fun+0x26>
 800cc0c:	3827      	subs	r0, #39	; 0x27
 800cc0e:	e7f1      	b.n	800cbf4 <__hexdig_fun+0xa>
 800cc10:	2000      	movs	r0, #0
 800cc12:	4770      	bx	lr

0800cc14 <__gethex>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	b08b      	sub	sp, #44	; 0x2c
 800cc1a:	468b      	mov	fp, r1
 800cc1c:	9306      	str	r3, [sp, #24]
 800cc1e:	4bb9      	ldr	r3, [pc, #740]	; (800cf04 <__gethex+0x2f0>)
 800cc20:	9002      	str	r0, [sp, #8]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9303      	str	r3, [sp, #12]
 800cc26:	4618      	mov	r0, r3
 800cc28:	4690      	mov	r8, r2
 800cc2a:	f7f3 fab3 	bl	8000194 <strlen>
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	f8db 2000 	ldr.w	r2, [fp]
 800cc34:	4403      	add	r3, r0
 800cc36:	4682      	mov	sl, r0
 800cc38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cc3c:	9307      	str	r3, [sp, #28]
 800cc3e:	1c93      	adds	r3, r2, #2
 800cc40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc48:	32fe      	adds	r2, #254	; 0xfe
 800cc4a:	18d1      	adds	r1, r2, r3
 800cc4c:	461f      	mov	r7, r3
 800cc4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc52:	9101      	str	r1, [sp, #4]
 800cc54:	2830      	cmp	r0, #48	; 0x30
 800cc56:	d0f8      	beq.n	800cc4a <__gethex+0x36>
 800cc58:	f7ff ffc7 	bl	800cbea <__hexdig_fun>
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d13a      	bne.n	800ccd8 <__gethex+0xc4>
 800cc62:	9903      	ldr	r1, [sp, #12]
 800cc64:	4652      	mov	r2, sl
 800cc66:	4638      	mov	r0, r7
 800cc68:	f001 fb19 	bl	800e29e <strncmp>
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d166      	bne.n	800cd40 <__gethex+0x12c>
 800cc72:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cc76:	eb07 060a 	add.w	r6, r7, sl
 800cc7a:	f7ff ffb6 	bl	800cbea <__hexdig_fun>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d060      	beq.n	800cd44 <__gethex+0x130>
 800cc82:	4633      	mov	r3, r6
 800cc84:	7818      	ldrb	r0, [r3, #0]
 800cc86:	2830      	cmp	r0, #48	; 0x30
 800cc88:	461f      	mov	r7, r3
 800cc8a:	f103 0301 	add.w	r3, r3, #1
 800cc8e:	d0f9      	beq.n	800cc84 <__gethex+0x70>
 800cc90:	f7ff ffab 	bl	800cbea <__hexdig_fun>
 800cc94:	2301      	movs	r3, #1
 800cc96:	fab0 f480 	clz	r4, r0
 800cc9a:	0964      	lsrs	r4, r4, #5
 800cc9c:	4635      	mov	r5, r6
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	463a      	mov	r2, r7
 800cca2:	4616      	mov	r6, r2
 800cca4:	3201      	adds	r2, #1
 800cca6:	7830      	ldrb	r0, [r6, #0]
 800cca8:	f7ff ff9f 	bl	800cbea <__hexdig_fun>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d1f8      	bne.n	800cca2 <__gethex+0x8e>
 800ccb0:	9903      	ldr	r1, [sp, #12]
 800ccb2:	4652      	mov	r2, sl
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f001 faf2 	bl	800e29e <strncmp>
 800ccba:	b980      	cbnz	r0, 800ccde <__gethex+0xca>
 800ccbc:	b94d      	cbnz	r5, 800ccd2 <__gethex+0xbe>
 800ccbe:	eb06 050a 	add.w	r5, r6, sl
 800ccc2:	462a      	mov	r2, r5
 800ccc4:	4616      	mov	r6, r2
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	7830      	ldrb	r0, [r6, #0]
 800ccca:	f7ff ff8e 	bl	800cbea <__hexdig_fun>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d1f8      	bne.n	800ccc4 <__gethex+0xb0>
 800ccd2:	1bad      	subs	r5, r5, r6
 800ccd4:	00ad      	lsls	r5, r5, #2
 800ccd6:	e004      	b.n	800cce2 <__gethex+0xce>
 800ccd8:	2400      	movs	r4, #0
 800ccda:	4625      	mov	r5, r4
 800ccdc:	e7e0      	b.n	800cca0 <__gethex+0x8c>
 800ccde:	2d00      	cmp	r5, #0
 800cce0:	d1f7      	bne.n	800ccd2 <__gethex+0xbe>
 800cce2:	7833      	ldrb	r3, [r6, #0]
 800cce4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cce8:	2b50      	cmp	r3, #80	; 0x50
 800ccea:	d139      	bne.n	800cd60 <__gethex+0x14c>
 800ccec:	7873      	ldrb	r3, [r6, #1]
 800ccee:	2b2b      	cmp	r3, #43	; 0x2b
 800ccf0:	d02a      	beq.n	800cd48 <__gethex+0x134>
 800ccf2:	2b2d      	cmp	r3, #45	; 0x2d
 800ccf4:	d02c      	beq.n	800cd50 <__gethex+0x13c>
 800ccf6:	1c71      	adds	r1, r6, #1
 800ccf8:	f04f 0900 	mov.w	r9, #0
 800ccfc:	7808      	ldrb	r0, [r1, #0]
 800ccfe:	f7ff ff74 	bl	800cbea <__hexdig_fun>
 800cd02:	1e43      	subs	r3, r0, #1
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b18      	cmp	r3, #24
 800cd08:	d82a      	bhi.n	800cd60 <__gethex+0x14c>
 800cd0a:	f1a0 0210 	sub.w	r2, r0, #16
 800cd0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd12:	f7ff ff6a 	bl	800cbea <__hexdig_fun>
 800cd16:	1e43      	subs	r3, r0, #1
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b18      	cmp	r3, #24
 800cd1c:	d91b      	bls.n	800cd56 <__gethex+0x142>
 800cd1e:	f1b9 0f00 	cmp.w	r9, #0
 800cd22:	d000      	beq.n	800cd26 <__gethex+0x112>
 800cd24:	4252      	negs	r2, r2
 800cd26:	4415      	add	r5, r2
 800cd28:	f8cb 1000 	str.w	r1, [fp]
 800cd2c:	b1d4      	cbz	r4, 800cd64 <__gethex+0x150>
 800cd2e:	9b01      	ldr	r3, [sp, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bf14      	ite	ne
 800cd34:	2700      	movne	r7, #0
 800cd36:	2706      	moveq	r7, #6
 800cd38:	4638      	mov	r0, r7
 800cd3a:	b00b      	add	sp, #44	; 0x2c
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	463e      	mov	r6, r7
 800cd42:	4625      	mov	r5, r4
 800cd44:	2401      	movs	r4, #1
 800cd46:	e7cc      	b.n	800cce2 <__gethex+0xce>
 800cd48:	f04f 0900 	mov.w	r9, #0
 800cd4c:	1cb1      	adds	r1, r6, #2
 800cd4e:	e7d5      	b.n	800ccfc <__gethex+0xe8>
 800cd50:	f04f 0901 	mov.w	r9, #1
 800cd54:	e7fa      	b.n	800cd4c <__gethex+0x138>
 800cd56:	230a      	movs	r3, #10
 800cd58:	fb03 0202 	mla	r2, r3, r2, r0
 800cd5c:	3a10      	subs	r2, #16
 800cd5e:	e7d6      	b.n	800cd0e <__gethex+0xfa>
 800cd60:	4631      	mov	r1, r6
 800cd62:	e7e1      	b.n	800cd28 <__gethex+0x114>
 800cd64:	1bf3      	subs	r3, r6, r7
 800cd66:	3b01      	subs	r3, #1
 800cd68:	4621      	mov	r1, r4
 800cd6a:	2b07      	cmp	r3, #7
 800cd6c:	dc0a      	bgt.n	800cd84 <__gethex+0x170>
 800cd6e:	9802      	ldr	r0, [sp, #8]
 800cd70:	f000 fad6 	bl	800d320 <_Balloc>
 800cd74:	4604      	mov	r4, r0
 800cd76:	b940      	cbnz	r0, 800cd8a <__gethex+0x176>
 800cd78:	4b63      	ldr	r3, [pc, #396]	; (800cf08 <__gethex+0x2f4>)
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	21de      	movs	r1, #222	; 0xde
 800cd7e:	4863      	ldr	r0, [pc, #396]	; (800cf0c <__gethex+0x2f8>)
 800cd80:	f001 faac 	bl	800e2dc <__assert_func>
 800cd84:	3101      	adds	r1, #1
 800cd86:	105b      	asrs	r3, r3, #1
 800cd88:	e7ef      	b.n	800cd6a <__gethex+0x156>
 800cd8a:	f100 0914 	add.w	r9, r0, #20
 800cd8e:	f04f 0b00 	mov.w	fp, #0
 800cd92:	f1ca 0301 	rsb	r3, sl, #1
 800cd96:	f8cd 9010 	str.w	r9, [sp, #16]
 800cd9a:	f8cd b004 	str.w	fp, [sp, #4]
 800cd9e:	9308      	str	r3, [sp, #32]
 800cda0:	42b7      	cmp	r7, r6
 800cda2:	d33f      	bcc.n	800ce24 <__gethex+0x210>
 800cda4:	9f04      	ldr	r7, [sp, #16]
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	f847 3b04 	str.w	r3, [r7], #4
 800cdac:	eba7 0709 	sub.w	r7, r7, r9
 800cdb0:	10bf      	asrs	r7, r7, #2
 800cdb2:	6127      	str	r7, [r4, #16]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 fba9 	bl	800d50c <__hi0bits>
 800cdba:	017f      	lsls	r7, r7, #5
 800cdbc:	f8d8 6000 	ldr.w	r6, [r8]
 800cdc0:	1a3f      	subs	r7, r7, r0
 800cdc2:	42b7      	cmp	r7, r6
 800cdc4:	dd62      	ble.n	800ce8c <__gethex+0x278>
 800cdc6:	1bbf      	subs	r7, r7, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f000 ff3b 	bl	800dc46 <__any_on>
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	b1a8      	cbz	r0, 800ce00 <__gethex+0x1ec>
 800cdd4:	1e7b      	subs	r3, r7, #1
 800cdd6:	1159      	asrs	r1, r3, #5
 800cdd8:	f003 021f 	and.w	r2, r3, #31
 800cddc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cde0:	f04f 0a01 	mov.w	sl, #1
 800cde4:	fa0a f202 	lsl.w	r2, sl, r2
 800cde8:	420a      	tst	r2, r1
 800cdea:	d009      	beq.n	800ce00 <__gethex+0x1ec>
 800cdec:	4553      	cmp	r3, sl
 800cdee:	dd05      	ble.n	800cdfc <__gethex+0x1e8>
 800cdf0:	1eb9      	subs	r1, r7, #2
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 ff27 	bl	800dc46 <__any_on>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d144      	bne.n	800ce86 <__gethex+0x272>
 800cdfc:	f04f 0a02 	mov.w	sl, #2
 800ce00:	4639      	mov	r1, r7
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff fe9f 	bl	800cb46 <rshift>
 800ce08:	443d      	add	r5, r7
 800ce0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce0e:	42ab      	cmp	r3, r5
 800ce10:	da4a      	bge.n	800cea8 <__gethex+0x294>
 800ce12:	9802      	ldr	r0, [sp, #8]
 800ce14:	4621      	mov	r1, r4
 800ce16:	f000 fac3 	bl	800d3a0 <_Bfree>
 800ce1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	27a3      	movs	r7, #163	; 0xa3
 800ce22:	e789      	b.n	800cd38 <__gethex+0x124>
 800ce24:	1e73      	subs	r3, r6, #1
 800ce26:	9a07      	ldr	r2, [sp, #28]
 800ce28:	9305      	str	r3, [sp, #20]
 800ce2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d019      	beq.n	800ce66 <__gethex+0x252>
 800ce32:	f1bb 0f20 	cmp.w	fp, #32
 800ce36:	d107      	bne.n	800ce48 <__gethex+0x234>
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	9a01      	ldr	r2, [sp, #4]
 800ce3c:	f843 2b04 	str.w	r2, [r3], #4
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	2300      	movs	r3, #0
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	469b      	mov	fp, r3
 800ce48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ce4c:	f7ff fecd 	bl	800cbea <__hexdig_fun>
 800ce50:	9b01      	ldr	r3, [sp, #4]
 800ce52:	f000 000f 	and.w	r0, r0, #15
 800ce56:	fa00 f00b 	lsl.w	r0, r0, fp
 800ce5a:	4303      	orrs	r3, r0
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	f10b 0b04 	add.w	fp, fp, #4
 800ce62:	9b05      	ldr	r3, [sp, #20]
 800ce64:	e00d      	b.n	800ce82 <__gethex+0x26e>
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	9a08      	ldr	r2, [sp, #32]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	42bb      	cmp	r3, r7
 800ce6e:	d3e0      	bcc.n	800ce32 <__gethex+0x21e>
 800ce70:	4618      	mov	r0, r3
 800ce72:	9903      	ldr	r1, [sp, #12]
 800ce74:	9309      	str	r3, [sp, #36]	; 0x24
 800ce76:	4652      	mov	r2, sl
 800ce78:	f001 fa11 	bl	800e29e <strncmp>
 800ce7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d1d7      	bne.n	800ce32 <__gethex+0x21e>
 800ce82:	461e      	mov	r6, r3
 800ce84:	e78c      	b.n	800cda0 <__gethex+0x18c>
 800ce86:	f04f 0a03 	mov.w	sl, #3
 800ce8a:	e7b9      	b.n	800ce00 <__gethex+0x1ec>
 800ce8c:	da09      	bge.n	800cea2 <__gethex+0x28e>
 800ce8e:	1bf7      	subs	r7, r6, r7
 800ce90:	4621      	mov	r1, r4
 800ce92:	9802      	ldr	r0, [sp, #8]
 800ce94:	463a      	mov	r2, r7
 800ce96:	f000 fc9d 	bl	800d7d4 <__lshift>
 800ce9a:	1bed      	subs	r5, r5, r7
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	f100 0914 	add.w	r9, r0, #20
 800cea2:	f04f 0a00 	mov.w	sl, #0
 800cea6:	e7b0      	b.n	800ce0a <__gethex+0x1f6>
 800cea8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ceac:	42a8      	cmp	r0, r5
 800ceae:	dd70      	ble.n	800cf92 <__gethex+0x37e>
 800ceb0:	1b45      	subs	r5, r0, r5
 800ceb2:	42ae      	cmp	r6, r5
 800ceb4:	dc34      	bgt.n	800cf20 <__gethex+0x30c>
 800ceb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d028      	beq.n	800cf10 <__gethex+0x2fc>
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d02a      	beq.n	800cf18 <__gethex+0x304>
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d115      	bne.n	800cef2 <__gethex+0x2de>
 800cec6:	42ae      	cmp	r6, r5
 800cec8:	d113      	bne.n	800cef2 <__gethex+0x2de>
 800ceca:	2e01      	cmp	r6, #1
 800cecc:	d10b      	bne.n	800cee6 <__gethex+0x2d2>
 800cece:	9a06      	ldr	r2, [sp, #24]
 800ced0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	2301      	movs	r3, #1
 800ced8:	6123      	str	r3, [r4, #16]
 800ceda:	f8c9 3000 	str.w	r3, [r9]
 800cede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cee0:	2762      	movs	r7, #98	; 0x62
 800cee2:	601c      	str	r4, [r3, #0]
 800cee4:	e728      	b.n	800cd38 <__gethex+0x124>
 800cee6:	1e71      	subs	r1, r6, #1
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 feac 	bl	800dc46 <__any_on>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d1ed      	bne.n	800cece <__gethex+0x2ba>
 800cef2:	9802      	ldr	r0, [sp, #8]
 800cef4:	4621      	mov	r1, r4
 800cef6:	f000 fa53 	bl	800d3a0 <_Bfree>
 800cefa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cefc:	2300      	movs	r3, #0
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	2750      	movs	r7, #80	; 0x50
 800cf02:	e719      	b.n	800cd38 <__gethex+0x124>
 800cf04:	0800f56c 	.word	0x0800f56c
 800cf08:	0800f48c 	.word	0x0800f48c
 800cf0c:	0800f500 	.word	0x0800f500
 800cf10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1ed      	bne.n	800cef2 <__gethex+0x2de>
 800cf16:	e7da      	b.n	800cece <__gethex+0x2ba>
 800cf18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1d7      	bne.n	800cece <__gethex+0x2ba>
 800cf1e:	e7e8      	b.n	800cef2 <__gethex+0x2de>
 800cf20:	1e6f      	subs	r7, r5, #1
 800cf22:	f1ba 0f00 	cmp.w	sl, #0
 800cf26:	d131      	bne.n	800cf8c <__gethex+0x378>
 800cf28:	b127      	cbz	r7, 800cf34 <__gethex+0x320>
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fe8a 	bl	800dc46 <__any_on>
 800cf32:	4682      	mov	sl, r0
 800cf34:	117b      	asrs	r3, r7, #5
 800cf36:	2101      	movs	r1, #1
 800cf38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf3c:	f007 071f 	and.w	r7, r7, #31
 800cf40:	fa01 f707 	lsl.w	r7, r1, r7
 800cf44:	421f      	tst	r7, r3
 800cf46:	4629      	mov	r1, r5
 800cf48:	4620      	mov	r0, r4
 800cf4a:	bf18      	it	ne
 800cf4c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf50:	1b76      	subs	r6, r6, r5
 800cf52:	f7ff fdf8 	bl	800cb46 <rshift>
 800cf56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf5a:	2702      	movs	r7, #2
 800cf5c:	f1ba 0f00 	cmp.w	sl, #0
 800cf60:	d048      	beq.n	800cff4 <__gethex+0x3e0>
 800cf62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d015      	beq.n	800cf96 <__gethex+0x382>
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d017      	beq.n	800cf9e <__gethex+0x38a>
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d109      	bne.n	800cf86 <__gethex+0x372>
 800cf72:	f01a 0f02 	tst.w	sl, #2
 800cf76:	d006      	beq.n	800cf86 <__gethex+0x372>
 800cf78:	f8d9 0000 	ldr.w	r0, [r9]
 800cf7c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cf80:	f01a 0f01 	tst.w	sl, #1
 800cf84:	d10e      	bne.n	800cfa4 <__gethex+0x390>
 800cf86:	f047 0710 	orr.w	r7, r7, #16
 800cf8a:	e033      	b.n	800cff4 <__gethex+0x3e0>
 800cf8c:	f04f 0a01 	mov.w	sl, #1
 800cf90:	e7d0      	b.n	800cf34 <__gethex+0x320>
 800cf92:	2701      	movs	r7, #1
 800cf94:	e7e2      	b.n	800cf5c <__gethex+0x348>
 800cf96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf98:	f1c3 0301 	rsb	r3, r3, #1
 800cf9c:	9315      	str	r3, [sp, #84]	; 0x54
 800cf9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0f0      	beq.n	800cf86 <__gethex+0x372>
 800cfa4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cfa8:	f104 0314 	add.w	r3, r4, #20
 800cfac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cfb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cfb4:	f04f 0c00 	mov.w	ip, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cfc2:	d01c      	beq.n	800cffe <__gethex+0x3ea>
 800cfc4:	3201      	adds	r2, #1
 800cfc6:	6002      	str	r2, [r0, #0]
 800cfc8:	2f02      	cmp	r7, #2
 800cfca:	f104 0314 	add.w	r3, r4, #20
 800cfce:	d13d      	bne.n	800d04c <__gethex+0x438>
 800cfd0:	f8d8 2000 	ldr.w	r2, [r8]
 800cfd4:	3a01      	subs	r2, #1
 800cfd6:	42b2      	cmp	r2, r6
 800cfd8:	d10a      	bne.n	800cff0 <__gethex+0x3dc>
 800cfda:	1171      	asrs	r1, r6, #5
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cfe2:	f006 061f 	and.w	r6, r6, #31
 800cfe6:	fa02 f606 	lsl.w	r6, r2, r6
 800cfea:	421e      	tst	r6, r3
 800cfec:	bf18      	it	ne
 800cfee:	4617      	movne	r7, r2
 800cff0:	f047 0720 	orr.w	r7, r7, #32
 800cff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cff6:	601c      	str	r4, [r3, #0]
 800cff8:	9b06      	ldr	r3, [sp, #24]
 800cffa:	601d      	str	r5, [r3, #0]
 800cffc:	e69c      	b.n	800cd38 <__gethex+0x124>
 800cffe:	4299      	cmp	r1, r3
 800d000:	f843 cc04 	str.w	ip, [r3, #-4]
 800d004:	d8d8      	bhi.n	800cfb8 <__gethex+0x3a4>
 800d006:	68a3      	ldr	r3, [r4, #8]
 800d008:	459b      	cmp	fp, r3
 800d00a:	db17      	blt.n	800d03c <__gethex+0x428>
 800d00c:	6861      	ldr	r1, [r4, #4]
 800d00e:	9802      	ldr	r0, [sp, #8]
 800d010:	3101      	adds	r1, #1
 800d012:	f000 f985 	bl	800d320 <_Balloc>
 800d016:	4681      	mov	r9, r0
 800d018:	b918      	cbnz	r0, 800d022 <__gethex+0x40e>
 800d01a:	4b1a      	ldr	r3, [pc, #104]	; (800d084 <__gethex+0x470>)
 800d01c:	4602      	mov	r2, r0
 800d01e:	2184      	movs	r1, #132	; 0x84
 800d020:	e6ad      	b.n	800cd7e <__gethex+0x16a>
 800d022:	6922      	ldr	r2, [r4, #16]
 800d024:	3202      	adds	r2, #2
 800d026:	f104 010c 	add.w	r1, r4, #12
 800d02a:	0092      	lsls	r2, r2, #2
 800d02c:	300c      	adds	r0, #12
 800d02e:	f7fc fd1f 	bl	8009a70 <memcpy>
 800d032:	4621      	mov	r1, r4
 800d034:	9802      	ldr	r0, [sp, #8]
 800d036:	f000 f9b3 	bl	800d3a0 <_Bfree>
 800d03a:	464c      	mov	r4, r9
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d044:	6122      	str	r2, [r4, #16]
 800d046:	2201      	movs	r2, #1
 800d048:	615a      	str	r2, [r3, #20]
 800d04a:	e7bd      	b.n	800cfc8 <__gethex+0x3b4>
 800d04c:	6922      	ldr	r2, [r4, #16]
 800d04e:	455a      	cmp	r2, fp
 800d050:	dd0b      	ble.n	800d06a <__gethex+0x456>
 800d052:	2101      	movs	r1, #1
 800d054:	4620      	mov	r0, r4
 800d056:	f7ff fd76 	bl	800cb46 <rshift>
 800d05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d05e:	3501      	adds	r5, #1
 800d060:	42ab      	cmp	r3, r5
 800d062:	f6ff aed6 	blt.w	800ce12 <__gethex+0x1fe>
 800d066:	2701      	movs	r7, #1
 800d068:	e7c2      	b.n	800cff0 <__gethex+0x3dc>
 800d06a:	f016 061f 	ands.w	r6, r6, #31
 800d06e:	d0fa      	beq.n	800d066 <__gethex+0x452>
 800d070:	449a      	add	sl, r3
 800d072:	f1c6 0620 	rsb	r6, r6, #32
 800d076:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d07a:	f000 fa47 	bl	800d50c <__hi0bits>
 800d07e:	42b0      	cmp	r0, r6
 800d080:	dbe7      	blt.n	800d052 <__gethex+0x43e>
 800d082:	e7f0      	b.n	800d066 <__gethex+0x452>
 800d084:	0800f48c 	.word	0x0800f48c

0800d088 <L_shift>:
 800d088:	f1c2 0208 	rsb	r2, r2, #8
 800d08c:	0092      	lsls	r2, r2, #2
 800d08e:	b570      	push	{r4, r5, r6, lr}
 800d090:	f1c2 0620 	rsb	r6, r2, #32
 800d094:	6843      	ldr	r3, [r0, #4]
 800d096:	6804      	ldr	r4, [r0, #0]
 800d098:	fa03 f506 	lsl.w	r5, r3, r6
 800d09c:	432c      	orrs	r4, r5
 800d09e:	40d3      	lsrs	r3, r2
 800d0a0:	6004      	str	r4, [r0, #0]
 800d0a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d0a6:	4288      	cmp	r0, r1
 800d0a8:	d3f4      	bcc.n	800d094 <L_shift+0xc>
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}

0800d0ac <__match>:
 800d0ac:	b530      	push	{r4, r5, lr}
 800d0ae:	6803      	ldr	r3, [r0, #0]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0b6:	b914      	cbnz	r4, 800d0be <__match+0x12>
 800d0b8:	6003      	str	r3, [r0, #0]
 800d0ba:	2001      	movs	r0, #1
 800d0bc:	bd30      	pop	{r4, r5, pc}
 800d0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d0c6:	2d19      	cmp	r5, #25
 800d0c8:	bf98      	it	ls
 800d0ca:	3220      	addls	r2, #32
 800d0cc:	42a2      	cmp	r2, r4
 800d0ce:	d0f0      	beq.n	800d0b2 <__match+0x6>
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7f3      	b.n	800d0bc <__match+0x10>

0800d0d4 <__hexnan>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	680b      	ldr	r3, [r1, #0]
 800d0da:	6801      	ldr	r1, [r0, #0]
 800d0dc:	115e      	asrs	r6, r3, #5
 800d0de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d0e2:	f013 031f 	ands.w	r3, r3, #31
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	bf18      	it	ne
 800d0ea:	3604      	addne	r6, #4
 800d0ec:	2500      	movs	r5, #0
 800d0ee:	1f37      	subs	r7, r6, #4
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	4690      	mov	r8, r2
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d0fa:	46b9      	mov	r9, r7
 800d0fc:	463c      	mov	r4, r7
 800d0fe:	9502      	str	r5, [sp, #8]
 800d100:	46ab      	mov	fp, r5
 800d102:	784a      	ldrb	r2, [r1, #1]
 800d104:	1c4b      	adds	r3, r1, #1
 800d106:	9303      	str	r3, [sp, #12]
 800d108:	b342      	cbz	r2, 800d15c <__hexnan+0x88>
 800d10a:	4610      	mov	r0, r2
 800d10c:	9105      	str	r1, [sp, #20]
 800d10e:	9204      	str	r2, [sp, #16]
 800d110:	f7ff fd6b 	bl	800cbea <__hexdig_fun>
 800d114:	2800      	cmp	r0, #0
 800d116:	d14f      	bne.n	800d1b8 <__hexnan+0xe4>
 800d118:	9a04      	ldr	r2, [sp, #16]
 800d11a:	9905      	ldr	r1, [sp, #20]
 800d11c:	2a20      	cmp	r2, #32
 800d11e:	d818      	bhi.n	800d152 <__hexnan+0x7e>
 800d120:	9b02      	ldr	r3, [sp, #8]
 800d122:	459b      	cmp	fp, r3
 800d124:	dd13      	ble.n	800d14e <__hexnan+0x7a>
 800d126:	454c      	cmp	r4, r9
 800d128:	d206      	bcs.n	800d138 <__hexnan+0x64>
 800d12a:	2d07      	cmp	r5, #7
 800d12c:	dc04      	bgt.n	800d138 <__hexnan+0x64>
 800d12e:	462a      	mov	r2, r5
 800d130:	4649      	mov	r1, r9
 800d132:	4620      	mov	r0, r4
 800d134:	f7ff ffa8 	bl	800d088 <L_shift>
 800d138:	4544      	cmp	r4, r8
 800d13a:	d950      	bls.n	800d1de <__hexnan+0x10a>
 800d13c:	2300      	movs	r3, #0
 800d13e:	f1a4 0904 	sub.w	r9, r4, #4
 800d142:	f844 3c04 	str.w	r3, [r4, #-4]
 800d146:	f8cd b008 	str.w	fp, [sp, #8]
 800d14a:	464c      	mov	r4, r9
 800d14c:	461d      	mov	r5, r3
 800d14e:	9903      	ldr	r1, [sp, #12]
 800d150:	e7d7      	b.n	800d102 <__hexnan+0x2e>
 800d152:	2a29      	cmp	r2, #41	; 0x29
 800d154:	d156      	bne.n	800d204 <__hexnan+0x130>
 800d156:	3102      	adds	r1, #2
 800d158:	f8ca 1000 	str.w	r1, [sl]
 800d15c:	f1bb 0f00 	cmp.w	fp, #0
 800d160:	d050      	beq.n	800d204 <__hexnan+0x130>
 800d162:	454c      	cmp	r4, r9
 800d164:	d206      	bcs.n	800d174 <__hexnan+0xa0>
 800d166:	2d07      	cmp	r5, #7
 800d168:	dc04      	bgt.n	800d174 <__hexnan+0xa0>
 800d16a:	462a      	mov	r2, r5
 800d16c:	4649      	mov	r1, r9
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff ff8a 	bl	800d088 <L_shift>
 800d174:	4544      	cmp	r4, r8
 800d176:	d934      	bls.n	800d1e2 <__hexnan+0x10e>
 800d178:	f1a8 0204 	sub.w	r2, r8, #4
 800d17c:	4623      	mov	r3, r4
 800d17e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d182:	f842 1f04 	str.w	r1, [r2, #4]!
 800d186:	429f      	cmp	r7, r3
 800d188:	d2f9      	bcs.n	800d17e <__hexnan+0xaa>
 800d18a:	1b3b      	subs	r3, r7, r4
 800d18c:	f023 0303 	bic.w	r3, r3, #3
 800d190:	3304      	adds	r3, #4
 800d192:	3401      	adds	r4, #1
 800d194:	3e03      	subs	r6, #3
 800d196:	42b4      	cmp	r4, r6
 800d198:	bf88      	it	hi
 800d19a:	2304      	movhi	r3, #4
 800d19c:	4443      	add	r3, r8
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f843 2b04 	str.w	r2, [r3], #4
 800d1a4:	429f      	cmp	r7, r3
 800d1a6:	d2fb      	bcs.n	800d1a0 <__hexnan+0xcc>
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	b91b      	cbnz	r3, 800d1b4 <__hexnan+0xe0>
 800d1ac:	4547      	cmp	r7, r8
 800d1ae:	d127      	bne.n	800d200 <__hexnan+0x12c>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	2005      	movs	r0, #5
 800d1b6:	e026      	b.n	800d206 <__hexnan+0x132>
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	2d08      	cmp	r5, #8
 800d1bc:	f10b 0b01 	add.w	fp, fp, #1
 800d1c0:	dd06      	ble.n	800d1d0 <__hexnan+0xfc>
 800d1c2:	4544      	cmp	r4, r8
 800d1c4:	d9c3      	bls.n	800d14e <__hexnan+0x7a>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1cc:	2501      	movs	r5, #1
 800d1ce:	3c04      	subs	r4, #4
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	f000 000f 	and.w	r0, r0, #15
 800d1d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d1da:	6022      	str	r2, [r4, #0]
 800d1dc:	e7b7      	b.n	800d14e <__hexnan+0x7a>
 800d1de:	2508      	movs	r5, #8
 800d1e0:	e7b5      	b.n	800d14e <__hexnan+0x7a>
 800d1e2:	9b01      	ldr	r3, [sp, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d0df      	beq.n	800d1a8 <__hexnan+0xd4>
 800d1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ec:	f1c3 0320 	rsb	r3, r3, #32
 800d1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1f8:	401a      	ands	r2, r3
 800d1fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d1fe:	e7d3      	b.n	800d1a8 <__hexnan+0xd4>
 800d200:	3f04      	subs	r7, #4
 800d202:	e7d1      	b.n	800d1a8 <__hexnan+0xd4>
 800d204:	2004      	movs	r0, #4
 800d206:	b007      	add	sp, #28
 800d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d20c <_localeconv_r>:
 800d20c:	4800      	ldr	r0, [pc, #0]	; (800d210 <_localeconv_r+0x4>)
 800d20e:	4770      	bx	lr
 800d210:	20000168 	.word	0x20000168

0800d214 <__retarget_lock_init_recursive>:
 800d214:	4770      	bx	lr

0800d216 <__retarget_lock_acquire_recursive>:
 800d216:	4770      	bx	lr

0800d218 <__retarget_lock_release_recursive>:
 800d218:	4770      	bx	lr

0800d21a <__swhatbuf_r>:
 800d21a:	b570      	push	{r4, r5, r6, lr}
 800d21c:	460e      	mov	r6, r1
 800d21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d222:	2900      	cmp	r1, #0
 800d224:	b096      	sub	sp, #88	; 0x58
 800d226:	4614      	mov	r4, r2
 800d228:	461d      	mov	r5, r3
 800d22a:	da07      	bge.n	800d23c <__swhatbuf_r+0x22>
 800d22c:	2300      	movs	r3, #0
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	89b3      	ldrh	r3, [r6, #12]
 800d232:	061a      	lsls	r2, r3, #24
 800d234:	d410      	bmi.n	800d258 <__swhatbuf_r+0x3e>
 800d236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d23a:	e00e      	b.n	800d25a <__swhatbuf_r+0x40>
 800d23c:	466a      	mov	r2, sp
 800d23e:	f001 f88d 	bl	800e35c <_fstat_r>
 800d242:	2800      	cmp	r0, #0
 800d244:	dbf2      	blt.n	800d22c <__swhatbuf_r+0x12>
 800d246:	9a01      	ldr	r2, [sp, #4]
 800d248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d24c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d250:	425a      	negs	r2, r3
 800d252:	415a      	adcs	r2, r3
 800d254:	602a      	str	r2, [r5, #0]
 800d256:	e7ee      	b.n	800d236 <__swhatbuf_r+0x1c>
 800d258:	2340      	movs	r3, #64	; 0x40
 800d25a:	2000      	movs	r0, #0
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	b016      	add	sp, #88	; 0x58
 800d260:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d264 <__smakebuf_r>:
 800d264:	898b      	ldrh	r3, [r1, #12]
 800d266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d268:	079d      	lsls	r5, r3, #30
 800d26a:	4606      	mov	r6, r0
 800d26c:	460c      	mov	r4, r1
 800d26e:	d507      	bpl.n	800d280 <__smakebuf_r+0x1c>
 800d270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	6123      	str	r3, [r4, #16]
 800d278:	2301      	movs	r3, #1
 800d27a:	6163      	str	r3, [r4, #20]
 800d27c:	b002      	add	sp, #8
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	ab01      	add	r3, sp, #4
 800d282:	466a      	mov	r2, sp
 800d284:	f7ff ffc9 	bl	800d21a <__swhatbuf_r>
 800d288:	9900      	ldr	r1, [sp, #0]
 800d28a:	4605      	mov	r5, r0
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7fc fc53 	bl	8009b38 <_malloc_r>
 800d292:	b948      	cbnz	r0, 800d2a8 <__smakebuf_r+0x44>
 800d294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d298:	059a      	lsls	r2, r3, #22
 800d29a:	d4ef      	bmi.n	800d27c <__smakebuf_r+0x18>
 800d29c:	f023 0303 	bic.w	r3, r3, #3
 800d2a0:	f043 0302 	orr.w	r3, r3, #2
 800d2a4:	81a3      	strh	r3, [r4, #12]
 800d2a6:	e7e3      	b.n	800d270 <__smakebuf_r+0xc>
 800d2a8:	4b0d      	ldr	r3, [pc, #52]	; (800d2e0 <__smakebuf_r+0x7c>)
 800d2aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	6020      	str	r0, [r4, #0]
 800d2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b4:	81a3      	strh	r3, [r4, #12]
 800d2b6:	9b00      	ldr	r3, [sp, #0]
 800d2b8:	6163      	str	r3, [r4, #20]
 800d2ba:	9b01      	ldr	r3, [sp, #4]
 800d2bc:	6120      	str	r0, [r4, #16]
 800d2be:	b15b      	cbz	r3, 800d2d8 <__smakebuf_r+0x74>
 800d2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f001 f85b 	bl	800e380 <_isatty_r>
 800d2ca:	b128      	cbz	r0, 800d2d8 <__smakebuf_r+0x74>
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	f023 0303 	bic.w	r3, r3, #3
 800d2d2:	f043 0301 	orr.w	r3, r3, #1
 800d2d6:	81a3      	strh	r3, [r4, #12]
 800d2d8:	89a0      	ldrh	r0, [r4, #12]
 800d2da:	4305      	orrs	r5, r0
 800d2dc:	81a5      	strh	r5, [r4, #12]
 800d2de:	e7cd      	b.n	800d27c <__smakebuf_r+0x18>
 800d2e0:	0800c9a5 	.word	0x0800c9a5

0800d2e4 <__ascii_mbtowc>:
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	b901      	cbnz	r1, 800d2ea <__ascii_mbtowc+0x6>
 800d2e8:	a901      	add	r1, sp, #4
 800d2ea:	b142      	cbz	r2, 800d2fe <__ascii_mbtowc+0x1a>
 800d2ec:	b14b      	cbz	r3, 800d302 <__ascii_mbtowc+0x1e>
 800d2ee:	7813      	ldrb	r3, [r2, #0]
 800d2f0:	600b      	str	r3, [r1, #0]
 800d2f2:	7812      	ldrb	r2, [r2, #0]
 800d2f4:	1e10      	subs	r0, r2, #0
 800d2f6:	bf18      	it	ne
 800d2f8:	2001      	movne	r0, #1
 800d2fa:	b002      	add	sp, #8
 800d2fc:	4770      	bx	lr
 800d2fe:	4610      	mov	r0, r2
 800d300:	e7fb      	b.n	800d2fa <__ascii_mbtowc+0x16>
 800d302:	f06f 0001 	mvn.w	r0, #1
 800d306:	e7f8      	b.n	800d2fa <__ascii_mbtowc+0x16>

0800d308 <__malloc_lock>:
 800d308:	4801      	ldr	r0, [pc, #4]	; (800d310 <__malloc_lock+0x8>)
 800d30a:	f7ff bf84 	b.w	800d216 <__retarget_lock_acquire_recursive>
 800d30e:	bf00      	nop
 800d310:	200005f4 	.word	0x200005f4

0800d314 <__malloc_unlock>:
 800d314:	4801      	ldr	r0, [pc, #4]	; (800d31c <__malloc_unlock+0x8>)
 800d316:	f7ff bf7f 	b.w	800d218 <__retarget_lock_release_recursive>
 800d31a:	bf00      	nop
 800d31c:	200005f4 	.word	0x200005f4

0800d320 <_Balloc>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d324:	4604      	mov	r4, r0
 800d326:	460d      	mov	r5, r1
 800d328:	b976      	cbnz	r6, 800d348 <_Balloc+0x28>
 800d32a:	2010      	movs	r0, #16
 800d32c:	f7fc fb90 	bl	8009a50 <malloc>
 800d330:	4602      	mov	r2, r0
 800d332:	6260      	str	r0, [r4, #36]	; 0x24
 800d334:	b920      	cbnz	r0, 800d340 <_Balloc+0x20>
 800d336:	4b18      	ldr	r3, [pc, #96]	; (800d398 <_Balloc+0x78>)
 800d338:	4818      	ldr	r0, [pc, #96]	; (800d39c <_Balloc+0x7c>)
 800d33a:	2166      	movs	r1, #102	; 0x66
 800d33c:	f000 ffce 	bl	800e2dc <__assert_func>
 800d340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d344:	6006      	str	r6, [r0, #0]
 800d346:	60c6      	str	r6, [r0, #12]
 800d348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d34a:	68f3      	ldr	r3, [r6, #12]
 800d34c:	b183      	cbz	r3, 800d370 <_Balloc+0x50>
 800d34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d356:	b9b8      	cbnz	r0, 800d388 <_Balloc+0x68>
 800d358:	2101      	movs	r1, #1
 800d35a:	fa01 f605 	lsl.w	r6, r1, r5
 800d35e:	1d72      	adds	r2, r6, #5
 800d360:	0092      	lsls	r2, r2, #2
 800d362:	4620      	mov	r0, r4
 800d364:	f000 fc90 	bl	800dc88 <_calloc_r>
 800d368:	b160      	cbz	r0, 800d384 <_Balloc+0x64>
 800d36a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d36e:	e00e      	b.n	800d38e <_Balloc+0x6e>
 800d370:	2221      	movs	r2, #33	; 0x21
 800d372:	2104      	movs	r1, #4
 800d374:	4620      	mov	r0, r4
 800d376:	f000 fc87 	bl	800dc88 <_calloc_r>
 800d37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d37c:	60f0      	str	r0, [r6, #12]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e4      	bne.n	800d34e <_Balloc+0x2e>
 800d384:	2000      	movs	r0, #0
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	6802      	ldr	r2, [r0, #0]
 800d38a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d38e:	2300      	movs	r3, #0
 800d390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d394:	e7f7      	b.n	800d386 <_Balloc+0x66>
 800d396:	bf00      	nop
 800d398:	0800f416 	.word	0x0800f416
 800d39c:	0800f580 	.word	0x0800f580

0800d3a0 <_Bfree>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	b976      	cbnz	r6, 800d3c8 <_Bfree+0x28>
 800d3aa:	2010      	movs	r0, #16
 800d3ac:	f7fc fb50 	bl	8009a50 <malloc>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d3b4:	b920      	cbnz	r0, 800d3c0 <_Bfree+0x20>
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <_Bfree+0x3c>)
 800d3b8:	4809      	ldr	r0, [pc, #36]	; (800d3e0 <_Bfree+0x40>)
 800d3ba:	218a      	movs	r1, #138	; 0x8a
 800d3bc:	f000 ff8e 	bl	800e2dc <__assert_func>
 800d3c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3c4:	6006      	str	r6, [r0, #0]
 800d3c6:	60c6      	str	r6, [r0, #12]
 800d3c8:	b13c      	cbz	r4, 800d3da <_Bfree+0x3a>
 800d3ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3cc:	6862      	ldr	r2, [r4, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3d4:	6021      	str	r1, [r4, #0]
 800d3d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	0800f416 	.word	0x0800f416
 800d3e0:	0800f580 	.word	0x0800f580

0800d3e4 <__multadd>:
 800d3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e8:	690e      	ldr	r6, [r1, #16]
 800d3ea:	4607      	mov	r7, r0
 800d3ec:	4698      	mov	r8, r3
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	f101 0014 	add.w	r0, r1, #20
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	6805      	ldr	r5, [r0, #0]
 800d3f8:	b2a9      	uxth	r1, r5
 800d3fa:	fb02 8101 	mla	r1, r2, r1, r8
 800d3fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d402:	0c2d      	lsrs	r5, r5, #16
 800d404:	fb02 c505 	mla	r5, r2, r5, ip
 800d408:	b289      	uxth	r1, r1
 800d40a:	3301      	adds	r3, #1
 800d40c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d410:	429e      	cmp	r6, r3
 800d412:	f840 1b04 	str.w	r1, [r0], #4
 800d416:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d41a:	dcec      	bgt.n	800d3f6 <__multadd+0x12>
 800d41c:	f1b8 0f00 	cmp.w	r8, #0
 800d420:	d022      	beq.n	800d468 <__multadd+0x84>
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	42b3      	cmp	r3, r6
 800d426:	dc19      	bgt.n	800d45c <__multadd+0x78>
 800d428:	6861      	ldr	r1, [r4, #4]
 800d42a:	4638      	mov	r0, r7
 800d42c:	3101      	adds	r1, #1
 800d42e:	f7ff ff77 	bl	800d320 <_Balloc>
 800d432:	4605      	mov	r5, r0
 800d434:	b928      	cbnz	r0, 800d442 <__multadd+0x5e>
 800d436:	4602      	mov	r2, r0
 800d438:	4b0d      	ldr	r3, [pc, #52]	; (800d470 <__multadd+0x8c>)
 800d43a:	480e      	ldr	r0, [pc, #56]	; (800d474 <__multadd+0x90>)
 800d43c:	21b5      	movs	r1, #181	; 0xb5
 800d43e:	f000 ff4d 	bl	800e2dc <__assert_func>
 800d442:	6922      	ldr	r2, [r4, #16]
 800d444:	3202      	adds	r2, #2
 800d446:	f104 010c 	add.w	r1, r4, #12
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	300c      	adds	r0, #12
 800d44e:	f7fc fb0f 	bl	8009a70 <memcpy>
 800d452:	4621      	mov	r1, r4
 800d454:	4638      	mov	r0, r7
 800d456:	f7ff ffa3 	bl	800d3a0 <_Bfree>
 800d45a:	462c      	mov	r4, r5
 800d45c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d460:	3601      	adds	r6, #1
 800d462:	f8c3 8014 	str.w	r8, [r3, #20]
 800d466:	6126      	str	r6, [r4, #16]
 800d468:	4620      	mov	r0, r4
 800d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d46e:	bf00      	nop
 800d470:	0800f48c 	.word	0x0800f48c
 800d474:	0800f580 	.word	0x0800f580

0800d478 <__s2b>:
 800d478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	460c      	mov	r4, r1
 800d47e:	4615      	mov	r5, r2
 800d480:	461f      	mov	r7, r3
 800d482:	2209      	movs	r2, #9
 800d484:	3308      	adds	r3, #8
 800d486:	4606      	mov	r6, r0
 800d488:	fb93 f3f2 	sdiv	r3, r3, r2
 800d48c:	2100      	movs	r1, #0
 800d48e:	2201      	movs	r2, #1
 800d490:	429a      	cmp	r2, r3
 800d492:	db09      	blt.n	800d4a8 <__s2b+0x30>
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff ff43 	bl	800d320 <_Balloc>
 800d49a:	b940      	cbnz	r0, 800d4ae <__s2b+0x36>
 800d49c:	4602      	mov	r2, r0
 800d49e:	4b19      	ldr	r3, [pc, #100]	; (800d504 <__s2b+0x8c>)
 800d4a0:	4819      	ldr	r0, [pc, #100]	; (800d508 <__s2b+0x90>)
 800d4a2:	21ce      	movs	r1, #206	; 0xce
 800d4a4:	f000 ff1a 	bl	800e2dc <__assert_func>
 800d4a8:	0052      	lsls	r2, r2, #1
 800d4aa:	3101      	adds	r1, #1
 800d4ac:	e7f0      	b.n	800d490 <__s2b+0x18>
 800d4ae:	9b08      	ldr	r3, [sp, #32]
 800d4b0:	6143      	str	r3, [r0, #20]
 800d4b2:	2d09      	cmp	r5, #9
 800d4b4:	f04f 0301 	mov.w	r3, #1
 800d4b8:	6103      	str	r3, [r0, #16]
 800d4ba:	dd16      	ble.n	800d4ea <__s2b+0x72>
 800d4bc:	f104 0909 	add.w	r9, r4, #9
 800d4c0:	46c8      	mov	r8, r9
 800d4c2:	442c      	add	r4, r5
 800d4c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4c8:	4601      	mov	r1, r0
 800d4ca:	3b30      	subs	r3, #48	; 0x30
 800d4cc:	220a      	movs	r2, #10
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7ff ff88 	bl	800d3e4 <__multadd>
 800d4d4:	45a0      	cmp	r8, r4
 800d4d6:	d1f5      	bne.n	800d4c4 <__s2b+0x4c>
 800d4d8:	f1a5 0408 	sub.w	r4, r5, #8
 800d4dc:	444c      	add	r4, r9
 800d4de:	1b2d      	subs	r5, r5, r4
 800d4e0:	1963      	adds	r3, r4, r5
 800d4e2:	42bb      	cmp	r3, r7
 800d4e4:	db04      	blt.n	800d4f0 <__s2b+0x78>
 800d4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ea:	340a      	adds	r4, #10
 800d4ec:	2509      	movs	r5, #9
 800d4ee:	e7f6      	b.n	800d4de <__s2b+0x66>
 800d4f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	3b30      	subs	r3, #48	; 0x30
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ff72 	bl	800d3e4 <__multadd>
 800d500:	e7ee      	b.n	800d4e0 <__s2b+0x68>
 800d502:	bf00      	nop
 800d504:	0800f48c 	.word	0x0800f48c
 800d508:	0800f580 	.word	0x0800f580

0800d50c <__hi0bits>:
 800d50c:	0c02      	lsrs	r2, r0, #16
 800d50e:	0412      	lsls	r2, r2, #16
 800d510:	4603      	mov	r3, r0
 800d512:	b9ca      	cbnz	r2, 800d548 <__hi0bits+0x3c>
 800d514:	0403      	lsls	r3, r0, #16
 800d516:	2010      	movs	r0, #16
 800d518:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d51c:	bf04      	itt	eq
 800d51e:	021b      	lsleq	r3, r3, #8
 800d520:	3008      	addeq	r0, #8
 800d522:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d526:	bf04      	itt	eq
 800d528:	011b      	lsleq	r3, r3, #4
 800d52a:	3004      	addeq	r0, #4
 800d52c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d530:	bf04      	itt	eq
 800d532:	009b      	lsleq	r3, r3, #2
 800d534:	3002      	addeq	r0, #2
 800d536:	2b00      	cmp	r3, #0
 800d538:	db05      	blt.n	800d546 <__hi0bits+0x3a>
 800d53a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d53e:	f100 0001 	add.w	r0, r0, #1
 800d542:	bf08      	it	eq
 800d544:	2020      	moveq	r0, #32
 800d546:	4770      	bx	lr
 800d548:	2000      	movs	r0, #0
 800d54a:	e7e5      	b.n	800d518 <__hi0bits+0xc>

0800d54c <__lo0bits>:
 800d54c:	6803      	ldr	r3, [r0, #0]
 800d54e:	4602      	mov	r2, r0
 800d550:	f013 0007 	ands.w	r0, r3, #7
 800d554:	d00b      	beq.n	800d56e <__lo0bits+0x22>
 800d556:	07d9      	lsls	r1, r3, #31
 800d558:	d422      	bmi.n	800d5a0 <__lo0bits+0x54>
 800d55a:	0798      	lsls	r0, r3, #30
 800d55c:	bf49      	itett	mi
 800d55e:	085b      	lsrmi	r3, r3, #1
 800d560:	089b      	lsrpl	r3, r3, #2
 800d562:	2001      	movmi	r0, #1
 800d564:	6013      	strmi	r3, [r2, #0]
 800d566:	bf5c      	itt	pl
 800d568:	6013      	strpl	r3, [r2, #0]
 800d56a:	2002      	movpl	r0, #2
 800d56c:	4770      	bx	lr
 800d56e:	b299      	uxth	r1, r3
 800d570:	b909      	cbnz	r1, 800d576 <__lo0bits+0x2a>
 800d572:	0c1b      	lsrs	r3, r3, #16
 800d574:	2010      	movs	r0, #16
 800d576:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d57a:	bf04      	itt	eq
 800d57c:	0a1b      	lsreq	r3, r3, #8
 800d57e:	3008      	addeq	r0, #8
 800d580:	0719      	lsls	r1, r3, #28
 800d582:	bf04      	itt	eq
 800d584:	091b      	lsreq	r3, r3, #4
 800d586:	3004      	addeq	r0, #4
 800d588:	0799      	lsls	r1, r3, #30
 800d58a:	bf04      	itt	eq
 800d58c:	089b      	lsreq	r3, r3, #2
 800d58e:	3002      	addeq	r0, #2
 800d590:	07d9      	lsls	r1, r3, #31
 800d592:	d403      	bmi.n	800d59c <__lo0bits+0x50>
 800d594:	085b      	lsrs	r3, r3, #1
 800d596:	f100 0001 	add.w	r0, r0, #1
 800d59a:	d003      	beq.n	800d5a4 <__lo0bits+0x58>
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	4770      	bx	lr
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	4770      	bx	lr
 800d5a4:	2020      	movs	r0, #32
 800d5a6:	4770      	bx	lr

0800d5a8 <__i2b>:
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	f7ff feb7 	bl	800d320 <_Balloc>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	b928      	cbnz	r0, 800d5c2 <__i2b+0x1a>
 800d5b6:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <__i2b+0x24>)
 800d5b8:	4805      	ldr	r0, [pc, #20]	; (800d5d0 <__i2b+0x28>)
 800d5ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d5be:	f000 fe8d 	bl	800e2dc <__assert_func>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	6144      	str	r4, [r0, #20]
 800d5c6:	6103      	str	r3, [r0, #16]
 800d5c8:	bd10      	pop	{r4, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800f48c 	.word	0x0800f48c
 800d5d0:	0800f580 	.word	0x0800f580

0800d5d4 <__multiply>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	4614      	mov	r4, r2
 800d5da:	690a      	ldr	r2, [r1, #16]
 800d5dc:	6923      	ldr	r3, [r4, #16]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	bfb8      	it	lt
 800d5e2:	460b      	movlt	r3, r1
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	bfbc      	itt	lt
 800d5e8:	4625      	movlt	r5, r4
 800d5ea:	461c      	movlt	r4, r3
 800d5ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d5f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d5f4:	68ab      	ldr	r3, [r5, #8]
 800d5f6:	6869      	ldr	r1, [r5, #4]
 800d5f8:	eb0a 0709 	add.w	r7, sl, r9
 800d5fc:	42bb      	cmp	r3, r7
 800d5fe:	b085      	sub	sp, #20
 800d600:	bfb8      	it	lt
 800d602:	3101      	addlt	r1, #1
 800d604:	f7ff fe8c 	bl	800d320 <_Balloc>
 800d608:	b930      	cbnz	r0, 800d618 <__multiply+0x44>
 800d60a:	4602      	mov	r2, r0
 800d60c:	4b42      	ldr	r3, [pc, #264]	; (800d718 <__multiply+0x144>)
 800d60e:	4843      	ldr	r0, [pc, #268]	; (800d71c <__multiply+0x148>)
 800d610:	f240 115d 	movw	r1, #349	; 0x15d
 800d614:	f000 fe62 	bl	800e2dc <__assert_func>
 800d618:	f100 0614 	add.w	r6, r0, #20
 800d61c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d620:	4633      	mov	r3, r6
 800d622:	2200      	movs	r2, #0
 800d624:	4543      	cmp	r3, r8
 800d626:	d31e      	bcc.n	800d666 <__multiply+0x92>
 800d628:	f105 0c14 	add.w	ip, r5, #20
 800d62c:	f104 0314 	add.w	r3, r4, #20
 800d630:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d634:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d638:	9202      	str	r2, [sp, #8]
 800d63a:	ebac 0205 	sub.w	r2, ip, r5
 800d63e:	3a15      	subs	r2, #21
 800d640:	f022 0203 	bic.w	r2, r2, #3
 800d644:	3204      	adds	r2, #4
 800d646:	f105 0115 	add.w	r1, r5, #21
 800d64a:	458c      	cmp	ip, r1
 800d64c:	bf38      	it	cc
 800d64e:	2204      	movcc	r2, #4
 800d650:	9201      	str	r2, [sp, #4]
 800d652:	9a02      	ldr	r2, [sp, #8]
 800d654:	9303      	str	r3, [sp, #12]
 800d656:	429a      	cmp	r2, r3
 800d658:	d808      	bhi.n	800d66c <__multiply+0x98>
 800d65a:	2f00      	cmp	r7, #0
 800d65c:	dc55      	bgt.n	800d70a <__multiply+0x136>
 800d65e:	6107      	str	r7, [r0, #16]
 800d660:	b005      	add	sp, #20
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	f843 2b04 	str.w	r2, [r3], #4
 800d66a:	e7db      	b.n	800d624 <__multiply+0x50>
 800d66c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d670:	f1ba 0f00 	cmp.w	sl, #0
 800d674:	d020      	beq.n	800d6b8 <__multiply+0xe4>
 800d676:	f105 0e14 	add.w	lr, r5, #20
 800d67a:	46b1      	mov	r9, r6
 800d67c:	2200      	movs	r2, #0
 800d67e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d682:	f8d9 b000 	ldr.w	fp, [r9]
 800d686:	b2a1      	uxth	r1, r4
 800d688:	fa1f fb8b 	uxth.w	fp, fp
 800d68c:	fb0a b101 	mla	r1, sl, r1, fp
 800d690:	4411      	add	r1, r2
 800d692:	f8d9 2000 	ldr.w	r2, [r9]
 800d696:	0c24      	lsrs	r4, r4, #16
 800d698:	0c12      	lsrs	r2, r2, #16
 800d69a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d69e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d6a2:	b289      	uxth	r1, r1
 800d6a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d6a8:	45f4      	cmp	ip, lr
 800d6aa:	f849 1b04 	str.w	r1, [r9], #4
 800d6ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d6b2:	d8e4      	bhi.n	800d67e <__multiply+0xaa>
 800d6b4:	9901      	ldr	r1, [sp, #4]
 800d6b6:	5072      	str	r2, [r6, r1]
 800d6b8:	9a03      	ldr	r2, [sp, #12]
 800d6ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	f1b9 0f00 	cmp.w	r9, #0
 800d6c4:	d01f      	beq.n	800d706 <__multiply+0x132>
 800d6c6:	6834      	ldr	r4, [r6, #0]
 800d6c8:	f105 0114 	add.w	r1, r5, #20
 800d6cc:	46b6      	mov	lr, r6
 800d6ce:	f04f 0a00 	mov.w	sl, #0
 800d6d2:	880a      	ldrh	r2, [r1, #0]
 800d6d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d6d8:	fb09 b202 	mla	r2, r9, r2, fp
 800d6dc:	4492      	add	sl, r2
 800d6de:	b2a4      	uxth	r4, r4
 800d6e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d6e4:	f84e 4b04 	str.w	r4, [lr], #4
 800d6e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d6ec:	f8be 2000 	ldrh.w	r2, [lr]
 800d6f0:	0c24      	lsrs	r4, r4, #16
 800d6f2:	fb09 2404 	mla	r4, r9, r4, r2
 800d6f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d6fa:	458c      	cmp	ip, r1
 800d6fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d700:	d8e7      	bhi.n	800d6d2 <__multiply+0xfe>
 800d702:	9a01      	ldr	r2, [sp, #4]
 800d704:	50b4      	str	r4, [r6, r2]
 800d706:	3604      	adds	r6, #4
 800d708:	e7a3      	b.n	800d652 <__multiply+0x7e>
 800d70a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1a5      	bne.n	800d65e <__multiply+0x8a>
 800d712:	3f01      	subs	r7, #1
 800d714:	e7a1      	b.n	800d65a <__multiply+0x86>
 800d716:	bf00      	nop
 800d718:	0800f48c 	.word	0x0800f48c
 800d71c:	0800f580 	.word	0x0800f580

0800d720 <__pow5mult>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	4615      	mov	r5, r2
 800d726:	f012 0203 	ands.w	r2, r2, #3
 800d72a:	4606      	mov	r6, r0
 800d72c:	460f      	mov	r7, r1
 800d72e:	d007      	beq.n	800d740 <__pow5mult+0x20>
 800d730:	4c25      	ldr	r4, [pc, #148]	; (800d7c8 <__pow5mult+0xa8>)
 800d732:	3a01      	subs	r2, #1
 800d734:	2300      	movs	r3, #0
 800d736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d73a:	f7ff fe53 	bl	800d3e4 <__multadd>
 800d73e:	4607      	mov	r7, r0
 800d740:	10ad      	asrs	r5, r5, #2
 800d742:	d03d      	beq.n	800d7c0 <__pow5mult+0xa0>
 800d744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d746:	b97c      	cbnz	r4, 800d768 <__pow5mult+0x48>
 800d748:	2010      	movs	r0, #16
 800d74a:	f7fc f981 	bl	8009a50 <malloc>
 800d74e:	4602      	mov	r2, r0
 800d750:	6270      	str	r0, [r6, #36]	; 0x24
 800d752:	b928      	cbnz	r0, 800d760 <__pow5mult+0x40>
 800d754:	4b1d      	ldr	r3, [pc, #116]	; (800d7cc <__pow5mult+0xac>)
 800d756:	481e      	ldr	r0, [pc, #120]	; (800d7d0 <__pow5mult+0xb0>)
 800d758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d75c:	f000 fdbe 	bl	800e2dc <__assert_func>
 800d760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d764:	6004      	str	r4, [r0, #0]
 800d766:	60c4      	str	r4, [r0, #12]
 800d768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d770:	b94c      	cbnz	r4, 800d786 <__pow5mult+0x66>
 800d772:	f240 2171 	movw	r1, #625	; 0x271
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff16 	bl	800d5a8 <__i2b>
 800d77c:	2300      	movs	r3, #0
 800d77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d782:	4604      	mov	r4, r0
 800d784:	6003      	str	r3, [r0, #0]
 800d786:	f04f 0900 	mov.w	r9, #0
 800d78a:	07eb      	lsls	r3, r5, #31
 800d78c:	d50a      	bpl.n	800d7a4 <__pow5mult+0x84>
 800d78e:	4639      	mov	r1, r7
 800d790:	4622      	mov	r2, r4
 800d792:	4630      	mov	r0, r6
 800d794:	f7ff ff1e 	bl	800d5d4 <__multiply>
 800d798:	4639      	mov	r1, r7
 800d79a:	4680      	mov	r8, r0
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7ff fdff 	bl	800d3a0 <_Bfree>
 800d7a2:	4647      	mov	r7, r8
 800d7a4:	106d      	asrs	r5, r5, #1
 800d7a6:	d00b      	beq.n	800d7c0 <__pow5mult+0xa0>
 800d7a8:	6820      	ldr	r0, [r4, #0]
 800d7aa:	b938      	cbnz	r0, 800d7bc <__pow5mult+0x9c>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f7ff ff0f 	bl	800d5d4 <__multiply>
 800d7b6:	6020      	str	r0, [r4, #0]
 800d7b8:	f8c0 9000 	str.w	r9, [r0]
 800d7bc:	4604      	mov	r4, r0
 800d7be:	e7e4      	b.n	800d78a <__pow5mult+0x6a>
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c6:	bf00      	nop
 800d7c8:	0800f6d0 	.word	0x0800f6d0
 800d7cc:	0800f416 	.word	0x0800f416
 800d7d0:	0800f580 	.word	0x0800f580

0800d7d4 <__lshift>:
 800d7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d8:	460c      	mov	r4, r1
 800d7da:	6849      	ldr	r1, [r1, #4]
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	4691      	mov	r9, r2
 800d7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7ec:	f108 0601 	add.w	r6, r8, #1
 800d7f0:	42b3      	cmp	r3, r6
 800d7f2:	db0b      	blt.n	800d80c <__lshift+0x38>
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff fd93 	bl	800d320 <_Balloc>
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b948      	cbnz	r0, 800d812 <__lshift+0x3e>
 800d7fe:	4602      	mov	r2, r0
 800d800:	4b28      	ldr	r3, [pc, #160]	; (800d8a4 <__lshift+0xd0>)
 800d802:	4829      	ldr	r0, [pc, #164]	; (800d8a8 <__lshift+0xd4>)
 800d804:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d808:	f000 fd68 	bl	800e2dc <__assert_func>
 800d80c:	3101      	adds	r1, #1
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	e7ee      	b.n	800d7f0 <__lshift+0x1c>
 800d812:	2300      	movs	r3, #0
 800d814:	f100 0114 	add.w	r1, r0, #20
 800d818:	f100 0210 	add.w	r2, r0, #16
 800d81c:	4618      	mov	r0, r3
 800d81e:	4553      	cmp	r3, sl
 800d820:	db33      	blt.n	800d88a <__lshift+0xb6>
 800d822:	6920      	ldr	r0, [r4, #16]
 800d824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d828:	f104 0314 	add.w	r3, r4, #20
 800d82c:	f019 091f 	ands.w	r9, r9, #31
 800d830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d838:	d02b      	beq.n	800d892 <__lshift+0xbe>
 800d83a:	f1c9 0e20 	rsb	lr, r9, #32
 800d83e:	468a      	mov	sl, r1
 800d840:	2200      	movs	r2, #0
 800d842:	6818      	ldr	r0, [r3, #0]
 800d844:	fa00 f009 	lsl.w	r0, r0, r9
 800d848:	4302      	orrs	r2, r0
 800d84a:	f84a 2b04 	str.w	r2, [sl], #4
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	459c      	cmp	ip, r3
 800d854:	fa22 f20e 	lsr.w	r2, r2, lr
 800d858:	d8f3      	bhi.n	800d842 <__lshift+0x6e>
 800d85a:	ebac 0304 	sub.w	r3, ip, r4
 800d85e:	3b15      	subs	r3, #21
 800d860:	f023 0303 	bic.w	r3, r3, #3
 800d864:	3304      	adds	r3, #4
 800d866:	f104 0015 	add.w	r0, r4, #21
 800d86a:	4584      	cmp	ip, r0
 800d86c:	bf38      	it	cc
 800d86e:	2304      	movcc	r3, #4
 800d870:	50ca      	str	r2, [r1, r3]
 800d872:	b10a      	cbz	r2, 800d878 <__lshift+0xa4>
 800d874:	f108 0602 	add.w	r6, r8, #2
 800d878:	3e01      	subs	r6, #1
 800d87a:	4638      	mov	r0, r7
 800d87c:	612e      	str	r6, [r5, #16]
 800d87e:	4621      	mov	r1, r4
 800d880:	f7ff fd8e 	bl	800d3a0 <_Bfree>
 800d884:	4628      	mov	r0, r5
 800d886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d88e:	3301      	adds	r3, #1
 800d890:	e7c5      	b.n	800d81e <__lshift+0x4a>
 800d892:	3904      	subs	r1, #4
 800d894:	f853 2b04 	ldr.w	r2, [r3], #4
 800d898:	f841 2f04 	str.w	r2, [r1, #4]!
 800d89c:	459c      	cmp	ip, r3
 800d89e:	d8f9      	bhi.n	800d894 <__lshift+0xc0>
 800d8a0:	e7ea      	b.n	800d878 <__lshift+0xa4>
 800d8a2:	bf00      	nop
 800d8a4:	0800f48c 	.word	0x0800f48c
 800d8a8:	0800f580 	.word	0x0800f580

0800d8ac <__mcmp>:
 800d8ac:	690a      	ldr	r2, [r1, #16]
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	6900      	ldr	r0, [r0, #16]
 800d8b2:	1a80      	subs	r0, r0, r2
 800d8b4:	b530      	push	{r4, r5, lr}
 800d8b6:	d10d      	bne.n	800d8d4 <__mcmp+0x28>
 800d8b8:	3314      	adds	r3, #20
 800d8ba:	3114      	adds	r1, #20
 800d8bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8cc:	4295      	cmp	r5, r2
 800d8ce:	d002      	beq.n	800d8d6 <__mcmp+0x2a>
 800d8d0:	d304      	bcc.n	800d8dc <__mcmp+0x30>
 800d8d2:	2001      	movs	r0, #1
 800d8d4:	bd30      	pop	{r4, r5, pc}
 800d8d6:	42a3      	cmp	r3, r4
 800d8d8:	d3f4      	bcc.n	800d8c4 <__mcmp+0x18>
 800d8da:	e7fb      	b.n	800d8d4 <__mcmp+0x28>
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	e7f8      	b.n	800d8d4 <__mcmp+0x28>
	...

0800d8e4 <__mdiff>:
 800d8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4617      	mov	r7, r2
 800d8f2:	f7ff ffdb 	bl	800d8ac <__mcmp>
 800d8f6:	1e05      	subs	r5, r0, #0
 800d8f8:	d111      	bne.n	800d91e <__mdiff+0x3a>
 800d8fa:	4629      	mov	r1, r5
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7ff fd0f 	bl	800d320 <_Balloc>
 800d902:	4602      	mov	r2, r0
 800d904:	b928      	cbnz	r0, 800d912 <__mdiff+0x2e>
 800d906:	4b3a      	ldr	r3, [pc, #232]	; (800d9f0 <__mdiff+0x10c>)
 800d908:	f240 2132 	movw	r1, #562	; 0x232
 800d90c:	4839      	ldr	r0, [pc, #228]	; (800d9f4 <__mdiff+0x110>)
 800d90e:	f000 fce5 	bl	800e2dc <__assert_func>
 800d912:	2301      	movs	r3, #1
 800d914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d918:	4610      	mov	r0, r2
 800d91a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91e:	bfa4      	itt	ge
 800d920:	463b      	movge	r3, r7
 800d922:	4627      	movge	r7, r4
 800d924:	4630      	mov	r0, r6
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	bfa6      	itte	ge
 800d92a:	461c      	movge	r4, r3
 800d92c:	2500      	movge	r5, #0
 800d92e:	2501      	movlt	r5, #1
 800d930:	f7ff fcf6 	bl	800d320 <_Balloc>
 800d934:	4602      	mov	r2, r0
 800d936:	b918      	cbnz	r0, 800d940 <__mdiff+0x5c>
 800d938:	4b2d      	ldr	r3, [pc, #180]	; (800d9f0 <__mdiff+0x10c>)
 800d93a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d93e:	e7e5      	b.n	800d90c <__mdiff+0x28>
 800d940:	693e      	ldr	r6, [r7, #16]
 800d942:	60c5      	str	r5, [r0, #12]
 800d944:	6925      	ldr	r5, [r4, #16]
 800d946:	f107 0114 	add.w	r1, r7, #20
 800d94a:	f100 0e14 	add.w	lr, r0, #20
 800d94e:	f104 0914 	add.w	r9, r4, #20
 800d952:	f107 0010 	add.w	r0, r7, #16
 800d956:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d95a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d95e:	46f2      	mov	sl, lr
 800d960:	2700      	movs	r7, #0
 800d962:	f859 3b04 	ldr.w	r3, [r9], #4
 800d966:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d96a:	fa1f f883 	uxth.w	r8, r3
 800d96e:	fa17 f78b 	uxtah	r7, r7, fp
 800d972:	0c1b      	lsrs	r3, r3, #16
 800d974:	eba7 0808 	sub.w	r8, r7, r8
 800d978:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d97c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d980:	fa1f f888 	uxth.w	r8, r8
 800d984:	141f      	asrs	r7, r3, #16
 800d986:	454d      	cmp	r5, r9
 800d988:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d98c:	f84a 3b04 	str.w	r3, [sl], #4
 800d990:	d8e7      	bhi.n	800d962 <__mdiff+0x7e>
 800d992:	1b2b      	subs	r3, r5, r4
 800d994:	3b15      	subs	r3, #21
 800d996:	f023 0303 	bic.w	r3, r3, #3
 800d99a:	3304      	adds	r3, #4
 800d99c:	3415      	adds	r4, #21
 800d99e:	42a5      	cmp	r5, r4
 800d9a0:	bf38      	it	cc
 800d9a2:	2304      	movcc	r3, #4
 800d9a4:	4419      	add	r1, r3
 800d9a6:	4473      	add	r3, lr
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	4565      	cmp	r5, ip
 800d9ae:	d30e      	bcc.n	800d9ce <__mdiff+0xea>
 800d9b0:	f10c 0003 	add.w	r0, ip, #3
 800d9b4:	1a40      	subs	r0, r0, r1
 800d9b6:	f020 0003 	bic.w	r0, r0, #3
 800d9ba:	3903      	subs	r1, #3
 800d9bc:	458c      	cmp	ip, r1
 800d9be:	bf38      	it	cc
 800d9c0:	2000      	movcc	r0, #0
 800d9c2:	4418      	add	r0, r3
 800d9c4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d9c8:	b17b      	cbz	r3, 800d9ea <__mdiff+0x106>
 800d9ca:	6116      	str	r6, [r2, #16]
 800d9cc:	e7a4      	b.n	800d918 <__mdiff+0x34>
 800d9ce:	f855 8b04 	ldr.w	r8, [r5], #4
 800d9d2:	fa17 f488 	uxtah	r4, r7, r8
 800d9d6:	1420      	asrs	r0, r4, #16
 800d9d8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d9dc:	b2a4      	uxth	r4, r4
 800d9de:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800d9e2:	f84e 4b04 	str.w	r4, [lr], #4
 800d9e6:	1407      	asrs	r7, r0, #16
 800d9e8:	e7e0      	b.n	800d9ac <__mdiff+0xc8>
 800d9ea:	3e01      	subs	r6, #1
 800d9ec:	e7ea      	b.n	800d9c4 <__mdiff+0xe0>
 800d9ee:	bf00      	nop
 800d9f0:	0800f48c 	.word	0x0800f48c
 800d9f4:	0800f580 	.word	0x0800f580

0800d9f8 <__ulp>:
 800d9f8:	4b11      	ldr	r3, [pc, #68]	; (800da40 <__ulp+0x48>)
 800d9fa:	400b      	ands	r3, r1
 800d9fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800da00:	2b00      	cmp	r3, #0
 800da02:	dd02      	ble.n	800da0a <__ulp+0x12>
 800da04:	2000      	movs	r0, #0
 800da06:	4619      	mov	r1, r3
 800da08:	4770      	bx	lr
 800da0a:	425b      	negs	r3, r3
 800da0c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800da10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da14:	f04f 0000 	mov.w	r0, #0
 800da18:	f04f 0100 	mov.w	r1, #0
 800da1c:	da04      	bge.n	800da28 <__ulp+0x30>
 800da1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da22:	fa43 f102 	asr.w	r1, r3, r2
 800da26:	4770      	bx	lr
 800da28:	f1a2 0314 	sub.w	r3, r2, #20
 800da2c:	2b1e      	cmp	r3, #30
 800da2e:	bfda      	itte	le
 800da30:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800da34:	fa22 f303 	lsrle.w	r3, r2, r3
 800da38:	2301      	movgt	r3, #1
 800da3a:	4618      	mov	r0, r3
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	7ff00000 	.word	0x7ff00000

0800da44 <__b2d>:
 800da44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da48:	6907      	ldr	r7, [r0, #16]
 800da4a:	f100 0914 	add.w	r9, r0, #20
 800da4e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800da52:	f1a7 0804 	sub.w	r8, r7, #4
 800da56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7ff fd56 	bl	800d50c <__hi0bits>
 800da60:	f1c0 0320 	rsb	r3, r0, #32
 800da64:	280a      	cmp	r0, #10
 800da66:	600b      	str	r3, [r1, #0]
 800da68:	491f      	ldr	r1, [pc, #124]	; (800dae8 <__b2d+0xa4>)
 800da6a:	dc17      	bgt.n	800da9c <__b2d+0x58>
 800da6c:	f1c0 0c0b 	rsb	ip, r0, #11
 800da70:	45c1      	cmp	r9, r8
 800da72:	fa26 f30c 	lsr.w	r3, r6, ip
 800da76:	bf38      	it	cc
 800da78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800da7c:	ea43 0501 	orr.w	r5, r3, r1
 800da80:	bf28      	it	cs
 800da82:	2200      	movcs	r2, #0
 800da84:	f100 0315 	add.w	r3, r0, #21
 800da88:	fa06 f303 	lsl.w	r3, r6, r3
 800da8c:	fa22 f20c 	lsr.w	r2, r2, ip
 800da90:	ea43 0402 	orr.w	r4, r3, r2
 800da94:	4620      	mov	r0, r4
 800da96:	4629      	mov	r1, r5
 800da98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9c:	45c1      	cmp	r9, r8
 800da9e:	bf3a      	itte	cc
 800daa0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800daa4:	f1a7 0808 	subcc.w	r8, r7, #8
 800daa8:	2200      	movcs	r2, #0
 800daaa:	f1b0 030b 	subs.w	r3, r0, #11
 800daae:	d016      	beq.n	800dade <__b2d+0x9a>
 800dab0:	f1c3 0720 	rsb	r7, r3, #32
 800dab4:	fa22 f107 	lsr.w	r1, r2, r7
 800dab8:	45c8      	cmp	r8, r9
 800daba:	fa06 f603 	lsl.w	r6, r6, r3
 800dabe:	ea46 0601 	orr.w	r6, r6, r1
 800dac2:	bf8c      	ite	hi
 800dac4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800dac8:	2100      	movls	r1, #0
 800daca:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800dace:	fa02 f003 	lsl.w	r0, r2, r3
 800dad2:	40f9      	lsrs	r1, r7
 800dad4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dad8:	ea40 0401 	orr.w	r4, r0, r1
 800dadc:	e7da      	b.n	800da94 <__b2d+0x50>
 800dade:	ea46 0501 	orr.w	r5, r6, r1
 800dae2:	4614      	mov	r4, r2
 800dae4:	e7d6      	b.n	800da94 <__b2d+0x50>
 800dae6:	bf00      	nop
 800dae8:	3ff00000 	.word	0x3ff00000

0800daec <__d2b>:
 800daec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800daf0:	2101      	movs	r1, #1
 800daf2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800daf6:	4690      	mov	r8, r2
 800daf8:	461d      	mov	r5, r3
 800dafa:	f7ff fc11 	bl	800d320 <_Balloc>
 800dafe:	4604      	mov	r4, r0
 800db00:	b930      	cbnz	r0, 800db10 <__d2b+0x24>
 800db02:	4602      	mov	r2, r0
 800db04:	4b25      	ldr	r3, [pc, #148]	; (800db9c <__d2b+0xb0>)
 800db06:	4826      	ldr	r0, [pc, #152]	; (800dba0 <__d2b+0xb4>)
 800db08:	f240 310a 	movw	r1, #778	; 0x30a
 800db0c:	f000 fbe6 	bl	800e2dc <__assert_func>
 800db10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800db14:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800db18:	bb2d      	cbnz	r5, 800db66 <__d2b+0x7a>
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	f1b8 0300 	subs.w	r3, r8, #0
 800db20:	d026      	beq.n	800db70 <__d2b+0x84>
 800db22:	4668      	mov	r0, sp
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	f7ff fd11 	bl	800d54c <__lo0bits>
 800db2a:	9900      	ldr	r1, [sp, #0]
 800db2c:	b1f0      	cbz	r0, 800db6c <__d2b+0x80>
 800db2e:	9a01      	ldr	r2, [sp, #4]
 800db30:	f1c0 0320 	rsb	r3, r0, #32
 800db34:	fa02 f303 	lsl.w	r3, r2, r3
 800db38:	430b      	orrs	r3, r1
 800db3a:	40c2      	lsrs	r2, r0
 800db3c:	6163      	str	r3, [r4, #20]
 800db3e:	9201      	str	r2, [sp, #4]
 800db40:	9b01      	ldr	r3, [sp, #4]
 800db42:	61a3      	str	r3, [r4, #24]
 800db44:	2b00      	cmp	r3, #0
 800db46:	bf14      	ite	ne
 800db48:	2102      	movne	r1, #2
 800db4a:	2101      	moveq	r1, #1
 800db4c:	6121      	str	r1, [r4, #16]
 800db4e:	b1c5      	cbz	r5, 800db82 <__d2b+0x96>
 800db50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db54:	4405      	add	r5, r0
 800db56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db5a:	603d      	str	r5, [r7, #0]
 800db5c:	6030      	str	r0, [r6, #0]
 800db5e:	4620      	mov	r0, r4
 800db60:	b002      	add	sp, #8
 800db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db6a:	e7d6      	b.n	800db1a <__d2b+0x2e>
 800db6c:	6161      	str	r1, [r4, #20]
 800db6e:	e7e7      	b.n	800db40 <__d2b+0x54>
 800db70:	a801      	add	r0, sp, #4
 800db72:	f7ff fceb 	bl	800d54c <__lo0bits>
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	6163      	str	r3, [r4, #20]
 800db7a:	2101      	movs	r1, #1
 800db7c:	6121      	str	r1, [r4, #16]
 800db7e:	3020      	adds	r0, #32
 800db80:	e7e5      	b.n	800db4e <__d2b+0x62>
 800db82:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800db86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db8a:	6038      	str	r0, [r7, #0]
 800db8c:	6918      	ldr	r0, [r3, #16]
 800db8e:	f7ff fcbd 	bl	800d50c <__hi0bits>
 800db92:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800db96:	6031      	str	r1, [r6, #0]
 800db98:	e7e1      	b.n	800db5e <__d2b+0x72>
 800db9a:	bf00      	nop
 800db9c:	0800f48c 	.word	0x0800f48c
 800dba0:	0800f580 	.word	0x0800f580

0800dba4 <__ratio>:
 800dba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	4688      	mov	r8, r1
 800dbaa:	4669      	mov	r1, sp
 800dbac:	4681      	mov	r9, r0
 800dbae:	f7ff ff49 	bl	800da44 <__b2d>
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	460d      	mov	r5, r1
 800dbb8:	4640      	mov	r0, r8
 800dbba:	a901      	add	r1, sp, #4
 800dbbc:	f7ff ff42 	bl	800da44 <__b2d>
 800dbc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dbc8:	eba3 0c02 	sub.w	ip, r3, r2
 800dbcc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbd0:	1a9b      	subs	r3, r3, r2
 800dbd2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bfd5      	itete	le
 800dbda:	460a      	movle	r2, r1
 800dbdc:	462a      	movgt	r2, r5
 800dbde:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbe2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dbe6:	468b      	mov	fp, r1
 800dbe8:	bfd8      	it	le
 800dbea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dbee:	465b      	mov	r3, fp
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7f2 fe11 	bl	800081c <__aeabi_ddiv>
 800dbfa:	b003      	add	sp, #12
 800dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc00 <__copybits>:
 800dc00:	3901      	subs	r1, #1
 800dc02:	b570      	push	{r4, r5, r6, lr}
 800dc04:	1149      	asrs	r1, r1, #5
 800dc06:	6914      	ldr	r4, [r2, #16]
 800dc08:	3101      	adds	r1, #1
 800dc0a:	f102 0314 	add.w	r3, r2, #20
 800dc0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc16:	1f05      	subs	r5, r0, #4
 800dc18:	42a3      	cmp	r3, r4
 800dc1a:	d30c      	bcc.n	800dc36 <__copybits+0x36>
 800dc1c:	1aa3      	subs	r3, r4, r2
 800dc1e:	3b11      	subs	r3, #17
 800dc20:	f023 0303 	bic.w	r3, r3, #3
 800dc24:	3211      	adds	r2, #17
 800dc26:	42a2      	cmp	r2, r4
 800dc28:	bf88      	it	hi
 800dc2a:	2300      	movhi	r3, #0
 800dc2c:	4418      	add	r0, r3
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4288      	cmp	r0, r1
 800dc32:	d305      	bcc.n	800dc40 <__copybits+0x40>
 800dc34:	bd70      	pop	{r4, r5, r6, pc}
 800dc36:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc3a:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc3e:	e7eb      	b.n	800dc18 <__copybits+0x18>
 800dc40:	f840 3b04 	str.w	r3, [r0], #4
 800dc44:	e7f4      	b.n	800dc30 <__copybits+0x30>

0800dc46 <__any_on>:
 800dc46:	f100 0214 	add.w	r2, r0, #20
 800dc4a:	6900      	ldr	r0, [r0, #16]
 800dc4c:	114b      	asrs	r3, r1, #5
 800dc4e:	4298      	cmp	r0, r3
 800dc50:	b510      	push	{r4, lr}
 800dc52:	db11      	blt.n	800dc78 <__any_on+0x32>
 800dc54:	dd0a      	ble.n	800dc6c <__any_on+0x26>
 800dc56:	f011 011f 	ands.w	r1, r1, #31
 800dc5a:	d007      	beq.n	800dc6c <__any_on+0x26>
 800dc5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc60:	fa24 f001 	lsr.w	r0, r4, r1
 800dc64:	fa00 f101 	lsl.w	r1, r0, r1
 800dc68:	428c      	cmp	r4, r1
 800dc6a:	d10b      	bne.n	800dc84 <__any_on+0x3e>
 800dc6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d803      	bhi.n	800dc7c <__any_on+0x36>
 800dc74:	2000      	movs	r0, #0
 800dc76:	bd10      	pop	{r4, pc}
 800dc78:	4603      	mov	r3, r0
 800dc7a:	e7f7      	b.n	800dc6c <__any_on+0x26>
 800dc7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc80:	2900      	cmp	r1, #0
 800dc82:	d0f5      	beq.n	800dc70 <__any_on+0x2a>
 800dc84:	2001      	movs	r0, #1
 800dc86:	e7f6      	b.n	800dc76 <__any_on+0x30>

0800dc88 <_calloc_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	fb02 f501 	mul.w	r5, r2, r1
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7fb ff52 	bl	8009b38 <_malloc_r>
 800dc94:	4604      	mov	r4, r0
 800dc96:	b118      	cbz	r0, 800dca0 <_calloc_r+0x18>
 800dc98:	462a      	mov	r2, r5
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	f7fb fef6 	bl	8009a8c <memset>
 800dca0:	4620      	mov	r0, r4
 800dca2:	bd38      	pop	{r3, r4, r5, pc}

0800dca4 <__ssputs_r>:
 800dca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca8:	688e      	ldr	r6, [r1, #8]
 800dcaa:	429e      	cmp	r6, r3
 800dcac:	4682      	mov	sl, r0
 800dcae:	460c      	mov	r4, r1
 800dcb0:	4690      	mov	r8, r2
 800dcb2:	461f      	mov	r7, r3
 800dcb4:	d838      	bhi.n	800dd28 <__ssputs_r+0x84>
 800dcb6:	898a      	ldrh	r2, [r1, #12]
 800dcb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcbc:	d032      	beq.n	800dd24 <__ssputs_r+0x80>
 800dcbe:	6825      	ldr	r5, [r4, #0]
 800dcc0:	6909      	ldr	r1, [r1, #16]
 800dcc2:	eba5 0901 	sub.w	r9, r5, r1
 800dcc6:	6965      	ldr	r5, [r4, #20]
 800dcc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	444b      	add	r3, r9
 800dcd4:	106d      	asrs	r5, r5, #1
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	bf38      	it	cc
 800dcda:	461d      	movcc	r5, r3
 800dcdc:	0553      	lsls	r3, r2, #21
 800dcde:	d531      	bpl.n	800dd44 <__ssputs_r+0xa0>
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7fb ff29 	bl	8009b38 <_malloc_r>
 800dce6:	4606      	mov	r6, r0
 800dce8:	b950      	cbnz	r0, 800dd00 <__ssputs_r+0x5c>
 800dcea:	230c      	movs	r3, #12
 800dcec:	f8ca 3000 	str.w	r3, [sl]
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf6:	81a3      	strh	r3, [r4, #12]
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd00:	6921      	ldr	r1, [r4, #16]
 800dd02:	464a      	mov	r2, r9
 800dd04:	f7fb feb4 	bl	8009a70 <memcpy>
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	6126      	str	r6, [r4, #16]
 800dd16:	6165      	str	r5, [r4, #20]
 800dd18:	444e      	add	r6, r9
 800dd1a:	eba5 0509 	sub.w	r5, r5, r9
 800dd1e:	6026      	str	r6, [r4, #0]
 800dd20:	60a5      	str	r5, [r4, #8]
 800dd22:	463e      	mov	r6, r7
 800dd24:	42be      	cmp	r6, r7
 800dd26:	d900      	bls.n	800dd2a <__ssputs_r+0x86>
 800dd28:	463e      	mov	r6, r7
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	6820      	ldr	r0, [r4, #0]
 800dd2e:	4641      	mov	r1, r8
 800dd30:	f000 fb48 	bl	800e3c4 <memmove>
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	6822      	ldr	r2, [r4, #0]
 800dd38:	1b9b      	subs	r3, r3, r6
 800dd3a:	4432      	add	r2, r6
 800dd3c:	60a3      	str	r3, [r4, #8]
 800dd3e:	6022      	str	r2, [r4, #0]
 800dd40:	2000      	movs	r0, #0
 800dd42:	e7db      	b.n	800dcfc <__ssputs_r+0x58>
 800dd44:	462a      	mov	r2, r5
 800dd46:	f000 fb57 	bl	800e3f8 <_realloc_r>
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d1e1      	bne.n	800dd14 <__ssputs_r+0x70>
 800dd50:	6921      	ldr	r1, [r4, #16]
 800dd52:	4650      	mov	r0, sl
 800dd54:	f7fb fea2 	bl	8009a9c <_free_r>
 800dd58:	e7c7      	b.n	800dcea <__ssputs_r+0x46>
	...

0800dd5c <_svfiprintf_r>:
 800dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd60:	4698      	mov	r8, r3
 800dd62:	898b      	ldrh	r3, [r1, #12]
 800dd64:	061b      	lsls	r3, r3, #24
 800dd66:	b09d      	sub	sp, #116	; 0x74
 800dd68:	4607      	mov	r7, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	4614      	mov	r4, r2
 800dd6e:	d50e      	bpl.n	800dd8e <_svfiprintf_r+0x32>
 800dd70:	690b      	ldr	r3, [r1, #16]
 800dd72:	b963      	cbnz	r3, 800dd8e <_svfiprintf_r+0x32>
 800dd74:	2140      	movs	r1, #64	; 0x40
 800dd76:	f7fb fedf 	bl	8009b38 <_malloc_r>
 800dd7a:	6028      	str	r0, [r5, #0]
 800dd7c:	6128      	str	r0, [r5, #16]
 800dd7e:	b920      	cbnz	r0, 800dd8a <_svfiprintf_r+0x2e>
 800dd80:	230c      	movs	r3, #12
 800dd82:	603b      	str	r3, [r7, #0]
 800dd84:	f04f 30ff 	mov.w	r0, #4294967295
 800dd88:	e0d1      	b.n	800df2e <_svfiprintf_r+0x1d2>
 800dd8a:	2340      	movs	r3, #64	; 0x40
 800dd8c:	616b      	str	r3, [r5, #20]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	9309      	str	r3, [sp, #36]	; 0x24
 800dd92:	2320      	movs	r3, #32
 800dd94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd98:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd9c:	2330      	movs	r3, #48	; 0x30
 800dd9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df48 <_svfiprintf_r+0x1ec>
 800dda2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dda6:	f04f 0901 	mov.w	r9, #1
 800ddaa:	4623      	mov	r3, r4
 800ddac:	469a      	mov	sl, r3
 800ddae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddb2:	b10a      	cbz	r2, 800ddb8 <_svfiprintf_r+0x5c>
 800ddb4:	2a25      	cmp	r2, #37	; 0x25
 800ddb6:	d1f9      	bne.n	800ddac <_svfiprintf_r+0x50>
 800ddb8:	ebba 0b04 	subs.w	fp, sl, r4
 800ddbc:	d00b      	beq.n	800ddd6 <_svfiprintf_r+0x7a>
 800ddbe:	465b      	mov	r3, fp
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	f7ff ff6d 	bl	800dca4 <__ssputs_r>
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f000 80aa 	beq.w	800df24 <_svfiprintf_r+0x1c8>
 800ddd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd2:	445a      	add	r2, fp
 800ddd4:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f000 80a2 	beq.w	800df24 <_svfiprintf_r+0x1c8>
 800dde0:	2300      	movs	r3, #0
 800dde2:	f04f 32ff 	mov.w	r2, #4294967295
 800dde6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddea:	f10a 0a01 	add.w	sl, sl, #1
 800ddee:	9304      	str	r3, [sp, #16]
 800ddf0:	9307      	str	r3, [sp, #28]
 800ddf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddf6:	931a      	str	r3, [sp, #104]	; 0x68
 800ddf8:	4654      	mov	r4, sl
 800ddfa:	2205      	movs	r2, #5
 800ddfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de00:	4851      	ldr	r0, [pc, #324]	; (800df48 <_svfiprintf_r+0x1ec>)
 800de02:	f7f2 f9d5 	bl	80001b0 <memchr>
 800de06:	9a04      	ldr	r2, [sp, #16]
 800de08:	b9d8      	cbnz	r0, 800de42 <_svfiprintf_r+0xe6>
 800de0a:	06d0      	lsls	r0, r2, #27
 800de0c:	bf44      	itt	mi
 800de0e:	2320      	movmi	r3, #32
 800de10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de14:	0711      	lsls	r1, r2, #28
 800de16:	bf44      	itt	mi
 800de18:	232b      	movmi	r3, #43	; 0x2b
 800de1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de1e:	f89a 3000 	ldrb.w	r3, [sl]
 800de22:	2b2a      	cmp	r3, #42	; 0x2a
 800de24:	d015      	beq.n	800de52 <_svfiprintf_r+0xf6>
 800de26:	9a07      	ldr	r2, [sp, #28]
 800de28:	4654      	mov	r4, sl
 800de2a:	2000      	movs	r0, #0
 800de2c:	f04f 0c0a 	mov.w	ip, #10
 800de30:	4621      	mov	r1, r4
 800de32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de36:	3b30      	subs	r3, #48	; 0x30
 800de38:	2b09      	cmp	r3, #9
 800de3a:	d94e      	bls.n	800deda <_svfiprintf_r+0x17e>
 800de3c:	b1b0      	cbz	r0, 800de6c <_svfiprintf_r+0x110>
 800de3e:	9207      	str	r2, [sp, #28]
 800de40:	e014      	b.n	800de6c <_svfiprintf_r+0x110>
 800de42:	eba0 0308 	sub.w	r3, r0, r8
 800de46:	fa09 f303 	lsl.w	r3, r9, r3
 800de4a:	4313      	orrs	r3, r2
 800de4c:	9304      	str	r3, [sp, #16]
 800de4e:	46a2      	mov	sl, r4
 800de50:	e7d2      	b.n	800ddf8 <_svfiprintf_r+0x9c>
 800de52:	9b03      	ldr	r3, [sp, #12]
 800de54:	1d19      	adds	r1, r3, #4
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	9103      	str	r1, [sp, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	bfbb      	ittet	lt
 800de5e:	425b      	neglt	r3, r3
 800de60:	f042 0202 	orrlt.w	r2, r2, #2
 800de64:	9307      	strge	r3, [sp, #28]
 800de66:	9307      	strlt	r3, [sp, #28]
 800de68:	bfb8      	it	lt
 800de6a:	9204      	strlt	r2, [sp, #16]
 800de6c:	7823      	ldrb	r3, [r4, #0]
 800de6e:	2b2e      	cmp	r3, #46	; 0x2e
 800de70:	d10c      	bne.n	800de8c <_svfiprintf_r+0x130>
 800de72:	7863      	ldrb	r3, [r4, #1]
 800de74:	2b2a      	cmp	r3, #42	; 0x2a
 800de76:	d135      	bne.n	800dee4 <_svfiprintf_r+0x188>
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	1d1a      	adds	r2, r3, #4
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	9203      	str	r2, [sp, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	bfb8      	it	lt
 800de84:	f04f 33ff 	movlt.w	r3, #4294967295
 800de88:	3402      	adds	r4, #2
 800de8a:	9305      	str	r3, [sp, #20]
 800de8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df58 <_svfiprintf_r+0x1fc>
 800de90:	7821      	ldrb	r1, [r4, #0]
 800de92:	2203      	movs	r2, #3
 800de94:	4650      	mov	r0, sl
 800de96:	f7f2 f98b 	bl	80001b0 <memchr>
 800de9a:	b140      	cbz	r0, 800deae <_svfiprintf_r+0x152>
 800de9c:	2340      	movs	r3, #64	; 0x40
 800de9e:	eba0 000a 	sub.w	r0, r0, sl
 800dea2:	fa03 f000 	lsl.w	r0, r3, r0
 800dea6:	9b04      	ldr	r3, [sp, #16]
 800dea8:	4303      	orrs	r3, r0
 800deaa:	3401      	adds	r4, #1
 800deac:	9304      	str	r3, [sp, #16]
 800deae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb2:	4826      	ldr	r0, [pc, #152]	; (800df4c <_svfiprintf_r+0x1f0>)
 800deb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deb8:	2206      	movs	r2, #6
 800deba:	f7f2 f979 	bl	80001b0 <memchr>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d038      	beq.n	800df34 <_svfiprintf_r+0x1d8>
 800dec2:	4b23      	ldr	r3, [pc, #140]	; (800df50 <_svfiprintf_r+0x1f4>)
 800dec4:	bb1b      	cbnz	r3, 800df0e <_svfiprintf_r+0x1b2>
 800dec6:	9b03      	ldr	r3, [sp, #12]
 800dec8:	3307      	adds	r3, #7
 800deca:	f023 0307 	bic.w	r3, r3, #7
 800dece:	3308      	adds	r3, #8
 800ded0:	9303      	str	r3, [sp, #12]
 800ded2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded4:	4433      	add	r3, r6
 800ded6:	9309      	str	r3, [sp, #36]	; 0x24
 800ded8:	e767      	b.n	800ddaa <_svfiprintf_r+0x4e>
 800deda:	fb0c 3202 	mla	r2, ip, r2, r3
 800dede:	460c      	mov	r4, r1
 800dee0:	2001      	movs	r0, #1
 800dee2:	e7a5      	b.n	800de30 <_svfiprintf_r+0xd4>
 800dee4:	2300      	movs	r3, #0
 800dee6:	3401      	adds	r4, #1
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	4619      	mov	r1, r3
 800deec:	f04f 0c0a 	mov.w	ip, #10
 800def0:	4620      	mov	r0, r4
 800def2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def6:	3a30      	subs	r2, #48	; 0x30
 800def8:	2a09      	cmp	r2, #9
 800defa:	d903      	bls.n	800df04 <_svfiprintf_r+0x1a8>
 800defc:	2b00      	cmp	r3, #0
 800defe:	d0c5      	beq.n	800de8c <_svfiprintf_r+0x130>
 800df00:	9105      	str	r1, [sp, #20]
 800df02:	e7c3      	b.n	800de8c <_svfiprintf_r+0x130>
 800df04:	fb0c 2101 	mla	r1, ip, r1, r2
 800df08:	4604      	mov	r4, r0
 800df0a:	2301      	movs	r3, #1
 800df0c:	e7f0      	b.n	800def0 <_svfiprintf_r+0x194>
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	462a      	mov	r2, r5
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <_svfiprintf_r+0x1f8>)
 800df16:	a904      	add	r1, sp, #16
 800df18:	4638      	mov	r0, r7
 800df1a:	f7fb ff05 	bl	8009d28 <_printf_float>
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	4606      	mov	r6, r0
 800df22:	d1d6      	bne.n	800ded2 <_svfiprintf_r+0x176>
 800df24:	89ab      	ldrh	r3, [r5, #12]
 800df26:	065b      	lsls	r3, r3, #25
 800df28:	f53f af2c 	bmi.w	800dd84 <_svfiprintf_r+0x28>
 800df2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df2e:	b01d      	add	sp, #116	; 0x74
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	ab03      	add	r3, sp, #12
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	462a      	mov	r2, r5
 800df3a:	4b06      	ldr	r3, [pc, #24]	; (800df54 <_svfiprintf_r+0x1f8>)
 800df3c:	a904      	add	r1, sp, #16
 800df3e:	4638      	mov	r0, r7
 800df40:	f7fc f98a 	bl	800a258 <_printf_i>
 800df44:	e7eb      	b.n	800df1e <_svfiprintf_r+0x1c2>
 800df46:	bf00      	nop
 800df48:	0800f6dc 	.word	0x0800f6dc
 800df4c:	0800f6e6 	.word	0x0800f6e6
 800df50:	08009d29 	.word	0x08009d29
 800df54:	0800dca5 	.word	0x0800dca5
 800df58:	0800f6e2 	.word	0x0800f6e2

0800df5c <__sfputc_r>:
 800df5c:	6893      	ldr	r3, [r2, #8]
 800df5e:	3b01      	subs	r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	b410      	push	{r4}
 800df64:	6093      	str	r3, [r2, #8]
 800df66:	da07      	bge.n	800df78 <__sfputc_r+0x1c>
 800df68:	6994      	ldr	r4, [r2, #24]
 800df6a:	42a3      	cmp	r3, r4
 800df6c:	db01      	blt.n	800df72 <__sfputc_r+0x16>
 800df6e:	290a      	cmp	r1, #10
 800df70:	d102      	bne.n	800df78 <__sfputc_r+0x1c>
 800df72:	bc10      	pop	{r4}
 800df74:	f7fd bca6 	b.w	800b8c4 <__swbuf_r>
 800df78:	6813      	ldr	r3, [r2, #0]
 800df7a:	1c58      	adds	r0, r3, #1
 800df7c:	6010      	str	r0, [r2, #0]
 800df7e:	7019      	strb	r1, [r3, #0]
 800df80:	4608      	mov	r0, r1
 800df82:	bc10      	pop	{r4}
 800df84:	4770      	bx	lr

0800df86 <__sfputs_r>:
 800df86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4614      	mov	r4, r2
 800df8e:	18d5      	adds	r5, r2, r3
 800df90:	42ac      	cmp	r4, r5
 800df92:	d101      	bne.n	800df98 <__sfputs_r+0x12>
 800df94:	2000      	movs	r0, #0
 800df96:	e007      	b.n	800dfa8 <__sfputs_r+0x22>
 800df98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9c:	463a      	mov	r2, r7
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7ff ffdc 	bl	800df5c <__sfputc_r>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d1f3      	bne.n	800df90 <__sfputs_r+0xa>
 800dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfac <_vfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	b09d      	sub	sp, #116	; 0x74
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	4698      	mov	r8, r3
 800dfb8:	4606      	mov	r6, r0
 800dfba:	b118      	cbz	r0, 800dfc4 <_vfiprintf_r+0x18>
 800dfbc:	6983      	ldr	r3, [r0, #24]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x18>
 800dfc0:	f7fe fd24 	bl	800ca0c <__sinit>
 800dfc4:	4b89      	ldr	r3, [pc, #548]	; (800e1ec <_vfiprintf_r+0x240>)
 800dfc6:	429d      	cmp	r5, r3
 800dfc8:	d11b      	bne.n	800e002 <_vfiprintf_r+0x56>
 800dfca:	6875      	ldr	r5, [r6, #4]
 800dfcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfce:	07d9      	lsls	r1, r3, #31
 800dfd0:	d405      	bmi.n	800dfde <_vfiprintf_r+0x32>
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	059a      	lsls	r2, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_vfiprintf_r+0x32>
 800dfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfda:	f7ff f91c 	bl	800d216 <__retarget_lock_acquire_recursive>
 800dfde:	89ab      	ldrh	r3, [r5, #12]
 800dfe0:	071b      	lsls	r3, r3, #28
 800dfe2:	d501      	bpl.n	800dfe8 <_vfiprintf_r+0x3c>
 800dfe4:	692b      	ldr	r3, [r5, #16]
 800dfe6:	b9eb      	cbnz	r3, 800e024 <_vfiprintf_r+0x78>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7fd fcce 	bl	800b98c <__swsetup_r>
 800dff0:	b1c0      	cbz	r0, 800e024 <_vfiprintf_r+0x78>
 800dff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff4:	07dc      	lsls	r4, r3, #31
 800dff6:	d50e      	bpl.n	800e016 <_vfiprintf_r+0x6a>
 800dff8:	f04f 30ff 	mov.w	r0, #4294967295
 800dffc:	b01d      	add	sp, #116	; 0x74
 800dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e002:	4b7b      	ldr	r3, [pc, #492]	; (800e1f0 <_vfiprintf_r+0x244>)
 800e004:	429d      	cmp	r5, r3
 800e006:	d101      	bne.n	800e00c <_vfiprintf_r+0x60>
 800e008:	68b5      	ldr	r5, [r6, #8]
 800e00a:	e7df      	b.n	800dfcc <_vfiprintf_r+0x20>
 800e00c:	4b79      	ldr	r3, [pc, #484]	; (800e1f4 <_vfiprintf_r+0x248>)
 800e00e:	429d      	cmp	r5, r3
 800e010:	bf08      	it	eq
 800e012:	68f5      	ldreq	r5, [r6, #12]
 800e014:	e7da      	b.n	800dfcc <_vfiprintf_r+0x20>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	0598      	lsls	r0, r3, #22
 800e01a:	d4ed      	bmi.n	800dff8 <_vfiprintf_r+0x4c>
 800e01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e01e:	f7ff f8fb 	bl	800d218 <__retarget_lock_release_recursive>
 800e022:	e7e9      	b.n	800dff8 <_vfiprintf_r+0x4c>
 800e024:	2300      	movs	r3, #0
 800e026:	9309      	str	r3, [sp, #36]	; 0x24
 800e028:	2320      	movs	r3, #32
 800e02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e032:	2330      	movs	r3, #48	; 0x30
 800e034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e1f8 <_vfiprintf_r+0x24c>
 800e038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e03c:	f04f 0901 	mov.w	r9, #1
 800e040:	4623      	mov	r3, r4
 800e042:	469a      	mov	sl, r3
 800e044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e048:	b10a      	cbz	r2, 800e04e <_vfiprintf_r+0xa2>
 800e04a:	2a25      	cmp	r2, #37	; 0x25
 800e04c:	d1f9      	bne.n	800e042 <_vfiprintf_r+0x96>
 800e04e:	ebba 0b04 	subs.w	fp, sl, r4
 800e052:	d00b      	beq.n	800e06c <_vfiprintf_r+0xc0>
 800e054:	465b      	mov	r3, fp
 800e056:	4622      	mov	r2, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7ff ff93 	bl	800df86 <__sfputs_r>
 800e060:	3001      	adds	r0, #1
 800e062:	f000 80aa 	beq.w	800e1ba <_vfiprintf_r+0x20e>
 800e066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e068:	445a      	add	r2, fp
 800e06a:	9209      	str	r2, [sp, #36]	; 0x24
 800e06c:	f89a 3000 	ldrb.w	r3, [sl]
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 80a2 	beq.w	800e1ba <_vfiprintf_r+0x20e>
 800e076:	2300      	movs	r3, #0
 800e078:	f04f 32ff 	mov.w	r2, #4294967295
 800e07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e080:	f10a 0a01 	add.w	sl, sl, #1
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	9307      	str	r3, [sp, #28]
 800e088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e08c:	931a      	str	r3, [sp, #104]	; 0x68
 800e08e:	4654      	mov	r4, sl
 800e090:	2205      	movs	r2, #5
 800e092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e096:	4858      	ldr	r0, [pc, #352]	; (800e1f8 <_vfiprintf_r+0x24c>)
 800e098:	f7f2 f88a 	bl	80001b0 <memchr>
 800e09c:	9a04      	ldr	r2, [sp, #16]
 800e09e:	b9d8      	cbnz	r0, 800e0d8 <_vfiprintf_r+0x12c>
 800e0a0:	06d1      	lsls	r1, r2, #27
 800e0a2:	bf44      	itt	mi
 800e0a4:	2320      	movmi	r3, #32
 800e0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0aa:	0713      	lsls	r3, r2, #28
 800e0ac:	bf44      	itt	mi
 800e0ae:	232b      	movmi	r3, #43	; 0x2b
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ba:	d015      	beq.n	800e0e8 <_vfiprintf_r+0x13c>
 800e0bc:	9a07      	ldr	r2, [sp, #28]
 800e0be:	4654      	mov	r4, sl
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	f04f 0c0a 	mov.w	ip, #10
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0cc:	3b30      	subs	r3, #48	; 0x30
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	d94e      	bls.n	800e170 <_vfiprintf_r+0x1c4>
 800e0d2:	b1b0      	cbz	r0, 800e102 <_vfiprintf_r+0x156>
 800e0d4:	9207      	str	r2, [sp, #28]
 800e0d6:	e014      	b.n	800e102 <_vfiprintf_r+0x156>
 800e0d8:	eba0 0308 	sub.w	r3, r0, r8
 800e0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	46a2      	mov	sl, r4
 800e0e6:	e7d2      	b.n	800e08e <_vfiprintf_r+0xe2>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	1d19      	adds	r1, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	9103      	str	r1, [sp, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfbb      	ittet	lt
 800e0f4:	425b      	neglt	r3, r3
 800e0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e0fa:	9307      	strge	r3, [sp, #28]
 800e0fc:	9307      	strlt	r3, [sp, #28]
 800e0fe:	bfb8      	it	lt
 800e100:	9204      	strlt	r2, [sp, #16]
 800e102:	7823      	ldrb	r3, [r4, #0]
 800e104:	2b2e      	cmp	r3, #46	; 0x2e
 800e106:	d10c      	bne.n	800e122 <_vfiprintf_r+0x176>
 800e108:	7863      	ldrb	r3, [r4, #1]
 800e10a:	2b2a      	cmp	r3, #42	; 0x2a
 800e10c:	d135      	bne.n	800e17a <_vfiprintf_r+0x1ce>
 800e10e:	9b03      	ldr	r3, [sp, #12]
 800e110:	1d1a      	adds	r2, r3, #4
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	9203      	str	r2, [sp, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	bfb8      	it	lt
 800e11a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e11e:	3402      	adds	r4, #2
 800e120:	9305      	str	r3, [sp, #20]
 800e122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e208 <_vfiprintf_r+0x25c>
 800e126:	7821      	ldrb	r1, [r4, #0]
 800e128:	2203      	movs	r2, #3
 800e12a:	4650      	mov	r0, sl
 800e12c:	f7f2 f840 	bl	80001b0 <memchr>
 800e130:	b140      	cbz	r0, 800e144 <_vfiprintf_r+0x198>
 800e132:	2340      	movs	r3, #64	; 0x40
 800e134:	eba0 000a 	sub.w	r0, r0, sl
 800e138:	fa03 f000 	lsl.w	r0, r3, r0
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	4303      	orrs	r3, r0
 800e140:	3401      	adds	r4, #1
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e148:	482c      	ldr	r0, [pc, #176]	; (800e1fc <_vfiprintf_r+0x250>)
 800e14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e14e:	2206      	movs	r2, #6
 800e150:	f7f2 f82e 	bl	80001b0 <memchr>
 800e154:	2800      	cmp	r0, #0
 800e156:	d03f      	beq.n	800e1d8 <_vfiprintf_r+0x22c>
 800e158:	4b29      	ldr	r3, [pc, #164]	; (800e200 <_vfiprintf_r+0x254>)
 800e15a:	bb1b      	cbnz	r3, 800e1a4 <_vfiprintf_r+0x1f8>
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	3307      	adds	r3, #7
 800e160:	f023 0307 	bic.w	r3, r3, #7
 800e164:	3308      	adds	r3, #8
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16a:	443b      	add	r3, r7
 800e16c:	9309      	str	r3, [sp, #36]	; 0x24
 800e16e:	e767      	b.n	800e040 <_vfiprintf_r+0x94>
 800e170:	fb0c 3202 	mla	r2, ip, r2, r3
 800e174:	460c      	mov	r4, r1
 800e176:	2001      	movs	r0, #1
 800e178:	e7a5      	b.n	800e0c6 <_vfiprintf_r+0x11a>
 800e17a:	2300      	movs	r3, #0
 800e17c:	3401      	adds	r4, #1
 800e17e:	9305      	str	r3, [sp, #20]
 800e180:	4619      	mov	r1, r3
 800e182:	f04f 0c0a 	mov.w	ip, #10
 800e186:	4620      	mov	r0, r4
 800e188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e18c:	3a30      	subs	r2, #48	; 0x30
 800e18e:	2a09      	cmp	r2, #9
 800e190:	d903      	bls.n	800e19a <_vfiprintf_r+0x1ee>
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0c5      	beq.n	800e122 <_vfiprintf_r+0x176>
 800e196:	9105      	str	r1, [sp, #20]
 800e198:	e7c3      	b.n	800e122 <_vfiprintf_r+0x176>
 800e19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e19e:	4604      	mov	r4, r0
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e7f0      	b.n	800e186 <_vfiprintf_r+0x1da>
 800e1a4:	ab03      	add	r3, sp, #12
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4b16      	ldr	r3, [pc, #88]	; (800e204 <_vfiprintf_r+0x258>)
 800e1ac:	a904      	add	r1, sp, #16
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f7fb fdba 	bl	8009d28 <_printf_float>
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	1c78      	adds	r0, r7, #1
 800e1b8:	d1d6      	bne.n	800e168 <_vfiprintf_r+0x1bc>
 800e1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1bc:	07d9      	lsls	r1, r3, #31
 800e1be:	d405      	bmi.n	800e1cc <_vfiprintf_r+0x220>
 800e1c0:	89ab      	ldrh	r3, [r5, #12]
 800e1c2:	059a      	lsls	r2, r3, #22
 800e1c4:	d402      	bmi.n	800e1cc <_vfiprintf_r+0x220>
 800e1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1c8:	f7ff f826 	bl	800d218 <__retarget_lock_release_recursive>
 800e1cc:	89ab      	ldrh	r3, [r5, #12]
 800e1ce:	065b      	lsls	r3, r3, #25
 800e1d0:	f53f af12 	bmi.w	800dff8 <_vfiprintf_r+0x4c>
 800e1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1d6:	e711      	b.n	800dffc <_vfiprintf_r+0x50>
 800e1d8:	ab03      	add	r3, sp, #12
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4b09      	ldr	r3, [pc, #36]	; (800e204 <_vfiprintf_r+0x258>)
 800e1e0:	a904      	add	r1, sp, #16
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7fc f838 	bl	800a258 <_printf_i>
 800e1e8:	e7e4      	b.n	800e1b4 <_vfiprintf_r+0x208>
 800e1ea:	bf00      	nop
 800e1ec:	0800f4c0 	.word	0x0800f4c0
 800e1f0:	0800f4e0 	.word	0x0800f4e0
 800e1f4:	0800f4a0 	.word	0x0800f4a0
 800e1f8:	0800f6dc 	.word	0x0800f6dc
 800e1fc:	0800f6e6 	.word	0x0800f6e6
 800e200:	08009d29 	.word	0x08009d29
 800e204:	0800df87 	.word	0x0800df87
 800e208:	0800f6e2 	.word	0x0800f6e2

0800e20c <nan>:
 800e20c:	4901      	ldr	r1, [pc, #4]	; (800e214 <nan+0x8>)
 800e20e:	2000      	movs	r0, #0
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	7ff80000 	.word	0x7ff80000

0800e218 <__sread>:
 800e218:	b510      	push	{r4, lr}
 800e21a:	460c      	mov	r4, r1
 800e21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e220:	f000 f910 	bl	800e444 <_read_r>
 800e224:	2800      	cmp	r0, #0
 800e226:	bfab      	itete	ge
 800e228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e22a:	89a3      	ldrhlt	r3, [r4, #12]
 800e22c:	181b      	addge	r3, r3, r0
 800e22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e232:	bfac      	ite	ge
 800e234:	6563      	strge	r3, [r4, #84]	; 0x54
 800e236:	81a3      	strhlt	r3, [r4, #12]
 800e238:	bd10      	pop	{r4, pc}

0800e23a <__swrite>:
 800e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23e:	461f      	mov	r7, r3
 800e240:	898b      	ldrh	r3, [r1, #12]
 800e242:	05db      	lsls	r3, r3, #23
 800e244:	4605      	mov	r5, r0
 800e246:	460c      	mov	r4, r1
 800e248:	4616      	mov	r6, r2
 800e24a:	d505      	bpl.n	800e258 <__swrite+0x1e>
 800e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e250:	2302      	movs	r3, #2
 800e252:	2200      	movs	r2, #0
 800e254:	f000 f8a4 	bl	800e3a0 <_lseek_r>
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e262:	81a3      	strh	r3, [r4, #12]
 800e264:	4632      	mov	r2, r6
 800e266:	463b      	mov	r3, r7
 800e268:	4628      	mov	r0, r5
 800e26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e26e:	f7fd bb7b 	b.w	800b968 <_write_r>

0800e272 <__sseek>:
 800e272:	b510      	push	{r4, lr}
 800e274:	460c      	mov	r4, r1
 800e276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e27a:	f000 f891 	bl	800e3a0 <_lseek_r>
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	bf15      	itete	ne
 800e284:	6560      	strne	r0, [r4, #84]	; 0x54
 800e286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e28e:	81a3      	strheq	r3, [r4, #12]
 800e290:	bf18      	it	ne
 800e292:	81a3      	strhne	r3, [r4, #12]
 800e294:	bd10      	pop	{r4, pc}

0800e296 <__sclose>:
 800e296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e29a:	f000 b83d 	b.w	800e318 <_close_r>

0800e29e <strncmp>:
 800e29e:	b510      	push	{r4, lr}
 800e2a0:	b16a      	cbz	r2, 800e2be <strncmp+0x20>
 800e2a2:	3901      	subs	r1, #1
 800e2a4:	1884      	adds	r4, r0, r2
 800e2a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e2aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d103      	bne.n	800e2ba <strncmp+0x1c>
 800e2b2:	42a0      	cmp	r0, r4
 800e2b4:	d001      	beq.n	800e2ba <strncmp+0x1c>
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1f5      	bne.n	800e2a6 <strncmp+0x8>
 800e2ba:	1a98      	subs	r0, r3, r2
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	4610      	mov	r0, r2
 800e2c0:	e7fc      	b.n	800e2bc <strncmp+0x1e>

0800e2c2 <__ascii_wctomb>:
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	b141      	cbz	r1, 800e2da <__ascii_wctomb+0x18>
 800e2c8:	2aff      	cmp	r2, #255	; 0xff
 800e2ca:	d904      	bls.n	800e2d6 <__ascii_wctomb+0x14>
 800e2cc:	228a      	movs	r2, #138	; 0x8a
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d4:	4770      	bx	lr
 800e2d6:	700a      	strb	r2, [r1, #0]
 800e2d8:	2001      	movs	r0, #1
 800e2da:	4770      	bx	lr

0800e2dc <__assert_func>:
 800e2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2de:	4614      	mov	r4, r2
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	4b09      	ldr	r3, [pc, #36]	; (800e308 <__assert_func+0x2c>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4605      	mov	r5, r0
 800e2e8:	68d8      	ldr	r0, [r3, #12]
 800e2ea:	b14c      	cbz	r4, 800e300 <__assert_func+0x24>
 800e2ec:	4b07      	ldr	r3, [pc, #28]	; (800e30c <__assert_func+0x30>)
 800e2ee:	9100      	str	r1, [sp, #0]
 800e2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2f4:	4906      	ldr	r1, [pc, #24]	; (800e310 <__assert_func+0x34>)
 800e2f6:	462b      	mov	r3, r5
 800e2f8:	f000 f81e 	bl	800e338 <fiprintf>
 800e2fc:	f000 f8b4 	bl	800e468 <abort>
 800e300:	4b04      	ldr	r3, [pc, #16]	; (800e314 <__assert_func+0x38>)
 800e302:	461c      	mov	r4, r3
 800e304:	e7f3      	b.n	800e2ee <__assert_func+0x12>
 800e306:	bf00      	nop
 800e308:	20000010 	.word	0x20000010
 800e30c:	0800f6ed 	.word	0x0800f6ed
 800e310:	0800f6fa 	.word	0x0800f6fa
 800e314:	0800f728 	.word	0x0800f728

0800e318 <_close_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	; (800e334 <_close_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f3 feec 	bl	8002100 <_close>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_close_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_close_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	200005fc 	.word	0x200005fc

0800e338 <fiprintf>:
 800e338:	b40e      	push	{r1, r2, r3}
 800e33a:	b503      	push	{r0, r1, lr}
 800e33c:	4601      	mov	r1, r0
 800e33e:	ab03      	add	r3, sp, #12
 800e340:	4805      	ldr	r0, [pc, #20]	; (800e358 <fiprintf+0x20>)
 800e342:	f853 2b04 	ldr.w	r2, [r3], #4
 800e346:	6800      	ldr	r0, [r0, #0]
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	f7ff fe2f 	bl	800dfac <_vfiprintf_r>
 800e34e:	b002      	add	sp, #8
 800e350:	f85d eb04 	ldr.w	lr, [sp], #4
 800e354:	b003      	add	sp, #12
 800e356:	4770      	bx	lr
 800e358:	20000010 	.word	0x20000010

0800e35c <_fstat_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d07      	ldr	r5, [pc, #28]	; (800e37c <_fstat_r+0x20>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	4611      	mov	r1, r2
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	f7f3 fed4 	bl	8002116 <_fstat>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	d102      	bne.n	800e378 <_fstat_r+0x1c>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	b103      	cbz	r3, 800e378 <_fstat_r+0x1c>
 800e376:	6023      	str	r3, [r4, #0]
 800e378:	bd38      	pop	{r3, r4, r5, pc}
 800e37a:	bf00      	nop
 800e37c:	200005fc 	.word	0x200005fc

0800e380 <_isatty_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4d06      	ldr	r5, [pc, #24]	; (800e39c <_isatty_r+0x1c>)
 800e384:	2300      	movs	r3, #0
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	f7f3 fed2 	bl	8002134 <_isatty>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_isatty_r+0x1a>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_isatty_r+0x1a>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	200005fc 	.word	0x200005fc

0800e3a0 <_lseek_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	; (800e3c0 <_lseek_r+0x20>)
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f7f3 feca 	bl	8002148 <_lseek>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_lseek_r+0x1e>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_lseek_r+0x1e>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	200005fc 	.word	0x200005fc

0800e3c4 <memmove>:
 800e3c4:	4288      	cmp	r0, r1
 800e3c6:	b510      	push	{r4, lr}
 800e3c8:	eb01 0402 	add.w	r4, r1, r2
 800e3cc:	d902      	bls.n	800e3d4 <memmove+0x10>
 800e3ce:	4284      	cmp	r4, r0
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	d807      	bhi.n	800e3e4 <memmove+0x20>
 800e3d4:	1e43      	subs	r3, r0, #1
 800e3d6:	42a1      	cmp	r1, r4
 800e3d8:	d008      	beq.n	800e3ec <memmove+0x28>
 800e3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3e2:	e7f8      	b.n	800e3d6 <memmove+0x12>
 800e3e4:	4402      	add	r2, r0
 800e3e6:	4601      	mov	r1, r0
 800e3e8:	428a      	cmp	r2, r1
 800e3ea:	d100      	bne.n	800e3ee <memmove+0x2a>
 800e3ec:	bd10      	pop	{r4, pc}
 800e3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3f6:	e7f7      	b.n	800e3e8 <memmove+0x24>

0800e3f8 <_realloc_r>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	4607      	mov	r7, r0
 800e3fc:	4614      	mov	r4, r2
 800e3fe:	460e      	mov	r6, r1
 800e400:	b921      	cbnz	r1, 800e40c <_realloc_r+0x14>
 800e402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e406:	4611      	mov	r1, r2
 800e408:	f7fb bb96 	b.w	8009b38 <_malloc_r>
 800e40c:	b922      	cbnz	r2, 800e418 <_realloc_r+0x20>
 800e40e:	f7fb fb45 	bl	8009a9c <_free_r>
 800e412:	4625      	mov	r5, r4
 800e414:	4628      	mov	r0, r5
 800e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e418:	f000 f82d 	bl	800e476 <_malloc_usable_size_r>
 800e41c:	42a0      	cmp	r0, r4
 800e41e:	d20f      	bcs.n	800e440 <_realloc_r+0x48>
 800e420:	4621      	mov	r1, r4
 800e422:	4638      	mov	r0, r7
 800e424:	f7fb fb88 	bl	8009b38 <_malloc_r>
 800e428:	4605      	mov	r5, r0
 800e42a:	2800      	cmp	r0, #0
 800e42c:	d0f2      	beq.n	800e414 <_realloc_r+0x1c>
 800e42e:	4631      	mov	r1, r6
 800e430:	4622      	mov	r2, r4
 800e432:	f7fb fb1d 	bl	8009a70 <memcpy>
 800e436:	4631      	mov	r1, r6
 800e438:	4638      	mov	r0, r7
 800e43a:	f7fb fb2f 	bl	8009a9c <_free_r>
 800e43e:	e7e9      	b.n	800e414 <_realloc_r+0x1c>
 800e440:	4635      	mov	r5, r6
 800e442:	e7e7      	b.n	800e414 <_realloc_r+0x1c>

0800e444 <_read_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4d07      	ldr	r5, [pc, #28]	; (800e464 <_read_r+0x20>)
 800e448:	4604      	mov	r4, r0
 800e44a:	4608      	mov	r0, r1
 800e44c:	4611      	mov	r1, r2
 800e44e:	2200      	movs	r2, #0
 800e450:	602a      	str	r2, [r5, #0]
 800e452:	461a      	mov	r2, r3
 800e454:	f7f3 fe1b 	bl	800208e <_read>
 800e458:	1c43      	adds	r3, r0, #1
 800e45a:	d102      	bne.n	800e462 <_read_r+0x1e>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	b103      	cbz	r3, 800e462 <_read_r+0x1e>
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	200005fc 	.word	0x200005fc

0800e468 <abort>:
 800e468:	b508      	push	{r3, lr}
 800e46a:	2006      	movs	r0, #6
 800e46c:	f000 f834 	bl	800e4d8 <raise>
 800e470:	2001      	movs	r0, #1
 800e472:	f7f3 fe02 	bl	800207a <_exit>

0800e476 <_malloc_usable_size_r>:
 800e476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e47a:	1f18      	subs	r0, r3, #4
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bfbc      	itt	lt
 800e480:	580b      	ldrlt	r3, [r1, r0]
 800e482:	18c0      	addlt	r0, r0, r3
 800e484:	4770      	bx	lr

0800e486 <_raise_r>:
 800e486:	291f      	cmp	r1, #31
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4604      	mov	r4, r0
 800e48c:	460d      	mov	r5, r1
 800e48e:	d904      	bls.n	800e49a <_raise_r+0x14>
 800e490:	2316      	movs	r3, #22
 800e492:	6003      	str	r3, [r0, #0]
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	bd38      	pop	{r3, r4, r5, pc}
 800e49a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e49c:	b112      	cbz	r2, 800e4a4 <_raise_r+0x1e>
 800e49e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4a2:	b94b      	cbnz	r3, 800e4b8 <_raise_r+0x32>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 f831 	bl	800e50c <_getpid_r>
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	4601      	mov	r1, r0
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4b4:	f000 b818 	b.w	800e4e8 <_kill_r>
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d00a      	beq.n	800e4d2 <_raise_r+0x4c>
 800e4bc:	1c59      	adds	r1, r3, #1
 800e4be:	d103      	bne.n	800e4c8 <_raise_r+0x42>
 800e4c0:	2316      	movs	r3, #22
 800e4c2:	6003      	str	r3, [r0, #0]
 800e4c4:	2001      	movs	r0, #1
 800e4c6:	e7e7      	b.n	800e498 <_raise_r+0x12>
 800e4c8:	2400      	movs	r4, #0
 800e4ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	4798      	blx	r3
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e7e0      	b.n	800e498 <_raise_r+0x12>
	...

0800e4d8 <raise>:
 800e4d8:	4b02      	ldr	r3, [pc, #8]	; (800e4e4 <raise+0xc>)
 800e4da:	4601      	mov	r1, r0
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	f7ff bfd2 	b.w	800e486 <_raise_r>
 800e4e2:	bf00      	nop
 800e4e4:	20000010 	.word	0x20000010

0800e4e8 <_kill_r>:
 800e4e8:	b538      	push	{r3, r4, r5, lr}
 800e4ea:	4d07      	ldr	r5, [pc, #28]	; (800e508 <_kill_r+0x20>)
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	4608      	mov	r0, r1
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	602b      	str	r3, [r5, #0]
 800e4f6:	f7f3 fdb0 	bl	800205a <_kill>
 800e4fa:	1c43      	adds	r3, r0, #1
 800e4fc:	d102      	bne.n	800e504 <_kill_r+0x1c>
 800e4fe:	682b      	ldr	r3, [r5, #0]
 800e500:	b103      	cbz	r3, 800e504 <_kill_r+0x1c>
 800e502:	6023      	str	r3, [r4, #0]
 800e504:	bd38      	pop	{r3, r4, r5, pc}
 800e506:	bf00      	nop
 800e508:	200005fc 	.word	0x200005fc

0800e50c <_getpid_r>:
 800e50c:	f7f3 bd9e 	b.w	800204c <_getpid>

0800e510 <_init>:
 800e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e512:	bf00      	nop
 800e514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e516:	bc08      	pop	{r3}
 800e518:	469e      	mov	lr, r3
 800e51a:	4770      	bx	lr

0800e51c <_fini>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr
