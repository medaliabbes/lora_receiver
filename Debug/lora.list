
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c654  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800c798  0800c798  0001c798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d054  0800d054  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d05c  0800d05c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001e0  0800d244  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800d244  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002198b  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004458  00000000  00000000  00041b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00045ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00047830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d90b  00000000  00000000  00048ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189f6  00000000  00000000  000667fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6bf1  00000000  00000000  0007f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007618  00000000  00000000  00125e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c77c 	.word	0x0800c77c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800c77c 	.word	0x0800c77c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a4 	b.w	8000f98 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83e 	bl	8000cd8 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4628      	mov	r0, r5
 8000c70:	4621      	mov	r1, r4
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	f7ff ff09 	bl	8000a8c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc7f 	bl	80005a8 <__aeabi_dmul>
 8000caa:	f7ff ff55 	bl	8000b58 <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc00 	bl	80004b4 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fc76 	bl	80005a8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fab8 	bl	8000238 <__aeabi_dsub>
 8000cc8:	f7ff ff46 	bl	8000b58 <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	468e      	mov	lr, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f040 8082 	bne.w	8000dee <__udivmoddi4+0x116>
 8000cea:	428a      	cmp	r2, r1
 8000cec:	4617      	mov	r7, r2
 8000cee:	d946      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x32>
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa05 f302 	lsl.w	r3, r5, r2
 8000cfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000d02:	4097      	lsls	r7, r2
 8000d04:	ea41 0e03 	orr.w	lr, r1, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fbbe fcf8 	udiv	ip, lr, r8
 8000d14:	b2b9      	uxth	r1, r7
 8000d16:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000d1a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d1e:	fb0c f001 	mul.w	r0, ip, r1
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000d2c:	f080 8116 	bcs.w	8000f5c <__udivmoddi4+0x284>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f240 8113 	bls.w	8000f5c <__udivmoddi4+0x284>
 8000d36:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3a:	443b      	add	r3, r7
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f101 	mul.w	r1, r0, r1
 8000d50:	42a1      	cmp	r1, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 8101 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	f240 80fe 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	1a64      	subs	r4, r4, r1
 8000d6a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40d4      	lsrs	r4, r2
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d14f      	bne.n	8000e2a <__udivmoddi4+0x152>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2101      	movs	r1, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c25      	lsrs	r5, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	197d      	adds	r5, r7, r5
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	42ab      	cmp	r3, r5
 8000db6:	f200 80e7 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1aed      	subs	r5, r5, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000dc4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000dc8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d7 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7c0      	b.n	8000d70 <__udivmoddi4+0x98>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	f000 80af 	beq.w	8000f56 <__udivmoddi4+0x27e>
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14b      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	d302      	bcc.n	8000e16 <__udivmoddi4+0x13e>
 8000e10:	4282      	cmp	r2, r0
 8000e12:	f200 80b7 	bhi.w	8000f84 <__udivmoddi4+0x2ac>
 8000e16:	1a84      	subs	r4, r0, r2
 8000e18:	eb65 0303 	sbc.w	r3, r5, r3
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	469e      	mov	lr, r3
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d0aa      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000e24:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e28:	e7a7      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000e2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	4097      	lsls	r7, r2
 8000e34:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000e40:	4318      	orrs	r0, r3
 8000e42:	fbbc f1fe 	udiv	r1, ip, lr
 8000e46:	0c05      	lsrs	r5, r0, #16
 8000e48:	fb0e cc11 	mls	ip, lr, r1, ip
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e54:	fb01 f308 	mul.w	r3, r1, r8
 8000e58:	42ab      	cmp	r3, r5
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	197d      	adds	r5, r7, r5
 8000e62:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e66:	f080 808b 	bcs.w	8000f80 <__udivmoddi4+0x2a8>
 8000e6a:	42ab      	cmp	r3, r5
 8000e6c:	f240 8088 	bls.w	8000f80 <__udivmoddi4+0x2a8>
 8000e70:	3902      	subs	r1, #2
 8000e72:	443d      	add	r5, r7
 8000e74:	1aeb      	subs	r3, r5, r3
 8000e76:	b285      	uxth	r5, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	197d      	adds	r5, r7, r5
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d271      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000e94:	42ab      	cmp	r3, r5
 8000e96:	d96f      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c1 0c20 	rsb	ip, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f70c 	lsr.w	r7, r2, ip
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 f40c 	lsr.w	r4, r0, ip
 8000eb4:	fa05 f301 	lsl.w	r3, r5, r1
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa25 f50c 	lsr.w	r5, r5, ip
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	0c23      	lsrs	r3, r4, #16
 8000ec4:	fbb5 f9fe 	udiv	r9, r5, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 5519 	mls	r5, lr, r9, r5
 8000ed0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000ed4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ed8:	45aa      	cmp	sl, r5
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	fa00 f301 	lsl.w	r3, r0, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x21e>
 8000ee4:	197d      	adds	r5, r7, r5
 8000ee6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eea:	d247      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000eec:	45aa      	cmp	sl, r5
 8000eee:	d945      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000ef0:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	eba5 050a 	sub.w	r5, r5, sl
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f00:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f08:	fb00 f808 	mul.w	r8, r0, r8
 8000f0c:	45a0      	cmp	r8, r4
 8000f0e:	d907      	bls.n	8000f20 <__udivmoddi4+0x248>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f16:	d22d      	bcs.n	8000f74 <__udivmoddi4+0x29c>
 8000f18:	45a0      	cmp	r8, r4
 8000f1a:	d92b      	bls.n	8000f74 <__udivmoddi4+0x29c>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	443c      	add	r4, r7
 8000f20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f24:	eba4 0408 	sub.w	r4, r4, r8
 8000f28:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2c:	454c      	cmp	r4, r9
 8000f2e:	46c6      	mov	lr, r8
 8000f30:	464d      	mov	r5, r9
 8000f32:	d319      	bcc.n	8000f68 <__udivmoddi4+0x290>
 8000f34:	d016      	beq.n	8000f64 <__udivmoddi4+0x28c>
 8000f36:	b15e      	cbz	r6, 8000f50 <__udivmoddi4+0x278>
 8000f38:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3c:	eb64 0405 	sbc.w	r4, r4, r5
 8000f40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f44:	40ca      	lsrs	r2, r1
 8000f46:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4a:	40cc      	lsrs	r4, r1
 8000f4c:	e9c6 2400 	strd	r2, r4, [r6]
 8000f50:	2100      	movs	r1, #0
 8000f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e70e      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f5c:	46ac      	mov	ip, r5
 8000f5e:	e6ed      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f60:	4618      	mov	r0, r3
 8000f62:	e701      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f64:	4543      	cmp	r3, r8
 8000f66:	d2e6      	bcs.n	8000f36 <__udivmoddi4+0x25e>
 8000f68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f6c:	eb69 0507 	sbc.w	r5, r9, r7
 8000f70:	3801      	subs	r0, #1
 8000f72:	e7e0      	b.n	8000f36 <__udivmoddi4+0x25e>
 8000f74:	4628      	mov	r0, r5
 8000f76:	e7d3      	b.n	8000f20 <__udivmoddi4+0x248>
 8000f78:	4660      	mov	r0, ip
 8000f7a:	e78f      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f7c:	4681      	mov	r9, r0
 8000f7e:	e7ba      	b.n	8000ef6 <__udivmoddi4+0x21e>
 8000f80:	4661      	mov	r1, ip
 8000f82:	e777      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	443d      	add	r5, r7
 8000f8e:	e715      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	e726      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f96:	bf00      	nop

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 8000fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa4:	f001 fa8c 	bl	80024c0 <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 8000fa8:	f001 fa4e 	bl	8002448 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <config_init+0x1c>)
 8000fae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb2:	611a      	str	r2, [r3, #16]
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58004000 	.word	0x58004000

08000fbc <config_save>:

int config_save(config_t * param)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	  uint32_t  PAGEError = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

	  static FLASH_EraseInitTypeDef EraseInitStruct;
	  HAL_StatusTypeDef sta ;

	  uint32_t adress = FLASH_USER_START_ADDR ;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <config_save+0x64>)
 8000fca:	61fb      	str	r3, [r7, #28]
	  //config_t myconfig = *param ;
	  uint64_t mydata  ;

	  memcpy(&mydata ,param , (int)sizeof(config_t) ) ;
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fba1 	bl	800871c <memcpy>

	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <config_save+0x68>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = FLASH_PAGE_NB - 1 ;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <config_save+0x68>)
 8000fe2:	227f      	movs	r2, #127	; 0x7f
 8000fe4:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 1 ;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <config_save+0x68>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	609a      	str	r2, [r3, #8]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480c      	ldr	r0, [pc, #48]	; (8001024 <config_save+0x68>)
 8000ff4:	f001 fb2a 	bl	800264c <HAL_FLASHEx_Erase>

	  sta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD ,adress , mydata);
 8000ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ffc:	69f9      	ldr	r1, [r7, #28]
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f9de 	bl	80023c0 <HAL_FLASH_Program>
 8001004:	4603      	mov	r3, r0
 8001006:	76fb      	strb	r3, [r7, #27]

	  HAL_FLASH_Lock() ;
 8001008:	f001 fa40 	bl	800248c <HAL_FLASH_Lock>

	  if(sta != HAL_OK )
 800100c:	7efb      	ldrb	r3, [r7, #27]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <config_save+0x5a>
	  {
		  return CONFIG_ERROR ;
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <config_save+0x5c>
	  }
	  else
	  {
		  return CONFIG_OK ;
 8001016:	2300      	movs	r3, #0
	  }

}
 8001018:	4618      	mov	r0, r3
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0803f800 	.word	0x0803f800
 8001024:	200001fc 	.word	0x200001fc

08001028 <config_load>:

void config_load(config_t * param)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8001030:	2008      	movs	r0, #8
 8001032:	f007 fb63 	bl	80086fc <malloc>
 8001036:	4603      	mov	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <config_load+0x54>)
 800103c:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e00b      	b.n	800105c <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	440b      	add	r3, r1
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3301      	adds	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b07      	cmp	r3, #7
 8001060:	d9f0      	bls.n	8001044 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8001062:	2208      	movs	r2, #8
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f007 fb58 	bl	800871c <memcpy>

	free(p_mydata) ;
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f007 fb4d 	bl	800870c <free>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	0803f800 	.word	0x0803f800

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <__NVIC_EnableIRQ+0x34>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800111c:	f023 0218 	bic.w	r2, r3, #24
 8001120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
	...

08001168 <main>:

config_t config_param ;
config_t config_param_copy ; // this should be loaded from the flash

int main(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b090      	sub	sp, #64	; 0x40
 800116c:	af02      	add	r7, sp, #8

  HAL_Init();
 800116e:	f000 ff81 	bl	8002074 <HAL_Init>


  SystemClock_Config();
 8001172:	f000 f937 	bl	80013e4 <SystemClock_Config>

  MX_GPIO_Init();
 8001176:	f000 f9e3 	bl	8001540 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800117a:	f000 f98d 	bl	8001498 <MX_USART1_UART_Init>
  SubghzApp_Init();
 800117e:	f000 fbe7 	bl	8001950 <SubghzApp_Init>

  uart_driver_init() ;
 8001182:	f000 fe13 	bl	8001dac <uart_driver_init>

  //Radio.Rx(1000);

  printf("Yes we did 'it!!\n");
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <main+0x88>)
 8001188:	f008 f868 	bl	800925c <puts>
  printf("enter your config\n");
 800118c:	4819      	ldr	r0, [pc, #100]	; (80011f4 <main+0x8c>)
 800118e:	f008 f865 	bl	800925c <puts>

  HAL_Delay(1000);
 8001192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001196:	f000 ffe3 	bl	8002160 <HAL_Delay>

  config_init();
 800119a:	f7ff feff 	bl	8000f9c <config_init>

  config_load(&config_param) ;
 800119e:	4816      	ldr	r0, [pc, #88]	; (80011f8 <main+0x90>)
 80011a0:	f7ff ff42 	bl	8001028 <config_load>

  memcpy(&config_param_copy , &config_param , sizeof(config_t));
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <main+0x94>)
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <main+0x90>)
 80011a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ac:	e883 0003 	stmia.w	r3, {r0, r1}

  printf("param seuil %f , debit %f\n",config_param.seuil , config_param.debit) ;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <main+0x90>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f99f 	bl	80004f8 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <main+0x90>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f998 	bl	80004f8 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	e9cd 2300 	strd	r2, r3, [sp]
 80011d0:	4622      	mov	r2, r4
 80011d2:	462b      	mov	r3, r5
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <main+0x98>)
 80011d6:	f007 ffbb 	bl	8009150 <iprintf>
  {
	  /* USER CODE END WHILE */

	  //PingPong_Process() ;

	  int len = uart_read_line(str) ;
 80011da:	463b      	mov	r3, r7
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fe1b 	bl	8001e18 <uart_read_line>
 80011e2:	6378      	str	r0, [r7, #52]	; 0x34

	  config_debit_seuil(str , len) ;
 80011e4:	463b      	mov	r3, r7
 80011e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f80b 	bl	8001204 <config_debit_seuil>
  {
 80011ee:	e7f4      	b.n	80011da <main+0x72>
 80011f0:	0800c798 	.word	0x0800c798
 80011f4:	0800c7ac 	.word	0x0800c7ac
 80011f8:	20000570 	.word	0x20000570
 80011fc:	20000608 	.word	0x20000608
 8001200:	0800c7c0 	.word	0x0800c7c0

08001204 <config_debit_seuil>:




void config_debit_seuil(char * input , int input_len)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	static unsigned char config_state = STATE_IDLE ;
	//printf("con debit :%s ,%d\n" ,input , input_len) ;
	input[input_len] = '\0' ;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	switch(config_state)
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <config_debit_seuil+0x1ac>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b04      	cmp	r3, #4
 800121e:	f200 80bb 	bhi.w	8001398 <config_debit_seuil+0x194>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <config_debit_seuil+0x24>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	0800123d 	.word	0x0800123d
 800122c:	08001265 	.word	0x08001265
 8001230:	08001399 	.word	0x08001399
 8001234:	0800128d 	.word	0x0800128d
 8001238:	08001385 	.word	0x08001385
	{
	case STATE_IDLE :
		if(strncmp("config" ,input , 6)==0 && input_len -1 == 6)
 800123c:	2206      	movs	r2, #6
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	485c      	ldr	r0, [pc, #368]	; (80013b4 <config_debit_seuil+0x1b0>)
 8001242:	f008 f823 	bl	800928c <strncmp>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 80a7 	bne.w	800139c <config_debit_seuil+0x198>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b07      	cmp	r3, #7
 8001252:	f040 80a3 	bne.w	800139c <config_debit_seuil+0x198>
		{
			//make transition here
			config_state = STATE_WAIT_PASSWORD ;
 8001256:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <config_debit_seuil+0x1ac>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
			printf("enter passwor\n") ;
 800125c:	4856      	ldr	r0, [pc, #344]	; (80013b8 <config_debit_seuil+0x1b4>)
 800125e:	f007 fffd 	bl	800925c <puts>
		}
		break ;
 8001262:	e09b      	b.n	800139c <config_debit_seuil+0x198>

	case STATE_WAIT_PASSWORD :

		if(strncmp(CONFIG_PASSWORD , input , strlen(CONFIG_PASSWORD)) == 0
 8001264:	2207      	movs	r2, #7
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4854      	ldr	r0, [pc, #336]	; (80013bc <config_debit_seuil+0x1b8>)
 800126a:	f008 f80f 	bl	800928c <strncmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 8095 	bne.w	80013a0 <config_debit_seuil+0x19c>
				&& input_len - 1 == strlen(CONFIG_PASSWORD))
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b08      	cmp	r3, #8
 800127a:	f040 8091 	bne.w	80013a0 <config_debit_seuil+0x19c>
		{
			config_state = STATE_GET_CONFIG ;
 800127e:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <config_debit_seuil+0x1ac>)
 8001280:	2203      	movs	r2, #3
 8001282:	701a      	strb	r2, [r3, #0]
			printf("enter your config\n");
 8001284:	484e      	ldr	r0, [pc, #312]	; (80013c0 <config_debit_seuil+0x1bc>)
 8001286:	f007 ffe9 	bl	800925c <puts>
		}
		break ;
 800128a:	e089      	b.n	80013a0 <config_debit_seuil+0x19c>

	case STATE_GET_CONFIG :

		if(strncmp("seuil:" , input ,6) == 0 && input_len >= 6)
 800128c:	2206      	movs	r2, #6
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	484c      	ldr	r0, [pc, #304]	; (80013c4 <config_debit_seuil+0x1c0>)
 8001292:	f007 fffb 	bl	800928c <strncmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11e      	bne.n	80012da <config_debit_seuil+0xd6>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	dd1b      	ble.n	80012da <config_debit_seuil+0xd6>
		{
			printf("%s\n" , input) ;
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f007 ffda 	bl	800925c <puts>
			char seu[10] ;
			strncpy(seu , &input[6] , input_len -7) ;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1d99      	adds	r1, r3, #6
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3b07      	subs	r3, #7
 80012b0:	461a      	mov	r2, r3
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 fffa 	bl	80092b0 <strncpy>
			config_param_copy.seuil = atof(seu) ;
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 f9ee 	bl	80086a2 <atof>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc63 	bl	8000b98 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <config_debit_seuil+0x1c4>)
 80012d6:	6053      	str	r3, [r2, #4]
		{
 80012d8:	e053      	b.n	8001382 <config_debit_seuil+0x17e>
			(void)seu ;
		}
		else if(strncmp("debit:" , input ,6) == 0 && input_len >= 6)
 80012da:	2206      	movs	r2, #6
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	483b      	ldr	r0, [pc, #236]	; (80013cc <config_debit_seuil+0x1c8>)
 80012e0:	f007 ffd4 	bl	800928c <strncmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11e      	bne.n	8001328 <config_debit_seuil+0x124>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	dd1b      	ble.n	8001328 <config_debit_seuil+0x124>
		{
			printf("%s\n" , input) ;
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 ffb3 	bl	800925c <puts>
			char deb[10] ;
			strncpy(deb , &input[6] ,input_len -7 ) ;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1d99      	adds	r1, r3, #6
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3b07      	subs	r3, #7
 80012fe:	461a      	mov	r2, r3
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4618      	mov	r0, r3
 8001306:	f007 ffd3 	bl	80092b0 <strncpy>

			//config_param_copy
			config_param_copy.debit = atof(deb) ;
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f007 f9c7 	bl	80086a2 <atof>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc3c 	bl	8000b98 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <config_debit_seuil+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]
		{
 8001326:	e02c      	b.n	8001382 <config_debit_seuil+0x17e>
			(void) deb ;
		}
		else if(strncmp("save" , input ,4 ) == 0 && input_len -1 == 4)
 8001328:	2204      	movs	r2, #4
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4828      	ldr	r0, [pc, #160]	; (80013d0 <config_debit_seuil+0x1cc>)
 800132e:	f007 ffad 	bl	800928c <strncmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <config_debit_seuil+0x14e>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d109      	bne.n	8001352 <config_debit_seuil+0x14e>
		{
			config_state = STATE_SAVE ;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <config_debit_seuil+0x1ac>)
 8001340:	2204      	movs	r2, #4
 8001342:	701a      	strb	r2, [r3, #0]
			memcpy(&config_param ,&config_param_copy , sizeof(config_param));
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <config_debit_seuil+0x1d0>)
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <config_debit_seuil+0x1c4>)
 8001348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001350:	e017      	b.n	8001382 <config_debit_seuil+0x17e>
		}
		else if(strncmp("discard" , input ,7) == 0 && input_len -1 == 7)
 8001352:	2207      	movs	r2, #7
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4820      	ldr	r0, [pc, #128]	; (80013d8 <config_debit_seuil+0x1d4>)
 8001358:	f007 ff98 	bl	800928c <strncmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d120      	bne.n	80013a4 <config_debit_seuil+0x1a0>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d11d      	bne.n	80013a4 <config_debit_seuil+0x1a0>
		{
			//can reload the struct config from the flash
			memcpy(&config_param_copy , &config_param , sizeof(config_t)) ;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <config_debit_seuil+0x1c4>)
 800136a:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <config_debit_seuil+0x1d0>)
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	e883 0003 	stmia.w	r3, {r0, r1}
			config_state = STATE_IDLE ;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <config_debit_seuil+0x1ac>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			printf("idle\n");
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <config_debit_seuil+0x1d8>)
 800137c:	f007 ff6e 	bl	800925c <puts>
		}
		break ;
 8001380:	e010      	b.n	80013a4 <config_debit_seuil+0x1a0>
 8001382:	e00f      	b.n	80013a4 <config_debit_seuil+0x1a0>

	case STATE_SAVE :
		//save to the flash
		printf("saved\n");
 8001384:	4816      	ldr	r0, [pc, #88]	; (80013e0 <config_debit_seuil+0x1dc>)
 8001386:	f007 ff69 	bl	800925c <puts>
		config_save(&config_param_copy) ;
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <config_debit_seuil+0x1c4>)
 800138c:	f7ff fe16 	bl	8000fbc <config_save>
		config_state = STATE_IDLE ;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <config_debit_seuil+0x1ac>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		break ;
 8001396:	e006      	b.n	80013a6 <config_debit_seuil+0x1a2>

	default :
		break ;
 8001398:	bf00      	nop
 800139a:	e004      	b.n	80013a6 <config_debit_seuil+0x1a2>
		break ;
 800139c:	bf00      	nop
 800139e:	e002      	b.n	80013a6 <config_debit_seuil+0x1a2>
		break ;
 80013a0:	bf00      	nop
 80013a2:	e000      	b.n	80013a6 <config_debit_seuil+0x1a2>
		break ;
 80013a4:	bf00      	nop
	}
}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000208 	.word	0x20000208
 80013b4:	0800c7dc 	.word	0x0800c7dc
 80013b8:	0800c7e4 	.word	0x0800c7e4
 80013bc:	0800c7f4 	.word	0x0800c7f4
 80013c0:	0800c7ac 	.word	0x0800c7ac
 80013c4:	0800c7fc 	.word	0x0800c7fc
 80013c8:	20000608 	.word	0x20000608
 80013cc:	0800c804 	.word	0x0800c804
 80013d0:	0800c80c 	.word	0x0800c80c
 80013d4:	20000570 	.word	0x20000570
 80013d8:	0800c814 	.word	0x0800c814
 80013dc:	0800c81c 	.word	0x0800c81c
 80013e0:	0800c824 	.word	0x0800c824

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09a      	sub	sp, #104	; 0x68
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2248      	movs	r2, #72	; 0x48
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 f9a0 	bl	8008738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800140a:	f001 fb6b 	bl	8002ae4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fe7c 	bl	800110c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <SystemClock_Config+0xb0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <SystemClock_Config+0xb0>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <SystemClock_Config+0xb0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001430:	2324      	movs	r3, #36	; 0x24
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001434:	2381      	movs	r3, #129	; 0x81
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800143c:	2300      	movs	r3, #0
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001440:	23b0      	movs	r3, #176	; 0xb0
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fdf3 	bl	8003038 <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001458:	f000 f879 	bl	800154e <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800145c:	234f      	movs	r3, #79	; 0x4f
 800145e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f976 	bl	800376c <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001486:	f000 f862 	bl	800154e <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3768      	adds	r7, #104	; 0x68
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58000400 	.word	0x58000400

08001498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 800149e:	4a27      	ldr	r2, [pc, #156]	; (800153c <MX_USART1_UART_Init+0xa4>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014e2:	f003 fade 	bl	8004aa2 <HAL_UART_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f82f 	bl	800154e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 80014f4:	f004 f8ca 	bl	800568c <HAL_UARTEx_SetTxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014fe:	f000 f826 	bl	800154e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 8001506:	f004 f8ff 	bl	8005708 <HAL_UARTEx_SetRxFifoThreshold>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001510:	f000 f81d 	bl	800154e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <MX_USART1_UART_Init+0xa0>)
 8001516:	f004 f881 	bl	800561c <HAL_UARTEx_DisableFifoMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001520:	f000 f815 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 8001524:	2024      	movs	r0, #36	; 0x24
 8001526:	f7ff fdab 	bl	8001080 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 800152a:	2101      	movs	r1, #1
 800152c:	2024      	movs	r0, #36	; 0x24
 800152e:	f7ff fdc3 	bl	80010b8 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000578 	.word	0x20000578
 800153c:	40013800 	.word	0x40013800

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	2002      	movs	r0, #2
 8001546:	f7ff fdf6 	bl	8001136 <LL_AHB2_GRP1_EnableClock>

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001552:	b672      	cpsid	i
}
 8001554:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001556:	e7fe      	b.n	8001556 <Error_Handler+0x8>

08001558 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 800155e:	1d39      	adds	r1, r7, #4
 8001560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001564:	2201      	movs	r2, #1
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <__io_getchar+0x20>)
 8001568:	f003 fb81 	bl	8004c6e <HAL_UART_Receive>
	return ch ;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000578 	.word	0x20000578

0800157c <__io_putchar>:

int __io_putchar(int ch)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 8001584:	1d39      	adds	r1, r7, #4
 8001586:	230a      	movs	r3, #10
 8001588:	2201      	movs	r2, #1
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <__io_putchar+0x20>)
 800158c:	f003 fad9 	bl	8004b42 <HAL_UART_Transmit>
	return ch ;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000578 	.word	0x20000578

080015a0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80015a4:	f000 fcb6 	bl	8001f14 <BSP_RADIO_Init>
 80015a8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}

080015ae <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fce8 	bl	8001f90 <BSP_RADIO_ConfigRFSwitch>
 80015c0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80015ce:	f000 fd3b 	bl	8002048 <BSP_RADIO_GetTxConfig>
 80015d2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80015dc:	f000 fd3b 	bl	8002056 <BSP_RADIO_IsTCXO>
 80015e0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80015ea:	f000 fd3b 	bl	8002064 <BSP_RADIO_IsDCDC>
 80015ee:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ring_init>:
#define RING_INC_ROLL_OVER(n, s, e) (((n)+1>=(e)) ? (s) : (n)+1)



Ring_t ring_init(uint8_t *buf, size_t len)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
    return RING_INIT(buf, len);
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	441a      	add	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6019      	str	r1, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	60da      	str	r2, [r3, #12]
}
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	3724      	adds	r7, #36	; 0x24
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <ring_isEmpty>:



bool ring_isEmpty(Ring_t ring)
{
 8001626:	b490      	push	{r4, r7}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	463c      	mov	r4, r7
 800162e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return ring.read == ring.write;
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	4770      	bx	lr

0800164a <ring_popAvailable>:
    else
        return (ring.end - ring.buf) - (ring.write - ring.read) - 1;
}

size_t ring_popAvailable(Ring_t ring)
{
 800164a:	b490      	push	{r4, r7}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	463c      	mov	r4, r7
 8001652:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(ring.read <= ring.write)
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d803      	bhi.n	8001666 <ring_popAvailable+0x1c>
        return ring.write - ring.read;
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	e006      	b.n	8001674 <ring_popAvailable+0x2a>
    else
        return (ring.end - ring.buf) - (ring.read - ring.write);
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	1ad2      	subs	r2, r2, r3
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1acb      	subs	r3, r1, r3
 8001672:	1ad3      	subs	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bc90      	pop	{r4, r7}
 800167c:	4770      	bx	lr

0800167e <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d302      	bcc.n	80016a6 <ring_pushOver+0x28>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	e002      	b.n	80016ac <ring_pushOver+0x2e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	3301      	adds	r3, #1
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d110      	bne.n	80016de <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d302      	bcc.n	80016d0 <ring_pushOver+0x52>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	e002      	b.n	80016d6 <ring_pushOver+0x58>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	60d3      	str	r3, [r2, #12]
        return 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <ring_pushOver+0x62>
    }
    
    return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <ring_pop>:


bool ring_pop(Ring_t *ring, uint8_t *data)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
    if(ring_isEmpty(*ring))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	f7ff ff95 	bl	8001626 <ring_isEmpty>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <ring_pop+0x1c>
        return 1;
 8001702:	2301      	movs	r3, #1
 8001704:	e014      	b.n	8001730 <ring_pop+0x46>
    
    *data = *ring->read;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <ring_pop+0x3a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e002      	b.n	800172a <ring_pop+0x40>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	60d3      	str	r3, [r2, #12]
    
    return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <LL_AHB2_GRP1_EnableClock>:
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b096      	sub	sp, #88	; 0x58
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2238      	movs	r2, #56	; 0x38
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 ffb7 	bl	8008738 <memset>
  if(huart->Instance==USART1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_UART_MspInit+0x94>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d12d      	bne.n	8001830 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80017dc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fb68 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ee:	f7ff feae 	bl	800154e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017f6:	f7ff ffb7 	bl	8001768 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2002      	movs	r0, #2
 80017fc:	f7ff ff9c 	bl	8001738 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001800:	23c0      	movs	r3, #192	; 0xc0
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001810:	2307      	movs	r3, #7
 8001812:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001818:	4619      	mov	r1, r3
 800181a:	4808      	ldr	r0, [pc, #32]	; (800183c <HAL_UART_MspInit+0x98>)
 800181c:	f000 ffea 	bl	80027f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2024      	movs	r0, #36	; 0x24
 8001826:	f000 fd96 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800182a:	2024      	movs	r0, #36	; 0x24
 800182c:	f000 fdad 	bl	800238a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3758      	adds	r7, #88	; 0x58
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40013800 	.word	0x40013800
 800183c:	48000400 	.word	0x48000400

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001886:	f000 fc4f 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <USART1_IRQHandler+0x2c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <USART1_IRQHandler+0x2c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fa9c 	bl	8001dec <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000578 	.word	0x20000578

080018c0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80018c6:	f002 ff27 	bl	8004718 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000610 	.word	0x20000610

080018d4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f8:	68fb      	ldr	r3, [r7, #12]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SUBGHZ_Init+0x20>)
 800190a:	2208      	movs	r2, #8
 800190c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_SUBGHZ_Init+0x20>)
 8001910:	f002 fc86 	bl	8004220 <HAL_SUBGHZ_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800191a:	f7ff fe18 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000610 	.word	0x20000610

08001928 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff ffcf 	bl	80018d4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2032      	movs	r0, #50	; 0x32
 800193c:	f000 fd0b 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001940:	2032      	movs	r0, #50	; 0x32
 8001942:	f000 fd22 	bl	800238a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08b      	sub	sp, #44	; 0x2c
 8001954:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  printf( "\n\rPING PONG\n\r");
 8001956:	4843      	ldr	r0, [pc, #268]	; (8001a64 <SubghzApp_Init+0x114>)
 8001958:	f007 fbfa 	bl	8009150 <iprintf>
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 800195c:	2300      	movs	r3, #0
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4841      	ldr	r0, [pc, #260]	; (8001a68 <SubghzApp_Init+0x118>)
 8001964:	f007 fbf4 	bl	8009150 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <SubghzApp_Init+0x11c>)
 800196a:	4a41      	ldr	r2, [pc, #260]	; (8001a70 <SubghzApp_Init+0x120>)
 800196c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <SubghzApp_Init+0x11c>)
 8001970:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <SubghzApp_Init+0x124>)
 8001972:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001974:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <SubghzApp_Init+0x11c>)
 8001976:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <SubghzApp_Init+0x128>)
 8001978:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <SubghzApp_Init+0x11c>)
 800197c:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <SubghzApp_Init+0x12c>)
 800197e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <SubghzApp_Init+0x11c>)
 8001982:	4a3f      	ldr	r2, [pc, #252]	; (8001a80 <SubghzApp_Init+0x130>)
 8001984:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001986:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <SubghzApp_Init+0x134>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4838      	ldr	r0, [pc, #224]	; (8001a6c <SubghzApp_Init+0x11c>)
 800198c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <SubghzApp_Init+0x134>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	483d      	ldr	r0, [pc, #244]	; (8001a88 <SubghzApp_Init+0x138>)
 8001994:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001996:	483d      	ldr	r0, [pc, #244]	; (8001a8c <SubghzApp_Init+0x13c>)
 8001998:	f007 fbda 	bl	8009150 <iprintf>
  printf("LORA_MODULATION\n\r");
 800199c:	483c      	ldr	r0, [pc, #240]	; (8001a90 <SubghzApp_Init+0x140>)
 800199e:	f007 fbd7 	bl	8009150 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 80019a2:	217d      	movs	r1, #125	; 0x7d
 80019a4:	483b      	ldr	r0, [pc, #236]	; (8001a94 <SubghzApp_Init+0x144>)
 80019a6:	f007 fbd3 	bl	8009150 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 80019aa:	2107      	movs	r1, #7
 80019ac:	483a      	ldr	r0, [pc, #232]	; (8001a98 <SubghzApp_Init+0x148>)
 80019ae:	f007 fbcf 	bl	8009150 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <SubghzApp_Init+0x134>)
 80019b4:	69dc      	ldr	r4, [r3, #28]
 80019b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019ba:	9308      	str	r3, [sp, #32]
 80019bc:	2300      	movs	r3, #0
 80019be:	9307      	str	r3, [sp, #28]
 80019c0:	2300      	movs	r3, #0
 80019c2:	9306      	str	r3, [sp, #24]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9304      	str	r3, [sp, #16]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	2308      	movs	r3, #8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2307      	movs	r3, #7
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2300      	movs	r3, #0
 80019de:	2200      	movs	r2, #0
 80019e0:	2114      	movs	r1, #20
 80019e2:	2001      	movs	r0, #1
 80019e4:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SubghzApp_Init+0x134>)
 80019e8:	699c      	ldr	r4, [r3, #24]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9309      	str	r3, [sp, #36]	; 0x24
 80019ee:	2300      	movs	r3, #0
 80019f0:	9308      	str	r3, [sp, #32]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9307      	str	r3, [sp, #28]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9306      	str	r3, [sp, #24]
 80019fa:	2301      	movs	r3, #1
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	2300      	movs	r3, #0
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	2305      	movs	r3, #5
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	2207      	movs	r2, #7
 8001a16:	2100      	movs	r1, #0
 8001a18:	2001      	movs	r0, #1
 8001a1a:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <SubghzApp_Init+0x134>)
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	21ff      	movs	r1, #255	; 0xff
 8001a22:	2001      	movs	r0, #1
 8001a24:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <SubghzApp_Init+0x134>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4798      	blx	r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	0d9b      	lsrs	r3, r3, #22
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <SubghzApp_Init+0x14c>)
 8001a34:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <SubghzApp_Init+0x150>)
 8001a3c:	f006 fe7c 	bl	8008738 <memset>

  printf( "rand=%ld\n\r", random_delay);
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <SubghzApp_Init+0x14c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <SubghzApp_Init+0x154>)
 8001a48:	f007 fb82 	bl	8009150 <iprintf>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <SubghzApp_Init+0x134>)
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <SubghzApp_Init+0x14c>)
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4798      	blx	r3

}
 8001a5c:	bf00      	nop
 8001a5e:	3704      	adds	r7, #4
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}
 8001a64:	0800c82c 	.word	0x0800c82c
 8001a68:	0800c83c 	.word	0x0800c83c
 8001a6c:	2000020c 	.word	0x2000020c
 8001a70:	08001aa9 	.word	0x08001aa9
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001b89 	.word	0x08001b89
 8001a7c:	08001ba5 	.word	0x08001ba5
 8001a80:	08001bc1 	.word	0x08001bc1
 8001a84:	0800ca70 	.word	0x0800ca70
 8001a88:	33bca100 	.word	0x33bca100
 8001a8c:	0800c858 	.word	0x0800c858
 8001a90:	0800c86c 	.word	0x0800c86c
 8001a94:	0800c880 	.word	0x0800c880
 8001a98:	0800c894 	.word	0x0800c894
 8001a9c:	20000430 	.word	0x20000430
 8001aa0:	2000032c 	.word	0x2000032c
 8001aa4:	0800c8a4 	.word	0x0800c8a4

08001aa8 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  printf( "OnTxDone\n\r");
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <OnTxDone+0x14>)
 8001aae:	f007 fb4f 	bl	8009150 <iprintf>
  /* Update the State of the FSM*/
  State = TX;
 8001ab2:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <OnTxDone+0x18>)
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	701a      	strb	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0800c8b0 	.word	0x0800c8b0
 8001ac0:	20000228 	.word	0x20000228

08001ac4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	817b      	strh	r3, [r7, #10]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	813b      	strh	r3, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
	printf( "OnRxDone\n\r");
 8001ade:	4822      	ldr	r0, [pc, #136]	; (8001b68 <OnRxDone+0xa4>)
 8001ae0:	f007 fb36 	bl	8009150 <iprintf>
	char * recv = (char*) malloc(sizeof(char) * (size +1));
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 fe07 	bl	80086fc <malloc>
 8001aee:	4603      	mov	r3, r0
 8001af0:	617b      	str	r3, [r7, #20]
	memcpy(recv , payload , size) ;
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	461a      	mov	r2, r3
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	6978      	ldr	r0, [r7, #20]
 8001afa:	f006 fe0f 	bl	800871c <memcpy>
	recv[size] = '\0' ;
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4413      	add	r3, r2
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
	printf( "recv : %s\n\r" , recv);
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	4818      	ldr	r0, [pc, #96]	; (8001b6c <OnRxDone+0xa8>)
 8001b0c:	f007 fb20 	bl	8009150 <iprintf>

	free(recv) ;
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f006 fdfb 	bl	800870c <free>

	printf( "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 8001b16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b1a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <OnRxDone+0xac>)
 8001b22:	f007 fb15 	bl	8009150 <iprintf>
    /* Record payload Signal to noise ratio in Lora*/
    SnrValue = LoraSnr_FskCfo;
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <OnRxDone+0xb0>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	7013      	strb	r3, [r2, #0]

    /* Update the State of the FSM*/
    State = RX;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <OnRxDone+0xb4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    /* Clear BufferRx*/
	memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8001b32:	22ff      	movs	r2, #255	; 0xff
 8001b34:	2100      	movs	r1, #0
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <OnRxDone+0xb8>)
 8001b38:	f006 fdfe 	bl	8008738 <memset>
	/* Record payload size*/
	RxBufferSize = size;
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <OnRxDone+0xbc>)
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	8013      	strh	r3, [r2, #0]
	if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <OnRxDone+0xbc>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2bff      	cmp	r3, #255	; 0xff
 8001b48:	d806      	bhi.n	8001b58 <OnRxDone+0x94>
	{
		memcpy(BufferRx, payload, RxBufferSize);
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <OnRxDone+0xbc>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <OnRxDone+0xb8>)
 8001b54:	f006 fde2 	bl	800871c <memcpy>
	}
	/* Record Received Signal Strength*/
	RssiValue = rssi;
 8001b58:	893b      	ldrh	r3, [r7, #8]
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <OnRxDone+0xc0>)
 8001b5e:	701a      	strb	r2, [r3, #0]
	/* Record payload content*/

}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	0800c8bc 	.word	0x0800c8bc
 8001b6c:	0800c8c8 	.word	0x0800c8c8
 8001b70:	0800c8d4 	.word	0x0800c8d4
 8001b74:	2000042f 	.word	0x2000042f
 8001b78:	20000228 	.word	0x20000228
 8001b7c:	2000022c 	.word	0x2000022c
 8001b80:	2000042c 	.word	0x2000042c
 8001b84:	2000042e 	.word	0x2000042e

08001b88 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <OnTxTimeout+0x14>)
 8001b8e:	f007 fadf 	bl	8009150 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <OnTxTimeout+0x18>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	701a      	strb	r2, [r3, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	0800c8f8 	.word	0x0800c8f8
 8001ba0:	20000228 	.word	0x20000228

08001ba4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <OnRxTimeout+0x14>)
 8001baa:	f007 fad1 	bl	8009150 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 8001bae:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <OnRxTimeout+0x18>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	0800c908 	.word	0x0800c908
 8001bbc:	20000228 	.word	0x20000228

08001bc0 <OnRxError>:

static void OnRxError(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <OnRxError+0x14>)
 8001bc6:	f007 fac3 	bl	8009150 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8001bca:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <OnRxError+0x18>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0800c918 	.word	0x0800c918
 8001bd8:	20000228 	.word	0x20000228

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_kill>:

int _kill(int pid, int sig)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bf4:	f006 fd58 	bl	80086a8 <__errno>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2216      	movs	r2, #22
 8001bfc:	601a      	str	r2, [r3, #0]
	return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_exit>:

void _exit (int status)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c12:	f04f 31ff 	mov.w	r1, #4294967295
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffe7 	bl	8001bea <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c1c:	e7fe      	b.n	8001c1c <_exit+0x12>

08001c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c30:	f7ff fc92 	bl	8001558 <__io_getchar>
 8001c34:	4601      	mov	r1, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf0      	blt.n	8001c30 <_read+0x12>
	}

return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc82 	bl	800157c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
	}
	return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_close>:

int _close(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_isatty>:

int _isatty(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f006 fcc2 	bl	80086a8 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20008000 	.word	0x20008000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000434 	.word	0x20000434
 8001d58:	20000700 	.word	0x20000700

08001d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <set_NL_detection+0x14>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000438 	.word	0x20000438

08001d80 <clear_NL_detection>:

void clear_NL_detection()
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	NL_Detection = false ;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <clear_NL_detection+0x14>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000438 	.word	0x20000438

08001d98 <get_NL_detection>:

bool get_NL_detection()
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	return NL_Detection ;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <get_NL_detection+0x10>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000438 	.word	0x20000438

08001dac <uart_driver_init>:


void uart_driver_init()
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
	// here can add hardware initialisation and enable interrupt
	uart_fifo = ring_init(uart_rxbuffer , UART_BUFFER_LENGTH) ;
 8001db2:	4c0b      	ldr	r4, [pc, #44]	; (8001de0 <uart_driver_init+0x34>)
 8001db4:	463b      	mov	r3, r7
 8001db6:	2264      	movs	r2, #100	; 0x64
 8001db8:	490a      	ldr	r1, [pc, #40]	; (8001de4 <uart_driver_init+0x38>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc1a 	bl	80015f4 <ring_init>
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <uart_driver_init+0x3c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <uart_driver_init+0x3c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	2000061c 	.word	0x2000061c
 8001de4:	2000062c 	.word	0x2000062c
 8001de8:	20000578 	.word	0x20000578

08001dec <uart_RX_interrupt_hanlder>:

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d101      	bne.n	8001e00 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001dfc:	f7ff ffb4 	bl	8001d68 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <uart_RX_interrupt_hanlder+0x28>)
 8001e06:	f7ff fc3a 	bl	800167e <ring_pushOver>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000061c 	.word	0x2000061c

08001e18 <uart_read_line>:

/**
 * read from uart_fifo until '\n'
 */
int uart_read_line(char * data)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

	if(get_NL_detection() == false)
 8001e20:	f7ff ffba 	bl	8001d98 <get_NL_detection>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <uart_read_line+0x1c>
		return 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e027      	b.n	8001e84 <uart_read_line+0x6c>

	int len = ring_popAvailable(uart_fifo)  ;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <uart_read_line+0x74>)
 8001e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e38:	f7ff fc07 	bl	800164a <ring_popAvailable>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60bb      	str	r3, [r7, #8]

    if(len == 0 )
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <uart_read_line+0x32>
    	return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e01c      	b.n	8001e84 <uart_read_line+0x6c>

    int i = 0 ;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]

    for( ; i< len ; i++)
 8001e4e:	e012      	b.n	8001e76 <uart_read_line+0x5e>
    {
    	ring_pop(&uart_fifo , (uint8_t*)&data[i] ) ;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <uart_read_line+0x74>)
 8001e5a:	f7ff fc46 	bl	80016ea <ring_pop>
    	if(data[i] == '\n')
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b0a      	cmp	r3, #10
 8001e68:	d102      	bne.n	8001e70 <uart_read_line+0x58>
    	{
    		clear_NL_detection() ;
 8001e6a:	f7ff ff89 	bl	8001d80 <clear_NL_detection>
    		break ;
 8001e6e:	e006      	b.n	8001e7e <uart_read_line+0x66>
    for( ; i< len ; i++)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbe8      	blt.n	8001e50 <uart_read_line+0x38>
    	}
    }

    return i++ ;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60fa      	str	r2, [r7, #12]

}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000061c 	.word	0x2000061c

08001e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e94:	f7ff ff62 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ebe:	f006 fbf9 	bl	80086b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec2:	f7ff f951 	bl	8001168 <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   r0, =_estack
 8001ec8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ed4:	0800d064 	.word	0x0800d064
  ldr r2, =_sbss
 8001ed8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001edc:	200006fc 	.word	0x200006fc

08001ee0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>

08001ee2 <LL_AHB2_GRP1_EnableClock>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f7ff ffda 	bl	8001ee2 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4812      	ldr	r0, [pc, #72]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f44:	f000 fc56 	bl	80027f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480e      	ldr	r0, [pc, #56]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f52:	f000 fc4f 	bl	80027f4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001f56:	2308      	movs	r3, #8
 8001f58:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f60:	f000 fc48 	bl	80027f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001f64:	2200      	movs	r2, #0
 8001f66:	2120      	movs	r1, #32
 8001f68:	4808      	ldr	r0, [pc, #32]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f6a:	f000 fda3 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2110      	movs	r1, #16
 8001f72:	4806      	ldr	r0, [pc, #24]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f74:	f000 fd9e 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <BSP_RADIO_Init+0x78>)
 8001f7e:	f000 fd99 	bl	8002ab4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	48000800 	.word	0x48000800

08001f90 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d84b      	bhi.n	8002038 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fd9 	.word	0x08001fd9
 8001fb0:	08001ff9 	.word	0x08001ff9
 8001fb4:	08002019 	.word	0x08002019
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2108      	movs	r1, #8
 8001fbc:	4821      	ldr	r0, [pc, #132]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fbe:	f000 fd79 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	481f      	ldr	r0, [pc, #124]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fc8:	f000 fd74 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2120      	movs	r1, #32
 8001fd0:	481c      	ldr	r0, [pc, #112]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fd2:	f000 fd6f 	bl	8002ab4 <HAL_GPIO_WritePin>
      break;      
 8001fd6:	e030      	b.n	800203a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2108      	movs	r1, #8
 8001fdc:	4819      	ldr	r0, [pc, #100]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fde:	f000 fd69 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	4817      	ldr	r0, [pc, #92]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fe8:	f000 fd64 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001fec:	2200      	movs	r2, #0
 8001fee:	2120      	movs	r1, #32
 8001ff0:	4814      	ldr	r0, [pc, #80]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ff2:	f000 fd5f 	bl	8002ab4 <HAL_GPIO_WritePin>
      break;
 8001ff6:	e020      	b.n	800203a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ffe:	f000 fd59 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002002:	2201      	movs	r2, #1
 8002004:	2110      	movs	r1, #16
 8002006:	480f      	ldr	r0, [pc, #60]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002008:	f000 fd54 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800200c:	2201      	movs	r2, #1
 800200e:	2120      	movs	r1, #32
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002012:	f000 fd4f 	bl	8002ab4 <HAL_GPIO_WritePin>
      break;
 8002016:	e010      	b.n	800203a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	2108      	movs	r1, #8
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800201e:	f000 fd49 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002022:	2200      	movs	r2, #0
 8002024:	2110      	movs	r1, #16
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002028:	f000 fd44 	bl	8002ab4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800202c:	2201      	movs	r2, #1
 800202e:	2120      	movs	r1, #32
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002032:	f000 fd3f 	bl	8002ab4 <HAL_GPIO_WritePin>
      break;
 8002036:	e000      	b.n	800203a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002038:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	48000800 	.word	0x48000800

08002048 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207e:	2003      	movs	r0, #3
 8002080:	f000 f95e 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002084:	f001 fd36 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8002088:	4603      	mov	r3, r0
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_Init+0x3c>)
 800208c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800208e:	200f      	movs	r0, #15
 8002090:	f000 f810 	bl	80020b4 <HAL_InitTick>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	e001      	b.n	80020a4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a0:	f7ff fb7a 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_InitTick+0x6c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d024      	beq.n	8002112 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020c8:	f001 fd14 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_InitTick+0x6c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f960 	bl	80023a6 <HAL_SYSTICK_Config>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10f      	bne.n	800210c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d809      	bhi.n	8002106 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
 80020fa:	f000 f92c 	bl	8002356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_InitTick+0x70>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e007      	b.n	8002116 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e004      	b.n	8002116 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000008 	.word	0x20000008
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x1c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x20>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_IncTick+0x20>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000008 	.word	0x20000008
 8002148:	20000690 	.word	0x20000690

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b02      	ldr	r3, [pc, #8]	; (800215c <HAL_GetTick+0x10>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	20000690 	.word	0x20000690

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff fff0 	bl	800214c <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffe0 	bl	800214c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008

080021a8 <__NVIC_SetPriorityGrouping>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4906      	ldr	r1, [pc, #24]	; (8002240 <__NVIC_EnableIRQ+0x34>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff90 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff2d 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff44 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff92 	bl	8002298 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff61 	bl	8002244 <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff37 	bl	800220c <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa4 	bl	80022fc <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_FLASH_Program+0x80>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_FLASH_Program+0x1a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e02d      	b.n	8002436 <HAL_FLASH_Program+0x76>
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_FLASH_Program+0x80>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_FLASH_Program+0x80>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ea:	f000 f869 	bl	80024c0 <FLASH_WaitForLastOperation>
 80023ee:	4603      	mov	r3, r0
 80023f0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11a      	bne.n	800242e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80023fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	f000 f8be 	bl	8002584 <FLASH_Program_DoubleWord>
 8002408:	e004      	b.n	8002414 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	f000 f8de 	bl	80025d0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002418:	f000 f852 	bl	80024c0 <FLASH_WaitForLastOperation>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_FLASH_Program+0x84>)
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <HAL_FLASH_Program+0x84>)
 800242a:	4013      	ands	r3, r2
 800242c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_FLASH_Program+0x80>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000043c 	.word	0x2000043c
 8002444:	58004000 	.word	0x58004000

08002448 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_FLASH_Unlock+0x38>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0b      	bge.n	8002472 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_FLASH_Unlock+0x38>)
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_FLASH_Unlock+0x3c>)
 800245e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_FLASH_Unlock+0x38>)
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 8002464:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_FLASH_Unlock+0x38>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	da01      	bge.n	8002472 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002472:	79fb      	ldrb	r3, [r7, #7]
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	58004000 	.word	0x58004000
 8002484:	45670123 	.word	0x45670123
 8002488:	cdef89ab 	.word	0xcdef89ab

0800248c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_FLASH_Lock+0x30>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_FLASH_Lock+0x30>)
 800249c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_FLASH_Lock+0x30>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db01      	blt.n	80024ae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80024ae:	79fb      	ldrb	r3, [r7, #7]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	58004000 	.word	0x58004000

080024c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fe40 	bl	800214c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024ce:	e009      	b.n	80024e4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80024d0:	f7ff fe3c 	bl	800214c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d801      	bhi.n	80024e4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e047      	b.n	8002574 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d0ee      	beq.n	80024d0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 8002504:	2201      	movs	r2, #1
 8002506:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800250e:	4013      	ands	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <FLASH_WaitForLastOperation+0x6c>
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002526:	4915      	ldr	r1, [pc, #84]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	618b      	str	r3, [r1, #24]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <FLASH_WaitForLastOperation+0x80>
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800253e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <FLASH_WaitForLastOperation+0xc0>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e011      	b.n	8002574 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002550:	f7ff fdfc 	bl	800214c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	d801      	bhi.n	8002564 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e007      	b.n	8002574 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <FLASH_WaitForLastOperation+0xbc>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002570:	d0ee      	beq.n	8002550 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	58004000 	.word	0x58004000
 8002580:	2000043c 	.word	0x2000043c

08002584 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <FLASH_Program_DoubleWord+0x48>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <FLASH_Program_DoubleWord+0x48>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025a2:	f3bf 8f6f 	isb	sy
}
 80025a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80025a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	000a      	movs	r2, r1
 80025b6:	2300      	movs	r3, #0
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	3104      	adds	r1, #4
 80025bc:	4613      	mov	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	58004000 	.word	0x58004000

080025d0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80025da:	2340      	movs	r3, #64	; 0x40
 80025dc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <FLASH_Program_Fast+0x78>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4a17      	ldr	r2, [pc, #92]	; (8002648 <FLASH_Program_Fast+0x78>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f2:	f3ef 8310 	mrs	r3, PRIMASK
 80025f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80025f8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80025fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3304      	adds	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]
    row_index--;
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	3b01      	subs	r3, #1
 8002618:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ef      	bne.n	8002600 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8002620:	bf00      	nop
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <FLASH_Program_Fast+0x78>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d0f8      	beq.n	8002622 <FLASH_Program_Fast+0x52>
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f383 8810 	msr	PRIMASK, r3
}
 800263a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800263c:	bf00      	nop
 800263e:	3724      	adds	r7, #36	; 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	58004000 	.word	0x58004000

0800264c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_FLASHEx_Erase+0xac>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_FLASHEx_Erase+0x16>
 800265e:	2302      	movs	r3, #2
 8002660:	e046      	b.n	80026f0 <HAL_FLASHEx_Erase+0xa4>
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_FLASHEx_Erase+0xac>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_FLASHEx_Erase+0xac>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800266e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002672:	f7ff ff25 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d133      	bne.n	80026e8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d108      	bne.n	800269a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8002688:	f000 f838 	bl	80026fc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800268c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002690:	f7ff ff16 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e024      	b.n	80026e4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	e012      	b.n	80026d0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80026aa:	68b8      	ldr	r0, [r7, #8]
 80026ac:	f000 f836 	bl	800271c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b4:	f7ff ff04 	bl	80024c0 <FLASH_WaitForLastOperation>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	601a      	str	r2, [r3, #0]
          break;
 80026c8:	e00a      	b.n	80026e0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3e4      	bcc.n	80026aa <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80026e0:	f000 f878 	bl	80027d4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80026e4:	f000 f832 	bl	800274c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_FLASHEx_Erase+0xac>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

  return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000043c 	.word	0x2000043c

080026fc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <FLASH_MassErase+0x1c>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <FLASH_MassErase+0x1c>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6153      	str	r3, [r2, #20]
#endif
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	58004000 	.word	0x58004000

0800271c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <FLASH_PageErase+0x2c>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4313      	orrs	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <FLASH_PageErase+0x2c>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6153      	str	r3, [r2, #20]
#endif
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	58004000 	.word	0x58004000

0800274c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <FLASH_FlushCaches+0x84>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	2b01      	cmp	r3, #1
 800275a:	d117      	bne.n	800278c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <FLASH_FlushCaches+0x84>)
 8002762:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002766:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800276e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <FLASH_FlushCaches+0x84>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800277a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800277e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <FLASH_FlushCaches+0x84>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <FLASH_FlushCaches+0x84>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b01      	cmp	r3, #1
 8002796:	d117      	bne.n	80027c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <FLASH_FlushCaches+0x84>)
 800279e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <FLASH_FlushCaches+0x84>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	58004000 	.word	0x58004000

080027d4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <FLASH_AcknowledgePageErase+0x1c>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <FLASH_AcknowledgePageErase+0x1c>)
 80027de:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80027e2:	f023 0302 	bic.w	r3, r3, #2
 80027e6:	6153      	str	r3, [r2, #20]
#endif
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	58004000 	.word	0x58004000

080027f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e140      	b.n	8002a86 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8132 	beq.w	8002a80 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d005      	beq.n	8002834 <HAL_GPIO_Init+0x40>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d130      	bne.n	8002896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286a:	2201      	movs	r2, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0201 	and.w	r2, r3, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d017      	beq.n	80028d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d123      	bne.n	8002926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	6939      	ldr	r1, [r7, #16]
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 808c 	beq.w	8002a80 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	4a4e      	ldr	r2, [pc, #312]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	2207      	movs	r2, #7
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002992:	d00d      	beq.n	80029b0 <HAL_GPIO_Init+0x1bc>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a44      	ldr	r2, [pc, #272]	; (8002aa8 <HAL_GPIO_Init+0x2b4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <HAL_GPIO_Init+0x1b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a43      	ldr	r2, [pc, #268]	; (8002aac <HAL_GPIO_Init+0x2b8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_GPIO_Init+0x1b4>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e004      	b.n	80029b2 <HAL_GPIO_Init+0x1be>
 80029a8:	2307      	movs	r3, #7
 80029aa:	e002      	b.n	80029b2 <HAL_GPIO_Init+0x1be>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_GPIO_Init+0x1be>
 80029b0:	2300      	movs	r3, #0
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	f002 0203 	and.w	r2, r2, #3
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	4093      	lsls	r3, r2
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029c2:	4938      	ldr	r1, [pc, #224]	; (8002aa4 <HAL_GPIO_Init+0x2b0>)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80029d0:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 80029d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029f6:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a04:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_GPIO_Init+0x2bc>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f aeb7 	bne.w	8002804 <HAL_GPIO_Init+0x10>
  }
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	48000800 	.word	0x48000800
 8002ab0:	58000800 	.word	0x58000800

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_PWR_EnableBkUpAccess+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_PWR_EnableBkUpAccess+0x18>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	58000400 	.word	0x58000400

08002b00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_PWREx_GetVoltageRange+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	58000400 	.word	0x58000400

08002b18 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b28:	d101      	bne.n	8002b2e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	58000400 	.word	0x58000400

08002b3c <LL_RCC_HSE_EnableTcxo>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <LL_RCC_HSE_DisableTcxo>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b86:	d101      	bne.n	8002b8c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <LL_RCC_HSE_Enable>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_HSE_Disable>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_HSE_IsReady>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be0:	d101      	bne.n	8002be6 <LL_RCC_HSE_IsReady+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_RCC_HSE_IsReady+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_HSI_Enable>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_HSI_Disable>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_HSI_IsReady>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_HSI_IsReady+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_HSI_IsReady+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_HSI_SetCalibTrimming>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d101      	bne.n	8002c8a <LL_RCC_LSE_IsReady+0x18>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_RCC_LSE_IsReady+0x1a>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_LSI_IsReady+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_LSI_IsReady+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d101      	bne.n	8002d44 <LL_RCC_MSI_IsReady+0x16>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_RCC_MSI_IsReady+0x18>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d101      	bne.n	8002d64 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e36:	f023 020f 	bic.w	r2, r3, #15
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	6013      	str	r3, [r2, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f44:	d101      	bne.n	8002f4a <LL_RCC_PLL_IsReady+0x18>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <LL_RCC_PLL_IsReady+0x1a>
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc0:	d101      	bne.n	8002fc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d101      	bne.n	8002fea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003006:	d101      	bne.n	800300c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003028:	d101      	bne.n	800302e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e38a      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304a:	f7ff fece 	bl	8002dea <LL_RCC_GetSysClkSource>
 800304e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	f7ff ffa2 	bl	8002f98 <LL_RCC_PLL_GetMainSource>
 8003054:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80c9 	beq.w	80031f6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x3e>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	d17b      	bne.n	8003168 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d178      	bne.n	8003168 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003076:	f7ff fe5a 	bl	8002d2e <LL_RCC_MSI_IsReady>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x54>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e369      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x72>
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a8:	e006      	b.n	80030b8 <HAL_RCC_OscConfig+0x80>
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d222      	bcs.n	8003102 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fd4f 	bl	8003b64 <RCC_SetFlashLatencyFromMSIRange>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e347      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe4e 	bl	8002d9c <LL_RCC_MSI_SetCalibTrimming>
 8003100:	e021      	b.n	8003146 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fe35 	bl	8002d9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fd14 	bl	8003b64 <RCC_SetFlashLatencyFromMSIRange>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e30c      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003146:	f000 fcd5 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 800314a:	4603      	mov	r3, r0
 800314c:	4ab4      	ldr	r2, [pc, #720]	; (8003420 <HAL_RCC_OscConfig+0x3e8>)
 800314e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003150:	4bb4      	ldr	r3, [pc, #720]	; (8003424 <HAL_RCC_OscConfig+0x3ec>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe ffad 	bl	80020b4 <HAL_InitTick>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d047      	beq.n	80031f4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	e2fb      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d02c      	beq.n	80031ca <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003170:	f7ff fdc1 	bl	8002cf6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003174:	f7fe ffea 	bl	800214c <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317c:	f7fe ffe6 	bl	800214c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e2e8      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800318e:	f7ff fdce 	bl	8002d2e <LL_RCC_MSI_IsReady>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f1      	beq.n	800317c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fdea 	bl	8002d9c <LL_RCC_MSI_SetCalibTrimming>
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ca:	f7ff fda2 	bl	8002d12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ce:	f7fe ffbd 	bl	800214c <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d6:	f7fe ffb9 	bl	800214c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e2bb      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031e8:	f7ff fda1 	bl	8002d2e <LL_RCC_MSI_IsReady>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f1      	bne.n	80031d6 <HAL_RCC_OscConfig+0x19e>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d05f      	beq.n	80032c2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x1dc>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d10d      	bne.n	800322a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d10a      	bne.n	800322a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	f7ff fcdb 	bl	8002bce <LL_RCC_HSE_IsReady>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d050      	beq.n	80032c0 <HAL_RCC_OscConfig+0x288>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d14c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e29a      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x218>
 800324a:	f7ff fca4 	bl	8002b96 <LL_RCC_HSE_Enable>
 800324e:	e00d      	b.n	800326c <HAL_RCC_OscConfig+0x234>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003258:	d104      	bne.n	8003264 <HAL_RCC_OscConfig+0x22c>
 800325a:	f7ff fc6f 	bl	8002b3c <LL_RCC_HSE_EnableTcxo>
 800325e:	f7ff fc9a 	bl	8002b96 <LL_RCC_HSE_Enable>
 8003262:	e003      	b.n	800326c <HAL_RCC_OscConfig+0x234>
 8003264:	f7ff fca5 	bl	8002bb2 <LL_RCC_HSE_Disable>
 8003268:	f7ff fc76 	bl	8002b58 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe ff6a 	bl	800214c <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe ff66 	bl	800214c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e268      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800328e:	f7ff fc9e 	bl	8002bce <LL_RCC_HSE_IsReady>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f1      	beq.n	800327c <HAL_RCC_OscConfig+0x244>
 8003298:	e013      	b.n	80032c2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe ff57 	bl	800214c <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a2:	f7fe ff53 	bl	800214c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e255      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80032b4:	f7ff fc8b 	bl	8002bce <LL_RCC_HSE_IsReady>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f1      	bne.n	80032a2 <HAL_RCC_OscConfig+0x26a>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04b      	beq.n	8003366 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2a8>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d113      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d110      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e0:	f7ff fca2 	bl	8002c28 <LL_RCC_HSI_IsReady>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2be>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e234      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fca5 	bl	8002c4a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003300:	e031      	b.n	8003366 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d019      	beq.n	800333e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330a:	f7ff fc71 	bl	8002bf0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe ff1d 	bl	800214c <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe ff19 	bl	800214c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e21b      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003328:	f7ff fc7e 	bl	8002c28 <LL_RCC_HSI_IsReady>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f1      	beq.n	8003316 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fc87 	bl	8002c4a <LL_RCC_HSI_SetCalibTrimming>
 800333c:	e013      	b.n	8003366 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	f7ff fc65 	bl	8002c0c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe ff03 	bl	800214c <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe feff 	bl	800214c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e201      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800335c:	f7ff fc64 	bl	8002c28 <LL_RCC_HSI_IsReady>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f1      	bne.n	800334a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06e      	beq.n	8003450 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d056      	beq.n	8003428 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	429a      	cmp	r2, r3
 8003390:	d031      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1da      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80033b4:	f7ff fc7e 	bl	8002cb4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033b8:	f7fe fec8 	bl	800214c <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fec4 	bl	800214c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b11      	cmp	r3, #17
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1c6      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80033d2:	f7ff fc7f 	bl	8002cd4 <LL_RCC_LSI_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f1      	bne.n	80033c0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	f7ff fc4d 	bl	8002c94 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fea7 	bl	800214c <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe fea3 	bl	800214c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b11      	cmp	r3, #17
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1a5      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003414:	f7ff fc5e 	bl	8002cd4 <LL_RCC_LSI_IsReady>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f1      	beq.n	8003402 <HAL_RCC_OscConfig+0x3ca>
 800341e:	e017      	b.n	8003450 <HAL_RCC_OscConfig+0x418>
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003428:	f7ff fc44 	bl	8002cb4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe fe8e 	bl	800214c <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe fe8a 	bl	800214c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b11      	cmp	r3, #17
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e18c      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003446:	f7ff fc45 	bl	8002cd4 <LL_RCC_LSI_IsReady>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f1      	bne.n	8003434 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80d8 	beq.w	800360e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800345e:	f7ff fb5b 	bl	8002b18 <LL_PWR_IsEnabledBkUpAccess>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003468:	f7ff fb3c 	bl	8002ae4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346c:	f7fe fe6e 	bl	800214c <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fe fe6a 	bl	800214c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e16c      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003486:	f7ff fb47 	bl	8002b18 <LL_PWR_IsEnabledBkUpAccess>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f1      	beq.n	8003474 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d07b      	beq.n	8003590 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b85      	cmp	r3, #133	; 0x85
 800349e:	d003      	beq.n	80034a8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d109      	bne.n	80034bc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fe46 	bl	800214c <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe fe38 	bl	800214c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e138      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034ee:	f7ff fbc0 	bl	8002c72 <LL_RCC_LSE_IsReady>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b81      	cmp	r3, #129	; 0x81
 80034fe:	d003      	beq.n	8003508 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b85      	cmp	r3, #133	; 0x85
 8003506:	d121      	bne.n	800354c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fe20 	bl	800214c <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fe12 	bl	800214c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e112      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0ec      	beq.n	8003524 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800354a:	e060      	b.n	800360e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fdfe 	bl	800214c <HAL_GetTick>
 8003550:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe fdf0 	bl	800214c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0f0      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800357e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ec      	bne.n	8003568 <HAL_RCC_OscConfig+0x530>
 800358e:	e03e      	b.n	800360e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe fddc 	bl	800214c <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe fdce 	bl	800214c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0ce      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ec      	bne.n	80035ac <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe fdbb 	bl	800214c <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fdad 	bl	800214c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0ad      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003604:	f7ff fb35 	bl	8002c72 <LL_RCC_LSE_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a3 	beq.w	800375e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d076      	beq.n	800370c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	2b02      	cmp	r3, #2
 8003624:	d14b      	bne.n	80036be <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	f7ff fc76 	bl	8002f16 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fd8f 	bl	800214c <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003632:	f7fe fd8b 	bl	800214c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b0a      	cmp	r3, #10
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e08d      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003644:	f7ff fc75 	bl	8002f32 <LL_RCC_PLL_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f1      	bne.n	8003632 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_RCC_OscConfig+0x730>)
 8003656:	4013      	ands	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003666:	0212      	lsls	r2, r2, #8
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800367a:	430a      	orrs	r2, r1
 800367c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003684:	f7ff fc39 	bl	8002efa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fd58 	bl	800214c <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fd54 	bl	800214c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b0a      	cmp	r3, #10
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e056      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80036b2:	f7ff fc3e 	bl	8002f32 <LL_RCC_PLL_IsReady>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f1      	beq.n	80036a0 <HAL_RCC_OscConfig+0x668>
 80036bc:	e04f      	b.n	800375e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	f7ff fc2a 	bl	8002f16 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036dc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fd31 	bl	800214c <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe fd2d 	bl	800214c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b0a      	cmp	r3, #10
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e02f      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003700:	f7ff fc17 	bl	8002f32 <LL_RCC_PLL_IsReady>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f1      	bne.n	80036ee <HAL_RCC_OscConfig+0x6b6>
 800370a:	e028      	b.n	800375e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e023      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	429a      	cmp	r2, r3
 800372c:	d115      	bne.n	800375a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	429a      	cmp	r2, r3
 800373a:	d10e      	bne.n	800375a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	429a      	cmp	r2, r3
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	11c1808c 	.word	0x11c1808c

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e10f      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d91b      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b86      	ldr	r3, [pc, #536]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4984      	ldr	r1, [pc, #528]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379e:	f7fe fcd5 	bl	800214c <HAL_GetTick>
 80037a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037a6:	f7fe fcd1 	bl	800214c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0f3      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b8:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d1ef      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fb12 	bl	8002e00 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fcb6 	bl	800214c <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037e4:	f7fe fcb2 	bl	800214c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0d4      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037f6:	f7ff fbda 	bl	8002fae <LL_RCC_IsActiveFlag_HPRE>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f1      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb08 	bl	8002e26 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003816:	f7fe fc99 	bl	800214c <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800381e:	f7fe fc95 	bl	800214c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0b7      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003830:	f7ff fbce 	bl	8002fd0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f1      	beq.n	800381e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fb01 	bl	8002e52 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003850:	f7fe fc7c 	bl	800214c <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003858:	f7fe fc78 	bl	800214c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e09a      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800386a:	f7ff fbc3 	bl	8002ff4 <LL_RCC_IsActiveFlag_PPRE1>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f1      	beq.n	8003858 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d017      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff faf6 	bl	8002e78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800388c:	f7fe fc5e 	bl	800214c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003894:	f7fe fc5a 	bl	800214c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e07c      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038a6:	f7ff fbb6 	bl	8003016 <LL_RCC_IsActiveFlag_PPRE2>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f1      	beq.n	8003894 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d043      	beq.n	8003944 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038c4:	f7ff f983 	bl	8002bce <LL_RCC_HSE_IsReady>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11e      	bne.n	800390c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e066      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038da:	f7ff fb2a 	bl	8002f32 <LL_RCC_PLL_IsReady>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d113      	bne.n	800390c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e05b      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038f0:	f7ff fa1d 	bl	8002d2e <LL_RCC_MSI_IsReady>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e050      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038fe:	f7ff f993 	bl	8002c28 <LL_RCC_HSI_IsReady>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e049      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fa57 	bl	8002dc4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fe fc19 	bl	800214c <HAL_GetTick>
 800391a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391c:	e00a      	b.n	8003934 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391e:	f7fe fc15 	bl	800214c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e035      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003934:	f7ff fa59 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003938:	4602      	mov	r2, r0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1ec      	bne.n	800391e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d21b      	bcs.n	800398a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4913      	ldr	r1, [pc, #76]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fe fbf3 	bl	800214c <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003968:	e008      	b.n	800397c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800396a:	f7fe fbef 	bl	800214c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e011      	b.n	80039a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x23c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d1ef      	bne.n	800396a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800398a:	f000 f8b3 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 800398e:	4603      	mov	r3, r0
 8003990:	4a06      	ldr	r2, [pc, #24]	; (80039ac <HAL_RCC_ClockConfig+0x240>)
 8003992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_ClockConfig+0x244>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fb8b 	bl	80020b4 <HAL_InitTick>
 800399e:	4603      	mov	r3, r0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58004000 	.word	0x58004000
 80039ac:	20000000 	.word	0x20000000
 80039b0:	20000004 	.word	0x20000004

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c2:	f7ff fa12 	bl	8002dea <LL_RCC_GetSysClkSource>
 80039c6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	f7ff fae6 	bl	8002f98 <LL_RCC_PLL_GetMainSource>
 80039cc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d139      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d136      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039e0:	f7ff f9b5 	bl	8002d4e <LL_RCC_MSI_IsEnabledRangeSelect>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d115      	bne.n	8003a16 <HAL_RCC_GetSysClockFreq+0x62>
 80039ea:	f7ff f9b0 	bl	8002d4e <LL_RCC_MSI_IsEnabledRangeSelect>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x4e>
 80039f4:	f7ff f9bb 	bl	8002d6e <LL_RCC_MSI_GetRange>
 80039f8:	4603      	mov	r3, r0
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	e005      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x5a>
 8003a02:	f7ff f9bf 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a06:	4603      	mov	r3, r0
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	e014      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x8c>
 8003a16:	f7ff f99a 	bl	8002d4e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x7a>
 8003a20:	f7ff f9a5 	bl	8002d6e <LL_RCC_MSI_GetRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	e005      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x86>
 8003a2e:	f7ff f9a9 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a32:	4603      	mov	r3, r0
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d115      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a4c:	e012      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e00c      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d109      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a60:	f7ff f888 	bl	8002b74 <LL_RCC_HSE_IsEnabledDiv2>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e001      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a70:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a72:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a74:	f7ff f9b9 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d12f      	bne.n	8003ade <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a7e:	f7ff fa8b 	bl	8002f98 <LL_RCC_PLL_GetMainSource>
 8003a82:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0xde>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a90:	e00d      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	e00d      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a98:	f7ff f86c 	bl	8002b74 <LL_RCC_HSE_IsEnabledDiv2>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003aa4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003aaa:	60fb      	str	r3, [r7, #12]
        break;
 8003aac:	e002      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ab4:	f7ff fa4e 	bl	8002f54 <LL_RCC_PLL_GetN>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	fb03 f402 	mul.w	r4, r3, r2
 8003ac0:	f7ff fa5f 	bl	8002f82 <LL_RCC_PLL_GetDivider>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	3301      	adds	r3, #1
 8003aca:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ace:	f7ff fa4d 	bl	8002f6c <LL_RCC_PLL_GetR>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003adc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ade:	697b      	ldr	r3, [r7, #20]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}
 8003ae8:	0800ca08 	.word	0x0800ca08
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	01e84800 	.word	0x01e84800

08003af4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b598      	push	{r3, r4, r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003af8:	f7ff ff5c 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003afc:	4604      	mov	r4, r0
 8003afe:	f7ff f9ce 	bl	8002e9e <LL_RCC_GetAHBPrescaler>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	0800c9a8 	.word	0x0800c9a8

08003b1c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b598      	push	{r3, r4, r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b20:	f7ff ffe8 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b24:	4604      	mov	r4, r0
 8003b26:	f7ff f9d2 	bl	8002ece <LL_RCC_GetAPB1Prescaler>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd98      	pop	{r3, r4, r7, pc}
 8003b3c:	0800c9e8 	.word	0x0800c9e8

08003b40 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b598      	push	{r3, r4, r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b44:	f7ff ffd6 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	f7ff f9cb 	bl	8002ee4 <LL_RCC_GetAPB2Prescaler>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	0adb      	lsrs	r3, r3, #11
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd98      	pop	{r3, r4, r7, pc}
 8003b60:	0800c9e8 	.word	0x0800c9e8

08003b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b7c:	f7ff f99a 	bl	8002eb4 <LL_RCC_GetAHB3Prescaler>
 8003b80:	4603      	mov	r3, r0
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9c      	lsrs	r4, r3, #18
 8003ba0:	f7fe ffae 	bl	8002b00 <HAL_PWREx_GetVoltageRange>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 f80b 	bl	8003bc4 <RCC_SetFlashLatency>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	0800ca08 	.word	0x0800ca08
 8003bbc:	0800c9a8 	.word	0x0800c9a8
 8003bc0:	431bde83 	.word	0x431bde83

08003bc4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	; 0x38
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003bce:	4a3c      	ldr	r2, [pc, #240]	; (8003cc0 <RCC_SetFlashLatency+0xfc>)
 8003bd0:	f107 0320 	add.w	r3, r7, #32
 8003bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd8:	6018      	str	r0, [r3, #0]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <RCC_SetFlashLatency+0x100>)
 8003be0:	f107 0318 	add.w	r3, r7, #24
 8003be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be8:	6018      	str	r0, [r3, #0]
 8003bea:	3304      	adds	r3, #4
 8003bec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bee:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <RCC_SetFlashLatency+0x104>)
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d11d      	bne.n	8003c42 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	e016      	b.n	8003c3a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c14:	4413      	add	r3, r2
 8003c16:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d808      	bhi.n	8003c34 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c32:	e023      	b.n	8003c7c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	3301      	adds	r3, #1
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d9e5      	bls.n	8003c0c <RCC_SetFlashLatency+0x48>
 8003c40:	e01c      	b.n	8003c7c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	e016      	b.n	8003c76 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c50:	4413      	add	r3, r2
 8003c52:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d808      	bhi.n	8003c70 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c66:	4413      	add	r3, r2
 8003c68:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c6e:	e005      	b.n	8003c7c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	3301      	adds	r3, #1
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d9e5      	bls.n	8003c48 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <RCC_SetFlashLatency+0x108>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 0207 	bic.w	r2, r3, #7
 8003c84:	4911      	ldr	r1, [pc, #68]	; (8003ccc <RCC_SetFlashLatency+0x108>)
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c8c:	f7fe fa5e 	bl	800214c <HAL_GetTick>
 8003c90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c92:	e008      	b.n	8003ca6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c94:	f7fe fa5a 	bl	800214c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e007      	b.n	8003cb6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <RCC_SetFlashLatency+0x108>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1ef      	bne.n	8003c94 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3738      	adds	r7, #56	; 0x38
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	0800c958 	.word	0x0800c958
 8003cc4:	0800c960 	.word	0x0800c960
 8003cc8:	0800c968 	.word	0x0800c968
 8003ccc:	58004000 	.word	0x58004000

08003cd0 <LL_RCC_LSE_IsReady>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d101      	bne.n	8003ce8 <LL_RCC_LSE_IsReady+0x18>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <LL_RCC_LSE_IsReady+0x1a>
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_SetUSARTClockSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	43db      	mvns	r3, r3
 8003d08:	401a      	ands	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_SetI2SClockSource>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_SetLPUARTClockSource>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_SetI2CClockSource>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	401a      	ands	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_SetLPTIMClockSource>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <LL_RCC_SetRNGClockSource>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_SetADCClockSource>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <LL_RCC_SetRTCClockSource>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <LL_RCC_GetRTCClockSource>:
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_ForceBackupDomainReset>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d058      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ed8:	f7fe fe04 	bl	8002ae4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003edc:	f7fe f936 	bl	800214c <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fe f932 	bl	800214c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef6:	e006      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ef8:	4b7b      	ldr	r3, [pc, #492]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13c      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003f0c:	f7ff ffa7 	bl	8003e5e <LL_RCC_GetRTCClockSource>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d00f      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f28:	f7ff ffa5 	bl	8003e76 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	f7ff ffb3 	bl	8003e96 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d014      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe f902 	bl	800214c <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fe f8fe 	bl	800214c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d902      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	74fb      	strb	r3, [r7, #19]
            break;
 8003f62:	e004      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f64:	f7ff feb4 	bl	8003cd0 <LL_RCC_LSE_IsReady>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d1ee      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff5b 	bl	8003e34 <LL_RCC_SetRTCClockSource>
 8003f7e:	e004      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
 8003f84:	e001      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fea9 	bl	8003cf2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fe9e 	bl	8003cf2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fec0 	bl	8003d4c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fee6 	bl	8003dae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fedb 	bl	8003dae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fed0 	bl	8003dae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fea9 	bl	8003d76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fe9e 	bl	8003d76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fe93 	bl	8003d76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d011      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe5e 	bl	8003d22 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406e:	d107      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fea5 	bl	8003de0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d011      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fea3 	bl	8003e0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d107      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040de:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	58000400 	.word	0x58000400

080040ec <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040fc:	4904      	ldr	r1, [pc, #16]	; (8004110 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	58000400 	.word	0x58000400

08004114 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	58000400 	.word	0x58000400

08004134 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a04      	ldr	r2, [pc, #16]	; (8004150 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	58000400 	.word	0x58000400

08004154 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800415a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800415e:	619a      	str	r2, [r3, #24]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	58000400 	.word	0x58000400

0800416c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d101      	bne.n	8004180 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58000400 	.word	0x58000400

08004190 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d101      	bne.n	80041a4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	58000400 	.word	0x58000400

080041b4 <LL_RCC_RF_DisableReset>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_IsRFUnderReset>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e8:	d101      	bne.n	80041ee <LL_RCC_IsRFUnderReset+0x1a>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <LL_RCC_IsRFUnderReset+0x1c>
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <LL_EXTI_EnableIT_32_63+0x24>)
 8004202:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004206:	4905      	ldr	r1, [pc, #20]	; (800421c <LL_EXTI_EnableIT_32_63+0x24>)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	58000800 	.word	0x58000800

08004220 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
    return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	e04b      	b.n	80042ce <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	799b      	ldrb	r3, [r3, #6]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fb6c 	bl	8001928 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004256:	f7ff ffad 	bl	80041b4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_SUBGHZ_Init+0xb8>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	0cdb      	lsrs	r3, r3, #19
 8004268:	2264      	movs	r2, #100	; 0x64
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d105      	bne.n	8004282 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e007      	b.n	8004292 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3b01      	subs	r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004288:	f7ff ffa4 	bl	80041d4 <LL_RCC_IsRFUnderReset>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ee      	bne.n	8004270 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8004292:	f7ff ff3f 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004296:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800429a:	f7ff ffad 	bl	80041f8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800429e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80042a2:	f7ff ff23 	bl	80040ec <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80042a6:	f7ff ff55 	bl	8004154 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fab3 	bl	8004820 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	719a      	strb	r2, [r3, #6]

  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000

080042dc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	461a      	mov	r2, r3
 80042e8:	460b      	mov	r3, r1
 80042ea:	817b      	strh	r3, [r7, #10]
 80042ec:	4613      	mov	r3, r2
 80042ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	799b      	ldrb	r3, [r3, #6]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d14a      	bne.n	8004390 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	795b      	ldrb	r3, [r3, #5]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004302:	2302      	movs	r3, #2
 8004304:	e045      	b.n	8004392 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2202      	movs	r2, #2
 8004310:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fb52 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004318:	f7ff ff0c 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800431c:	210d      	movs	r1, #13
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fa9e 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004324:	897b      	ldrh	r3, [r7, #10]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fa96 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa90 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004340:	2300      	movs	r3, #0
 8004342:	82bb      	strh	r3, [r7, #20]
 8004344:	e00a      	b.n	800435c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004346:	8abb      	ldrh	r3, [r7, #20]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fa85 	bl	8004860 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004356:	8abb      	ldrh	r3, [r7, #20]
 8004358:	3301      	adds	r3, #1
 800435a:	82bb      	strh	r3, [r7, #20]
 800435c:	8aba      	ldrh	r2, [r7, #20]
 800435e:	893b      	ldrh	r3, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d3f0      	bcc.n	8004346 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004364:	f7ff fed6 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fb4b 	bl	8004a04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
 800437a:	e001      	b.n	8004380 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	715a      	strb	r2, [r3, #5]

    return status;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	e000      	b.n	8004392 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	461a      	mov	r2, r3
 80043a6:	460b      	mov	r3, r1
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	4613      	mov	r3, r2
 80043ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	799b      	ldrb	r3, [r3, #6]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d14a      	bne.n	8004452 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	795b      	ldrb	r3, [r3, #5]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e045      	b.n	8004454 <HAL_SUBGHZ_ReadRegisters+0xba>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 faf4 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043d4:	f7ff feae 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80043d8:	211d      	movs	r1, #29
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fa40 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043e0:	897b      	ldrh	r3, [r7, #10]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa38 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa32 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80043fc:	2100      	movs	r1, #0
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa2e 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	82fb      	strh	r3, [r7, #22]
 8004408:	e009      	b.n	800441e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fa7d 	bl	800490c <SUBGHZSPI_Receive>
      pData++;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3301      	adds	r3, #1
 8004416:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004418:	8afb      	ldrh	r3, [r7, #22]
 800441a:	3301      	adds	r3, #1
 800441c:	82fb      	strh	r3, [r7, #22]
 800441e:	8afa      	ldrh	r2, [r7, #22]
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3f1      	bcc.n	800440a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004426:	f7ff fe75 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 faea 	bl	8004a04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e001      	b.n	8004442 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	715a      	strb	r2, [r3, #5]

    return status;
 800444e:	7ffb      	ldrb	r3, [r7, #31]
 8004450:	e000      	b.n	8004454 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	461a      	mov	r2, r3
 8004468:	460b      	mov	r3, r1
 800446a:	72fb      	strb	r3, [r7, #11]
 800446c:	4613      	mov	r3, r2
 800446e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	799b      	ldrb	r3, [r3, #6]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d14a      	bne.n	8004510 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	795b      	ldrb	r3, [r3, #5]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004482:	2302      	movs	r3, #2
 8004484:	e045      	b.n	8004512 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa95 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004492:	7afb      	ldrb	r3, [r7, #11]
 8004494:	2b84      	cmp	r3, #132	; 0x84
 8004496:	d002      	beq.n	800449e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	2b94      	cmp	r3, #148	; 0x94
 800449c:	d103      	bne.n	80044a6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	711a      	strb	r2, [r3, #4]
 80044a4:	e002      	b.n	80044ac <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044ac:	f7ff fe42 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	4619      	mov	r1, r3
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9d3 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	82bb      	strh	r3, [r7, #20]
 80044be:	e00a      	b.n	80044d6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044c0:	8abb      	ldrh	r3, [r7, #20]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f9c8 	bl	8004860 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044d0:	8abb      	ldrh	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	82bb      	strh	r3, [r7, #20]
 80044d6:	8aba      	ldrh	r2, [r7, #20]
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3f0      	bcc.n	80044c0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044de:	f7ff fe19 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	2b84      	cmp	r3, #132	; 0x84
 80044e6:	d002      	beq.n	80044ee <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa8b 	bl	8004a04 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
 80044fa:	e001      	b.n	8004500 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	715a      	strb	r2, [r3, #5]

    return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	e000      	b.n	8004512 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b088      	sub	sp, #32
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	461a      	mov	r2, r3
 8004526:	460b      	mov	r3, r1
 8004528:	72fb      	strb	r3, [r7, #11]
 800452a:	4613      	mov	r3, r2
 800452c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	799b      	ldrb	r3, [r3, #6]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d13d      	bne.n	80045b8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	795b      	ldrb	r3, [r3, #5]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004544:	2302      	movs	r3, #2
 8004546:	e038      	b.n	80045ba <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa34 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004554:	f7ff fdee 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	4619      	mov	r1, r3
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f97f 	bl	8004860 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004562:	2100      	movs	r1, #0
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f97b 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	82fb      	strh	r3, [r7, #22]
 800456e:	e009      	b.n	8004584 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f9ca 	bl	800490c <SUBGHZSPI_Receive>
      pData++;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3301      	adds	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800457e:	8afb      	ldrh	r3, [r7, #22]
 8004580:	3301      	adds	r3, #1
 8004582:	82fb      	strh	r3, [r7, #22]
 8004584:	8afa      	ldrh	r2, [r7, #22]
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3f1      	bcc.n	8004570 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800458c:	f7ff fdc2 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fa37 	bl	8004a04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e001      	b.n	80045a8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	715a      	strb	r2, [r3, #5]

    return status;
 80045b4:	7ffb      	ldrb	r3, [r7, #31]
 80045b6:	e000      	b.n	80045ba <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	461a      	mov	r2, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	72fb      	strb	r3, [r7, #11]
 80045d2:	4613      	mov	r3, r2
 80045d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	799b      	ldrb	r3, [r3, #6]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d13e      	bne.n	800465e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	795b      	ldrb	r3, [r3, #5]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_SUBGHZ_WriteBuffer+0x2a>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e039      	b.n	8004660 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f9e2 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045f8:	f7ff fd9c 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80045fc:	210e      	movs	r1, #14
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f92e 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004604:	7afb      	ldrb	r3, [r7, #11]
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f929 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	82bb      	strh	r3, [r7, #20]
 8004612:	e00a      	b.n	800462a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004614:	8abb      	ldrh	r3, [r7, #20]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f91e 	bl	8004860 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004624:	8abb      	ldrh	r3, [r7, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	82bb      	strh	r3, [r7, #20]
 800462a:	8aba      	ldrh	r2, [r7, #20]
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3f0      	bcc.n	8004614 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004632:	f7ff fd6f 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f9e4 	bl	8004a04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
 8004648:	e001      	b.n	800464e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]

    return status;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	e000      	b.n	8004660 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	461a      	mov	r2, r3
 8004674:	460b      	mov	r3, r1
 8004676:	72fb      	strb	r3, [r7, #11]
 8004678:	4613      	mov	r3, r2
 800467a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	799b      	ldrb	r3, [r3, #6]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d141      	bne.n	800470e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004692:	2302      	movs	r3, #2
 8004694:	e03c      	b.n	8004710 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f98d 	bl	80049bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046a2:	f7ff fd47 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80046a6:	211e      	movs	r1, #30
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f8d9 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80046ae:	7afb      	ldrb	r3, [r7, #11]
 80046b0:	4619      	mov	r1, r3
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8d4 	bl	8004860 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046b8:	2100      	movs	r1, #0
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f8d0 	bl	8004860 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	82fb      	strh	r3, [r7, #22]
 80046c4:	e009      	b.n	80046da <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f91f 	bl	800490c <SUBGHZSPI_Receive>
      pData++;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	3301      	adds	r3, #1
 80046d8:	82fb      	strh	r3, [r7, #22]
 80046da:	8afa      	ldrh	r2, [r7, #22]
 80046dc:	893b      	ldrh	r3, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3f1      	bcc.n	80046c6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046e2:	f7ff fd17 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f98c 	bl	8004a04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e001      	b.n	80046fe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	715a      	strb	r2, [r3, #5]

    return status;
 800470a:	7ffb      	ldrb	r3, [r7, #31]
 800470c:	e000      	b.n	8004710 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004720:	2300      	movs	r3, #0
 8004722:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004724:	f107 020c 	add.w	r2, r7, #12
 8004728:	2302      	movs	r3, #2
 800472a:	2112      	movs	r1, #18
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fef4 	bl	800451a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004732:	7b3b      	ldrb	r3, [r7, #12]
 8004734:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	b21a      	sxth	r2, r3
 800473c:	7b7b      	ldrb	r3, [r7, #13]
 800473e:	b21b      	sxth	r3, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	b21b      	sxth	r3, r3
 8004744:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004746:	89fb      	ldrh	r3, [r7, #14]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f003 fdd9 	bl	8008308 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_SUBGHZ_IRQHandler+0x56>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    printf("rx callback\n\r");
 8004762:	482e      	ldr	r0, [pc, #184]	; (800481c <HAL_SUBGHZ_IRQHandler+0x104>)
 8004764:	f004 fcf4 	bl	8009150 <iprintf>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f003 fddb 	bl	8008324 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	089b      	lsrs	r3, r3, #2
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SUBGHZ_IRQHandler+0x68>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f003 fe2a 	bl	80083d4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SUBGHZ_IRQHandler+0x7a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f003 fe2f 	bl	80083f0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f003 fe34 	bl	800840c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f003 fe01 	bl	80083b8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SUBGHZ_IRQHandler+0xb0>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f003 fdbc 	bl	8008340 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	09db      	lsrs	r3, r3, #7
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80047d4:	89fb      	ldrh	r3, [r7, #14]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80047e0:	2101      	movs	r1, #1
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f003 fdba 	bl	800835c <HAL_SUBGHZ_CADStatusCallback>
 80047e8:	e003      	b.n	80047f2 <HAL_SUBGHZ_IRQHandler+0xda>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80047ea:	2100      	movs	r1, #0
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f003 fdb5 	bl	800835c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80047f2:	89fb      	ldrh	r3, [r7, #14]
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f003 fdca 	bl	8008398 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004804:	f107 020c 	add.w	r2, r7, #12
 8004808:	2302      	movs	r3, #2
 800480a:	2102      	movs	r1, #2
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fe25 	bl	800445c <HAL_SUBGHZ_ExecSetCmd>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	0800c974 	.word	0x0800c974

08004820 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <SUBGHZSPI_Init+0x3c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0b      	ldr	r2, [pc, #44]	; (800485c <SUBGHZSPI_Init+0x3c>)
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004834:	4a09      	ldr	r2, [pc, #36]	; (800485c <SUBGHZSPI_Init+0x3c>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800483c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <SUBGHZSPI_Init+0x3c>)
 8004840:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004844:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <SUBGHZSPI_Init+0x3c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a04      	ldr	r2, [pc, #16]	; (800485c <SUBGHZSPI_Init+0x3c>)
 800484c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004850:	6013      	str	r3, [r2, #0]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	58010000 	.word	0x58010000

08004860 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004870:	4b23      	ldr	r3, [pc, #140]	; (8004900 <SUBGHZSPI_Transmit+0xa0>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	0cdb      	lsrs	r3, r3, #19
 800487e:	2264      	movs	r2, #100	; 0x64
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	609a      	str	r2, [r3, #8]
      break;
 8004896:	e008      	b.n	80048aa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b01      	subs	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <SUBGHZSPI_Transmit+0xa4>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d1ed      	bne.n	8004886 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <SUBGHZSPI_Transmit+0xa8>)
 80048ac:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <SUBGHZSPI_Transmit+0xa0>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	0cdb      	lsrs	r3, r3, #19
 80048c2:	2264      	movs	r2, #100	; 0x64
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e008      	b.n	80048ee <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <SUBGHZSPI_Transmit+0xa4>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d1ed      	bne.n	80048ca <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <SUBGHZSPI_Transmit+0xa4>)
 80048f0:	68db      	ldr	r3, [r3, #12]

  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000000 	.word	0x20000000
 8004904:	58010000 	.word	0x58010000
 8004908:	5801000c 	.word	0x5801000c

0800490c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800491a:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <SUBGHZSPI_Receive+0xa4>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	0cdb      	lsrs	r3, r3, #19
 8004928:	2264      	movs	r2, #100	; 0x64
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	609a      	str	r2, [r3, #8]
      break;
 8004940:	e008      	b.n	8004954 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b01      	subs	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004948:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <SUBGHZSPI_Receive+0xa8>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d1ed      	bne.n	8004930 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <SUBGHZSPI_Receive+0xac>)
 8004956:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <SUBGHZSPI_Receive+0xa4>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	0cdb      	lsrs	r3, r3, #19
 800496c:	2264      	movs	r2, #100	; 0x64
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	609a      	str	r2, [r3, #8]
      break;
 8004984:	e008      	b.n	8004998 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b01      	subs	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <SUBGHZSPI_Receive+0xa8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d1ed      	bne.n	8004974 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <SUBGHZSPI_Receive+0xa8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	701a      	strb	r2, [r3, #0]

  return status;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000
 80049b4:	58010000 	.word	0x58010000
 80049b8:	5801000c 	.word	0x5801000c

080049bc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	791b      	ldrb	r3, [r3, #4]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d111      	bne.n	80049f0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <SUBGHZ_CheckDeviceReady+0x44>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049dc:	f7ff fbaa 	bl	8004134 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f9      	bne.n	80049e0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049ec:	f7ff fb92 	bl	8004114 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f807 	bl	8004a04 <SUBGHZ_WaitOnBusy>
 80049f6:	4603      	mov	r3, r0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000000 	.word	0x20000000

08004a04 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <SUBGHZ_WaitOnBusy+0x58>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	0d1b      	lsrs	r3, r3, #20
 8004a1e:	2264      	movs	r2, #100	; 0x64
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004a26:	f7ff fbb3 	bl	8004190 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004a2a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d105      	bne.n	8004a3e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e009      	b.n	8004a52 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004a44:	f7ff fb92 	bl	800416c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d0e9      	beq.n	8004a26 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000000 	.word	0x20000000

08004a60 <LL_RCC_GetUSARTClockSource>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	401a      	ands	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	4313      	orrs	r3, r2
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <LL_RCC_GetLPUARTClockSource>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4013      	ands	r3, r2
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e042      	b.n	8004b3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fe6c 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f995 	bl	8004e14 <UART_SetConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e022      	b.n	8004b3a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fbd9 	bl	80052b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fc5f 	bl	80053f6 <UART_CheckIdleState>
 8004b38:	4603      	mov	r3, r0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08a      	sub	sp, #40	; 0x28
 8004b46:	af02      	add	r7, sp, #8
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	f040 8083 	bne.w	8004c64 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_UART_Transmit+0x28>
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07b      	b.n	8004c66 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_UART_Transmit+0x3a>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e074      	b.n	8004c66 <HAL_UART_Transmit+0x124>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2221      	movs	r2, #33	; 0x21
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b94:	f7fd fada 	bl	800214c <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	88fa      	ldrh	r2, [r7, #6]
 8004b9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	d108      	bne.n	8004bc6 <HAL_UART_Transmit+0x84>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	e003      	b.n	8004bce <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004bd6:	e02c      	b.n	8004c32 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fc52 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e039      	b.n	8004c66 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	3302      	adds	r3, #2
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e007      	b.n	8004c20 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1cc      	bne.n	8004bd8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2140      	movs	r1, #64	; 0x40
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fc1f 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e006      	b.n	8004c66 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b08a      	sub	sp, #40	; 0x28
 8004c72:	af02      	add	r7, sp, #8
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 80c0 	bne.w	8004e0a <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_Receive+0x28>
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0b8      	b.n	8004e0c <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Receive+0x3a>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0b1      	b.n	8004e0c <HAL_UART_Receive+0x19e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2222      	movs	r2, #34	; 0x22
 8004cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc6:	f7fd fa41 	bl	800214c <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d10e      	bne.n	8004d04 <HAL_UART_Receive+0x96>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_UART_Receive+0x8c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cf8:	e02d      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	22ff      	movs	r2, #255	; 0xff
 8004cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d02:	e028      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_UART_Receive+0xba>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_UART_Receive+0xb0>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d1c:	e01b      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	227f      	movs	r2, #127	; 0x7f
 8004d22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d26:	e016      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d30:	d10d      	bne.n	8004d4e <HAL_UART_Receive+0xe0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <HAL_UART_Receive+0xd6>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	227f      	movs	r2, #127	; 0x7f
 8004d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d42:	e008      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	223f      	movs	r2, #63	; 0x3f
 8004d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d4c:	e003      	b.n	8004d56 <HAL_UART_Receive+0xe8>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d5c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d108      	bne.n	8004d7a <HAL_UART_Receive+0x10c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e003      	b.n	8004d82 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d8a:	e032      	b.n	8004df2 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2120      	movs	r1, #32
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fb78 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e032      	b.n	8004e0c <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10c      	bne.n	8004dc6 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	8a7b      	ldrh	r3, [r7, #18]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e00c      	b.n	8004de0 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	8a7b      	ldrh	r3, [r7, #18]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1c6      	bne.n	8004d8c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b5b0      	push	{r4, r5, r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4bab      	ldr	r3, [pc, #684]	; (80050ec <UART_SetConfig+0x2d8>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	69f9      	ldr	r1, [r7, #28]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4aa0      	ldr	r2, [pc, #640]	; (80050f0 <UART_SetConfig+0x2dc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	69f9      	ldr	r1, [r7, #28]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f023 010f 	bic.w	r1, r3, #15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a91      	ldr	r2, [pc, #580]	; (80050f4 <UART_SetConfig+0x2e0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d122      	bne.n	8004efa <UART_SetConfig+0xe6>
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	f7ff fdd3 	bl	8004a60 <LL_RCC_GetUSARTClockSource>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d817      	bhi.n	8004ef4 <UART_SetConfig+0xe0>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0xb8>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004ee9 	.word	0x08004ee9
 8004ed4:	08004ee3 	.word	0x08004ee3
 8004ed8:	08004eef 	.word	0x08004eef
 8004edc:	2301      	movs	r3, #1
 8004ede:	76fb      	strb	r3, [r7, #27]
 8004ee0:	e072      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	76fb      	strb	r3, [r7, #27]
 8004ee6:	e06f      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	76fb      	strb	r3, [r7, #27]
 8004eec:	e06c      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	76fb      	strb	r3, [r7, #27]
 8004ef2:	e069      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	76fb      	strb	r3, [r7, #27]
 8004ef8:	e066      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7e      	ldr	r2, [pc, #504]	; (80050f8 <UART_SetConfig+0x2e4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d134      	bne.n	8004f6e <UART_SetConfig+0x15a>
 8004f04:	200c      	movs	r0, #12
 8004f06:	f7ff fdab 	bl	8004a60 <LL_RCC_GetUSARTClockSource>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d829      	bhi.n	8004f68 <UART_SetConfig+0x154>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x108>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f69 	.word	0x08004f69
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f57 	.word	0x08004f57
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	08004f63 	.word	0x08004f63
 8004f50:	2300      	movs	r3, #0
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e038      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f56:	2302      	movs	r3, #2
 8004f58:	76fb      	strb	r3, [r7, #27]
 8004f5a:	e035      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e032      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f62:	2308      	movs	r3, #8
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e02f      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	76fb      	strb	r3, [r7, #27]
 8004f6c:	e02c      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5f      	ldr	r2, [pc, #380]	; (80050f0 <UART_SetConfig+0x2dc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d125      	bne.n	8004fc4 <UART_SetConfig+0x1b0>
 8004f78:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f7c:	f7ff fd82 	bl	8004a84 <LL_RCC_GetLPUARTClockSource>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f86:	d017      	beq.n	8004fb8 <UART_SetConfig+0x1a4>
 8004f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f8c:	d817      	bhi.n	8004fbe <UART_SetConfig+0x1aa>
 8004f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f92:	d00b      	beq.n	8004fac <UART_SetConfig+0x198>
 8004f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f98:	d811      	bhi.n	8004fbe <UART_SetConfig+0x1aa>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <UART_SetConfig+0x192>
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d006      	beq.n	8004fb2 <UART_SetConfig+0x19e>
 8004fa4:	e00b      	b.n	8004fbe <UART_SetConfig+0x1aa>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	76fb      	strb	r3, [r7, #27]
 8004faa:	e00d      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fac:	2302      	movs	r3, #2
 8004fae:	76fb      	strb	r3, [r7, #27]
 8004fb0:	e00a      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	76fb      	strb	r3, [r7, #27]
 8004fb6:	e007      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	76fb      	strb	r3, [r7, #27]
 8004fbc:	e004      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	76fb      	strb	r3, [r7, #27]
 8004fc2:	e001      	b.n	8004fc8 <UART_SetConfig+0x1b4>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a48      	ldr	r2, [pc, #288]	; (80050f0 <UART_SetConfig+0x2dc>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f040 8098 	bne.w	8005104 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fd4:	7efb      	ldrb	r3, [r7, #27]
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d823      	bhi.n	8005022 <UART_SetConfig+0x20e>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x1cc>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	08005023 	.word	0x08005023
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005013 	.word	0x08005013
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005023 	.word	0x08005023
 8005000:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fd8a 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005008:	6178      	str	r0, [r7, #20]
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <UART_SetConfig+0x2e8>)
 800500e:	617b      	str	r3, [r7, #20]
        break;
 8005010:	e00c      	b.n	800502c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fe fccf 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8005016:	6178      	str	r0, [r7, #20]
        break;
 8005018:	e008      	b.n	800502c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	617b      	str	r3, [r7, #20]
        break;
 8005020:	e004      	b.n	800502c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	76bb      	strb	r3, [r7, #26]
        break;
 800502a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8128 	beq.w	8005284 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	4a31      	ldr	r2, [pc, #196]	; (8005100 <UART_SetConfig+0x2ec>)
 800503a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503e:	461a      	mov	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	fbb3 f3f2 	udiv	r3, r3, r2
 8005046:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	4413      	add	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	d305      	bcc.n	8005064 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d902      	bls.n	800506a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	76bb      	strb	r3, [r7, #26]
 8005068:	e10c      	b.n	8005284 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4618      	mov	r0, r3
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	4a22      	ldr	r2, [pc, #136]	; (8005100 <UART_SetConfig+0x2ec>)
 8005078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800507c:	b29a      	uxth	r2, r3
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	f7fb fdd9 	bl	8000c38 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	020b      	lsls	r3, r1, #8
 8005098:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800509c:	0202      	lsls	r2, r0, #8
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	6849      	ldr	r1, [r1, #4]
 80050a2:	0849      	lsrs	r1, r1, #1
 80050a4:	4608      	mov	r0, r1
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	1814      	adds	r4, r2, r0
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb fdbb 	bl	8000c38 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4613      	mov	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d0:	d308      	bcc.n	80050e4 <UART_SetConfig+0x2d0>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d8:	d204      	bcs.n	80050e4 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e0cf      	b.n	8005284 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	76bb      	strb	r3, [r7, #26]
 80050e8:	e0cc      	b.n	8005284 <UART_SetConfig+0x470>
 80050ea:	bf00      	nop
 80050ec:	cfff69f3 	.word	0xcfff69f3
 80050f0:	40008000 	.word	0x40008000
 80050f4:	40013800 	.word	0x40013800
 80050f8:	40004400 	.word	0x40004400
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	0800ca48 	.word	0x0800ca48
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510c:	d165      	bne.n	80051da <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800510e:	7efb      	ldrb	r3, [r7, #27]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d828      	bhi.n	8005166 <UART_SetConfig+0x352>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x308>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005141 	.word	0x08005141
 8005120:	08005149 	.word	0x08005149
 8005124:	08005151 	.word	0x08005151
 8005128:	08005167 	.word	0x08005167
 800512c:	08005157 	.word	0x08005157
 8005130:	08005167 	.word	0x08005167
 8005134:	08005167 	.word	0x08005167
 8005138:	08005167 	.word	0x08005167
 800513c:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fe fcec 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005144:	6178      	str	r0, [r7, #20]
        break;
 8005146:	e013      	b.n	8005170 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fe fcfa 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 800514c:	6178      	str	r0, [r7, #20]
        break;
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b56      	ldr	r3, [pc, #344]	; (80052ac <UART_SetConfig+0x498>)
 8005152:	617b      	str	r3, [r7, #20]
        break;
 8005154:	e00c      	b.n	8005170 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fe fc2d 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800515a:	6178      	str	r0, [r7, #20]
        break;
 800515c:	e008      	b.n	8005170 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	617b      	str	r3, [r7, #20]
        break;
 8005164:	e004      	b.n	8005170 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	76bb      	strb	r3, [r7, #26]
        break;
 800516e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 8086 	beq.w	8005284 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	4a4c      	ldr	r2, [pc, #304]	; (80052b0 <UART_SetConfig+0x49c>)
 800517e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005182:	461a      	mov	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	005a      	lsls	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	441a      	add	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d916      	bls.n	80051d4 <UART_SetConfig+0x3c0>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d212      	bcs.n	80051d4 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	89fb      	ldrh	r3, [r7, #14]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	89fa      	ldrh	r2, [r7, #14]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e057      	b.n	8005284 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	76bb      	strb	r3, [r7, #26]
 80051d8:	e054      	b.n	8005284 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051da:	7efb      	ldrb	r3, [r7, #27]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d828      	bhi.n	8005232 <UART_SetConfig+0x41e>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x3d4>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	08005233 	.word	0x08005233
 80051f8:	08005223 	.word	0x08005223
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005233 	.word	0x08005233
 8005204:	08005233 	.word	0x08005233
 8005208:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe fc86 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005210:	6178      	str	r0, [r7, #20]
        break;
 8005212:	e013      	b.n	800523c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fe fc94 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8005218:	6178      	str	r0, [r7, #20]
        break;
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b23      	ldr	r3, [pc, #140]	; (80052ac <UART_SetConfig+0x498>)
 800521e:	617b      	str	r3, [r7, #20]
        break;
 8005220:	e00c      	b.n	800523c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe fbc7 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8005226:	6178      	str	r0, [r7, #20]
        break;
 8005228:	e008      	b.n	800523c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	617b      	str	r3, [r7, #20]
        break;
 8005230:	e004      	b.n	800523c <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	76bb      	strb	r3, [r7, #26]
        break;
 800523a:	bf00      	nop
    }

    if (pclk != 0U)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <UART_SetConfig+0x49c>)
 8005248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524c:	461a      	mov	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	fbb3 f2f2 	udiv	r2, r3, r2
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	441a      	add	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	b29b      	uxth	r3, r3
 8005266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d908      	bls.n	8005280 <UART_SetConfig+0x46c>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d204      	bcs.n	8005280 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	e001      	b.n	8005284 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80052a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bdb0      	pop	{r4, r5, r7, pc}
 80052aa:	bf00      	nop
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	0800ca48 	.word	0x0800ca48

080052b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b2:	d10a      	bne.n	80053ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005406:	f7fc fea1 	bl	800214c <HAL_GetTick>
 800540a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b08      	cmp	r3, #8
 8005418:	d10e      	bne.n	8005438 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800541a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f82f 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e025      	b.n	8005484 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d10e      	bne.n	8005464 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f819 	bl	800548c <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e00f      	b.n	8005484 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b09c      	sub	sp, #112	; 0x70
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549c:	e0a9      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	f000 80a5 	beq.w	80055f2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fc fe50 	bl	800214c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <UART_WaitOnFlagUntilTimeout+0x32>
 80054b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d140      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054d2:	667b      	str	r3, [r7, #100]	; 0x64
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054de:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	663b      	str	r3, [r7, #96]	; 0x60
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005510:	64ba      	str	r2, [r7, #72]	; 0x48
 8005512:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e069      	b.n	8005614 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d051      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555c:	d149      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005566:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800557c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
 8005588:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800558c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e6      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055ba:	623a      	str	r2, [r7, #32]
 80055bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	69f9      	ldr	r1, [r7, #28]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e010      	b.n	8005614 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	f43f af46 	beq.w	800549e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3770      	adds	r7, #112	; 0x70
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_DisableFifoMode+0x16>
 800562e:	2302      	movs	r3, #2
 8005630:	e027      	b.n	8005682 <HAL_UARTEx_DisableFifoMode+0x66>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e02d      	b.n	8005700 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2224      	movs	r2, #36	; 0x24
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f84f 	bl	8005784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e02d      	b.n	800577c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f811 	bl	8005784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	2b00      	cmp	r3, #0
 8005792:	d108      	bne.n	80057a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057a4:	e031      	b.n	800580a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057a6:	2308      	movs	r3, #8
 80057a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057aa:	2308      	movs	r3, #8
 80057ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	0e5b      	lsrs	r3, r3, #25
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	0f5b      	lsrs	r3, r3, #29
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	7b3a      	ldrb	r2, [r7, #12]
 80057d2:	4910      	ldr	r1, [pc, #64]	; (8005814 <UARTEx_SetNbDataToProcess+0x90>)
 80057d4:	5c8a      	ldrb	r2, [r1, r2]
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057da:	7b3a      	ldrb	r2, [r7, #12]
 80057dc:	490e      	ldr	r1, [pc, #56]	; (8005818 <UARTEx_SetNbDataToProcess+0x94>)
 80057de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	7b7a      	ldrb	r2, [r7, #13]
 80057f0:	4908      	ldr	r1, [pc, #32]	; (8005814 <UARTEx_SetNbDataToProcess+0x90>)
 80057f2:	5c8a      	ldrb	r2, [r1, r2]
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057f8:	7b7a      	ldrb	r2, [r7, #13]
 80057fa:	4907      	ldr	r1, [pc, #28]	; (8005818 <UARTEx_SetNbDataToProcess+0x94>)
 80057fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	0800ca60 	.word	0x0800ca60
 8005818:	0800ca68 	.word	0x0800ca68

0800581c <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <RadioInit+0x60>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <RadioInit+0x64>)
 800582c:	2200      	movs	r2, #0
 800582e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <RadioInit+0x64>)
 8005832:	2200      	movs	r2, #0
 8005834:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005836:	4b12      	ldr	r3, [pc, #72]	; (8005880 <RadioInit+0x64>)
 8005838:	2200      	movs	r2, #0
 800583a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800583c:	4811      	ldr	r0, [pc, #68]	; (8005884 <RadioInit+0x68>)
 800583e:	f001 fdc1 	bl	80073c4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8005842:	2000      	movs	r0, #0
 8005844:	f000 ffb0 	bl	80067a8 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8005848:	f002 f852 	bl	80078f0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800584c:	2100      	movs	r1, #0
 800584e:	2000      	movs	r0, #0
 8005850:	f002 fba8 	bl	8007fa4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005854:	2204      	movs	r2, #4
 8005856:	2100      	movs	r1, #0
 8005858:	2001      	movs	r0, #1
 800585a:	f002 f9d3 	bl	8007c04 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800585e:	2300      	movs	r3, #0
 8005860:	2200      	movs	r2, #0
 8005862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005866:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800586a:	f002 f907 	bl	8007a7c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800586e:	f000 fe4f 	bl	8006510 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000554 	.word	0x20000554
 8005880:	20000694 	.word	0x20000694
 8005884:	08006815 	.word	0x08006815

08005888 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800588c:	f001 fddc 	bl	8007448 <SUBGRF_GetOperatingMode>
 8005890:	4603      	mov	r3, r0
 8005892:	2b07      	cmp	r3, #7
 8005894:	d00a      	beq.n	80058ac <RadioGetStatus+0x24>
 8005896:	2b07      	cmp	r3, #7
 8005898:	dc0a      	bgt.n	80058b0 <RadioGetStatus+0x28>
 800589a:	2b04      	cmp	r3, #4
 800589c:	d002      	beq.n	80058a4 <RadioGetStatus+0x1c>
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d002      	beq.n	80058a8 <RadioGetStatus+0x20>
 80058a2:	e005      	b.n	80058b0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80058a4:	2302      	movs	r3, #2
 80058a6:	e004      	b.n	80058b2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e002      	b.n	80058b2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e000      	b.n	80058b2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80058b0:	2300      	movs	r3, #0
    }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80058c2:	4a25      	ldr	r2, [pc, #148]	; (8005958 <RadioSetModem+0xa0>)
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 fedf 	bl	800868e <RFW_SetRadioModem>
    switch( modem )
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d80b      	bhi.n	80058f0 <RadioSetModem+0x38>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <RadioSetModem+0x28>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	080058ff 	.word	0x080058ff
 80058e4:	08005925 	.word	0x08005925
 80058e8:	08005933 	.word	0x08005933
 80058ec:	08005941 	.word	0x08005941
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80058f0:	2000      	movs	r0, #0
 80058f2:	f002 f961 	bl	8007bb8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <RadioSetModem+0xa0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	735a      	strb	r2, [r3, #13]
        break;
 80058fc:	e028      	b.n	8005950 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80058fe:	2001      	movs	r0, #1
 8005900:	f002 f95a 	bl	8007bb8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005904:	4b14      	ldr	r3, [pc, #80]	; (8005958 <RadioSetModem+0xa0>)
 8005906:	7b5a      	ldrb	r2, [r3, #13]
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <RadioSetModem+0xa0>)
 800590a:	7b1b      	ldrb	r3, [r3, #12]
 800590c:	429a      	cmp	r2, r3
 800590e:	d01e      	beq.n	800594e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <RadioSetModem+0xa0>)
 8005912:	7b1a      	ldrb	r2, [r3, #12]
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <RadioSetModem+0xa0>)
 8005916:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <RadioSetModem+0xa0>)
 800591a:	7b5b      	ldrb	r3, [r3, #13]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 ff43 	bl	80067a8 <RadioSetPublicNetwork>
        }
        break;
 8005922:	e014      	b.n	800594e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005924:	2002      	movs	r0, #2
 8005926:	f002 f947 	bl	8007bb8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <RadioSetModem+0xa0>)
 800592c:	2200      	movs	r2, #0
 800592e:	735a      	strb	r2, [r3, #13]
        break;
 8005930:	e00e      	b.n	8005950 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005932:	2002      	movs	r0, #2
 8005934:	f002 f940 	bl	8007bb8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005938:	4b07      	ldr	r3, [pc, #28]	; (8005958 <RadioSetModem+0xa0>)
 800593a:	2200      	movs	r2, #0
 800593c:	735a      	strb	r2, [r3, #13]
        break;
 800593e:	e007      	b.n	8005950 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005940:	2000      	movs	r0, #0
 8005942:	f002 f939 	bl	8007bb8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <RadioSetModem+0xa0>)
 8005948:	2200      	movs	r2, #0
 800594a:	735a      	strb	r2, [r3, #13]
        break;
 800594c:	e000      	b.n	8005950 <RadioSetModem+0x98>
        break;
 800594e:	bf00      	nop
    }
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000694 	.word	0x20000694

0800595c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 f8e5 	bl	8007b34 <SUBGRF_SetRfFrequency>
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b090      	sub	sp, #64	; 0x40
 8005976:	af0a      	add	r7, sp, #40	; 0x28
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800598e:	f000 fdd2 	bl	8006536 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005992:	2000      	movs	r0, #0
 8005994:	f7ff ff90 	bl	80058b8 <RadioSetModem>

    RadioSetChannel( freq );
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ffdf 	bl	800595c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800599e:	2301      	movs	r3, #1
 80059a0:	9309      	str	r3, [sp, #36]	; 0x24
 80059a2:	2300      	movs	r3, #0
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9307      	str	r3, [sp, #28]
 80059aa:	2300      	movs	r3, #0
 80059ac:	9306      	str	r3, [sp, #24]
 80059ae:	2300      	movs	r3, #0
 80059b0:	9305      	str	r3, [sp, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	2303      	movs	r3, #3
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	2000      	movs	r0, #0
 80059d0:	f000 f826 	bl	8005a20 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80059d4:	2000      	movs	r0, #0
 80059d6:	f000 fdb5 	bl	8006544 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80059da:	f000 ff13 	bl	8006804 <RadioGetWakeupTime>
 80059de:	4603      	mov	r3, r0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fc fbbd 	bl	8002160 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80059e6:	f000 fda6 	bl	8006536 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80059fe:	2001      	movs	r0, #1
 8005a00:	f7ff ff5a 	bl	80058b8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f002 f836 	bl	8007a7c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8005a10:	f001 fdeb 	bl	80075ea <SUBGRF_GetRandom>
 8005a14:	6078      	str	r0, [r7, #4]

    return rnd;
 8005a16:	687b      	ldr	r3, [r7, #4]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	4613      	mov	r3, r2
 8005a32:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8005a34:	4abd      	ldr	r2, [pc, #756]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005a36:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005a3a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005a3c:	f002 fde5 	bl	800860a <RFW_DeInit>
    if( rxContinuous == true )
 8005a40:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005a4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8005a54:	4ab6      	ldr	r2, [pc, #728]	; (8005d30 <RadioSetRxConfig+0x310>)
 8005a56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005a5a:	7013      	strb	r3, [r2, #0]
 8005a5c:	e002      	b.n	8005a64 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005a5e:	4bb4      	ldr	r3, [pc, #720]	; (8005d30 <RadioSetRxConfig+0x310>)
 8005a60:	22ff      	movs	r2, #255	; 0xff
 8005a62:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d009      	beq.n	8005a7e <RadioSetRxConfig+0x5e>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	f300 81da 	bgt.w	8005e24 <RadioSetRxConfig+0x404>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80bf 	beq.w	8005bf4 <RadioSetRxConfig+0x1d4>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	f000 812c 	beq.w	8005cd4 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005a7c:	e1d2      	b.n	8005e24 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f001 fef8 	bl	8007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005a84:	4ba9      	ldr	r3, [pc, #676]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005a8c:	4aa7      	ldr	r2, [pc, #668]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005a92:	4ba6      	ldr	r3, [pc, #664]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005a94:	2209      	movs	r2, #9
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005a9a:	4ba4      	ldr	r3, [pc, #656]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005a9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	f002 fce2 	bl	800846c <SUBGRF_GetFskBandwidthRegValue>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b9f      	ldr	r3, [pc, #636]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005ab2:	4b9e      	ldr	r3, [pc, #632]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005ab8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	4b9b      	ldr	r3, [pc, #620]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ac0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005ac2:	4b9a      	ldr	r3, [pc, #616]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005ac8:	4b98      	ldr	r3, [pc, #608]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005aca:	2210      	movs	r2, #16
 8005acc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005ace:	4b97      	ldr	r3, [pc, #604]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005ad4:	4b95      	ldr	r3, [pc, #596]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005ada:	4b95      	ldr	r3, [pc, #596]	; (8005d30 <RadioSetRxConfig+0x310>)
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	4b93      	ldr	r3, [pc, #588]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ae0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005ae2:	4b92      	ldr	r3, [pc, #584]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8005ae8:	4b90      	ldr	r3, [pc, #576]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8005aee:	2004      	movs	r0, #4
 8005af0:	f7ff fee2 	bl	80058b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005af4:	488f      	ldr	r0, [pc, #572]	; (8005d34 <RadioSetRxConfig+0x314>)
 8005af6:	f002 f8eb 	bl	8007cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005afa:	488f      	ldr	r0, [pc, #572]	; (8005d38 <RadioSetRxConfig+0x318>)
 8005afc:	f002 f9b4 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005b00:	4a8e      	ldr	r2, [pc, #568]	; (8005d3c <RadioSetRxConfig+0x31c>)
 8005b02:	f107 031c 	add.w	r3, r7, #28
 8005b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fce7 	bl	80074e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005b18:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b1c:	f001 fd32 	bl	8007584 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005b20:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005b24:	f000 fdde 	bl	80066e4 <RadioRead>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8005b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b32:	f023 0310 	bic.w	r3, r3, #16
 8005b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8005b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005b44:	f000 fdbc 	bl	80066c0 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8005b48:	2104      	movs	r1, #4
 8005b4a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005b4e:	f000 fdb7 	bl	80066c0 <RadioWrite>
            modReg= RadioRead(0x89b);
 8005b52:	f640 009b 	movw	r0, #2203	; 0x89b
 8005b56:	f000 fdc5 	bl	80066e4 <RadioRead>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b64:	f023 031c 	bic.w	r3, r3, #28
 8005b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b70:	f043 0308 	orr.w	r3, r3, #8
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	f640 009b 	movw	r0, #2203	; 0x89b
 8005b7c:	f000 fda0 	bl	80066c0 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005b80:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005b84:	f000 fdae 	bl	80066e4 <RadioRead>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b92:	f023 0318 	bic.w	r3, r3, #24
 8005b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8005b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b9e:	f043 0318 	orr.w	r3, r3, #24
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005baa:	f000 fd89 	bl	80066c0 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005bae:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005bb2:	f000 fd97 	bl	80066e4 <RadioRead>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8005bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bcc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005bd8:	f000 fd72 	bl	80066c0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005bdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	4a4f      	ldr	r2, [pc, #316]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005bf0:	6093      	str	r3, [r2, #8]
            break;
 8005bf2:	e118      	b.n	8005e26 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f001 fe3d 	bl	8007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005c02:	4a4a      	ldr	r2, [pc, #296]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005c08:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c0a:	220b      	movs	r2, #11
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	f002 fc2b 	bl	800846c <SUBGRF_GetFskBandwidthRegValue>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005c20:	4b42      	ldr	r3, [pc, #264]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005c26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c2e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c32:	2204      	movs	r2, #4
 8005c34:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8005c36:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c38:	2218      	movs	r2, #24
 8005c3a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005c42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005c46:	f083 0301 	eor.w	r3, r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c50:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005c52:	4b37      	ldr	r3, [pc, #220]	; (8005d30 <RadioSetRxConfig+0x310>)
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c58:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8005c5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005c62:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c64:	22f2      	movs	r2, #242	; 0xf2
 8005c66:	75da      	strb	r2, [r3, #23]
 8005c68:	e002      	b.n	8005c70 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005c6a:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005c70:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005c76:	f000 fc5e 	bl	8006536 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005c7a:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fe14 	bl	80058b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005c90:	4828      	ldr	r0, [pc, #160]	; (8005d34 <RadioSetRxConfig+0x314>)
 8005c92:	f002 f81d 	bl	8007cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c96:	4828      	ldr	r0, [pc, #160]	; (8005d38 <RadioSetRxConfig+0x318>)
 8005c98:	f002 f8e6 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005c9c:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <RadioSetRxConfig+0x320>)
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ca6:	e883 0003 	stmia.w	r3, {r0, r1}
 8005caa:	f107 0314 	add.w	r3, r7, #20
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fc19 	bl	80074e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005cb4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cb8:	f001 fc64 	bl	8007584 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005cbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cbe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005cd0:	6093      	str	r3, [r2, #8]
            break;
 8005cd2:	e0a8      	b.n	8005e26 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f001 fdcd 	bl	8007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <RadioSetRxConfig+0x324>)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <RadioSetRxConfig+0x2f4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b0b      	cmp	r3, #11
 8005d0c:	d008      	beq.n	8005d20 <RadioSetRxConfig+0x300>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d005      	beq.n	8005d20 <RadioSetRxConfig+0x300>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d116      	bne.n	8005d48 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d113      	bne.n	8005d48 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005d20:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <RadioSetRxConfig+0x30c>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005d28:	e012      	b.n	8005d50 <RadioSetRxConfig+0x330>
 8005d2a:	bf00      	nop
 8005d2c:	20000694 	.word	0x20000694
 8005d30:	20000009 	.word	0x20000009
 8005d34:	200006cc 	.word	0x200006cc
 8005d38:	200006a2 	.word	0x200006a2
 8005d3c:	0800c984 	.word	0x0800c984
 8005d40:	0800c98c 	.word	0x0800c98c
 8005d44:	0800caf4 	.word	0x0800caf4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005d48:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005d50:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d004      	beq.n	8005d6a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005d60:	4b33      	ldr	r3, [pc, #204]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d10a      	bne.n	8005d80 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005d6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d6c:	2b0b      	cmp	r3, #11
 8005d6e:	d803      	bhi.n	8005d78 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005d70:	4b2f      	ldr	r3, [pc, #188]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d72:	220c      	movs	r2, #12
 8005d74:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005d76:	e006      	b.n	8005d86 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005d78:	4a2d      	ldr	r2, [pc, #180]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d7c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005d7e:	e002      	b.n	8005d86 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005d80:	4a2b      	ldr	r2, [pc, #172]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d84:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005d86:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005d8a:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d8c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005d8e:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <RadioSetRxConfig+0x414>)
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d94:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005d96:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005d9a:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005d9c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005da0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005da4:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005daa:	f000 fbc4 	bl	8006536 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fd7a 	bl	80058b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005dc4:	481c      	ldr	r0, [pc, #112]	; (8005e38 <RadioSetRxConfig+0x418>)
 8005dc6:	f001 ff83 	bl	8007cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005dca:	481c      	ldr	r0, [pc, #112]	; (8005e3c <RadioSetRxConfig+0x41c>)
 8005dcc:	f002 f84c 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005dd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fd5c 	bl	8007892 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005dda:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005ddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10d      	bne.n	8005e00 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005de4:	f240 7036 	movw	r0, #1846	; 0x736
 8005de8:	f002 f99a 	bl	8008120 <SUBGRF_ReadRegister>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f023 0304 	bic.w	r3, r3, #4
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	4619      	mov	r1, r3
 8005df6:	f240 7036 	movw	r0, #1846	; 0x736
 8005dfa:	f002 f97d 	bl	80080f8 <SUBGRF_WriteRegister>
 8005dfe:	e00c      	b.n	8005e1a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005e00:	f240 7036 	movw	r0, #1846	; 0x736
 8005e04:	f002 f98c 	bl	8008120 <SUBGRF_ReadRegister>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f043 0304 	orr.w	r3, r3, #4
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	4619      	mov	r1, r3
 8005e12:	f240 7036 	movw	r0, #1846	; 0x736
 8005e16:	f002 f96f 	bl	80080f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <RadioSetRxConfig+0x410>)
 8005e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e20:	609a      	str	r2, [r3, #8]
            break;
 8005e22:	e000      	b.n	8005e26 <RadioSetRxConfig+0x406>
            break;
 8005e24:	bf00      	nop
    }
}
 8005e26:	bf00      	nop
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000694 	.word	0x20000694
 8005e34:	20000009 	.word	0x20000009
 8005e38:	200006cc 	.word	0x200006cc
 8005e3c:	200006a2 	.word	0x200006a2

08005e40 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60ba      	str	r2, [r7, #8]
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005e52:	f002 fbda 	bl	800860a <RFW_DeInit>
    switch( modem )
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	f000 80d7 	beq.w	800600c <RadioSetTxConfig+0x1cc>
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	f300 80e6 	bgt.w	8006030 <RadioSetTxConfig+0x1f0>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <RadioSetTxConfig+0x2e>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d061      	beq.n	8005f30 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005e6c:	e0e0      	b.n	8006030 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005e6e:	4b7c      	ldr	r3, [pc, #496]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005e76:	4a7a      	ldr	r2, [pc, #488]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005e7c:	4b78      	ldr	r3, [pc, #480]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e7e:	220b      	movs	r2, #11
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 faf1 	bl	800846c <SUBGRF_GetFskBandwidthRegValue>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b74      	ldr	r3, [pc, #464]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005e94:	4a72      	ldr	r2, [pc, #456]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005e9a:	4b71      	ldr	r3, [pc, #452]	; (8006060 <RadioSetTxConfig+0x220>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005ea0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	4b6e      	ldr	r3, [pc, #440]	; (8006060 <RadioSetTxConfig+0x220>)
 8005ea8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005eaa:	4b6d      	ldr	r3, [pc, #436]	; (8006060 <RadioSetTxConfig+0x220>)
 8005eac:	2204      	movs	r2, #4
 8005eae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005eb0:	4b6b      	ldr	r3, [pc, #428]	; (8006060 <RadioSetTxConfig+0x220>)
 8005eb2:	2218      	movs	r2, #24
 8005eb4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005eb6:	4b6a      	ldr	r3, [pc, #424]	; (8006060 <RadioSetTxConfig+0x220>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ec0:	f083 0301 	eor.w	r3, r3, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4b65      	ldr	r3, [pc, #404]	; (8006060 <RadioSetTxConfig+0x220>)
 8005eca:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8005ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005ed4:	4b62      	ldr	r3, [pc, #392]	; (8006060 <RadioSetTxConfig+0x220>)
 8005ed6:	22f2      	movs	r2, #242	; 0xf2
 8005ed8:	75da      	strb	r2, [r3, #23]
 8005eda:	e002      	b.n	8005ee2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005edc:	4b60      	ldr	r3, [pc, #384]	; (8006060 <RadioSetTxConfig+0x220>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005ee2:	4b5f      	ldr	r3, [pc, #380]	; (8006060 <RadioSetTxConfig+0x220>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005ee8:	f000 fb25 	bl	8006536 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005eec:	4b5c      	ldr	r3, [pc, #368]	; (8006060 <RadioSetTxConfig+0x220>)
 8005eee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fcdb 	bl	80058b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005f02:	4858      	ldr	r0, [pc, #352]	; (8006064 <RadioSetTxConfig+0x224>)
 8005f04:	f001 fee4 	bl	8007cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f08:	4857      	ldr	r0, [pc, #348]	; (8006068 <RadioSetTxConfig+0x228>)
 8005f0a:	f001 ffad 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005f0e:	4a57      	ldr	r2, [pc, #348]	; (800606c <RadioSetTxConfig+0x22c>)
 8005f10:	f107 0310 	add.w	r3, r7, #16
 8005f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f18:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f1c:	f107 0310 	add.w	r3, r7, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fae0 	bl	80074e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f2a:	f001 fb2b 	bl	8007584 <SUBGRF_SetWhiteningSeed>
            break;
 8005f2e:	e080      	b.n	8006032 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005f30:	4b4b      	ldr	r3, [pc, #300]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4b48      	ldr	r3, [pc, #288]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005f42:	4a4b      	ldr	r2, [pc, #300]	; (8006070 <RadioSetTxConfig+0x230>)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4413      	add	r3, r2
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	4b45      	ldr	r3, [pc, #276]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005f50:	4a43      	ldr	r2, [pc, #268]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f56:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <RadioSetTxConfig+0x12c>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b0b      	cmp	r3, #11
 8005f64:	d008      	beq.n	8005f78 <RadioSetTxConfig+0x138>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	2b0c      	cmp	r3, #12
 8005f6a:	d005      	beq.n	8005f78 <RadioSetTxConfig+0x138>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b0c      	cmp	r3, #12
 8005f76:	d104      	bne.n	8005f82 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005f78:	4b39      	ldr	r3, [pc, #228]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005f80:	e003      	b.n	8005f8a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005f8a:	4b35      	ldr	r3, [pc, #212]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d004      	beq.n	8005fa4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <RadioSetTxConfig+0x220>)
 8005f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005fa0:	2b06      	cmp	r3, #6
 8005fa2:	d10a      	bne.n	8005fba <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fa6:	2b0b      	cmp	r3, #11
 8005fa8:	d803      	bhi.n	8005fb2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005faa:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fac:	220c      	movs	r2, #12
 8005fae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005fb0:	e006      	b.n	8005fc0 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005fb2:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fb6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005fb8:	e002      	b.n	8005fc0 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005fba:	4a29      	ldr	r2, [pc, #164]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fbe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005fc0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005fc4:	4b26      	ldr	r3, [pc, #152]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fc6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005fc8:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <RadioSetTxConfig+0x234>)
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005fd0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fd6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005fda:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005fde:	4b20      	ldr	r3, [pc, #128]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005fe4:	f000 faa7 	bl	8006536 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <RadioSetTxConfig+0x220>)
 8005fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fc5d 	bl	80058b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005ffe:	4819      	ldr	r0, [pc, #100]	; (8006064 <RadioSetTxConfig+0x224>)
 8006000:	f001 fe66 	bl	8007cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006004:	4818      	ldr	r0, [pc, #96]	; (8006068 <RadioSetTxConfig+0x228>)
 8006006:	f001 ff2f 	bl	8007e68 <SUBGRF_SetPacketParams>
            break;
 800600a:	e012      	b.n	8006032 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800600c:	2003      	movs	r0, #3
 800600e:	f7ff fc53 	bl	80058b8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006012:	4b13      	ldr	r3, [pc, #76]	; (8006060 <RadioSetTxConfig+0x220>)
 8006014:	2202      	movs	r2, #2
 8006016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <RadioSetTxConfig+0x220>)
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <RadioSetTxConfig+0x220>)
 8006022:	2216      	movs	r2, #22
 8006024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006028:	480e      	ldr	r0, [pc, #56]	; (8006064 <RadioSetTxConfig+0x224>)
 800602a:	f001 fe51 	bl	8007cd0 <SUBGRF_SetModulationParams>
            break;
 800602e:	e000      	b.n	8006032 <RadioSetTxConfig+0x1f2>
            break;
 8006030:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006036:	4618      	mov	r0, r3
 8006038:	f002 f92a 	bl	8008290 <SUBGRF_SetRfTxPower>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <RadioSetTxConfig+0x220>)
 8006042:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <RadioSetTxConfig+0x220>)
 8006048:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800604c:	4618      	mov	r0, r3
 800604e:	f002 faf0 	bl	8008632 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006052:	4a03      	ldr	r2, [pc, #12]	; (8006060 <RadioSetTxConfig+0x220>)
 8006054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006056:	6053      	str	r3, [r2, #4]
}
 8006058:	bf00      	nop
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000694 	.word	0x20000694
 8006064:	200006cc 	.word	0x200006cc
 8006068:	200006a2 	.word	0x200006a2
 800606c:	0800c98c 	.word	0x0800c98c
 8006070:	0800caf4 	.word	0x0800caf4
 8006074:	20000009 	.word	0x20000009

08006078 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    return true;
 8006080:	2301      	movs	r3, #1
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	2b0a      	cmp	r3, #10
 800609e:	d83e      	bhi.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
 80060a0:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80060a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a6:	bf00      	nop
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	08006105 	.word	0x08006105
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006113 	.word	0x08006113
 80060c0:	08006119 	.word	0x08006119
 80060c4:	0800611f 	.word	0x0800611f
 80060c8:	080060dd 	.word	0x080060dd
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	080060fd 	.word	0x080060fd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80060d4:	f641 6384 	movw	r3, #7812	; 0x1e84
 80060d8:	60fb      	str	r3, [r7, #12]
        break;
 80060da:	e020      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80060dc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80060e0:	60fb      	str	r3, [r7, #12]
        break;
 80060e2:	e01c      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80060e4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80060e8:	60fb      	str	r3, [r7, #12]
        break;
 80060ea:	e018      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80060ec:	f245 1361 	movw	r3, #20833	; 0x5161
 80060f0:	60fb      	str	r3, [r7, #12]
        break;
 80060f2:	e014      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80060f4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80060f8:	60fb      	str	r3, [r7, #12]
        break;
 80060fa:	e010      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80060fc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8006100:	60fb      	str	r3, [r7, #12]
        break;
 8006102:	e00c      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006104:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006108:	60fb      	str	r3, [r7, #12]
        break;
 800610a:	e008      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <RadioGetLoRaBandwidthInHz+0xa0>)
 800610e:	60fb      	str	r3, [r7, #12]
        break;
 8006110:	e005      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <RadioGetLoRaBandwidthInHz+0xa4>)
 8006114:	60fb      	str	r3, [r7, #12]
        break;
 8006116:	e002      	b.n	800611e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <RadioGetLoRaBandwidthInHz+0xa8>)
 800611a:	60fb      	str	r3, [r7, #12]
        break;
 800611c:	bf00      	nop
    }

    return bandwidthInHz;
 800611e:	68fb      	ldr	r3, [r7, #12]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	0001e848 	.word	0x0001e848
 8006130:	0003d090 	.word	0x0003d090
 8006134:	0007a120 	.word	0x0007a120

08006138 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4603      	mov	r3, r0
 8006148:	70fb      	strb	r3, [r7, #3]
 800614a:	460b      	mov	r3, r1
 800614c:	803b      	strh	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8006152:	883b      	ldrh	r3, [r7, #0]
 8006154:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006156:	78ba      	ldrb	r2, [r7, #2]
 8006158:	f082 0201 	eor.w	r2, r2, #1
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	2a00      	cmp	r2, #0
 8006160:	d001      	beq.n	8006166 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006162:	2208      	movs	r2, #8
 8006164:	e000      	b.n	8006168 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006166:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006168:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800616a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800616e:	7c3b      	ldrb	r3, [r7, #16]
 8006170:	7d39      	ldrb	r1, [r7, #20]
 8006172:	2900      	cmp	r1, #0
 8006174:	d001      	beq.n	800617a <RadioGetGfskTimeOnAirNumerator+0x42>
 8006176:	2102      	movs	r1, #2
 8006178:	e000      	b.n	800617c <RadioGetGfskTimeOnAirNumerator+0x44>
 800617a:	2100      	movs	r1, #0
 800617c:	440b      	add	r3, r1
 800617e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006180:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800618c:	b480      	push	{r7}
 800618e:	b08b      	sub	sp, #44	; 0x2c
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	460b      	mov	r3, r1
 800619c:	71fb      	strb	r3, [r7, #7]
 800619e:	4613      	mov	r3, r2
 80061a0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	3304      	adds	r3, #4
 80061a6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d002      	beq.n	80061ba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d104      	bne.n	80061c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80061ba:	88bb      	ldrh	r3, [r7, #4]
 80061bc:	2b0b      	cmp	r3, #11
 80061be:	d801      	bhi.n	80061c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80061c0:	230c      	movs	r3, #12
 80061c2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b0b      	cmp	r3, #11
 80061ce:	d008      	beq.n	80061e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d005      	beq.n	80061e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d105      	bne.n	80061e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d102      	bne.n	80061e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80061e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80061ec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80061ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d001      	beq.n	80061fa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80061f6:	2210      	movs	r2, #16
 80061f8:	e000      	b.n	80061fc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80061fa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80061fc:	4413      	add	r3, r2
 80061fe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006204:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006206:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800620a:	2a00      	cmp	r2, #0
 800620c:	d001      	beq.n	8006212 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800620e:	2200      	movs	r2, #0
 8006210:	e000      	b.n	8006214 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006212:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006214:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006216:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b06      	cmp	r3, #6
 800621c:	d803      	bhi.n	8006226 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	e00e      	b.n	8006244 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3308      	adds	r3, #8
 800622a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800622c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3b02      	subs	r3, #2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	623b      	str	r3, [r7, #32]
 800623c:	e002      	b.n	8006244 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	da01      	bge.n	800624e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	4413      	add	r3, r2
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	fb92 f3f3 	sdiv	r3, r2, r3
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	fb02 f203 	mul.w	r2, r2, r3
 8006262:	88bb      	ldrh	r3, [r7, #4]
 8006264:	4413      	add	r3, r2
    int32_t intermediate =
 8006266:	330c      	adds	r3, #12
 8006268:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b06      	cmp	r3, #6
 800626e:	d802      	bhi.n	8006276 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	3302      	adds	r3, #2
 8006274:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	3b02      	subs	r3, #2
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	372c      	adds	r7, #44	; 0x2c
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
	...

08006290 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af04      	add	r7, sp, #16
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	461a      	mov	r2, r3
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	4613      	mov	r3, r2
 80062a2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80062a8:	2301      	movs	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]

    switch( modem )
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <RadioTimeOnAir+0x28>
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d017      	beq.n	80062e6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80062b6:	e035      	b.n	8006324 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80062b8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80062bc:	8c3a      	ldrh	r2, [r7, #32]
 80062be:	7bb9      	ldrb	r1, [r7, #14]
 80062c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff ff32 	bl	8006138 <RadioGetGfskTimeOnAirNumerator>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	613b      	str	r3, [r7, #16]
        break;
 80062e4:	e01e      	b.n	8006324 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80062e6:	8c39      	ldrh	r1, [r7, #32]
 80062e8:	7bba      	ldrb	r2, [r7, #14]
 80062ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062ee:	9302      	str	r3, [sp, #8]
 80062f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	460b      	mov	r3, r1
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68b8      	ldr	r0, [r7, #8]
 8006302:	f7ff ff43 	bl	800618c <RadioGetLoRaTimeOnAirNumerator>
 8006306:	4603      	mov	r3, r0
 8006308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <RadioTimeOnAir+0xac>)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff feb6 	bl	800608c <RadioGetLoRaBandwidthInHz>
 8006320:	6138      	str	r0, [r7, #16]
        break;
 8006322:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	1e5a      	subs	r2, r3, #1
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	0800caf4 	.word	0x0800caf4

08006340 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800634c:	2300      	movs	r3, #0
 800634e:	2200      	movs	r2, #0
 8006350:	f240 2101 	movw	r1, #513	; 0x201
 8006354:	f240 2001 	movw	r0, #513	; 0x201
 8006358:	f001 fb90 	bl	8007a7c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800635c:	4b69      	ldr	r3, [pc, #420]	; (8006504 <RadioSend+0x1c4>)
 800635e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006362:	2101      	movs	r1, #1
 8006364:	4618      	mov	r0, r3
 8006366:	f001 ff6b 	bl	8008240 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800636a:	4b66      	ldr	r3, [pc, #408]	; (8006504 <RadioSend+0x1c4>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d112      	bne.n	8006398 <RadioSend+0x58>
 8006372:	4b64      	ldr	r3, [pc, #400]	; (8006504 <RadioSend+0x1c4>)
 8006374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006378:	2b06      	cmp	r3, #6
 800637a:	d10d      	bne.n	8006398 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800637c:	f640 0089 	movw	r0, #2185	; 0x889
 8006380:	f001 fece 	bl	8008120 <SUBGRF_ReadRegister>
 8006384:	4603      	mov	r3, r0
 8006386:	f023 0304 	bic.w	r3, r3, #4
 800638a:	b2db      	uxtb	r3, r3
 800638c:	4619      	mov	r1, r3
 800638e:	f640 0089 	movw	r0, #2185	; 0x889
 8006392:	f001 feb1 	bl	80080f8 <SUBGRF_WriteRegister>
 8006396:	e00c      	b.n	80063b2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006398:	f640 0089 	movw	r0, #2185	; 0x889
 800639c:	f001 fec0 	bl	8008120 <SUBGRF_ReadRegister>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4619      	mov	r1, r3
 80063aa:	f640 0089 	movw	r0, #2185	; 0x889
 80063ae:	f001 fea3 	bl	80080f8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80063b2:	4b54      	ldr	r3, [pc, #336]	; (8006504 <RadioSend+0x1c4>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	f200 809e 	bhi.w	80064f8 <RadioSend+0x1b8>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <RadioSend+0x84>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063d5 	.word	0x080063d5
 80063cc:	08006441 	.word	0x08006441
 80063d0:	08006461 	.word	0x08006461
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80063d4:	4a4b      	ldr	r2, [pc, #300]	; (8006504 <RadioSend+0x1c4>)
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80063da:	484b      	ldr	r0, [pc, #300]	; (8006508 <RadioSend+0x1c8>)
 80063dc:	f001 fd44 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	2200      	movs	r2, #0
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f86a 	bl	80074c0 <SUBGRF_SendPayload>
            break;
 80063ec:	e087      	b.n	80064fe <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80063ee:	f002 f912 	bl	8008616 <RFW_Is_Init>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d116      	bne.n	8006426 <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80063f8:	f107 020d 	add.w	r2, r7, #13
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f920 	bl	8008646 <RFW_TransmitInit>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d177      	bne.n	80064fc <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800640c:	7b7a      	ldrb	r2, [r7, #13]
 800640e:	4b3d      	ldr	r3, [pc, #244]	; (8006504 <RadioSend+0x1c4>)
 8006410:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006412:	483d      	ldr	r0, [pc, #244]	; (8006508 <RadioSend+0x1c8>)
 8006414:	f001 fd28 	bl	8007e68 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8006418:	7b7b      	ldrb	r3, [r7, #13]
 800641a:	2200      	movs	r2, #0
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f84e 	bl	80074c0 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006424:	e06b      	b.n	80064fe <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006426:	4a37      	ldr	r2, [pc, #220]	; (8006504 <RadioSend+0x1c4>)
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800642c:	4836      	ldr	r0, [pc, #216]	; (8006508 <RadioSend+0x1c8>)
 800642e:	f001 fd1b 	bl	8007e68 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	2200      	movs	r2, #0
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f841 	bl	80074c0 <SUBGRF_SendPayload>
            break;
 800643e:	e05e      	b.n	80064fe <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006440:	4b30      	ldr	r3, [pc, #192]	; (8006504 <RadioSend+0x1c4>)
 8006442:	2202      	movs	r2, #2
 8006444:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006446:	4a2f      	ldr	r2, [pc, #188]	; (8006504 <RadioSend+0x1c4>)
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800644c:	482e      	ldr	r0, [pc, #184]	; (8006508 <RadioSend+0x1c8>)
 800644e:	f001 fd0b 	bl	8007e68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	2200      	movs	r2, #0
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 f831 	bl	80074c0 <SUBGRF_SendPayload>
            break;
 800645e:	e04e      	b.n	80064fe <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	461a      	mov	r2, r3
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4829      	ldr	r0, [pc, #164]	; (800650c <RadioSend+0x1cc>)
 8006468:	f000 fbb1 	bl	8006bce <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <RadioSend+0x1c4>)
 800646e:	2202      	movs	r2, #2
 8006470:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	3301      	adds	r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <RadioSend+0x1c4>)
 800647a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800647c:	4822      	ldr	r0, [pc, #136]	; (8006508 <RadioSend+0x1c8>)
 800647e:	f001 fcf3 	bl	8007e68 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8006482:	2100      	movs	r1, #0
 8006484:	20f1      	movs	r0, #241	; 0xf1
 8006486:	f000 f91b 	bl	80066c0 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800648a:	2100      	movs	r1, #0
 800648c:	20f0      	movs	r0, #240	; 0xf0
 800648e:	f000 f917 	bl	80066c0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <RadioSend+0x1c4>)
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	2b64      	cmp	r3, #100	; 0x64
 8006498:	d108      	bne.n	80064ac <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800649a:	2170      	movs	r1, #112	; 0x70
 800649c:	20f3      	movs	r0, #243	; 0xf3
 800649e:	f000 f90f 	bl	80066c0 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80064a2:	211d      	movs	r1, #29
 80064a4:	20f2      	movs	r0, #242	; 0xf2
 80064a6:	f000 f90b 	bl	80066c0 <RadioWrite>
 80064aa:	e007      	b.n	80064bc <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80064ac:	21e1      	movs	r1, #225	; 0xe1
 80064ae:	20f3      	movs	r0, #243	; 0xf3
 80064b0:	f000 f906 	bl	80066c0 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80064b4:	2104      	movs	r1, #4
 80064b6:	20f2      	movs	r0, #242	; 0xf2
 80064b8:	f000 f902 	bl	80066c0 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3302      	adds	r3, #2
 80064c6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80064c8:	89fb      	ldrh	r3, [r7, #14]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	4619      	mov	r1, r3
 80064d2:	20f4      	movs	r0, #244	; 0xf4
 80064d4:	f000 f8f4 	bl	80066c0 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	20f5      	movs	r0, #245	; 0xf5
 80064e0:	f000 f8ee 	bl	80066c0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	3301      	adds	r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80064ee:	4619      	mov	r1, r3
 80064f0:	4806      	ldr	r0, [pc, #24]	; (800650c <RadioSend+0x1cc>)
 80064f2:	f000 ffe5 	bl	80074c0 <SUBGRF_SendPayload>
            break;
 80064f6:	e002      	b.n	80064fe <RadioSend+0x1be>
        }
        default:
            break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <RadioSend+0x1be>
                return;
 80064fc:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000694 	.word	0x20000694
 8006508:	200006a2 	.word	0x200006a2
 800650c:	20000454 	.word	0x20000454

08006510 <RadioSleep>:

static void RadioSleep( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006516:	2300      	movs	r3, #0
 8006518:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800651a:	793b      	ldrb	r3, [r7, #4]
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006522:	7938      	ldrb	r0, [r7, #4]
 8006524:	f001 f8a8 	bl	8007678 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006528:	2002      	movs	r0, #2
 800652a:	f7fb fe19 	bl	8002160 <HAL_Delay>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <RadioStandby>:

static void RadioStandby( void )
{
 8006536:	b580      	push	{r7, lr}
 8006538:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800653a:	2000      	movs	r0, #0
 800653c:	f001 f8ce 	bl	80076dc <SUBGRF_SetStandby>
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}

08006544 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800654c:	f002 f863 	bl	8008616 <RFW_Is_Init>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d102      	bne.n	800655c <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8006556:	f002 f886 	bl	8008666 <RFW_ReceiveInit>
 800655a:	e007      	b.n	800656c <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800655c:	2300      	movs	r3, #0
 800655e:	2200      	movs	r2, #0
 8006560:	f240 2162 	movw	r1, #610	; 0x262
 8006564:	f240 2062 	movw	r0, #610	; 0x262
 8006568:	f001 fa88 	bl	8007a7c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <RadioRx+0x5c>)
 800656e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fe63 	bl	8008240 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <RadioRx+0x5c>)
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006582:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006586:	f001 f8e5 	bl	8007754 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800658a:	e005      	b.n	8006598 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <RadioRx+0x5c>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f8de 	bl	8007754 <SUBGRF_SetRx>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000694 	.word	0x20000694

080065a4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80065ac:	f002 f833 	bl	8008616 <RFW_Is_Init>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d102      	bne.n	80065bc <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80065b6:	f002 f856 	bl	8008666 <RFW_ReceiveInit>
 80065ba:	e007      	b.n	80065cc <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80065bc:	2300      	movs	r3, #0
 80065be:	2200      	movs	r2, #0
 80065c0:	f240 2162 	movw	r1, #610	; 0x262
 80065c4:	f240 2062 	movw	r0, #610	; 0x262
 80065c8:	f001 fa58 	bl	8007a7c <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <RadioRxBoosted+0x5c>)
 80065ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fe33 	bl	8008240 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <RadioRxBoosted+0x5c>)
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80065e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80065e6:	f001 f8d5 	bl	8007794 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80065ea:	e005      	b.n	80065f8 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <RadioRxBoosted+0x5c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 f8ce 	bl	8007794 <SUBGRF_SetRxBoosted>
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000694 	.word	0x20000694

08006604 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <RadioSetRxDutyCycle+0x28>)
 8006610:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f001 fe12 	bl	8008240 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f8dc 	bl	80077dc <SUBGRF_SetRxDutyCycle>
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000694 	.word	0x20000694

08006630 <RadioStartCad>:

static void RadioStartCad( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006634:	4b09      	ldr	r3, [pc, #36]	; (800665c <RadioStartCad+0x2c>)
 8006636:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fdff 	bl	8008240 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006642:	2300      	movs	r3, #0
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800664a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800664e:	f001 fa15 	bl	8007a7c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006652:	f001 f8ef 	bl	8007834 <SUBGRF_SetCad>
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000694 	.word	0x20000694

08006660 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
 800666c:	4613      	mov	r3, r2
 800666e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006670:	883b      	ldrh	r3, [r7, #0]
 8006672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fa59 	bl	8007b34 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fe02 	bl	8008290 <SUBGRF_SetRfTxPower>
 800668c:	4603      	mov	r3, r0
 800668e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fdd3 	bl	8008240 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800669a:	f001 f8d9 	bl	8007850 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	4603      	mov	r3, r0
 80066ae:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80066b0:	f001 fc8f 	bl	8007fd2 <SUBGRF_GetRssiInst>
 80066b4:	4603      	mov	r3, r0
 80066b6:	b21b      	sxth	r3, r3
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	460a      	mov	r2, r1
 80066ca:	80fb      	strh	r3, [r7, #6]
 80066cc:	4613      	mov	r3, r2
 80066ce:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80066d0:	797a      	ldrb	r2, [r7, #5]
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fd0e 	bl	80080f8 <SUBGRF_WriteRegister>
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fd15 	bl	8008120 <SUBGRF_ReadRegister>
 80066f6:	4603      	mov	r3, r0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	80fb      	strh	r3, [r7, #6]
 800670c:	4613      	mov	r3, r2
 800670e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006710:	797b      	ldrb	r3, [r7, #5]
 8006712:	b29a      	uxth	r2, r3
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fd15 	bl	8008148 <SUBGRF_WriteRegisters>
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	4603      	mov	r3, r0
 800672e:	6039      	str	r1, [r7, #0]
 8006730:	80fb      	strh	r3, [r7, #6]
 8006732:	4613      	mov	r3, r2
 8006734:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8006736:	797b      	ldrb	r3, [r7, #5]
 8006738:	b29a      	uxth	r2, r3
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fd16 	bl	8008170 <SUBGRF_ReadRegisters>
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	460a      	mov	r2, r1
 8006756:	71fb      	strb	r3, [r7, #7]
 8006758:	4613      	mov	r3, r2
 800675a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10a      	bne.n	8006778 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <RadioSetMaxPayloadLength+0x50>)
 8006764:	79bb      	ldrb	r3, [r7, #6]
 8006766:	7013      	strb	r3, [r2, #0]
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <RadioSetMaxPayloadLength+0x50>)
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <RadioSetMaxPayloadLength+0x54>)
 800676e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006770:	480c      	ldr	r0, [pc, #48]	; (80067a4 <RadioSetMaxPayloadLength+0x58>)
 8006772:	f001 fb79 	bl	8007e68 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8006776:	e00d      	b.n	8006794 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <RadioSetMaxPayloadLength+0x54>)
 800677a:	7d5b      	ldrb	r3, [r3, #21]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d109      	bne.n	8006794 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006780:	4a06      	ldr	r2, [pc, #24]	; (800679c <RadioSetMaxPayloadLength+0x50>)
 8006782:	79bb      	ldrb	r3, [r7, #6]
 8006784:	7013      	strb	r3, [r2, #0]
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <RadioSetMaxPayloadLength+0x50>)
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RadioSetMaxPayloadLength+0x54>)
 800678c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800678e:	4805      	ldr	r0, [pc, #20]	; (80067a4 <RadioSetMaxPayloadLength+0x58>)
 8006790:	f001 fb6a 	bl	8007e68 <SUBGRF_SetPacketParams>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000009 	.word	0x20000009
 80067a0:	20000694 	.word	0x20000694
 80067a4:	200006a2 	.word	0x200006a2

080067a8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80067b2:	4a13      	ldr	r2, [pc, #76]	; (8006800 <RadioSetPublicNetwork+0x58>)
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	7313      	strb	r3, [r2, #12]
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <RadioSetPublicNetwork+0x58>)
 80067ba:	7b1a      	ldrb	r2, [r3, #12]
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <RadioSetPublicNetwork+0x58>)
 80067be:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80067c0:	2001      	movs	r0, #1
 80067c2:	f7ff f879 	bl	80058b8 <RadioSetModem>
    if( enable == true )
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80067cc:	2134      	movs	r1, #52	; 0x34
 80067ce:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80067d2:	f001 fc91 	bl	80080f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80067d6:	2144      	movs	r1, #68	; 0x44
 80067d8:	f240 7041 	movw	r0, #1857	; 0x741
 80067dc:	f001 fc8c 	bl	80080f8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80067e0:	e009      	b.n	80067f6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80067e2:	2114      	movs	r1, #20
 80067e4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80067e8:	f001 fc86 	bl	80080f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80067ec:	2124      	movs	r1, #36	; 0x24
 80067ee:	f240 7041 	movw	r0, #1857	; 0x741
 80067f2:	f001 fc81 	bl	80080f8 <SUBGRF_WriteRegister>
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000694 	.word	0x20000694

08006804 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8006808:	f001 fd76 	bl	80082f8 <SUBGRF_GetRadioWakeUpTime>
 800680c:	4603      	mov	r3, r0
 800680e:	3303      	adds	r3, #3
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd80      	pop	{r7, pc}

08006814 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <RadioOnDioIrq+0x20>)
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8006826:	f000 f807 	bl	8006838 <RadioIrqProcess>
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000694 	.word	0x20000694

08006838 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8006846:	4bab      	ldr	r3, [pc, #684]	; (8006af4 <RadioIrqProcess+0x2bc>)
 8006848:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800684c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006850:	f000 8104 	beq.w	8006a5c <RadioIrqProcess+0x224>
 8006854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006858:	f300 816e 	bgt.w	8006b38 <RadioIrqProcess+0x300>
 800685c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006860:	f000 80ea 	beq.w	8006a38 <RadioIrqProcess+0x200>
 8006864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006868:	f300 8166 	bgt.w	8006b38 <RadioIrqProcess+0x300>
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	f000 80cf 	beq.w	8006a10 <RadioIrqProcess+0x1d8>
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	f300 8160 	bgt.w	8006b38 <RadioIrqProcess+0x300>
 8006878:	2b20      	cmp	r3, #32
 800687a:	dc49      	bgt.n	8006910 <RadioIrqProcess+0xd8>
 800687c:	2b00      	cmp	r3, #0
 800687e:	f340 815b 	ble.w	8006b38 <RadioIrqProcess+0x300>
 8006882:	3b01      	subs	r3, #1
 8006884:	2b1f      	cmp	r3, #31
 8006886:	f200 8157 	bhi.w	8006b38 <RadioIrqProcess+0x300>
 800688a:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <RadioIrqProcess+0x58>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	08006919 	.word	0x08006919
 8006894:	0800694d 	.word	0x0800694d
 8006898:	08006b39 	.word	0x08006b39
 800689c:	08006b39 	.word	0x08006b39
 80068a0:	08006b39 	.word	0x08006b39
 80068a4:	08006b39 	.word	0x08006b39
 80068a8:	08006b39 	.word	0x08006b39
 80068ac:	08006ab5 	.word	0x08006ab5
 80068b0:	08006b39 	.word	0x08006b39
 80068b4:	08006b39 	.word	0x08006b39
 80068b8:	08006b39 	.word	0x08006b39
 80068bc:	08006b39 	.word	0x08006b39
 80068c0:	08006b39 	.word	0x08006b39
 80068c4:	08006b39 	.word	0x08006b39
 80068c8:	08006b39 	.word	0x08006b39
 80068cc:	08006b39 	.word	0x08006b39
 80068d0:	08006b39 	.word	0x08006b39
 80068d4:	08006b39 	.word	0x08006b39
 80068d8:	08006b39 	.word	0x08006b39
 80068dc:	08006b39 	.word	0x08006b39
 80068e0:	08006b39 	.word	0x08006b39
 80068e4:	08006b39 	.word	0x08006b39
 80068e8:	08006b39 	.word	0x08006b39
 80068ec:	08006b39 	.word	0x08006b39
 80068f0:	08006b39 	.word	0x08006b39
 80068f4:	08006b39 	.word	0x08006b39
 80068f8:	08006b39 	.word	0x08006b39
 80068fc:	08006b39 	.word	0x08006b39
 8006900:	08006b39 	.word	0x08006b39
 8006904:	08006b39 	.word	0x08006b39
 8006908:	08006b39 	.word	0x08006b39
 800690c:	08006ac5 	.word	0x08006ac5
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	f000 80f9 	beq.w	8006b08 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8006916:	e10f      	b.n	8006b38 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 8006918:	2000      	movs	r0, #0
 800691a:	f000 fedf 	bl	80076dc <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800691e:	f001 fe81 	bl	8008624 <RFW_Is_LongPacketModeEnabled>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8006928:	f001 fea5 	bl	8008676 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800692c:	4b72      	ldr	r3, [pc, #456]	; (8006af8 <RadioIrqProcess+0x2c0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8103 	beq.w	8006b3c <RadioIrqProcess+0x304>
 8006936:	4b70      	ldr	r3, [pc, #448]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80fd 	beq.w	8006b3c <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 8006942:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4798      	blx	r3
        break;
 800694a:	e0f7      	b.n	8006b3c <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 800694c:	4b69      	ldr	r3, [pc, #420]	; (8006af4 <RadioIrqProcess+0x2bc>)
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	f083 0301 	eor.w	r3, r3, #1
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d014      	beq.n	8006984 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 800695a:	2000      	movs	r0, #0
 800695c:	f000 febe 	bl	80076dc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006960:	2100      	movs	r1, #0
 8006962:	f640 1002 	movw	r0, #2306	; 0x902
 8006966:	f001 fbc7 	bl	80080f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800696a:	f640 1044 	movw	r0, #2372	; 0x944
 800696e:	f001 fbd7 	bl	8008120 <SUBGRF_ReadRegister>
 8006972:	4603      	mov	r3, r0
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4619      	mov	r1, r3
 800697c:	f640 1044 	movw	r0, #2372	; 0x944
 8006980:	f001 fbba 	bl	80080f8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006984:	1dfb      	adds	r3, r7, #7
 8006986:	22ff      	movs	r2, #255	; 0xff
 8006988:	4619      	mov	r1, r3
 800698a:	485c      	ldr	r0, [pc, #368]	; (8006afc <RadioIrqProcess+0x2c4>)
 800698c:	f000 fd76 	bl	800747c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006990:	485b      	ldr	r0, [pc, #364]	; (8006b00 <RadioIrqProcess+0x2c8>)
 8006992:	f001 fb5f 	bl	8008054 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d036      	beq.n	8006a0c <RadioIrqProcess+0x1d4>
 800699e:	4b56      	ldr	r3, [pc, #344]	; (8006af8 <RadioIrqProcess+0x2c0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d031      	beq.n	8006a0c <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 80069a8:	4b52      	ldr	r3, [pc, #328]	; (8006af4 <RadioIrqProcess+0x2bc>)
 80069aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d10e      	bne.n	80069d0 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80069b2:	4b51      	ldr	r3, [pc, #324]	; (8006af8 <RadioIrqProcess+0x2c0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689c      	ldr	r4, [r3, #8]
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	b299      	uxth	r1, r3
 80069bc:	4b4d      	ldr	r3, [pc, #308]	; (8006af4 <RadioIrqProcess+0x2bc>)
 80069be:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80069c2:	b21a      	sxth	r2, r3
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <RadioIrqProcess+0x2bc>)
 80069c6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80069ca:	484c      	ldr	r0, [pc, #304]	; (8006afc <RadioIrqProcess+0x2c4>)
 80069cc:	47a0      	blx	r4
                break;
 80069ce:	e01e      	b.n	8006a0e <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80069d0:	4b48      	ldr	r3, [pc, #288]	; (8006af4 <RadioIrqProcess+0x2bc>)
 80069d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d4:	463a      	mov	r2, r7
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 fd6f 	bl	80084bc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80069de:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <RadioIrqProcess+0x2c0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689c      	ldr	r4, [r3, #8]
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	b299      	uxth	r1, r3
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <RadioIrqProcess+0x2bc>)
 80069ea:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80069ee:	b218      	sxth	r0, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80069f6:	4a43      	ldr	r2, [pc, #268]	; (8006b04 <RadioIrqProcess+0x2cc>)
 80069f8:	fb82 c203 	smull	ip, r2, r2, r3
 80069fc:	1192      	asrs	r2, r2, #6
 80069fe:	17db      	asrs	r3, r3, #31
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	4602      	mov	r2, r0
 8006a06:	483d      	ldr	r0, [pc, #244]	; (8006afc <RadioIrqProcess+0x2c4>)
 8006a08:	47a0      	blx	r4
                break;
 8006a0a:	e000      	b.n	8006a0e <RadioIrqProcess+0x1d6>
        }
 8006a0c:	bf00      	nop
        break;
 8006a0e:	e0a2      	b.n	8006b56 <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 8006a10:	2000      	movs	r0, #0
 8006a12:	f000 fe63 	bl	80076dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006a16:	4b38      	ldr	r3, [pc, #224]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8090 	beq.w	8006b40 <RadioIrqProcess+0x308>
 8006a20:	4b35      	ldr	r3, [pc, #212]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 808a 	beq.w	8006b40 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2000      	movs	r0, #0
 8006a34:	4798      	blx	r3
        break;
 8006a36:	e083      	b.n	8006b40 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 8006a38:	2000      	movs	r0, #0
 8006a3a:	f000 fe4f 	bl	80076dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d07e      	beq.n	8006b44 <RadioIrqProcess+0x30c>
 8006a46:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d079      	beq.n	8006b44 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2001      	movs	r0, #1
 8006a58:	4798      	blx	r3
        break;
 8006a5a:	e073      	b.n	8006b44 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006a5c:	f000 fcf4 	bl	8007448 <SUBGRF_GetOperatingMode>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d110      	bne.n	8006a88 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 8006a66:	2000      	movs	r0, #0
 8006a68:	f000 fe38 	bl	80076dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a6c:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d069      	beq.n	8006b48 <RadioIrqProcess+0x310>
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d064      	beq.n	8006b48 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006a7e:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4798      	blx	r3
        break;
 8006a86:	e05f      	b.n	8006b48 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006a88:	f000 fcde 	bl	8007448 <SUBGRF_GetOperatingMode>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d15a      	bne.n	8006b48 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006a92:	2000      	movs	r0, #0
 8006a94:	f000 fe22 	bl	80076dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d053      	beq.n	8006b48 <RadioIrqProcess+0x310>
 8006aa0:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d04e      	beq.n	8006b48 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4798      	blx	r3
        break;
 8006ab2:	e049      	b.n	8006b48 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006ab4:	f001 fdaf 	bl	8008616 <RFW_Is_Init>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d146      	bne.n	8006b4c <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006abe:	f001 fde0 	bl	8008682 <RFW_ReceivePayload>
        break;
 8006ac2:	e043      	b.n	8006b4c <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <RadioIrqProcess+0x2bc>)
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f000 fe02 	bl	80076dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d037      	beq.n	8006b50 <RadioIrqProcess+0x318>
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d032      	beq.n	8006b50 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <RadioIrqProcess+0x2c0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4798      	blx	r3
        break;
 8006af2:	e02d      	b.n	8006b50 <RadioIrqProcess+0x318>
 8006af4:	20000694 	.word	0x20000694
 8006af8:	20000554 	.word	0x20000554
 8006afc:	20000454 	.word	0x20000454
 8006b00:	200006b8 	.word	0x200006b8
 8006b04:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <RadioIrqProcess+0x328>)
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	f083 0301 	eor.w	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 8006b16:	2000      	movs	r0, #0
 8006b18:	f000 fde0 	bl	80076dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006b1c:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <RadioIrqProcess+0x32c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d017      	beq.n	8006b54 <RadioIrqProcess+0x31c>
 8006b24:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <RadioIrqProcess+0x32c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <RadioIrqProcess+0x32c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	4798      	blx	r3
        break;
 8006b36:	e00d      	b.n	8006b54 <RadioIrqProcess+0x31c>
        break;
 8006b38:	bf00      	nop
 8006b3a:	e00c      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b3c:	bf00      	nop
 8006b3e:	e00a      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b40:	bf00      	nop
 8006b42:	e008      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b44:	bf00      	nop
 8006b46:	e006      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b48:	bf00      	nop
 8006b4a:	e004      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b4c:	bf00      	nop
 8006b4e:	e002      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <RadioIrqProcess+0x31e>
        break;
 8006b54:	bf00      	nop
  }
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd90      	pop	{r4, r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000694 	.word	0x20000694
 8006b64:	20000554 	.word	0x20000554

08006b68 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <RadioTxPrbs+0x2c>)
 8006b6e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b72:	2101      	movs	r1, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fb63 	bl	8008240 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <RadioTxPrbs+0x30>)
 8006b7c:	212d      	movs	r1, #45	; 0x2d
 8006b7e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006b82:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8006b84:	f000 fe6d 	bl	8007862 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8006b88:	4804      	ldr	r0, [pc, #16]	; (8006b9c <RadioTxPrbs+0x34>)
 8006b8a:	f000 fdc3 	bl	8007714 <SUBGRF_SetTx>
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000694 	.word	0x20000694
 8006b98:	080066c1 	.word	0x080066c1
 8006b9c:	000fffff 	.word	0x000fffff

08006ba0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fb6e 	bl	8008290 <SUBGRF_SetRfTxPower>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fb3f 	bl	8008240 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006bc2:	f000 fe45 	bl	8007850 <SUBGRF_SetTxContinuousWave>
}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b089      	sub	sp, #36	; 0x24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e011      	b.n	8006c0e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	440b      	add	r3, r1
 8006bf8:	43d2      	mvns	r2, r2
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	dbe9      	blt.n	8006bea <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e049      	b.n	8006cb0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	425a      	negs	r2, r3
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	f002 0207 	and.w	r2, r2, #7
 8006c28:	bf58      	it	pl
 8006c2a:	4253      	negpl	r3, r2
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f1c3 0307 	rsb	r3, r3, #7
 8006c32:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da00      	bge.n	8006c3c <payload_integration+0x6e>
 8006c3a:	3307      	adds	r3, #7
 8006c3c:	10db      	asrs	r3, r3, #3
 8006c3e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	3301      	adds	r3, #1
 8006c44:	425a      	negs	r2, r3
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	f002 0207 	and.w	r2, r2, #7
 8006c4e:	bf58      	it	pl
 8006c50:	4253      	negpl	r3, r2
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f1c3 0307 	rsb	r3, r3, #7
 8006c58:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da00      	bge.n	8006c64 <payload_integration+0x96>
 8006c62:	3307      	adds	r3, #7
 8006c64:	10db      	asrs	r3, r3, #3
 8006c66:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8006c68:	7dbb      	ldrb	r3, [r7, #22]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	fa42 f303 	asr.w	r3, r2, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006c80:	7ffa      	ldrb	r2, [r7, #31]
 8006c82:	7cfb      	ldrb	r3, [r7, #19]
 8006c84:	4053      	eors	r3, r2
 8006c86:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8006c88:	7d3b      	ldrb	r3, [r7, #20]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	b25a      	sxtb	r2, r3
 8006c92:	7ff9      	ldrb	r1, [r7, #31]
 8006c94:	7d7b      	ldrb	r3, [r7, #21]
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	b259      	sxtb	r1, r3
 8006ca0:	7d3b      	ldrb	r3, [r7, #20]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	b2ca      	uxtb	r2, r1
 8006ca8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	dbb0      	blt.n	8006c1c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006cba:	7ffb      	ldrb	r3, [r7, #31]
 8006cbc:	01db      	lsls	r3, r3, #7
 8006cbe:	b25a      	sxtb	r2, r3
 8006cc0:	7ffb      	ldrb	r3, [r7, #31]
 8006cc2:	019b      	lsls	r3, r3, #6
 8006cc4:	b25b      	sxtb	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	7ffa      	ldrb	r2, [r7, #31]
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	d101      	bne.n	8006cd4 <payload_integration+0x106>
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	e000      	b.n	8006cd6 <payload_integration+0x108>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b259      	sxtb	r1, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	b2ca      	uxtb	r2, r1
 8006ce2:	701a      	strb	r2, [r3, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	3724      	adds	r7, #36	; 0x24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
	...

08006cf0 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006d0c:	f001 fc7d 	bl	800860a <RFW_DeInit>

    if( rxContinuous != 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	4ba9      	ldr	r3, [pc, #676]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006d28:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <RadioSetRxGenericConfig+0x48>
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	f000 80e8 	beq.w	8006f06 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8006d36:	e1a0      	b.n	800707a <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <RadioSetRxGenericConfig+0x58>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e196      	b.n	800707c <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	7d5b      	ldrb	r3, [r3, #21]
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d902      	bls.n	8006d5c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	e18f      	b.n	800707c <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	e00d      	b.n	8006d7e <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	4413      	add	r3, r2
 8006d6a:	7819      	ldrb	r1, [r3, #0]
 8006d6c:	f107 021c 	add.w	r2, r7, #28
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	4413      	add	r3, r2
 8006d74:	460a      	mov	r2, r1
 8006d76:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	7d5b      	ldrb	r3, [r3, #21]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	4293      	cmp	r3, r2
 8006d88:	dbeb      	blt.n	8006d62 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf14      	ite	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	2300      	moveq	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fd6b 	bl	8007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006d9e:	4b8b      	ldr	r3, [pc, #556]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a88      	ldr	r2, [pc, #544]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006dac:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	791a      	ldrb	r2, [r3, #4]
 8006db2:	4b86      	ldr	r3, [pc, #536]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fb55 	bl	800846c <SUBGRF_GetFskBandwidthRegValue>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b81      	ldr	r3, [pc, #516]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006dcc:	4b7f      	ldr	r3, [pc, #508]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	4b7b      	ldr	r3, [pc, #492]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006dde:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	7d1a      	ldrb	r2, [r3, #20]
 8006de4:	4b79      	ldr	r3, [pc, #484]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006de6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	7d5b      	ldrb	r3, [r3, #21]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b76      	ldr	r3, [pc, #472]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006df2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006dfa:	4b74      	ldr	r3, [pc, #464]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006dfc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d105      	bne.n	8006e14 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	4b6f      	ldr	r3, [pc, #444]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e10:	759a      	strb	r2, [r3, #22]
 8006e12:	e00b      	b.n	8006e2c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d103      	bne.n	8006e26 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006e1e:	4b6b      	ldr	r3, [pc, #428]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	759a      	strb	r2, [r3, #22]
 8006e24:	e002      	b.n	8006e2c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006e26:	4b69      	ldr	r3, [pc, #420]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e28:	22ff      	movs	r2, #255	; 0xff
 8006e2a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d004      	beq.n	8006e40 <RadioSetRxGenericConfig+0x150>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d12d      	bne.n	8006e9c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e46:	2bf1      	cmp	r3, #241	; 0xf1
 8006e48:	d00c      	beq.n	8006e64 <RadioSetRxGenericConfig+0x174>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e50:	2bf2      	cmp	r3, #242	; 0xf2
 8006e52:	d007      	beq.n	8006e64 <RadioSetRxGenericConfig+0x174>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d002      	beq.n	8006e64 <RadioSetRxGenericConfig+0x174>
            return -1;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	e10b      	b.n	800707c <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8006e64:	2300      	movs	r3, #0
 8006e66:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <RadioSetRxGenericConfig+0x2e0>)
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	f107 0310 	add.w	r3, r7, #16
 8006e74:	4a57      	ldr	r2, [pc, #348]	; (8006fd4 <RadioSetRxGenericConfig+0x2e4>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 fbba 	bl	80085f0 <RFW_Init>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <RadioSetRxGenericConfig+0x198>
            return -1;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	e0f9      	b.n	800707c <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006e88:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006e8e:	4b4f      	ldr	r3, [pc, #316]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006e94:	4b4d      	ldr	r3, [pc, #308]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	755a      	strb	r2, [r3, #21]
        {
 8006e9a:	e00e      	b.n	8006eba <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006ea4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006eac:	4b47      	ldr	r3, [pc, #284]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006eae:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006eb6:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006eb8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006eba:	f7ff fb3c 	bl	8006536 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7fe fcfa 	bl	80058b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ec4:	4844      	ldr	r0, [pc, #272]	; (8006fd8 <RadioSetRxGenericConfig+0x2e8>)
 8006ec6:	f000 ff03 	bl	8007cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006eca:	4844      	ldr	r0, [pc, #272]	; (8006fdc <RadioSetRxGenericConfig+0x2ec>)
 8006ecc:	f000 ffcc 	bl	8007e68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006ed0:	f107 031c 	add.w	r3, r7, #28
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fb06 	bl	80074e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	8c1b      	ldrh	r3, [r3, #32]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fb50 	bl	8007584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fb2b 	bl	8007544 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006ef4:	fb02 f203 	mul.w	r2, r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	4a32      	ldr	r2, [pc, #200]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f02:	6093      	str	r3, [r2, #8]
        break;
 8006f04:	e0b9      	b.n	800707a <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <RadioSetRxGenericConfig+0x224>
            return -1;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	e0b3      	b.n	800707c <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d104      	bne.n	8006f28 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f26:	e002      	b.n	8006f2e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006f28:	23ff      	movs	r3, #255	; 0xff
 8006f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fc99 	bl	8007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fca3 	bl	8007892 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006f5a:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d010      	beq.n	8006fa4 <RadioSetRxGenericConfig+0x2b4>
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	dc2c      	bgt.n	8006fe0 <RadioSetRxGenericConfig+0x2f0>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <RadioSetRxGenericConfig+0x2a0>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d005      	beq.n	8006f9a <RadioSetRxGenericConfig+0x2aa>
            break;
 8006f8e:	e027      	b.n	8006fe0 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f98:	e023      	b.n	8006fe2 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006fa2:	e01e      	b.n	8006fe2 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006faa:	2b0b      	cmp	r3, #11
 8006fac:	d004      	beq.n	8006fb8 <RadioSetRxGenericConfig+0x2c8>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	d104      	bne.n	8006fc2 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006fc0:	e00f      	b.n	8006fe2 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006fc2:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <RadioSetRxGenericConfig+0x2dc>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006fca:	e00a      	b.n	8006fe2 <RadioSetRxGenericConfig+0x2f2>
 8006fcc:	20000694 	.word	0x20000694
 8006fd0:	20000554 	.word	0x20000554
 8006fd4:	200006ed 	.word	0x200006ed
 8006fd8:	200006cc 	.word	0x200006cc
 8006fdc:	200006a2 	.word	0x200006a2
            break;
 8006fe0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006fe2:	4b28      	ldr	r3, [pc, #160]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8006fee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006ff6:	4b23      	ldr	r3, [pc, #140]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8006ff8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006ffa:	4a22      	ldr	r2, [pc, #136]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8006ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007000:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007008:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 800700a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007014:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8007016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800701a:	f7ff fa8c 	bl	8006536 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800701e:	2001      	movs	r0, #1
 8007020:	f7fe fc4a 	bl	80058b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007024:	4818      	ldr	r0, [pc, #96]	; (8007088 <RadioSetRxGenericConfig+0x398>)
 8007026:	f000 fe53 	bl	8007cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800702a:	4818      	ldr	r0, [pc, #96]	; (800708c <RadioSetRxGenericConfig+0x39c>)
 800702c:	f000 ff1c 	bl	8007e68 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007030:	4b14      	ldr	r3, [pc, #80]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8007032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007036:	2b01      	cmp	r3, #1
 8007038:	d10d      	bne.n	8007056 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800703a:	f240 7036 	movw	r0, #1846	; 0x736
 800703e:	f001 f86f 	bl	8008120 <SUBGRF_ReadRegister>
 8007042:	4603      	mov	r3, r0
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	b2db      	uxtb	r3, r3
 800704a:	4619      	mov	r1, r3
 800704c:	f240 7036 	movw	r0, #1846	; 0x736
 8007050:	f001 f852 	bl	80080f8 <SUBGRF_WriteRegister>
 8007054:	e00c      	b.n	8007070 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8007056:	f240 7036 	movw	r0, #1846	; 0x736
 800705a:	f001 f861 	bl	8008120 <SUBGRF_ReadRegister>
 800705e:	4603      	mov	r3, r0
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	f240 7036 	movw	r0, #1846	; 0x736
 800706c:	f001 f844 	bl	80080f8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <RadioSetRxGenericConfig+0x394>)
 8007072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007076:	609a      	str	r2, [r3, #8]
        break;
 8007078:	bf00      	nop
    }
    return status;
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800707c:	4618      	mov	r0, r3
 800707e:	3730      	adds	r7, #48	; 0x30
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000694 	.word	0x20000694
 8007088:	200006cc 	.word	0x200006cc
 800708c:	200006a2 	.word	0x200006a2

08007090 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	; 0x28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	4613      	mov	r3, r2
 80070a0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	2300      	movs	r3, #0
 80070a8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80070aa:	f001 faae 	bl	800860a <RFW_DeInit>
    switch( modem )
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f000 8144 	beq.w	800733e <RadioSetTxGenericConfig+0x2ae>
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	f300 8160 	bgt.w	800737c <RadioSetTxGenericConfig+0x2ec>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <RadioSetTxGenericConfig+0x38>
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	f000 80b7 	beq.w	8007234 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80070c6:	e159      	b.n	800737c <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <RadioSetTxGenericConfig+0x48>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <RadioSetTxGenericConfig+0x4e>
            return -1;
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	e163      	b.n	80073a6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	7d1b      	ldrb	r3, [r3, #20]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d902      	bls.n	80070ec <RadioSetTxGenericConfig+0x5c>
            return -1;
 80070e6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ea:	e15c      	b.n	80073a6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
 80070f0:	e00d      	b.n	800710e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	4413      	add	r3, r2
 80070fa:	7819      	ldrb	r1, [r3, #0]
 80070fc:	f107 021c 	add.w	r2, r7, #28
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	4413      	add	r3, r2
 8007104:	460a      	mov	r2, r1
 8007106:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	3301      	adds	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	461a      	mov	r2, r3
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	4293      	cmp	r3, r2
 8007118:	dbeb      	blt.n	80070f2 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800711a:	4ba5      	ldr	r3, [pc, #660]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	4aa2      	ldr	r2, [pc, #648]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007128:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	781a      	ldrb	r2, [r3, #0]
 800712e:	4ba0      	ldr	r3, [pc, #640]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	f001 f997 	bl	800846c <SUBGRF_GetFskBandwidthRegValue>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	4b9b      	ldr	r3, [pc, #620]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a98      	ldr	r2, [pc, #608]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800714e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007150:	4b97      	ldr	r3, [pc, #604]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007152:	2200      	movs	r2, #0
 8007154:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	b29b      	uxth	r3, r3
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	b29a      	uxth	r2, r3
 8007160:	4b93      	ldr	r3, [pc, #588]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007162:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007164:	4b92      	ldr	r3, [pc, #584]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007166:	2204      	movs	r2, #4
 8007168:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	7d1b      	ldrb	r3, [r3, #20]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	b2da      	uxtb	r2, r3
 8007172:	4b8f      	ldr	r3, [pc, #572]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007174:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007176:	4b8e      	ldr	r3, [pc, #568]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007178:	2200      	movs	r2, #0
 800717a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007182:	2b02      	cmp	r3, #2
 8007184:	d003      	beq.n	800718e <RadioSetTxGenericConfig+0xfe>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	7f9b      	ldrb	r3, [r3, #30]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d12a      	bne.n	80071e4 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7fdb      	ldrb	r3, [r3, #31]
 8007192:	2bf1      	cmp	r3, #241	; 0xf1
 8007194:	d00a      	beq.n	80071ac <RadioSetTxGenericConfig+0x11c>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	7fdb      	ldrb	r3, [r3, #31]
 800719a:	2bf2      	cmp	r3, #242	; 0xf2
 800719c:	d006      	beq.n	80071ac <RadioSetTxGenericConfig+0x11c>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	7fdb      	ldrb	r3, [r3, #31]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d002      	beq.n	80071ac <RadioSetTxGenericConfig+0x11c>
                return -1;
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295
 80071aa:	e0fc      	b.n	80073a6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80071ac:	2301      	movs	r3, #1
 80071ae:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80071b4:	4b7f      	ldr	r3, [pc, #508]	; (80073b4 <RadioSetTxGenericConfig+0x324>)
 80071b6:	6819      	ldr	r1, [r3, #0]
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	4a7e      	ldr	r2, [pc, #504]	; (80073b8 <RadioSetTxGenericConfig+0x328>)
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fa16 	bl	80085f0 <RFW_Init>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <RadioSetTxGenericConfig+0x140>
              return -1;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	e0ea      	b.n	80073a6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80071d0:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80071d6:	4b76      	ldr	r3, [pc, #472]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071d8:	2201      	movs	r2, #1
 80071da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80071dc:	4b74      	ldr	r3, [pc, #464]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071de:	2200      	movs	r2, #0
 80071e0:	755a      	strb	r2, [r3, #21]
        {
 80071e2:	e00c      	b.n	80071fe <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	7fda      	ldrb	r2, [r3, #31]
 80071e8:	4b71      	ldr	r3, [pc, #452]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071ea:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80071f2:	4b6f      	ldr	r3, [pc, #444]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071f4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	7f9a      	ldrb	r2, [r3, #30]
 80071fa:	4b6d      	ldr	r3, [pc, #436]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80071fc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80071fe:	f7ff f99a 	bl	8006536 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007202:	2000      	movs	r0, #0
 8007204:	f7fe fb58 	bl	80058b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007208:	486c      	ldr	r0, [pc, #432]	; (80073bc <RadioSetTxGenericConfig+0x32c>)
 800720a:	f000 fd61 	bl	8007cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800720e:	486c      	ldr	r0, [pc, #432]	; (80073c0 <RadioSetTxGenericConfig+0x330>)
 8007210:	f000 fe2a 	bl	8007e68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007214:	f107 031c 	add.w	r3, r7, #28
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f964 	bl	80074e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	8b9b      	ldrh	r3, [r3, #28]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f9ae 	bl	8007584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	8c1b      	ldrh	r3, [r3, #32]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f989 	bl	8007544 <SUBGRF_SetCrcPolynomial>
        break;
 8007232:	e0a4      	b.n	800737e <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007234:	4b5e      	ldr	r3, [pc, #376]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007242:	4b5b      	ldr	r3, [pc, #364]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800724e:	4b58      	ldr	r3, [pc, #352]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800725a:	4b55      	ldr	r3, [pc, #340]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800725c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007266:	2b02      	cmp	r3, #2
 8007268:	d010      	beq.n	800728c <RadioSetTxGenericConfig+0x1fc>
 800726a:	2b02      	cmp	r3, #2
 800726c:	dc22      	bgt.n	80072b4 <RadioSetTxGenericConfig+0x224>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <RadioSetTxGenericConfig+0x1e8>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d005      	beq.n	8007282 <RadioSetTxGenericConfig+0x1f2>
            break;
 8007276:	e01d      	b.n	80072b4 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007278:	4b4d      	ldr	r3, [pc, #308]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007280:	e019      	b.n	80072b6 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007282:	4b4b      	ldr	r3, [pc, #300]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800728a:	e014      	b.n	80072b6 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007292:	2b0b      	cmp	r3, #11
 8007294:	d004      	beq.n	80072a0 <RadioSetTxGenericConfig+0x210>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800729c:	2b0c      	cmp	r3, #12
 800729e:	d104      	bne.n	80072aa <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80072a0:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80072a8:	e005      	b.n	80072b6 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80072aa:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80072b2:	e000      	b.n	80072b6 <RadioSetTxGenericConfig+0x226>
            break;
 80072b4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80072b6:	4b3e      	ldr	r3, [pc, #248]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072c0:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80072ca:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072cc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80072d4:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80072e0:	4b33      	ldr	r3, [pc, #204]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80072e6:	f7ff f926 	bl	8006536 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80072ea:	2001      	movs	r0, #1
 80072ec:	f7fe fae4 	bl	80058b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80072f0:	4832      	ldr	r0, [pc, #200]	; (80073bc <RadioSetTxGenericConfig+0x32c>)
 80072f2:	f000 fced 	bl	8007cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80072f6:	4832      	ldr	r0, [pc, #200]	; (80073c0 <RadioSetTxGenericConfig+0x330>)
 80072f8:	f000 fdb6 	bl	8007e68 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80072fc:	4b2c      	ldr	r3, [pc, #176]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80072fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007302:	2b06      	cmp	r3, #6
 8007304:	d10d      	bne.n	8007322 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007306:	f640 0089 	movw	r0, #2185	; 0x889
 800730a:	f000 ff09 	bl	8008120 <SUBGRF_ReadRegister>
 800730e:	4603      	mov	r3, r0
 8007310:	f023 0304 	bic.w	r3, r3, #4
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	f640 0089 	movw	r0, #2185	; 0x889
 800731c:	f000 feec 	bl	80080f8 <SUBGRF_WriteRegister>
        break;
 8007320:	e02d      	b.n	800737e <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8007322:	f640 0089 	movw	r0, #2185	; 0x889
 8007326:	f000 fefb 	bl	8008120 <SUBGRF_ReadRegister>
 800732a:	4603      	mov	r3, r0
 800732c:	f043 0304 	orr.w	r3, r3, #4
 8007330:	b2db      	uxtb	r3, r3
 8007332:	4619      	mov	r1, r3
 8007334:	f640 0089 	movw	r0, #2185	; 0x889
 8007338:	f000 fede 	bl	80080f8 <SUBGRF_WriteRegister>
        break;
 800733c:	e01f      	b.n	800737e <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <RadioSetTxGenericConfig+0x2c0>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800734e:	d902      	bls.n	8007356 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8007350:	f04f 33ff 	mov.w	r3, #4294967295
 8007354:	e027      	b.n	80073a6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8007356:	2002      	movs	r0, #2
 8007358:	f7fe faae 	bl	80058b8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800735c:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800735e:	2202      	movs	r2, #2
 8007360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	4a11      	ldr	r2, [pc, #68]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800736a:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800736c:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800736e:	2216      	movs	r2, #22
 8007370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007374:	4811      	ldr	r0, [pc, #68]	; (80073bc <RadioSetTxGenericConfig+0x32c>)
 8007376:	f000 fcab 	bl	8007cd0 <SUBGRF_SetModulationParams>
        break;
 800737a:	e000      	b.n	800737e <RadioSetTxGenericConfig+0x2ee>
        break;
 800737c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800737e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 ff84 	bl	8008290 <SUBGRF_SetRfTxPower>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 800738e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007392:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 8007394:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007398:	4618      	mov	r0, r3
 800739a:	f001 f94a 	bl	8008632 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800739e:	4a04      	ldr	r2, [pc, #16]	; (80073b0 <RadioSetTxGenericConfig+0x320>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6053      	str	r3, [r2, #4]
    return 0;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3728      	adds	r7, #40	; 0x28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000694 	.word	0x20000694
 80073b4:	20000554 	.word	0x20000554
 80073b8:	200006ec 	.word	0x200006ec
 80073bc:	200006cc 	.word	0x200006cc
 80073c0:	200006a2 	.word	0x200006a2

080073c4 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80073d2:	4a1a      	ldr	r2, [pc, #104]	; (800743c <SUBGRF_Init+0x78>)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80073d8:	f7fa fa94 	bl	8001904 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80073dc:	2002      	movs	r0, #2
 80073de:	f001 f823 	bl	8008428 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <SUBGRF_Init+0x7c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80073e8:	2000      	movs	r0, #0
 80073ea:	f000 f977 	bl	80076dc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80073ee:	f7fa f8f3 	bl	80015d8 <RBI_IsTCXO>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d10e      	bne.n	8007416 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80073f8:	2140      	movs	r1, #64	; 0x40
 80073fa:	2001      	movs	r0, #1
 80073fc:	f000 fb78 	bl	8007af0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8007400:	2100      	movs	r1, #0
 8007402:	f640 1011 	movw	r0, #2321	; 0x911
 8007406:	f000 fe77 	bl	80080f8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800740a:	237f      	movs	r3, #127	; 0x7f
 800740c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800740e:	7b38      	ldrb	r0, [r7, #12]
 8007410:	f000 fa85 	bl	800791e <SUBGRF_Calibrate>
 8007414:	e009      	b.n	800742a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007416:	2120      	movs	r1, #32
 8007418:	f640 1011 	movw	r0, #2321	; 0x911
 800741c:	f000 fe6c 	bl	80080f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007420:	2120      	movs	r1, #32
 8007422:	f640 1012 	movw	r0, #2322	; 0x912
 8007426:	f000 fe67 	bl	80080f8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800742a:	f7fa f8b9 	bl	80015a0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <SUBGRF_Init+0x80>)
 8007430:	2201      	movs	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000564 	.word	0x20000564
 8007440:	20000560 	.word	0x20000560
 8007444:	20000558 	.word	0x20000558

08007448 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800744c:	4b02      	ldr	r3, [pc, #8]	; (8007458 <SUBGRF_GetOperatingMode+0x10>)
 800744e:	781b      	ldrb	r3, [r3, #0]
}
 8007450:	4618      	mov	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	20000558 	.word	0x20000558

0800745c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	461a      	mov	r2, r3
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	2000      	movs	r0, #0
 8007470:	f000 fe92 	bl	8008198 <SUBGRF_WriteBuffer>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800748e:	f107 0317 	add.w	r3, r7, #23
 8007492:	4619      	mov	r1, r3
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f000 fdb1 	bl	8007ffc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	79fa      	ldrb	r2, [r7, #7]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d201      	bcs.n	80074a8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e007      	b.n	80074b8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80074a8:	7df8      	ldrb	r0, [r7, #23]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	68f9      	ldr	r1, [r7, #12]
 80074b2:	f000 fe87 	bl	80081c4 <SUBGRF_ReadBuffer>

    return 0;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	460b      	mov	r3, r1
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	4619      	mov	r1, r3
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff ffc2 	bl	800745c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f91b 	bl	8007714 <SUBGRF_SetTx>
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80074ee:	2208      	movs	r2, #8
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80074f6:	f000 fe27 	bl	8008148 <SUBGRF_WriteRegisters>
    return 0;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	b29b      	uxth	r3, r3
 8007514:	b2db      	uxtb	r3, r3
 8007516:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800751e:	f000 fb67 	bl	8007bf0 <SUBGRF_GetPacketType>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d108      	bne.n	800753a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8007528:	f107 030c 	add.w	r3, r7, #12
 800752c:	2202      	movs	r2, #2
 800752e:	4619      	mov	r1, r3
 8007530:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007534:	f000 fe08 	bl	8008148 <SUBGRF_WriteRegisters>
            break;
 8007538:	e000      	b.n	800753c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800753a:	bf00      	nop
    }
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	b29b      	uxth	r3, r3
 8007554:	b2db      	uxtb	r3, r3
 8007556:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800755e:	f000 fb47 	bl	8007bf0 <SUBGRF_GetPacketType>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d108      	bne.n	800757a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	2202      	movs	r2, #2
 800756e:	4619      	mov	r1, r3
 8007570:	f240 60be 	movw	r0, #1726	; 0x6be
 8007574:	f000 fde8 	bl	8008148 <SUBGRF_WriteRegisters>
            break;
 8007578:	e000      	b.n	800757c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800757a:	bf00      	nop
    }
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007592:	f000 fb2d 	bl	8007bf0 <SUBGRF_GetPacketType>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d121      	bne.n	80075e0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800759c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80075a0:	f000 fdbe 	bl	8008120 <SUBGRF_ReadRegister>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	b25a      	sxtb	r2, r3
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075be:	4313      	orrs	r3, r2
 80075c0:	b25b      	sxtb	r3, r3
 80075c2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4619      	mov	r1, r3
 80075c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80075cc:	f000 fd94 	bl	80080f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80075da:	f000 fd8d 	bl	80080f8 <SUBGRF_WriteRegister>
            break;
 80075de:	e000      	b.n	80075e2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80075e0:	bf00      	nop
    }
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80075fc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007600:	f000 fd8e 	bl	8008120 <SUBGRF_ReadRegister>
 8007604:	4603      	mov	r3, r0
 8007606:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007616:	f000 fd6f 	bl	80080f8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800761a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800761e:	f000 fd7f 	bl	8008120 <SUBGRF_ReadRegister>
 8007622:	4603      	mov	r3, r0
 8007624:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007626:	79bb      	ldrb	r3, [r7, #6]
 8007628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762c:	b2db      	uxtb	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007634:	f000 fd60 	bl	80080f8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007638:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800763c:	f000 f88a 	bl	8007754 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007640:	463b      	mov	r3, r7
 8007642:	2204      	movs	r2, #4
 8007644:	4619      	mov	r1, r3
 8007646:	f640 0019 	movw	r0, #2073	; 0x819
 800764a:	f000 fd91 	bl	8008170 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800764e:	2000      	movs	r0, #0
 8007650:	f000 f844 	bl	80076dc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	4619      	mov	r1, r3
 8007658:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800765c:	f000 fd4c 	bl	80080f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007660:	79bb      	ldrb	r3, [r7, #6]
 8007662:	4619      	mov	r1, r3
 8007664:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007668:	f000 fd46 	bl	80080f8 <SUBGRF_WriteRegister>

    return number;
 800766c:	683b      	ldr	r3, [r7, #0]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007680:	2000      	movs	r0, #0
 8007682:	f7f9 ff94 	bl	80015ae <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007686:	2002      	movs	r0, #2
 8007688:	f000 fece 	bl	8008428 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800768c:	793b      	ldrb	r3, [r7, #4]
 800768e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007698:	793b      	ldrb	r3, [r7, #4]
 800769a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80076a2:	b25b      	sxtb	r3, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80076a8:	793b      	ldrb	r3, [r7, #4]
 80076aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b25b      	sxtb	r3, r3
 80076b6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80076b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80076ba:	f107 030f 	add.w	r3, r7, #15
 80076be:	2201      	movs	r2, #1
 80076c0:	4619      	mov	r1, r3
 80076c2:	2084      	movs	r0, #132	; 0x84
 80076c4:	f000 fd94 	bl	80081f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <SUBGRF_SetSleep+0x60>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000558 	.word	0x20000558

080076dc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80076e6:	1dfb      	adds	r3, r7, #7
 80076e8:	2201      	movs	r2, #1
 80076ea:	4619      	mov	r1, r3
 80076ec:	2080      	movs	r0, #128	; 0x80
 80076ee:	f000 fd7f 	bl	80081f0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80076f8:	4b05      	ldr	r3, [pc, #20]	; (8007710 <SUBGRF_SetStandby+0x34>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80076fe:	e002      	b.n	8007706 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <SUBGRF_SetStandby+0x34>)
 8007702:	2202      	movs	r2, #2
 8007704:	701a      	strb	r2, [r3, #0]
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000558 	.word	0x20000558

08007714 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <SUBGRF_SetTx+0x3c>)
 800771e:	2204      	movs	r2, #4
 8007720:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2db      	uxtb	r3, r3
 8007728:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	b2db      	uxtb	r3, r3
 8007730:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	2203      	movs	r2, #3
 800773e:	4619      	mov	r1, r3
 8007740:	2083      	movs	r0, #131	; 0x83
 8007742:	f000 fd55 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000558 	.word	0x20000558

08007754 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800775c:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <SUBGRF_SetRx+0x3c>)
 800775e:	2205      	movs	r2, #5
 8007760:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	b2db      	uxtb	r3, r3
 8007768:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b2db      	uxtb	r3, r3
 8007770:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	2203      	movs	r2, #3
 800777e:	4619      	mov	r1, r3
 8007780:	2082      	movs	r0, #130	; 0x82
 8007782:	f000 fd35 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000558 	.word	0x20000558

08007794 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <SUBGRF_SetRxBoosted+0x44>)
 800779e:	2205      	movs	r2, #5
 80077a0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80077a2:	2197      	movs	r1, #151	; 0x97
 80077a4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80077a8:	f000 fca6 	bl	80080f8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80077c2:	f107 030c 	add.w	r3, r7, #12
 80077c6:	2203      	movs	r2, #3
 80077c8:	4619      	mov	r1, r3
 80077ca:	2082      	movs	r0, #130	; 0x82
 80077cc:	f000 fd10 	bl	80081f0 <SUBGRF_WriteCommand>
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000558 	.word	0x20000558

080077dc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	b2db      	uxtb	r3, r3
 8007802:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b2db      	uxtb	r3, r3
 800780a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	2206      	movs	r2, #6
 8007818:	4619      	mov	r1, r3
 800781a:	2094      	movs	r0, #148	; 0x94
 800781c:	f000 fce8 	bl	80081f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8007820:	4b03      	ldr	r3, [pc, #12]	; (8007830 <SUBGRF_SetRxDutyCycle+0x54>)
 8007822:	2206      	movs	r2, #6
 8007824:	701a      	strb	r2, [r3, #0]
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000558 	.word	0x20000558

08007834 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	20c5      	movs	r0, #197	; 0xc5
 800783e:	f000 fcd7 	bl	80081f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8007842:	4b02      	ldr	r3, [pc, #8]	; (800784c <SUBGRF_SetCad+0x18>)
 8007844:	2207      	movs	r2, #7
 8007846:	701a      	strb	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000558 	.word	0x20000558

08007850 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	20d1      	movs	r0, #209	; 0xd1
 800785a:	f000 fcc9 	bl	80081f0 <SUBGRF_WriteCommand>
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}

08007862 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8007862:	b580      	push	{r7, lr}
 8007864:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	20d2      	movs	r0, #210	; 0xd2
 800786c:	f000 fcc0 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007870:	bf00      	nop
 8007872:	bd80      	pop	{r7, pc}

08007874 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800787e:	1dfb      	adds	r3, r7, #7
 8007880:	2201      	movs	r2, #1
 8007882:	4619      	mov	r1, r3
 8007884:	209f      	movs	r0, #159	; 0x9f
 8007886:	f000 fcb3 	bl	80081f0 <SUBGRF_WriteCommand>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	4603      	mov	r3, r0
 800789a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	2201      	movs	r2, #1
 80078a0:	4619      	mov	r1, r3
 80078a2:	20a0      	movs	r0, #160	; 0xa0
 80078a4:	f000 fca4 	bl	80081f0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b3f      	cmp	r3, #63	; 0x3f
 80078ac:	d91c      	bls.n	80078e8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80078bc:	e005      	b.n	80078ca <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	73fb      	strb	r3, [r7, #15]
            exp++;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	3301      	adds	r3, #1
 80078c8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b1f      	cmp	r3, #31
 80078ce:	d8f6      	bhi.n	80078be <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	4413      	add	r3, r2
 80078da:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80078dc:	7b7b      	ldrb	r3, [r7, #13]
 80078de:	4619      	mov	r1, r3
 80078e0:	f240 7006 	movw	r0, #1798	; 0x706
 80078e4:	f000 fc08 	bl	80080f8 <SUBGRF_WriteRegister>
    }
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80078f6:	f7f9 fe76 	bl	80015e6 <RBI_IsDCDC>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d102      	bne.n	8007906 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8007900:	2301      	movs	r3, #1
 8007902:	71fb      	strb	r3, [r7, #7]
 8007904:	e001      	b.n	800790a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8007906:	2300      	movs	r3, #0
 8007908:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	2201      	movs	r2, #1
 800790e:	4619      	mov	r1, r3
 8007910:	2096      	movs	r0, #150	; 0x96
 8007912:	f000 fc6d 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007926:	793b      	ldrb	r3, [r7, #4]
 8007928:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	019b      	lsls	r3, r3, #6
 8007930:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007932:	793b      	ldrb	r3, [r7, #4]
 8007934:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800793c:	b25b      	sxtb	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007942:	793b      	ldrb	r3, [r7, #4]
 8007944:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800794c:	b25b      	sxtb	r3, r3
 800794e:	4313      	orrs	r3, r2
 8007950:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007952:	793b      	ldrb	r3, [r7, #4]
 8007954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800795c:	b25b      	sxtb	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007962:	793b      	ldrb	r3, [r7, #4]
 8007964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800796c:	b25b      	sxtb	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007972:	793b      	ldrb	r3, [r7, #4]
 8007974:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007978:	b2db      	uxtb	r3, r3
 800797a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800797c:	b25b      	sxtb	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007982:	793b      	ldrb	r3, [r7, #4]
 8007984:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007988:	b2db      	uxtb	r3, r3
 800798a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800798c:	4313      	orrs	r3, r2
 800798e:	b25b      	sxtb	r3, r3
 8007990:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007992:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007994:	f107 030f 	add.w	r3, r7, #15
 8007998:	2201      	movs	r2, #1
 800799a:	4619      	mov	r1, r3
 800799c:	2089      	movs	r0, #137	; 0x89
 800799e:	f000 fc27 	bl	80081f0 <SUBGRF_WriteCommand>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1b      	ldr	r2, [pc, #108]	; (8007a24 <SUBGRF_CalibrateImage+0x78>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d904      	bls.n	80079c6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80079bc:	23e1      	movs	r3, #225	; 0xe1
 80079be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80079c0:	23e9      	movs	r3, #233	; 0xe9
 80079c2:	737b      	strb	r3, [r7, #13]
 80079c4:	e022      	b.n	8007a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <SUBGRF_CalibrateImage+0x7c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d904      	bls.n	80079d8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80079ce:	23d7      	movs	r3, #215	; 0xd7
 80079d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80079d2:	23db      	movs	r3, #219	; 0xdb
 80079d4:	737b      	strb	r3, [r7, #13]
 80079d6:	e019      	b.n	8007a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a14      	ldr	r2, [pc, #80]	; (8007a2c <SUBGRF_CalibrateImage+0x80>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d904      	bls.n	80079ea <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80079e0:	23c1      	movs	r3, #193	; 0xc1
 80079e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80079e4:	23c5      	movs	r3, #197	; 0xc5
 80079e6:	737b      	strb	r3, [r7, #13]
 80079e8:	e010      	b.n	8007a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <SUBGRF_CalibrateImage+0x84>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d904      	bls.n	80079fc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80079f2:	2375      	movs	r3, #117	; 0x75
 80079f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80079f6:	2381      	movs	r3, #129	; 0x81
 80079f8:	737b      	strb	r3, [r7, #13]
 80079fa:	e007      	b.n	8007a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <SUBGRF_CalibrateImage+0x88>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d903      	bls.n	8007a0c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8007a04:	236b      	movs	r3, #107	; 0x6b
 8007a06:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8007a08:	236f      	movs	r3, #111	; 0x6f
 8007a0a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	2202      	movs	r2, #2
 8007a12:	4619      	mov	r1, r3
 8007a14:	2098      	movs	r0, #152	; 0x98
 8007a16:	f000 fbeb 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	35a4e900 	.word	0x35a4e900
 8007a28:	32a9f880 	.word	0x32a9f880
 8007a2c:	2de54480 	.word	0x2de54480
 8007a30:	1b6b0b00 	.word	0x1b6b0b00
 8007a34:	1954fc40 	.word	0x1954fc40

08007a38 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	4623      	mov	r3, r4
 8007a48:	71fb      	strb	r3, [r7, #7]
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71bb      	strb	r3, [r7, #6]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	717b      	strb	r3, [r7, #5]
 8007a52:	4613      	mov	r3, r2
 8007a54:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8007a5a:	79bb      	ldrb	r3, [r7, #6]
 8007a5c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007a5e:	797b      	ldrb	r3, [r7, #5]
 8007a60:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007a62:	793b      	ldrb	r3, [r7, #4]
 8007a64:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8007a66:	f107 030c 	add.w	r3, r7, #12
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	2095      	movs	r0, #149	; 0x95
 8007a70:	f000 fbbe 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	80fb      	strh	r3, [r7, #6]
 8007a8e:	4603      	mov	r3, r0
 8007a90:	80bb      	strh	r3, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	807b      	strh	r3, [r7, #2]
 8007a96:	4613      	mov	r3, r2
 8007a98:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	0a1b      	lsrs	r3, r3, #8
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007aaa:	88bb      	ldrh	r3, [r7, #4]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007ab4:	88bb      	ldrh	r3, [r7, #4]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	0a1b      	lsrs	r3, r3, #8
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007aca:	883b      	ldrh	r3, [r7, #0]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007ad4:	883b      	ldrh	r3, [r7, #0]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	2208      	movs	r2, #8
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2008      	movs	r0, #8
 8007ae4:	f000 fb84 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}

08007af0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	2204      	movs	r2, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	2097      	movs	r0, #151	; 0x97
 8007b26:	f000 fb63 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007b40:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <SUBGRF_SetRfFrequency+0x7c>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f083 0301 	eor.w	r3, r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ff2c 	bl	80079ac <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007b54:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <SUBGRF_SetRfFrequency+0x7c>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	09d5      	lsrs	r5, r2, #7
 8007b64:	0654      	lsls	r4, r2, #25
 8007b66:	4a13      	ldr	r2, [pc, #76]	; (8007bb4 <SUBGRF_SetRfFrequency+0x80>)
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7f9 f862 	bl	8000c38 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4613      	mov	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	0e1b      	lsrs	r3, r3, #24
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	2086      	movs	r0, #134	; 0x86
 8007ba4:	f000 fb24 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bdb0      	pop	{r4, r5, r7, pc}
 8007bb0:	20000560 	.word	0x20000560
 8007bb4:	01e84800 	.word	0x01e84800

08007bb8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007bc2:	79fa      	ldrb	r2, [r7, #7]
 8007bc4:	4b09      	ldr	r3, [pc, #36]	; (8007bec <SUBGRF_SetPacketType+0x34>)
 8007bc6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007bd4:	f000 fa90 	bl	80080f8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007bd8:	1dfb      	adds	r3, r7, #7
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4619      	mov	r1, r3
 8007bde:	208a      	movs	r0, #138	; 0x8a
 8007be0:	f000 fb06 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000559 	.word	0x20000559

08007bf0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
    return PacketType;
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <SUBGRF_GetPacketType+0x10>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr
 8007c00:	20000559 	.word	0x20000559

08007c04 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	71bb      	strb	r3, [r7, #6]
 8007c12:	4613      	mov	r3, r2
 8007c14:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d124      	bne.n	8007c66 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8007c1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c20:	2b0f      	cmp	r3, #15
 8007c22:	d106      	bne.n	8007c32 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8007c24:	2301      	movs	r3, #1
 8007c26:	2201      	movs	r2, #1
 8007c28:	2100      	movs	r1, #0
 8007c2a:	2006      	movs	r0, #6
 8007c2c:	f7ff ff04 	bl	8007a38 <SUBGRF_SetPaConfig>
 8007c30:	e005      	b.n	8007c3e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8007c32:	2301      	movs	r3, #1
 8007c34:	2201      	movs	r2, #1
 8007c36:	2100      	movs	r1, #0
 8007c38:	2004      	movs	r0, #4
 8007c3a:	f7ff fefd 	bl	8007a38 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c42:	2b0d      	cmp	r3, #13
 8007c44:	dd02      	ble.n	8007c4c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8007c46:	230e      	movs	r3, #14
 8007c48:	71bb      	strb	r3, [r7, #6]
 8007c4a:	e006      	b.n	8007c5a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007c4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c50:	f113 0f11 	cmn.w	r3, #17
 8007c54:	da01      	bge.n	8007c5a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8007c56:	23ef      	movs	r3, #239	; 0xef
 8007c58:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8007c5a:	2118      	movs	r1, #24
 8007c5c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007c60:	f000 fa4a 	bl	80080f8 <SUBGRF_WriteRegister>
 8007c64:	e025      	b.n	8007cb2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8007c66:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007c6a:	f000 fa59 	bl	8008120 <SUBGRF_ReadRegister>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f043 031e 	orr.w	r3, r3, #30
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	4619      	mov	r1, r3
 8007c78:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007c7c:	f000 fa3c 	bl	80080f8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007c80:	2301      	movs	r3, #1
 8007c82:	2200      	movs	r2, #0
 8007c84:	2107      	movs	r1, #7
 8007c86:	2004      	movs	r0, #4
 8007c88:	f7ff fed6 	bl	8007a38 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007c8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c90:	2b16      	cmp	r3, #22
 8007c92:	dd02      	ble.n	8007c9a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007c94:	2316      	movs	r3, #22
 8007c96:	71bb      	strb	r3, [r7, #6]
 8007c98:	e006      	b.n	8007ca8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8007c9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c9e:	f113 0f09 	cmn.w	r3, #9
 8007ca2:	da01      	bge.n	8007ca8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007ca4:	23f7      	movs	r3, #247	; 0xf7
 8007ca6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8007ca8:	2138      	movs	r1, #56	; 0x38
 8007caa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007cae:	f000 fa23 	bl	80080f8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007cb2:	79bb      	ldrb	r3, [r7, #6]
 8007cb4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8007cb6:	797b      	ldrb	r3, [r7, #5]
 8007cb8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	208e      	movs	r0, #142	; 0x8e
 8007cc4:	f000 fa94 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007cdc:	4a5e      	ldr	r2, [pc, #376]	; (8007e58 <SUBGRF_SetModulationParams+0x188>)
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ce6:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	781a      	ldrb	r2, [r3, #0]
 8007cee:	4b5b      	ldr	r3, [pc, #364]	; (8007e5c <SUBGRF_SetModulationParams+0x18c>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d004      	beq.n	8007d00 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ff5c 	bl	8007bb8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	f200 80a2 	bhi.w	8007e4e <SUBGRF_SetModulationParams+0x17e>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <SUBGRF_SetModulationParams+0x40>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007ddd 	.word	0x08007ddd
 8007d18:	08007d9f 	.word	0x08007d9f
 8007d1c:	08007e0b 	.word	0x08007e0b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007d20:	2308      	movs	r3, #8
 8007d22:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a4d      	ldr	r2, [pc, #308]	; (8007e60 <SUBGRF_SetModulationParams+0x190>)
 8007d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7b1b      	ldrb	r3, [r3, #12]
 8007d4a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7b5b      	ldrb	r3, [r3, #13]
 8007d50:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	09d5      	lsrs	r5, r2, #7
 8007d5e:	0654      	lsls	r4, r2, #25
 8007d60:	4a40      	ldr	r2, [pc, #256]	; (8007e64 <SUBGRF_SetModulationParams+0x194>)
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 ff65 	bl	8000c38 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4613      	mov	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f107 0308 	add.w	r3, r7, #8
 8007d94:	4619      	mov	r1, r3
 8007d96:	208b      	movs	r0, #139	; 0x8b
 8007d98:	f000 fa2a 	bl	80081f0 <SUBGRF_WriteCommand>
        break;
 8007d9c:	e058      	b.n	8007e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007d9e:	2304      	movs	r3, #4
 8007da0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	4a2e      	ldr	r2, [pc, #184]	; (8007e60 <SUBGRF_SetModulationParams+0x190>)
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	0a1b      	lsrs	r3, r3, #8
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	7d1b      	ldrb	r3, [r3, #20]
 8007dc8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007dca:	7cfb      	ldrb	r3, [r7, #19]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	208b      	movs	r0, #139	; 0x8b
 8007dd6:	f000 fa0b 	bl	80081f0 <SUBGRF_WriteCommand>
        break;
 8007dda:	e039      	b.n	8007e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8007ddc:	2304      	movs	r3, #4
 8007dde:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7e1b      	ldrb	r3, [r3, #24]
 8007de4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7e5b      	ldrb	r3, [r3, #25]
 8007dea:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7e9b      	ldrb	r3, [r3, #26]
 8007df0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7edb      	ldrb	r3, [r3, #27]
 8007df6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f107 0308 	add.w	r3, r7, #8
 8007e00:	4619      	mov	r1, r3
 8007e02:	208b      	movs	r0, #139	; 0x8b
 8007e04:	f000 f9f4 	bl	80081f0 <SUBGRF_WriteCommand>

        break;
 8007e08:	e022      	b.n	8007e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007e0a:	2305      	movs	r3, #5
 8007e0c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <SUBGRF_SetModulationParams+0x190>)
 8007e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	0c1b      	lsrs	r3, r3, #16
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7b1b      	ldrb	r3, [r3, #12]
 8007e34:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7b5b      	ldrb	r3, [r3, #13]
 8007e3a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007e3c:	7cfb      	ldrb	r3, [r7, #19]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	4619      	mov	r1, r3
 8007e46:	208b      	movs	r0, #139	; 0x8b
 8007e48:	f000 f9d2 	bl	80081f0 <SUBGRF_WriteCommand>
        break;
 8007e4c:	e000      	b.n	8007e50 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007e4e:	bf00      	nop
    }
}
 8007e50:	bf00      	nop
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bdb0      	pop	{r4, r5, r7, pc}
 8007e58:	0800c994 	.word	0x0800c994
 8007e5c:	20000559 	.word	0x20000559
 8007e60:	3d090000 	.word	0x3d090000
 8007e64:	01e84800 	.word	0x01e84800

08007e68 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007e74:	4a48      	ldr	r2, [pc, #288]	; (8007f98 <SUBGRF_SetPacketParams+0x130>)
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e7c:	c303      	stmia	r3!, {r0, r1}
 8007e7e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	781a      	ldrb	r2, [r3, #0]
 8007e84:	4b45      	ldr	r3, [pc, #276]	; (8007f9c <SUBGRF_SetPacketParams+0x134>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d004      	beq.n	8007e96 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fe91 	bl	8007bb8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d878      	bhi.n	8007f90 <SUBGRF_SetPacketParams+0x128>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <SUBGRF_SetPacketParams+0x3c>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007eb5 	.word	0x08007eb5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7a5b      	ldrb	r3, [r3, #9]
 8007eb8:	2bf1      	cmp	r3, #241	; 0xf1
 8007eba:	d10a      	bne.n	8007ed2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007ebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007ec0:	f7ff fb20 	bl	8007504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007ec4:	f248 0005 	movw	r0, #32773	; 0x8005
 8007ec8:	f7ff fb3c 	bl	8007544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	75bb      	strb	r3, [r7, #22]
 8007ed0:	e011      	b.n	8007ef6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7a5b      	ldrb	r3, [r3, #9]
 8007ed6:	2bf2      	cmp	r3, #242	; 0xf2
 8007ed8:	d10a      	bne.n	8007ef0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007eda:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007ede:	f7ff fb11 	bl	8007504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007ee2:	f241 0021 	movw	r0, #4129	; 0x1021
 8007ee6:	f7ff fb2d 	bl	8007544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007eea:	2306      	movs	r3, #6
 8007eec:	75bb      	strb	r3, [r7, #22]
 8007eee:	e002      	b.n	8007ef6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7a5b      	ldrb	r3, [r3, #9]
 8007ef4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007ef6:	2309      	movs	r3, #9
 8007ef8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	795b      	ldrb	r3, [r3, #5]
 8007f18:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	799b      	ldrb	r3, [r3, #6]
 8007f1e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	79db      	ldrb	r3, [r3, #7]
 8007f24:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7a1b      	ldrb	r3, [r3, #8]
 8007f2a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7a9b      	ldrb	r3, [r3, #10]
 8007f34:	753b      	strb	r3, [r7, #20]
        break;
 8007f36:	e022      	b.n	8007f7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7b1b      	ldrb	r3, [r3, #12]
 8007f40:	733b      	strb	r3, [r7, #12]
        break;
 8007f42:	e01c      	b.n	8007f7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007f44:	2306      	movs	r3, #6
 8007f46:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	89db      	ldrh	r3, [r3, #14]
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	89db      	ldrh	r3, [r3, #14]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7c1a      	ldrb	r2, [r3, #16]
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <SUBGRF_SetPacketParams+0x138>)
 8007f62:	4611      	mov	r1, r2
 8007f64:	7019      	strb	r1, [r3, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7c5b      	ldrb	r3, [r3, #17]
 8007f6e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7c9b      	ldrb	r3, [r3, #18]
 8007f74:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7cdb      	ldrb	r3, [r3, #19]
 8007f7a:	747b      	strb	r3, [r7, #17]
        break;
 8007f7c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	f107 030c 	add.w	r3, r7, #12
 8007f86:	4619      	mov	r1, r3
 8007f88:	208c      	movs	r0, #140	; 0x8c
 8007f8a:	f000 f931 	bl	80081f0 <SUBGRF_WriteCommand>
 8007f8e:	e000      	b.n	8007f92 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007f90:	bf00      	nop
}
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	0800c99c 	.word	0x0800c99c
 8007f9c:	20000559 	.word	0x20000559
 8007fa0:	2000055a 	.word	0x2000055a

08007fa4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	460a      	mov	r2, r1
 8007fae:	71fb      	strb	r3, [r7, #7]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007fb8:	79bb      	ldrb	r3, [r7, #6]
 8007fba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	208f      	movs	r0, #143	; 0x8f
 8007fc6:	f000 f913 	bl	80081f0 <SUBGRF_WriteCommand>
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	2015      	movs	r0, #21
 8007fe4:	f000 f918 	bl	8008218 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007fe8:	793b      	ldrb	r3, [r7, #4]
 8007fea:	425b      	negs	r3, r3
 8007fec:	105b      	asrs	r3, r3, #1
 8007fee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008006:	f107 030c 	add.w	r3, r7, #12
 800800a:	2202      	movs	r2, #2
 800800c:	4619      	mov	r1, r3
 800800e:	2013      	movs	r0, #19
 8008010:	f000 f902 	bl	8008218 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008014:	f7ff fdec 	bl	8007bf0 <SUBGRF_GetPacketType>
 8008018:	4603      	mov	r3, r0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10d      	bne.n	800803a <SUBGRF_GetRxBufferStatus+0x3e>
 800801e:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <SUBGRF_GetRxBufferStatus+0x54>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	d108      	bne.n	800803a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008028:	f240 7002 	movw	r0, #1794	; 0x702
 800802c:	f000 f878 	bl	8008120 <SUBGRF_ReadRegister>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800803a:	7b3a      	ldrb	r2, [r7, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8008040:	7b7a      	ldrb	r2, [r7, #13]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	701a      	strb	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	2000055a 	.word	0x2000055a

08008054 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	2203      	movs	r2, #3
 8008062:	4619      	mov	r1, r3
 8008064:	2014      	movs	r0, #20
 8008066:	f000 f8d7 	bl	8008218 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800806a:	f7ff fdc1 	bl	8007bf0 <SUBGRF_GetPacketType>
 800806e:	4603      	mov	r3, r0
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <SUBGRF_GetPacketStatus+0x30>
 800807e:	2b01      	cmp	r3, #1
 8008080:	d013      	beq.n	80080aa <SUBGRF_GetPacketStatus+0x56>
 8008082:	e02a      	b.n	80080da <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008084:	7b3a      	ldrb	r2, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800808a:	7b7b      	ldrb	r3, [r7, #13]
 800808c:	425b      	negs	r3, r3
 800808e:	105b      	asrs	r3, r3, #1
 8008090:	b25a      	sxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	425b      	negs	r3, r3
 800809a:	105b      	asrs	r3, r3, #1
 800809c:	b25a      	sxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	609a      	str	r2, [r3, #8]
            break;
 80080a8:	e020      	b.n	80080ec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80080aa:	7b3b      	ldrb	r3, [r7, #12]
 80080ac:	425b      	negs	r3, r3
 80080ae:	105b      	asrs	r3, r3, #1
 80080b0:	b25a      	sxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80080b6:	7b7b      	ldrb	r3, [r7, #13]
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	3302      	adds	r3, #2
 80080bc:	109b      	asrs	r3, r3, #2
 80080be:	b25a      	sxtb	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	425b      	negs	r3, r3
 80080c8:	105b      	asrs	r3, r3, #1
 80080ca:	b25a      	sxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <SUBGRF_GetPacketStatus+0xa0>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	611a      	str	r2, [r3, #16]
            break;
 80080d8:	e008      	b.n	80080ec <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80080da:	2214      	movs	r2, #20
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fb2a 	bl	8008738 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	220f      	movs	r2, #15
 80080e8:	701a      	strb	r2, [r3, #0]
            break;
 80080ea:	bf00      	nop
    }
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	2000055c 	.word	0x2000055c

080080f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	460a      	mov	r2, r1
 8008102:	80fb      	strh	r3, [r7, #6]
 8008104:	4613      	mov	r3, r2
 8008106:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008108:	1d7a      	adds	r2, r7, #5
 800810a:	88f9      	ldrh	r1, [r7, #6]
 800810c:	2301      	movs	r3, #1
 800810e:	4803      	ldr	r0, [pc, #12]	; (800811c <SUBGRF_WriteRegister+0x24>)
 8008110:	f7fc f8e4 	bl	80042dc <HAL_SUBGHZ_WriteRegisters>
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20000610 	.word	0x20000610

08008120 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800812a:	f107 020f 	add.w	r2, r7, #15
 800812e:	88f9      	ldrh	r1, [r7, #6]
 8008130:	2301      	movs	r3, #1
 8008132:	4804      	ldr	r0, [pc, #16]	; (8008144 <SUBGRF_ReadRegister+0x24>)
 8008134:	f7fc f931 	bl	800439a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000610 	.word	0x20000610

08008148 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	80fb      	strh	r3, [r7, #6]
 8008154:	4613      	mov	r3, r2
 8008156:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008158:	88bb      	ldrh	r3, [r7, #4]
 800815a:	88f9      	ldrh	r1, [r7, #6]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	4803      	ldr	r0, [pc, #12]	; (800816c <SUBGRF_WriteRegisters+0x24>)
 8008160:	f7fc f8bc 	bl	80042dc <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000610 	.word	0x20000610

08008170 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	80fb      	strh	r3, [r7, #6]
 800817c:	4613      	mov	r3, r2
 800817e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008180:	88bb      	ldrh	r3, [r7, #4]
 8008182:	88f9      	ldrh	r1, [r7, #6]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	4803      	ldr	r0, [pc, #12]	; (8008194 <SUBGRF_ReadRegisters+0x24>)
 8008188:	f7fc f907 	bl	800439a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000610 	.word	0x20000610

08008198 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
 80081a4:	4613      	mov	r3, r2
 80081a6:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80081a8:	79bb      	ldrb	r3, [r7, #6]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	79f9      	ldrb	r1, [r7, #7]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4803      	ldr	r0, [pc, #12]	; (80081c0 <SUBGRF_WriteBuffer+0x28>)
 80081b2:	f7fc fa06 	bl	80045c2 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000610 	.word	0x20000610

080081c4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
 80081d0:	4613      	mov	r3, r2
 80081d2:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80081d4:	79bb      	ldrb	r3, [r7, #6]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	79f9      	ldrb	r1, [r7, #7]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <SUBGRF_ReadBuffer+0x28>)
 80081de:	f7fc fa43 	bl	8004668 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000610 	.word	0x20000610

080081f0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	6039      	str	r1, [r7, #0]
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8008200:	88bb      	ldrh	r3, [r7, #4]
 8008202:	79f9      	ldrb	r1, [r7, #7]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	4803      	ldr	r0, [pc, #12]	; (8008214 <SUBGRF_WriteCommand+0x24>)
 8008208:	f7fc f928 	bl	800445c <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000610 	.word	0x20000610

08008218 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
 8008224:	4613      	mov	r3, r2
 8008226:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008228:	88bb      	ldrh	r3, [r7, #4]
 800822a:	79f9      	ldrb	r1, [r7, #7]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	4803      	ldr	r0, [pc, #12]	; (800823c <SUBGRF_ReadCommand+0x24>)
 8008230:	f7fc f973 	bl	800451a <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000610 	.word	0x20000610

08008240 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	460a      	mov	r2, r1
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	4613      	mov	r3, r2
 800824e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8008254:	79bb      	ldrb	r3, [r7, #6]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10d      	bne.n	8008276 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d104      	bne.n	800826a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8008260:	2302      	movs	r3, #2
 8008262:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008264:	2004      	movs	r0, #4
 8008266:	f000 f8df 	bl	8008428 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b02      	cmp	r3, #2
 800826e:	d107      	bne.n	8008280 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8008270:	2303      	movs	r3, #3
 8008272:	73fb      	strb	r3, [r7, #15]
 8008274:	e004      	b.n	8008280 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8008276:	79bb      	ldrb	r3, [r7, #6]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800827c:	2301      	movs	r3, #1
 800827e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	4618      	mov	r0, r3
 8008284:	f7f9 f993 	bl	80015ae <RBI_ConfigRFSwitch>
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800829a:	2301      	movs	r3, #1
 800829c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800829e:	f7f9 f994 	bl	80015ca <RBI_GetTxConfig>
 80082a2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d016      	beq.n	80082d8 <SUBGRF_SetRfTxPower+0x48>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	dc16      	bgt.n	80082de <SUBGRF_SetRfTxPower+0x4e>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <SUBGRF_SetRfTxPower+0x2e>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d00a      	beq.n	80082d2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80082bc:	e00f      	b.n	80082de <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80082be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c2:	2b0f      	cmp	r3, #15
 80082c4:	dd02      	ble.n	80082cc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80082c6:	2302      	movs	r3, #2
 80082c8:	73fb      	strb	r3, [r7, #15]
            break;
 80082ca:	e009      	b.n	80082e0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
            break;
 80082d0:	e006      	b.n	80082e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
            break;
 80082d6:	e003      	b.n	80082e0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80082d8:	2302      	movs	r3, #2
 80082da:	73fb      	strb	r3, [r7, #15]
            break;
 80082dc:	e000      	b.n	80082e0 <SUBGRF_SetRfTxPower+0x50>
            break;
 80082de:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80082e0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2202      	movs	r2, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff fc8b 	bl	8007c04 <SUBGRF_SetTxParams>

    return paSelect;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80082fc:	2301      	movs	r3, #1
}
 80082fe:	4618      	mov	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
	...

08008308 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2001      	movs	r0, #1
 8008316:	4798      	blx	r3
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20000564 	.word	0x20000564

08008324 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800832c:	4b03      	ldr	r3, [pc, #12]	; (800833c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2002      	movs	r0, #2
 8008332:	4798      	blx	r3
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000564 	.word	0x20000564

08008340 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2040      	movs	r0, #64	; 0x40
 800834e:	4798      	blx	r3
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000564 	.word	0x20000564

0800835c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800836e:	2b01      	cmp	r3, #1
 8008370:	d005      	beq.n	800837e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008372:	e00a      	b.n	800838a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2080      	movs	r0, #128	; 0x80
 800837a:	4798      	blx	r3
            break;
 800837c:	e005      	b.n	800838a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008386:	4798      	blx	r3
            break;
 8008388:	bf00      	nop
    }
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000564 	.word	0x20000564

08008398 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80083a8:	4798      	blx	r3
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000564 	.word	0x20000564

080083b8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80083c0:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2020      	movs	r0, #32
 80083c6:	4798      	blx	r3
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000564 	.word	0x20000564

080083d4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80083dc:	4b03      	ldr	r3, [pc, #12]	; (80083ec <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2004      	movs	r0, #4
 80083e2:	4798      	blx	r3
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000564 	.word	0x20000564

080083f0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80083f8:	4b03      	ldr	r3, [pc, #12]	; (8008408 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2008      	movs	r0, #8
 80083fe:	4798      	blx	r3
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000564 	.word	0x20000564

0800840c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008414:	4b03      	ldr	r3, [pc, #12]	; (8008424 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2010      	movs	r0, #16
 800841a:	4798      	blx	r3
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20000564 	.word	0x20000564

08008428 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8008432:	f7f9 f8d8 	bl	80015e6 <RBI_IsDCDC>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d112      	bne.n	8008462 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800843c:	f640 1023 	movw	r0, #2339	; 0x923
 8008440:	f7ff fe6e 	bl	8008120 <SUBGRF_ReadRegister>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	f023 0306 	bic.w	r3, r3, #6
 800844e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8008450:	7bfa      	ldrb	r2, [r7, #15]
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	4313      	orrs	r3, r2
 8008456:	b2db      	uxtb	r3, r3
 8008458:	4619      	mov	r1, r3
 800845a:	f640 1023 	movw	r0, #2339	; 0x923
 800845e:	f7ff fe4b 	bl	80080f8 <SUBGRF_WriteRegister>
  }
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800847a:	231f      	movs	r3, #31
 800847c:	e016      	b.n	80084ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
 8008482:	e00f      	b.n	80084a4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d205      	bcs.n	800849e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	791b      	ldrb	r3, [r3, #4]
 800849c:	e006      	b.n	80084ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	3301      	adds	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b15      	cmp	r3, #21
 80084a8:	d9ec      	bls.n	8008484 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80084aa:	e7fe      	b.n	80084aa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	0800caf8 	.word	0x0800caf8

080084bc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80084c6:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <SUBGRF_GetCFO+0xe4>)
 80084c8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80084ca:	f640 0007 	movw	r0, #2055	; 0x807
 80084ce:	f7ff fe27 	bl	8008120 <SUBGRF_ReadRegister>
 80084d2:	4603      	mov	r3, r0
 80084d4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80084d6:	7ffb      	ldrb	r3, [r7, #31]
 80084d8:	08db      	lsrs	r3, r3, #3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084e4:	4413      	add	r3, r2
 80084e6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80084ea:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80084ec:	7ffb      	ldrb	r3, [r7, #31]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80084f4:	7fba      	ldrb	r2, [r7, #30]
 80084f6:	7f7b      	ldrb	r3, [r7, #29]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <SUBGRF_GetCFO+0xe8>)
 8008502:	fbb3 f3f2 	udiv	r3, r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008512:	2301      	movs	r3, #1
 8008514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	2b07      	cmp	r3, #7
 8008524:	d802      	bhi.n	800852c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8008526:	2302      	movs	r3, #2
 8008528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800852c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d802      	bhi.n	8008540 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 800853a:	2304      	movs	r3, #4
 800853c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008540:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800854c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8008550:	f7ff fde6 	bl	8008120 <SUBGRF_ReadRegister>
 8008554:	4603      	mov	r3, r0
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800855c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800855e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008562:	f7ff fddd 	bl	8008120 <SUBGRF_ReadRegister>
 8008566:	4603      	mov	r3, r0
 8008568:	461a      	mov	r2, r3
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	4313      	orrs	r3, r2
 800856e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008580:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008584:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	6a3a      	ldr	r2, [r7, #32]
 800858c:	fb02 f303 	mul.w	r3, r2, r3
 8008590:	11da      	asrs	r2, r3, #7
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	601a      	str	r2, [r3, #0]
}
 8008596:	bf00      	nop
 8008598:	3728      	adds	r7, #40	; 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0c0a0804 	.word	0x0c0a0804
 80085a4:	01e84800 	.word	0x01e84800

080085a8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
 80085be:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr

080085cc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80085e4:	697b      	ldr	r3, [r7, #20]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr

080085f0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <RFW_DeInit>:

void RFW_DeInit( void)
{
 800860a:	b480      	push	{r7}
 800860c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800860e:	bf00      	nop
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8008616:	b480      	push	{r7}
 8008618:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800861a:	2300      	movs	r3, #0
#endif
}
 800861c:	4618      	mov	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8008628:	2300      	movs	r3, #0
#endif
}
 800862a:	4618      	mov	r0, r3
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	4603      	mov	r3, r0
 800863a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8008646:	b480      	push	{r7}
 8008648:	b087      	sub	sp, #28
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	460b      	mov	r3, r1
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8008654:	f04f 33ff 	mov.w	r3, #4294967295
 8008658:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800865a:	697b      	ldr	r3, [r7, #20]
}
 800865c:	4618      	mov	r0, r3
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr

08008666 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8008666:	b480      	push	{r7}
 8008668:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800866a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800866e:	4618      	mov	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8008676:	b480      	push	{r7}
 8008678:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800867a:	bf00      	nop
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008682:	b480      	push	{r7}
 8008684:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	4603      	mov	r3, r0
 8008696:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr

080086a2 <atof>:
 80086a2:	2100      	movs	r1, #0
 80086a4:	f001 bc2c 	b.w	8009f00 <strtod>

080086a8 <__errno>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	; (80086b0 <__errno+0x8>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	2000000c 	.word	0x2000000c

080086b4 <__libc_init_array>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	4d0d      	ldr	r5, [pc, #52]	; (80086ec <__libc_init_array+0x38>)
 80086b8:	4c0d      	ldr	r4, [pc, #52]	; (80086f0 <__libc_init_array+0x3c>)
 80086ba:	1b64      	subs	r4, r4, r5
 80086bc:	10a4      	asrs	r4, r4, #2
 80086be:	2600      	movs	r6, #0
 80086c0:	42a6      	cmp	r6, r4
 80086c2:	d109      	bne.n	80086d8 <__libc_init_array+0x24>
 80086c4:	4d0b      	ldr	r5, [pc, #44]	; (80086f4 <__libc_init_array+0x40>)
 80086c6:	4c0c      	ldr	r4, [pc, #48]	; (80086f8 <__libc_init_array+0x44>)
 80086c8:	f004 f858 	bl	800c77c <_init>
 80086cc:	1b64      	subs	r4, r4, r5
 80086ce:	10a4      	asrs	r4, r4, #2
 80086d0:	2600      	movs	r6, #0
 80086d2:	42a6      	cmp	r6, r4
 80086d4:	d105      	bne.n	80086e2 <__libc_init_array+0x2e>
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086dc:	4798      	blx	r3
 80086de:	3601      	adds	r6, #1
 80086e0:	e7ee      	b.n	80086c0 <__libc_init_array+0xc>
 80086e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e6:	4798      	blx	r3
 80086e8:	3601      	adds	r6, #1
 80086ea:	e7f2      	b.n	80086d2 <__libc_init_array+0x1e>
 80086ec:	0800d05c 	.word	0x0800d05c
 80086f0:	0800d05c 	.word	0x0800d05c
 80086f4:	0800d05c 	.word	0x0800d05c
 80086f8:	0800d060 	.word	0x0800d060

080086fc <malloc>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <malloc+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f000 b86f 	b.w	80087e4 <_malloc_r>
 8008706:	bf00      	nop
 8008708:	2000000c 	.word	0x2000000c

0800870c <free>:
 800870c:	4b02      	ldr	r3, [pc, #8]	; (8008718 <free+0xc>)
 800870e:	4601      	mov	r1, r0
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	f000 b819 	b.w	8008748 <_free_r>
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c

0800871c <memcpy>:
 800871c:	440a      	add	r2, r1
 800871e:	4291      	cmp	r1, r2
 8008720:	f100 33ff 	add.w	r3, r0, #4294967295
 8008724:	d100      	bne.n	8008728 <memcpy+0xc>
 8008726:	4770      	bx	lr
 8008728:	b510      	push	{r4, lr}
 800872a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800872e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008732:	4291      	cmp	r1, r2
 8008734:	d1f9      	bne.n	800872a <memcpy+0xe>
 8008736:	bd10      	pop	{r4, pc}

08008738 <memset>:
 8008738:	4402      	add	r2, r0
 800873a:	4603      	mov	r3, r0
 800873c:	4293      	cmp	r3, r2
 800873e:	d100      	bne.n	8008742 <memset+0xa>
 8008740:	4770      	bx	lr
 8008742:	f803 1b01 	strb.w	r1, [r3], #1
 8008746:	e7f9      	b.n	800873c <memset+0x4>

08008748 <_free_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4605      	mov	r5, r0
 800874c:	2900      	cmp	r1, #0
 800874e:	d045      	beq.n	80087dc <_free_r+0x94>
 8008750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008754:	1f0c      	subs	r4, r1, #4
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfb8      	it	lt
 800875a:	18e4      	addlt	r4, r4, r3
 800875c:	f003 f8ae 	bl	800b8bc <__malloc_lock>
 8008760:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <_free_r+0x98>)
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	4610      	mov	r0, r2
 8008766:	b933      	cbnz	r3, 8008776 <_free_r+0x2e>
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	6014      	str	r4, [r2, #0]
 800876c:	4628      	mov	r0, r5
 800876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008772:	f003 b8a9 	b.w	800b8c8 <__malloc_unlock>
 8008776:	42a3      	cmp	r3, r4
 8008778:	d90b      	bls.n	8008792 <_free_r+0x4a>
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	1862      	adds	r2, r4, r1
 800877e:	4293      	cmp	r3, r2
 8008780:	bf04      	itt	eq
 8008782:	681a      	ldreq	r2, [r3, #0]
 8008784:	685b      	ldreq	r3, [r3, #4]
 8008786:	6063      	str	r3, [r4, #4]
 8008788:	bf04      	itt	eq
 800878a:	1852      	addeq	r2, r2, r1
 800878c:	6022      	streq	r2, [r4, #0]
 800878e:	6004      	str	r4, [r0, #0]
 8008790:	e7ec      	b.n	800876c <_free_r+0x24>
 8008792:	461a      	mov	r2, r3
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b10b      	cbz	r3, 800879c <_free_r+0x54>
 8008798:	42a3      	cmp	r3, r4
 800879a:	d9fa      	bls.n	8008792 <_free_r+0x4a>
 800879c:	6811      	ldr	r1, [r2, #0]
 800879e:	1850      	adds	r0, r2, r1
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d10b      	bne.n	80087bc <_free_r+0x74>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	4401      	add	r1, r0
 80087a8:	1850      	adds	r0, r2, r1
 80087aa:	4283      	cmp	r3, r0
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	d1dd      	bne.n	800876c <_free_r+0x24>
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	6053      	str	r3, [r2, #4]
 80087b6:	4401      	add	r1, r0
 80087b8:	6011      	str	r1, [r2, #0]
 80087ba:	e7d7      	b.n	800876c <_free_r+0x24>
 80087bc:	d902      	bls.n	80087c4 <_free_r+0x7c>
 80087be:	230c      	movs	r3, #12
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	e7d3      	b.n	800876c <_free_r+0x24>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	1821      	adds	r1, r4, r0
 80087c8:	428b      	cmp	r3, r1
 80087ca:	bf04      	itt	eq
 80087cc:	6819      	ldreq	r1, [r3, #0]
 80087ce:	685b      	ldreq	r3, [r3, #4]
 80087d0:	6063      	str	r3, [r4, #4]
 80087d2:	bf04      	itt	eq
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	6054      	str	r4, [r2, #4]
 80087da:	e7c7      	b.n	800876c <_free_r+0x24>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	20000568 	.word	0x20000568

080087e4 <_malloc_r>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	1ccd      	adds	r5, r1, #3
 80087e8:	f025 0503 	bic.w	r5, r5, #3
 80087ec:	3508      	adds	r5, #8
 80087ee:	2d0c      	cmp	r5, #12
 80087f0:	bf38      	it	cc
 80087f2:	250c      	movcc	r5, #12
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	4606      	mov	r6, r0
 80087f8:	db01      	blt.n	80087fe <_malloc_r+0x1a>
 80087fa:	42a9      	cmp	r1, r5
 80087fc:	d903      	bls.n	8008806 <_malloc_r+0x22>
 80087fe:	230c      	movs	r3, #12
 8008800:	6033      	str	r3, [r6, #0]
 8008802:	2000      	movs	r0, #0
 8008804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008806:	f003 f859 	bl	800b8bc <__malloc_lock>
 800880a:	4921      	ldr	r1, [pc, #132]	; (8008890 <_malloc_r+0xac>)
 800880c:	680a      	ldr	r2, [r1, #0]
 800880e:	4614      	mov	r4, r2
 8008810:	b99c      	cbnz	r4, 800883a <_malloc_r+0x56>
 8008812:	4f20      	ldr	r7, [pc, #128]	; (8008894 <_malloc_r+0xb0>)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	b923      	cbnz	r3, 8008822 <_malloc_r+0x3e>
 8008818:	4621      	mov	r1, r4
 800881a:	4630      	mov	r0, r6
 800881c:	f000 fd26 	bl	800926c <_sbrk_r>
 8008820:	6038      	str	r0, [r7, #0]
 8008822:	4629      	mov	r1, r5
 8008824:	4630      	mov	r0, r6
 8008826:	f000 fd21 	bl	800926c <_sbrk_r>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d123      	bne.n	8008876 <_malloc_r+0x92>
 800882e:	230c      	movs	r3, #12
 8008830:	6033      	str	r3, [r6, #0]
 8008832:	4630      	mov	r0, r6
 8008834:	f003 f848 	bl	800b8c8 <__malloc_unlock>
 8008838:	e7e3      	b.n	8008802 <_malloc_r+0x1e>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	1b5b      	subs	r3, r3, r5
 800883e:	d417      	bmi.n	8008870 <_malloc_r+0x8c>
 8008840:	2b0b      	cmp	r3, #11
 8008842:	d903      	bls.n	800884c <_malloc_r+0x68>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	441c      	add	r4, r3
 8008848:	6025      	str	r5, [r4, #0]
 800884a:	e004      	b.n	8008856 <_malloc_r+0x72>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	42a2      	cmp	r2, r4
 8008850:	bf0c      	ite	eq
 8008852:	600b      	streq	r3, [r1, #0]
 8008854:	6053      	strne	r3, [r2, #4]
 8008856:	4630      	mov	r0, r6
 8008858:	f003 f836 	bl	800b8c8 <__malloc_unlock>
 800885c:	f104 000b 	add.w	r0, r4, #11
 8008860:	1d23      	adds	r3, r4, #4
 8008862:	f020 0007 	bic.w	r0, r0, #7
 8008866:	1ac2      	subs	r2, r0, r3
 8008868:	d0cc      	beq.n	8008804 <_malloc_r+0x20>
 800886a:	1a1b      	subs	r3, r3, r0
 800886c:	50a3      	str	r3, [r4, r2]
 800886e:	e7c9      	b.n	8008804 <_malloc_r+0x20>
 8008870:	4622      	mov	r2, r4
 8008872:	6864      	ldr	r4, [r4, #4]
 8008874:	e7cc      	b.n	8008810 <_malloc_r+0x2c>
 8008876:	1cc4      	adds	r4, r0, #3
 8008878:	f024 0403 	bic.w	r4, r4, #3
 800887c:	42a0      	cmp	r0, r4
 800887e:	d0e3      	beq.n	8008848 <_malloc_r+0x64>
 8008880:	1a21      	subs	r1, r4, r0
 8008882:	4630      	mov	r0, r6
 8008884:	f000 fcf2 	bl	800926c <_sbrk_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d1dd      	bne.n	8008848 <_malloc_r+0x64>
 800888c:	e7cf      	b.n	800882e <_malloc_r+0x4a>
 800888e:	bf00      	nop
 8008890:	20000568 	.word	0x20000568
 8008894:	2000056c 	.word	0x2000056c

08008898 <__cvt>:
 8008898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	461f      	mov	r7, r3
 80088a2:	4614      	mov	r4, r2
 80088a4:	bfb8      	it	lt
 80088a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80088aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80088ae:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80088b2:	bfb6      	itet	lt
 80088b4:	461f      	movlt	r7, r3
 80088b6:	2300      	movge	r3, #0
 80088b8:	232d      	movlt	r3, #45	; 0x2d
 80088ba:	7013      	strb	r3, [r2, #0]
 80088bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088be:	f023 0820 	bic.w	r8, r3, #32
 80088c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088c6:	d005      	beq.n	80088d4 <__cvt+0x3c>
 80088c8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088cc:	d100      	bne.n	80088d0 <__cvt+0x38>
 80088ce:	3501      	adds	r5, #1
 80088d0:	2302      	movs	r3, #2
 80088d2:	e000      	b.n	80088d6 <__cvt+0x3e>
 80088d4:	2303      	movs	r3, #3
 80088d6:	aa07      	add	r2, sp, #28
 80088d8:	9204      	str	r2, [sp, #16]
 80088da:	aa06      	add	r2, sp, #24
 80088dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088e0:	e9cd 3500 	strd	r3, r5, [sp]
 80088e4:	4622      	mov	r2, r4
 80088e6:	463b      	mov	r3, r7
 80088e8:	f001 fc62 	bl	800a1b0 <_dtoa_r>
 80088ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088f0:	4606      	mov	r6, r0
 80088f2:	d102      	bne.n	80088fa <__cvt+0x62>
 80088f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d522      	bpl.n	8008940 <__cvt+0xa8>
 80088fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088fe:	eb06 0905 	add.w	r9, r6, r5
 8008902:	d110      	bne.n	8008926 <__cvt+0x8e>
 8008904:	7833      	ldrb	r3, [r6, #0]
 8008906:	2b30      	cmp	r3, #48	; 0x30
 8008908:	d10a      	bne.n	8008920 <__cvt+0x88>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4620      	mov	r0, r4
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f8b1 	bl	8000a78 <__aeabi_dcmpeq>
 8008916:	b918      	cbnz	r0, 8008920 <__cvt+0x88>
 8008918:	f1c5 0501 	rsb	r5, r5, #1
 800891c:	f8ca 5000 	str.w	r5, [sl]
 8008920:	f8da 3000 	ldr.w	r3, [sl]
 8008924:	4499      	add	r9, r3
 8008926:	2200      	movs	r2, #0
 8008928:	2300      	movs	r3, #0
 800892a:	4620      	mov	r0, r4
 800892c:	4639      	mov	r1, r7
 800892e:	f7f8 f8a3 	bl	8000a78 <__aeabi_dcmpeq>
 8008932:	b108      	cbz	r0, 8008938 <__cvt+0xa0>
 8008934:	f8cd 901c 	str.w	r9, [sp, #28]
 8008938:	2230      	movs	r2, #48	; 0x30
 800893a:	9b07      	ldr	r3, [sp, #28]
 800893c:	454b      	cmp	r3, r9
 800893e:	d307      	bcc.n	8008950 <__cvt+0xb8>
 8008940:	9b07      	ldr	r3, [sp, #28]
 8008942:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008944:	1b9b      	subs	r3, r3, r6
 8008946:	4630      	mov	r0, r6
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	b008      	add	sp, #32
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	1c59      	adds	r1, r3, #1
 8008952:	9107      	str	r1, [sp, #28]
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e7f0      	b.n	800893a <__cvt+0xa2>

08008958 <__exponent>:
 8008958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895a:	4603      	mov	r3, r0
 800895c:	2900      	cmp	r1, #0
 800895e:	bfb8      	it	lt
 8008960:	4249      	neglt	r1, r1
 8008962:	f803 2b02 	strb.w	r2, [r3], #2
 8008966:	bfb4      	ite	lt
 8008968:	222d      	movlt	r2, #45	; 0x2d
 800896a:	222b      	movge	r2, #43	; 0x2b
 800896c:	2909      	cmp	r1, #9
 800896e:	7042      	strb	r2, [r0, #1]
 8008970:	dd2a      	ble.n	80089c8 <__exponent+0x70>
 8008972:	f10d 0407 	add.w	r4, sp, #7
 8008976:	46a4      	mov	ip, r4
 8008978:	270a      	movs	r7, #10
 800897a:	46a6      	mov	lr, r4
 800897c:	460a      	mov	r2, r1
 800897e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008982:	fb07 1516 	mls	r5, r7, r6, r1
 8008986:	3530      	adds	r5, #48	; 0x30
 8008988:	2a63      	cmp	r2, #99	; 0x63
 800898a:	f104 34ff 	add.w	r4, r4, #4294967295
 800898e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008992:	4631      	mov	r1, r6
 8008994:	dcf1      	bgt.n	800897a <__exponent+0x22>
 8008996:	3130      	adds	r1, #48	; 0x30
 8008998:	f1ae 0502 	sub.w	r5, lr, #2
 800899c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089a0:	1c44      	adds	r4, r0, #1
 80089a2:	4629      	mov	r1, r5
 80089a4:	4561      	cmp	r1, ip
 80089a6:	d30a      	bcc.n	80089be <__exponent+0x66>
 80089a8:	f10d 0209 	add.w	r2, sp, #9
 80089ac:	eba2 020e 	sub.w	r2, r2, lr
 80089b0:	4565      	cmp	r5, ip
 80089b2:	bf88      	it	hi
 80089b4:	2200      	movhi	r2, #0
 80089b6:	4413      	add	r3, r2
 80089b8:	1a18      	subs	r0, r3, r0
 80089ba:	b003      	add	sp, #12
 80089bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089c6:	e7ed      	b.n	80089a4 <__exponent+0x4c>
 80089c8:	2330      	movs	r3, #48	; 0x30
 80089ca:	3130      	adds	r1, #48	; 0x30
 80089cc:	7083      	strb	r3, [r0, #2]
 80089ce:	70c1      	strb	r1, [r0, #3]
 80089d0:	1d03      	adds	r3, r0, #4
 80089d2:	e7f1      	b.n	80089b8 <__exponent+0x60>

080089d4 <_printf_float>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	b091      	sub	sp, #68	; 0x44
 80089da:	460c      	mov	r4, r1
 80089dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089e0:	4616      	mov	r6, r2
 80089e2:	461f      	mov	r7, r3
 80089e4:	4605      	mov	r5, r0
 80089e6:	f002 feeb 	bl	800b7c0 <_localeconv_r>
 80089ea:	6803      	ldr	r3, [r0, #0]
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f7 fbc6 	bl	8000180 <strlen>
 80089f4:	2300      	movs	r3, #0
 80089f6:	930e      	str	r3, [sp, #56]	; 0x38
 80089f8:	f8d8 3000 	ldr.w	r3, [r8]
 80089fc:	900a      	str	r0, [sp, #40]	; 0x28
 80089fe:	3307      	adds	r3, #7
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	f103 0208 	add.w	r2, r3, #8
 8008a08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008a10:	f8c8 2000 	str.w	r2, [r8]
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a1c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008a20:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a28:	4b9c      	ldr	r3, [pc, #624]	; (8008c9c <_printf_float+0x2c8>)
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f7f8 f854 	bl	8000adc <__aeabi_dcmpun>
 8008a34:	bb70      	cbnz	r0, 8008a94 <_printf_float+0xc0>
 8008a36:	4b99      	ldr	r3, [pc, #612]	; (8008c9c <_printf_float+0x2c8>)
 8008a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7f8 f82e 	bl	8000aa0 <__aeabi_dcmple>
 8008a44:	bb30      	cbnz	r0, 8008a94 <_printf_float+0xc0>
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4651      	mov	r1, sl
 8008a4e:	f7f8 f81d 	bl	8000a8c <__aeabi_dcmplt>
 8008a52:	b110      	cbz	r0, 8008a5a <_printf_float+0x86>
 8008a54:	232d      	movs	r3, #45	; 0x2d
 8008a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5a:	4b91      	ldr	r3, [pc, #580]	; (8008ca0 <_printf_float+0x2cc>)
 8008a5c:	4891      	ldr	r0, [pc, #580]	; (8008ca4 <_printf_float+0x2d0>)
 8008a5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a62:	bf94      	ite	ls
 8008a64:	4698      	movls	r8, r3
 8008a66:	4680      	movhi	r8, r0
 8008a68:	2303      	movs	r3, #3
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	f02b 0304 	bic.w	r3, fp, #4
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	f04f 0a00 	mov.w	sl, #0
 8008a76:	9700      	str	r7, [sp, #0]
 8008a78:	4633      	mov	r3, r6
 8008a7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f9d2 	bl	8008e28 <_printf_common>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f040 808f 	bne.w	8008ba8 <_printf_float+0x1d4>
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	b011      	add	sp, #68	; 0x44
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a94:	4642      	mov	r2, r8
 8008a96:	4653      	mov	r3, sl
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4651      	mov	r1, sl
 8008a9c:	f7f8 f81e 	bl	8000adc <__aeabi_dcmpun>
 8008aa0:	b140      	cbz	r0, 8008ab4 <_printf_float+0xe0>
 8008aa2:	f1ba 0f00 	cmp.w	sl, #0
 8008aa6:	bfbc      	itt	lt
 8008aa8:	232d      	movlt	r3, #45	; 0x2d
 8008aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aae:	487e      	ldr	r0, [pc, #504]	; (8008ca8 <_printf_float+0x2d4>)
 8008ab0:	4b7e      	ldr	r3, [pc, #504]	; (8008cac <_printf_float+0x2d8>)
 8008ab2:	e7d4      	b.n	8008a5e <_printf_float+0x8a>
 8008ab4:	6863      	ldr	r3, [r4, #4]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008abc:	d142      	bne.n	8008b44 <_printf_float+0x170>
 8008abe:	2306      	movs	r3, #6
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	9206      	str	r2, [sp, #24]
 8008ac6:	aa0e      	add	r2, sp, #56	; 0x38
 8008ac8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008acc:	aa0d      	add	r2, sp, #52	; 0x34
 8008ace:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ad2:	9203      	str	r2, [sp, #12]
 8008ad4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008ad8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	4653      	mov	r3, sl
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	910b      	str	r1, [sp, #44]	; 0x2c
 8008aea:	f7ff fed5 	bl	8008898 <__cvt>
 8008aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008af0:	2947      	cmp	r1, #71	; 0x47
 8008af2:	4680      	mov	r8, r0
 8008af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008af6:	d108      	bne.n	8008b0a <_printf_float+0x136>
 8008af8:	1cc8      	adds	r0, r1, #3
 8008afa:	db02      	blt.n	8008b02 <_printf_float+0x12e>
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	4299      	cmp	r1, r3
 8008b00:	dd40      	ble.n	8008b84 <_printf_float+0x1b0>
 8008b02:	f1a9 0902 	sub.w	r9, r9, #2
 8008b06:	fa5f f989 	uxtb.w	r9, r9
 8008b0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b0e:	d81f      	bhi.n	8008b50 <_printf_float+0x17c>
 8008b10:	3901      	subs	r1, #1
 8008b12:	464a      	mov	r2, r9
 8008b14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b18:	910d      	str	r1, [sp, #52]	; 0x34
 8008b1a:	f7ff ff1d 	bl	8008958 <__exponent>
 8008b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b20:	1813      	adds	r3, r2, r0
 8008b22:	2a01      	cmp	r2, #1
 8008b24:	4682      	mov	sl, r0
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	dc02      	bgt.n	8008b30 <_printf_float+0x15c>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	07d2      	lsls	r2, r2, #31
 8008b2e:	d501      	bpl.n	8008b34 <_printf_float+0x160>
 8008b30:	3301      	adds	r3, #1
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d09c      	beq.n	8008a76 <_printf_float+0xa2>
 8008b3c:	232d      	movs	r3, #45	; 0x2d
 8008b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b42:	e798      	b.n	8008a76 <_printf_float+0xa2>
 8008b44:	2947      	cmp	r1, #71	; 0x47
 8008b46:	d1bc      	bne.n	8008ac2 <_printf_float+0xee>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ba      	bne.n	8008ac2 <_printf_float+0xee>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e7b7      	b.n	8008ac0 <_printf_float+0xec>
 8008b50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b54:	d118      	bne.n	8008b88 <_printf_float+0x1b4>
 8008b56:	2900      	cmp	r1, #0
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	dd0b      	ble.n	8008b74 <_printf_float+0x1a0>
 8008b5c:	6121      	str	r1, [r4, #16]
 8008b5e:	b913      	cbnz	r3, 8008b66 <_printf_float+0x192>
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	07d0      	lsls	r0, r2, #31
 8008b64:	d502      	bpl.n	8008b6c <_printf_float+0x198>
 8008b66:	3301      	adds	r3, #1
 8008b68:	440b      	add	r3, r1
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b6e:	f04f 0a00 	mov.w	sl, #0
 8008b72:	e7df      	b.n	8008b34 <_printf_float+0x160>
 8008b74:	b913      	cbnz	r3, 8008b7c <_printf_float+0x1a8>
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	07d2      	lsls	r2, r2, #31
 8008b7a:	d501      	bpl.n	8008b80 <_printf_float+0x1ac>
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	e7f4      	b.n	8008b6a <_printf_float+0x196>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7f2      	b.n	8008b6a <_printf_float+0x196>
 8008b84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	db05      	blt.n	8008b9a <_printf_float+0x1c6>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	6121      	str	r1, [r4, #16]
 8008b92:	07d8      	lsls	r0, r3, #31
 8008b94:	d5ea      	bpl.n	8008b6c <_printf_float+0x198>
 8008b96:	1c4b      	adds	r3, r1, #1
 8008b98:	e7e7      	b.n	8008b6a <_printf_float+0x196>
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	bfd4      	ite	le
 8008b9e:	f1c1 0202 	rsble	r2, r1, #2
 8008ba2:	2201      	movgt	r2, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	e7e0      	b.n	8008b6a <_printf_float+0x196>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	055a      	lsls	r2, r3, #21
 8008bac:	d407      	bmi.n	8008bbe <_printf_float+0x1ea>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d12b      	bne.n	8008c14 <_printf_float+0x240>
 8008bbc:	e765      	b.n	8008a8a <_printf_float+0xb6>
 8008bbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bc2:	f240 80dc 	bls.w	8008d7e <_printf_float+0x3aa>
 8008bc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f7f7 ff53 	bl	8000a78 <__aeabi_dcmpeq>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d033      	beq.n	8008c3e <_printf_float+0x26a>
 8008bd6:	4a36      	ldr	r2, [pc, #216]	; (8008cb0 <_printf_float+0x2dc>)
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f af52 	beq.w	8008a8a <_printf_float+0xb6>
 8008be6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bea:	429a      	cmp	r2, r3
 8008bec:	db02      	blt.n	8008bf4 <_printf_float+0x220>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	07d8      	lsls	r0, r3, #31
 8008bf2:	d50f      	bpl.n	8008c14 <_printf_float+0x240>
 8008bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af43 	beq.w	8008a8a <_printf_float+0xb6>
 8008c04:	f04f 0800 	mov.w	r8, #0
 8008c08:	f104 091a 	add.w	r9, r4, #26
 8008c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dc09      	bgt.n	8008c28 <_printf_float+0x254>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	079b      	lsls	r3, r3, #30
 8008c18:	f100 8101 	bmi.w	8008e1e <_printf_float+0x44a>
 8008c1c:	68e0      	ldr	r0, [r4, #12]
 8008c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c20:	4298      	cmp	r0, r3
 8008c22:	bfb8      	it	lt
 8008c24:	4618      	movlt	r0, r3
 8008c26:	e732      	b.n	8008a8e <_printf_float+0xba>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f af29 	beq.w	8008a8a <_printf_float+0xb6>
 8008c38:	f108 0801 	add.w	r8, r8, #1
 8008c3c:	e7e6      	b.n	8008c0c <_printf_float+0x238>
 8008c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc37      	bgt.n	8008cb4 <_printf_float+0x2e0>
 8008c44:	4a1a      	ldr	r2, [pc, #104]	; (8008cb0 <_printf_float+0x2dc>)
 8008c46:	2301      	movs	r3, #1
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f af1b 	beq.w	8008a8a <_printf_float+0xb6>
 8008c54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d102      	bne.n	8008c62 <_printf_float+0x28e>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d5d8      	bpl.n	8008c14 <_printf_float+0x240>
 8008c62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f43f af0c 	beq.w	8008a8a <_printf_float+0xb6>
 8008c72:	f04f 0900 	mov.w	r9, #0
 8008c76:	f104 0a1a 	add.w	sl, r4, #26
 8008c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c7c:	425b      	negs	r3, r3
 8008c7e:	454b      	cmp	r3, r9
 8008c80:	dc01      	bgt.n	8008c86 <_printf_float+0x2b2>
 8008c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c84:	e794      	b.n	8008bb0 <_printf_float+0x1dc>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4652      	mov	r2, sl
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	f43f aefa 	beq.w	8008a8a <_printf_float+0xb6>
 8008c96:	f109 0901 	add.w	r9, r9, #1
 8008c9a:	e7ee      	b.n	8008c7a <_printf_float+0x2a6>
 8008c9c:	7fefffff 	.word	0x7fefffff
 8008ca0:	0800cbac 	.word	0x0800cbac
 8008ca4:	0800cbb0 	.word	0x0800cbb0
 8008ca8:	0800cbb8 	.word	0x0800cbb8
 8008cac:	0800cbb4 	.word	0x0800cbb4
 8008cb0:	0800cbbc 	.word	0x0800cbbc
 8008cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	bfa8      	it	ge
 8008cbc:	461a      	movge	r2, r3
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	4691      	mov	r9, r2
 8008cc2:	dc37      	bgt.n	8008d34 <_printf_float+0x360>
 8008cc4:	f04f 0b00 	mov.w	fp, #0
 8008cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ccc:	f104 021a 	add.w	r2, r4, #26
 8008cd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008cd4:	ebaa 0309 	sub.w	r3, sl, r9
 8008cd8:	455b      	cmp	r3, fp
 8008cda:	dc33      	bgt.n	8008d44 <_printf_float+0x370>
 8008cdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	db3b      	blt.n	8008d5c <_printf_float+0x388>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	07da      	lsls	r2, r3, #31
 8008ce8:	d438      	bmi.n	8008d5c <_printf_float+0x388>
 8008cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cee:	eba2 030a 	sub.w	r3, r2, sl
 8008cf2:	eba2 0901 	sub.w	r9, r2, r1
 8008cf6:	4599      	cmp	r9, r3
 8008cf8:	bfa8      	it	ge
 8008cfa:	4699      	movge	r9, r3
 8008cfc:	f1b9 0f00 	cmp.w	r9, #0
 8008d00:	dc34      	bgt.n	8008d6c <_printf_float+0x398>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d0a:	f104 0a1a 	add.w	sl, r4, #26
 8008d0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	eba3 0309 	sub.w	r3, r3, r9
 8008d18:	4543      	cmp	r3, r8
 8008d1a:	f77f af7b 	ble.w	8008c14 <_printf_float+0x240>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4652      	mov	r2, sl
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f43f aeae 	beq.w	8008a8a <_printf_float+0xb6>
 8008d2e:	f108 0801 	add.w	r8, r8, #1
 8008d32:	e7ec      	b.n	8008d0e <_printf_float+0x33a>
 8008d34:	4613      	mov	r3, r2
 8008d36:	4631      	mov	r1, r6
 8008d38:	4642      	mov	r2, r8
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d1c0      	bne.n	8008cc4 <_printf_float+0x2f0>
 8008d42:	e6a2      	b.n	8008a8a <_printf_float+0xb6>
 8008d44:	2301      	movs	r3, #1
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d4c:	47b8      	blx	r7
 8008d4e:	3001      	adds	r0, #1
 8008d50:	f43f ae9b 	beq.w	8008a8a <_printf_float+0xb6>
 8008d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d56:	f10b 0b01 	add.w	fp, fp, #1
 8008d5a:	e7b9      	b.n	8008cd0 <_printf_float+0x2fc>
 8008d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	d1bf      	bne.n	8008cea <_printf_float+0x316>
 8008d6a:	e68e      	b.n	8008a8a <_printf_float+0xb6>
 8008d6c:	464b      	mov	r3, r9
 8008d6e:	eb08 020a 	add.w	r2, r8, sl
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	d1c2      	bne.n	8008d02 <_printf_float+0x32e>
 8008d7c:	e685      	b.n	8008a8a <_printf_float+0xb6>
 8008d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d80:	2a01      	cmp	r2, #1
 8008d82:	dc01      	bgt.n	8008d88 <_printf_float+0x3b4>
 8008d84:	07db      	lsls	r3, r3, #31
 8008d86:	d537      	bpl.n	8008df8 <_printf_float+0x424>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	f43f ae79 	beq.w	8008a8a <_printf_float+0xb6>
 8008d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4628      	mov	r0, r5
 8008da0:	47b8      	blx	r7
 8008da2:	3001      	adds	r0, #1
 8008da4:	f43f ae71 	beq.w	8008a8a <_printf_float+0xb6>
 8008da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	f7f7 fe62 	bl	8000a78 <__aeabi_dcmpeq>
 8008db4:	b9d8      	cbnz	r0, 8008dee <_printf_float+0x41a>
 8008db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db8:	f108 0201 	add.w	r2, r8, #1
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d10e      	bne.n	8008de6 <_printf_float+0x412>
 8008dc8:	e65f      	b.n	8008a8a <_printf_float+0xb6>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae58 	beq.w	8008a8a <_printf_float+0xb6>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4543      	cmp	r3, r8
 8008de4:	dcf1      	bgt.n	8008dca <_printf_float+0x3f6>
 8008de6:	4653      	mov	r3, sl
 8008de8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dec:	e6e1      	b.n	8008bb2 <_printf_float+0x1de>
 8008dee:	f04f 0800 	mov.w	r8, #0
 8008df2:	f104 091a 	add.w	r9, r4, #26
 8008df6:	e7f2      	b.n	8008dde <_printf_float+0x40a>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4642      	mov	r2, r8
 8008dfc:	e7df      	b.n	8008dbe <_printf_float+0x3ea>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	464a      	mov	r2, r9
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b8      	blx	r7
 8008e08:	3001      	adds	r0, #1
 8008e0a:	f43f ae3e 	beq.w	8008a8a <_printf_float+0xb6>
 8008e0e:	f108 0801 	add.w	r8, r8, #1
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e16:	1a5b      	subs	r3, r3, r1
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	dcf0      	bgt.n	8008dfe <_printf_float+0x42a>
 8008e1c:	e6fe      	b.n	8008c1c <_printf_float+0x248>
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	f104 0919 	add.w	r9, r4, #25
 8008e26:	e7f4      	b.n	8008e12 <_printf_float+0x43e>

08008e28 <_printf_common>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	4699      	mov	r9, r3
 8008e30:	688a      	ldr	r2, [r1, #8]
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e44:	4607      	mov	r7, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	b10a      	cbz	r2, 8008e4e <_printf_common+0x26>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	6833      	ldrmi	r3, [r6, #0]
 8008e56:	3302      	addmi	r3, #2
 8008e58:	6033      	strmi	r3, [r6, #0]
 8008e5a:	6825      	ldr	r5, [r4, #0]
 8008e5c:	f015 0506 	ands.w	r5, r5, #6
 8008e60:	d106      	bne.n	8008e70 <_printf_common+0x48>
 8008e62:	f104 0a19 	add.w	sl, r4, #25
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	6832      	ldr	r2, [r6, #0]
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dc26      	bgt.n	8008ebe <_printf_common+0x96>
 8008e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e74:	1e13      	subs	r3, r2, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	bf18      	it	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	0692      	lsls	r2, r2, #26
 8008e7e:	d42b      	bmi.n	8008ed8 <_printf_common+0xb0>
 8008e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d01e      	beq.n	8008ecc <_printf_common+0xa4>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	68e5      	ldr	r5, [r4, #12]
 8008e92:	6832      	ldr	r2, [r6, #0]
 8008e94:	f003 0306 	and.w	r3, r3, #6
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	bf08      	it	eq
 8008e9c:	1aad      	subeq	r5, r5, r2
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	bf0c      	ite	eq
 8008ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea8:	2500      	movne	r5, #0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	bfc4      	itt	gt
 8008eae:	1a9b      	subgt	r3, r3, r2
 8008eb0:	18ed      	addgt	r5, r5, r3
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	341a      	adds	r4, #26
 8008eb6:	42b5      	cmp	r5, r6
 8008eb8:	d11a      	bne.n	8008ef0 <_printf_common+0xc8>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e008      	b.n	8008ed0 <_printf_common+0xa8>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	47c0      	blx	r8
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d103      	bne.n	8008ed4 <_printf_common+0xac>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	e7c6      	b.n	8008e66 <_printf_common+0x3e>
 8008ed8:	18e1      	adds	r1, r4, r3
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	2030      	movs	r0, #48	; 0x30
 8008ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ee2:	4422      	add	r2, r4
 8008ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eec:	3302      	adds	r3, #2
 8008eee:	e7c7      	b.n	8008e80 <_printf_common+0x58>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d0e6      	beq.n	8008ecc <_printf_common+0xa4>
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7d9      	b.n	8008eb6 <_printf_common+0x8e>
	...

08008f04 <_printf_i>:
 8008f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	460c      	mov	r4, r1
 8008f0a:	4691      	mov	r9, r2
 8008f0c:	7e27      	ldrb	r7, [r4, #24]
 8008f0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f10:	2f78      	cmp	r7, #120	; 0x78
 8008f12:	4680      	mov	r8, r0
 8008f14:	469a      	mov	sl, r3
 8008f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f1a:	d807      	bhi.n	8008f2c <_printf_i+0x28>
 8008f1c:	2f62      	cmp	r7, #98	; 0x62
 8008f1e:	d80a      	bhi.n	8008f36 <_printf_i+0x32>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f000 80d8 	beq.w	80090d6 <_printf_i+0x1d2>
 8008f26:	2f58      	cmp	r7, #88	; 0x58
 8008f28:	f000 80a3 	beq.w	8009072 <_printf_i+0x16e>
 8008f2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f34:	e03a      	b.n	8008fac <_printf_i+0xa8>
 8008f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f3a:	2b15      	cmp	r3, #21
 8008f3c:	d8f6      	bhi.n	8008f2c <_printf_i+0x28>
 8008f3e:	a001      	add	r0, pc, #4	; (adr r0, 8008f44 <_printf_i+0x40>)
 8008f40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008f2d 	.word	0x08008f2d
 8008f50:	08008f2d 	.word	0x08008f2d
 8008f54:	08008f2d 	.word	0x08008f2d
 8008f58:	08008f2d 	.word	0x08008f2d
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008f2d 	.word	0x08008f2d
 8008f64:	08008f2d 	.word	0x08008f2d
 8008f68:	08008f2d 	.word	0x08008f2d
 8008f6c:	08008f2d 	.word	0x08008f2d
 8008f70:	080090bd 	.word	0x080090bd
 8008f74:	08008fe1 	.word	0x08008fe1
 8008f78:	0800909f 	.word	0x0800909f
 8008f7c:	08008f2d 	.word	0x08008f2d
 8008f80:	08008f2d 	.word	0x08008f2d
 8008f84:	080090df 	.word	0x080090df
 8008f88:	08008f2d 	.word	0x08008f2d
 8008f8c:	08008fe1 	.word	0x08008fe1
 8008f90:	08008f2d 	.word	0x08008f2d
 8008f94:	08008f2d 	.word	0x08008f2d
 8008f98:	080090a7 	.word	0x080090a7
 8008f9c:	680b      	ldr	r3, [r1, #0]
 8008f9e:	1d1a      	adds	r2, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	600a      	str	r2, [r1, #0]
 8008fa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0a3      	b.n	80090f8 <_printf_i+0x1f4>
 8008fb0:	6825      	ldr	r5, [r4, #0]
 8008fb2:	6808      	ldr	r0, [r1, #0]
 8008fb4:	062e      	lsls	r6, r5, #24
 8008fb6:	f100 0304 	add.w	r3, r0, #4
 8008fba:	d50a      	bpl.n	8008fd2 <_printf_i+0xce>
 8008fbc:	6805      	ldr	r5, [r0, #0]
 8008fbe:	600b      	str	r3, [r1, #0]
 8008fc0:	2d00      	cmp	r5, #0
 8008fc2:	da03      	bge.n	8008fcc <_printf_i+0xc8>
 8008fc4:	232d      	movs	r3, #45	; 0x2d
 8008fc6:	426d      	negs	r5, r5
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	485e      	ldr	r0, [pc, #376]	; (8009148 <_printf_i+0x244>)
 8008fce:	230a      	movs	r3, #10
 8008fd0:	e019      	b.n	8009006 <_printf_i+0x102>
 8008fd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fd6:	6805      	ldr	r5, [r0, #0]
 8008fd8:	600b      	str	r3, [r1, #0]
 8008fda:	bf18      	it	ne
 8008fdc:	b22d      	sxthne	r5, r5
 8008fde:	e7ef      	b.n	8008fc0 <_printf_i+0xbc>
 8008fe0:	680b      	ldr	r3, [r1, #0]
 8008fe2:	6825      	ldr	r5, [r4, #0]
 8008fe4:	1d18      	adds	r0, r3, #4
 8008fe6:	6008      	str	r0, [r1, #0]
 8008fe8:	0628      	lsls	r0, r5, #24
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0xec>
 8008fec:	681d      	ldr	r5, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0xf2>
 8008ff0:	0669      	lsls	r1, r5, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0xe8>
 8008ff4:	881d      	ldrh	r5, [r3, #0]
 8008ff6:	4854      	ldr	r0, [pc, #336]	; (8009148 <_printf_i+0x244>)
 8008ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2308      	moveq	r3, #8
 8008ffe:	230a      	movne	r3, #10
 8009000:	2100      	movs	r1, #0
 8009002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009006:	6866      	ldr	r6, [r4, #4]
 8009008:	60a6      	str	r6, [r4, #8]
 800900a:	2e00      	cmp	r6, #0
 800900c:	bfa2      	ittt	ge
 800900e:	6821      	ldrge	r1, [r4, #0]
 8009010:	f021 0104 	bicge.w	r1, r1, #4
 8009014:	6021      	strge	r1, [r4, #0]
 8009016:	b90d      	cbnz	r5, 800901c <_printf_i+0x118>
 8009018:	2e00      	cmp	r6, #0
 800901a:	d04d      	beq.n	80090b8 <_printf_i+0x1b4>
 800901c:	4616      	mov	r6, r2
 800901e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009022:	fb03 5711 	mls	r7, r3, r1, r5
 8009026:	5dc7      	ldrb	r7, [r0, r7]
 8009028:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800902c:	462f      	mov	r7, r5
 800902e:	42bb      	cmp	r3, r7
 8009030:	460d      	mov	r5, r1
 8009032:	d9f4      	bls.n	800901e <_printf_i+0x11a>
 8009034:	2b08      	cmp	r3, #8
 8009036:	d10b      	bne.n	8009050 <_printf_i+0x14c>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	07df      	lsls	r7, r3, #31
 800903c:	d508      	bpl.n	8009050 <_printf_i+0x14c>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	4299      	cmp	r1, r3
 8009044:	bfde      	ittt	le
 8009046:	2330      	movle	r3, #48	; 0x30
 8009048:	f806 3c01 	strble.w	r3, [r6, #-1]
 800904c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009050:	1b92      	subs	r2, r2, r6
 8009052:	6122      	str	r2, [r4, #16]
 8009054:	f8cd a000 	str.w	sl, [sp]
 8009058:	464b      	mov	r3, r9
 800905a:	aa03      	add	r2, sp, #12
 800905c:	4621      	mov	r1, r4
 800905e:	4640      	mov	r0, r8
 8009060:	f7ff fee2 	bl	8008e28 <_printf_common>
 8009064:	3001      	adds	r0, #1
 8009066:	d14c      	bne.n	8009102 <_printf_i+0x1fe>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	b004      	add	sp, #16
 800906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009072:	4835      	ldr	r0, [pc, #212]	; (8009148 <_printf_i+0x244>)
 8009074:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	680e      	ldr	r6, [r1, #0]
 800907c:	061f      	lsls	r7, r3, #24
 800907e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009082:	600e      	str	r6, [r1, #0]
 8009084:	d514      	bpl.n	80090b0 <_printf_i+0x1ac>
 8009086:	07d9      	lsls	r1, r3, #31
 8009088:	bf44      	itt	mi
 800908a:	f043 0320 	orrmi.w	r3, r3, #32
 800908e:	6023      	strmi	r3, [r4, #0]
 8009090:	b91d      	cbnz	r5, 800909a <_printf_i+0x196>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	f023 0320 	bic.w	r3, r3, #32
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	2310      	movs	r3, #16
 800909c:	e7b0      	b.n	8009000 <_printf_i+0xfc>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f043 0320 	orr.w	r3, r3, #32
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	2378      	movs	r3, #120	; 0x78
 80090a8:	4828      	ldr	r0, [pc, #160]	; (800914c <_printf_i+0x248>)
 80090aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ae:	e7e3      	b.n	8009078 <_printf_i+0x174>
 80090b0:	065e      	lsls	r6, r3, #25
 80090b2:	bf48      	it	mi
 80090b4:	b2ad      	uxthmi	r5, r5
 80090b6:	e7e6      	b.n	8009086 <_printf_i+0x182>
 80090b8:	4616      	mov	r6, r2
 80090ba:	e7bb      	b.n	8009034 <_printf_i+0x130>
 80090bc:	680b      	ldr	r3, [r1, #0]
 80090be:	6826      	ldr	r6, [r4, #0]
 80090c0:	6960      	ldr	r0, [r4, #20]
 80090c2:	1d1d      	adds	r5, r3, #4
 80090c4:	600d      	str	r5, [r1, #0]
 80090c6:	0635      	lsls	r5, r6, #24
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	d501      	bpl.n	80090d0 <_printf_i+0x1cc>
 80090cc:	6018      	str	r0, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <_printf_i+0x1d2>
 80090d0:	0671      	lsls	r1, r6, #25
 80090d2:	d5fb      	bpl.n	80090cc <_printf_i+0x1c8>
 80090d4:	8018      	strh	r0, [r3, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	4616      	mov	r6, r2
 80090dc:	e7ba      	b.n	8009054 <_printf_i+0x150>
 80090de:	680b      	ldr	r3, [r1, #0]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	600a      	str	r2, [r1, #0]
 80090e4:	681e      	ldr	r6, [r3, #0]
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	2100      	movs	r1, #0
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7f7 f850 	bl	8000190 <memchr>
 80090f0:	b108      	cbz	r0, 80090f6 <_printf_i+0x1f2>
 80090f2:	1b80      	subs	r0, r0, r6
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	2300      	movs	r3, #0
 80090fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009100:	e7a8      	b.n	8009054 <_printf_i+0x150>
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	4632      	mov	r2, r6
 8009106:	4649      	mov	r1, r9
 8009108:	4640      	mov	r0, r8
 800910a:	47d0      	blx	sl
 800910c:	3001      	adds	r0, #1
 800910e:	d0ab      	beq.n	8009068 <_printf_i+0x164>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	079b      	lsls	r3, r3, #30
 8009114:	d413      	bmi.n	800913e <_printf_i+0x23a>
 8009116:	68e0      	ldr	r0, [r4, #12]
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	4298      	cmp	r0, r3
 800911c:	bfb8      	it	lt
 800911e:	4618      	movlt	r0, r3
 8009120:	e7a4      	b.n	800906c <_printf_i+0x168>
 8009122:	2301      	movs	r3, #1
 8009124:	4632      	mov	r2, r6
 8009126:	4649      	mov	r1, r9
 8009128:	4640      	mov	r0, r8
 800912a:	47d0      	blx	sl
 800912c:	3001      	adds	r0, #1
 800912e:	d09b      	beq.n	8009068 <_printf_i+0x164>
 8009130:	3501      	adds	r5, #1
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	9903      	ldr	r1, [sp, #12]
 8009136:	1a5b      	subs	r3, r3, r1
 8009138:	42ab      	cmp	r3, r5
 800913a:	dcf2      	bgt.n	8009122 <_printf_i+0x21e>
 800913c:	e7eb      	b.n	8009116 <_printf_i+0x212>
 800913e:	2500      	movs	r5, #0
 8009140:	f104 0619 	add.w	r6, r4, #25
 8009144:	e7f5      	b.n	8009132 <_printf_i+0x22e>
 8009146:	bf00      	nop
 8009148:	0800cbbe 	.word	0x0800cbbe
 800914c:	0800cbcf 	.word	0x0800cbcf

08009150 <iprintf>:
 8009150:	b40f      	push	{r0, r1, r2, r3}
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <iprintf+0x2c>)
 8009154:	b513      	push	{r0, r1, r4, lr}
 8009156:	681c      	ldr	r4, [r3, #0]
 8009158:	b124      	cbz	r4, 8009164 <iprintf+0x14>
 800915a:	69a3      	ldr	r3, [r4, #24]
 800915c:	b913      	cbnz	r3, 8009164 <iprintf+0x14>
 800915e:	4620      	mov	r0, r4
 8009160:	f001 ff2e 	bl	800afc0 <__sinit>
 8009164:	ab05      	add	r3, sp, #20
 8009166:	9a04      	ldr	r2, [sp, #16]
 8009168:	68a1      	ldr	r1, [r4, #8]
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	4620      	mov	r0, r4
 800916e:	f003 f89b 	bl	800c2a8 <_vfiprintf_r>
 8009172:	b002      	add	sp, #8
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	b004      	add	sp, #16
 800917a:	4770      	bx	lr
 800917c:	2000000c 	.word	0x2000000c

08009180 <_puts_r>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	460e      	mov	r6, r1
 8009184:	4605      	mov	r5, r0
 8009186:	b118      	cbz	r0, 8009190 <_puts_r+0x10>
 8009188:	6983      	ldr	r3, [r0, #24]
 800918a:	b90b      	cbnz	r3, 8009190 <_puts_r+0x10>
 800918c:	f001 ff18 	bl	800afc0 <__sinit>
 8009190:	69ab      	ldr	r3, [r5, #24]
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	b913      	cbnz	r3, 800919c <_puts_r+0x1c>
 8009196:	4628      	mov	r0, r5
 8009198:	f001 ff12 	bl	800afc0 <__sinit>
 800919c:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <_puts_r+0xd0>)
 800919e:	429c      	cmp	r4, r3
 80091a0:	d120      	bne.n	80091e4 <_puts_r+0x64>
 80091a2:	686c      	ldr	r4, [r5, #4]
 80091a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091a6:	07db      	lsls	r3, r3, #31
 80091a8:	d405      	bmi.n	80091b6 <_puts_r+0x36>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	0598      	lsls	r0, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_puts_r+0x36>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f002 fb0a 	bl	800b7ca <__retarget_lock_acquire_recursive>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	0719      	lsls	r1, r3, #28
 80091ba:	d51d      	bpl.n	80091f8 <_puts_r+0x78>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b1db      	cbz	r3, 80091f8 <_puts_r+0x78>
 80091c0:	3e01      	subs	r6, #1
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	bb39      	cbnz	r1, 800921e <_puts_r+0x9e>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da38      	bge.n	8009244 <_puts_r+0xc4>
 80091d2:	4622      	mov	r2, r4
 80091d4:	210a      	movs	r1, #10
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 fe9e 	bl	8009f18 <__swbuf_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d011      	beq.n	8009204 <_puts_r+0x84>
 80091e0:	250a      	movs	r5, #10
 80091e2:	e011      	b.n	8009208 <_puts_r+0x88>
 80091e4:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <_puts_r+0xd4>)
 80091e6:	429c      	cmp	r4, r3
 80091e8:	d101      	bne.n	80091ee <_puts_r+0x6e>
 80091ea:	68ac      	ldr	r4, [r5, #8]
 80091ec:	e7da      	b.n	80091a4 <_puts_r+0x24>
 80091ee:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <_puts_r+0xd8>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	bf08      	it	eq
 80091f4:	68ec      	ldreq	r4, [r5, #12]
 80091f6:	e7d5      	b.n	80091a4 <_puts_r+0x24>
 80091f8:	4621      	mov	r1, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 fede 	bl	8009fbc <__swsetup_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	d0dd      	beq.n	80091c0 <_puts_r+0x40>
 8009204:	f04f 35ff 	mov.w	r5, #4294967295
 8009208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d405      	bmi.n	800921a <_puts_r+0x9a>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	059b      	lsls	r3, r3, #22
 8009212:	d402      	bmi.n	800921a <_puts_r+0x9a>
 8009214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009216:	f002 fad9 	bl	800b7cc <__retarget_lock_release_recursive>
 800921a:	4628      	mov	r0, r5
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	2b00      	cmp	r3, #0
 8009220:	da04      	bge.n	800922c <_puts_r+0xac>
 8009222:	69a2      	ldr	r2, [r4, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	dc06      	bgt.n	8009236 <_puts_r+0xb6>
 8009228:	290a      	cmp	r1, #10
 800922a:	d004      	beq.n	8009236 <_puts_r+0xb6>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	6022      	str	r2, [r4, #0]
 8009232:	7019      	strb	r1, [r3, #0]
 8009234:	e7c5      	b.n	80091c2 <_puts_r+0x42>
 8009236:	4622      	mov	r2, r4
 8009238:	4628      	mov	r0, r5
 800923a:	f000 fe6d 	bl	8009f18 <__swbuf_r>
 800923e:	3001      	adds	r0, #1
 8009240:	d1bf      	bne.n	80091c2 <_puts_r+0x42>
 8009242:	e7df      	b.n	8009204 <_puts_r+0x84>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	250a      	movs	r5, #10
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	701d      	strb	r5, [r3, #0]
 800924e:	e7db      	b.n	8009208 <_puts_r+0x88>
 8009250:	0800cce4 	.word	0x0800cce4
 8009254:	0800cd04 	.word	0x0800cd04
 8009258:	0800ccc4 	.word	0x0800ccc4

0800925c <puts>:
 800925c:	4b02      	ldr	r3, [pc, #8]	; (8009268 <puts+0xc>)
 800925e:	4601      	mov	r1, r0
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f7ff bf8d 	b.w	8009180 <_puts_r>
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c

0800926c <_sbrk_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d06      	ldr	r5, [pc, #24]	; (8009288 <_sbrk_r+0x1c>)
 8009270:	2300      	movs	r3, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7f8 fd3a 	bl	8001cf0 <_sbrk>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_sbrk_r+0x1a>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_sbrk_r+0x1a>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	200006f8 	.word	0x200006f8

0800928c <strncmp>:
 800928c:	b510      	push	{r4, lr}
 800928e:	b16a      	cbz	r2, 80092ac <strncmp+0x20>
 8009290:	3901      	subs	r1, #1
 8009292:	1884      	adds	r4, r0, r2
 8009294:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800929c:	4293      	cmp	r3, r2
 800929e:	d103      	bne.n	80092a8 <strncmp+0x1c>
 80092a0:	42a0      	cmp	r0, r4
 80092a2:	d001      	beq.n	80092a8 <strncmp+0x1c>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1f5      	bne.n	8009294 <strncmp+0x8>
 80092a8:	1a98      	subs	r0, r3, r2
 80092aa:	bd10      	pop	{r4, pc}
 80092ac:	4610      	mov	r0, r2
 80092ae:	e7fc      	b.n	80092aa <strncmp+0x1e>

080092b0 <strncpy>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	3901      	subs	r1, #1
 80092b4:	4603      	mov	r3, r0
 80092b6:	b132      	cbz	r2, 80092c6 <strncpy+0x16>
 80092b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092bc:	f803 4b01 	strb.w	r4, [r3], #1
 80092c0:	3a01      	subs	r2, #1
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d1f7      	bne.n	80092b6 <strncpy+0x6>
 80092c6:	441a      	add	r2, r3
 80092c8:	2100      	movs	r1, #0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d100      	bne.n	80092d0 <strncpy+0x20>
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	f803 1b01 	strb.w	r1, [r3], #1
 80092d4:	e7f9      	b.n	80092ca <strncpy+0x1a>

080092d6 <sulp>:
 80092d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	460f      	mov	r7, r1
 80092dc:	4690      	mov	r8, r2
 80092de:	f002 fe65 	bl	800bfac <__ulp>
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	d011      	beq.n	8009310 <sulp+0x3a>
 80092ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80092f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd0b      	ble.n	8009310 <sulp+0x3a>
 80092f8:	051b      	lsls	r3, r3, #20
 80092fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092fe:	2400      	movs	r4, #0
 8009300:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	f7f7 f94e 	bl	80005a8 <__aeabi_dmul>
 800930c:	4604      	mov	r4, r0
 800930e:	460d      	mov	r5, r1
 8009310:	4620      	mov	r0, r4
 8009312:	4629      	mov	r1, r5
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009318 <_strtod_l>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	b0a1      	sub	sp, #132	; 0x84
 800931e:	469b      	mov	fp, r3
 8009320:	2300      	movs	r3, #0
 8009322:	931c      	str	r3, [sp, #112]	; 0x70
 8009324:	4ba1      	ldr	r3, [pc, #644]	; (80095ac <_strtod_l+0x294>)
 8009326:	9217      	str	r2, [sp, #92]	; 0x5c
 8009328:	681f      	ldr	r7, [r3, #0]
 800932a:	4682      	mov	sl, r0
 800932c:	4638      	mov	r0, r7
 800932e:	460e      	mov	r6, r1
 8009330:	f7f6 ff26 	bl	8000180 <strlen>
 8009334:	f04f 0800 	mov.w	r8, #0
 8009338:	4604      	mov	r4, r0
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	961b      	str	r6, [sp, #108]	; 0x6c
 8009340:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	2a2b      	cmp	r2, #43	; 0x2b
 8009346:	d04c      	beq.n	80093e2 <_strtod_l+0xca>
 8009348:	d83a      	bhi.n	80093c0 <_strtod_l+0xa8>
 800934a:	2a0d      	cmp	r2, #13
 800934c:	d833      	bhi.n	80093b6 <_strtod_l+0x9e>
 800934e:	2a08      	cmp	r2, #8
 8009350:	d833      	bhi.n	80093ba <_strtod_l+0xa2>
 8009352:	2a00      	cmp	r2, #0
 8009354:	d03d      	beq.n	80093d2 <_strtod_l+0xba>
 8009356:	2300      	movs	r3, #0
 8009358:	930c      	str	r3, [sp, #48]	; 0x30
 800935a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800935c:	782b      	ldrb	r3, [r5, #0]
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	f040 80af 	bne.w	80094c2 <_strtod_l+0x1aa>
 8009364:	786b      	ldrb	r3, [r5, #1]
 8009366:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800936a:	2b58      	cmp	r3, #88	; 0x58
 800936c:	d16c      	bne.n	8009448 <_strtod_l+0x130>
 800936e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	ab1c      	add	r3, sp, #112	; 0x70
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4a8e      	ldr	r2, [pc, #568]	; (80095b0 <_strtod_l+0x298>)
 8009378:	f8cd b008 	str.w	fp, [sp, #8]
 800937c:	ab1d      	add	r3, sp, #116	; 0x74
 800937e:	a91b      	add	r1, sp, #108	; 0x6c
 8009380:	4650      	mov	r0, sl
 8009382:	f001 ff21 	bl	800b1c8 <__gethex>
 8009386:	f010 0607 	ands.w	r6, r0, #7
 800938a:	4604      	mov	r4, r0
 800938c:	d005      	beq.n	800939a <_strtod_l+0x82>
 800938e:	2e06      	cmp	r6, #6
 8009390:	d129      	bne.n	80093e6 <_strtod_l+0xce>
 8009392:	3501      	adds	r5, #1
 8009394:	2300      	movs	r3, #0
 8009396:	951b      	str	r5, [sp, #108]	; 0x6c
 8009398:	930c      	str	r3, [sp, #48]	; 0x30
 800939a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8596 	bne.w	8009ece <_strtod_l+0xbb6>
 80093a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a4:	b1d3      	cbz	r3, 80093dc <_strtod_l+0xc4>
 80093a6:	4642      	mov	r2, r8
 80093a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	b021      	add	sp, #132	; 0x84
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	2a20      	cmp	r2, #32
 80093b8:	d1cd      	bne.n	8009356 <_strtod_l+0x3e>
 80093ba:	3301      	adds	r3, #1
 80093bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80093be:	e7bf      	b.n	8009340 <_strtod_l+0x28>
 80093c0:	2a2d      	cmp	r2, #45	; 0x2d
 80093c2:	d1c8      	bne.n	8009356 <_strtod_l+0x3e>
 80093c4:	2201      	movs	r2, #1
 80093c6:	920c      	str	r2, [sp, #48]	; 0x30
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1c3      	bne.n	800935a <_strtod_l+0x42>
 80093d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 8577 	bne.w	8009eca <_strtod_l+0xbb2>
 80093dc:	4642      	mov	r2, r8
 80093de:	464b      	mov	r3, r9
 80093e0:	e7e4      	b.n	80093ac <_strtod_l+0x94>
 80093e2:	2200      	movs	r2, #0
 80093e4:	e7ef      	b.n	80093c6 <_strtod_l+0xae>
 80093e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093e8:	b13a      	cbz	r2, 80093fa <_strtod_l+0xe2>
 80093ea:	2135      	movs	r1, #53	; 0x35
 80093ec:	a81e      	add	r0, sp, #120	; 0x78
 80093ee:	f002 fee1 	bl	800c1b4 <__copybits>
 80093f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093f4:	4650      	mov	r0, sl
 80093f6:	f002 faad 	bl	800b954 <_Bfree>
 80093fa:	3e01      	subs	r6, #1
 80093fc:	2e05      	cmp	r6, #5
 80093fe:	d807      	bhi.n	8009410 <_strtod_l+0xf8>
 8009400:	e8df f006 	tbb	[pc, r6]
 8009404:	1d180b0e 	.word	0x1d180b0e
 8009408:	030e      	.short	0x030e
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	46c8      	mov	r8, r9
 8009410:	0721      	lsls	r1, r4, #28
 8009412:	d5c2      	bpl.n	800939a <_strtod_l+0x82>
 8009414:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009418:	e7bf      	b.n	800939a <_strtod_l+0x82>
 800941a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800941e:	e7f7      	b.n	8009410 <_strtod_l+0xf8>
 8009420:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009424:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009426:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800942a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800942e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009432:	e7ed      	b.n	8009410 <_strtod_l+0xf8>
 8009434:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095b4 <_strtod_l+0x29c>
 8009438:	f04f 0800 	mov.w	r8, #0
 800943c:	e7e8      	b.n	8009410 <_strtod_l+0xf8>
 800943e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009442:	f04f 38ff 	mov.w	r8, #4294967295
 8009446:	e7e3      	b.n	8009410 <_strtod_l+0xf8>
 8009448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	921b      	str	r2, [sp, #108]	; 0x6c
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b30      	cmp	r3, #48	; 0x30
 8009452:	d0f9      	beq.n	8009448 <_strtod_l+0x130>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0a0      	beq.n	800939a <_strtod_l+0x82>
 8009458:	2301      	movs	r3, #1
 800945a:	9307      	str	r3, [sp, #28]
 800945c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800945e:	9308      	str	r3, [sp, #32]
 8009460:	2300      	movs	r3, #0
 8009462:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009466:	469b      	mov	fp, r3
 8009468:	220a      	movs	r2, #10
 800946a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800946c:	7805      	ldrb	r5, [r0, #0]
 800946e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009472:	b2d9      	uxtb	r1, r3
 8009474:	2909      	cmp	r1, #9
 8009476:	d926      	bls.n	80094c6 <_strtod_l+0x1ae>
 8009478:	4622      	mov	r2, r4
 800947a:	4639      	mov	r1, r7
 800947c:	f7ff ff06 	bl	800928c <strncmp>
 8009480:	2800      	cmp	r0, #0
 8009482:	d032      	beq.n	80094ea <_strtod_l+0x1d2>
 8009484:	2000      	movs	r0, #0
 8009486:	462b      	mov	r3, r5
 8009488:	465c      	mov	r4, fp
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	4602      	mov	r2, r0
 800948e:	2b65      	cmp	r3, #101	; 0x65
 8009490:	d001      	beq.n	8009496 <_strtod_l+0x17e>
 8009492:	2b45      	cmp	r3, #69	; 0x45
 8009494:	d113      	bne.n	80094be <_strtod_l+0x1a6>
 8009496:	b91c      	cbnz	r4, 80094a0 <_strtod_l+0x188>
 8009498:	9b07      	ldr	r3, [sp, #28]
 800949a:	4303      	orrs	r3, r0
 800949c:	d099      	beq.n	80093d2 <_strtod_l+0xba>
 800949e:	2400      	movs	r4, #0
 80094a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80094a2:	1c73      	adds	r3, r6, #1
 80094a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80094a6:	7873      	ldrb	r3, [r6, #1]
 80094a8:	2b2b      	cmp	r3, #43	; 0x2b
 80094aa:	d078      	beq.n	800959e <_strtod_l+0x286>
 80094ac:	2b2d      	cmp	r3, #45	; 0x2d
 80094ae:	d07b      	beq.n	80095a8 <_strtod_l+0x290>
 80094b0:	2700      	movs	r7, #0
 80094b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094b6:	2909      	cmp	r1, #9
 80094b8:	f240 8082 	bls.w	80095c0 <_strtod_l+0x2a8>
 80094bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80094be:	2500      	movs	r5, #0
 80094c0:	e09e      	b.n	8009600 <_strtod_l+0x2e8>
 80094c2:	2300      	movs	r3, #0
 80094c4:	e7c9      	b.n	800945a <_strtod_l+0x142>
 80094c6:	f1bb 0f08 	cmp.w	fp, #8
 80094ca:	bfd5      	itete	le
 80094cc:	9906      	ldrle	r1, [sp, #24]
 80094ce:	9905      	ldrgt	r1, [sp, #20]
 80094d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80094d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80094d8:	f100 0001 	add.w	r0, r0, #1
 80094dc:	bfd4      	ite	le
 80094de:	9306      	strle	r3, [sp, #24]
 80094e0:	9305      	strgt	r3, [sp, #20]
 80094e2:	f10b 0b01 	add.w	fp, fp, #1
 80094e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80094e8:	e7bf      	b.n	800946a <_strtod_l+0x152>
 80094ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ec:	191a      	adds	r2, r3, r4
 80094ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80094f0:	5d1b      	ldrb	r3, [r3, r4]
 80094f2:	f1bb 0f00 	cmp.w	fp, #0
 80094f6:	d036      	beq.n	8009566 <_strtod_l+0x24e>
 80094f8:	9004      	str	r0, [sp, #16]
 80094fa:	465c      	mov	r4, fp
 80094fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009500:	2a09      	cmp	r2, #9
 8009502:	d912      	bls.n	800952a <_strtod_l+0x212>
 8009504:	2201      	movs	r2, #1
 8009506:	e7c2      	b.n	800948e <_strtod_l+0x176>
 8009508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	921b      	str	r2, [sp, #108]	; 0x6c
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	3001      	adds	r0, #1
 8009512:	2b30      	cmp	r3, #48	; 0x30
 8009514:	d0f8      	beq.n	8009508 <_strtod_l+0x1f0>
 8009516:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800951a:	2a08      	cmp	r2, #8
 800951c:	f200 84dc 	bhi.w	8009ed8 <_strtod_l+0xbc0>
 8009520:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009522:	9004      	str	r0, [sp, #16]
 8009524:	2000      	movs	r0, #0
 8009526:	9208      	str	r2, [sp, #32]
 8009528:	4604      	mov	r4, r0
 800952a:	3b30      	subs	r3, #48	; 0x30
 800952c:	f100 0201 	add.w	r2, r0, #1
 8009530:	d013      	beq.n	800955a <_strtod_l+0x242>
 8009532:	9904      	ldr	r1, [sp, #16]
 8009534:	4411      	add	r1, r2
 8009536:	9104      	str	r1, [sp, #16]
 8009538:	4622      	mov	r2, r4
 800953a:	1905      	adds	r5, r0, r4
 800953c:	210a      	movs	r1, #10
 800953e:	42aa      	cmp	r2, r5
 8009540:	d113      	bne.n	800956a <_strtod_l+0x252>
 8009542:	1822      	adds	r2, r4, r0
 8009544:	2a08      	cmp	r2, #8
 8009546:	f104 0401 	add.w	r4, r4, #1
 800954a:	4404      	add	r4, r0
 800954c:	dc1b      	bgt.n	8009586 <_strtod_l+0x26e>
 800954e:	9906      	ldr	r1, [sp, #24]
 8009550:	220a      	movs	r2, #10
 8009552:	fb02 3301 	mla	r3, r2, r1, r3
 8009556:	9306      	str	r3, [sp, #24]
 8009558:	2200      	movs	r2, #0
 800955a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955c:	1c59      	adds	r1, r3, #1
 800955e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	4610      	mov	r0, r2
 8009564:	e7ca      	b.n	80094fc <_strtod_l+0x1e4>
 8009566:	4658      	mov	r0, fp
 8009568:	e7d3      	b.n	8009512 <_strtod_l+0x1fa>
 800956a:	2a08      	cmp	r2, #8
 800956c:	dc04      	bgt.n	8009578 <_strtod_l+0x260>
 800956e:	9f06      	ldr	r7, [sp, #24]
 8009570:	434f      	muls	r7, r1
 8009572:	9706      	str	r7, [sp, #24]
 8009574:	3201      	adds	r2, #1
 8009576:	e7e2      	b.n	800953e <_strtod_l+0x226>
 8009578:	1c57      	adds	r7, r2, #1
 800957a:	2f10      	cmp	r7, #16
 800957c:	bfde      	ittt	le
 800957e:	9f05      	ldrle	r7, [sp, #20]
 8009580:	434f      	mulle	r7, r1
 8009582:	9705      	strle	r7, [sp, #20]
 8009584:	e7f6      	b.n	8009574 <_strtod_l+0x25c>
 8009586:	2c10      	cmp	r4, #16
 8009588:	bfdf      	itttt	le
 800958a:	9905      	ldrle	r1, [sp, #20]
 800958c:	220a      	movle	r2, #10
 800958e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009592:	9305      	strle	r3, [sp, #20]
 8009594:	e7e0      	b.n	8009558 <_strtod_l+0x240>
 8009596:	2300      	movs	r3, #0
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	2201      	movs	r2, #1
 800959c:	e77c      	b.n	8009498 <_strtod_l+0x180>
 800959e:	2700      	movs	r7, #0
 80095a0:	1cb3      	adds	r3, r6, #2
 80095a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80095a4:	78b3      	ldrb	r3, [r6, #2]
 80095a6:	e784      	b.n	80094b2 <_strtod_l+0x19a>
 80095a8:	2701      	movs	r7, #1
 80095aa:	e7f9      	b.n	80095a0 <_strtod_l+0x288>
 80095ac:	0800cd90 	.word	0x0800cd90
 80095b0:	0800cbe0 	.word	0x0800cbe0
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ba:	1c59      	adds	r1, r3, #1
 80095bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b30      	cmp	r3, #48	; 0x30
 80095c2:	d0f9      	beq.n	80095b8 <_strtod_l+0x2a0>
 80095c4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80095c8:	2908      	cmp	r1, #8
 80095ca:	f63f af78 	bhi.w	80094be <_strtod_l+0x1a6>
 80095ce:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80095d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	f04f 0e0a 	mov.w	lr, #10
 80095da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095dc:	1c59      	adds	r1, r3, #1
 80095de:	911b      	str	r1, [sp, #108]	; 0x6c
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80095e6:	2d09      	cmp	r5, #9
 80095e8:	d935      	bls.n	8009656 <_strtod_l+0x33e>
 80095ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095ec:	1b49      	subs	r1, r1, r5
 80095ee:	2908      	cmp	r1, #8
 80095f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80095f4:	dc02      	bgt.n	80095fc <_strtod_l+0x2e4>
 80095f6:	4565      	cmp	r5, ip
 80095f8:	bfa8      	it	ge
 80095fa:	4665      	movge	r5, ip
 80095fc:	b107      	cbz	r7, 8009600 <_strtod_l+0x2e8>
 80095fe:	426d      	negs	r5, r5
 8009600:	2c00      	cmp	r4, #0
 8009602:	d14c      	bne.n	800969e <_strtod_l+0x386>
 8009604:	9907      	ldr	r1, [sp, #28]
 8009606:	4301      	orrs	r1, r0
 8009608:	f47f aec7 	bne.w	800939a <_strtod_l+0x82>
 800960c:	2a00      	cmp	r2, #0
 800960e:	f47f aee0 	bne.w	80093d2 <_strtod_l+0xba>
 8009612:	2b69      	cmp	r3, #105	; 0x69
 8009614:	d026      	beq.n	8009664 <_strtod_l+0x34c>
 8009616:	dc23      	bgt.n	8009660 <_strtod_l+0x348>
 8009618:	2b49      	cmp	r3, #73	; 0x49
 800961a:	d023      	beq.n	8009664 <_strtod_l+0x34c>
 800961c:	2b4e      	cmp	r3, #78	; 0x4e
 800961e:	f47f aed8 	bne.w	80093d2 <_strtod_l+0xba>
 8009622:	499c      	ldr	r1, [pc, #624]	; (8009894 <_strtod_l+0x57c>)
 8009624:	a81b      	add	r0, sp, #108	; 0x6c
 8009626:	f002 f81b 	bl	800b660 <__match>
 800962a:	2800      	cmp	r0, #0
 800962c:	f43f aed1 	beq.w	80093d2 <_strtod_l+0xba>
 8009630:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b28      	cmp	r3, #40	; 0x28
 8009636:	d12c      	bne.n	8009692 <_strtod_l+0x37a>
 8009638:	4997      	ldr	r1, [pc, #604]	; (8009898 <_strtod_l+0x580>)
 800963a:	aa1e      	add	r2, sp, #120	; 0x78
 800963c:	a81b      	add	r0, sp, #108	; 0x6c
 800963e:	f002 f823 	bl	800b688 <__hexnan>
 8009642:	2805      	cmp	r0, #5
 8009644:	d125      	bne.n	8009692 <_strtod_l+0x37a>
 8009646:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009648:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800964c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009650:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009654:	e6a1      	b.n	800939a <_strtod_l+0x82>
 8009656:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800965a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800965e:	e7bc      	b.n	80095da <_strtod_l+0x2c2>
 8009660:	2b6e      	cmp	r3, #110	; 0x6e
 8009662:	e7dc      	b.n	800961e <_strtod_l+0x306>
 8009664:	498d      	ldr	r1, [pc, #564]	; (800989c <_strtod_l+0x584>)
 8009666:	a81b      	add	r0, sp, #108	; 0x6c
 8009668:	f001 fffa 	bl	800b660 <__match>
 800966c:	2800      	cmp	r0, #0
 800966e:	f43f aeb0 	beq.w	80093d2 <_strtod_l+0xba>
 8009672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009674:	498a      	ldr	r1, [pc, #552]	; (80098a0 <_strtod_l+0x588>)
 8009676:	3b01      	subs	r3, #1
 8009678:	a81b      	add	r0, sp, #108	; 0x6c
 800967a:	931b      	str	r3, [sp, #108]	; 0x6c
 800967c:	f001 fff0 	bl	800b660 <__match>
 8009680:	b910      	cbnz	r0, 8009688 <_strtod_l+0x370>
 8009682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009684:	3301      	adds	r3, #1
 8009686:	931b      	str	r3, [sp, #108]	; 0x6c
 8009688:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80098b0 <_strtod_l+0x598>
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	e683      	b.n	800939a <_strtod_l+0x82>
 8009692:	4884      	ldr	r0, [pc, #528]	; (80098a4 <_strtod_l+0x58c>)
 8009694:	f002 ff38 	bl	800c508 <nan>
 8009698:	4680      	mov	r8, r0
 800969a:	4689      	mov	r9, r1
 800969c:	e67d      	b.n	800939a <_strtod_l+0x82>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	9806      	ldr	r0, [sp, #24]
 80096a2:	1aeb      	subs	r3, r5, r3
 80096a4:	f1bb 0f00 	cmp.w	fp, #0
 80096a8:	bf08      	it	eq
 80096aa:	46a3      	moveq	fp, r4
 80096ac:	2c10      	cmp	r4, #16
 80096ae:	9307      	str	r3, [sp, #28]
 80096b0:	4626      	mov	r6, r4
 80096b2:	bfa8      	it	ge
 80096b4:	2610      	movge	r6, #16
 80096b6:	f7f6 fefd 	bl	80004b4 <__aeabi_ui2d>
 80096ba:	2c09      	cmp	r4, #9
 80096bc:	4680      	mov	r8, r0
 80096be:	4689      	mov	r9, r1
 80096c0:	dd13      	ble.n	80096ea <_strtod_l+0x3d2>
 80096c2:	4b79      	ldr	r3, [pc, #484]	; (80098a8 <_strtod_l+0x590>)
 80096c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096cc:	f7f6 ff6c 	bl	80005a8 <__aeabi_dmul>
 80096d0:	4680      	mov	r8, r0
 80096d2:	9805      	ldr	r0, [sp, #20]
 80096d4:	4689      	mov	r9, r1
 80096d6:	f7f6 feed 	bl	80004b4 <__aeabi_ui2d>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4640      	mov	r0, r8
 80096e0:	4649      	mov	r1, r9
 80096e2:	f7f6 fdab 	bl	800023c <__adddf3>
 80096e6:	4680      	mov	r8, r0
 80096e8:	4689      	mov	r9, r1
 80096ea:	2c0f      	cmp	r4, #15
 80096ec:	dc36      	bgt.n	800975c <_strtod_l+0x444>
 80096ee:	9b07      	ldr	r3, [sp, #28]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f43f ae52 	beq.w	800939a <_strtod_l+0x82>
 80096f6:	dd22      	ble.n	800973e <_strtod_l+0x426>
 80096f8:	2b16      	cmp	r3, #22
 80096fa:	dc09      	bgt.n	8009710 <_strtod_l+0x3f8>
 80096fc:	4c6a      	ldr	r4, [pc, #424]	; (80098a8 <_strtod_l+0x590>)
 80096fe:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009702:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009706:	4642      	mov	r2, r8
 8009708:	464b      	mov	r3, r9
 800970a:	f7f6 ff4d 	bl	80005a8 <__aeabi_dmul>
 800970e:	e7c3      	b.n	8009698 <_strtod_l+0x380>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009716:	4293      	cmp	r3, r2
 8009718:	db20      	blt.n	800975c <_strtod_l+0x444>
 800971a:	4d63      	ldr	r5, [pc, #396]	; (80098a8 <_strtod_l+0x590>)
 800971c:	f1c4 040f 	rsb	r4, r4, #15
 8009720:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972c:	f7f6 ff3c 	bl	80005a8 <__aeabi_dmul>
 8009730:	9b07      	ldr	r3, [sp, #28]
 8009732:	1b1c      	subs	r4, r3, r4
 8009734:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800973c:	e7e5      	b.n	800970a <_strtod_l+0x3f2>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	3316      	adds	r3, #22
 8009742:	db0b      	blt.n	800975c <_strtod_l+0x444>
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	4a58      	ldr	r2, [pc, #352]	; (80098a8 <_strtod_l+0x590>)
 8009748:	1b5d      	subs	r5, r3, r5
 800974a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800974e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009752:	4640      	mov	r0, r8
 8009754:	4649      	mov	r1, r9
 8009756:	f7f7 f851 	bl	80007fc <__aeabi_ddiv>
 800975a:	e79d      	b.n	8009698 <_strtod_l+0x380>
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	1ba6      	subs	r6, r4, r6
 8009760:	441e      	add	r6, r3
 8009762:	2e00      	cmp	r6, #0
 8009764:	dd71      	ble.n	800984a <_strtod_l+0x532>
 8009766:	f016 030f 	ands.w	r3, r6, #15
 800976a:	d00a      	beq.n	8009782 <_strtod_l+0x46a>
 800976c:	494e      	ldr	r1, [pc, #312]	; (80098a8 <_strtod_l+0x590>)
 800976e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009772:	4642      	mov	r2, r8
 8009774:	464b      	mov	r3, r9
 8009776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800977a:	f7f6 ff15 	bl	80005a8 <__aeabi_dmul>
 800977e:	4680      	mov	r8, r0
 8009780:	4689      	mov	r9, r1
 8009782:	f036 060f 	bics.w	r6, r6, #15
 8009786:	d050      	beq.n	800982a <_strtod_l+0x512>
 8009788:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800978c:	dd27      	ble.n	80097de <_strtod_l+0x4c6>
 800978e:	f04f 0b00 	mov.w	fp, #0
 8009792:	f8cd b010 	str.w	fp, [sp, #16]
 8009796:	f8cd b020 	str.w	fp, [sp, #32]
 800979a:	f8cd b018 	str.w	fp, [sp, #24]
 800979e:	2322      	movs	r3, #34	; 0x22
 80097a0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80098b0 <_strtod_l+0x598>
 80097a4:	f8ca 3000 	str.w	r3, [sl]
 80097a8:	f04f 0800 	mov.w	r8, #0
 80097ac:	9b08      	ldr	r3, [sp, #32]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f43f adf3 	beq.w	800939a <_strtod_l+0x82>
 80097b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097b6:	4650      	mov	r0, sl
 80097b8:	f002 f8cc 	bl	800b954 <_Bfree>
 80097bc:	9906      	ldr	r1, [sp, #24]
 80097be:	4650      	mov	r0, sl
 80097c0:	f002 f8c8 	bl	800b954 <_Bfree>
 80097c4:	9904      	ldr	r1, [sp, #16]
 80097c6:	4650      	mov	r0, sl
 80097c8:	f002 f8c4 	bl	800b954 <_Bfree>
 80097cc:	9908      	ldr	r1, [sp, #32]
 80097ce:	4650      	mov	r0, sl
 80097d0:	f002 f8c0 	bl	800b954 <_Bfree>
 80097d4:	4659      	mov	r1, fp
 80097d6:	4650      	mov	r0, sl
 80097d8:	f002 f8bc 	bl	800b954 <_Bfree>
 80097dc:	e5dd      	b.n	800939a <_strtod_l+0x82>
 80097de:	2300      	movs	r3, #0
 80097e0:	1136      	asrs	r6, r6, #4
 80097e2:	4640      	mov	r0, r8
 80097e4:	4649      	mov	r1, r9
 80097e6:	461f      	mov	r7, r3
 80097e8:	2e01      	cmp	r6, #1
 80097ea:	dc21      	bgt.n	8009830 <_strtod_l+0x518>
 80097ec:	b10b      	cbz	r3, 80097f2 <_strtod_l+0x4da>
 80097ee:	4680      	mov	r8, r0
 80097f0:	4689      	mov	r9, r1
 80097f2:	4b2e      	ldr	r3, [pc, #184]	; (80098ac <_strtod_l+0x594>)
 80097f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80097f8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009804:	f7f6 fed0 	bl	80005a8 <__aeabi_dmul>
 8009808:	4b29      	ldr	r3, [pc, #164]	; (80098b0 <_strtod_l+0x598>)
 800980a:	460a      	mov	r2, r1
 800980c:	400b      	ands	r3, r1
 800980e:	4929      	ldr	r1, [pc, #164]	; (80098b4 <_strtod_l+0x59c>)
 8009810:	428b      	cmp	r3, r1
 8009812:	4680      	mov	r8, r0
 8009814:	d8bb      	bhi.n	800978e <_strtod_l+0x476>
 8009816:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800981a:	428b      	cmp	r3, r1
 800981c:	bf86      	itte	hi
 800981e:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 80098b8 <_strtod_l+0x5a0>
 8009822:	f04f 38ff 	movhi.w	r8, #4294967295
 8009826:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800982a:	2300      	movs	r3, #0
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	e07e      	b.n	800992e <_strtod_l+0x616>
 8009830:	07f2      	lsls	r2, r6, #31
 8009832:	d507      	bpl.n	8009844 <_strtod_l+0x52c>
 8009834:	4b1d      	ldr	r3, [pc, #116]	; (80098ac <_strtod_l+0x594>)
 8009836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 feb3 	bl	80005a8 <__aeabi_dmul>
 8009842:	2301      	movs	r3, #1
 8009844:	3701      	adds	r7, #1
 8009846:	1076      	asrs	r6, r6, #1
 8009848:	e7ce      	b.n	80097e8 <_strtod_l+0x4d0>
 800984a:	d0ee      	beq.n	800982a <_strtod_l+0x512>
 800984c:	4276      	negs	r6, r6
 800984e:	f016 020f 	ands.w	r2, r6, #15
 8009852:	d00a      	beq.n	800986a <_strtod_l+0x552>
 8009854:	4b14      	ldr	r3, [pc, #80]	; (80098a8 <_strtod_l+0x590>)
 8009856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 ffcb 	bl	80007fc <__aeabi_ddiv>
 8009866:	4680      	mov	r8, r0
 8009868:	4689      	mov	r9, r1
 800986a:	1136      	asrs	r6, r6, #4
 800986c:	d0dd      	beq.n	800982a <_strtod_l+0x512>
 800986e:	2e1f      	cmp	r6, #31
 8009870:	dd24      	ble.n	80098bc <_strtod_l+0x5a4>
 8009872:	f04f 0b00 	mov.w	fp, #0
 8009876:	f8cd b010 	str.w	fp, [sp, #16]
 800987a:	f8cd b020 	str.w	fp, [sp, #32]
 800987e:	f8cd b018 	str.w	fp, [sp, #24]
 8009882:	2322      	movs	r3, #34	; 0x22
 8009884:	f04f 0800 	mov.w	r8, #0
 8009888:	f04f 0900 	mov.w	r9, #0
 800988c:	f8ca 3000 	str.w	r3, [sl]
 8009890:	e78c      	b.n	80097ac <_strtod_l+0x494>
 8009892:	bf00      	nop
 8009894:	0800cbb9 	.word	0x0800cbb9
 8009898:	0800cbf4 	.word	0x0800cbf4
 800989c:	0800cbb1 	.word	0x0800cbb1
 80098a0:	0800cc33 	.word	0x0800cc33
 80098a4:	0800cf50 	.word	0x0800cf50
 80098a8:	0800ce30 	.word	0x0800ce30
 80098ac:	0800ce08 	.word	0x0800ce08
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	7ca00000 	.word	0x7ca00000
 80098b8:	7fefffff 	.word	0x7fefffff
 80098bc:	f016 0310 	ands.w	r3, r6, #16
 80098c0:	bf18      	it	ne
 80098c2:	236a      	movne	r3, #106	; 0x6a
 80098c4:	4fb3      	ldr	r7, [pc, #716]	; (8009b94 <_strtod_l+0x87c>)
 80098c6:	9305      	str	r3, [sp, #20]
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	2300      	movs	r3, #0
 80098ce:	07f2      	lsls	r2, r6, #31
 80098d0:	d504      	bpl.n	80098dc <_strtod_l+0x5c4>
 80098d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d6:	f7f6 fe67 	bl	80005a8 <__aeabi_dmul>
 80098da:	2301      	movs	r3, #1
 80098dc:	1076      	asrs	r6, r6, #1
 80098de:	f107 0708 	add.w	r7, r7, #8
 80098e2:	d1f4      	bne.n	80098ce <_strtod_l+0x5b6>
 80098e4:	b10b      	cbz	r3, 80098ea <_strtod_l+0x5d2>
 80098e6:	4680      	mov	r8, r0
 80098e8:	4689      	mov	r9, r1
 80098ea:	9b05      	ldr	r3, [sp, #20]
 80098ec:	b1bb      	cbz	r3, 800991e <_strtod_l+0x606>
 80098ee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80098f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	4649      	mov	r1, r9
 80098fa:	dd10      	ble.n	800991e <_strtod_l+0x606>
 80098fc:	2b1f      	cmp	r3, #31
 80098fe:	f340 8128 	ble.w	8009b52 <_strtod_l+0x83a>
 8009902:	2b34      	cmp	r3, #52	; 0x34
 8009904:	bfde      	ittt	le
 8009906:	3b20      	suble	r3, #32
 8009908:	f04f 32ff 	movle.w	r2, #4294967295
 800990c:	fa02 f303 	lslle.w	r3, r2, r3
 8009910:	f04f 0800 	mov.w	r8, #0
 8009914:	bfcc      	ite	gt
 8009916:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800991a:	ea03 0901 	andle.w	r9, r3, r1
 800991e:	2200      	movs	r2, #0
 8009920:	2300      	movs	r3, #0
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f7 f8a7 	bl	8000a78 <__aeabi_dcmpeq>
 800992a:	2800      	cmp	r0, #0
 800992c:	d1a1      	bne.n	8009872 <_strtod_l+0x55a>
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	9908      	ldr	r1, [sp, #32]
 8009934:	4623      	mov	r3, r4
 8009936:	465a      	mov	r2, fp
 8009938:	4650      	mov	r0, sl
 800993a:	f002 f877 	bl	800ba2c <__s2b>
 800993e:	9008      	str	r0, [sp, #32]
 8009940:	2800      	cmp	r0, #0
 8009942:	f43f af24 	beq.w	800978e <_strtod_l+0x476>
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	1b5d      	subs	r5, r3, r5
 800994a:	9b07      	ldr	r3, [sp, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfb4      	ite	lt
 8009950:	462b      	movlt	r3, r5
 8009952:	2300      	movge	r3, #0
 8009954:	930e      	str	r3, [sp, #56]	; 0x38
 8009956:	9b07      	ldr	r3, [sp, #28]
 8009958:	f04f 0b00 	mov.w	fp, #0
 800995c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009960:	9316      	str	r3, [sp, #88]	; 0x58
 8009962:	f8cd b010 	str.w	fp, [sp, #16]
 8009966:	9b08      	ldr	r3, [sp, #32]
 8009968:	4650      	mov	r0, sl
 800996a:	6859      	ldr	r1, [r3, #4]
 800996c:	f001 ffb2 	bl	800b8d4 <_Balloc>
 8009970:	9006      	str	r0, [sp, #24]
 8009972:	2800      	cmp	r0, #0
 8009974:	f43f af13 	beq.w	800979e <_strtod_l+0x486>
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	3202      	adds	r2, #2
 800997e:	f103 010c 	add.w	r1, r3, #12
 8009982:	0092      	lsls	r2, r2, #2
 8009984:	300c      	adds	r0, #12
 8009986:	f7fe fec9 	bl	800871c <memcpy>
 800998a:	ab1e      	add	r3, sp, #120	; 0x78
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	ab1d      	add	r3, sp, #116	; 0x74
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	4642      	mov	r2, r8
 8009994:	464b      	mov	r3, r9
 8009996:	4650      	mov	r0, sl
 8009998:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800999c:	f002 fb80 	bl	800c0a0 <__d2b>
 80099a0:	901c      	str	r0, [sp, #112]	; 0x70
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f aefb 	beq.w	800979e <_strtod_l+0x486>
 80099a8:	2101      	movs	r1, #1
 80099aa:	4650      	mov	r0, sl
 80099ac:	f002 f8d6 	bl	800bb5c <__i2b>
 80099b0:	9004      	str	r0, [sp, #16]
 80099b2:	4603      	mov	r3, r0
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f43f aef2 	beq.w	800979e <_strtod_l+0x486>
 80099ba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80099bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099be:	2d00      	cmp	r5, #0
 80099c0:	bfab      	itete	ge
 80099c2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099c4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80099c6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80099c8:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80099ca:	bfac      	ite	ge
 80099cc:	18ee      	addge	r6, r5, r3
 80099ce:	1b5c      	sublt	r4, r3, r5
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	1aed      	subs	r5, r5, r3
 80099d4:	4415      	add	r5, r2
 80099d6:	4b70      	ldr	r3, [pc, #448]	; (8009b98 <_strtod_l+0x880>)
 80099d8:	3d01      	subs	r5, #1
 80099da:	429d      	cmp	r5, r3
 80099dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099e0:	f280 80c9 	bge.w	8009b76 <_strtod_l+0x85e>
 80099e4:	1b5b      	subs	r3, r3, r5
 80099e6:	2b1f      	cmp	r3, #31
 80099e8:	eba2 0203 	sub.w	r2, r2, r3
 80099ec:	f04f 0701 	mov.w	r7, #1
 80099f0:	f300 80b6 	bgt.w	8009b60 <_strtod_l+0x848>
 80099f4:	fa07 f303 	lsl.w	r3, r7, r3
 80099f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099fa:	2500      	movs	r5, #0
 80099fc:	18b7      	adds	r7, r6, r2
 80099fe:	9b05      	ldr	r3, [sp, #20]
 8009a00:	42be      	cmp	r6, r7
 8009a02:	4414      	add	r4, r2
 8009a04:	441c      	add	r4, r3
 8009a06:	4633      	mov	r3, r6
 8009a08:	bfa8      	it	ge
 8009a0a:	463b      	movge	r3, r7
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	bfa8      	it	ge
 8009a10:	4623      	movge	r3, r4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfc2      	ittt	gt
 8009a16:	1aff      	subgt	r7, r7, r3
 8009a18:	1ae4      	subgt	r4, r4, r3
 8009a1a:	1af6      	subgt	r6, r6, r3
 8009a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd17      	ble.n	8009a52 <_strtod_l+0x73a>
 8009a22:	9904      	ldr	r1, [sp, #16]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4650      	mov	r0, sl
 8009a28:	f002 f954 	bl	800bcd4 <__pow5mult>
 8009a2c:	9004      	str	r0, [sp, #16]
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f aeb5 	beq.w	800979e <_strtod_l+0x486>
 8009a34:	4601      	mov	r1, r0
 8009a36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f002 f8a5 	bl	800bb88 <__multiply>
 8009a3e:	9009      	str	r0, [sp, #36]	; 0x24
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f43f aeac 	beq.w	800979e <_strtod_l+0x486>
 8009a46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a48:	4650      	mov	r0, sl
 8009a4a:	f001 ff83 	bl	800b954 <_Bfree>
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	931c      	str	r3, [sp, #112]	; 0x70
 8009a52:	2f00      	cmp	r7, #0
 8009a54:	f300 8093 	bgt.w	8009b7e <_strtod_l+0x866>
 8009a58:	9b07      	ldr	r3, [sp, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd08      	ble.n	8009a70 <_strtod_l+0x758>
 8009a5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a60:	9906      	ldr	r1, [sp, #24]
 8009a62:	4650      	mov	r0, sl
 8009a64:	f002 f936 	bl	800bcd4 <__pow5mult>
 8009a68:	9006      	str	r0, [sp, #24]
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f43f ae97 	beq.w	800979e <_strtod_l+0x486>
 8009a70:	2c00      	cmp	r4, #0
 8009a72:	dd08      	ble.n	8009a86 <_strtod_l+0x76e>
 8009a74:	9906      	ldr	r1, [sp, #24]
 8009a76:	4622      	mov	r2, r4
 8009a78:	4650      	mov	r0, sl
 8009a7a:	f002 f985 	bl	800bd88 <__lshift>
 8009a7e:	9006      	str	r0, [sp, #24]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f43f ae8c 	beq.w	800979e <_strtod_l+0x486>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	dd08      	ble.n	8009a9c <_strtod_l+0x784>
 8009a8a:	9904      	ldr	r1, [sp, #16]
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f002 f97a 	bl	800bd88 <__lshift>
 8009a94:	9004      	str	r0, [sp, #16]
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f ae81 	beq.w	800979e <_strtod_l+0x486>
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	f002 f9f9 	bl	800be98 <__mdiff>
 8009aa6:	4683      	mov	fp, r0
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f43f ae78 	beq.w	800979e <_strtod_l+0x486>
 8009aae:	2400      	movs	r4, #0
 8009ab0:	68c3      	ldr	r3, [r0, #12]
 8009ab2:	9904      	ldr	r1, [sp, #16]
 8009ab4:	60c4      	str	r4, [r0, #12]
 8009ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ab8:	f002 f9d2 	bl	800be60 <__mcmp>
 8009abc:	42a0      	cmp	r0, r4
 8009abe:	da71      	bge.n	8009ba4 <_strtod_l+0x88c>
 8009ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ac2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ac6:	f040 8097 	bne.w	8009bf8 <_strtod_l+0x8e0>
 8009aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f040 8092 	bne.w	8009bf8 <_strtod_l+0x8e0>
 8009ad4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ad8:	0d1b      	lsrs	r3, r3, #20
 8009ada:	051b      	lsls	r3, r3, #20
 8009adc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ae0:	f240 808a 	bls.w	8009bf8 <_strtod_l+0x8e0>
 8009ae4:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009ae8:	b923      	cbnz	r3, 8009af4 <_strtod_l+0x7dc>
 8009aea:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	f340 8082 	ble.w	8009bf8 <_strtod_l+0x8e0>
 8009af4:	4659      	mov	r1, fp
 8009af6:	2201      	movs	r2, #1
 8009af8:	4650      	mov	r0, sl
 8009afa:	f002 f945 	bl	800bd88 <__lshift>
 8009afe:	9904      	ldr	r1, [sp, #16]
 8009b00:	4683      	mov	fp, r0
 8009b02:	f002 f9ad 	bl	800be60 <__mcmp>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	dd76      	ble.n	8009bf8 <_strtod_l+0x8e0>
 8009b0a:	9905      	ldr	r1, [sp, #20]
 8009b0c:	4a23      	ldr	r2, [pc, #140]	; (8009b9c <_strtod_l+0x884>)
 8009b0e:	464b      	mov	r3, r9
 8009b10:	2900      	cmp	r1, #0
 8009b12:	f000 8092 	beq.w	8009c3a <_strtod_l+0x922>
 8009b16:	ea02 0109 	and.w	r1, r2, r9
 8009b1a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b1e:	f300 808c 	bgt.w	8009c3a <_strtod_l+0x922>
 8009b22:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b26:	f77f aeac 	ble.w	8009882 <_strtod_l+0x56a>
 8009b2a:	4a1d      	ldr	r2, [pc, #116]	; (8009ba0 <_strtod_l+0x888>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009b32:	4640      	mov	r0, r8
 8009b34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b38:	4649      	mov	r1, r9
 8009b3a:	f7f6 fd35 	bl	80005a8 <__aeabi_dmul>
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4303      	orrs	r3, r0
 8009b42:	bf08      	it	eq
 8009b44:	2322      	moveq	r3, #34	; 0x22
 8009b46:	4680      	mov	r8, r0
 8009b48:	4689      	mov	r9, r1
 8009b4a:	bf08      	it	eq
 8009b4c:	f8ca 3000 	streq.w	r3, [sl]
 8009b50:	e630      	b.n	80097b4 <_strtod_l+0x49c>
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	ea03 0808 	and.w	r8, r3, r8
 8009b5e:	e6de      	b.n	800991e <_strtod_l+0x606>
 8009b60:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009b64:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009b68:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009b6c:	35e2      	adds	r5, #226	; 0xe2
 8009b6e:	fa07 f505 	lsl.w	r5, r7, r5
 8009b72:	970f      	str	r7, [sp, #60]	; 0x3c
 8009b74:	e742      	b.n	80099fc <_strtod_l+0x6e4>
 8009b76:	2301      	movs	r3, #1
 8009b78:	2500      	movs	r5, #0
 8009b7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b7c:	e73e      	b.n	80099fc <_strtod_l+0x6e4>
 8009b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b80:	463a      	mov	r2, r7
 8009b82:	4650      	mov	r0, sl
 8009b84:	f002 f900 	bl	800bd88 <__lshift>
 8009b88:	901c      	str	r0, [sp, #112]	; 0x70
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f47f af64 	bne.w	8009a58 <_strtod_l+0x740>
 8009b90:	e605      	b.n	800979e <_strtod_l+0x486>
 8009b92:	bf00      	nop
 8009b94:	0800cc08 	.word	0x0800cc08
 8009b98:	fffffc02 	.word	0xfffffc02
 8009b9c:	7ff00000 	.word	0x7ff00000
 8009ba0:	39500000 	.word	0x39500000
 8009ba4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009ba8:	d166      	bne.n	8009c78 <_strtod_l+0x960>
 8009baa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bb0:	b35a      	cbz	r2, 8009c0a <_strtod_l+0x8f2>
 8009bb2:	4a9d      	ldr	r2, [pc, #628]	; (8009e28 <_strtod_l+0xb10>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d12c      	bne.n	8009c12 <_strtod_l+0x8fa>
 8009bb8:	9b05      	ldr	r3, [sp, #20]
 8009bba:	4640      	mov	r0, r8
 8009bbc:	b303      	cbz	r3, 8009c00 <_strtod_l+0x8e8>
 8009bbe:	4a9b      	ldr	r2, [pc, #620]	; (8009e2c <_strtod_l+0xb14>)
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	401a      	ands	r2, r3
 8009bc4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8009bcc:	d81b      	bhi.n	8009c06 <_strtod_l+0x8ee>
 8009bce:	0d12      	lsrs	r2, r2, #20
 8009bd0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	d11a      	bne.n	8009c12 <_strtod_l+0x8fa>
 8009bdc:	4b94      	ldr	r3, [pc, #592]	; (8009e30 <_strtod_l+0xb18>)
 8009bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d102      	bne.n	8009bea <_strtod_l+0x8d2>
 8009be4:	3001      	adds	r0, #1
 8009be6:	f43f adda 	beq.w	800979e <_strtod_l+0x486>
 8009bea:	4b90      	ldr	r3, [pc, #576]	; (8009e2c <_strtod_l+0xb14>)
 8009bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bee:	401a      	ands	r2, r3
 8009bf0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009bf4:	f04f 0800 	mov.w	r8, #0
 8009bf8:	9b05      	ldr	r3, [sp, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d195      	bne.n	8009b2a <_strtod_l+0x812>
 8009bfe:	e5d9      	b.n	80097b4 <_strtod_l+0x49c>
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295
 8009c04:	e7e8      	b.n	8009bd8 <_strtod_l+0x8c0>
 8009c06:	460b      	mov	r3, r1
 8009c08:	e7e6      	b.n	8009bd8 <_strtod_l+0x8c0>
 8009c0a:	ea53 0308 	orrs.w	r3, r3, r8
 8009c0e:	f43f af7c 	beq.w	8009b0a <_strtod_l+0x7f2>
 8009c12:	b1e5      	cbz	r5, 8009c4e <_strtod_l+0x936>
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	421d      	tst	r5, r3
 8009c18:	d0ee      	beq.n	8009bf8 <_strtod_l+0x8e0>
 8009c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	b1c3      	cbz	r3, 8009c56 <_strtod_l+0x93e>
 8009c24:	f7ff fb57 	bl	80092d6 <sulp>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c30:	f7f6 fb04 	bl	800023c <__adddf3>
 8009c34:	4680      	mov	r8, r0
 8009c36:	4689      	mov	r9, r1
 8009c38:	e7de      	b.n	8009bf8 <_strtod_l+0x8e0>
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c44:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c48:	f04f 38ff 	mov.w	r8, #4294967295
 8009c4c:	e7d4      	b.n	8009bf8 <_strtod_l+0x8e0>
 8009c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c50:	ea13 0f08 	tst.w	r3, r8
 8009c54:	e7e0      	b.n	8009c18 <_strtod_l+0x900>
 8009c56:	f7ff fb3e 	bl	80092d6 <sulp>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c62:	f7f6 fae9 	bl	8000238 <__aeabi_dsub>
 8009c66:	2200      	movs	r2, #0
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	4689      	mov	r9, r1
 8009c6e:	f7f6 ff03 	bl	8000a78 <__aeabi_dcmpeq>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d0c0      	beq.n	8009bf8 <_strtod_l+0x8e0>
 8009c76:	e604      	b.n	8009882 <_strtod_l+0x56a>
 8009c78:	9904      	ldr	r1, [sp, #16]
 8009c7a:	4658      	mov	r0, fp
 8009c7c:	f002 fa6c 	bl	800c158 <__ratio>
 8009c80:	2200      	movs	r2, #0
 8009c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c86:	4606      	mov	r6, r0
 8009c88:	460f      	mov	r7, r1
 8009c8a:	f7f6 ff09 	bl	8000aa0 <__aeabi_dcmple>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d075      	beq.n	8009d7e <_strtod_l+0xa66>
 8009c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d047      	beq.n	8009d28 <_strtod_l+0xa10>
 8009c98:	4f66      	ldr	r7, [pc, #408]	; (8009e34 <_strtod_l+0xb1c>)
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	4d65      	ldr	r5, [pc, #404]	; (8009e34 <_strtod_l+0xb1c>)
 8009c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ca4:	0d1b      	lsrs	r3, r3, #20
 8009ca6:	051b      	lsls	r3, r3, #20
 8009ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009caa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cac:	4b62      	ldr	r3, [pc, #392]	; (8009e38 <_strtod_l+0xb20>)
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	f040 80ca 	bne.w	8009e48 <_strtod_l+0xb30>
 8009cb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cb8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	f002 f971 	bl	800bfac <__ulp>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	f7f6 fc69 	bl	80005a8 <__aeabi_dmul>
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	f7f6 faaf 	bl	800023c <__adddf3>
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4952      	ldr	r1, [pc, #328]	; (8009e2c <_strtod_l+0xb14>)
 8009ce2:	4a56      	ldr	r2, [pc, #344]	; (8009e3c <_strtod_l+0xb24>)
 8009ce4:	4019      	ands	r1, r3
 8009ce6:	4291      	cmp	r1, r2
 8009ce8:	4680      	mov	r8, r0
 8009cea:	d95e      	bls.n	8009daa <_strtod_l+0xa92>
 8009cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cee:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d103      	bne.n	8009cfe <_strtod_l+0x9e6>
 8009cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	f43f ad50 	beq.w	800979e <_strtod_l+0x486>
 8009cfe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009e30 <_strtod_l+0xb18>
 8009d02:	f04f 38ff 	mov.w	r8, #4294967295
 8009d06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f001 fe23 	bl	800b954 <_Bfree>
 8009d0e:	9906      	ldr	r1, [sp, #24]
 8009d10:	4650      	mov	r0, sl
 8009d12:	f001 fe1f 	bl	800b954 <_Bfree>
 8009d16:	9904      	ldr	r1, [sp, #16]
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f001 fe1b 	bl	800b954 <_Bfree>
 8009d1e:	4659      	mov	r1, fp
 8009d20:	4650      	mov	r0, sl
 8009d22:	f001 fe17 	bl	800b954 <_Bfree>
 8009d26:	e61e      	b.n	8009966 <_strtod_l+0x64e>
 8009d28:	f1b8 0f00 	cmp.w	r8, #0
 8009d2c:	d119      	bne.n	8009d62 <_strtod_l+0xa4a>
 8009d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d34:	b9e3      	cbnz	r3, 8009d70 <_strtod_l+0xa58>
 8009d36:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <_strtod_l+0xb1c>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fea5 	bl	8000a8c <__aeabi_dcmplt>
 8009d42:	b9c8      	cbnz	r0, 8009d78 <_strtod_l+0xa60>
 8009d44:	4b3e      	ldr	r3, [pc, #248]	; (8009e40 <_strtod_l+0xb28>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fc2c 	bl	80005a8 <__aeabi_dmul>
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d58:	9418      	str	r4, [sp, #96]	; 0x60
 8009d5a:	9319      	str	r3, [sp, #100]	; 0x64
 8009d5c:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009d60:	e79d      	b.n	8009c9e <_strtod_l+0x986>
 8009d62:	f1b8 0f01 	cmp.w	r8, #1
 8009d66:	d103      	bne.n	8009d70 <_strtod_l+0xa58>
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f43f ad89 	beq.w	8009882 <_strtod_l+0x56a>
 8009d70:	4f34      	ldr	r7, [pc, #208]	; (8009e44 <_strtod_l+0xb2c>)
 8009d72:	2600      	movs	r6, #0
 8009d74:	2400      	movs	r4, #0
 8009d76:	e791      	b.n	8009c9c <_strtod_l+0x984>
 8009d78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009d7a:	4d31      	ldr	r5, [pc, #196]	; (8009e40 <_strtod_l+0xb28>)
 8009d7c:	e7ea      	b.n	8009d54 <_strtod_l+0xa3c>
 8009d7e:	4b30      	ldr	r3, [pc, #192]	; (8009e40 <_strtod_l+0xb28>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	4630      	mov	r0, r6
 8009d84:	4639      	mov	r1, r7
 8009d86:	f7f6 fc0f 	bl	80005a8 <__aeabi_dmul>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	b933      	cbnz	r3, 8009da0 <_strtod_l+0xa88>
 8009d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d96:	9010      	str	r0, [sp, #64]	; 0x40
 8009d98:	9311      	str	r3, [sp, #68]	; 0x44
 8009d9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d9e:	e77e      	b.n	8009c9e <_strtod_l+0x986>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009da8:	e7f7      	b.n	8009d9a <_strtod_l+0xa82>
 8009daa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009dae:	9b05      	ldr	r3, [sp, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1a8      	bne.n	8009d06 <_strtod_l+0x9ee>
 8009db4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dba:	0d1b      	lsrs	r3, r3, #20
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d1a1      	bne.n	8009d06 <_strtod_l+0x9ee>
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7f6 ff4f 	bl	8000c68 <__aeabi_d2lz>
 8009dca:	f7f6 fbbf 	bl	800054c <__aeabi_l2d>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fa2f 	bl	8000238 <__aeabi_dsub>
 8009dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009de0:	ea43 0308 	orr.w	r3, r3, r8
 8009de4:	4313      	orrs	r3, r2
 8009de6:	4604      	mov	r4, r0
 8009de8:	460d      	mov	r5, r1
 8009dea:	d068      	beq.n	8009ebe <_strtod_l+0xba6>
 8009dec:	a30a      	add	r3, pc, #40	; (adr r3, 8009e18 <_strtod_l+0xb00>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fe4b 	bl	8000a8c <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f47f acdc 	bne.w	80097b4 <_strtod_l+0x49c>
 8009dfc:	a308      	add	r3, pc, #32	; (adr r3, 8009e20 <_strtod_l+0xb08>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7f6 fe5f 	bl	8000ac8 <__aeabi_dcmpgt>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	f43f af7b 	beq.w	8009d06 <_strtod_l+0x9ee>
 8009e10:	e4d0      	b.n	80097b4 <_strtod_l+0x49c>
 8009e12:	bf00      	nop
 8009e14:	f3af 8000 	nop.w
 8009e18:	94a03595 	.word	0x94a03595
 8009e1c:	3fdfffff 	.word	0x3fdfffff
 8009e20:	35afe535 	.word	0x35afe535
 8009e24:	3fe00000 	.word	0x3fe00000
 8009e28:	000fffff 	.word	0x000fffff
 8009e2c:	7ff00000 	.word	0x7ff00000
 8009e30:	7fefffff 	.word	0x7fefffff
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	7fe00000 	.word	0x7fe00000
 8009e3c:	7c9fffff 	.word	0x7c9fffff
 8009e40:	3fe00000 	.word	0x3fe00000
 8009e44:	bff00000 	.word	0xbff00000
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	b313      	cbz	r3, 8009e92 <_strtod_l+0xb7a>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e52:	d81e      	bhi.n	8009e92 <_strtod_l+0xb7a>
 8009e54:	a326      	add	r3, pc, #152	; (adr r3, 8009ef0 <_strtod_l+0xbd8>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7f6 fe1f 	bl	8000aa0 <__aeabi_dcmple>
 8009e62:	b190      	cbz	r0, 8009e8a <_strtod_l+0xb72>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7f6 fe76 	bl	8000b58 <__aeabi_d2uiz>
 8009e6c:	2801      	cmp	r0, #1
 8009e6e:	bf38      	it	cc
 8009e70:	2001      	movcc	r0, #1
 8009e72:	f7f6 fb1f 	bl	80004b4 <__aeabi_ui2d>
 8009e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	b9d3      	cbnz	r3, 8009eb4 <_strtod_l+0xb9c>
 8009e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e82:	9012      	str	r0, [sp, #72]	; 0x48
 8009e84:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e86:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009e8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e8c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009e90:	1a9f      	subs	r7, r3, r2
 8009e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e96:	f002 f889 	bl	800bfac <__ulp>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	f7f6 fb81 	bl	80005a8 <__aeabi_dmul>
 8009ea6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009eaa:	f7f6 f9c7 	bl	800023c <__adddf3>
 8009eae:	4680      	mov	r8, r0
 8009eb0:	4689      	mov	r9, r1
 8009eb2:	e77c      	b.n	8009dae <_strtod_l+0xa96>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009ebc:	e7e3      	b.n	8009e86 <_strtod_l+0xb6e>
 8009ebe:	a30e      	add	r3, pc, #56	; (adr r3, 8009ef8 <_strtod_l+0xbe0>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fde2 	bl	8000a8c <__aeabi_dcmplt>
 8009ec8:	e79f      	b.n	8009e0a <_strtod_l+0xaf2>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ece:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ed0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	f7ff ba65 	b.w	80093a2 <_strtod_l+0x8a>
 8009ed8:	2b65      	cmp	r3, #101	; 0x65
 8009eda:	f43f ab5c 	beq.w	8009596 <_strtod_l+0x27e>
 8009ede:	2b45      	cmp	r3, #69	; 0x45
 8009ee0:	f43f ab59 	beq.w	8009596 <_strtod_l+0x27e>
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f7ff bb8d 	b.w	8009604 <_strtod_l+0x2ec>
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
 8009ef0:	ffc00000 	.word	0xffc00000
 8009ef4:	41dfffff 	.word	0x41dfffff
 8009ef8:	94a03595 	.word	0x94a03595
 8009efc:	3fcfffff 	.word	0x3fcfffff

08009f00 <strtod>:
 8009f00:	460a      	mov	r2, r1
 8009f02:	4601      	mov	r1, r0
 8009f04:	4802      	ldr	r0, [pc, #8]	; (8009f10 <strtod+0x10>)
 8009f06:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <strtod+0x14>)
 8009f08:	6800      	ldr	r0, [r0, #0]
 8009f0a:	f7ff ba05 	b.w	8009318 <_strtod_l>
 8009f0e:	bf00      	nop
 8009f10:	2000000c 	.word	0x2000000c
 8009f14:	20000074 	.word	0x20000074

08009f18 <__swbuf_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b118      	cbz	r0, 8009f2a <__swbuf_r+0x12>
 8009f22:	6983      	ldr	r3, [r0, #24]
 8009f24:	b90b      	cbnz	r3, 8009f2a <__swbuf_r+0x12>
 8009f26:	f001 f84b 	bl	800afc0 <__sinit>
 8009f2a:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <__swbuf_r+0x98>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	d12b      	bne.n	8009f88 <__swbuf_r+0x70>
 8009f30:	686c      	ldr	r4, [r5, #4]
 8009f32:	69a3      	ldr	r3, [r4, #24]
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	071a      	lsls	r2, r3, #28
 8009f3a:	d52f      	bpl.n	8009f9c <__swbuf_r+0x84>
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	b36b      	cbz	r3, 8009f9c <__swbuf_r+0x84>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	6820      	ldr	r0, [r4, #0]
 8009f44:	1ac0      	subs	r0, r0, r3
 8009f46:	6963      	ldr	r3, [r4, #20]
 8009f48:	b2f6      	uxtb	r6, r6
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	4637      	mov	r7, r6
 8009f4e:	dc04      	bgt.n	8009f5a <__swbuf_r+0x42>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 ffa0 	bl	800ae98 <_fflush_r>
 8009f58:	bb30      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	60a3      	str	r3, [r4, #8]
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	701e      	strb	r6, [r3, #0]
 8009f68:	6963      	ldr	r3, [r4, #20]
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d004      	beq.n	8009f7a <__swbuf_r+0x62>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	07db      	lsls	r3, r3, #31
 8009f74:	d506      	bpl.n	8009f84 <__swbuf_r+0x6c>
 8009f76:	2e0a      	cmp	r6, #10
 8009f78:	d104      	bne.n	8009f84 <__swbuf_r+0x6c>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 ff8b 	bl	800ae98 <_fflush_r>
 8009f82:	b988      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f84:	4638      	mov	r0, r7
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <__swbuf_r+0x9c>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d101      	bne.n	8009f92 <__swbuf_r+0x7a>
 8009f8e:	68ac      	ldr	r4, [r5, #8]
 8009f90:	e7cf      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <__swbuf_r+0xa0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	bf08      	it	eq
 8009f98:	68ec      	ldreq	r4, [r5, #12]
 8009f9a:	e7ca      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f80c 	bl	8009fbc <__swsetup_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d0cb      	beq.n	8009f40 <__swbuf_r+0x28>
 8009fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8009fac:	e7ea      	b.n	8009f84 <__swbuf_r+0x6c>
 8009fae:	bf00      	nop
 8009fb0:	0800cce4 	.word	0x0800cce4
 8009fb4:	0800cd04 	.word	0x0800cd04
 8009fb8:	0800ccc4 	.word	0x0800ccc4

08009fbc <__swsetup_r>:
 8009fbc:	4b32      	ldr	r3, [pc, #200]	; (800a088 <__swsetup_r+0xcc>)
 8009fbe:	b570      	push	{r4, r5, r6, lr}
 8009fc0:	681d      	ldr	r5, [r3, #0]
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	b125      	cbz	r5, 8009fd2 <__swsetup_r+0x16>
 8009fc8:	69ab      	ldr	r3, [r5, #24]
 8009fca:	b913      	cbnz	r3, 8009fd2 <__swsetup_r+0x16>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f000 fff7 	bl	800afc0 <__sinit>
 8009fd2:	4b2e      	ldr	r3, [pc, #184]	; (800a08c <__swsetup_r+0xd0>)
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	d10f      	bne.n	8009ff8 <__swsetup_r+0x3c>
 8009fd8:	686c      	ldr	r4, [r5, #4]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe0:	0719      	lsls	r1, r3, #28
 8009fe2:	d42c      	bmi.n	800a03e <__swsetup_r+0x82>
 8009fe4:	06dd      	lsls	r5, r3, #27
 8009fe6:	d411      	bmi.n	800a00c <__swsetup_r+0x50>
 8009fe8:	2309      	movs	r3, #9
 8009fea:	6033      	str	r3, [r6, #0]
 8009fec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	e03e      	b.n	800a076 <__swsetup_r+0xba>
 8009ff8:	4b25      	ldr	r3, [pc, #148]	; (800a090 <__swsetup_r+0xd4>)
 8009ffa:	429c      	cmp	r4, r3
 8009ffc:	d101      	bne.n	800a002 <__swsetup_r+0x46>
 8009ffe:	68ac      	ldr	r4, [r5, #8]
 800a000:	e7eb      	b.n	8009fda <__swsetup_r+0x1e>
 800a002:	4b24      	ldr	r3, [pc, #144]	; (800a094 <__swsetup_r+0xd8>)
 800a004:	429c      	cmp	r4, r3
 800a006:	bf08      	it	eq
 800a008:	68ec      	ldreq	r4, [r5, #12]
 800a00a:	e7e6      	b.n	8009fda <__swsetup_r+0x1e>
 800a00c:	0758      	lsls	r0, r3, #29
 800a00e:	d512      	bpl.n	800a036 <__swsetup_r+0x7a>
 800a010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a012:	b141      	cbz	r1, 800a026 <__swsetup_r+0x6a>
 800a014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a018:	4299      	cmp	r1, r3
 800a01a:	d002      	beq.n	800a022 <__swsetup_r+0x66>
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fe fb93 	bl	8008748 <_free_r>
 800a022:	2300      	movs	r3, #0
 800a024:	6363      	str	r3, [r4, #52]	; 0x34
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	2300      	movs	r3, #0
 800a030:	6063      	str	r3, [r4, #4]
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f043 0308 	orr.w	r3, r3, #8
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	b94b      	cbnz	r3, 800a056 <__swsetup_r+0x9a>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04c:	d003      	beq.n	800a056 <__swsetup_r+0x9a>
 800a04e:	4621      	mov	r1, r4
 800a050:	4630      	mov	r0, r6
 800a052:	f001 fbe1 	bl	800b818 <__smakebuf_r>
 800a056:	89a0      	ldrh	r0, [r4, #12]
 800a058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a05c:	f010 0301 	ands.w	r3, r0, #1
 800a060:	d00a      	beq.n	800a078 <__swsetup_r+0xbc>
 800a062:	2300      	movs	r3, #0
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	6963      	ldr	r3, [r4, #20]
 800a068:	425b      	negs	r3, r3
 800a06a:	61a3      	str	r3, [r4, #24]
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	b943      	cbnz	r3, 800a082 <__swsetup_r+0xc6>
 800a070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a074:	d1ba      	bne.n	8009fec <__swsetup_r+0x30>
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	0781      	lsls	r1, r0, #30
 800a07a:	bf58      	it	pl
 800a07c:	6963      	ldrpl	r3, [r4, #20]
 800a07e:	60a3      	str	r3, [r4, #8]
 800a080:	e7f4      	b.n	800a06c <__swsetup_r+0xb0>
 800a082:	2000      	movs	r0, #0
 800a084:	e7f7      	b.n	800a076 <__swsetup_r+0xba>
 800a086:	bf00      	nop
 800a088:	2000000c 	.word	0x2000000c
 800a08c:	0800cce4 	.word	0x0800cce4
 800a090:	0800cd04 	.word	0x0800cd04
 800a094:	0800ccc4 	.word	0x0800ccc4

0800a098 <quorem>:
 800a098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	6903      	ldr	r3, [r0, #16]
 800a09e:	690c      	ldr	r4, [r1, #16]
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	f2c0 8081 	blt.w	800a1aa <quorem+0x112>
 800a0a8:	3c01      	subs	r4, #1
 800a0aa:	f101 0814 	add.w	r8, r1, #20
 800a0ae:	f100 0514 	add.w	r5, r0, #20
 800a0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0d0:	d331      	bcc.n	800a136 <quorem+0x9e>
 800a0d2:	f04f 0e00 	mov.w	lr, #0
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	46ac      	mov	ip, r5
 800a0da:	46f2      	mov	sl, lr
 800a0dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0e0:	b293      	uxth	r3, r2
 800a0e2:	fb06 e303 	mla	r3, r6, r3, lr
 800a0e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a0f0:	0c12      	lsrs	r2, r2, #16
 800a0f2:	f8dc a000 	ldr.w	sl, [ip]
 800a0f6:	fb06 e202 	mla	r2, r6, r2, lr
 800a0fa:	fa13 f38a 	uxtah	r3, r3, sl
 800a0fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a102:	fa1f fa82 	uxth.w	sl, r2
 800a106:	f8dc 2000 	ldr.w	r2, [ip]
 800a10a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a10e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a112:	b29b      	uxth	r3, r3
 800a114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a118:	4581      	cmp	r9, r0
 800a11a:	f84c 3b04 	str.w	r3, [ip], #4
 800a11e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a122:	d2db      	bcs.n	800a0dc <quorem+0x44>
 800a124:	f855 300b 	ldr.w	r3, [r5, fp]
 800a128:	b92b      	cbnz	r3, 800a136 <quorem+0x9e>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	429d      	cmp	r5, r3
 800a130:	461a      	mov	r2, r3
 800a132:	d32e      	bcc.n	800a192 <quorem+0xfa>
 800a134:	613c      	str	r4, [r7, #16]
 800a136:	4638      	mov	r0, r7
 800a138:	f001 fe92 	bl	800be60 <__mcmp>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	db24      	blt.n	800a18a <quorem+0xf2>
 800a140:	3601      	adds	r6, #1
 800a142:	4628      	mov	r0, r5
 800a144:	f04f 0c00 	mov.w	ip, #0
 800a148:	f858 2b04 	ldr.w	r2, [r8], #4
 800a14c:	f8d0 e000 	ldr.w	lr, [r0]
 800a150:	b293      	uxth	r3, r2
 800a152:	ebac 0303 	sub.w	r3, ip, r3
 800a156:	0c12      	lsrs	r2, r2, #16
 800a158:	fa13 f38e 	uxtah	r3, r3, lr
 800a15c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a164:	b29b      	uxth	r3, r3
 800a166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16a:	45c1      	cmp	r9, r8
 800a16c:	f840 3b04 	str.w	r3, [r0], #4
 800a170:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a174:	d2e8      	bcs.n	800a148 <quorem+0xb0>
 800a176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a17e:	b922      	cbnz	r2, 800a18a <quorem+0xf2>
 800a180:	3b04      	subs	r3, #4
 800a182:	429d      	cmp	r5, r3
 800a184:	461a      	mov	r2, r3
 800a186:	d30a      	bcc.n	800a19e <quorem+0x106>
 800a188:	613c      	str	r4, [r7, #16]
 800a18a:	4630      	mov	r0, r6
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	3b04      	subs	r3, #4
 800a196:	2a00      	cmp	r2, #0
 800a198:	d1cc      	bne.n	800a134 <quorem+0x9c>
 800a19a:	3c01      	subs	r4, #1
 800a19c:	e7c7      	b.n	800a12e <quorem+0x96>
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	d1f0      	bne.n	800a188 <quorem+0xf0>
 800a1a6:	3c01      	subs	r4, #1
 800a1a8:	e7eb      	b.n	800a182 <quorem+0xea>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	e7ee      	b.n	800a18c <quorem+0xf4>
	...

0800a1b0 <_dtoa_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1b6:	b099      	sub	sp, #100	; 0x64
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	461f      	mov	r7, r3
 800a1bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a1c0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b974      	cbnz	r4, 800a1e6 <_dtoa_r+0x36>
 800a1c8:	2010      	movs	r0, #16
 800a1ca:	f7fe fa97 	bl	80086fc <malloc>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	6268      	str	r0, [r5, #36]	; 0x24
 800a1d2:	b920      	cbnz	r0, 800a1de <_dtoa_r+0x2e>
 800a1d4:	4ba8      	ldr	r3, [pc, #672]	; (800a478 <_dtoa_r+0x2c8>)
 800a1d6:	21ea      	movs	r1, #234	; 0xea
 800a1d8:	48a8      	ldr	r0, [pc, #672]	; (800a47c <_dtoa_r+0x2cc>)
 800a1da:	f002 f9fd 	bl	800c5d8 <__assert_func>
 800a1de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1e2:	6004      	str	r4, [r0, #0]
 800a1e4:	60c4      	str	r4, [r0, #12]
 800a1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e8:	6819      	ldr	r1, [r3, #0]
 800a1ea:	b151      	cbz	r1, 800a202 <_dtoa_r+0x52>
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	604a      	str	r2, [r1, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	608b      	str	r3, [r1, #8]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f001 fbac 	bl	800b954 <_Bfree>
 800a1fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	1e3b      	subs	r3, r7, #0
 800a204:	bfb9      	ittee	lt
 800a206:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a20a:	9305      	strlt	r3, [sp, #20]
 800a20c:	2300      	movge	r3, #0
 800a20e:	f8c8 3000 	strge.w	r3, [r8]
 800a212:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a216:	4b9a      	ldr	r3, [pc, #616]	; (800a480 <_dtoa_r+0x2d0>)
 800a218:	bfbc      	itt	lt
 800a21a:	2201      	movlt	r2, #1
 800a21c:	f8c8 2000 	strlt.w	r2, [r8]
 800a220:	ea33 0309 	bics.w	r3, r3, r9
 800a224:	d119      	bne.n	800a25a <_dtoa_r+0xaa>
 800a226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a228:	f242 730f 	movw	r3, #9999	; 0x270f
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a232:	4333      	orrs	r3, r6
 800a234:	f000 8581 	beq.w	800ad3a <_dtoa_r+0xb8a>
 800a238:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a23a:	b953      	cbnz	r3, 800a252 <_dtoa_r+0xa2>
 800a23c:	4b91      	ldr	r3, [pc, #580]	; (800a484 <_dtoa_r+0x2d4>)
 800a23e:	e022      	b.n	800a286 <_dtoa_r+0xd6>
 800a240:	4b91      	ldr	r3, [pc, #580]	; (800a488 <_dtoa_r+0x2d8>)
 800a242:	9308      	str	r3, [sp, #32]
 800a244:	3308      	adds	r3, #8
 800a246:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	9808      	ldr	r0, [sp, #32]
 800a24c:	b019      	add	sp, #100	; 0x64
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a252:	4b8c      	ldr	r3, [pc, #560]	; (800a484 <_dtoa_r+0x2d4>)
 800a254:	9308      	str	r3, [sp, #32]
 800a256:	3303      	adds	r3, #3
 800a258:	e7f5      	b.n	800a246 <_dtoa_r+0x96>
 800a25a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a25e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a266:	2200      	movs	r2, #0
 800a268:	2300      	movs	r3, #0
 800a26a:	f7f6 fc05 	bl	8000a78 <__aeabi_dcmpeq>
 800a26e:	4680      	mov	r8, r0
 800a270:	b158      	cbz	r0, 800a28a <_dtoa_r+0xda>
 800a272:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a274:	2301      	movs	r3, #1
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 855a 	beq.w	800ad34 <_dtoa_r+0xb84>
 800a280:	4882      	ldr	r0, [pc, #520]	; (800a48c <_dtoa_r+0x2dc>)
 800a282:	6018      	str	r0, [r3, #0]
 800a284:	1e43      	subs	r3, r0, #1
 800a286:	9308      	str	r3, [sp, #32]
 800a288:	e7df      	b.n	800a24a <_dtoa_r+0x9a>
 800a28a:	ab16      	add	r3, sp, #88	; 0x58
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	ab17      	add	r3, sp, #92	; 0x5c
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4628      	mov	r0, r5
 800a294:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a298:	f001 ff02 	bl	800c0a0 <__d2b>
 800a29c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	2c00      	cmp	r4, #0
 800a2a4:	d07e      	beq.n	800a3a4 <_dtoa_r+0x1f4>
 800a2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a2b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a2bc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a2c0:	4b73      	ldr	r3, [pc, #460]	; (800a490 <_dtoa_r+0x2e0>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f7f5 ffb8 	bl	8000238 <__aeabi_dsub>
 800a2c8:	a365      	add	r3, pc, #404	; (adr r3, 800a460 <_dtoa_r+0x2b0>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 f96b 	bl	80005a8 <__aeabi_dmul>
 800a2d2:	a365      	add	r3, pc, #404	; (adr r3, 800a468 <_dtoa_r+0x2b8>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f5 ffb0 	bl	800023c <__adddf3>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	4620      	mov	r0, r4
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	f7f6 f8f7 	bl	80004d4 <__aeabi_i2d>
 800a2e6:	a362      	add	r3, pc, #392	; (adr r3, 800a470 <_dtoa_r+0x2c0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f6 f95c 	bl	80005a8 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f5 ffa0 	bl	800023c <__adddf3>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7f6 fc02 	bl	8000b08 <__aeabi_d2iz>
 800a304:	2200      	movs	r2, #0
 800a306:	4681      	mov	r9, r0
 800a308:	2300      	movs	r3, #0
 800a30a:	4630      	mov	r0, r6
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f6 fbbd 	bl	8000a8c <__aeabi_dcmplt>
 800a312:	b148      	cbz	r0, 800a328 <_dtoa_r+0x178>
 800a314:	4648      	mov	r0, r9
 800a316:	f7f6 f8dd 	bl	80004d4 <__aeabi_i2d>
 800a31a:	4632      	mov	r2, r6
 800a31c:	463b      	mov	r3, r7
 800a31e:	f7f6 fbab 	bl	8000a78 <__aeabi_dcmpeq>
 800a322:	b908      	cbnz	r0, 800a328 <_dtoa_r+0x178>
 800a324:	f109 39ff 	add.w	r9, r9, #4294967295
 800a328:	f1b9 0f16 	cmp.w	r9, #22
 800a32c:	d857      	bhi.n	800a3de <_dtoa_r+0x22e>
 800a32e:	4b59      	ldr	r3, [pc, #356]	; (800a494 <_dtoa_r+0x2e4>)
 800a330:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a33c:	f7f6 fba6 	bl	8000a8c <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	d04e      	beq.n	800a3e2 <_dtoa_r+0x232>
 800a344:	f109 39ff 	add.w	r9, r9, #4294967295
 800a348:	2300      	movs	r3, #0
 800a34a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a34e:	1b1c      	subs	r4, r3, r4
 800a350:	1e63      	subs	r3, r4, #1
 800a352:	9309      	str	r3, [sp, #36]	; 0x24
 800a354:	bf45      	ittet	mi
 800a356:	f1c4 0301 	rsbmi	r3, r4, #1
 800a35a:	9306      	strmi	r3, [sp, #24]
 800a35c:	2300      	movpl	r3, #0
 800a35e:	2300      	movmi	r3, #0
 800a360:	bf4c      	ite	mi
 800a362:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a364:	9306      	strpl	r3, [sp, #24]
 800a366:	f1b9 0f00 	cmp.w	r9, #0
 800a36a:	db3c      	blt.n	800a3e6 <_dtoa_r+0x236>
 800a36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a372:	444b      	add	r3, r9
 800a374:	9309      	str	r3, [sp, #36]	; 0x24
 800a376:	2300      	movs	r3, #0
 800a378:	930a      	str	r3, [sp, #40]	; 0x28
 800a37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	f200 808d 	bhi.w	800a49c <_dtoa_r+0x2ec>
 800a382:	2b05      	cmp	r3, #5
 800a384:	bfc4      	itt	gt
 800a386:	3b04      	subgt	r3, #4
 800a388:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a38a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a38c:	f1a3 0302 	sub.w	r3, r3, #2
 800a390:	bfcc      	ite	gt
 800a392:	2400      	movgt	r4, #0
 800a394:	2401      	movle	r4, #1
 800a396:	2b03      	cmp	r3, #3
 800a398:	f200 808c 	bhi.w	800a4b4 <_dtoa_r+0x304>
 800a39c:	e8df f003 	tbb	[pc, r3]
 800a3a0:	5b4d4f2d 	.word	0x5b4d4f2d
 800a3a4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a3a8:	441c      	add	r4, r3
 800a3aa:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a3ae:	2b20      	cmp	r3, #32
 800a3b0:	bfc3      	ittte	gt
 800a3b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3b6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a3ba:	fa09 f303 	lslgt.w	r3, r9, r3
 800a3be:	f1c3 0320 	rsble	r3, r3, #32
 800a3c2:	bfc6      	itte	gt
 800a3c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3c8:	4318      	orrgt	r0, r3
 800a3ca:	fa06 f003 	lslle.w	r0, r6, r3
 800a3ce:	f7f6 f871 	bl	80004b4 <__aeabi_ui2d>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a3d8:	3c01      	subs	r4, #1
 800a3da:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3dc:	e770      	b.n	800a2c0 <_dtoa_r+0x110>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7b3      	b.n	800a34a <_dtoa_r+0x19a>
 800a3e2:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3e4:	e7b2      	b.n	800a34c <_dtoa_r+0x19c>
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	eba3 0309 	sub.w	r3, r3, r9
 800a3ec:	9306      	str	r3, [sp, #24]
 800a3ee:	f1c9 0300 	rsb	r3, r9, #0
 800a3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3f8:	e7bf      	b.n	800a37a <_dtoa_r+0x1ca>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc5a      	bgt.n	800a4ba <_dtoa_r+0x30a>
 800a404:	f04f 0b01 	mov.w	fp, #1
 800a408:	f8cd b008 	str.w	fp, [sp, #8]
 800a40c:	465b      	mov	r3, fp
 800a40e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a412:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a414:	2200      	movs	r2, #0
 800a416:	6042      	str	r2, [r0, #4]
 800a418:	2204      	movs	r2, #4
 800a41a:	f102 0614 	add.w	r6, r2, #20
 800a41e:	429e      	cmp	r6, r3
 800a420:	6841      	ldr	r1, [r0, #4]
 800a422:	d950      	bls.n	800a4c6 <_dtoa_r+0x316>
 800a424:	4628      	mov	r0, r5
 800a426:	f001 fa55 	bl	800b8d4 <_Balloc>
 800a42a:	9008      	str	r0, [sp, #32]
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d14e      	bne.n	800a4ce <_dtoa_r+0x31e>
 800a430:	4b19      	ldr	r3, [pc, #100]	; (800a498 <_dtoa_r+0x2e8>)
 800a432:	4602      	mov	r2, r0
 800a434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a438:	e6ce      	b.n	800a1d8 <_dtoa_r+0x28>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7de      	b.n	800a3fc <_dtoa_r+0x24c>
 800a43e:	2300      	movs	r3, #0
 800a440:	930b      	str	r3, [sp, #44]	; 0x2c
 800a442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a444:	eb09 0b03 	add.w	fp, r9, r3
 800a448:	f10b 0301 	add.w	r3, fp, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	bfb8      	it	lt
 800a452:	2301      	movlt	r3, #1
 800a454:	e7dd      	b.n	800a412 <_dtoa_r+0x262>
 800a456:	2301      	movs	r3, #1
 800a458:	e7f2      	b.n	800a440 <_dtoa_r+0x290>
 800a45a:	bf00      	nop
 800a45c:	f3af 8000 	nop.w
 800a460:	636f4361 	.word	0x636f4361
 800a464:	3fd287a7 	.word	0x3fd287a7
 800a468:	8b60c8b3 	.word	0x8b60c8b3
 800a46c:	3fc68a28 	.word	0x3fc68a28
 800a470:	509f79fb 	.word	0x509f79fb
 800a474:	3fd34413 	.word	0x3fd34413
 800a478:	0800cc3d 	.word	0x0800cc3d
 800a47c:	0800cc54 	.word	0x0800cc54
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	0800cc39 	.word	0x0800cc39
 800a488:	0800cc30 	.word	0x0800cc30
 800a48c:	0800cbbd 	.word	0x0800cbbd
 800a490:	3ff80000 	.word	0x3ff80000
 800a494:	0800ce30 	.word	0x0800ce30
 800a498:	0800ccb3 	.word	0x0800ccb3
 800a49c:	2401      	movs	r4, #1
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9322      	str	r3, [sp, #136]	; 0x88
 800a4a2:	940b      	str	r4, [sp, #44]	; 0x2c
 800a4a4:	f04f 3bff 	mov.w	fp, #4294967295
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a4ae:	2312      	movs	r3, #18
 800a4b0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a4b2:	e7ae      	b.n	800a412 <_dtoa_r+0x262>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4b8:	e7f4      	b.n	800a4a4 <_dtoa_r+0x2f4>
 800a4ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a4be:	f8cd b008 	str.w	fp, [sp, #8]
 800a4c2:	465b      	mov	r3, fp
 800a4c4:	e7a5      	b.n	800a412 <_dtoa_r+0x262>
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	6041      	str	r1, [r0, #4]
 800a4ca:	0052      	lsls	r2, r2, #1
 800a4cc:	e7a5      	b.n	800a41a <_dtoa_r+0x26a>
 800a4ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4d0:	9a08      	ldr	r2, [sp, #32]
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	9b02      	ldr	r3, [sp, #8]
 800a4d6:	2b0e      	cmp	r3, #14
 800a4d8:	f200 80a8 	bhi.w	800a62c <_dtoa_r+0x47c>
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	f000 80a5 	beq.w	800a62c <_dtoa_r+0x47c>
 800a4e2:	f1b9 0f00 	cmp.w	r9, #0
 800a4e6:	dd34      	ble.n	800a552 <_dtoa_r+0x3a2>
 800a4e8:	4a9a      	ldr	r2, [pc, #616]	; (800a754 <_dtoa_r+0x5a4>)
 800a4ea:	f009 030f 	and.w	r3, r9, #15
 800a4ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4f6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a4fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a4fe:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a502:	d016      	beq.n	800a532 <_dtoa_r+0x382>
 800a504:	4b94      	ldr	r3, [pc, #592]	; (800a758 <_dtoa_r+0x5a8>)
 800a506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a50a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a50e:	f7f6 f975 	bl	80007fc <__aeabi_ddiv>
 800a512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a516:	f004 040f 	and.w	r4, r4, #15
 800a51a:	2703      	movs	r7, #3
 800a51c:	4e8e      	ldr	r6, [pc, #568]	; (800a758 <_dtoa_r+0x5a8>)
 800a51e:	b954      	cbnz	r4, 800a536 <_dtoa_r+0x386>
 800a520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a528:	f7f6 f968 	bl	80007fc <__aeabi_ddiv>
 800a52c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a530:	e029      	b.n	800a586 <_dtoa_r+0x3d6>
 800a532:	2702      	movs	r7, #2
 800a534:	e7f2      	b.n	800a51c <_dtoa_r+0x36c>
 800a536:	07e1      	lsls	r1, r4, #31
 800a538:	d508      	bpl.n	800a54c <_dtoa_r+0x39c>
 800a53a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a53e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a542:	f7f6 f831 	bl	80005a8 <__aeabi_dmul>
 800a546:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a54a:	3701      	adds	r7, #1
 800a54c:	1064      	asrs	r4, r4, #1
 800a54e:	3608      	adds	r6, #8
 800a550:	e7e5      	b.n	800a51e <_dtoa_r+0x36e>
 800a552:	f000 80a5 	beq.w	800a6a0 <_dtoa_r+0x4f0>
 800a556:	f1c9 0400 	rsb	r4, r9, #0
 800a55a:	4b7e      	ldr	r3, [pc, #504]	; (800a754 <_dtoa_r+0x5a4>)
 800a55c:	4e7e      	ldr	r6, [pc, #504]	; (800a758 <_dtoa_r+0x5a8>)
 800a55e:	f004 020f 	and.w	r2, r4, #15
 800a562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a56e:	f7f6 f81b 	bl	80005a8 <__aeabi_dmul>
 800a572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a576:	1124      	asrs	r4, r4, #4
 800a578:	2300      	movs	r3, #0
 800a57a:	2702      	movs	r7, #2
 800a57c:	2c00      	cmp	r4, #0
 800a57e:	f040 8084 	bne.w	800a68a <_dtoa_r+0x4da>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1d2      	bne.n	800a52c <_dtoa_r+0x37c>
 800a586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 808b 	beq.w	800a6a4 <_dtoa_r+0x4f4>
 800a58e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a592:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a596:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a59a:	4b70      	ldr	r3, [pc, #448]	; (800a75c <_dtoa_r+0x5ac>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	f7f6 fa75 	bl	8000a8c <__aeabi_dcmplt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d07e      	beq.n	800a6a4 <_dtoa_r+0x4f4>
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d07b      	beq.n	800a6a4 <_dtoa_r+0x4f4>
 800a5ac:	f1bb 0f00 	cmp.w	fp, #0
 800a5b0:	dd38      	ble.n	800a624 <_dtoa_r+0x474>
 800a5b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5b6:	4b6a      	ldr	r3, [pc, #424]	; (800a760 <_dtoa_r+0x5b0>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f7f5 fff5 	bl	80005a8 <__aeabi_dmul>
 800a5be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c2:	f109 38ff 	add.w	r8, r9, #4294967295
 800a5c6:	3701      	adds	r7, #1
 800a5c8:	465c      	mov	r4, fp
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7f5 ff82 	bl	80004d4 <__aeabi_i2d>
 800a5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5d4:	f7f5 ffe8 	bl	80005a8 <__aeabi_dmul>
 800a5d8:	4b62      	ldr	r3, [pc, #392]	; (800a764 <_dtoa_r+0x5b4>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f7f5 fe2e 	bl	800023c <__adddf3>
 800a5e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5e8:	9611      	str	r6, [sp, #68]	; 0x44
 800a5ea:	2c00      	cmp	r4, #0
 800a5ec:	d15d      	bne.n	800a6aa <_dtoa_r+0x4fa>
 800a5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5f2:	4b5d      	ldr	r3, [pc, #372]	; (800a768 <_dtoa_r+0x5b8>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f7f5 fe1f 	bl	8000238 <__aeabi_dsub>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a602:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a604:	4633      	mov	r3, r6
 800a606:	f7f6 fa5f 	bl	8000ac8 <__aeabi_dcmpgt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	f040 829e 	bne.w	800ab4c <_dtoa_r+0x99c>
 800a610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a616:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a61a:	f7f6 fa37 	bl	8000a8c <__aeabi_dcmplt>
 800a61e:	2800      	cmp	r0, #0
 800a620:	f040 8292 	bne.w	800ab48 <_dtoa_r+0x998>
 800a624:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a628:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a62c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f2c0 8153 	blt.w	800a8da <_dtoa_r+0x72a>
 800a634:	f1b9 0f0e 	cmp.w	r9, #14
 800a638:	f300 814f 	bgt.w	800a8da <_dtoa_r+0x72a>
 800a63c:	4b45      	ldr	r3, [pc, #276]	; (800a754 <_dtoa_r+0x5a4>)
 800a63e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a642:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a646:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a64a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f280 80db 	bge.w	800a808 <_dtoa_r+0x658>
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f300 80d7 	bgt.w	800a808 <_dtoa_r+0x658>
 800a65a:	f040 8274 	bne.w	800ab46 <_dtoa_r+0x996>
 800a65e:	4b42      	ldr	r3, [pc, #264]	; (800a768 <_dtoa_r+0x5b8>)
 800a660:	2200      	movs	r2, #0
 800a662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a666:	f7f5 ff9f 	bl	80005a8 <__aeabi_dmul>
 800a66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a66e:	f7f6 fa21 	bl	8000ab4 <__aeabi_dcmpge>
 800a672:	9c02      	ldr	r4, [sp, #8]
 800a674:	4626      	mov	r6, r4
 800a676:	2800      	cmp	r0, #0
 800a678:	f040 824a 	bne.w	800ab10 <_dtoa_r+0x960>
 800a67c:	9f08      	ldr	r7, [sp, #32]
 800a67e:	2331      	movs	r3, #49	; 0x31
 800a680:	f807 3b01 	strb.w	r3, [r7], #1
 800a684:	f109 0901 	add.w	r9, r9, #1
 800a688:	e246      	b.n	800ab18 <_dtoa_r+0x968>
 800a68a:	07e2      	lsls	r2, r4, #31
 800a68c:	d505      	bpl.n	800a69a <_dtoa_r+0x4ea>
 800a68e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a692:	f7f5 ff89 	bl	80005a8 <__aeabi_dmul>
 800a696:	3701      	adds	r7, #1
 800a698:	2301      	movs	r3, #1
 800a69a:	1064      	asrs	r4, r4, #1
 800a69c:	3608      	adds	r6, #8
 800a69e:	e76d      	b.n	800a57c <_dtoa_r+0x3cc>
 800a6a0:	2702      	movs	r7, #2
 800a6a2:	e770      	b.n	800a586 <_dtoa_r+0x3d6>
 800a6a4:	9c02      	ldr	r4, [sp, #8]
 800a6a6:	46c8      	mov	r8, r9
 800a6a8:	e78f      	b.n	800a5ca <_dtoa_r+0x41a>
 800a6aa:	9908      	ldr	r1, [sp, #32]
 800a6ac:	4b29      	ldr	r3, [pc, #164]	; (800a754 <_dtoa_r+0x5a4>)
 800a6ae:	4421      	add	r1, r4
 800a6b0:	9112      	str	r1, [sp, #72]	; 0x48
 800a6b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a6bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6c0:	2900      	cmp	r1, #0
 800a6c2:	d055      	beq.n	800a770 <_dtoa_r+0x5c0>
 800a6c4:	4929      	ldr	r1, [pc, #164]	; (800a76c <_dtoa_r+0x5bc>)
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f7f6 f898 	bl	80007fc <__aeabi_ddiv>
 800a6cc:	463b      	mov	r3, r7
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	f7f5 fdb2 	bl	8000238 <__aeabi_dsub>
 800a6d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6d8:	9f08      	ldr	r7, [sp, #32]
 800a6da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6de:	f7f6 fa13 	bl	8000b08 <__aeabi_d2iz>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	f7f5 fef6 	bl	80004d4 <__aeabi_i2d>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6f0:	f7f5 fda2 	bl	8000238 <__aeabi_dsub>
 800a6f4:	3430      	adds	r4, #48	; 0x30
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6fe:	f807 4b01 	strb.w	r4, [r7], #1
 800a702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a706:	f7f6 f9c1 	bl	8000a8c <__aeabi_dcmplt>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d174      	bne.n	800a7f8 <_dtoa_r+0x648>
 800a70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a712:	4912      	ldr	r1, [pc, #72]	; (800a75c <_dtoa_r+0x5ac>)
 800a714:	2000      	movs	r0, #0
 800a716:	f7f5 fd8f 	bl	8000238 <__aeabi_dsub>
 800a71a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a71e:	f7f6 f9b5 	bl	8000a8c <__aeabi_dcmplt>
 800a722:	2800      	cmp	r0, #0
 800a724:	f040 80b6 	bne.w	800a894 <_dtoa_r+0x6e4>
 800a728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a72a:	429f      	cmp	r7, r3
 800a72c:	f43f af7a 	beq.w	800a624 <_dtoa_r+0x474>
 800a730:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <_dtoa_r+0x5b0>)
 800a736:	2200      	movs	r2, #0
 800a738:	f7f5 ff36 	bl	80005a8 <__aeabi_dmul>
 800a73c:	4b08      	ldr	r3, [pc, #32]	; (800a760 <_dtoa_r+0x5b0>)
 800a73e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a742:	2200      	movs	r2, #0
 800a744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a748:	f7f5 ff2e 	bl	80005a8 <__aeabi_dmul>
 800a74c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a750:	e7c3      	b.n	800a6da <_dtoa_r+0x52a>
 800a752:	bf00      	nop
 800a754:	0800ce30 	.word	0x0800ce30
 800a758:	0800ce08 	.word	0x0800ce08
 800a75c:	3ff00000 	.word	0x3ff00000
 800a760:	40240000 	.word	0x40240000
 800a764:	401c0000 	.word	0x401c0000
 800a768:	40140000 	.word	0x40140000
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	4630      	mov	r0, r6
 800a772:	4639      	mov	r1, r7
 800a774:	f7f5 ff18 	bl	80005a8 <__aeabi_dmul>
 800a778:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a77c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a77e:	9c08      	ldr	r4, [sp, #32]
 800a780:	9314      	str	r3, [sp, #80]	; 0x50
 800a782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a786:	f7f6 f9bf 	bl	8000b08 <__aeabi_d2iz>
 800a78a:	9015      	str	r0, [sp, #84]	; 0x54
 800a78c:	f7f5 fea2 	bl	80004d4 <__aeabi_i2d>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a798:	f7f5 fd4e 	bl	8000238 <__aeabi_dsub>
 800a79c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79e:	3330      	adds	r3, #48	; 0x30
 800a7a0:	f804 3b01 	strb.w	r3, [r4], #1
 800a7a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a6:	429c      	cmp	r4, r3
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	d124      	bne.n	800a7fc <_dtoa_r+0x64c>
 800a7b2:	4bb2      	ldr	r3, [pc, #712]	; (800aa7c <_dtoa_r+0x8cc>)
 800a7b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7b8:	f7f5 fd40 	bl	800023c <__adddf3>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f980 	bl	8000ac8 <__aeabi_dcmpgt>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d162      	bne.n	800a892 <_dtoa_r+0x6e2>
 800a7cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7d0:	49aa      	ldr	r1, [pc, #680]	; (800aa7c <_dtoa_r+0x8cc>)
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f7f5 fd30 	bl	8000238 <__aeabi_dsub>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4630      	mov	r0, r6
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f6 f954 	bl	8000a8c <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f43f af1d 	beq.w	800a624 <_dtoa_r+0x474>
 800a7ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a7ec:	1e7b      	subs	r3, r7, #1
 800a7ee:	9314      	str	r3, [sp, #80]	; 0x50
 800a7f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a7f4:	2b30      	cmp	r3, #48	; 0x30
 800a7f6:	d0f8      	beq.n	800a7ea <_dtoa_r+0x63a>
 800a7f8:	46c1      	mov	r9, r8
 800a7fa:	e03a      	b.n	800a872 <_dtoa_r+0x6c2>
 800a7fc:	4ba0      	ldr	r3, [pc, #640]	; (800aa80 <_dtoa_r+0x8d0>)
 800a7fe:	f7f5 fed3 	bl	80005a8 <__aeabi_dmul>
 800a802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a806:	e7bc      	b.n	800a782 <_dtoa_r+0x5d2>
 800a808:	9f08      	ldr	r7, [sp, #32]
 800a80a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a80e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a812:	f7f5 fff3 	bl	80007fc <__aeabi_ddiv>
 800a816:	f7f6 f977 	bl	8000b08 <__aeabi_d2iz>
 800a81a:	4604      	mov	r4, r0
 800a81c:	f7f5 fe5a 	bl	80004d4 <__aeabi_i2d>
 800a820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a824:	f7f5 fec0 	bl	80005a8 <__aeabi_dmul>
 800a828:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a82c:	460b      	mov	r3, r1
 800a82e:	4602      	mov	r2, r0
 800a830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a834:	f7f5 fd00 	bl	8000238 <__aeabi_dsub>
 800a838:	f807 6b01 	strb.w	r6, [r7], #1
 800a83c:	9e08      	ldr	r6, [sp, #32]
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	1bbe      	subs	r6, r7, r6
 800a842:	42b3      	cmp	r3, r6
 800a844:	d13a      	bne.n	800a8bc <_dtoa_r+0x70c>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	f7f5 fcf7 	bl	800023c <__adddf3>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a85a:	f7f6 f935 	bl	8000ac8 <__aeabi_dcmpgt>
 800a85e:	bb58      	cbnz	r0, 800a8b8 <_dtoa_r+0x708>
 800a860:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a868:	f7f6 f906 	bl	8000a78 <__aeabi_dcmpeq>
 800a86c:	b108      	cbz	r0, 800a872 <_dtoa_r+0x6c2>
 800a86e:	07e1      	lsls	r1, r4, #31
 800a870:	d422      	bmi.n	800a8b8 <_dtoa_r+0x708>
 800a872:	4628      	mov	r0, r5
 800a874:	4651      	mov	r1, sl
 800a876:	f001 f86d 	bl	800b954 <_Bfree>
 800a87a:	2300      	movs	r3, #0
 800a87c:	703b      	strb	r3, [r7, #0]
 800a87e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a880:	f109 0001 	add.w	r0, r9, #1
 800a884:	6018      	str	r0, [r3, #0]
 800a886:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f43f acde 	beq.w	800a24a <_dtoa_r+0x9a>
 800a88e:	601f      	str	r7, [r3, #0]
 800a890:	e4db      	b.n	800a24a <_dtoa_r+0x9a>
 800a892:	4627      	mov	r7, r4
 800a894:	463b      	mov	r3, r7
 800a896:	461f      	mov	r7, r3
 800a898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a89c:	2a39      	cmp	r2, #57	; 0x39
 800a89e:	d107      	bne.n	800a8b0 <_dtoa_r+0x700>
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d1f7      	bne.n	800a896 <_dtoa_r+0x6e6>
 800a8a6:	9908      	ldr	r1, [sp, #32]
 800a8a8:	2230      	movs	r2, #48	; 0x30
 800a8aa:	f108 0801 	add.w	r8, r8, #1
 800a8ae:	700a      	strb	r2, [r1, #0]
 800a8b0:	781a      	ldrb	r2, [r3, #0]
 800a8b2:	3201      	adds	r2, #1
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e79f      	b.n	800a7f8 <_dtoa_r+0x648>
 800a8b8:	46c8      	mov	r8, r9
 800a8ba:	e7eb      	b.n	800a894 <_dtoa_r+0x6e4>
 800a8bc:	4b70      	ldr	r3, [pc, #448]	; (800aa80 <_dtoa_r+0x8d0>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f7f5 fe72 	bl	80005a8 <__aeabi_dmul>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f7f6 f8d2 	bl	8000a78 <__aeabi_dcmpeq>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d098      	beq.n	800a80a <_dtoa_r+0x65a>
 800a8d8:	e7cb      	b.n	800a872 <_dtoa_r+0x6c2>
 800a8da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	f000 80d1 	beq.w	800aa84 <_dtoa_r+0x8d4>
 800a8e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8e4:	2a01      	cmp	r2, #1
 800a8e6:	f300 80af 	bgt.w	800aa48 <_dtoa_r+0x898>
 800a8ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f000 80a7 	beq.w	800aa40 <_dtoa_r+0x890>
 800a8f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8f8:	9f06      	ldr	r7, [sp, #24]
 800a8fa:	9a06      	ldr	r2, [sp, #24]
 800a8fc:	441a      	add	r2, r3
 800a8fe:	9206      	str	r2, [sp, #24]
 800a900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a902:	2101      	movs	r1, #1
 800a904:	441a      	add	r2, r3
 800a906:	4628      	mov	r0, r5
 800a908:	9209      	str	r2, [sp, #36]	; 0x24
 800a90a:	f001 f927 	bl	800bb5c <__i2b>
 800a90e:	4606      	mov	r6, r0
 800a910:	2f00      	cmp	r7, #0
 800a912:	dd0c      	ble.n	800a92e <_dtoa_r+0x77e>
 800a914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	dd09      	ble.n	800a92e <_dtoa_r+0x77e>
 800a91a:	42bb      	cmp	r3, r7
 800a91c:	9a06      	ldr	r2, [sp, #24]
 800a91e:	bfa8      	it	ge
 800a920:	463b      	movge	r3, r7
 800a922:	1ad2      	subs	r2, r2, r3
 800a924:	9206      	str	r2, [sp, #24]
 800a926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a928:	1aff      	subs	r7, r7, r3
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	9309      	str	r3, [sp, #36]	; 0x24
 800a92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a930:	b1f3      	cbz	r3, 800a970 <_dtoa_r+0x7c0>
 800a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80a9 	beq.w	800aa8c <_dtoa_r+0x8dc>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	dd10      	ble.n	800a960 <_dtoa_r+0x7b0>
 800a93e:	4631      	mov	r1, r6
 800a940:	4622      	mov	r2, r4
 800a942:	4628      	mov	r0, r5
 800a944:	f001 f9c6 	bl	800bcd4 <__pow5mult>
 800a948:	4652      	mov	r2, sl
 800a94a:	4601      	mov	r1, r0
 800a94c:	4606      	mov	r6, r0
 800a94e:	4628      	mov	r0, r5
 800a950:	f001 f91a 	bl	800bb88 <__multiply>
 800a954:	4651      	mov	r1, sl
 800a956:	4680      	mov	r8, r0
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 fffb 	bl	800b954 <_Bfree>
 800a95e:	46c2      	mov	sl, r8
 800a960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a962:	1b1a      	subs	r2, r3, r4
 800a964:	d004      	beq.n	800a970 <_dtoa_r+0x7c0>
 800a966:	4651      	mov	r1, sl
 800a968:	4628      	mov	r0, r5
 800a96a:	f001 f9b3 	bl	800bcd4 <__pow5mult>
 800a96e:	4682      	mov	sl, r0
 800a970:	2101      	movs	r1, #1
 800a972:	4628      	mov	r0, r5
 800a974:	f001 f8f2 	bl	800bb5c <__i2b>
 800a978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	4604      	mov	r4, r0
 800a97e:	f340 8087 	ble.w	800aa90 <_dtoa_r+0x8e0>
 800a982:	461a      	mov	r2, r3
 800a984:	4601      	mov	r1, r0
 800a986:	4628      	mov	r0, r5
 800a988:	f001 f9a4 	bl	800bcd4 <__pow5mult>
 800a98c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a98e:	2b01      	cmp	r3, #1
 800a990:	4604      	mov	r4, r0
 800a992:	f340 8080 	ble.w	800aa96 <_dtoa_r+0x8e6>
 800a996:	f04f 0800 	mov.w	r8, #0
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9a0:	6918      	ldr	r0, [r3, #16]
 800a9a2:	f001 f88d 	bl	800bac0 <__hi0bits>
 800a9a6:	f1c0 0020 	rsb	r0, r0, #32
 800a9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ac:	4418      	add	r0, r3
 800a9ae:	f010 001f 	ands.w	r0, r0, #31
 800a9b2:	f000 8092 	beq.w	800aada <_dtoa_r+0x92a>
 800a9b6:	f1c0 0320 	rsb	r3, r0, #32
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	f340 808a 	ble.w	800aad4 <_dtoa_r+0x924>
 800a9c0:	f1c0 001c 	rsb	r0, r0, #28
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	4403      	add	r3, r0
 800a9c8:	9306      	str	r3, [sp, #24]
 800a9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9cc:	4403      	add	r3, r0
 800a9ce:	4407      	add	r7, r0
 800a9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d2:	9b06      	ldr	r3, [sp, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dd05      	ble.n	800a9e4 <_dtoa_r+0x834>
 800a9d8:	4651      	mov	r1, sl
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f001 f9d3 	bl	800bd88 <__lshift>
 800a9e2:	4682      	mov	sl, r0
 800a9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	dd05      	ble.n	800a9f6 <_dtoa_r+0x846>
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f001 f9ca 	bl	800bd88 <__lshift>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d070      	beq.n	800aade <_dtoa_r+0x92e>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f001 fa2e 	bl	800be60 <__mcmp>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	da6a      	bge.n	800aade <_dtoa_r+0x92e>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4651      	mov	r1, sl
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f000 ffc2 	bl	800b998 <__multadd>
 800aa14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa16:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8193 	beq.w	800ad48 <_dtoa_r+0xb98>
 800aa22:	4631      	mov	r1, r6
 800aa24:	2300      	movs	r3, #0
 800aa26:	220a      	movs	r2, #10
 800aa28:	4628      	mov	r0, r5
 800aa2a:	f000 ffb5 	bl	800b998 <__multadd>
 800aa2e:	f1bb 0f00 	cmp.w	fp, #0
 800aa32:	4606      	mov	r6, r0
 800aa34:	f300 8093 	bgt.w	800ab5e <_dtoa_r+0x9ae>
 800aa38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	dc57      	bgt.n	800aaee <_dtoa_r+0x93e>
 800aa3e:	e08e      	b.n	800ab5e <_dtoa_r+0x9ae>
 800aa40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa46:	e756      	b.n	800a8f6 <_dtoa_r+0x746>
 800aa48:	9b02      	ldr	r3, [sp, #8]
 800aa4a:	1e5c      	subs	r4, r3, #1
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	bfbf      	itttt	lt
 800aa52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa54:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aa56:	1ae2      	sublt	r2, r4, r3
 800aa58:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa5a:	bfb6      	itet	lt
 800aa5c:	189b      	addlt	r3, r3, r2
 800aa5e:	1b1c      	subge	r4, r3, r4
 800aa60:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	bfb8      	it	lt
 800aa66:	2400      	movlt	r4, #0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfb9      	ittee	lt
 800aa6c:	9b06      	ldrlt	r3, [sp, #24]
 800aa6e:	9a02      	ldrlt	r2, [sp, #8]
 800aa70:	9f06      	ldrge	r7, [sp, #24]
 800aa72:	9b02      	ldrge	r3, [sp, #8]
 800aa74:	bfbc      	itt	lt
 800aa76:	1a9f      	sublt	r7, r3, r2
 800aa78:	2300      	movlt	r3, #0
 800aa7a:	e73e      	b.n	800a8fa <_dtoa_r+0x74a>
 800aa7c:	3fe00000 	.word	0x3fe00000
 800aa80:	40240000 	.word	0x40240000
 800aa84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa86:	9f06      	ldr	r7, [sp, #24]
 800aa88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa8a:	e741      	b.n	800a910 <_dtoa_r+0x760>
 800aa8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa8e:	e76a      	b.n	800a966 <_dtoa_r+0x7b6>
 800aa90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	dc19      	bgt.n	800aaca <_dtoa_r+0x91a>
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	b9bb      	cbnz	r3, 800aaca <_dtoa_r+0x91a>
 800aa9a:	9b05      	ldr	r3, [sp, #20]
 800aa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa0:	b99b      	cbnz	r3, 800aaca <_dtoa_r+0x91a>
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaa8:	0d1b      	lsrs	r3, r3, #20
 800aaaa:	051b      	lsls	r3, r3, #20
 800aaac:	b183      	cbz	r3, 800aad0 <_dtoa_r+0x920>
 800aaae:	9b06      	ldr	r3, [sp, #24]
 800aab0:	3301      	adds	r3, #1
 800aab2:	9306      	str	r3, [sp, #24]
 800aab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab6:	3301      	adds	r3, #1
 800aab8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaba:	f04f 0801 	mov.w	r8, #1
 800aabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f47f af6a 	bne.w	800a99a <_dtoa_r+0x7ea>
 800aac6:	2001      	movs	r0, #1
 800aac8:	e76f      	b.n	800a9aa <_dtoa_r+0x7fa>
 800aaca:	f04f 0800 	mov.w	r8, #0
 800aace:	e7f6      	b.n	800aabe <_dtoa_r+0x90e>
 800aad0:	4698      	mov	r8, r3
 800aad2:	e7f4      	b.n	800aabe <_dtoa_r+0x90e>
 800aad4:	f43f af7d 	beq.w	800a9d2 <_dtoa_r+0x822>
 800aad8:	4618      	mov	r0, r3
 800aada:	301c      	adds	r0, #28
 800aadc:	e772      	b.n	800a9c4 <_dtoa_r+0x814>
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dc36      	bgt.n	800ab52 <_dtoa_r+0x9a2>
 800aae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	dd33      	ble.n	800ab52 <_dtoa_r+0x9a2>
 800aaea:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aaee:	f1bb 0f00 	cmp.w	fp, #0
 800aaf2:	d10d      	bne.n	800ab10 <_dtoa_r+0x960>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	2205      	movs	r2, #5
 800aafa:	4628      	mov	r0, r5
 800aafc:	f000 ff4c 	bl	800b998 <__multadd>
 800ab00:	4601      	mov	r1, r0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4650      	mov	r0, sl
 800ab06:	f001 f9ab 	bl	800be60 <__mcmp>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f73f adb6 	bgt.w	800a67c <_dtoa_r+0x4cc>
 800ab10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab12:	9f08      	ldr	r7, [sp, #32]
 800ab14:	ea6f 0903 	mvn.w	r9, r3
 800ab18:	f04f 0800 	mov.w	r8, #0
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 ff18 	bl	800b954 <_Bfree>
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	f43f aea4 	beq.w	800a872 <_dtoa_r+0x6c2>
 800ab2a:	f1b8 0f00 	cmp.w	r8, #0
 800ab2e:	d005      	beq.n	800ab3c <_dtoa_r+0x98c>
 800ab30:	45b0      	cmp	r8, r6
 800ab32:	d003      	beq.n	800ab3c <_dtoa_r+0x98c>
 800ab34:	4641      	mov	r1, r8
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 ff0c 	bl	800b954 <_Bfree>
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 ff08 	bl	800b954 <_Bfree>
 800ab44:	e695      	b.n	800a872 <_dtoa_r+0x6c2>
 800ab46:	2400      	movs	r4, #0
 800ab48:	4626      	mov	r6, r4
 800ab4a:	e7e1      	b.n	800ab10 <_dtoa_r+0x960>
 800ab4c:	46c1      	mov	r9, r8
 800ab4e:	4626      	mov	r6, r4
 800ab50:	e594      	b.n	800a67c <_dtoa_r+0x4cc>
 800ab52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab54:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 80fc 	beq.w	800ad56 <_dtoa_r+0xba6>
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	dd05      	ble.n	800ab6e <_dtoa_r+0x9be>
 800ab62:	4631      	mov	r1, r6
 800ab64:	463a      	mov	r2, r7
 800ab66:	4628      	mov	r0, r5
 800ab68:	f001 f90e 	bl	800bd88 <__lshift>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	d05c      	beq.n	800ac2e <_dtoa_r+0xa7e>
 800ab74:	6871      	ldr	r1, [r6, #4]
 800ab76:	4628      	mov	r0, r5
 800ab78:	f000 feac 	bl	800b8d4 <_Balloc>
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	b928      	cbnz	r0, 800ab8c <_dtoa_r+0x9dc>
 800ab80:	4b7f      	ldr	r3, [pc, #508]	; (800ad80 <_dtoa_r+0xbd0>)
 800ab82:	4602      	mov	r2, r0
 800ab84:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab88:	f7ff bb26 	b.w	800a1d8 <_dtoa_r+0x28>
 800ab8c:	6932      	ldr	r2, [r6, #16]
 800ab8e:	3202      	adds	r2, #2
 800ab90:	0092      	lsls	r2, r2, #2
 800ab92:	f106 010c 	add.w	r1, r6, #12
 800ab96:	300c      	adds	r0, #12
 800ab98:	f7fd fdc0 	bl	800871c <memcpy>
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	f001 f8f1 	bl	800bd88 <__lshift>
 800aba6:	9b08      	ldr	r3, [sp, #32]
 800aba8:	3301      	adds	r3, #1
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	9b08      	ldr	r3, [sp, #32]
 800abae:	445b      	add	r3, fp
 800abb0:	930a      	str	r3, [sp, #40]	; 0x28
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	46b0      	mov	r8, r6
 800abba:	9309      	str	r3, [sp, #36]	; 0x24
 800abbc:	4606      	mov	r6, r0
 800abbe:	9b02      	ldr	r3, [sp, #8]
 800abc0:	4621      	mov	r1, r4
 800abc2:	4650      	mov	r0, sl
 800abc4:	f103 3bff 	add.w	fp, r3, #4294967295
 800abc8:	f7ff fa66 	bl	800a098 <quorem>
 800abcc:	4603      	mov	r3, r0
 800abce:	3330      	adds	r3, #48	; 0x30
 800abd0:	9004      	str	r0, [sp, #16]
 800abd2:	4641      	mov	r1, r8
 800abd4:	4650      	mov	r0, sl
 800abd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd8:	f001 f942 	bl	800be60 <__mcmp>
 800abdc:	4632      	mov	r2, r6
 800abde:	9006      	str	r0, [sp, #24]
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f001 f958 	bl	800be98 <__mdiff>
 800abe8:	68c2      	ldr	r2, [r0, #12]
 800abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abec:	4607      	mov	r7, r0
 800abee:	bb02      	cbnz	r2, 800ac32 <_dtoa_r+0xa82>
 800abf0:	4601      	mov	r1, r0
 800abf2:	4650      	mov	r0, sl
 800abf4:	f001 f934 	bl	800be60 <__mcmp>
 800abf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfa:	4602      	mov	r2, r0
 800abfc:	4639      	mov	r1, r7
 800abfe:	4628      	mov	r0, r5
 800ac00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ac04:	f000 fea6 	bl	800b954 <_Bfree>
 800ac08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac0c:	9f02      	ldr	r7, [sp, #8]
 800ac0e:	ea43 0102 	orr.w	r1, r3, r2
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	430b      	orrs	r3, r1
 800ac16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac18:	d10d      	bne.n	800ac36 <_dtoa_r+0xa86>
 800ac1a:	2b39      	cmp	r3, #57	; 0x39
 800ac1c:	d027      	beq.n	800ac6e <_dtoa_r+0xabe>
 800ac1e:	9a06      	ldr	r2, [sp, #24]
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	dd01      	ble.n	800ac28 <_dtoa_r+0xa78>
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	3331      	adds	r3, #49	; 0x31
 800ac28:	f88b 3000 	strb.w	r3, [fp]
 800ac2c:	e776      	b.n	800ab1c <_dtoa_r+0x96c>
 800ac2e:	4630      	mov	r0, r6
 800ac30:	e7b9      	b.n	800aba6 <_dtoa_r+0x9f6>
 800ac32:	2201      	movs	r2, #1
 800ac34:	e7e2      	b.n	800abfc <_dtoa_r+0xa4c>
 800ac36:	9906      	ldr	r1, [sp, #24]
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	db04      	blt.n	800ac46 <_dtoa_r+0xa96>
 800ac3c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ac3e:	4301      	orrs	r1, r0
 800ac40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac42:	4301      	orrs	r1, r0
 800ac44:	d120      	bne.n	800ac88 <_dtoa_r+0xad8>
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	ddee      	ble.n	800ac28 <_dtoa_r+0xa78>
 800ac4a:	4651      	mov	r1, sl
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4628      	mov	r0, r5
 800ac50:	9302      	str	r3, [sp, #8]
 800ac52:	f001 f899 	bl	800bd88 <__lshift>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4682      	mov	sl, r0
 800ac5a:	f001 f901 	bl	800be60 <__mcmp>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	dc02      	bgt.n	800ac6a <_dtoa_r+0xaba>
 800ac64:	d1e0      	bne.n	800ac28 <_dtoa_r+0xa78>
 800ac66:	07da      	lsls	r2, r3, #31
 800ac68:	d5de      	bpl.n	800ac28 <_dtoa_r+0xa78>
 800ac6a:	2b39      	cmp	r3, #57	; 0x39
 800ac6c:	d1da      	bne.n	800ac24 <_dtoa_r+0xa74>
 800ac6e:	2339      	movs	r3, #57	; 0x39
 800ac70:	f88b 3000 	strb.w	r3, [fp]
 800ac74:	463b      	mov	r3, r7
 800ac76:	461f      	mov	r7, r3
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ac7e:	2a39      	cmp	r2, #57	; 0x39
 800ac80:	d050      	beq.n	800ad24 <_dtoa_r+0xb74>
 800ac82:	3201      	adds	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e749      	b.n	800ab1c <_dtoa_r+0x96c>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	dd03      	ble.n	800ac94 <_dtoa_r+0xae4>
 800ac8c:	2b39      	cmp	r3, #57	; 0x39
 800ac8e:	d0ee      	beq.n	800ac6e <_dtoa_r+0xabe>
 800ac90:	3301      	adds	r3, #1
 800ac92:	e7c9      	b.n	800ac28 <_dtoa_r+0xa78>
 800ac94:	9a02      	ldr	r2, [sp, #8]
 800ac96:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac98:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac9c:	428a      	cmp	r2, r1
 800ac9e:	d02a      	beq.n	800acf6 <_dtoa_r+0xb46>
 800aca0:	4651      	mov	r1, sl
 800aca2:	2300      	movs	r3, #0
 800aca4:	220a      	movs	r2, #10
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 fe76 	bl	800b998 <__multadd>
 800acac:	45b0      	cmp	r8, r6
 800acae:	4682      	mov	sl, r0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	f04f 020a 	mov.w	r2, #10
 800acb8:	4641      	mov	r1, r8
 800acba:	4628      	mov	r0, r5
 800acbc:	d107      	bne.n	800acce <_dtoa_r+0xb1e>
 800acbe:	f000 fe6b 	bl	800b998 <__multadd>
 800acc2:	4680      	mov	r8, r0
 800acc4:	4606      	mov	r6, r0
 800acc6:	9b02      	ldr	r3, [sp, #8]
 800acc8:	3301      	adds	r3, #1
 800acca:	9302      	str	r3, [sp, #8]
 800accc:	e777      	b.n	800abbe <_dtoa_r+0xa0e>
 800acce:	f000 fe63 	bl	800b998 <__multadd>
 800acd2:	4631      	mov	r1, r6
 800acd4:	4680      	mov	r8, r0
 800acd6:	2300      	movs	r3, #0
 800acd8:	220a      	movs	r2, #10
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 fe5c 	bl	800b998 <__multadd>
 800ace0:	4606      	mov	r6, r0
 800ace2:	e7f0      	b.n	800acc6 <_dtoa_r+0xb16>
 800ace4:	f1bb 0f00 	cmp.w	fp, #0
 800ace8:	9a08      	ldr	r2, [sp, #32]
 800acea:	bfcc      	ite	gt
 800acec:	465f      	movgt	r7, fp
 800acee:	2701      	movle	r7, #1
 800acf0:	4417      	add	r7, r2
 800acf2:	f04f 0800 	mov.w	r8, #0
 800acf6:	4651      	mov	r1, sl
 800acf8:	2201      	movs	r2, #1
 800acfa:	4628      	mov	r0, r5
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	f001 f843 	bl	800bd88 <__lshift>
 800ad02:	4621      	mov	r1, r4
 800ad04:	4682      	mov	sl, r0
 800ad06:	f001 f8ab 	bl	800be60 <__mcmp>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	dcb2      	bgt.n	800ac74 <_dtoa_r+0xac4>
 800ad0e:	d102      	bne.n	800ad16 <_dtoa_r+0xb66>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	07db      	lsls	r3, r3, #31
 800ad14:	d4ae      	bmi.n	800ac74 <_dtoa_r+0xac4>
 800ad16:	463b      	mov	r3, r7
 800ad18:	461f      	mov	r7, r3
 800ad1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad1e:	2a30      	cmp	r2, #48	; 0x30
 800ad20:	d0fa      	beq.n	800ad18 <_dtoa_r+0xb68>
 800ad22:	e6fb      	b.n	800ab1c <_dtoa_r+0x96c>
 800ad24:	9a08      	ldr	r2, [sp, #32]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d1a5      	bne.n	800ac76 <_dtoa_r+0xac6>
 800ad2a:	2331      	movs	r3, #49	; 0x31
 800ad2c:	f109 0901 	add.w	r9, r9, #1
 800ad30:	7013      	strb	r3, [r2, #0]
 800ad32:	e6f3      	b.n	800ab1c <_dtoa_r+0x96c>
 800ad34:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <_dtoa_r+0xbd4>)
 800ad36:	f7ff baa6 	b.w	800a286 <_dtoa_r+0xd6>
 800ad3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f47f aa7f 	bne.w	800a240 <_dtoa_r+0x90>
 800ad42:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <_dtoa_r+0xbd8>)
 800ad44:	f7ff ba9f 	b.w	800a286 <_dtoa_r+0xd6>
 800ad48:	f1bb 0f00 	cmp.w	fp, #0
 800ad4c:	dc03      	bgt.n	800ad56 <_dtoa_r+0xba6>
 800ad4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	f73f aecc 	bgt.w	800aaee <_dtoa_r+0x93e>
 800ad56:	9f08      	ldr	r7, [sp, #32]
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	f7ff f99c 	bl	800a098 <quorem>
 800ad60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad64:	f807 3b01 	strb.w	r3, [r7], #1
 800ad68:	9a08      	ldr	r2, [sp, #32]
 800ad6a:	1aba      	subs	r2, r7, r2
 800ad6c:	4593      	cmp	fp, r2
 800ad6e:	ddb9      	ble.n	800ace4 <_dtoa_r+0xb34>
 800ad70:	4651      	mov	r1, sl
 800ad72:	2300      	movs	r3, #0
 800ad74:	220a      	movs	r2, #10
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 fe0e 	bl	800b998 <__multadd>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	e7eb      	b.n	800ad58 <_dtoa_r+0xba8>
 800ad80:	0800ccb3 	.word	0x0800ccb3
 800ad84:	0800cbbc 	.word	0x0800cbbc
 800ad88:	0800cc30 	.word	0x0800cc30

0800ad8c <__sflush_r>:
 800ad8c:	898a      	ldrh	r2, [r1, #12]
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	4605      	mov	r5, r0
 800ad94:	0710      	lsls	r0, r2, #28
 800ad96:	460c      	mov	r4, r1
 800ad98:	d458      	bmi.n	800ae4c <__sflush_r+0xc0>
 800ad9a:	684b      	ldr	r3, [r1, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dc05      	bgt.n	800adac <__sflush_r+0x20>
 800ada0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dc02      	bgt.n	800adac <__sflush_r+0x20>
 800ada6:	2000      	movs	r0, #0
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adae:	2e00      	cmp	r6, #0
 800adb0:	d0f9      	beq.n	800ada6 <__sflush_r+0x1a>
 800adb2:	2300      	movs	r3, #0
 800adb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adb8:	682f      	ldr	r7, [r5, #0]
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	d032      	beq.n	800ae24 <__sflush_r+0x98>
 800adbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	075a      	lsls	r2, r3, #29
 800adc4:	d505      	bpl.n	800add2 <__sflush_r+0x46>
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adcc:	b10b      	cbz	r3, 800add2 <__sflush_r+0x46>
 800adce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800add0:	1ac0      	subs	r0, r0, r3
 800add2:	2300      	movs	r3, #0
 800add4:	4602      	mov	r2, r0
 800add6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add8:	6a21      	ldr	r1, [r4, #32]
 800adda:	4628      	mov	r0, r5
 800addc:	47b0      	blx	r6
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	d106      	bne.n	800adf2 <__sflush_r+0x66>
 800ade4:	6829      	ldr	r1, [r5, #0]
 800ade6:	291d      	cmp	r1, #29
 800ade8:	d82c      	bhi.n	800ae44 <__sflush_r+0xb8>
 800adea:	4a2a      	ldr	r2, [pc, #168]	; (800ae94 <__sflush_r+0x108>)
 800adec:	40ca      	lsrs	r2, r1
 800adee:	07d6      	lsls	r6, r2, #31
 800adf0:	d528      	bpl.n	800ae44 <__sflush_r+0xb8>
 800adf2:	2200      	movs	r2, #0
 800adf4:	6062      	str	r2, [r4, #4]
 800adf6:	04d9      	lsls	r1, r3, #19
 800adf8:	6922      	ldr	r2, [r4, #16]
 800adfa:	6022      	str	r2, [r4, #0]
 800adfc:	d504      	bpl.n	800ae08 <__sflush_r+0x7c>
 800adfe:	1c42      	adds	r2, r0, #1
 800ae00:	d101      	bne.n	800ae06 <__sflush_r+0x7a>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	b903      	cbnz	r3, 800ae08 <__sflush_r+0x7c>
 800ae06:	6560      	str	r0, [r4, #84]	; 0x54
 800ae08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae0a:	602f      	str	r7, [r5, #0]
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	d0ca      	beq.n	800ada6 <__sflush_r+0x1a>
 800ae10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae14:	4299      	cmp	r1, r3
 800ae16:	d002      	beq.n	800ae1e <__sflush_r+0x92>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f7fd fc95 	bl	8008748 <_free_r>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	6360      	str	r0, [r4, #52]	; 0x34
 800ae22:	e7c1      	b.n	800ada8 <__sflush_r+0x1c>
 800ae24:	6a21      	ldr	r1, [r4, #32]
 800ae26:	2301      	movs	r3, #1
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b0      	blx	r6
 800ae2c:	1c41      	adds	r1, r0, #1
 800ae2e:	d1c7      	bne.n	800adc0 <__sflush_r+0x34>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0c4      	beq.n	800adc0 <__sflush_r+0x34>
 800ae36:	2b1d      	cmp	r3, #29
 800ae38:	d001      	beq.n	800ae3e <__sflush_r+0xb2>
 800ae3a:	2b16      	cmp	r3, #22
 800ae3c:	d101      	bne.n	800ae42 <__sflush_r+0xb6>
 800ae3e:	602f      	str	r7, [r5, #0]
 800ae40:	e7b1      	b.n	800ada6 <__sflush_r+0x1a>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	e7ad      	b.n	800ada8 <__sflush_r+0x1c>
 800ae4c:	690f      	ldr	r7, [r1, #16]
 800ae4e:	2f00      	cmp	r7, #0
 800ae50:	d0a9      	beq.n	800ada6 <__sflush_r+0x1a>
 800ae52:	0793      	lsls	r3, r2, #30
 800ae54:	680e      	ldr	r6, [r1, #0]
 800ae56:	bf08      	it	eq
 800ae58:	694b      	ldreq	r3, [r1, #20]
 800ae5a:	600f      	str	r7, [r1, #0]
 800ae5c:	bf18      	it	ne
 800ae5e:	2300      	movne	r3, #0
 800ae60:	eba6 0807 	sub.w	r8, r6, r7
 800ae64:	608b      	str	r3, [r1, #8]
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	dd9c      	ble.n	800ada6 <__sflush_r+0x1a>
 800ae6c:	6a21      	ldr	r1, [r4, #32]
 800ae6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae70:	4643      	mov	r3, r8
 800ae72:	463a      	mov	r2, r7
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b0      	blx	r6
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dc06      	bgt.n	800ae8a <__sflush_r+0xfe>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	e78e      	b.n	800ada8 <__sflush_r+0x1c>
 800ae8a:	4407      	add	r7, r0
 800ae8c:	eba8 0800 	sub.w	r8, r8, r0
 800ae90:	e7e9      	b.n	800ae66 <__sflush_r+0xda>
 800ae92:	bf00      	nop
 800ae94:	20400001 	.word	0x20400001

0800ae98 <_fflush_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	690b      	ldr	r3, [r1, #16]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	b913      	cbnz	r3, 800aea8 <_fflush_r+0x10>
 800aea2:	2500      	movs	r5, #0
 800aea4:	4628      	mov	r0, r5
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	b118      	cbz	r0, 800aeb2 <_fflush_r+0x1a>
 800aeaa:	6983      	ldr	r3, [r0, #24]
 800aeac:	b90b      	cbnz	r3, 800aeb2 <_fflush_r+0x1a>
 800aeae:	f000 f887 	bl	800afc0 <__sinit>
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <_fflush_r+0x6c>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	d11b      	bne.n	800aef0 <_fflush_r+0x58>
 800aeb8:	686c      	ldr	r4, [r5, #4]
 800aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0ef      	beq.n	800aea2 <_fflush_r+0xa>
 800aec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aec4:	07d0      	lsls	r0, r2, #31
 800aec6:	d404      	bmi.n	800aed2 <_fflush_r+0x3a>
 800aec8:	0599      	lsls	r1, r3, #22
 800aeca:	d402      	bmi.n	800aed2 <_fflush_r+0x3a>
 800aecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aece:	f000 fc7c 	bl	800b7ca <__retarget_lock_acquire_recursive>
 800aed2:	4628      	mov	r0, r5
 800aed4:	4621      	mov	r1, r4
 800aed6:	f7ff ff59 	bl	800ad8c <__sflush_r>
 800aeda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aedc:	07da      	lsls	r2, r3, #31
 800aede:	4605      	mov	r5, r0
 800aee0:	d4e0      	bmi.n	800aea4 <_fflush_r+0xc>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	059b      	lsls	r3, r3, #22
 800aee6:	d4dd      	bmi.n	800aea4 <_fflush_r+0xc>
 800aee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeea:	f000 fc6f 	bl	800b7cc <__retarget_lock_release_recursive>
 800aeee:	e7d9      	b.n	800aea4 <_fflush_r+0xc>
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <_fflush_r+0x70>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d101      	bne.n	800aefa <_fflush_r+0x62>
 800aef6:	68ac      	ldr	r4, [r5, #8]
 800aef8:	e7df      	b.n	800aeba <_fflush_r+0x22>
 800aefa:	4b04      	ldr	r3, [pc, #16]	; (800af0c <_fflush_r+0x74>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	bf08      	it	eq
 800af00:	68ec      	ldreq	r4, [r5, #12]
 800af02:	e7da      	b.n	800aeba <_fflush_r+0x22>
 800af04:	0800cce4 	.word	0x0800cce4
 800af08:	0800cd04 	.word	0x0800cd04
 800af0c:	0800ccc4 	.word	0x0800ccc4

0800af10 <std>:
 800af10:	2300      	movs	r3, #0
 800af12:	b510      	push	{r4, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	e9c0 3300 	strd	r3, r3, [r0]
 800af1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af1e:	6083      	str	r3, [r0, #8]
 800af20:	8181      	strh	r1, [r0, #12]
 800af22:	6643      	str	r3, [r0, #100]	; 0x64
 800af24:	81c2      	strh	r2, [r0, #14]
 800af26:	6183      	str	r3, [r0, #24]
 800af28:	4619      	mov	r1, r3
 800af2a:	2208      	movs	r2, #8
 800af2c:	305c      	adds	r0, #92	; 0x5c
 800af2e:	f7fd fc03 	bl	8008738 <memset>
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x38>)
 800af34:	6263      	str	r3, [r4, #36]	; 0x24
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x3c>)
 800af38:	62a3      	str	r3, [r4, #40]	; 0x28
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x40>)
 800af3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <std+0x44>)
 800af40:	6224      	str	r4, [r4, #32]
 800af42:	6323      	str	r3, [r4, #48]	; 0x30
 800af44:	bd10      	pop	{r4, pc}
 800af46:	bf00      	nop
 800af48:	0800c515 	.word	0x0800c515
 800af4c:	0800c537 	.word	0x0800c537
 800af50:	0800c56f 	.word	0x0800c56f
 800af54:	0800c593 	.word	0x0800c593

0800af58 <_cleanup_r>:
 800af58:	4901      	ldr	r1, [pc, #4]	; (800af60 <_cleanup_r+0x8>)
 800af5a:	f000 b8af 	b.w	800b0bc <_fwalk_reent>
 800af5e:	bf00      	nop
 800af60:	0800ae99 	.word	0x0800ae99

0800af64 <__sfmoreglue>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	1e4a      	subs	r2, r1, #1
 800af68:	2568      	movs	r5, #104	; 0x68
 800af6a:	4355      	muls	r5, r2
 800af6c:	460e      	mov	r6, r1
 800af6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af72:	f7fd fc37 	bl	80087e4 <_malloc_r>
 800af76:	4604      	mov	r4, r0
 800af78:	b140      	cbz	r0, 800af8c <__sfmoreglue+0x28>
 800af7a:	2100      	movs	r1, #0
 800af7c:	e9c0 1600 	strd	r1, r6, [r0]
 800af80:	300c      	adds	r0, #12
 800af82:	60a0      	str	r0, [r4, #8]
 800af84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af88:	f7fd fbd6 	bl	8008738 <memset>
 800af8c:	4620      	mov	r0, r4
 800af8e:	bd70      	pop	{r4, r5, r6, pc}

0800af90 <__sfp_lock_acquire>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__sfp_lock_acquire+0x8>)
 800af92:	f000 bc1a 	b.w	800b7ca <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	200006f6 	.word	0x200006f6

0800af9c <__sfp_lock_release>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__sfp_lock_release+0x8>)
 800af9e:	f000 bc15 	b.w	800b7cc <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	200006f6 	.word	0x200006f6

0800afa8 <__sinit_lock_acquire>:
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__sinit_lock_acquire+0x8>)
 800afaa:	f000 bc0e 	b.w	800b7ca <__retarget_lock_acquire_recursive>
 800afae:	bf00      	nop
 800afb0:	200006f1 	.word	0x200006f1

0800afb4 <__sinit_lock_release>:
 800afb4:	4801      	ldr	r0, [pc, #4]	; (800afbc <__sinit_lock_release+0x8>)
 800afb6:	f000 bc09 	b.w	800b7cc <__retarget_lock_release_recursive>
 800afba:	bf00      	nop
 800afbc:	200006f1 	.word	0x200006f1

0800afc0 <__sinit>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	f7ff fff0 	bl	800afa8 <__sinit_lock_acquire>
 800afc8:	69a3      	ldr	r3, [r4, #24]
 800afca:	b11b      	cbz	r3, 800afd4 <__sinit+0x14>
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	f7ff bff0 	b.w	800afb4 <__sinit_lock_release>
 800afd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afd8:	6523      	str	r3, [r4, #80]	; 0x50
 800afda:	4b13      	ldr	r3, [pc, #76]	; (800b028 <__sinit+0x68>)
 800afdc:	4a13      	ldr	r2, [pc, #76]	; (800b02c <__sinit+0x6c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	bf04      	itt	eq
 800afe6:	2301      	moveq	r3, #1
 800afe8:	61a3      	streq	r3, [r4, #24]
 800afea:	4620      	mov	r0, r4
 800afec:	f000 f820 	bl	800b030 <__sfp>
 800aff0:	6060      	str	r0, [r4, #4]
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f81c 	bl	800b030 <__sfp>
 800aff8:	60a0      	str	r0, [r4, #8]
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f818 	bl	800b030 <__sfp>
 800b000:	2200      	movs	r2, #0
 800b002:	60e0      	str	r0, [r4, #12]
 800b004:	2104      	movs	r1, #4
 800b006:	6860      	ldr	r0, [r4, #4]
 800b008:	f7ff ff82 	bl	800af10 <std>
 800b00c:	68a0      	ldr	r0, [r4, #8]
 800b00e:	2201      	movs	r2, #1
 800b010:	2109      	movs	r1, #9
 800b012:	f7ff ff7d 	bl	800af10 <std>
 800b016:	68e0      	ldr	r0, [r4, #12]
 800b018:	2202      	movs	r2, #2
 800b01a:	2112      	movs	r1, #18
 800b01c:	f7ff ff78 	bl	800af10 <std>
 800b020:	2301      	movs	r3, #1
 800b022:	61a3      	str	r3, [r4, #24]
 800b024:	e7d2      	b.n	800afcc <__sinit+0xc>
 800b026:	bf00      	nop
 800b028:	0800cba8 	.word	0x0800cba8
 800b02c:	0800af59 	.word	0x0800af59

0800b030 <__sfp>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	4607      	mov	r7, r0
 800b034:	f7ff ffac 	bl	800af90 <__sfp_lock_acquire>
 800b038:	4b1e      	ldr	r3, [pc, #120]	; (800b0b4 <__sfp+0x84>)
 800b03a:	681e      	ldr	r6, [r3, #0]
 800b03c:	69b3      	ldr	r3, [r6, #24]
 800b03e:	b913      	cbnz	r3, 800b046 <__sfp+0x16>
 800b040:	4630      	mov	r0, r6
 800b042:	f7ff ffbd 	bl	800afc0 <__sinit>
 800b046:	3648      	adds	r6, #72	; 0x48
 800b048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	d503      	bpl.n	800b058 <__sfp+0x28>
 800b050:	6833      	ldr	r3, [r6, #0]
 800b052:	b30b      	cbz	r3, 800b098 <__sfp+0x68>
 800b054:	6836      	ldr	r6, [r6, #0]
 800b056:	e7f7      	b.n	800b048 <__sfp+0x18>
 800b058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b05c:	b9d5      	cbnz	r5, 800b094 <__sfp+0x64>
 800b05e:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <__sfp+0x88>)
 800b060:	60e3      	str	r3, [r4, #12]
 800b062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b066:	6665      	str	r5, [r4, #100]	; 0x64
 800b068:	f000 fbae 	bl	800b7c8 <__retarget_lock_init_recursive>
 800b06c:	f7ff ff96 	bl	800af9c <__sfp_lock_release>
 800b070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b078:	6025      	str	r5, [r4, #0]
 800b07a:	61a5      	str	r5, [r4, #24]
 800b07c:	2208      	movs	r2, #8
 800b07e:	4629      	mov	r1, r5
 800b080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b084:	f7fd fb58 	bl	8008738 <memset>
 800b088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b08c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b090:	4620      	mov	r0, r4
 800b092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b094:	3468      	adds	r4, #104	; 0x68
 800b096:	e7d9      	b.n	800b04c <__sfp+0x1c>
 800b098:	2104      	movs	r1, #4
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7ff ff62 	bl	800af64 <__sfmoreglue>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	6030      	str	r0, [r6, #0]
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d1d5      	bne.n	800b054 <__sfp+0x24>
 800b0a8:	f7ff ff78 	bl	800af9c <__sfp_lock_release>
 800b0ac:	230c      	movs	r3, #12
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e7ee      	b.n	800b090 <__sfp+0x60>
 800b0b2:	bf00      	nop
 800b0b4:	0800cba8 	.word	0x0800cba8
 800b0b8:	ffff0001 	.word	0xffff0001

0800b0bc <_fwalk_reent>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	4688      	mov	r8, r1
 800b0c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c8:	2700      	movs	r7, #0
 800b0ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d2:	d505      	bpl.n	800b0e0 <_fwalk_reent+0x24>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	2c00      	cmp	r4, #0
 800b0d8:	d1f7      	bne.n	800b0ca <_fwalk_reent+0xe>
 800b0da:	4638      	mov	r0, r7
 800b0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e0:	89ab      	ldrh	r3, [r5, #12]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d907      	bls.n	800b0f6 <_fwalk_reent+0x3a>
 800b0e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	d003      	beq.n	800b0f6 <_fwalk_reent+0x3a>
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	47c0      	blx	r8
 800b0f4:	4307      	orrs	r7, r0
 800b0f6:	3568      	adds	r5, #104	; 0x68
 800b0f8:	e7e9      	b.n	800b0ce <_fwalk_reent+0x12>

0800b0fa <rshift>:
 800b0fa:	6903      	ldr	r3, [r0, #16]
 800b0fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b104:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b108:	f100 0414 	add.w	r4, r0, #20
 800b10c:	dd45      	ble.n	800b19a <rshift+0xa0>
 800b10e:	f011 011f 	ands.w	r1, r1, #31
 800b112:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b116:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b11a:	d10c      	bne.n	800b136 <rshift+0x3c>
 800b11c:	f100 0710 	add.w	r7, r0, #16
 800b120:	4629      	mov	r1, r5
 800b122:	42b1      	cmp	r1, r6
 800b124:	d334      	bcc.n	800b190 <rshift+0x96>
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	1eea      	subs	r2, r5, #3
 800b12c:	4296      	cmp	r6, r2
 800b12e:	bf38      	it	cc
 800b130:	2300      	movcc	r3, #0
 800b132:	4423      	add	r3, r4
 800b134:	e015      	b.n	800b162 <rshift+0x68>
 800b136:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b13a:	f1c1 0820 	rsb	r8, r1, #32
 800b13e:	40cf      	lsrs	r7, r1
 800b140:	f105 0e04 	add.w	lr, r5, #4
 800b144:	46a1      	mov	r9, r4
 800b146:	4576      	cmp	r6, lr
 800b148:	46f4      	mov	ip, lr
 800b14a:	d815      	bhi.n	800b178 <rshift+0x7e>
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	009a      	lsls	r2, r3, #2
 800b150:	3a04      	subs	r2, #4
 800b152:	3501      	adds	r5, #1
 800b154:	42ae      	cmp	r6, r5
 800b156:	bf38      	it	cc
 800b158:	2200      	movcc	r2, #0
 800b15a:	18a3      	adds	r3, r4, r2
 800b15c:	50a7      	str	r7, [r4, r2]
 800b15e:	b107      	cbz	r7, 800b162 <rshift+0x68>
 800b160:	3304      	adds	r3, #4
 800b162:	1b1a      	subs	r2, r3, r4
 800b164:	42a3      	cmp	r3, r4
 800b166:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b16a:	bf08      	it	eq
 800b16c:	2300      	moveq	r3, #0
 800b16e:	6102      	str	r2, [r0, #16]
 800b170:	bf08      	it	eq
 800b172:	6143      	streq	r3, [r0, #20]
 800b174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b178:	f8dc c000 	ldr.w	ip, [ip]
 800b17c:	fa0c fc08 	lsl.w	ip, ip, r8
 800b180:	ea4c 0707 	orr.w	r7, ip, r7
 800b184:	f849 7b04 	str.w	r7, [r9], #4
 800b188:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b18c:	40cf      	lsrs	r7, r1
 800b18e:	e7da      	b.n	800b146 <rshift+0x4c>
 800b190:	f851 cb04 	ldr.w	ip, [r1], #4
 800b194:	f847 cf04 	str.w	ip, [r7, #4]!
 800b198:	e7c3      	b.n	800b122 <rshift+0x28>
 800b19a:	4623      	mov	r3, r4
 800b19c:	e7e1      	b.n	800b162 <rshift+0x68>

0800b19e <__hexdig_fun>:
 800b19e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1a2:	2b09      	cmp	r3, #9
 800b1a4:	d802      	bhi.n	800b1ac <__hexdig_fun+0xe>
 800b1a6:	3820      	subs	r0, #32
 800b1a8:	b2c0      	uxtb	r0, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1b0:	2b05      	cmp	r3, #5
 800b1b2:	d801      	bhi.n	800b1b8 <__hexdig_fun+0x1a>
 800b1b4:	3847      	subs	r0, #71	; 0x47
 800b1b6:	e7f7      	b.n	800b1a8 <__hexdig_fun+0xa>
 800b1b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1bc:	2b05      	cmp	r3, #5
 800b1be:	d801      	bhi.n	800b1c4 <__hexdig_fun+0x26>
 800b1c0:	3827      	subs	r0, #39	; 0x27
 800b1c2:	e7f1      	b.n	800b1a8 <__hexdig_fun+0xa>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	4770      	bx	lr

0800b1c8 <__gethex>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	b08b      	sub	sp, #44	; 0x2c
 800b1ce:	468b      	mov	fp, r1
 800b1d0:	9306      	str	r3, [sp, #24]
 800b1d2:	4bb9      	ldr	r3, [pc, #740]	; (800b4b8 <__gethex+0x2f0>)
 800b1d4:	9002      	str	r0, [sp, #8]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	4690      	mov	r8, r2
 800b1de:	f7f4 ffcf 	bl	8000180 <strlen>
 800b1e2:	9b03      	ldr	r3, [sp, #12]
 800b1e4:	f8db 2000 	ldr.w	r2, [fp]
 800b1e8:	4403      	add	r3, r0
 800b1ea:	4682      	mov	sl, r0
 800b1ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1f0:	9307      	str	r3, [sp, #28]
 800b1f2:	1c93      	adds	r3, r2, #2
 800b1f4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1f8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1fc:	32fe      	adds	r2, #254	; 0xfe
 800b1fe:	18d1      	adds	r1, r2, r3
 800b200:	461f      	mov	r7, r3
 800b202:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b206:	9101      	str	r1, [sp, #4]
 800b208:	2830      	cmp	r0, #48	; 0x30
 800b20a:	d0f8      	beq.n	800b1fe <__gethex+0x36>
 800b20c:	f7ff ffc7 	bl	800b19e <__hexdig_fun>
 800b210:	4604      	mov	r4, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	d13a      	bne.n	800b28c <__gethex+0xc4>
 800b216:	9903      	ldr	r1, [sp, #12]
 800b218:	4652      	mov	r2, sl
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7fe f836 	bl	800928c <strncmp>
 800b220:	4605      	mov	r5, r0
 800b222:	2800      	cmp	r0, #0
 800b224:	d166      	bne.n	800b2f4 <__gethex+0x12c>
 800b226:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b22a:	eb07 060a 	add.w	r6, r7, sl
 800b22e:	f7ff ffb6 	bl	800b19e <__hexdig_fun>
 800b232:	2800      	cmp	r0, #0
 800b234:	d060      	beq.n	800b2f8 <__gethex+0x130>
 800b236:	4633      	mov	r3, r6
 800b238:	7818      	ldrb	r0, [r3, #0]
 800b23a:	2830      	cmp	r0, #48	; 0x30
 800b23c:	461f      	mov	r7, r3
 800b23e:	f103 0301 	add.w	r3, r3, #1
 800b242:	d0f9      	beq.n	800b238 <__gethex+0x70>
 800b244:	f7ff ffab 	bl	800b19e <__hexdig_fun>
 800b248:	2301      	movs	r3, #1
 800b24a:	fab0 f480 	clz	r4, r0
 800b24e:	0964      	lsrs	r4, r4, #5
 800b250:	4635      	mov	r5, r6
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	463a      	mov	r2, r7
 800b256:	4616      	mov	r6, r2
 800b258:	3201      	adds	r2, #1
 800b25a:	7830      	ldrb	r0, [r6, #0]
 800b25c:	f7ff ff9f 	bl	800b19e <__hexdig_fun>
 800b260:	2800      	cmp	r0, #0
 800b262:	d1f8      	bne.n	800b256 <__gethex+0x8e>
 800b264:	9903      	ldr	r1, [sp, #12]
 800b266:	4652      	mov	r2, sl
 800b268:	4630      	mov	r0, r6
 800b26a:	f7fe f80f 	bl	800928c <strncmp>
 800b26e:	b980      	cbnz	r0, 800b292 <__gethex+0xca>
 800b270:	b94d      	cbnz	r5, 800b286 <__gethex+0xbe>
 800b272:	eb06 050a 	add.w	r5, r6, sl
 800b276:	462a      	mov	r2, r5
 800b278:	4616      	mov	r6, r2
 800b27a:	3201      	adds	r2, #1
 800b27c:	7830      	ldrb	r0, [r6, #0]
 800b27e:	f7ff ff8e 	bl	800b19e <__hexdig_fun>
 800b282:	2800      	cmp	r0, #0
 800b284:	d1f8      	bne.n	800b278 <__gethex+0xb0>
 800b286:	1bad      	subs	r5, r5, r6
 800b288:	00ad      	lsls	r5, r5, #2
 800b28a:	e004      	b.n	800b296 <__gethex+0xce>
 800b28c:	2400      	movs	r4, #0
 800b28e:	4625      	mov	r5, r4
 800b290:	e7e0      	b.n	800b254 <__gethex+0x8c>
 800b292:	2d00      	cmp	r5, #0
 800b294:	d1f7      	bne.n	800b286 <__gethex+0xbe>
 800b296:	7833      	ldrb	r3, [r6, #0]
 800b298:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b29c:	2b50      	cmp	r3, #80	; 0x50
 800b29e:	d139      	bne.n	800b314 <__gethex+0x14c>
 800b2a0:	7873      	ldrb	r3, [r6, #1]
 800b2a2:	2b2b      	cmp	r3, #43	; 0x2b
 800b2a4:	d02a      	beq.n	800b2fc <__gethex+0x134>
 800b2a6:	2b2d      	cmp	r3, #45	; 0x2d
 800b2a8:	d02c      	beq.n	800b304 <__gethex+0x13c>
 800b2aa:	1c71      	adds	r1, r6, #1
 800b2ac:	f04f 0900 	mov.w	r9, #0
 800b2b0:	7808      	ldrb	r0, [r1, #0]
 800b2b2:	f7ff ff74 	bl	800b19e <__hexdig_fun>
 800b2b6:	1e43      	subs	r3, r0, #1
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b18      	cmp	r3, #24
 800b2bc:	d82a      	bhi.n	800b314 <__gethex+0x14c>
 800b2be:	f1a0 0210 	sub.w	r2, r0, #16
 800b2c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2c6:	f7ff ff6a 	bl	800b19e <__hexdig_fun>
 800b2ca:	1e43      	subs	r3, r0, #1
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b18      	cmp	r3, #24
 800b2d0:	d91b      	bls.n	800b30a <__gethex+0x142>
 800b2d2:	f1b9 0f00 	cmp.w	r9, #0
 800b2d6:	d000      	beq.n	800b2da <__gethex+0x112>
 800b2d8:	4252      	negs	r2, r2
 800b2da:	4415      	add	r5, r2
 800b2dc:	f8cb 1000 	str.w	r1, [fp]
 800b2e0:	b1d4      	cbz	r4, 800b318 <__gethex+0x150>
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf14      	ite	ne
 800b2e8:	2700      	movne	r7, #0
 800b2ea:	2706      	moveq	r7, #6
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	b00b      	add	sp, #44	; 0x2c
 800b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f4:	463e      	mov	r6, r7
 800b2f6:	4625      	mov	r5, r4
 800b2f8:	2401      	movs	r4, #1
 800b2fa:	e7cc      	b.n	800b296 <__gethex+0xce>
 800b2fc:	f04f 0900 	mov.w	r9, #0
 800b300:	1cb1      	adds	r1, r6, #2
 800b302:	e7d5      	b.n	800b2b0 <__gethex+0xe8>
 800b304:	f04f 0901 	mov.w	r9, #1
 800b308:	e7fa      	b.n	800b300 <__gethex+0x138>
 800b30a:	230a      	movs	r3, #10
 800b30c:	fb03 0202 	mla	r2, r3, r2, r0
 800b310:	3a10      	subs	r2, #16
 800b312:	e7d6      	b.n	800b2c2 <__gethex+0xfa>
 800b314:	4631      	mov	r1, r6
 800b316:	e7e1      	b.n	800b2dc <__gethex+0x114>
 800b318:	1bf3      	subs	r3, r6, r7
 800b31a:	3b01      	subs	r3, #1
 800b31c:	4621      	mov	r1, r4
 800b31e:	2b07      	cmp	r3, #7
 800b320:	dc0a      	bgt.n	800b338 <__gethex+0x170>
 800b322:	9802      	ldr	r0, [sp, #8]
 800b324:	f000 fad6 	bl	800b8d4 <_Balloc>
 800b328:	4604      	mov	r4, r0
 800b32a:	b940      	cbnz	r0, 800b33e <__gethex+0x176>
 800b32c:	4b63      	ldr	r3, [pc, #396]	; (800b4bc <__gethex+0x2f4>)
 800b32e:	4602      	mov	r2, r0
 800b330:	21de      	movs	r1, #222	; 0xde
 800b332:	4863      	ldr	r0, [pc, #396]	; (800b4c0 <__gethex+0x2f8>)
 800b334:	f001 f950 	bl	800c5d8 <__assert_func>
 800b338:	3101      	adds	r1, #1
 800b33a:	105b      	asrs	r3, r3, #1
 800b33c:	e7ef      	b.n	800b31e <__gethex+0x156>
 800b33e:	f100 0914 	add.w	r9, r0, #20
 800b342:	f04f 0b00 	mov.w	fp, #0
 800b346:	f1ca 0301 	rsb	r3, sl, #1
 800b34a:	f8cd 9010 	str.w	r9, [sp, #16]
 800b34e:	f8cd b004 	str.w	fp, [sp, #4]
 800b352:	9308      	str	r3, [sp, #32]
 800b354:	42b7      	cmp	r7, r6
 800b356:	d33f      	bcc.n	800b3d8 <__gethex+0x210>
 800b358:	9f04      	ldr	r7, [sp, #16]
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	f847 3b04 	str.w	r3, [r7], #4
 800b360:	eba7 0709 	sub.w	r7, r7, r9
 800b364:	10bf      	asrs	r7, r7, #2
 800b366:	6127      	str	r7, [r4, #16]
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fba9 	bl	800bac0 <__hi0bits>
 800b36e:	017f      	lsls	r7, r7, #5
 800b370:	f8d8 6000 	ldr.w	r6, [r8]
 800b374:	1a3f      	subs	r7, r7, r0
 800b376:	42b7      	cmp	r7, r6
 800b378:	dd62      	ble.n	800b440 <__gethex+0x278>
 800b37a:	1bbf      	subs	r7, r7, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 ff3b 	bl	800c1fa <__any_on>
 800b384:	4682      	mov	sl, r0
 800b386:	b1a8      	cbz	r0, 800b3b4 <__gethex+0x1ec>
 800b388:	1e7b      	subs	r3, r7, #1
 800b38a:	1159      	asrs	r1, r3, #5
 800b38c:	f003 021f 	and.w	r2, r3, #31
 800b390:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b394:	f04f 0a01 	mov.w	sl, #1
 800b398:	fa0a f202 	lsl.w	r2, sl, r2
 800b39c:	420a      	tst	r2, r1
 800b39e:	d009      	beq.n	800b3b4 <__gethex+0x1ec>
 800b3a0:	4553      	cmp	r3, sl
 800b3a2:	dd05      	ble.n	800b3b0 <__gethex+0x1e8>
 800b3a4:	1eb9      	subs	r1, r7, #2
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 ff27 	bl	800c1fa <__any_on>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d144      	bne.n	800b43a <__gethex+0x272>
 800b3b0:	f04f 0a02 	mov.w	sl, #2
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7ff fe9f 	bl	800b0fa <rshift>
 800b3bc:	443d      	add	r5, r7
 800b3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3c2:	42ab      	cmp	r3, r5
 800b3c4:	da4a      	bge.n	800b45c <__gethex+0x294>
 800b3c6:	9802      	ldr	r0, [sp, #8]
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	f000 fac3 	bl	800b954 <_Bfree>
 800b3ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	27a3      	movs	r7, #163	; 0xa3
 800b3d6:	e789      	b.n	800b2ec <__gethex+0x124>
 800b3d8:	1e73      	subs	r3, r6, #1
 800b3da:	9a07      	ldr	r2, [sp, #28]
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d019      	beq.n	800b41a <__gethex+0x252>
 800b3e6:	f1bb 0f20 	cmp.w	fp, #32
 800b3ea:	d107      	bne.n	800b3fc <__gethex+0x234>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	9a01      	ldr	r2, [sp, #4]
 800b3f0:	f843 2b04 	str.w	r2, [r3], #4
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	469b      	mov	fp, r3
 800b3fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b400:	f7ff fecd 	bl	800b19e <__hexdig_fun>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	f000 000f 	and.w	r0, r0, #15
 800b40a:	fa00 f00b 	lsl.w	r0, r0, fp
 800b40e:	4303      	orrs	r3, r0
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f10b 0b04 	add.w	fp, fp, #4
 800b416:	9b05      	ldr	r3, [sp, #20]
 800b418:	e00d      	b.n	800b436 <__gethex+0x26e>
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	9a08      	ldr	r2, [sp, #32]
 800b41e:	4413      	add	r3, r2
 800b420:	42bb      	cmp	r3, r7
 800b422:	d3e0      	bcc.n	800b3e6 <__gethex+0x21e>
 800b424:	4618      	mov	r0, r3
 800b426:	9903      	ldr	r1, [sp, #12]
 800b428:	9309      	str	r3, [sp, #36]	; 0x24
 800b42a:	4652      	mov	r2, sl
 800b42c:	f7fd ff2e 	bl	800928c <strncmp>
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	2800      	cmp	r0, #0
 800b434:	d1d7      	bne.n	800b3e6 <__gethex+0x21e>
 800b436:	461e      	mov	r6, r3
 800b438:	e78c      	b.n	800b354 <__gethex+0x18c>
 800b43a:	f04f 0a03 	mov.w	sl, #3
 800b43e:	e7b9      	b.n	800b3b4 <__gethex+0x1ec>
 800b440:	da09      	bge.n	800b456 <__gethex+0x28e>
 800b442:	1bf7      	subs	r7, r6, r7
 800b444:	4621      	mov	r1, r4
 800b446:	9802      	ldr	r0, [sp, #8]
 800b448:	463a      	mov	r2, r7
 800b44a:	f000 fc9d 	bl	800bd88 <__lshift>
 800b44e:	1bed      	subs	r5, r5, r7
 800b450:	4604      	mov	r4, r0
 800b452:	f100 0914 	add.w	r9, r0, #20
 800b456:	f04f 0a00 	mov.w	sl, #0
 800b45a:	e7b0      	b.n	800b3be <__gethex+0x1f6>
 800b45c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b460:	42a8      	cmp	r0, r5
 800b462:	dd70      	ble.n	800b546 <__gethex+0x37e>
 800b464:	1b45      	subs	r5, r0, r5
 800b466:	42ae      	cmp	r6, r5
 800b468:	dc34      	bgt.n	800b4d4 <__gethex+0x30c>
 800b46a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d028      	beq.n	800b4c4 <__gethex+0x2fc>
 800b472:	2b03      	cmp	r3, #3
 800b474:	d02a      	beq.n	800b4cc <__gethex+0x304>
 800b476:	2b01      	cmp	r3, #1
 800b478:	d115      	bne.n	800b4a6 <__gethex+0x2de>
 800b47a:	42ae      	cmp	r6, r5
 800b47c:	d113      	bne.n	800b4a6 <__gethex+0x2de>
 800b47e:	2e01      	cmp	r6, #1
 800b480:	d10b      	bne.n	800b49a <__gethex+0x2d2>
 800b482:	9a06      	ldr	r2, [sp, #24]
 800b484:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	2301      	movs	r3, #1
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	f8c9 3000 	str.w	r3, [r9]
 800b492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b494:	2762      	movs	r7, #98	; 0x62
 800b496:	601c      	str	r4, [r3, #0]
 800b498:	e728      	b.n	800b2ec <__gethex+0x124>
 800b49a:	1e71      	subs	r1, r6, #1
 800b49c:	4620      	mov	r0, r4
 800b49e:	f000 feac 	bl	800c1fa <__any_on>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d1ed      	bne.n	800b482 <__gethex+0x2ba>
 800b4a6:	9802      	ldr	r0, [sp, #8]
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	f000 fa53 	bl	800b954 <_Bfree>
 800b4ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	2750      	movs	r7, #80	; 0x50
 800b4b6:	e719      	b.n	800b2ec <__gethex+0x124>
 800b4b8:	0800cd90 	.word	0x0800cd90
 800b4bc:	0800ccb3 	.word	0x0800ccb3
 800b4c0:	0800cd24 	.word	0x0800cd24
 800b4c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1ed      	bne.n	800b4a6 <__gethex+0x2de>
 800b4ca:	e7da      	b.n	800b482 <__gethex+0x2ba>
 800b4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1d7      	bne.n	800b482 <__gethex+0x2ba>
 800b4d2:	e7e8      	b.n	800b4a6 <__gethex+0x2de>
 800b4d4:	1e6f      	subs	r7, r5, #1
 800b4d6:	f1ba 0f00 	cmp.w	sl, #0
 800b4da:	d131      	bne.n	800b540 <__gethex+0x378>
 800b4dc:	b127      	cbz	r7, 800b4e8 <__gethex+0x320>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fe8a 	bl	800c1fa <__any_on>
 800b4e6:	4682      	mov	sl, r0
 800b4e8:	117b      	asrs	r3, r7, #5
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4f0:	f007 071f 	and.w	r7, r7, #31
 800b4f4:	fa01 f707 	lsl.w	r7, r1, r7
 800b4f8:	421f      	tst	r7, r3
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	bf18      	it	ne
 800b500:	f04a 0a02 	orrne.w	sl, sl, #2
 800b504:	1b76      	subs	r6, r6, r5
 800b506:	f7ff fdf8 	bl	800b0fa <rshift>
 800b50a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b50e:	2702      	movs	r7, #2
 800b510:	f1ba 0f00 	cmp.w	sl, #0
 800b514:	d048      	beq.n	800b5a8 <__gethex+0x3e0>
 800b516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d015      	beq.n	800b54a <__gethex+0x382>
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d017      	beq.n	800b552 <__gethex+0x38a>
 800b522:	2b01      	cmp	r3, #1
 800b524:	d109      	bne.n	800b53a <__gethex+0x372>
 800b526:	f01a 0f02 	tst.w	sl, #2
 800b52a:	d006      	beq.n	800b53a <__gethex+0x372>
 800b52c:	f8d9 0000 	ldr.w	r0, [r9]
 800b530:	ea4a 0a00 	orr.w	sl, sl, r0
 800b534:	f01a 0f01 	tst.w	sl, #1
 800b538:	d10e      	bne.n	800b558 <__gethex+0x390>
 800b53a:	f047 0710 	orr.w	r7, r7, #16
 800b53e:	e033      	b.n	800b5a8 <__gethex+0x3e0>
 800b540:	f04f 0a01 	mov.w	sl, #1
 800b544:	e7d0      	b.n	800b4e8 <__gethex+0x320>
 800b546:	2701      	movs	r7, #1
 800b548:	e7e2      	b.n	800b510 <__gethex+0x348>
 800b54a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b54c:	f1c3 0301 	rsb	r3, r3, #1
 800b550:	9315      	str	r3, [sp, #84]	; 0x54
 800b552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0f0      	beq.n	800b53a <__gethex+0x372>
 800b558:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b55c:	f104 0314 	add.w	r3, r4, #20
 800b560:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b564:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b568:	f04f 0c00 	mov.w	ip, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b572:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b576:	d01c      	beq.n	800b5b2 <__gethex+0x3ea>
 800b578:	3201      	adds	r2, #1
 800b57a:	6002      	str	r2, [r0, #0]
 800b57c:	2f02      	cmp	r7, #2
 800b57e:	f104 0314 	add.w	r3, r4, #20
 800b582:	d13d      	bne.n	800b600 <__gethex+0x438>
 800b584:	f8d8 2000 	ldr.w	r2, [r8]
 800b588:	3a01      	subs	r2, #1
 800b58a:	42b2      	cmp	r2, r6
 800b58c:	d10a      	bne.n	800b5a4 <__gethex+0x3dc>
 800b58e:	1171      	asrs	r1, r6, #5
 800b590:	2201      	movs	r2, #1
 800b592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b596:	f006 061f 	and.w	r6, r6, #31
 800b59a:	fa02 f606 	lsl.w	r6, r2, r6
 800b59e:	421e      	tst	r6, r3
 800b5a0:	bf18      	it	ne
 800b5a2:	4617      	movne	r7, r2
 800b5a4:	f047 0720 	orr.w	r7, r7, #32
 800b5a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5aa:	601c      	str	r4, [r3, #0]
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	601d      	str	r5, [r3, #0]
 800b5b0:	e69c      	b.n	800b2ec <__gethex+0x124>
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5b8:	d8d8      	bhi.n	800b56c <__gethex+0x3a4>
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	459b      	cmp	fp, r3
 800b5be:	db17      	blt.n	800b5f0 <__gethex+0x428>
 800b5c0:	6861      	ldr	r1, [r4, #4]
 800b5c2:	9802      	ldr	r0, [sp, #8]
 800b5c4:	3101      	adds	r1, #1
 800b5c6:	f000 f985 	bl	800b8d4 <_Balloc>
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	b918      	cbnz	r0, 800b5d6 <__gethex+0x40e>
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <__gethex+0x470>)
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	2184      	movs	r1, #132	; 0x84
 800b5d4:	e6ad      	b.n	800b332 <__gethex+0x16a>
 800b5d6:	6922      	ldr	r2, [r4, #16]
 800b5d8:	3202      	adds	r2, #2
 800b5da:	f104 010c 	add.w	r1, r4, #12
 800b5de:	0092      	lsls	r2, r2, #2
 800b5e0:	300c      	adds	r0, #12
 800b5e2:	f7fd f89b 	bl	800871c <memcpy>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	9802      	ldr	r0, [sp, #8]
 800b5ea:	f000 f9b3 	bl	800b954 <_Bfree>
 800b5ee:	464c      	mov	r4, r9
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5f8:	6122      	str	r2, [r4, #16]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	615a      	str	r2, [r3, #20]
 800b5fe:	e7bd      	b.n	800b57c <__gethex+0x3b4>
 800b600:	6922      	ldr	r2, [r4, #16]
 800b602:	455a      	cmp	r2, fp
 800b604:	dd0b      	ble.n	800b61e <__gethex+0x456>
 800b606:	2101      	movs	r1, #1
 800b608:	4620      	mov	r0, r4
 800b60a:	f7ff fd76 	bl	800b0fa <rshift>
 800b60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b612:	3501      	adds	r5, #1
 800b614:	42ab      	cmp	r3, r5
 800b616:	f6ff aed6 	blt.w	800b3c6 <__gethex+0x1fe>
 800b61a:	2701      	movs	r7, #1
 800b61c:	e7c2      	b.n	800b5a4 <__gethex+0x3dc>
 800b61e:	f016 061f 	ands.w	r6, r6, #31
 800b622:	d0fa      	beq.n	800b61a <__gethex+0x452>
 800b624:	449a      	add	sl, r3
 800b626:	f1c6 0620 	rsb	r6, r6, #32
 800b62a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b62e:	f000 fa47 	bl	800bac0 <__hi0bits>
 800b632:	42b0      	cmp	r0, r6
 800b634:	dbe7      	blt.n	800b606 <__gethex+0x43e>
 800b636:	e7f0      	b.n	800b61a <__gethex+0x452>
 800b638:	0800ccb3 	.word	0x0800ccb3

0800b63c <L_shift>:
 800b63c:	f1c2 0208 	rsb	r2, r2, #8
 800b640:	0092      	lsls	r2, r2, #2
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	f1c2 0620 	rsb	r6, r2, #32
 800b648:	6843      	ldr	r3, [r0, #4]
 800b64a:	6804      	ldr	r4, [r0, #0]
 800b64c:	fa03 f506 	lsl.w	r5, r3, r6
 800b650:	432c      	orrs	r4, r5
 800b652:	40d3      	lsrs	r3, r2
 800b654:	6004      	str	r4, [r0, #0]
 800b656:	f840 3f04 	str.w	r3, [r0, #4]!
 800b65a:	4288      	cmp	r0, r1
 800b65c:	d3f4      	bcc.n	800b648 <L_shift+0xc>
 800b65e:	bd70      	pop	{r4, r5, r6, pc}

0800b660 <__match>:
 800b660:	b530      	push	{r4, r5, lr}
 800b662:	6803      	ldr	r3, [r0, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66a:	b914      	cbnz	r4, 800b672 <__match+0x12>
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	2001      	movs	r0, #1
 800b670:	bd30      	pop	{r4, r5, pc}
 800b672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b676:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b67a:	2d19      	cmp	r5, #25
 800b67c:	bf98      	it	ls
 800b67e:	3220      	addls	r2, #32
 800b680:	42a2      	cmp	r2, r4
 800b682:	d0f0      	beq.n	800b666 <__match+0x6>
 800b684:	2000      	movs	r0, #0
 800b686:	e7f3      	b.n	800b670 <__match+0x10>

0800b688 <__hexnan>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	6801      	ldr	r1, [r0, #0]
 800b690:	115e      	asrs	r6, r3, #5
 800b692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b696:	f013 031f 	ands.w	r3, r3, #31
 800b69a:	b087      	sub	sp, #28
 800b69c:	bf18      	it	ne
 800b69e:	3604      	addne	r6, #4
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	1f37      	subs	r7, r6, #4
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	4690      	mov	r8, r2
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ae:	46b9      	mov	r9, r7
 800b6b0:	463c      	mov	r4, r7
 800b6b2:	9502      	str	r5, [sp, #8]
 800b6b4:	46ab      	mov	fp, r5
 800b6b6:	784a      	ldrb	r2, [r1, #1]
 800b6b8:	1c4b      	adds	r3, r1, #1
 800b6ba:	9303      	str	r3, [sp, #12]
 800b6bc:	b342      	cbz	r2, 800b710 <__hexnan+0x88>
 800b6be:	4610      	mov	r0, r2
 800b6c0:	9105      	str	r1, [sp, #20]
 800b6c2:	9204      	str	r2, [sp, #16]
 800b6c4:	f7ff fd6b 	bl	800b19e <__hexdig_fun>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d14f      	bne.n	800b76c <__hexnan+0xe4>
 800b6cc:	9a04      	ldr	r2, [sp, #16]
 800b6ce:	9905      	ldr	r1, [sp, #20]
 800b6d0:	2a20      	cmp	r2, #32
 800b6d2:	d818      	bhi.n	800b706 <__hexnan+0x7e>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	459b      	cmp	fp, r3
 800b6d8:	dd13      	ble.n	800b702 <__hexnan+0x7a>
 800b6da:	454c      	cmp	r4, r9
 800b6dc:	d206      	bcs.n	800b6ec <__hexnan+0x64>
 800b6de:	2d07      	cmp	r5, #7
 800b6e0:	dc04      	bgt.n	800b6ec <__hexnan+0x64>
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7ff ffa8 	bl	800b63c <L_shift>
 800b6ec:	4544      	cmp	r4, r8
 800b6ee:	d950      	bls.n	800b792 <__hexnan+0x10a>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6fa:	f8cd b008 	str.w	fp, [sp, #8]
 800b6fe:	464c      	mov	r4, r9
 800b700:	461d      	mov	r5, r3
 800b702:	9903      	ldr	r1, [sp, #12]
 800b704:	e7d7      	b.n	800b6b6 <__hexnan+0x2e>
 800b706:	2a29      	cmp	r2, #41	; 0x29
 800b708:	d156      	bne.n	800b7b8 <__hexnan+0x130>
 800b70a:	3102      	adds	r1, #2
 800b70c:	f8ca 1000 	str.w	r1, [sl]
 800b710:	f1bb 0f00 	cmp.w	fp, #0
 800b714:	d050      	beq.n	800b7b8 <__hexnan+0x130>
 800b716:	454c      	cmp	r4, r9
 800b718:	d206      	bcs.n	800b728 <__hexnan+0xa0>
 800b71a:	2d07      	cmp	r5, #7
 800b71c:	dc04      	bgt.n	800b728 <__hexnan+0xa0>
 800b71e:	462a      	mov	r2, r5
 800b720:	4649      	mov	r1, r9
 800b722:	4620      	mov	r0, r4
 800b724:	f7ff ff8a 	bl	800b63c <L_shift>
 800b728:	4544      	cmp	r4, r8
 800b72a:	d934      	bls.n	800b796 <__hexnan+0x10e>
 800b72c:	f1a8 0204 	sub.w	r2, r8, #4
 800b730:	4623      	mov	r3, r4
 800b732:	f853 1b04 	ldr.w	r1, [r3], #4
 800b736:	f842 1f04 	str.w	r1, [r2, #4]!
 800b73a:	429f      	cmp	r7, r3
 800b73c:	d2f9      	bcs.n	800b732 <__hexnan+0xaa>
 800b73e:	1b3b      	subs	r3, r7, r4
 800b740:	f023 0303 	bic.w	r3, r3, #3
 800b744:	3304      	adds	r3, #4
 800b746:	3401      	adds	r4, #1
 800b748:	3e03      	subs	r6, #3
 800b74a:	42b4      	cmp	r4, r6
 800b74c:	bf88      	it	hi
 800b74e:	2304      	movhi	r3, #4
 800b750:	4443      	add	r3, r8
 800b752:	2200      	movs	r2, #0
 800b754:	f843 2b04 	str.w	r2, [r3], #4
 800b758:	429f      	cmp	r7, r3
 800b75a:	d2fb      	bcs.n	800b754 <__hexnan+0xcc>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	b91b      	cbnz	r3, 800b768 <__hexnan+0xe0>
 800b760:	4547      	cmp	r7, r8
 800b762:	d127      	bne.n	800b7b4 <__hexnan+0x12c>
 800b764:	2301      	movs	r3, #1
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	2005      	movs	r0, #5
 800b76a:	e026      	b.n	800b7ba <__hexnan+0x132>
 800b76c:	3501      	adds	r5, #1
 800b76e:	2d08      	cmp	r5, #8
 800b770:	f10b 0b01 	add.w	fp, fp, #1
 800b774:	dd06      	ble.n	800b784 <__hexnan+0xfc>
 800b776:	4544      	cmp	r4, r8
 800b778:	d9c3      	bls.n	800b702 <__hexnan+0x7a>
 800b77a:	2300      	movs	r3, #0
 800b77c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b780:	2501      	movs	r5, #1
 800b782:	3c04      	subs	r4, #4
 800b784:	6822      	ldr	r2, [r4, #0]
 800b786:	f000 000f 	and.w	r0, r0, #15
 800b78a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b78e:	6022      	str	r2, [r4, #0]
 800b790:	e7b7      	b.n	800b702 <__hexnan+0x7a>
 800b792:	2508      	movs	r5, #8
 800b794:	e7b5      	b.n	800b702 <__hexnan+0x7a>
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0df      	beq.n	800b75c <__hexnan+0xd4>
 800b79c:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a0:	f1c3 0320 	rsb	r3, r3, #32
 800b7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7ac:	401a      	ands	r2, r3
 800b7ae:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7b2:	e7d3      	b.n	800b75c <__hexnan+0xd4>
 800b7b4:	3f04      	subs	r7, #4
 800b7b6:	e7d1      	b.n	800b75c <__hexnan+0xd4>
 800b7b8:	2004      	movs	r0, #4
 800b7ba:	b007      	add	sp, #28
 800b7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7c0 <_localeconv_r>:
 800b7c0:	4800      	ldr	r0, [pc, #0]	; (800b7c4 <_localeconv_r+0x4>)
 800b7c2:	4770      	bx	lr
 800b7c4:	20000164 	.word	0x20000164

0800b7c8 <__retarget_lock_init_recursive>:
 800b7c8:	4770      	bx	lr

0800b7ca <__retarget_lock_acquire_recursive>:
 800b7ca:	4770      	bx	lr

0800b7cc <__retarget_lock_release_recursive>:
 800b7cc:	4770      	bx	lr

0800b7ce <__swhatbuf_r>:
 800b7ce:	b570      	push	{r4, r5, r6, lr}
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	b096      	sub	sp, #88	; 0x58
 800b7da:	4614      	mov	r4, r2
 800b7dc:	461d      	mov	r5, r3
 800b7de:	da07      	bge.n	800b7f0 <__swhatbuf_r+0x22>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	602b      	str	r3, [r5, #0]
 800b7e4:	89b3      	ldrh	r3, [r6, #12]
 800b7e6:	061a      	lsls	r2, r3, #24
 800b7e8:	d410      	bmi.n	800b80c <__swhatbuf_r+0x3e>
 800b7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ee:	e00e      	b.n	800b80e <__swhatbuf_r+0x40>
 800b7f0:	466a      	mov	r2, sp
 800b7f2:	f000 ff31 	bl	800c658 <_fstat_r>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	dbf2      	blt.n	800b7e0 <__swhatbuf_r+0x12>
 800b7fa:	9a01      	ldr	r2, [sp, #4]
 800b7fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b804:	425a      	negs	r2, r3
 800b806:	415a      	adcs	r2, r3
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	e7ee      	b.n	800b7ea <__swhatbuf_r+0x1c>
 800b80c:	2340      	movs	r3, #64	; 0x40
 800b80e:	2000      	movs	r0, #0
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	b016      	add	sp, #88	; 0x58
 800b814:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b818 <__smakebuf_r>:
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b81c:	079d      	lsls	r5, r3, #30
 800b81e:	4606      	mov	r6, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d507      	bpl.n	800b834 <__smakebuf_r+0x1c>
 800b824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	2301      	movs	r3, #1
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	b002      	add	sp, #8
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	ab01      	add	r3, sp, #4
 800b836:	466a      	mov	r2, sp
 800b838:	f7ff ffc9 	bl	800b7ce <__swhatbuf_r>
 800b83c:	9900      	ldr	r1, [sp, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	4630      	mov	r0, r6
 800b842:	f7fc ffcf 	bl	80087e4 <_malloc_r>
 800b846:	b948      	cbnz	r0, 800b85c <__smakebuf_r+0x44>
 800b848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84c:	059a      	lsls	r2, r3, #22
 800b84e:	d4ef      	bmi.n	800b830 <__smakebuf_r+0x18>
 800b850:	f023 0303 	bic.w	r3, r3, #3
 800b854:	f043 0302 	orr.w	r3, r3, #2
 800b858:	81a3      	strh	r3, [r4, #12]
 800b85a:	e7e3      	b.n	800b824 <__smakebuf_r+0xc>
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <__smakebuf_r+0x7c>)
 800b85e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	9b00      	ldr	r3, [sp, #0]
 800b86c:	6163      	str	r3, [r4, #20]
 800b86e:	9b01      	ldr	r3, [sp, #4]
 800b870:	6120      	str	r0, [r4, #16]
 800b872:	b15b      	cbz	r3, 800b88c <__smakebuf_r+0x74>
 800b874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 feff 	bl	800c67c <_isatty_r>
 800b87e:	b128      	cbz	r0, 800b88c <__smakebuf_r+0x74>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	89a0      	ldrh	r0, [r4, #12]
 800b88e:	4305      	orrs	r5, r0
 800b890:	81a5      	strh	r5, [r4, #12]
 800b892:	e7cd      	b.n	800b830 <__smakebuf_r+0x18>
 800b894:	0800af59 	.word	0x0800af59

0800b898 <__ascii_mbtowc>:
 800b898:	b082      	sub	sp, #8
 800b89a:	b901      	cbnz	r1, 800b89e <__ascii_mbtowc+0x6>
 800b89c:	a901      	add	r1, sp, #4
 800b89e:	b142      	cbz	r2, 800b8b2 <__ascii_mbtowc+0x1a>
 800b8a0:	b14b      	cbz	r3, 800b8b6 <__ascii_mbtowc+0x1e>
 800b8a2:	7813      	ldrb	r3, [r2, #0]
 800b8a4:	600b      	str	r3, [r1, #0]
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	1e10      	subs	r0, r2, #0
 800b8aa:	bf18      	it	ne
 800b8ac:	2001      	movne	r0, #1
 800b8ae:	b002      	add	sp, #8
 800b8b0:	4770      	bx	lr
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	e7fb      	b.n	800b8ae <__ascii_mbtowc+0x16>
 800b8b6:	f06f 0001 	mvn.w	r0, #1
 800b8ba:	e7f8      	b.n	800b8ae <__ascii_mbtowc+0x16>

0800b8bc <__malloc_lock>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__malloc_lock+0x8>)
 800b8be:	f7ff bf84 	b.w	800b7ca <__retarget_lock_acquire_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	200006f2 	.word	0x200006f2

0800b8c8 <__malloc_unlock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_unlock+0x8>)
 800b8ca:	f7ff bf7f 	b.w	800b7cc <__retarget_lock_release_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	200006f2 	.word	0x200006f2

0800b8d4 <_Balloc>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8d8:	4604      	mov	r4, r0
 800b8da:	460d      	mov	r5, r1
 800b8dc:	b976      	cbnz	r6, 800b8fc <_Balloc+0x28>
 800b8de:	2010      	movs	r0, #16
 800b8e0:	f7fc ff0c 	bl	80086fc <malloc>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8e8:	b920      	cbnz	r0, 800b8f4 <_Balloc+0x20>
 800b8ea:	4b18      	ldr	r3, [pc, #96]	; (800b94c <_Balloc+0x78>)
 800b8ec:	4818      	ldr	r0, [pc, #96]	; (800b950 <_Balloc+0x7c>)
 800b8ee:	2166      	movs	r1, #102	; 0x66
 800b8f0:	f000 fe72 	bl	800c5d8 <__assert_func>
 800b8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8f8:	6006      	str	r6, [r0, #0]
 800b8fa:	60c6      	str	r6, [r0, #12]
 800b8fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8fe:	68f3      	ldr	r3, [r6, #12]
 800b900:	b183      	cbz	r3, 800b924 <_Balloc+0x50>
 800b902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b90a:	b9b8      	cbnz	r0, 800b93c <_Balloc+0x68>
 800b90c:	2101      	movs	r1, #1
 800b90e:	fa01 f605 	lsl.w	r6, r1, r5
 800b912:	1d72      	adds	r2, r6, #5
 800b914:	0092      	lsls	r2, r2, #2
 800b916:	4620      	mov	r0, r4
 800b918:	f000 fc90 	bl	800c23c <_calloc_r>
 800b91c:	b160      	cbz	r0, 800b938 <_Balloc+0x64>
 800b91e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b922:	e00e      	b.n	800b942 <_Balloc+0x6e>
 800b924:	2221      	movs	r2, #33	; 0x21
 800b926:	2104      	movs	r1, #4
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 fc87 	bl	800c23c <_calloc_r>
 800b92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b930:	60f0      	str	r0, [r6, #12]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e4      	bne.n	800b902 <_Balloc+0x2e>
 800b938:	2000      	movs	r0, #0
 800b93a:	bd70      	pop	{r4, r5, r6, pc}
 800b93c:	6802      	ldr	r2, [r0, #0]
 800b93e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b942:	2300      	movs	r3, #0
 800b944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b948:	e7f7      	b.n	800b93a <_Balloc+0x66>
 800b94a:	bf00      	nop
 800b94c:	0800cc3d 	.word	0x0800cc3d
 800b950:	0800cda4 	.word	0x0800cda4

0800b954 <_Bfree>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b958:	4605      	mov	r5, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	b976      	cbnz	r6, 800b97c <_Bfree+0x28>
 800b95e:	2010      	movs	r0, #16
 800b960:	f7fc fecc 	bl	80086fc <malloc>
 800b964:	4602      	mov	r2, r0
 800b966:	6268      	str	r0, [r5, #36]	; 0x24
 800b968:	b920      	cbnz	r0, 800b974 <_Bfree+0x20>
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <_Bfree+0x3c>)
 800b96c:	4809      	ldr	r0, [pc, #36]	; (800b994 <_Bfree+0x40>)
 800b96e:	218a      	movs	r1, #138	; 0x8a
 800b970:	f000 fe32 	bl	800c5d8 <__assert_func>
 800b974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b978:	6006      	str	r6, [r0, #0]
 800b97a:	60c6      	str	r6, [r0, #12]
 800b97c:	b13c      	cbz	r4, 800b98e <_Bfree+0x3a>
 800b97e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b980:	6862      	ldr	r2, [r4, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b988:	6021      	str	r1, [r4, #0]
 800b98a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	0800cc3d 	.word	0x0800cc3d
 800b994:	0800cda4 	.word	0x0800cda4

0800b998 <__multadd>:
 800b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	690e      	ldr	r6, [r1, #16]
 800b99e:	4607      	mov	r7, r0
 800b9a0:	4698      	mov	r8, r3
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	f101 0014 	add.w	r0, r1, #20
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	6805      	ldr	r5, [r0, #0]
 800b9ac:	b2a9      	uxth	r1, r5
 800b9ae:	fb02 8101 	mla	r1, r2, r1, r8
 800b9b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b9b6:	0c2d      	lsrs	r5, r5, #16
 800b9b8:	fb02 c505 	mla	r5, r2, r5, ip
 800b9bc:	b289      	uxth	r1, r1
 800b9be:	3301      	adds	r3, #1
 800b9c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b9c4:	429e      	cmp	r6, r3
 800b9c6:	f840 1b04 	str.w	r1, [r0], #4
 800b9ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b9ce:	dcec      	bgt.n	800b9aa <__multadd+0x12>
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	d022      	beq.n	800ba1c <__multadd+0x84>
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	42b3      	cmp	r3, r6
 800b9da:	dc19      	bgt.n	800ba10 <__multadd+0x78>
 800b9dc:	6861      	ldr	r1, [r4, #4]
 800b9de:	4638      	mov	r0, r7
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	f7ff ff77 	bl	800b8d4 <_Balloc>
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	b928      	cbnz	r0, 800b9f6 <__multadd+0x5e>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <__multadd+0x8c>)
 800b9ee:	480e      	ldr	r0, [pc, #56]	; (800ba28 <__multadd+0x90>)
 800b9f0:	21b5      	movs	r1, #181	; 0xb5
 800b9f2:	f000 fdf1 	bl	800c5d8 <__assert_func>
 800b9f6:	6922      	ldr	r2, [r4, #16]
 800b9f8:	3202      	adds	r2, #2
 800b9fa:	f104 010c 	add.w	r1, r4, #12
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	300c      	adds	r0, #12
 800ba02:	f7fc fe8b 	bl	800871c <memcpy>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f7ff ffa3 	bl	800b954 <_Bfree>
 800ba0e:	462c      	mov	r4, r5
 800ba10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ba14:	3601      	adds	r6, #1
 800ba16:	f8c3 8014 	str.w	r8, [r3, #20]
 800ba1a:	6126      	str	r6, [r4, #16]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba22:	bf00      	nop
 800ba24:	0800ccb3 	.word	0x0800ccb3
 800ba28:	0800cda4 	.word	0x0800cda4

0800ba2c <__s2b>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	460c      	mov	r4, r1
 800ba32:	4615      	mov	r5, r2
 800ba34:	461f      	mov	r7, r3
 800ba36:	2209      	movs	r2, #9
 800ba38:	3308      	adds	r3, #8
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba40:	2100      	movs	r1, #0
 800ba42:	2201      	movs	r2, #1
 800ba44:	429a      	cmp	r2, r3
 800ba46:	db09      	blt.n	800ba5c <__s2b+0x30>
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff ff43 	bl	800b8d4 <_Balloc>
 800ba4e:	b940      	cbnz	r0, 800ba62 <__s2b+0x36>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4b19      	ldr	r3, [pc, #100]	; (800bab8 <__s2b+0x8c>)
 800ba54:	4819      	ldr	r0, [pc, #100]	; (800babc <__s2b+0x90>)
 800ba56:	21ce      	movs	r1, #206	; 0xce
 800ba58:	f000 fdbe 	bl	800c5d8 <__assert_func>
 800ba5c:	0052      	lsls	r2, r2, #1
 800ba5e:	3101      	adds	r1, #1
 800ba60:	e7f0      	b.n	800ba44 <__s2b+0x18>
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	6143      	str	r3, [r0, #20]
 800ba66:	2d09      	cmp	r5, #9
 800ba68:	f04f 0301 	mov.w	r3, #1
 800ba6c:	6103      	str	r3, [r0, #16]
 800ba6e:	dd16      	ble.n	800ba9e <__s2b+0x72>
 800ba70:	f104 0909 	add.w	r9, r4, #9
 800ba74:	46c8      	mov	r8, r9
 800ba76:	442c      	add	r4, r5
 800ba78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	3b30      	subs	r3, #48	; 0x30
 800ba80:	220a      	movs	r2, #10
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7ff ff88 	bl	800b998 <__multadd>
 800ba88:	45a0      	cmp	r8, r4
 800ba8a:	d1f5      	bne.n	800ba78 <__s2b+0x4c>
 800ba8c:	f1a5 0408 	sub.w	r4, r5, #8
 800ba90:	444c      	add	r4, r9
 800ba92:	1b2d      	subs	r5, r5, r4
 800ba94:	1963      	adds	r3, r4, r5
 800ba96:	42bb      	cmp	r3, r7
 800ba98:	db04      	blt.n	800baa4 <__s2b+0x78>
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	340a      	adds	r4, #10
 800baa0:	2509      	movs	r5, #9
 800baa2:	e7f6      	b.n	800ba92 <__s2b+0x66>
 800baa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800baa8:	4601      	mov	r1, r0
 800baaa:	3b30      	subs	r3, #48	; 0x30
 800baac:	220a      	movs	r2, #10
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ff72 	bl	800b998 <__multadd>
 800bab4:	e7ee      	b.n	800ba94 <__s2b+0x68>
 800bab6:	bf00      	nop
 800bab8:	0800ccb3 	.word	0x0800ccb3
 800babc:	0800cda4 	.word	0x0800cda4

0800bac0 <__hi0bits>:
 800bac0:	0c02      	lsrs	r2, r0, #16
 800bac2:	0412      	lsls	r2, r2, #16
 800bac4:	4603      	mov	r3, r0
 800bac6:	b9ca      	cbnz	r2, 800bafc <__hi0bits+0x3c>
 800bac8:	0403      	lsls	r3, r0, #16
 800baca:	2010      	movs	r0, #16
 800bacc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bad0:	bf04      	itt	eq
 800bad2:	021b      	lsleq	r3, r3, #8
 800bad4:	3008      	addeq	r0, #8
 800bad6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bada:	bf04      	itt	eq
 800badc:	011b      	lsleq	r3, r3, #4
 800bade:	3004      	addeq	r0, #4
 800bae0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bae4:	bf04      	itt	eq
 800bae6:	009b      	lsleq	r3, r3, #2
 800bae8:	3002      	addeq	r0, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	db05      	blt.n	800bafa <__hi0bits+0x3a>
 800baee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800baf2:	f100 0001 	add.w	r0, r0, #1
 800baf6:	bf08      	it	eq
 800baf8:	2020      	moveq	r0, #32
 800bafa:	4770      	bx	lr
 800bafc:	2000      	movs	r0, #0
 800bafe:	e7e5      	b.n	800bacc <__hi0bits+0xc>

0800bb00 <__lo0bits>:
 800bb00:	6803      	ldr	r3, [r0, #0]
 800bb02:	4602      	mov	r2, r0
 800bb04:	f013 0007 	ands.w	r0, r3, #7
 800bb08:	d00b      	beq.n	800bb22 <__lo0bits+0x22>
 800bb0a:	07d9      	lsls	r1, r3, #31
 800bb0c:	d422      	bmi.n	800bb54 <__lo0bits+0x54>
 800bb0e:	0798      	lsls	r0, r3, #30
 800bb10:	bf49      	itett	mi
 800bb12:	085b      	lsrmi	r3, r3, #1
 800bb14:	089b      	lsrpl	r3, r3, #2
 800bb16:	2001      	movmi	r0, #1
 800bb18:	6013      	strmi	r3, [r2, #0]
 800bb1a:	bf5c      	itt	pl
 800bb1c:	6013      	strpl	r3, [r2, #0]
 800bb1e:	2002      	movpl	r0, #2
 800bb20:	4770      	bx	lr
 800bb22:	b299      	uxth	r1, r3
 800bb24:	b909      	cbnz	r1, 800bb2a <__lo0bits+0x2a>
 800bb26:	0c1b      	lsrs	r3, r3, #16
 800bb28:	2010      	movs	r0, #16
 800bb2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb2e:	bf04      	itt	eq
 800bb30:	0a1b      	lsreq	r3, r3, #8
 800bb32:	3008      	addeq	r0, #8
 800bb34:	0719      	lsls	r1, r3, #28
 800bb36:	bf04      	itt	eq
 800bb38:	091b      	lsreq	r3, r3, #4
 800bb3a:	3004      	addeq	r0, #4
 800bb3c:	0799      	lsls	r1, r3, #30
 800bb3e:	bf04      	itt	eq
 800bb40:	089b      	lsreq	r3, r3, #2
 800bb42:	3002      	addeq	r0, #2
 800bb44:	07d9      	lsls	r1, r3, #31
 800bb46:	d403      	bmi.n	800bb50 <__lo0bits+0x50>
 800bb48:	085b      	lsrs	r3, r3, #1
 800bb4a:	f100 0001 	add.w	r0, r0, #1
 800bb4e:	d003      	beq.n	800bb58 <__lo0bits+0x58>
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	4770      	bx	lr
 800bb54:	2000      	movs	r0, #0
 800bb56:	4770      	bx	lr
 800bb58:	2020      	movs	r0, #32
 800bb5a:	4770      	bx	lr

0800bb5c <__i2b>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	2101      	movs	r1, #1
 800bb62:	f7ff feb7 	bl	800b8d4 <_Balloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__i2b+0x1a>
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <__i2b+0x24>)
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <__i2b+0x28>)
 800bb6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb72:	f000 fd31 	bl	800c5d8 <__assert_func>
 800bb76:	2301      	movs	r3, #1
 800bb78:	6144      	str	r4, [r0, #20]
 800bb7a:	6103      	str	r3, [r0, #16]
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800ccb3 	.word	0x0800ccb3
 800bb84:	0800cda4 	.word	0x0800cda4

0800bb88 <__multiply>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	690a      	ldr	r2, [r1, #16]
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	bfb8      	it	lt
 800bb96:	460b      	movlt	r3, r1
 800bb98:	460d      	mov	r5, r1
 800bb9a:	bfbc      	itt	lt
 800bb9c:	4625      	movlt	r5, r4
 800bb9e:	461c      	movlt	r4, r3
 800bba0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bba8:	68ab      	ldr	r3, [r5, #8]
 800bbaa:	6869      	ldr	r1, [r5, #4]
 800bbac:	eb0a 0709 	add.w	r7, sl, r9
 800bbb0:	42bb      	cmp	r3, r7
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	bfb8      	it	lt
 800bbb6:	3101      	addlt	r1, #1
 800bbb8:	f7ff fe8c 	bl	800b8d4 <_Balloc>
 800bbbc:	b930      	cbnz	r0, 800bbcc <__multiply+0x44>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	4b42      	ldr	r3, [pc, #264]	; (800bccc <__multiply+0x144>)
 800bbc2:	4843      	ldr	r0, [pc, #268]	; (800bcd0 <__multiply+0x148>)
 800bbc4:	f240 115d 	movw	r1, #349	; 0x15d
 800bbc8:	f000 fd06 	bl	800c5d8 <__assert_func>
 800bbcc:	f100 0614 	add.w	r6, r0, #20
 800bbd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bbd4:	4633      	mov	r3, r6
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4543      	cmp	r3, r8
 800bbda:	d31e      	bcc.n	800bc1a <__multiply+0x92>
 800bbdc:	f105 0c14 	add.w	ip, r5, #20
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bbe8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bbec:	9202      	str	r2, [sp, #8]
 800bbee:	ebac 0205 	sub.w	r2, ip, r5
 800bbf2:	3a15      	subs	r2, #21
 800bbf4:	f022 0203 	bic.w	r2, r2, #3
 800bbf8:	3204      	adds	r2, #4
 800bbfa:	f105 0115 	add.w	r1, r5, #21
 800bbfe:	458c      	cmp	ip, r1
 800bc00:	bf38      	it	cc
 800bc02:	2204      	movcc	r2, #4
 800bc04:	9201      	str	r2, [sp, #4]
 800bc06:	9a02      	ldr	r2, [sp, #8]
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d808      	bhi.n	800bc20 <__multiply+0x98>
 800bc0e:	2f00      	cmp	r7, #0
 800bc10:	dc55      	bgt.n	800bcbe <__multiply+0x136>
 800bc12:	6107      	str	r7, [r0, #16]
 800bc14:	b005      	add	sp, #20
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	f843 2b04 	str.w	r2, [r3], #4
 800bc1e:	e7db      	b.n	800bbd8 <__multiply+0x50>
 800bc20:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc24:	f1ba 0f00 	cmp.w	sl, #0
 800bc28:	d020      	beq.n	800bc6c <__multiply+0xe4>
 800bc2a:	f105 0e14 	add.w	lr, r5, #20
 800bc2e:	46b1      	mov	r9, r6
 800bc30:	2200      	movs	r2, #0
 800bc32:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bc36:	f8d9 b000 	ldr.w	fp, [r9]
 800bc3a:	b2a1      	uxth	r1, r4
 800bc3c:	fa1f fb8b 	uxth.w	fp, fp
 800bc40:	fb0a b101 	mla	r1, sl, r1, fp
 800bc44:	4411      	add	r1, r2
 800bc46:	f8d9 2000 	ldr.w	r2, [r9]
 800bc4a:	0c24      	lsrs	r4, r4, #16
 800bc4c:	0c12      	lsrs	r2, r2, #16
 800bc4e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc56:	b289      	uxth	r1, r1
 800bc58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc5c:	45f4      	cmp	ip, lr
 800bc5e:	f849 1b04 	str.w	r1, [r9], #4
 800bc62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc66:	d8e4      	bhi.n	800bc32 <__multiply+0xaa>
 800bc68:	9901      	ldr	r1, [sp, #4]
 800bc6a:	5072      	str	r2, [r6, r1]
 800bc6c:	9a03      	ldr	r2, [sp, #12]
 800bc6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc72:	3304      	adds	r3, #4
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	d01f      	beq.n	800bcba <__multiply+0x132>
 800bc7a:	6834      	ldr	r4, [r6, #0]
 800bc7c:	f105 0114 	add.w	r1, r5, #20
 800bc80:	46b6      	mov	lr, r6
 800bc82:	f04f 0a00 	mov.w	sl, #0
 800bc86:	880a      	ldrh	r2, [r1, #0]
 800bc88:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bc8c:	fb09 b202 	mla	r2, r9, r2, fp
 800bc90:	4492      	add	sl, r2
 800bc92:	b2a4      	uxth	r4, r4
 800bc94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc98:	f84e 4b04 	str.w	r4, [lr], #4
 800bc9c:	f851 4b04 	ldr.w	r4, [r1], #4
 800bca0:	f8be 2000 	ldrh.w	r2, [lr]
 800bca4:	0c24      	lsrs	r4, r4, #16
 800bca6:	fb09 2404 	mla	r4, r9, r4, r2
 800bcaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bcae:	458c      	cmp	ip, r1
 800bcb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bcb4:	d8e7      	bhi.n	800bc86 <__multiply+0xfe>
 800bcb6:	9a01      	ldr	r2, [sp, #4]
 800bcb8:	50b4      	str	r4, [r6, r2]
 800bcba:	3604      	adds	r6, #4
 800bcbc:	e7a3      	b.n	800bc06 <__multiply+0x7e>
 800bcbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1a5      	bne.n	800bc12 <__multiply+0x8a>
 800bcc6:	3f01      	subs	r7, #1
 800bcc8:	e7a1      	b.n	800bc0e <__multiply+0x86>
 800bcca:	bf00      	nop
 800bccc:	0800ccb3 	.word	0x0800ccb3
 800bcd0:	0800cda4 	.word	0x0800cda4

0800bcd4 <__pow5mult>:
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	4615      	mov	r5, r2
 800bcda:	f012 0203 	ands.w	r2, r2, #3
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	d007      	beq.n	800bcf4 <__pow5mult+0x20>
 800bce4:	4c25      	ldr	r4, [pc, #148]	; (800bd7c <__pow5mult+0xa8>)
 800bce6:	3a01      	subs	r2, #1
 800bce8:	2300      	movs	r3, #0
 800bcea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcee:	f7ff fe53 	bl	800b998 <__multadd>
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	10ad      	asrs	r5, r5, #2
 800bcf6:	d03d      	beq.n	800bd74 <__pow5mult+0xa0>
 800bcf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcfa:	b97c      	cbnz	r4, 800bd1c <__pow5mult+0x48>
 800bcfc:	2010      	movs	r0, #16
 800bcfe:	f7fc fcfd 	bl	80086fc <malloc>
 800bd02:	4602      	mov	r2, r0
 800bd04:	6270      	str	r0, [r6, #36]	; 0x24
 800bd06:	b928      	cbnz	r0, 800bd14 <__pow5mult+0x40>
 800bd08:	4b1d      	ldr	r3, [pc, #116]	; (800bd80 <__pow5mult+0xac>)
 800bd0a:	481e      	ldr	r0, [pc, #120]	; (800bd84 <__pow5mult+0xb0>)
 800bd0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd10:	f000 fc62 	bl	800c5d8 <__assert_func>
 800bd14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd18:	6004      	str	r4, [r0, #0]
 800bd1a:	60c4      	str	r4, [r0, #12]
 800bd1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd24:	b94c      	cbnz	r4, 800bd3a <__pow5mult+0x66>
 800bd26:	f240 2171 	movw	r1, #625	; 0x271
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7ff ff16 	bl	800bb5c <__i2b>
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd36:	4604      	mov	r4, r0
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	f04f 0900 	mov.w	r9, #0
 800bd3e:	07eb      	lsls	r3, r5, #31
 800bd40:	d50a      	bpl.n	800bd58 <__pow5mult+0x84>
 800bd42:	4639      	mov	r1, r7
 800bd44:	4622      	mov	r2, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7ff ff1e 	bl	800bb88 <__multiply>
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	4680      	mov	r8, r0
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7ff fdff 	bl	800b954 <_Bfree>
 800bd56:	4647      	mov	r7, r8
 800bd58:	106d      	asrs	r5, r5, #1
 800bd5a:	d00b      	beq.n	800bd74 <__pow5mult+0xa0>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	b938      	cbnz	r0, 800bd70 <__pow5mult+0x9c>
 800bd60:	4622      	mov	r2, r4
 800bd62:	4621      	mov	r1, r4
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7ff ff0f 	bl	800bb88 <__multiply>
 800bd6a:	6020      	str	r0, [r4, #0]
 800bd6c:	f8c0 9000 	str.w	r9, [r0]
 800bd70:	4604      	mov	r4, r0
 800bd72:	e7e4      	b.n	800bd3e <__pow5mult+0x6a>
 800bd74:	4638      	mov	r0, r7
 800bd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd7a:	bf00      	nop
 800bd7c:	0800cef8 	.word	0x0800cef8
 800bd80:	0800cc3d 	.word	0x0800cc3d
 800bd84:	0800cda4 	.word	0x0800cda4

0800bd88 <__lshift>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	6849      	ldr	r1, [r1, #4]
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd96:	68a3      	ldr	r3, [r4, #8]
 800bd98:	4607      	mov	r7, r0
 800bd9a:	4691      	mov	r9, r2
 800bd9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bda0:	f108 0601 	add.w	r6, r8, #1
 800bda4:	42b3      	cmp	r3, r6
 800bda6:	db0b      	blt.n	800bdc0 <__lshift+0x38>
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f7ff fd93 	bl	800b8d4 <_Balloc>
 800bdae:	4605      	mov	r5, r0
 800bdb0:	b948      	cbnz	r0, 800bdc6 <__lshift+0x3e>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	4b28      	ldr	r3, [pc, #160]	; (800be58 <__lshift+0xd0>)
 800bdb6:	4829      	ldr	r0, [pc, #164]	; (800be5c <__lshift+0xd4>)
 800bdb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdbc:	f000 fc0c 	bl	800c5d8 <__assert_func>
 800bdc0:	3101      	adds	r1, #1
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	e7ee      	b.n	800bda4 <__lshift+0x1c>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f100 0114 	add.w	r1, r0, #20
 800bdcc:	f100 0210 	add.w	r2, r0, #16
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	4553      	cmp	r3, sl
 800bdd4:	db33      	blt.n	800be3e <__lshift+0xb6>
 800bdd6:	6920      	ldr	r0, [r4, #16]
 800bdd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bddc:	f104 0314 	add.w	r3, r4, #20
 800bde0:	f019 091f 	ands.w	r9, r9, #31
 800bde4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bde8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdec:	d02b      	beq.n	800be46 <__lshift+0xbe>
 800bdee:	f1c9 0e20 	rsb	lr, r9, #32
 800bdf2:	468a      	mov	sl, r1
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	6818      	ldr	r0, [r3, #0]
 800bdf8:	fa00 f009 	lsl.w	r0, r0, r9
 800bdfc:	4302      	orrs	r2, r0
 800bdfe:	f84a 2b04 	str.w	r2, [sl], #4
 800be02:	f853 2b04 	ldr.w	r2, [r3], #4
 800be06:	459c      	cmp	ip, r3
 800be08:	fa22 f20e 	lsr.w	r2, r2, lr
 800be0c:	d8f3      	bhi.n	800bdf6 <__lshift+0x6e>
 800be0e:	ebac 0304 	sub.w	r3, ip, r4
 800be12:	3b15      	subs	r3, #21
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	3304      	adds	r3, #4
 800be1a:	f104 0015 	add.w	r0, r4, #21
 800be1e:	4584      	cmp	ip, r0
 800be20:	bf38      	it	cc
 800be22:	2304      	movcc	r3, #4
 800be24:	50ca      	str	r2, [r1, r3]
 800be26:	b10a      	cbz	r2, 800be2c <__lshift+0xa4>
 800be28:	f108 0602 	add.w	r6, r8, #2
 800be2c:	3e01      	subs	r6, #1
 800be2e:	4638      	mov	r0, r7
 800be30:	612e      	str	r6, [r5, #16]
 800be32:	4621      	mov	r1, r4
 800be34:	f7ff fd8e 	bl	800b954 <_Bfree>
 800be38:	4628      	mov	r0, r5
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be42:	3301      	adds	r3, #1
 800be44:	e7c5      	b.n	800bdd2 <__lshift+0x4a>
 800be46:	3904      	subs	r1, #4
 800be48:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be50:	459c      	cmp	ip, r3
 800be52:	d8f9      	bhi.n	800be48 <__lshift+0xc0>
 800be54:	e7ea      	b.n	800be2c <__lshift+0xa4>
 800be56:	bf00      	nop
 800be58:	0800ccb3 	.word	0x0800ccb3
 800be5c:	0800cda4 	.word	0x0800cda4

0800be60 <__mcmp>:
 800be60:	690a      	ldr	r2, [r1, #16]
 800be62:	4603      	mov	r3, r0
 800be64:	6900      	ldr	r0, [r0, #16]
 800be66:	1a80      	subs	r0, r0, r2
 800be68:	b530      	push	{r4, r5, lr}
 800be6a:	d10d      	bne.n	800be88 <__mcmp+0x28>
 800be6c:	3314      	adds	r3, #20
 800be6e:	3114      	adds	r1, #20
 800be70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be80:	4295      	cmp	r5, r2
 800be82:	d002      	beq.n	800be8a <__mcmp+0x2a>
 800be84:	d304      	bcc.n	800be90 <__mcmp+0x30>
 800be86:	2001      	movs	r0, #1
 800be88:	bd30      	pop	{r4, r5, pc}
 800be8a:	42a3      	cmp	r3, r4
 800be8c:	d3f4      	bcc.n	800be78 <__mcmp+0x18>
 800be8e:	e7fb      	b.n	800be88 <__mcmp+0x28>
 800be90:	f04f 30ff 	mov.w	r0, #4294967295
 800be94:	e7f8      	b.n	800be88 <__mcmp+0x28>
	...

0800be98 <__mdiff>:
 800be98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	4606      	mov	r6, r0
 800bea0:	4611      	mov	r1, r2
 800bea2:	4620      	mov	r0, r4
 800bea4:	4617      	mov	r7, r2
 800bea6:	f7ff ffdb 	bl	800be60 <__mcmp>
 800beaa:	1e05      	subs	r5, r0, #0
 800beac:	d111      	bne.n	800bed2 <__mdiff+0x3a>
 800beae:	4629      	mov	r1, r5
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fd0f 	bl	800b8d4 <_Balloc>
 800beb6:	4602      	mov	r2, r0
 800beb8:	b928      	cbnz	r0, 800bec6 <__mdiff+0x2e>
 800beba:	4b3a      	ldr	r3, [pc, #232]	; (800bfa4 <__mdiff+0x10c>)
 800bebc:	f240 2132 	movw	r1, #562	; 0x232
 800bec0:	4839      	ldr	r0, [pc, #228]	; (800bfa8 <__mdiff+0x110>)
 800bec2:	f000 fb89 	bl	800c5d8 <__assert_func>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800becc:	4610      	mov	r0, r2
 800bece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	bfa4      	itt	ge
 800bed4:	463b      	movge	r3, r7
 800bed6:	4627      	movge	r7, r4
 800bed8:	4630      	mov	r0, r6
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	bfa6      	itte	ge
 800bede:	461c      	movge	r4, r3
 800bee0:	2500      	movge	r5, #0
 800bee2:	2501      	movlt	r5, #1
 800bee4:	f7ff fcf6 	bl	800b8d4 <_Balloc>
 800bee8:	4602      	mov	r2, r0
 800beea:	b918      	cbnz	r0, 800bef4 <__mdiff+0x5c>
 800beec:	4b2d      	ldr	r3, [pc, #180]	; (800bfa4 <__mdiff+0x10c>)
 800beee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bef2:	e7e5      	b.n	800bec0 <__mdiff+0x28>
 800bef4:	693e      	ldr	r6, [r7, #16]
 800bef6:	60c5      	str	r5, [r0, #12]
 800bef8:	6925      	ldr	r5, [r4, #16]
 800befa:	f107 0114 	add.w	r1, r7, #20
 800befe:	f100 0e14 	add.w	lr, r0, #20
 800bf02:	f104 0914 	add.w	r9, r4, #20
 800bf06:	f107 0010 	add.w	r0, r7, #16
 800bf0a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bf0e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bf12:	46f2      	mov	sl, lr
 800bf14:	2700      	movs	r7, #0
 800bf16:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf1a:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bf1e:	fa1f f883 	uxth.w	r8, r3
 800bf22:	fa17 f78b 	uxtah	r7, r7, fp
 800bf26:	0c1b      	lsrs	r3, r3, #16
 800bf28:	eba7 0808 	sub.w	r8, r7, r8
 800bf2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf34:	fa1f f888 	uxth.w	r8, r8
 800bf38:	141f      	asrs	r7, r3, #16
 800bf3a:	454d      	cmp	r5, r9
 800bf3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf40:	f84a 3b04 	str.w	r3, [sl], #4
 800bf44:	d8e7      	bhi.n	800bf16 <__mdiff+0x7e>
 800bf46:	1b2b      	subs	r3, r5, r4
 800bf48:	3b15      	subs	r3, #21
 800bf4a:	f023 0303 	bic.w	r3, r3, #3
 800bf4e:	3304      	adds	r3, #4
 800bf50:	3415      	adds	r4, #21
 800bf52:	42a5      	cmp	r5, r4
 800bf54:	bf38      	it	cc
 800bf56:	2304      	movcc	r3, #4
 800bf58:	4419      	add	r1, r3
 800bf5a:	4473      	add	r3, lr
 800bf5c:	469e      	mov	lr, r3
 800bf5e:	460d      	mov	r5, r1
 800bf60:	4565      	cmp	r5, ip
 800bf62:	d30e      	bcc.n	800bf82 <__mdiff+0xea>
 800bf64:	f10c 0003 	add.w	r0, ip, #3
 800bf68:	1a40      	subs	r0, r0, r1
 800bf6a:	f020 0003 	bic.w	r0, r0, #3
 800bf6e:	3903      	subs	r1, #3
 800bf70:	458c      	cmp	ip, r1
 800bf72:	bf38      	it	cc
 800bf74:	2000      	movcc	r0, #0
 800bf76:	4418      	add	r0, r3
 800bf78:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800bf7c:	b17b      	cbz	r3, 800bf9e <__mdiff+0x106>
 800bf7e:	6116      	str	r6, [r2, #16]
 800bf80:	e7a4      	b.n	800becc <__mdiff+0x34>
 800bf82:	f855 8b04 	ldr.w	r8, [r5], #4
 800bf86:	fa17 f488 	uxtah	r4, r7, r8
 800bf8a:	1420      	asrs	r0, r4, #16
 800bf8c:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bf90:	b2a4      	uxth	r4, r4
 800bf92:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800bf96:	f84e 4b04 	str.w	r4, [lr], #4
 800bf9a:	1407      	asrs	r7, r0, #16
 800bf9c:	e7e0      	b.n	800bf60 <__mdiff+0xc8>
 800bf9e:	3e01      	subs	r6, #1
 800bfa0:	e7ea      	b.n	800bf78 <__mdiff+0xe0>
 800bfa2:	bf00      	nop
 800bfa4:	0800ccb3 	.word	0x0800ccb3
 800bfa8:	0800cda4 	.word	0x0800cda4

0800bfac <__ulp>:
 800bfac:	4b11      	ldr	r3, [pc, #68]	; (800bff4 <__ulp+0x48>)
 800bfae:	400b      	ands	r3, r1
 800bfb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	dd02      	ble.n	800bfbe <__ulp+0x12>
 800bfb8:	2000      	movs	r0, #0
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4770      	bx	lr
 800bfbe:	425b      	negs	r3, r3
 800bfc0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bfc4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfc8:	f04f 0000 	mov.w	r0, #0
 800bfcc:	f04f 0100 	mov.w	r1, #0
 800bfd0:	da04      	bge.n	800bfdc <__ulp+0x30>
 800bfd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bfd6:	fa43 f102 	asr.w	r1, r3, r2
 800bfda:	4770      	bx	lr
 800bfdc:	f1a2 0314 	sub.w	r3, r2, #20
 800bfe0:	2b1e      	cmp	r3, #30
 800bfe2:	bfda      	itte	le
 800bfe4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bfe8:	fa22 f303 	lsrle.w	r3, r2, r3
 800bfec:	2301      	movgt	r3, #1
 800bfee:	4618      	mov	r0, r3
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	7ff00000 	.word	0x7ff00000

0800bff8 <__b2d>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	6907      	ldr	r7, [r0, #16]
 800bffe:	f100 0914 	add.w	r9, r0, #20
 800c002:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c006:	f1a7 0804 	sub.w	r8, r7, #4
 800c00a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c00e:	4630      	mov	r0, r6
 800c010:	f7ff fd56 	bl	800bac0 <__hi0bits>
 800c014:	f1c0 0320 	rsb	r3, r0, #32
 800c018:	280a      	cmp	r0, #10
 800c01a:	600b      	str	r3, [r1, #0]
 800c01c:	491f      	ldr	r1, [pc, #124]	; (800c09c <__b2d+0xa4>)
 800c01e:	dc17      	bgt.n	800c050 <__b2d+0x58>
 800c020:	f1c0 0c0b 	rsb	ip, r0, #11
 800c024:	45c1      	cmp	r9, r8
 800c026:	fa26 f30c 	lsr.w	r3, r6, ip
 800c02a:	bf38      	it	cc
 800c02c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c030:	ea43 0501 	orr.w	r5, r3, r1
 800c034:	bf28      	it	cs
 800c036:	2200      	movcs	r2, #0
 800c038:	f100 0315 	add.w	r3, r0, #21
 800c03c:	fa06 f303 	lsl.w	r3, r6, r3
 800c040:	fa22 f20c 	lsr.w	r2, r2, ip
 800c044:	ea43 0402 	orr.w	r4, r3, r2
 800c048:	4620      	mov	r0, r4
 800c04a:	4629      	mov	r1, r5
 800c04c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c050:	45c1      	cmp	r9, r8
 800c052:	bf3a      	itte	cc
 800c054:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c058:	f1a7 0808 	subcc.w	r8, r7, #8
 800c05c:	2200      	movcs	r2, #0
 800c05e:	f1b0 030b 	subs.w	r3, r0, #11
 800c062:	d016      	beq.n	800c092 <__b2d+0x9a>
 800c064:	f1c3 0720 	rsb	r7, r3, #32
 800c068:	fa22 f107 	lsr.w	r1, r2, r7
 800c06c:	45c8      	cmp	r8, r9
 800c06e:	fa06 f603 	lsl.w	r6, r6, r3
 800c072:	ea46 0601 	orr.w	r6, r6, r1
 800c076:	bf8c      	ite	hi
 800c078:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c07c:	2100      	movls	r1, #0
 800c07e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c082:	fa02 f003 	lsl.w	r0, r2, r3
 800c086:	40f9      	lsrs	r1, r7
 800c088:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c08c:	ea40 0401 	orr.w	r4, r0, r1
 800c090:	e7da      	b.n	800c048 <__b2d+0x50>
 800c092:	ea46 0501 	orr.w	r5, r6, r1
 800c096:	4614      	mov	r4, r2
 800c098:	e7d6      	b.n	800c048 <__b2d+0x50>
 800c09a:	bf00      	nop
 800c09c:	3ff00000 	.word	0x3ff00000

0800c0a0 <__d2b>:
 800c0a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c0aa:	4690      	mov	r8, r2
 800c0ac:	461d      	mov	r5, r3
 800c0ae:	f7ff fc11 	bl	800b8d4 <_Balloc>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	b930      	cbnz	r0, 800c0c4 <__d2b+0x24>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	4b25      	ldr	r3, [pc, #148]	; (800c150 <__d2b+0xb0>)
 800c0ba:	4826      	ldr	r0, [pc, #152]	; (800c154 <__d2b+0xb4>)
 800c0bc:	f240 310a 	movw	r1, #778	; 0x30a
 800c0c0:	f000 fa8a 	bl	800c5d8 <__assert_func>
 800c0c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c0c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c0cc:	bb2d      	cbnz	r5, 800c11a <__d2b+0x7a>
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0d4:	d026      	beq.n	800c124 <__d2b+0x84>
 800c0d6:	4668      	mov	r0, sp
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	f7ff fd11 	bl	800bb00 <__lo0bits>
 800c0de:	9900      	ldr	r1, [sp, #0]
 800c0e0:	b1f0      	cbz	r0, 800c120 <__d2b+0x80>
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	f1c0 0320 	rsb	r3, r0, #32
 800c0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	40c2      	lsrs	r2, r0
 800c0f0:	6163      	str	r3, [r4, #20]
 800c0f2:	9201      	str	r2, [sp, #4]
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	61a3      	str	r3, [r4, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	bf14      	ite	ne
 800c0fc:	2102      	movne	r1, #2
 800c0fe:	2101      	moveq	r1, #1
 800c100:	6121      	str	r1, [r4, #16]
 800c102:	b1c5      	cbz	r5, 800c136 <__d2b+0x96>
 800c104:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c108:	4405      	add	r5, r0
 800c10a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c10e:	603d      	str	r5, [r7, #0]
 800c110:	6030      	str	r0, [r6, #0]
 800c112:	4620      	mov	r0, r4
 800c114:	b002      	add	sp, #8
 800c116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c11e:	e7d6      	b.n	800c0ce <__d2b+0x2e>
 800c120:	6161      	str	r1, [r4, #20]
 800c122:	e7e7      	b.n	800c0f4 <__d2b+0x54>
 800c124:	a801      	add	r0, sp, #4
 800c126:	f7ff fceb 	bl	800bb00 <__lo0bits>
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	6163      	str	r3, [r4, #20]
 800c12e:	2101      	movs	r1, #1
 800c130:	6121      	str	r1, [r4, #16]
 800c132:	3020      	adds	r0, #32
 800c134:	e7e5      	b.n	800c102 <__d2b+0x62>
 800c136:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c13a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c13e:	6038      	str	r0, [r7, #0]
 800c140:	6918      	ldr	r0, [r3, #16]
 800c142:	f7ff fcbd 	bl	800bac0 <__hi0bits>
 800c146:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c14a:	6031      	str	r1, [r6, #0]
 800c14c:	e7e1      	b.n	800c112 <__d2b+0x72>
 800c14e:	bf00      	nop
 800c150:	0800ccb3 	.word	0x0800ccb3
 800c154:	0800cda4 	.word	0x0800cda4

0800c158 <__ratio>:
 800c158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	4688      	mov	r8, r1
 800c15e:	4669      	mov	r1, sp
 800c160:	4681      	mov	r9, r0
 800c162:	f7ff ff49 	bl	800bff8 <__b2d>
 800c166:	460f      	mov	r7, r1
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	4640      	mov	r0, r8
 800c16e:	a901      	add	r1, sp, #4
 800c170:	f7ff ff42 	bl	800bff8 <__b2d>
 800c174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c178:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c17c:	eba3 0c02 	sub.w	ip, r3, r2
 800c180:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfd5      	itete	le
 800c18e:	460a      	movle	r2, r1
 800c190:	462a      	movgt	r2, r5
 800c192:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c196:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c19a:	468b      	mov	fp, r1
 800c19c:	bfd8      	it	le
 800c19e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1a2:	465b      	mov	r3, fp
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7f4 fb27 	bl	80007fc <__aeabi_ddiv>
 800c1ae:	b003      	add	sp, #12
 800c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1b4 <__copybits>:
 800c1b4:	3901      	subs	r1, #1
 800c1b6:	b570      	push	{r4, r5, r6, lr}
 800c1b8:	1149      	asrs	r1, r1, #5
 800c1ba:	6914      	ldr	r4, [r2, #16]
 800c1bc:	3101      	adds	r1, #1
 800c1be:	f102 0314 	add.w	r3, r2, #20
 800c1c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1ca:	1f05      	subs	r5, r0, #4
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	d30c      	bcc.n	800c1ea <__copybits+0x36>
 800c1d0:	1aa3      	subs	r3, r4, r2
 800c1d2:	3b11      	subs	r3, #17
 800c1d4:	f023 0303 	bic.w	r3, r3, #3
 800c1d8:	3211      	adds	r2, #17
 800c1da:	42a2      	cmp	r2, r4
 800c1dc:	bf88      	it	hi
 800c1de:	2300      	movhi	r3, #0
 800c1e0:	4418      	add	r0, r3
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4288      	cmp	r0, r1
 800c1e6:	d305      	bcc.n	800c1f4 <__copybits+0x40>
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1f2:	e7eb      	b.n	800c1cc <__copybits+0x18>
 800c1f4:	f840 3b04 	str.w	r3, [r0], #4
 800c1f8:	e7f4      	b.n	800c1e4 <__copybits+0x30>

0800c1fa <__any_on>:
 800c1fa:	f100 0214 	add.w	r2, r0, #20
 800c1fe:	6900      	ldr	r0, [r0, #16]
 800c200:	114b      	asrs	r3, r1, #5
 800c202:	4298      	cmp	r0, r3
 800c204:	b510      	push	{r4, lr}
 800c206:	db11      	blt.n	800c22c <__any_on+0x32>
 800c208:	dd0a      	ble.n	800c220 <__any_on+0x26>
 800c20a:	f011 011f 	ands.w	r1, r1, #31
 800c20e:	d007      	beq.n	800c220 <__any_on+0x26>
 800c210:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c214:	fa24 f001 	lsr.w	r0, r4, r1
 800c218:	fa00 f101 	lsl.w	r1, r0, r1
 800c21c:	428c      	cmp	r4, r1
 800c21e:	d10b      	bne.n	800c238 <__any_on+0x3e>
 800c220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c224:	4293      	cmp	r3, r2
 800c226:	d803      	bhi.n	800c230 <__any_on+0x36>
 800c228:	2000      	movs	r0, #0
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	4603      	mov	r3, r0
 800c22e:	e7f7      	b.n	800c220 <__any_on+0x26>
 800c230:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c234:	2900      	cmp	r1, #0
 800c236:	d0f5      	beq.n	800c224 <__any_on+0x2a>
 800c238:	2001      	movs	r0, #1
 800c23a:	e7f6      	b.n	800c22a <__any_on+0x30>

0800c23c <_calloc_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	fb02 f501 	mul.w	r5, r2, r1
 800c242:	4629      	mov	r1, r5
 800c244:	f7fc face 	bl	80087e4 <_malloc_r>
 800c248:	4604      	mov	r4, r0
 800c24a:	b118      	cbz	r0, 800c254 <_calloc_r+0x18>
 800c24c:	462a      	mov	r2, r5
 800c24e:	2100      	movs	r1, #0
 800c250:	f7fc fa72 	bl	8008738 <memset>
 800c254:	4620      	mov	r0, r4
 800c256:	bd38      	pop	{r3, r4, r5, pc}

0800c258 <__sfputc_r>:
 800c258:	6893      	ldr	r3, [r2, #8]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	b410      	push	{r4}
 800c260:	6093      	str	r3, [r2, #8]
 800c262:	da07      	bge.n	800c274 <__sfputc_r+0x1c>
 800c264:	6994      	ldr	r4, [r2, #24]
 800c266:	42a3      	cmp	r3, r4
 800c268:	db01      	blt.n	800c26e <__sfputc_r+0x16>
 800c26a:	290a      	cmp	r1, #10
 800c26c:	d102      	bne.n	800c274 <__sfputc_r+0x1c>
 800c26e:	bc10      	pop	{r4}
 800c270:	f7fd be52 	b.w	8009f18 <__swbuf_r>
 800c274:	6813      	ldr	r3, [r2, #0]
 800c276:	1c58      	adds	r0, r3, #1
 800c278:	6010      	str	r0, [r2, #0]
 800c27a:	7019      	strb	r1, [r3, #0]
 800c27c:	4608      	mov	r0, r1
 800c27e:	bc10      	pop	{r4}
 800c280:	4770      	bx	lr

0800c282 <__sfputs_r>:
 800c282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c284:	4606      	mov	r6, r0
 800c286:	460f      	mov	r7, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	18d5      	adds	r5, r2, r3
 800c28c:	42ac      	cmp	r4, r5
 800c28e:	d101      	bne.n	800c294 <__sfputs_r+0x12>
 800c290:	2000      	movs	r0, #0
 800c292:	e007      	b.n	800c2a4 <__sfputs_r+0x22>
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	463a      	mov	r2, r7
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7ff ffdc 	bl	800c258 <__sfputc_r>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d1f3      	bne.n	800c28c <__sfputs_r+0xa>
 800c2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2a8 <_vfiprintf_r>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	b09d      	sub	sp, #116	; 0x74
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	4698      	mov	r8, r3
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	b118      	cbz	r0, 800c2c0 <_vfiprintf_r+0x18>
 800c2b8:	6983      	ldr	r3, [r0, #24]
 800c2ba:	b90b      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x18>
 800c2bc:	f7fe fe80 	bl	800afc0 <__sinit>
 800c2c0:	4b89      	ldr	r3, [pc, #548]	; (800c4e8 <_vfiprintf_r+0x240>)
 800c2c2:	429d      	cmp	r5, r3
 800c2c4:	d11b      	bne.n	800c2fe <_vfiprintf_r+0x56>
 800c2c6:	6875      	ldr	r5, [r6, #4]
 800c2c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2ca:	07d9      	lsls	r1, r3, #31
 800c2cc:	d405      	bmi.n	800c2da <_vfiprintf_r+0x32>
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	059a      	lsls	r2, r3, #22
 800c2d2:	d402      	bmi.n	800c2da <_vfiprintf_r+0x32>
 800c2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2d6:	f7ff fa78 	bl	800b7ca <__retarget_lock_acquire_recursive>
 800c2da:	89ab      	ldrh	r3, [r5, #12]
 800c2dc:	071b      	lsls	r3, r3, #28
 800c2de:	d501      	bpl.n	800c2e4 <_vfiprintf_r+0x3c>
 800c2e0:	692b      	ldr	r3, [r5, #16]
 800c2e2:	b9eb      	cbnz	r3, 800c320 <_vfiprintf_r+0x78>
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7fd fe68 	bl	8009fbc <__swsetup_r>
 800c2ec:	b1c0      	cbz	r0, 800c320 <_vfiprintf_r+0x78>
 800c2ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2f0:	07dc      	lsls	r4, r3, #31
 800c2f2:	d50e      	bpl.n	800c312 <_vfiprintf_r+0x6a>
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f8:	b01d      	add	sp, #116	; 0x74
 800c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	4b7b      	ldr	r3, [pc, #492]	; (800c4ec <_vfiprintf_r+0x244>)
 800c300:	429d      	cmp	r5, r3
 800c302:	d101      	bne.n	800c308 <_vfiprintf_r+0x60>
 800c304:	68b5      	ldr	r5, [r6, #8]
 800c306:	e7df      	b.n	800c2c8 <_vfiprintf_r+0x20>
 800c308:	4b79      	ldr	r3, [pc, #484]	; (800c4f0 <_vfiprintf_r+0x248>)
 800c30a:	429d      	cmp	r5, r3
 800c30c:	bf08      	it	eq
 800c30e:	68f5      	ldreq	r5, [r6, #12]
 800c310:	e7da      	b.n	800c2c8 <_vfiprintf_r+0x20>
 800c312:	89ab      	ldrh	r3, [r5, #12]
 800c314:	0598      	lsls	r0, r3, #22
 800c316:	d4ed      	bmi.n	800c2f4 <_vfiprintf_r+0x4c>
 800c318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c31a:	f7ff fa57 	bl	800b7cc <__retarget_lock_release_recursive>
 800c31e:	e7e9      	b.n	800c2f4 <_vfiprintf_r+0x4c>
 800c320:	2300      	movs	r3, #0
 800c322:	9309      	str	r3, [sp, #36]	; 0x24
 800c324:	2320      	movs	r3, #32
 800c326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c32a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c32e:	2330      	movs	r3, #48	; 0x30
 800c330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4f4 <_vfiprintf_r+0x24c>
 800c334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c338:	f04f 0901 	mov.w	r9, #1
 800c33c:	4623      	mov	r3, r4
 800c33e:	469a      	mov	sl, r3
 800c340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c344:	b10a      	cbz	r2, 800c34a <_vfiprintf_r+0xa2>
 800c346:	2a25      	cmp	r2, #37	; 0x25
 800c348:	d1f9      	bne.n	800c33e <_vfiprintf_r+0x96>
 800c34a:	ebba 0b04 	subs.w	fp, sl, r4
 800c34e:	d00b      	beq.n	800c368 <_vfiprintf_r+0xc0>
 800c350:	465b      	mov	r3, fp
 800c352:	4622      	mov	r2, r4
 800c354:	4629      	mov	r1, r5
 800c356:	4630      	mov	r0, r6
 800c358:	f7ff ff93 	bl	800c282 <__sfputs_r>
 800c35c:	3001      	adds	r0, #1
 800c35e:	f000 80aa 	beq.w	800c4b6 <_vfiprintf_r+0x20e>
 800c362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c364:	445a      	add	r2, fp
 800c366:	9209      	str	r2, [sp, #36]	; 0x24
 800c368:	f89a 3000 	ldrb.w	r3, [sl]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80a2 	beq.w	800c4b6 <_vfiprintf_r+0x20e>
 800c372:	2300      	movs	r3, #0
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c37c:	f10a 0a01 	add.w	sl, sl, #1
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	9307      	str	r3, [sp, #28]
 800c384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c388:	931a      	str	r3, [sp, #104]	; 0x68
 800c38a:	4654      	mov	r4, sl
 800c38c:	2205      	movs	r2, #5
 800c38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c392:	4858      	ldr	r0, [pc, #352]	; (800c4f4 <_vfiprintf_r+0x24c>)
 800c394:	f7f3 fefc 	bl	8000190 <memchr>
 800c398:	9a04      	ldr	r2, [sp, #16]
 800c39a:	b9d8      	cbnz	r0, 800c3d4 <_vfiprintf_r+0x12c>
 800c39c:	06d1      	lsls	r1, r2, #27
 800c39e:	bf44      	itt	mi
 800c3a0:	2320      	movmi	r3, #32
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a6:	0713      	lsls	r3, r2, #28
 800c3a8:	bf44      	itt	mi
 800c3aa:	232b      	movmi	r3, #43	; 0x2b
 800c3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b6:	d015      	beq.n	800c3e4 <_vfiprintf_r+0x13c>
 800c3b8:	9a07      	ldr	r2, [sp, #28]
 800c3ba:	4654      	mov	r4, sl
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f04f 0c0a 	mov.w	ip, #10
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3c8:	3b30      	subs	r3, #48	; 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d94e      	bls.n	800c46c <_vfiprintf_r+0x1c4>
 800c3ce:	b1b0      	cbz	r0, 800c3fe <_vfiprintf_r+0x156>
 800c3d0:	9207      	str	r2, [sp, #28]
 800c3d2:	e014      	b.n	800c3fe <_vfiprintf_r+0x156>
 800c3d4:	eba0 0308 	sub.w	r3, r0, r8
 800c3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	46a2      	mov	sl, r4
 800c3e2:	e7d2      	b.n	800c38a <_vfiprintf_r+0xe2>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	1d19      	adds	r1, r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	9103      	str	r1, [sp, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	bfbb      	ittet	lt
 800c3f0:	425b      	neglt	r3, r3
 800c3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f6:	9307      	strge	r3, [sp, #28]
 800c3f8:	9307      	strlt	r3, [sp, #28]
 800c3fa:	bfb8      	it	lt
 800c3fc:	9204      	strlt	r2, [sp, #16]
 800c3fe:	7823      	ldrb	r3, [r4, #0]
 800c400:	2b2e      	cmp	r3, #46	; 0x2e
 800c402:	d10c      	bne.n	800c41e <_vfiprintf_r+0x176>
 800c404:	7863      	ldrb	r3, [r4, #1]
 800c406:	2b2a      	cmp	r3, #42	; 0x2a
 800c408:	d135      	bne.n	800c476 <_vfiprintf_r+0x1ce>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	1d1a      	adds	r2, r3, #4
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	9203      	str	r2, [sp, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfb8      	it	lt
 800c416:	f04f 33ff 	movlt.w	r3, #4294967295
 800c41a:	3402      	adds	r4, #2
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c504 <_vfiprintf_r+0x25c>
 800c422:	7821      	ldrb	r1, [r4, #0]
 800c424:	2203      	movs	r2, #3
 800c426:	4650      	mov	r0, sl
 800c428:	f7f3 feb2 	bl	8000190 <memchr>
 800c42c:	b140      	cbz	r0, 800c440 <_vfiprintf_r+0x198>
 800c42e:	2340      	movs	r3, #64	; 0x40
 800c430:	eba0 000a 	sub.w	r0, r0, sl
 800c434:	fa03 f000 	lsl.w	r0, r3, r0
 800c438:	9b04      	ldr	r3, [sp, #16]
 800c43a:	4303      	orrs	r3, r0
 800c43c:	3401      	adds	r4, #1
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	482c      	ldr	r0, [pc, #176]	; (800c4f8 <_vfiprintf_r+0x250>)
 800c446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c44a:	2206      	movs	r2, #6
 800c44c:	f7f3 fea0 	bl	8000190 <memchr>
 800c450:	2800      	cmp	r0, #0
 800c452:	d03f      	beq.n	800c4d4 <_vfiprintf_r+0x22c>
 800c454:	4b29      	ldr	r3, [pc, #164]	; (800c4fc <_vfiprintf_r+0x254>)
 800c456:	bb1b      	cbnz	r3, 800c4a0 <_vfiprintf_r+0x1f8>
 800c458:	9b03      	ldr	r3, [sp, #12]
 800c45a:	3307      	adds	r3, #7
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	9303      	str	r3, [sp, #12]
 800c464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c466:	443b      	add	r3, r7
 800c468:	9309      	str	r3, [sp, #36]	; 0x24
 800c46a:	e767      	b.n	800c33c <_vfiprintf_r+0x94>
 800c46c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c470:	460c      	mov	r4, r1
 800c472:	2001      	movs	r0, #1
 800c474:	e7a5      	b.n	800c3c2 <_vfiprintf_r+0x11a>
 800c476:	2300      	movs	r3, #0
 800c478:	3401      	adds	r4, #1
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	4619      	mov	r1, r3
 800c47e:	f04f 0c0a 	mov.w	ip, #10
 800c482:	4620      	mov	r0, r4
 800c484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c488:	3a30      	subs	r2, #48	; 0x30
 800c48a:	2a09      	cmp	r2, #9
 800c48c:	d903      	bls.n	800c496 <_vfiprintf_r+0x1ee>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0c5      	beq.n	800c41e <_vfiprintf_r+0x176>
 800c492:	9105      	str	r1, [sp, #20]
 800c494:	e7c3      	b.n	800c41e <_vfiprintf_r+0x176>
 800c496:	fb0c 2101 	mla	r1, ip, r1, r2
 800c49a:	4604      	mov	r4, r0
 800c49c:	2301      	movs	r3, #1
 800c49e:	e7f0      	b.n	800c482 <_vfiprintf_r+0x1da>
 800c4a0:	ab03      	add	r3, sp, #12
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	462a      	mov	r2, r5
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <_vfiprintf_r+0x258>)
 800c4a8:	a904      	add	r1, sp, #16
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f7fc fa92 	bl	80089d4 <_printf_float>
 800c4b0:	4607      	mov	r7, r0
 800c4b2:	1c78      	adds	r0, r7, #1
 800c4b4:	d1d6      	bne.n	800c464 <_vfiprintf_r+0x1bc>
 800c4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4b8:	07d9      	lsls	r1, r3, #31
 800c4ba:	d405      	bmi.n	800c4c8 <_vfiprintf_r+0x220>
 800c4bc:	89ab      	ldrh	r3, [r5, #12]
 800c4be:	059a      	lsls	r2, r3, #22
 800c4c0:	d402      	bmi.n	800c4c8 <_vfiprintf_r+0x220>
 800c4c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4c4:	f7ff f982 	bl	800b7cc <__retarget_lock_release_recursive>
 800c4c8:	89ab      	ldrh	r3, [r5, #12]
 800c4ca:	065b      	lsls	r3, r3, #25
 800c4cc:	f53f af12 	bmi.w	800c2f4 <_vfiprintf_r+0x4c>
 800c4d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4d2:	e711      	b.n	800c2f8 <_vfiprintf_r+0x50>
 800c4d4:	ab03      	add	r3, sp, #12
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	462a      	mov	r2, r5
 800c4da:	4b09      	ldr	r3, [pc, #36]	; (800c500 <_vfiprintf_r+0x258>)
 800c4dc:	a904      	add	r1, sp, #16
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7fc fd10 	bl	8008f04 <_printf_i>
 800c4e4:	e7e4      	b.n	800c4b0 <_vfiprintf_r+0x208>
 800c4e6:	bf00      	nop
 800c4e8:	0800cce4 	.word	0x0800cce4
 800c4ec:	0800cd04 	.word	0x0800cd04
 800c4f0:	0800ccc4 	.word	0x0800ccc4
 800c4f4:	0800cf04 	.word	0x0800cf04
 800c4f8:	0800cf0e 	.word	0x0800cf0e
 800c4fc:	080089d5 	.word	0x080089d5
 800c500:	0800c283 	.word	0x0800c283
 800c504:	0800cf0a 	.word	0x0800cf0a

0800c508 <nan>:
 800c508:	4901      	ldr	r1, [pc, #4]	; (800c510 <nan+0x8>)
 800c50a:	2000      	movs	r0, #0
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	7ff80000 	.word	0x7ff80000

0800c514 <__sread>:
 800c514:	b510      	push	{r4, lr}
 800c516:	460c      	mov	r4, r1
 800c518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c51c:	f000 f8d0 	bl	800c6c0 <_read_r>
 800c520:	2800      	cmp	r0, #0
 800c522:	bfab      	itete	ge
 800c524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c526:	89a3      	ldrhlt	r3, [r4, #12]
 800c528:	181b      	addge	r3, r3, r0
 800c52a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c52e:	bfac      	ite	ge
 800c530:	6563      	strge	r3, [r4, #84]	; 0x54
 800c532:	81a3      	strhlt	r3, [r4, #12]
 800c534:	bd10      	pop	{r4, pc}

0800c536 <__swrite>:
 800c536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c53a:	461f      	mov	r7, r3
 800c53c:	898b      	ldrh	r3, [r1, #12]
 800c53e:	05db      	lsls	r3, r3, #23
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4616      	mov	r6, r2
 800c546:	d505      	bpl.n	800c554 <__swrite+0x1e>
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	2302      	movs	r3, #2
 800c54e:	2200      	movs	r2, #0
 800c550:	f000 f8a4 	bl	800c69c <_lseek_r>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	4632      	mov	r2, r6
 800c562:	463b      	mov	r3, r7
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	f000 b823 	b.w	800c5b4 <_write_r>

0800c56e <__sseek>:
 800c56e:	b510      	push	{r4, lr}
 800c570:	460c      	mov	r4, r1
 800c572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c576:	f000 f891 	bl	800c69c <_lseek_r>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	bf15      	itete	ne
 800c580:	6560      	strne	r0, [r4, #84]	; 0x54
 800c582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c58a:	81a3      	strheq	r3, [r4, #12]
 800c58c:	bf18      	it	ne
 800c58e:	81a3      	strhne	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__sclose>:
 800c592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c596:	f000 b83d 	b.w	800c614 <_close_r>

0800c59a <__ascii_wctomb>:
 800c59a:	4603      	mov	r3, r0
 800c59c:	4608      	mov	r0, r1
 800c59e:	b141      	cbz	r1, 800c5b2 <__ascii_wctomb+0x18>
 800c5a0:	2aff      	cmp	r2, #255	; 0xff
 800c5a2:	d904      	bls.n	800c5ae <__ascii_wctomb+0x14>
 800c5a4:	228a      	movs	r2, #138	; 0x8a
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	4770      	bx	lr
 800c5ae:	700a      	strb	r2, [r1, #0]
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	4770      	bx	lr

0800c5b4 <_write_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_write_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f5 fb48 	bl	8001c58 <_write>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_write_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_write_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	200006f8 	.word	0x200006f8

0800c5d8 <__assert_func>:
 800c5d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5da:	4614      	mov	r4, r2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <__assert_func+0x2c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	68d8      	ldr	r0, [r3, #12]
 800c5e6:	b14c      	cbz	r4, 800c5fc <__assert_func+0x24>
 800c5e8:	4b07      	ldr	r3, [pc, #28]	; (800c608 <__assert_func+0x30>)
 800c5ea:	9100      	str	r1, [sp, #0]
 800c5ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5f0:	4906      	ldr	r1, [pc, #24]	; (800c60c <__assert_func+0x34>)
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	f000 f81e 	bl	800c634 <fiprintf>
 800c5f8:	f000 f874 	bl	800c6e4 <abort>
 800c5fc:	4b04      	ldr	r3, [pc, #16]	; (800c610 <__assert_func+0x38>)
 800c5fe:	461c      	mov	r4, r3
 800c600:	e7f3      	b.n	800c5ea <__assert_func+0x12>
 800c602:	bf00      	nop
 800c604:	2000000c 	.word	0x2000000c
 800c608:	0800cf15 	.word	0x0800cf15
 800c60c:	0800cf22 	.word	0x0800cf22
 800c610:	0800cf50 	.word	0x0800cf50

0800c614 <_close_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d06      	ldr	r5, [pc, #24]	; (800c630 <_close_r+0x1c>)
 800c618:	2300      	movs	r3, #0
 800c61a:	4604      	mov	r4, r0
 800c61c:	4608      	mov	r0, r1
 800c61e:	602b      	str	r3, [r5, #0]
 800c620:	f7f5 fb36 	bl	8001c90 <_close>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_close_r+0x1a>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_close_r+0x1a>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	200006f8 	.word	0x200006f8

0800c634 <fiprintf>:
 800c634:	b40e      	push	{r1, r2, r3}
 800c636:	b503      	push	{r0, r1, lr}
 800c638:	4601      	mov	r1, r0
 800c63a:	ab03      	add	r3, sp, #12
 800c63c:	4805      	ldr	r0, [pc, #20]	; (800c654 <fiprintf+0x20>)
 800c63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c642:	6800      	ldr	r0, [r0, #0]
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	f7ff fe2f 	bl	800c2a8 <_vfiprintf_r>
 800c64a:	b002      	add	sp, #8
 800c64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c650:	b003      	add	sp, #12
 800c652:	4770      	bx	lr
 800c654:	2000000c 	.word	0x2000000c

0800c658 <_fstat_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d07      	ldr	r5, [pc, #28]	; (800c678 <_fstat_r+0x20>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	f7f5 fb1e 	bl	8001ca6 <_fstat>
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	d102      	bne.n	800c674 <_fstat_r+0x1c>
 800c66e:	682b      	ldr	r3, [r5, #0]
 800c670:	b103      	cbz	r3, 800c674 <_fstat_r+0x1c>
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	bd38      	pop	{r3, r4, r5, pc}
 800c676:	bf00      	nop
 800c678:	200006f8 	.word	0x200006f8

0800c67c <_isatty_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4d06      	ldr	r5, [pc, #24]	; (800c698 <_isatty_r+0x1c>)
 800c680:	2300      	movs	r3, #0
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	602b      	str	r3, [r5, #0]
 800c688:	f7f5 fb1c 	bl	8001cc4 <_isatty>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d102      	bne.n	800c696 <_isatty_r+0x1a>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	b103      	cbz	r3, 800c696 <_isatty_r+0x1a>
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	200006f8 	.word	0x200006f8

0800c69c <_lseek_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d07      	ldr	r5, [pc, #28]	; (800c6bc <_lseek_r+0x20>)
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	602a      	str	r2, [r5, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f7f5 fb14 	bl	8001cd8 <_lseek>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_lseek_r+0x1e>
 800c6b4:	682b      	ldr	r3, [r5, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_lseek_r+0x1e>
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	200006f8 	.word	0x200006f8

0800c6c0 <_read_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d07      	ldr	r5, [pc, #28]	; (800c6e0 <_read_r+0x20>)
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	4608      	mov	r0, r1
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	602a      	str	r2, [r5, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	f7f5 faa5 	bl	8001c1e <_read>
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	d102      	bne.n	800c6de <_read_r+0x1e>
 800c6d8:	682b      	ldr	r3, [r5, #0]
 800c6da:	b103      	cbz	r3, 800c6de <_read_r+0x1e>
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	bd38      	pop	{r3, r4, r5, pc}
 800c6e0:	200006f8 	.word	0x200006f8

0800c6e4 <abort>:
 800c6e4:	b508      	push	{r3, lr}
 800c6e6:	2006      	movs	r0, #6
 800c6e8:	f000 f82c 	bl	800c744 <raise>
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	f7f5 fa8c 	bl	8001c0a <_exit>

0800c6f2 <_raise_r>:
 800c6f2:	291f      	cmp	r1, #31
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	d904      	bls.n	800c706 <_raise_r+0x14>
 800c6fc:	2316      	movs	r3, #22
 800c6fe:	6003      	str	r3, [r0, #0]
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	bd38      	pop	{r3, r4, r5, pc}
 800c706:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c708:	b112      	cbz	r2, 800c710 <_raise_r+0x1e>
 800c70a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c70e:	b94b      	cbnz	r3, 800c724 <_raise_r+0x32>
 800c710:	4620      	mov	r0, r4
 800c712:	f000 f831 	bl	800c778 <_getpid_r>
 800c716:	462a      	mov	r2, r5
 800c718:	4601      	mov	r1, r0
 800c71a:	4620      	mov	r0, r4
 800c71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c720:	f000 b818 	b.w	800c754 <_kill_r>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d00a      	beq.n	800c73e <_raise_r+0x4c>
 800c728:	1c59      	adds	r1, r3, #1
 800c72a:	d103      	bne.n	800c734 <_raise_r+0x42>
 800c72c:	2316      	movs	r3, #22
 800c72e:	6003      	str	r3, [r0, #0]
 800c730:	2001      	movs	r0, #1
 800c732:	e7e7      	b.n	800c704 <_raise_r+0x12>
 800c734:	2400      	movs	r4, #0
 800c736:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c73a:	4628      	mov	r0, r5
 800c73c:	4798      	blx	r3
 800c73e:	2000      	movs	r0, #0
 800c740:	e7e0      	b.n	800c704 <_raise_r+0x12>
	...

0800c744 <raise>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <raise+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f7ff bfd2 	b.w	800c6f2 <_raise_r>
 800c74e:	bf00      	nop
 800c750:	2000000c 	.word	0x2000000c

0800c754 <_kill_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d07      	ldr	r5, [pc, #28]	; (800c774 <_kill_r+0x20>)
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	602b      	str	r3, [r5, #0]
 800c762:	f7f5 fa42 	bl	8001bea <_kill>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d102      	bne.n	800c770 <_kill_r+0x1c>
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	b103      	cbz	r3, 800c770 <_kill_r+0x1c>
 800c76e:	6023      	str	r3, [r4, #0]
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	bf00      	nop
 800c774:	200006f8 	.word	0x200006f8

0800c778 <_getpid_r>:
 800c778:	f7f5 ba30 	b.w	8001bdc <_getpid>

0800c77c <_init>:
 800c77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77e:	bf00      	nop
 800c780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c782:	bc08      	pop	{r3}
 800c784:	469e      	mov	lr, r3
 800c786:	4770      	bx	lr

0800c788 <_fini>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	bf00      	nop
 800c78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78e:	bc08      	pop	{r3}
 800c790:	469e      	mov	lr, r3
 800c792:	4770      	bx	lr
