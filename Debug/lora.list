
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b408  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000109c  0800b548  0800b548  0001b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e4  0800c5e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5ec  0800c5ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5ec  0800c5ec  0001c5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001dc  0800c7d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800c7d0  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250c6  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cb9  00000000  00000000  000452cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00049f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  0004b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2b4  00000000  00000000  0004d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a67d  00000000  00000000  0006b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a72a5  00000000  00000000  00085b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cdee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  0012ce44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b530 	.word	0x0800b530

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	0800b530 	.word	0x0800b530

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96c 	b.w	8000e48 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	468e      	mov	lr, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 8082 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4617      	mov	r7, r2
 8000b9e:	d946      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x32>
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa05 f302 	lsl.w	r3, r5, r2
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	4097      	lsls	r7, r2
 8000bb4:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc4:	b2b9      	uxth	r1, r7
 8000bc6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bca:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bce:	fb0c f001 	mul.w	r0, ip, r1
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000bdc:	f080 8116 	bcs.w	8000e0c <__udivmoddi4+0x284>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f240 8113 	bls.w	8000e0c <__udivmoddi4+0x284>
 8000be6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bea:	443b      	add	r3, r7
 8000bec:	1a1b      	subs	r3, r3, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f101 	mul.w	r1, r0, r1
 8000c00:	42a1      	cmp	r1, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x90>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0a:	f080 8101 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000c0e:	42a1      	cmp	r1, r4
 8000c10:	f240 80fe 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000c14:	3802      	subs	r0, #2
 8000c16:	443c      	add	r4, r7
 8000c18:	1a64      	subs	r4, r4, r1
 8000c1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11e      	cbz	r6, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40d4      	lsrs	r4, r2
 8000c24:	2300      	movs	r3, #0
 8000c26:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d14f      	bne.n	8000cda <__udivmoddi4+0x152>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2101      	movs	r1, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c25      	lsrs	r5, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	197d      	adds	r5, r7, r5
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	f200 80e7 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1aed      	subs	r5, r5, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d7 	bhi.w	8000e40 <__udivmoddi4+0x2b8>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7c0      	b.n	8000c20 <__udivmoddi4+0x98>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80af 	beq.w	8000e06 <__udivmoddi4+0x27e>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d14b      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0x13e>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80b7 	bhi.w	8000e34 <__udivmoddi4+0x2ac>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0303 	sbc.w	r3, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	469e      	mov	lr, r3
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0aa      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cd8:	e7a7      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000cda:	f1c2 0c20 	rsb	ip, r2, #32
 8000cde:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce2:	4097      	lsls	r7, r2
 8000ce4:	fa20 f00c 	lsr.w	r0, r0, ip
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf0:	4318      	orrs	r0, r3
 8000cf2:	fbbc f1fe 	udiv	r1, ip, lr
 8000cf6:	0c05      	lsrs	r5, r0, #16
 8000cf8:	fb0e cc11 	mls	ip, lr, r1, ip
 8000cfc:	fa1f f887 	uxth.w	r8, r7
 8000d00:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d04:	fb01 f308 	mul.w	r3, r1, r8
 8000d08:	42ab      	cmp	r3, r5
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	197d      	adds	r5, r7, r5
 8000d12:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d16:	f080 808b 	bcs.w	8000e30 <__udivmoddi4+0x2a8>
 8000d1a:	42ab      	cmp	r3, r5
 8000d1c:	f240 8088 	bls.w	8000e30 <__udivmoddi4+0x2a8>
 8000d20:	3902      	subs	r1, #2
 8000d22:	443d      	add	r5, r7
 8000d24:	1aeb      	subs	r3, r5, r3
 8000d26:	b285      	uxth	r5, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	42ab      	cmp	r3, r5
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	197d      	adds	r5, r7, r5
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d42:	d271      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	d96f      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aeb      	subs	r3, r5, r3
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c1 0c20 	rsb	ip, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d64:	fa05 f301 	lsl.w	r3, r5, r1
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d70:	431c      	orrs	r4, r3
 8000d72:	0c23      	lsrs	r3, r4, #16
 8000d74:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d80:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d84:	fb09 fa08 	mul.w	sl, r9, r8
 8000d88:	45aa      	cmp	sl, r5
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x21e>
 8000d94:	197d      	adds	r5, r7, r5
 8000d96:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9a:	d247      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d9c:	45aa      	cmp	sl, r5
 8000d9e:	d945      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000da0:	f1a9 0902 	sub.w	r9, r9, #2
 8000da4:	443d      	add	r5, r7
 8000da6:	eba5 050a 	sub.w	r5, r5, sl
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db8:	fb00 f808 	mul.w	r8, r0, r8
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x248>
 8000dc0:	193c      	adds	r4, r7, r4
 8000dc2:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dc6:	d22d      	bcs.n	8000e24 <__udivmoddi4+0x29c>
 8000dc8:	45a0      	cmp	r8, r4
 8000dca:	d92b      	bls.n	8000e24 <__udivmoddi4+0x29c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	fba0 8902 	umull	r8, r9, r0, r2
 8000ddc:	454c      	cmp	r4, r9
 8000dde:	46c6      	mov	lr, r8
 8000de0:	464d      	mov	r5, r9
 8000de2:	d319      	bcc.n	8000e18 <__udivmoddi4+0x290>
 8000de4:	d016      	beq.n	8000e14 <__udivmoddi4+0x28c>
 8000de6:	b15e      	cbz	r6, 8000e00 <__udivmoddi4+0x278>
 8000de8:	ebb3 020e 	subs.w	r2, r3, lr
 8000dec:	eb64 0405 	sbc.w	r4, r4, r5
 8000df0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df4:	40ca      	lsrs	r2, r1
 8000df6:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c6 2400 	strd	r2, r4, [r6]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e70e      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000e0c:	46ac      	mov	ip, r5
 8000e0e:	e6ed      	b.n	8000bec <__udivmoddi4+0x64>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e701      	b.n	8000c18 <__udivmoddi4+0x90>
 8000e14:	4543      	cmp	r3, r8
 8000e16:	d2e6      	bcs.n	8000de6 <__udivmoddi4+0x25e>
 8000e18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e1c:	eb69 0507 	sbc.w	r5, r9, r7
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7e0      	b.n	8000de6 <__udivmoddi4+0x25e>
 8000e24:	4628      	mov	r0, r5
 8000e26:	e7d3      	b.n	8000dd0 <__udivmoddi4+0x248>
 8000e28:	4660      	mov	r0, ip
 8000e2a:	e78f      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e2c:	4681      	mov	r9, r0
 8000e2e:	e7ba      	b.n	8000da6 <__udivmoddi4+0x21e>
 8000e30:	4661      	mov	r1, ip
 8000e32:	e777      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e74b      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	443d      	add	r5, r7
 8000e3e:	e715      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e40:	3802      	subs	r0, #2
 8000e42:	443c      	add	r4, r7
 8000e44:	e726      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 8000e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e54:	f001 f8ca 	bl	8001fec <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 8000e58:	f001 f8a6 	bl	8001fa8 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <config_init+0x1c>)
 8000e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e62:	611a      	str	r2, [r3, #16]
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58004000 	.word	0x58004000

08000e6c <load_nodes>:

	free(p_mydata) ;
}

int load_nodes(saved_nodes_t * nodes)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(saved_nodes_t)) ;
 8000e74:	2008      	movs	r0, #8
 8000e76:	f007 fb37 	bl	80084e8 <malloc>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR + 8;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <load_nodes+0x60>)
 8000e80:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(saved_nodes_t) ; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	e00b      	b.n	8000ea0 <load_nodes+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	68f9      	ldr	r1, [r7, #12]
 8000e8e:	440b      	add	r3, r1
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(saved_nodes_t) ; i++)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d9f0      	bls.n	8000e88 <load_nodes+0x1c>
	}
	memcpy(nodes , p_mydata ,sizeof(saved_nodes_t) ) ;
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	68f9      	ldr	r1, [r7, #12]
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f007 fb2c 	bl	8008508 <memcpy>

	free(p_mydata) ;
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f007 fb21 	bl	80084f8 <free>

	if(nodes->valide != 1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d001      	beq.n	8000ec2 <load_nodes+0x56>
	{
		return CONFIG_ERROR ;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <load_nodes+0x58>
	}
	else
	{
		return CONFIG_OK ;
 8000ec2:	2300      	movs	r3, #0
	}
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0803f808 	.word	0x0803f808

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4906      	ldr	r1, [pc, #24]	; (8000f04 <__NVIC_EnableIRQ+0x34>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f6c:	f023 0218 	bic.w	r2, r3, #24
 8000f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32 sys_get_tick()
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 8000fba:	f000 fded 	bl	8001b98 <HAL_GetTick>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <main>:
}
#endif


int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0a0      	sub	sp, #128	; 0x80
 8000fc8:	af00      	add	r7, sp, #0

  HAL_Init();
 8000fca:	f000 fd79 	bl	8001ac0 <HAL_Init>

  SystemClock_Config();
 8000fce:	f000 f829 	bl	8001024 <SystemClock_Config>

  MX_GPIO_Init();
 8000fd2:	f000 f8d5 	bl	8001180 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8000fd6:	f000 f87f 	bl	80010d8 <MX_USART1_UART_Init>

  SubghzApp_Init();
 8000fda:	f000 fab1 	bl	8001540 <SubghzApp_Init>

#ifdef RECEIVER

  config_t param ;

  config_init();
 8000fde:	f7ff ff35 	bl	8000e4c <config_init>
		  .addresses[1] = 0x15,
		  .nb_addresses = 2,
		  .valide = 1 ,
  } ;
  */
  if(load_nodes(&myNode) == CONFIG_OK)
 8000fe2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff40 	bl	8000e6c <load_nodes>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10b      	bne.n	800100a <main+0x46>
  {
	  printf("nodes : nb :%d ,addr[0] : %x ,addr[1] : %x\n" ,myNode.nb_addresses
 8000ff2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000ff6:	4619      	mov	r1, r3
			  ,myNode.addresses[0],myNode.addresses[1]);
 8000ff8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
	  printf("nodes : nb :%d ,addr[0] : %x ,addr[1] : %x\n" ,myNode.nb_addresses
 8000ffc:	461a      	mov	r2, r3
			  ,myNode.addresses[0],myNode.addresses[1]);
 8000ffe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
	  printf("nodes : nb :%d ,addr[0] : %x ,addr[1] : %x\n" ,myNode.nb_addresses
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <main+0x54>)
 8001004:	f008 f83c 	bl	8009080 <iprintf>
 8001008:	e002      	b.n	8001010 <main+0x4c>
  }
  else
  {
	  printf("Invalid data\n");
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <main+0x58>)
 800100c:	f008 f8be 	bl	800918c <puts>
  }
  else{
	  printf("Error Saving\n");
  }
  */
  printf("End\n");
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <main+0x5c>)
 8001012:	f008 f8bb 	bl	800918c <puts>

  while(1) ;
 8001016:	e7fe      	b.n	8001016 <main+0x52>
 8001018:	0800b564 	.word	0x0800b564
 800101c:	0800b590 	.word	0x0800b590
 8001020:	0800b5a0 	.word	0x0800b5a0

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09a      	sub	sp, #104	; 0x68
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2248      	movs	r2, #72	; 0x48
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fa76 	bl	8008524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800104a:	f001 f9cb 	bl	80023e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff84 	bl	8000f5c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <SystemClock_Config+0xb0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <SystemClock_Config+0xb0>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <SystemClock_Config+0xb0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001070:	2324      	movs	r3, #36	; 0x24
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001074:	2381      	movs	r3, #129	; 0x81
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001080:	23b0      	movs	r3, #176	; 0xb0
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fc53 	bl	8002938 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001098:	f000 f8bc 	bl	8001214 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800109c:	234f      	movs	r3, #79	; 0x4f
 800109e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 ffd6 	bl	800306c <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 f8a5 	bl	8001214 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3768      	adds	r7, #104	; 0x68
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	58000400 	.word	0x58000400

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <MX_USART1_UART_Init+0xa4>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001122:	f003 f938 	bl	8004396 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 f872 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001134:	f003 ff24 	bl	8004f80 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 f869 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001146:	f003 ff59 	bl	8004ffc <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f860 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_USART1_UART_Init+0xa0>)
 8001156:	f003 fedb 	bl	8004f10 <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f858 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 8001164:	2024      	movs	r0, #36	; 0x24
 8001166:	f7ff feb3 	bl	8000ed0 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 800116a:	2101      	movs	r1, #1
 800116c:	2024      	movs	r0, #36	; 0x24
 800116e:	f7ff fecb 	bl	8000f08 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000464 	.word	0x20000464
 800117c:	40013800 	.word	0x40013800

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2002      	movs	r0, #2
 8001188:	f7ff fefd 	bl	8000f86 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitTypeDef pin ;
  EXTI_ConfigTypeDef exti ;
  EXTI_HandleTypeDef exti_handler ;

  exti_handler.Line = EXTI_LINE_0 ;
 800118c:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8001190:	607b      	str	r3, [r7, #4]

  exti.Line    =  EXTI_LINE_0;
 8001192:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8001196:	60fb      	str	r3, [r7, #12]
  exti.Mode    =  EXTI_MODE_INTERRUPT;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  exti.Trigger =  EXTI_TRIGGER_RISING;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  exti.GPIOSel =  EXTI_GPIOB;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]

  /*****************************************/
  HAL_EXTI_SetConfigLine(&exti_handler , &exti ) ;
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe2d 	bl	8001e0c <HAL_EXTI_SetConfigLine>

  pin.Mode  = GPIO_MODE_IT_RISING ;
 80011b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b6:	623b      	str	r3, [r7, #32]
  pin.Pin   = GPIO_PIN_0  ;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  pin.Pull  = GPIO_PULLDOWN  ;
 80011bc:	2302      	movs	r3, #2
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  pin.Speed = GPIO_SPEED_FREQ_HIGH ;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(GPIOB , &pin ) ;
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_GPIO_Init+0x68>)
 80011cc:	f000 ff70 	bl	80020b0 <HAL_GPIO_Init>

  __NVIC_EnableIRQ(EXTI0_IRQn);
 80011d0:	2006      	movs	r0, #6
 80011d2:	f7ff fe7d 	bl	8000ed0 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(EXTI0_IRQn , 0x0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	2006      	movs	r0, #6
 80011da:	f7ff fe95 	bl	8000f08 <__NVIC_SetPriority>

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	48000400 	.word	0x48000400

080011ec <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	number_of_pulses++;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <EXTI0_IRQHandler+0x20>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <EXTI0_IRQHandler+0x20>)
 80011f8:	6013      	str	r3, [r2, #0]
	printf("int\n");
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <EXTI0_IRQHandler+0x24>)
 80011fc:	f007 ffc6 	bl	800918c <puts>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0) ;
 8001200:	2001      	movs	r0, #1
 8001202:	f001 f8cd 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001f8 	.word	0x200001f8
 8001210:	0800b5b8 	.word	0x0800b5b8

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 8001226:	1d39      	adds	r1, r7, #4
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	2201      	movs	r2, #1
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <__io_getchar+0x20>)
 8001230:	f003 f997 	bl	8004562 <HAL_UART_Receive>
	return ch ;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000464 	.word	0x20000464

08001244 <__io_putchar>:

int __io_putchar(int ch)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	230a      	movs	r3, #10
 8001250:	2201      	movs	r2, #1
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <__io_putchar+0x20>)
 8001254:	f003 f8ef 	bl	8004436 <HAL_UART_Transmit>
	return ch ;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000464 	.word	0x20000464

08001268 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800126c:	f000 fb78 	bl	8001960 <BSP_RADIO_Init>
 8001270:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}

08001276 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fbaa 	bl	80019dc <BSP_RADIO_ConfigRFSwitch>
 8001288:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001296:	f000 fbfd 	bl	8001a94 <BSP_RADIO_GetTxConfig>
 800129a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}

080012a0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80012a4:	f000 fbfd 	bl	8001aa2 <BSP_RADIO_IsTCXO>
 80012a8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}

080012ae <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80012b2:	f000 fbfd 	bl	8001ab0 <BSP_RADIO_IsDCDC>
 80012b6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}

080012bc <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d302      	bcc.n	80012e4 <ring_pushOver+0x28>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e002      	b.n	80012ea <ring_pushOver+0x2e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	3301      	adds	r3, #1
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d110      	bne.n	800131c <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d302      	bcc.n	800130e <ring_pushOver+0x52>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e002      	b.n	8001314 <ring_pushOver+0x58>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	3301      	adds	r3, #1
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	60d3      	str	r3, [r2, #12]
        return 1;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <ring_pushOver+0x62>
    }
    
    return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_AHB2_GRP1_EnableClock>:
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2238      	movs	r2, #56	; 0x38
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f007 f8b5 	bl	8008524 <memset>
  if(huart->Instance==USART1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_UART_MspInit+0x94>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12d      	bne.n	8001420 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013c8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013cc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f9f0 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013de:	f7ff ff19 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013e6:	f7ff ffb7 	bl	8001358 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2002      	movs	r0, #2
 80013ec:	f7ff ff9c 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001400:	2307      	movs	r3, #7
 8001402:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <HAL_UART_MspInit+0x98>)
 800140c:	f000 fe50 	bl	80020b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2024      	movs	r0, #36	; 0x24
 8001416:	f000 fcc4 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800141a:	2024      	movs	r0, #36	; 0x24
 800141c:	f000 fcdb 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3758      	adds	r7, #88	; 0x58
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013800 	.word	0x40013800
 800142c:	48000400 	.word	0x48000400

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001476:	f000 fb7d 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <USART1_IRQHandler+0x2c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <USART1_IRQHandler+0x2c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fa06 	bl	80018b0 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000464 	.word	0x20000464

080014b0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80014b6:	f002 fdaf 	bl	8004018 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200004f4 	.word	0x200004f4

080014c4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SUBGHZ_Init+0x20>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SUBGHZ_Init+0x20>)
 8001500:	f002 fb0e 	bl	8003b20 <HAL_SUBGHZ_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800150a:	f7ff fe83 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200004f4 	.word	0x200004f4

08001518 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff ffcf 	bl	80014c4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2032      	movs	r0, #50	; 0x32
 800152c:	f000 fc39 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001530:	2032      	movs	r0, #50	; 0x32
 8001532:	f000 fc50 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <SubghzApp_Init>:
{
	return Radio.Random() ;
}
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 8001546:	2300      	movs	r3, #0
 8001548:	2201      	movs	r2, #1
 800154a:	2101      	movs	r1, #1
 800154c:	483d      	ldr	r0, [pc, #244]	; (8001644 <SubghzApp_Init+0x104>)
 800154e:	f007 fd97 	bl	8009080 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <SubghzApp_Init+0x108>)
 8001554:	4a3d      	ldr	r2, [pc, #244]	; (800164c <SubghzApp_Init+0x10c>)
 8001556:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8001558:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <SubghzApp_Init+0x108>)
 800155a:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <SubghzApp_Init+0x110>)
 800155c:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <SubghzApp_Init+0x108>)
 8001560:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <SubghzApp_Init+0x114>)
 8001562:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <SubghzApp_Init+0x108>)
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <SubghzApp_Init+0x118>)
 8001568:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <SubghzApp_Init+0x108>)
 800156c:	4a3b      	ldr	r2, [pc, #236]	; (800165c <SubghzApp_Init+0x11c>)
 800156e:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001570:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <SubghzApp_Init+0x120>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4834      	ldr	r0, [pc, #208]	; (8001648 <SubghzApp_Init+0x108>)
 8001576:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <SubghzApp_Init+0x120>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <SubghzApp_Init+0x124>)
 800157e:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001580:	4839      	ldr	r0, [pc, #228]	; (8001668 <SubghzApp_Init+0x128>)
 8001582:	f007 fd7d 	bl	8009080 <iprintf>
  printf("LORA_MODULATION\n\r");
 8001586:	4839      	ldr	r0, [pc, #228]	; (800166c <SubghzApp_Init+0x12c>)
 8001588:	f007 fd7a 	bl	8009080 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800158c:	217d      	movs	r1, #125	; 0x7d
 800158e:	4838      	ldr	r0, [pc, #224]	; (8001670 <SubghzApp_Init+0x130>)
 8001590:	f007 fd76 	bl	8009080 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001594:	2107      	movs	r1, #7
 8001596:	4837      	ldr	r0, [pc, #220]	; (8001674 <SubghzApp_Init+0x134>)
 8001598:	f007 fd72 	bl	8009080 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <SubghzApp_Init+0x120>)
 800159e:	69dc      	ldr	r4, [r3, #28]
 80015a0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015a4:	9308      	str	r3, [sp, #32]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9307      	str	r3, [sp, #28]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9306      	str	r3, [sp, #24]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9305      	str	r3, [sp, #20]
 80015b2:	2301      	movs	r3, #1
 80015b4:	9304      	str	r3, [sp, #16]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9303      	str	r3, [sp, #12]
 80015ba:	2308      	movs	r3, #8
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2307      	movs	r3, #7
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	2114      	movs	r1, #20
 80015cc:	2001      	movs	r0, #1
 80015ce:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <SubghzApp_Init+0x120>)
 80015d2:	699c      	ldr	r4, [r3, #24]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9309      	str	r3, [sp, #36]	; 0x24
 80015d8:	2300      	movs	r3, #0
 80015da:	9308      	str	r3, [sp, #32]
 80015dc:	2300      	movs	r3, #0
 80015de:	9307      	str	r3, [sp, #28]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9306      	str	r3, [sp, #24]
 80015e4:	2301      	movs	r3, #1
 80015e6:	9305      	str	r3, [sp, #20]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	2305      	movs	r3, #5
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2308      	movs	r3, #8
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2300      	movs	r3, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	2207      	movs	r2, #7
 8001600:	2100      	movs	r1, #0
 8001602:	2001      	movs	r0, #1
 8001604:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <SubghzApp_Init+0x120>)
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	21ff      	movs	r1, #255	; 0xff
 800160c:	2001      	movs	r0, #1
 800160e:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <SubghzApp_Init+0x120>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4798      	blx	r3
 8001616:	4603      	mov	r3, r0
 8001618:	0d9b      	lsrs	r3, r3, #22
 800161a:	461a      	mov	r2, r3
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <SubghzApp_Init+0x138>)
 800161e:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	2100      	movs	r1, #0
 8001624:	4815      	ldr	r0, [pc, #84]	; (800167c <SubghzApp_Init+0x13c>)
 8001626:	f006 ff7d 	bl	8008524 <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <SubghzApp_Init+0x120>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <SubghzApp_Init+0x138>)
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8001636:	4610      	mov	r0, r2
 8001638:	4798      	blx	r3

}
 800163a:	bf00      	nop
 800163c:	3704      	adds	r7, #4
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	bf00      	nop
 8001644:	0800b5bc 	.word	0x0800b5bc
 8001648:	200001fc 	.word	0x200001fc
 800164c:	08001681 	.word	0x08001681
 8001650:	0800168d 	.word	0x0800168d
 8001654:	080016b9 	.word	0x080016b9
 8001658:	080016d5 	.word	0x080016d5
 800165c:	080016f1 	.word	0x080016f1
 8001660:	0800ba2c 	.word	0x0800ba2c
 8001664:	33bca100 	.word	0x33bca100
 8001668:	0800b5d8 	.word	0x0800b5d8
 800166c:	0800b5ec 	.word	0x0800b5ec
 8001670:	0800b600 	.word	0x0800b600
 8001674:	0800b614 	.word	0x0800b614
 8001678:	2000031c 	.word	0x2000031c
 800167c:	2000021c 	.word	0x2000021c

08001680 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001684:	f006 fe5a 	bl	800833c <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	460b      	mov	r3, r1
 80016a0:	813b      	strh	r3, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 80016a6:	897b      	ldrh	r3, [r7, #10]
 80016a8:	4619      	mov	r1, r3
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f006 fdd0 	bl	8008250 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <OnTxTimeout+0x14>)
 80016be:	f007 fcdf 	bl	8009080 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <OnTxTimeout+0x18>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800b624 	.word	0x0800b624
 80016d0:	20000218 	.word	0x20000218

080016d4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <OnRxTimeout+0x14>)
 80016da:	f007 fcd1 	bl	8009080 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 80016de:	4b03      	ldr	r3, [pc, #12]	; (80016ec <OnRxTimeout+0x18>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0800b634 	.word	0x0800b634
 80016ec:	20000218 	.word	0x20000218

080016f0 <OnRxError>:

static void OnRxError(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <OnRxError+0x14>)
 80016f6:	f007 fcc3 	bl	8009080 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <OnRxError+0x18>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	701a      	strb	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0800b644 	.word	0x0800b644
 8001708:	20000218 	.word	0x20000218

0800170c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	return 1;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_kill>:

int _kill(int pid, int sig)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001724:	f006 feb6 	bl	8008494 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	2216      	movs	r2, #22
 800172c:	601a      	str	r2, [r3, #0]
	return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_exit>:

void _exit (int status)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001742:	f04f 31ff 	mov.w	r1, #4294967295
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffe7 	bl	800171a <_kill>
	while (1) {}		/* Make sure we hang here */
 800174c:	e7fe      	b.n	800174c <_exit+0x12>

0800174e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e00a      	b.n	8001776 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001760:	f7ff fd5e 	bl	8001220 <__io_getchar>
 8001764:	4601      	mov	r1, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbf0      	blt.n	8001760 <_read+0x12>
	}

return len;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e009      	b.n	80017ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd4e 	bl	8001244 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf1      	blt.n	800179a <_write+0x12>
	}
	return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_close>:

int _close(int file)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <_isatty>:

int _isatty(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f006 fe20 	bl	8008494 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20008000 	.word	0x20008000
 8001880:	00000400 	.word	0x00000400
 8001884:	20000320 	.word	0x20000320
 8001888:	200005f0 	.word	0x200005f0

0800188c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <set_NL_detection+0x14>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000324 	.word	0x20000324

080018b0 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b0a      	cmp	r3, #10
 80018be:	d101      	bne.n	80018c4 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 80018c0:	f7ff ffea 	bl	8001898 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <uart_RX_interrupt_hanlder+0x28>)
 80018ca:	f7ff fcf7 	bl	80012bc <ring_pushOver>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000500 	.word	0x20000500

080018dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e0:	f7ff ffd4 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopForever+0xe>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopForever+0x16>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800190a:	f006 fdc9 	bl	80084a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190e:	f7ff fb59 	bl	8000fc4 <main>

08001912 <LoopForever>:

LoopForever:
    b LoopForever
 8001912:	e7fe      	b.n	8001912 <LoopForever>
  ldr   r0, =_estack
 8001914:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001920:	0800c5f4 	.word	0x0800c5f4
  ldr r2, =_sbss
 8001924:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001928:	200005ec 	.word	0x200005ec

0800192c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>

0800192e <LL_AHB2_GRP1_EnableClock>:
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800193c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4313      	orrs	r3, r2
 8001944:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4013      	ands	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001974:	2004      	movs	r0, #4
 8001976:	f7ff ffda 	bl	800192e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800197a:	2310      	movs	r3, #16
 800197c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <BSP_RADIO_Init+0x78>)
 8001990:	f000 fb8e 	bl	80020b0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001994:	2320      	movs	r3, #32
 8001996:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	480e      	ldr	r0, [pc, #56]	; (80019d8 <BSP_RADIO_Init+0x78>)
 800199e:	f000 fb87 	bl	80020b0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80019a2:	2308      	movs	r3, #8
 80019a4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <BSP_RADIO_Init+0x78>)
 80019ac:	f000 fb80 	bl	80020b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80019b0:	2200      	movs	r2, #0
 80019b2:	2120      	movs	r1, #32
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <BSP_RADIO_Init+0x78>)
 80019b6:	f000 fcdb 	bl	8002370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80019ba:	2200      	movs	r2, #0
 80019bc:	2110      	movs	r1, #16
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <BSP_RADIO_Init+0x78>)
 80019c0:	f000 fcd6 	bl	8002370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80019c4:	2200      	movs	r2, #0
 80019c6:	2108      	movs	r1, #8
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <BSP_RADIO_Init+0x78>)
 80019ca:	f000 fcd1 	bl	8002370 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	48000800 	.word	0x48000800

080019dc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d84b      	bhi.n	8001a84 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a25 	.word	0x08001a25
 80019fc:	08001a45 	.word	0x08001a45
 8001a00:	08001a65 	.word	0x08001a65
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2108      	movs	r1, #8
 8001a08:	4821      	ldr	r0, [pc, #132]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a0a:	f000 fcb1 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2110      	movs	r1, #16
 8001a12:	481f      	ldr	r0, [pc, #124]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a14:	f000 fcac 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	481c      	ldr	r0, [pc, #112]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a1e:	f000 fca7 	bl	8002370 <HAL_GPIO_WritePin>
      break;      
 8001a22:	e030      	b.n	8001a86 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2108      	movs	r1, #8
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a2a:	f000 fca1 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2110      	movs	r1, #16
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a34:	f000 fc9c 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	4814      	ldr	r0, [pc, #80]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a3e:	f000 fc97 	bl	8002370 <HAL_GPIO_WritePin>
      break;
 8001a42:	e020      	b.n	8001a86 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2108      	movs	r1, #8
 8001a48:	4811      	ldr	r0, [pc, #68]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a4a:	f000 fc91 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2110      	movs	r1, #16
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a54:	f000 fc8c 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a5e:	f000 fc87 	bl	8002370 <HAL_GPIO_WritePin>
      break;
 8001a62:	e010      	b.n	8001a86 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	2108      	movs	r1, #8
 8001a68:	4809      	ldr	r0, [pc, #36]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a6a:	f000 fc81 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2110      	movs	r1, #16
 8001a72:	4807      	ldr	r0, [pc, #28]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a74:	f000 fc7c 	bl	8002370 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a7e:	f000 fc77 	bl	8002370 <HAL_GPIO_WritePin>
      break;
 8001a82:	e000      	b.n	8001a86 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001a84:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	48000800 	.word	0x48000800

08001a94 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f000 f95e 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ad0:	f001 fc90 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_Init+0x3c>)
 8001ad8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f810 	bl	8001b00 <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aec:	f7ff fc4c 	bl	8001388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d024      	beq.n	8001b5e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b14:	f001 fc6e 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_InitTick+0x6c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f960 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10f      	bne.n	8001b58 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d809      	bhi.n	8001b52 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	f000 f92c 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_InitTick+0x70>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e004      	b.n	8001b62 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000574 	.word	0x20000574

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000574 	.word	0x20000574

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffe0 	bl	8001b98 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <__NVIC_SetPriorityGrouping>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4906      	ldr	r1, [pc, #24]	; (8001c8c <__NVIC_EnableIRQ+0x34>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff2d 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff44 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff92 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff61 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff37 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa4 	bl	8001d48 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_EXTI_SetConfigLine+0x16>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0b9      	b.n	8001f9a <HAL_EXTI_SetConfigLine+0x18e>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8001e44:	2201      	movs	r2, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d064      	beq.n	8001f24 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e66:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_EXTI_SetConfigLine+0x78>
    {
      regval |= maskline;
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e004      	b.n	8001e8e <HAL_EXTI_SetConfigLine+0x82>
    }
    else
    {
      regval &= ~maskline;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001e9c:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8001ea0:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_EXTI_SetConfigLine+0xb2>
    {
      regval |= maskline;
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e004      	b.n	8001ec8 <HAL_EXTI_SetConfigLine+0xbc>
    }
    else
    {
      regval &= ~maskline;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001ed6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001eda:	d123      	bne.n	8001f24 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001edc:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <HAL_EXTI_SetConfigLine+0x198>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	61fb      	str	r3, [r7, #28]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8001f16:	4923      	ldr	r1, [pc, #140]	; (8001fa4 <HAL_EXTI_SetConfigLine+0x198>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* Configure interrupt mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001f2c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8001f30:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_EXTI_SetConfigLine+0x142>
  {
    regval |= maskline;
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e004      	b.n	8001f58 <HAL_EXTI_SetConfigLine+0x14c>
  }
  else
  {
    regval &= ~maskline;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Configure event mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001f66:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8001f6a:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_EXTI_SetConfigLine+0x17c>
  {
    /* The event mode cannot be configured if the line does not support it */
    assert_param(IS_EXTI_EVENT_PRESENT(pExtiConfig->Line));
    regval |= maskline;
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e004      	b.n	8001f92 <HAL_EXTI_SetConfigLine+0x186>
  }
  else
  {
    regval &= ~maskline;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_FLASH_Unlock+0x38>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0b      	bge.n	8001fd2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_FLASH_Unlock+0x38>)
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_FLASH_Unlock+0x3c>)
 8001fbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_FLASH_Unlock+0x38>)
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_FLASH_Unlock+0x40>)
 8001fc4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_FLASH_Unlock+0x38>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da01      	bge.n	8001fd2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	58004000 	.word	0x58004000
 8001fe4:	45670123 	.word	0x45670123
 8001fe8:	cdef89ab 	.word	0xcdef89ab

08001fec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fdd0 	bl	8001b98 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ffa:	e009      	b.n	8002010 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001ffc:	f7ff fdcc 	bl	8001b98 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d801      	bhi.n	8002010 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e047      	b.n	80020a0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d0ee      	beq.n	8001ffc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002030:	2201      	movs	r2, #1
 8002032:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800203a:	4013      	ands	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <FLASH_WaitForLastOperation+0x6c>
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002052:	4915      	ldr	r1, [pc, #84]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	618b      	str	r3, [r1, #24]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <FLASH_WaitForLastOperation+0x80>
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800206a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <FLASH_WaitForLastOperation+0xc0>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e011      	b.n	80020a0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800207c:	f7ff fd8c 	bl	8001b98 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d801      	bhi.n	8002090 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e007      	b.n	80020a0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <FLASH_WaitForLastOperation+0xbc>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800209c:	d0ee      	beq.n	800207c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58004000 	.word	0x58004000
 80020ac:	20000328 	.word	0x20000328

080020b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	e140      	b.n	8002342 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8132 	beq.w	800233c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_GPIO_Init+0x40>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d017      	beq.n	800218e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d123      	bne.n	80021e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 808c 	beq.w	800233c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002224:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_GPIO_Init+0x2b0>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1bc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a44      	ldr	r2, [pc, #272]	; (8002364 <HAL_GPIO_Init+0x2b4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1b8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_GPIO_Init+0x2b8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1b4>
 8002260:	2302      	movs	r3, #2
 8002262:	e004      	b.n	800226e <HAL_GPIO_Init+0x1be>
 8002264:	2307      	movs	r3, #7
 8002266:	e002      	b.n	800226e <HAL_GPIO_Init+0x1be>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_GPIO_Init+0x1be>
 800226c:	2300      	movs	r3, #0
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	f002 0203 	and.w	r2, r2, #3
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	4093      	lsls	r3, r2
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800227e:	4938      	ldr	r1, [pc, #224]	; (8002360 <HAL_GPIO_Init+0x2b0>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_GPIO_Init+0x2bc>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002292:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_GPIO_Init+0x2bc>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_GPIO_Init+0x2bc>)
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_GPIO_Init+0x2bc>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_GPIO_Init+0x2bc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_GPIO_Init+0x2bc>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_GPIO_Init+0x2bc>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_GPIO_Init+0x2bc>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f aeb7 	bne.w	80020c0 <HAL_GPIO_Init+0x10>
  }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	58000800 	.word	0x58000800

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800238c:	e002      	b.n	8002394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f806 	bl	80023d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58000800 	.word	0x58000800

080023d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a03      	ldr	r2, [pc, #12]	; (80023fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80023ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	58000400 	.word	0x58000400

08002400 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_PWREx_GetVoltageRange+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	58000400 	.word	0x58000400

08002418 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002428:	d101      	bne.n	800242e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	58000400 	.word	0x58000400

0800243c <LL_RCC_HSE_EnableTcxo>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_HSE_DisableTcxo>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002486:	d101      	bne.n	800248c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <LL_RCC_HSE_Enable>:
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_HSE_Disable>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_HSE_IsReady>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024e0:	d101      	bne.n	80024e6 <LL_RCC_HSE_IsReady+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_RCC_HSE_IsReady+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_HSI_Enable>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <LL_RCC_HSI_Disable>:
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800251a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <LL_RCC_HSI_IsReady>:
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d101      	bne.n	8002540 <LL_RCC_HSI_IsReady+0x18>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <LL_RCC_HSI_IsReady+0x1a>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <LL_RCC_HSI_SetCalibTrimming>:
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d101      	bne.n	800258a <LL_RCC_LSE_IsReady+0x18>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <LL_RCC_LSE_IsReady+0x1a>
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d101      	bne.n	80025ec <LL_RCC_LSI_IsReady+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_RCC_LSI_IsReady+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d101      	bne.n	8002644 <LL_RCC_MSI_IsReady+0x16>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <LL_RCC_MSI_IsReady+0x18>
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d101      	bne.n	8002664 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002736:	f023 020f 	bic.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002844:	d101      	bne.n	800284a <LL_RCC_PLL_IsReady+0x18>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <LL_RCC_PLL_IsReady+0x1a>
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d101      	bne.n	80028c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d101      	bne.n	80028ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002906:	d101      	bne.n	800290c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002924:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002928:	d101      	bne.n	800292e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e38a      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	f7ff fece 	bl	80026ea <LL_RCC_GetSysClkSource>
 800294e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002950:	f7ff ffa2 	bl	8002898 <LL_RCC_PLL_GetMainSource>
 8002954:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80c9 	beq.w	8002af6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x3e>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d17b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d178      	bne.n	8002a68 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002976:	f7ff fe5a 	bl	800262e <LL_RCC_MSI_IsReady>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x54>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e369      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x72>
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	e006      	b.n	80029b8 <HAL_RCC_OscConfig+0x80>
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d222      	bcs.n	8002a02 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fd4f 	bl	8003464 <RCC_SetFlashLatencyFromMSIRange>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e347      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fe4e 	bl	800269c <LL_RCC_MSI_SetCalibTrimming>
 8002a00:	e021      	b.n	8002a46 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0c:	f043 0308 	orr.w	r3, r3, #8
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fe35 	bl	800269c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fd14 	bl	8003464 <RCC_SetFlashLatencyFromMSIRange>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e30c      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a46:	f000 fcd5 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4ab4      	ldr	r2, [pc, #720]	; (8002d20 <HAL_RCC_OscConfig+0x3e8>)
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a50:	4bb4      	ldr	r3, [pc, #720]	; (8002d24 <HAL_RCC_OscConfig+0x3ec>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f853 	bl	8001b00 <HAL_InitTick>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d047      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	e2fb      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02c      	beq.n	8002aca <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a70:	f7ff fdc1 	bl	80025f6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f890 	bl	8001b98 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f88c 	bl	8001b98 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e2e8      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a8e:	f7ff fdce 	bl	800262e <LL_RCC_MSI_IsReady>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f1      	beq.n	8002a7c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fdea 	bl	800269c <LL_RCC_MSI_SetCalibTrimming>
 8002ac8:	e015      	b.n	8002af6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aca:	f7ff fda2 	bl	8002612 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ace:	f7ff f863 	bl	8001b98 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad6:	f7ff f85f 	bl	8001b98 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e2bb      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ae8:	f7ff fda1 	bl	800262e <LL_RCC_MSI_IsReady>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f1      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x19e>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d05f      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1dc>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d10d      	bne.n	8002b2a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	f7ff fcdb 	bl	80024ce <LL_RCC_HSE_IsReady>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d050      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x288>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d14c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e29a      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0x218>
 8002b4a:	f7ff fca4 	bl	8002496 <LL_RCC_HSE_Enable>
 8002b4e:	e00d      	b.n	8002b6c <HAL_RCC_OscConfig+0x234>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002b58:	d104      	bne.n	8002b64 <HAL_RCC_OscConfig+0x22c>
 8002b5a:	f7ff fc6f 	bl	800243c <LL_RCC_HSE_EnableTcxo>
 8002b5e:	f7ff fc9a 	bl	8002496 <LL_RCC_HSE_Enable>
 8002b62:	e003      	b.n	8002b6c <HAL_RCC_OscConfig+0x234>
 8002b64:	f7ff fca5 	bl	80024b2 <LL_RCC_HSE_Disable>
 8002b68:	f7ff fc76 	bl	8002458 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff f810 	bl	8001b98 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f80c 	bl	8001b98 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e268      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b8e:	f7ff fc9e 	bl	80024ce <LL_RCC_HSE_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f1      	beq.n	8002b7c <HAL_RCC_OscConfig+0x244>
 8002b98:	e013      	b.n	8002bc2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fffd 	bl	8001b98 <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fff9 	bl	8001b98 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e255      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bb4:	f7ff fc8b 	bl	80024ce <LL_RCC_HSE_IsReady>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f1      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x26a>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2a8>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d113      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d110      	bne.n	8002c02 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	f7ff fca2 	bl	8002528 <LL_RCC_HSI_IsReady>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2be>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e234      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fca5 	bl	800254a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c00:	e031      	b.n	8002c66 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d019      	beq.n	8002c3e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0a:	f7ff fc71 	bl	80024f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe ffc3 	bl	8001b98 <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe ffbf 	bl	8001b98 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e21b      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c28:	f7ff fc7e 	bl	8002528 <LL_RCC_HSI_IsReady>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f1      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fc87 	bl	800254a <LL_RCC_HSI_SetCalibTrimming>
 8002c3c:	e013      	b.n	8002c66 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	f7ff fc65 	bl	800250c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe ffa9 	bl	8001b98 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe ffa5 	bl	8001b98 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e201      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c5c:	f7ff fc64 	bl	8002528 <LL_RCC_HSI_IsReady>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f1      	bne.n	8002c4a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06e      	beq.n	8002d50 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d056      	beq.n	8002d28 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c82:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d031      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1da      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cb4:	f7ff fc7e 	bl	80025b4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb8:	f7fe ff6e 	bl	8001b98 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe ff6a 	bl	8001b98 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1c6      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002cd2:	f7ff fc7f 	bl	80025d4 <LL_RCC_LSI_IsReady>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f1      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	f023 0210 	bic.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf6:	f7ff fc4d 	bl	8002594 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ff4d 	bl	8001b98 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe ff49 	bl	8001b98 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b11      	cmp	r3, #17
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1a5      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d14:	f7ff fc5e 	bl	80025d4 <LL_RCC_LSI_IsReady>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f1      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3ca>
 8002d1e:	e017      	b.n	8002d50 <HAL_RCC_OscConfig+0x418>
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	f7ff fc44 	bl	80025b4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe ff34 	bl	8001b98 <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe ff30 	bl	8001b98 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b11      	cmp	r3, #17
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e18c      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d46:	f7ff fc45 	bl	80025d4 <LL_RCC_LSI_IsReady>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f1      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80d8 	beq.w	8002f0e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d5e:	f7ff fb5b 	bl	8002418 <LL_PWR_IsEnabledBkUpAccess>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d113      	bne.n	8002d90 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d68:	f7ff fb3c 	bl	80023e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6c:	f7fe ff14 	bl	8001b98 <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fe ff10 	bl	8001b98 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e16c      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d86:	f7ff fb47 	bl	8002418 <LL_PWR_IsEnabledBkUpAccess>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f1      	beq.n	8002d74 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b85      	cmp	r3, #133	; 0x85
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d109      	bne.n	8002dbc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe feec 	bl	8001b98 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fede 	bl	8001b98 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e138      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dee:	f7ff fbc0 	bl	8002572 <LL_RCC_LSE_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b81      	cmp	r3, #129	; 0x81
 8002dfe:	d003      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b85      	cmp	r3, #133	; 0x85
 8002e06:	d121      	bne.n	8002e4c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fec6 	bl	8001b98 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe feb8 	bl	8001b98 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e112      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ec      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e4a:	e060      	b.n	8002f0e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fea4 	bl	8001b98 <HAL_GetTick>
 8002e50:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fe96 	bl	8001b98 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0f0      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ec      	bne.n	8002e68 <HAL_RCC_OscConfig+0x530>
 8002e8e:	e03e      	b.n	8002f0e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe fe82 	bl	8001b98 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fe74 	bl	8001b98 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0ce      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ec      	bne.n	8002eac <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fe61 	bl	8001b98 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fe53 	bl	8001b98 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0ad      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f04:	f7ff fb35 	bl	8002572 <LL_RCC_LSE_IsReady>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ef      	bne.n	8002eee <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80a3 	beq.w	800305e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d076      	beq.n	800300c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d14b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	f7ff fc76 	bl	8002816 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fe35 	bl	8001b98 <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fe31 	bl	8001b98 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b0a      	cmp	r3, #10
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e08d      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f44:	f7ff fc75 	bl	8002832 <LL_RCC_PLL_IsReady>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f1      	bne.n	8002f32 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x730>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f66:	0212      	lsls	r2, r2, #8
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f84:	f7ff fc39 	bl	80027fa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fdfe 	bl	8001b98 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fdfa 	bl	8001b98 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e056      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002fb2:	f7ff fc3e 	bl	8002832 <LL_RCC_PLL_IsReady>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f1      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x668>
 8002fbc:	e04f      	b.n	800305e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	f7ff fc2a 	bl	8002816 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fcc:	f023 0303 	bic.w	r3, r3, #3
 8002fd0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fdc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fdd7 	bl	8001b98 <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fdd3 	bl	8001b98 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b0a      	cmp	r3, #10
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e02f      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003000:	f7ff fc17 	bl	8002832 <LL_RCC_PLL_IsReady>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f1      	bne.n	8002fee <HAL_RCC_OscConfig+0x6b6>
 800300a:	e028      	b.n	800305e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e023      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	429a      	cmp	r2, r3
 800302c:	d115      	bne.n	800305a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	429a      	cmp	r2, r3
 800303a:	d10e      	bne.n	800305a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	429a      	cmp	r2, r3
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	11c1808c 	.word	0x11c1808c

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e10f      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d91b      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b86      	ldr	r3, [pc, #536]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4984      	ldr	r1, [pc, #528]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309e:	f7fe fd7b 	bl	8001b98 <HAL_GetTick>
 80030a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030a6:	f7fe fd77 	bl	8001b98 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0f3      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b8:	4b7b      	ldr	r3, [pc, #492]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d1ef      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fb12 	bl	8002700 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030dc:	f7fe fd5c 	bl	8001b98 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030e4:	f7fe fd58 	bl	8001b98 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0d4      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030f6:	f7ff fbda 	bl	80028ae <LL_RCC_IsActiveFlag_HPRE>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f1      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d016      	beq.n	800313a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fb08 	bl	8002726 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003116:	f7fe fd3f 	bl	8001b98 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800311e:	f7fe fd3b 	bl	8001b98 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0b7      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003130:	f7ff fbce 	bl	80028d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f1      	beq.n	800311e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fb01 	bl	8002752 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003150:	f7fe fd22 	bl	8001b98 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003158:	f7fe fd1e 	bl	8001b98 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e09a      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800316a:	f7ff fbc3 	bl	80028f4 <LL_RCC_IsActiveFlag_PPRE1>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f1      	beq.n	8003158 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff faf6 	bl	8002778 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800318c:	f7fe fd04 	bl	8001b98 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003194:	f7fe fd00 	bl	8001b98 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e07c      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031a6:	f7ff fbb6 	bl	8002916 <LL_RCC_IsActiveFlag_PPRE2>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f1      	beq.n	8003194 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d043      	beq.n	8003244 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80031c4:	f7ff f983 	bl	80024ce <LL_RCC_HSE_IsReady>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11e      	bne.n	800320c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e066      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80031da:	f7ff fb2a 	bl	8002832 <LL_RCC_PLL_IsReady>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e05b      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80031f0:	f7ff fa1d 	bl	800262e <LL_RCC_MSI_IsReady>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e050      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80031fe:	f7ff f993 	bl	8002528 <LL_RCC_HSI_IsReady>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e049      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fa57 	bl	80026c4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003216:	f7fe fcbf 	bl	8001b98 <HAL_GetTick>
 800321a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321c:	e00a      	b.n	8003234 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321e:	f7fe fcbb 	bl	8001b98 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e035      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003234:	f7ff fa59 	bl	80026ea <LL_RCC_GetSysClkSource>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1ec      	bne.n	800321e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d21b      	bcs.n	800328a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4913      	ldr	r1, [pc, #76]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003262:	f7fe fc99 	bl	8001b98 <HAL_GetTick>
 8003266:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003268:	e008      	b.n	800327c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800326a:	f7fe fc95 	bl	8001b98 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e011      	b.n	80032a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_ClockConfig+0x23c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d1ef      	bne.n	800326a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800328a:	f000 f8b3 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800328e:	4603      	mov	r3, r0
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <HAL_RCC_ClockConfig+0x240>)
 8003292:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_ClockConfig+0x244>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fc31 	bl	8001b00 <HAL_InitTick>
 800329e:	4603      	mov	r3, r0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58004000 	.word	0x58004000
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000004 	.word	0x20000004

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c2:	f7ff fa12 	bl	80026ea <LL_RCC_GetSysClkSource>
 80032c6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c8:	f7ff fae6 	bl	8002898 <LL_RCC_PLL_GetMainSource>
 80032cc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d139      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d136      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80032e0:	f7ff f9b5 	bl	800264e <LL_RCC_MSI_IsEnabledRangeSelect>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0x62>
 80032ea:	f7ff f9b0 	bl	800264e <LL_RCC_MSI_IsEnabledRangeSelect>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x4e>
 80032f4:	f7ff f9bb 	bl	800266e <LL_RCC_MSI_GetRange>
 80032f8:	4603      	mov	r3, r0
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	e005      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x5a>
 8003302:	f7ff f9bf 	bl	8002684 <LL_RCC_MSI_GetRangeAfterStandby>
 8003306:	4603      	mov	r3, r0
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a36      	ldr	r2, [pc, #216]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	e014      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x8c>
 8003316:	f7ff f99a 	bl	800264e <LL_RCC_MSI_IsEnabledRangeSelect>
 800331a:	4603      	mov	r3, r0
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_GetSysClockFreq+0x7a>
 8003320:	f7ff f9a5 	bl	800266e <LL_RCC_MSI_GetRange>
 8003324:	4603      	mov	r3, r0
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	e005      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x86>
 800332e:	f7ff f9a9 	bl	8002684 <LL_RCC_MSI_GetRangeAfterStandby>
 8003332:	4603      	mov	r3, r0
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x134>)
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d115      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800334c:	e012      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d102      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e00c      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d109      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003360:	f7ff f888 	bl	8002474 <LL_RCC_HSE_IsEnabledDiv2>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_GetSysClockFreq+0x138>)
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e001      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003372:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003374:	f7ff f9b9 	bl	80026ea <LL_RCC_GetSysClkSource>
 8003378:	4603      	mov	r3, r0
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d12f      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800337e:	f7ff fa8b 	bl	8002898 <LL_RCC_PLL_GetMainSource>
 8003382:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0xde>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d003      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0xe4>
 8003390:	e00d      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003394:	60fb      	str	r3, [r7, #12]
        break;
 8003396:	e00d      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003398:	f7ff f86c 	bl	8002474 <LL_RCC_HSE_IsEnabledDiv2>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_GetSysClockFreq+0x138>)
 80033a4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80033aa:	60fb      	str	r3, [r7, #12]
        break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	60fb      	str	r3, [r7, #12]
        break;
 80033b2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80033b4:	f7ff fa4e 	bl	8002854 <LL_RCC_PLL_GetN>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	fb03 f402 	mul.w	r4, r3, r2
 80033c0:	f7ff fa5f 	bl	8002882 <LL_RCC_PLL_GetDivider>
 80033c4:	4603      	mov	r3, r0
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	3301      	adds	r3, #1
 80033ca:	fbb4 f4f3 	udiv	r4, r4, r3
 80033ce:	f7ff fa4d 	bl	800286c <LL_RCC_PLL_GetR>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0f5b      	lsrs	r3, r3, #29
 80033d6:	3301      	adds	r3, #1
 80033d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80033dc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80033de:	697b      	ldr	r3, [r7, #20]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	0800b9c4 	.word	0x0800b9c4
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	01e84800 	.word	0x01e84800

080033f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b598      	push	{r3, r4, r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80033f8:	f7ff ff5c 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80033fc:	4604      	mov	r4, r0
 80033fe:	f7ff f9ce 	bl	800279e <LL_RCC_GetAHBPrescaler>
 8003402:	4603      	mov	r3, r0
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	4a03      	ldr	r2, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x24>)
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd98      	pop	{r3, r4, r7, pc}
 8003418:	0800b964 	.word	0x0800b964

0800341c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b598      	push	{r3, r4, r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003420:	f7ff ffe8 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003424:	4604      	mov	r4, r0
 8003426:	f7ff f9d2 	bl	80027ce <LL_RCC_GetAPB1Prescaler>
 800342a:	4603      	mov	r3, r0
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	4a03      	ldr	r2, [pc, #12]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd98      	pop	{r3, r4, r7, pc}
 800343c:	0800b9a4 	.word	0x0800b9a4

08003440 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b598      	push	{r3, r4, r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003444:	f7ff ffd6 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003448:	4604      	mov	r4, r0
 800344a:	f7ff f9cb 	bl	80027e4 <LL_RCC_GetAPB2Prescaler>
 800344e:	4603      	mov	r3, r0
 8003450:	0adb      	lsrs	r3, r3, #11
 8003452:	4a03      	ldr	r2, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003458:	fa24 f303 	lsr.w	r3, r4, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd98      	pop	{r3, r4, r7, pc}
 8003460:	0800b9a4 	.word	0x0800b9a4

08003464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800347c:	f7ff f99a 	bl	80027b4 <LL_RCC_GetAHB3Prescaler>
 8003480:	4603      	mov	r3, r0
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9c      	lsrs	r4, r3, #18
 80034a0:	f7fe ffae 	bl	8002400 <HAL_PWREx_GetVoltageRange>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4619      	mov	r1, r3
 80034a8:	4620      	mov	r0, r4
 80034aa:	f000 f80b 	bl	80034c4 <RCC_SetFlashLatency>
 80034ae:	4603      	mov	r3, r0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	0800b9c4 	.word	0x0800b9c4
 80034bc:	0800b964 	.word	0x0800b964
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08e      	sub	sp, #56	; 0x38
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80034ce:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <RCC_SetFlashLatency+0xfc>)
 80034d0:	f107 0320 	add.w	r3, r7, #32
 80034d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d8:	6018      	str	r0, [r3, #0]
 80034da:	3304      	adds	r3, #4
 80034dc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80034de:	4a39      	ldr	r2, [pc, #228]	; (80035c4 <RCC_SetFlashLatency+0x100>)
 80034e0:	f107 0318 	add.w	r3, r7, #24
 80034e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034e8:	6018      	str	r0, [r3, #0]
 80034ea:	3304      	adds	r3, #4
 80034ec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80034ee:	4a36      	ldr	r2, [pc, #216]	; (80035c8 <RCC_SetFlashLatency+0x104>)
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80034f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d11d      	bne.n	8003542 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003506:	2300      	movs	r3, #0
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
 800350a:	e016      	b.n	800353a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003514:	4413      	add	r3, r2
 8003516:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4293      	cmp	r3, r2
 8003520:	d808      	bhi.n	8003534 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800352a:	4413      	add	r3, r2
 800352c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003532:	e023      	b.n	800357c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	3301      	adds	r3, #1
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2b02      	cmp	r3, #2
 800353e:	d9e5      	bls.n	800350c <RCC_SetFlashLatency+0x48>
 8003540:	e01c      	b.n	800357c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003542:	2300      	movs	r3, #0
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003546:	e016      	b.n	8003576 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003550:	4413      	add	r3, r2
 8003552:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4293      	cmp	r3, r2
 800355c:	d808      	bhi.n	8003570 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003566:	4413      	add	r3, r2
 8003568:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800356e:	e005      	b.n	800357c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	3301      	adds	r3, #1
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	2b02      	cmp	r3, #2
 800357a:	d9e5      	bls.n	8003548 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <RCC_SetFlashLatency+0x108>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 0207 	bic.w	r2, r3, #7
 8003584:	4911      	ldr	r1, [pc, #68]	; (80035cc <RCC_SetFlashLatency+0x108>)
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800358c:	f7fe fb04 	bl	8001b98 <HAL_GetTick>
 8003590:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003592:	e008      	b.n	80035a6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003594:	f7fe fb00 	bl	8001b98 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e007      	b.n	80035b6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <RCC_SetFlashLatency+0x108>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1ef      	bne.n	8003594 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3738      	adds	r7, #56	; 0x38
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	0800b684 	.word	0x0800b684
 80035c4:	0800b68c 	.word	0x0800b68c
 80035c8:	0800b694 	.word	0x0800b694
 80035cc:	58004000 	.word	0x58004000

080035d0 <LL_RCC_LSE_IsReady>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d101      	bne.n	80035e8 <LL_RCC_LSE_IsReady+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_RCC_LSE_IsReady+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_SetUSARTClockSource>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	43db      	mvns	r3, r3
 8003608:	401a      	ands	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <LL_RCC_SetI2SClockSource>:
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <LL_RCC_SetLPUARTClockSource>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <LL_RCC_SetI2CClockSource>:
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800368e:	43db      	mvns	r3, r3
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_SetLPTIMClockSource>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_SetRNGClockSource>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <LL_RCC_SetADCClockSource>:
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800371e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <LL_RCC_SetRTCClockSource>:
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <LL_RCC_GetRTCClockSource>:
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <LL_RCC_ForceBackupDomainReset>:
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80037c4:	2300      	movs	r3, #0
 80037c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80037c8:	2300      	movs	r3, #0
 80037ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d058      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80037d8:	f7fe fe04 	bl	80023e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037dc:	f7fe f9dc 	bl	8001b98 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80037e2:	e009      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fe f9d8 	bl	8001b98 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	74fb      	strb	r3, [r7, #19]
        break;
 80037f6:	e006      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80037f8:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d1ee      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13c      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800380c:	f7ff ffa7 	bl	800375e <LL_RCC_GetRTCClockSource>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	429a      	cmp	r2, r3
 8003818:	d00f      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003828:	f7ff ffa5 	bl	8003776 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800382c:	f7ff ffb3 	bl	8003796 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d014      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f9a8 	bl	8001b98 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800384a:	e00b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe f9a4 	bl	8001b98 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d902      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	74fb      	strb	r3, [r7, #19]
            break;
 8003862:	e004      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003864:	f7ff feb4 	bl	80035d0 <LL_RCC_LSE_IsReady>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d1ee      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5b 	bl	8003734 <LL_RCC_SetRTCClockSource>
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
 8003884:	e001      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fea9 	bl	80035f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fe9e 	bl	80035f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fec0 	bl	800364c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fee6 	bl	80036ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fedb 	bl	80036ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fed0 	bl	80036ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fea9 	bl	8003676 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fe9e 	bl	8003676 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fe93 	bl	8003676 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d011      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fe5e 	bl	8003622 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396e:	d107      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fea5 	bl	80036e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fea3 	bl	800370a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039cc:	d107      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80039de:	7cbb      	ldrb	r3, [r7, #18]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58000400 	.word	0x58000400

080039ec <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039fc:	4904      	ldr	r1, [pc, #16]	; (8003a10 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	58000400 	.word	0x58000400

08003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	58000400 	.word	0x58000400

08003a34 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	58000400 	.word	0x58000400

08003a54 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5e:	619a      	str	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	58000400 	.word	0x58000400

08003a6c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d101      	bne.n	8003a80 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	58000400 	.word	0x58000400

08003a90 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d101      	bne.n	8003aa4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	58000400 	.word	0x58000400

08003ab4 <LL_RCC_RF_DisableReset>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_IsRFUnderReset>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae8:	d101      	bne.n	8003aee <LL_RCC_IsRFUnderReset+0x1a>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <LL_RCC_IsRFUnderReset+0x1c>
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8003b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b06:	4905      	ldr	r1, [pc, #20]	; (8003b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	58000800 	.word	0x58000800

08003b20 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
    return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	e04b      	b.n	8003bce <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	799b      	ldrb	r3, [r3, #6]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fce4 	bl	8001518 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003b56:	f7ff ffad 	bl	8003ab4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_SUBGHZ_Init+0xb8>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	0cdb      	lsrs	r3, r3, #19
 8003b68:	2264      	movs	r2, #100	; 0x64
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	609a      	str	r2, [r3, #8]
      break;
 8003b80:	e007      	b.n	8003b92 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003b88:	f7ff ffa4 	bl	8003ad4 <LL_RCC_IsRFUnderReset>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ee      	bne.n	8003b70 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b92:	f7ff ff3f 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003b96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b9a:	f7ff ffad 	bl	8003af8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003b9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ba2:	f7ff ff23 	bl	80039ec <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003ba6:	f7ff ff55 	bl	8003a54 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 faad 	bl	8004114 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	719a      	strb	r2, [r3, #6]

  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	799b      	ldrb	r3, [r3, #6]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d14a      	bne.n	8003c90 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	795b      	ldrb	r3, [r3, #5]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e045      	b.n	8003c92 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fb4c 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c18:	f7ff ff0c 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003c1c:	210d      	movs	r1, #13
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fa98 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa90 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c34:	897b      	ldrh	r3, [r7, #10]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fa8a 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	82bb      	strh	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c46:	8abb      	ldrh	r3, [r7, #20]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fa7f 	bl	8004154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c56:	8abb      	ldrh	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	82bb      	strh	r3, [r7, #20]
 8003c5c:	8aba      	ldrh	r2, [r7, #20]
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d3f0      	bcc.n	8003c46 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c64:	f7ff fed6 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fb45 	bl	80042f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
 8003c7a:	e001      	b.n	8003c80 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	715a      	strb	r2, [r3, #5]

    return status;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	e000      	b.n	8003c92 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b088      	sub	sp, #32
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	4613      	mov	r3, r2
 8003cac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	799b      	ldrb	r3, [r3, #6]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d14a      	bne.n	8003d52 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	795b      	ldrb	r3, [r3, #5]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e045      	b.n	8003d54 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 faee 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cd4:	f7ff feae 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003cd8:	211d      	movs	r1, #29
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa3a 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4619      	mov	r1, r3
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fa32 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003cf0:	897b      	ldrh	r3, [r7, #10]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa2c 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa28 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	82fb      	strh	r3, [r7, #22]
 8003d08:	e009      	b.n	8003d1e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa77 	bl	8004200 <SUBGHZSPI_Receive>
      pData++;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003d18:	8afb      	ldrh	r3, [r7, #22]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	82fb      	strh	r3, [r7, #22]
 8003d1e:	8afa      	ldrh	r2, [r7, #22]
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3f1      	bcc.n	8003d0a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d26:	f7ff fe75 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fae4 	bl	80042f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e001      	b.n	8003d42 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	715a      	strb	r2, [r3, #5]

    return status;
 8003d4e:	7ffb      	ldrb	r3, [r7, #31]
 8003d50:	e000      	b.n	8003d54 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	72fb      	strb	r3, [r7, #11]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	799b      	ldrb	r3, [r3, #6]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d14a      	bne.n	8003e10 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	795b      	ldrb	r3, [r3, #5]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e045      	b.n	8003e12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa8f 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	2b84      	cmp	r3, #132	; 0x84
 8003d96:	d002      	beq.n	8003d9e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	2b94      	cmp	r3, #148	; 0x94
 8003d9c:	d103      	bne.n	8003da6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	711a      	strb	r2, [r3, #4]
 8003da4:	e002      	b.n	8003dac <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003dac:	f7ff fe42 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003db0:	7afb      	ldrb	r3, [r7, #11]
 8003db2:	4619      	mov	r1, r3
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f9cd 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	82bb      	strh	r3, [r7, #20]
 8003dbe:	e00a      	b.n	8003dd6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003dc0:	8abb      	ldrh	r3, [r7, #20]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9c2 	bl	8004154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003dd0:	8abb      	ldrh	r3, [r7, #20]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	82bb      	strh	r3, [r7, #20]
 8003dd6:	8aba      	ldrh	r2, [r7, #20]
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3f0      	bcc.n	8003dc0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dde:	f7ff fe19 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	2b84      	cmp	r3, #132	; 0x84
 8003de6:	d002      	beq.n	8003dee <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa85 	bl	80042f8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
 8003dfa:	e001      	b.n	8003e00 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	715a      	strb	r2, [r3, #5]

    return status;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	e000      	b.n	8003e12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	461a      	mov	r2, r3
 8003e26:	460b      	mov	r3, r1
 8003e28:	72fb      	strb	r3, [r7, #11]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	799b      	ldrb	r3, [r3, #6]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d13d      	bne.n	8003eb8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	795b      	ldrb	r3, [r3, #5]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e038      	b.n	8003eba <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa2e 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e54:	f7ff fdee 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f979 	bl	8004154 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e62:	2100      	movs	r1, #0
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f975 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	82fb      	strh	r3, [r7, #22]
 8003e6e:	e009      	b.n	8003e84 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e70:	69b9      	ldr	r1, [r7, #24]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f9c4 	bl	8004200 <SUBGHZSPI_Receive>
      pData++;
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e7e:	8afb      	ldrh	r3, [r7, #22]
 8003e80:	3301      	adds	r3, #1
 8003e82:	82fb      	strh	r3, [r7, #22]
 8003e84:	8afa      	ldrh	r2, [r7, #22]
 8003e86:	893b      	ldrh	r3, [r7, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3f1      	bcc.n	8003e70 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e8c:	f7ff fdc2 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fa31 	bl	80042f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e001      	b.n	8003ea8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	715a      	strb	r2, [r3, #5]

    return status;
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	e000      	b.n	8003eba <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	460b      	mov	r3, r1
 8003ed0:	72fb      	strb	r3, [r7, #11]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	799b      	ldrb	r3, [r3, #6]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d13e      	bne.n	8003f5e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	795b      	ldrb	r3, [r3, #5]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e039      	b.n	8003f60 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f9dc 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ef8:	f7ff fd9c 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003efc:	210e      	movs	r1, #14
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f928 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003f04:	7afb      	ldrb	r3, [r7, #11]
 8003f06:	4619      	mov	r1, r3
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f923 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	82bb      	strh	r3, [r7, #20]
 8003f12:	e00a      	b.n	8003f2a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f14:	8abb      	ldrh	r3, [r7, #20]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f918 	bl	8004154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f24:	8abb      	ldrh	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	82bb      	strh	r3, [r7, #20]
 8003f2a:	8aba      	ldrh	r2, [r7, #20]
 8003f2c:	893b      	ldrh	r3, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3f0      	bcc.n	8003f14 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f32:	f7ff fd6f 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9de 	bl	80042f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
 8003f48:	e001      	b.n	8003f4e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	715a      	strb	r2, [r3, #5]

    return status;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	e000      	b.n	8003f60 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	460b      	mov	r3, r1
 8003f76:	72fb      	strb	r3, [r7, #11]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	799b      	ldrb	r3, [r3, #6]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d141      	bne.n	800400e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	795b      	ldrb	r3, [r3, #5]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e03c      	b.n	8004010 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f987 	bl	80042b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003fa2:	f7ff fd47 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003fa6:	211e      	movs	r1, #30
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f8d3 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003fae:	7afb      	ldrb	r3, [r7, #11]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f8ce 	bl	8004154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f8ca 	bl	8004154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	82fb      	strh	r3, [r7, #22]
 8003fc4:	e009      	b.n	8003fda <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f919 	bl	8004200 <SUBGHZSPI_Receive>
      pData++;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003fd4:	8afb      	ldrh	r3, [r7, #22]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	82fb      	strh	r3, [r7, #22]
 8003fda:	8afa      	ldrh	r2, [r7, #22]
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3f1      	bcc.n	8003fc6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fe2:	f7ff fd17 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f986 	bl	80042f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e001      	b.n	8003ffe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	715a      	strb	r2, [r3, #5]

    return status;
 800400a:	7ffb      	ldrb	r3, [r7, #31]
 800400c:	e000      	b.n	8004010 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004020:	2300      	movs	r3, #0
 8004022:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004024:	f107 020c 	add.w	r2, r7, #12
 8004028:	2302      	movs	r3, #2
 800402a:	2112      	movs	r1, #18
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fef4 	bl	8003e1a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004032:	7b3b      	ldrb	r3, [r7, #12]
 8004034:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8004036:	89fb      	ldrh	r3, [r7, #14]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	b21a      	sxth	r2, r3
 800403c:	7b7b      	ldrb	r3, [r7, #13]
 800403e:	b21b      	sxth	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b21b      	sxth	r3, r3
 8004044:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f003 fdd3 	bl	8007bfc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004056:	89fb      	ldrh	r3, [r7, #14]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f003 fdd8 	bl	8007c18 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004068:	89fb      	ldrh	r3, [r7, #14]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f003 fe27 	bl	8007cc8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800407a:	89fb      	ldrh	r3, [r7, #14]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f003 fe2c 	bl	8007ce4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f003 fe31 	bl	8007d00 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f003 fdfe 	bl	8007cac <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80040b0:	89fb      	ldrh	r3, [r7, #14]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f003 fdb9 	bl	8007c34 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80040c2:	89fb      	ldrh	r3, [r7, #14]
 80040c4:	09db      	lsrs	r3, r3, #7
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00e      	beq.n	80040ec <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80040da:	2101      	movs	r1, #1
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f003 fdb7 	bl	8007c50 <HAL_SUBGHZ_CADStatusCallback>
 80040e2:	e003      	b.n	80040ec <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80040e4:	2100      	movs	r1, #0
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f003 fdb2 	bl	8007c50 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80040ec:	89fb      	ldrh	r3, [r7, #14]
 80040ee:	0a5b      	lsrs	r3, r3, #9
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f003 fdc7 	bl	8007c8c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	2302      	movs	r3, #2
 8004104:	2102      	movs	r1, #2
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fe28 	bl	8003d5c <HAL_SUBGHZ_ExecSetCmd>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004128:	4a09      	ldr	r2, [pc, #36]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004130:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 8004134:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004138:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a04      	ldr	r2, [pc, #16]	; (8004150 <SUBGHZSPI_Init+0x3c>)
 8004140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	58010000 	.word	0x58010000

08004154 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <SUBGHZSPI_Transmit+0xa0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	0cdb      	lsrs	r3, r3, #19
 8004172:	2264      	movs	r2, #100	; 0x64
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	609a      	str	r2, [r3, #8]
      break;
 800418a:	e008      	b.n	800419e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <SUBGHZSPI_Transmit+0xa4>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d1ed      	bne.n	800417a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <SUBGHZSPI_Transmit+0xa8>)
 80041a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <SUBGHZSPI_Transmit+0xa0>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	0cdb      	lsrs	r3, r3, #19
 80041b6:	2264      	movs	r2, #100	; 0x64
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	609a      	str	r2, [r3, #8]
      break;
 80041ce:	e008      	b.n	80041e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <SUBGHZSPI_Transmit+0xa4>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d1ed      	bne.n	80041be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <SUBGHZSPI_Transmit+0xa4>)
 80041e4:	68db      	ldr	r3, [r3, #12]

  return status;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000
 80041f8:	58010000 	.word	0x58010000
 80041fc:	5801000c 	.word	0x5801000c

08004200 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800420e:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <SUBGHZSPI_Receive+0xa4>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	0cdb      	lsrs	r3, r3, #19
 800421c:	2264      	movs	r2, #100	; 0x64
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e008      	b.n	8004248 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b01      	subs	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <SUBGHZSPI_Receive+0xa8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b02      	cmp	r3, #2
 8004246:	d1ed      	bne.n	8004224 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004248:	4b18      	ldr	r3, [pc, #96]	; (80042ac <SUBGHZSPI_Receive+0xac>)
 800424a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <SUBGHZSPI_Receive+0xa4>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	2264      	movs	r2, #100	; 0x64
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e008      	b.n	800428c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b01      	subs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <SUBGHZSPI_Receive+0xa8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d1ed      	bne.n	8004268 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <SUBGHZSPI_Receive+0xa8>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	701a      	strb	r2, [r3, #0]

  return status;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000000 	.word	0x20000000
 80042a8:	58010000 	.word	0x58010000
 80042ac:	5801000c 	.word	0x5801000c

080042b0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	791b      	ldrb	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d111      	bne.n	80042e4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <SUBGHZ_CheckDeviceReady+0x44>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042d0:	f7ff fbb0 	bl	8003a34 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f9      	bne.n	80042d4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80042e0:	f7ff fb98 	bl	8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f807 	bl	80042f8 <SUBGHZ_WaitOnBusy>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000000 	.word	0x20000000

080042f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <SUBGHZ_WaitOnBusy+0x58>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	0d1b      	lsrs	r3, r3, #20
 8004312:	2264      	movs	r2, #100	; 0x64
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800431a:	f7ff fbb9 	bl	8003a90 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800431e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	609a      	str	r2, [r3, #8]
      break;
 8004330:	e009      	b.n	8004346 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b01      	subs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004338:	f7ff fb98 	bl	8003a6c <LL_PWR_IsActiveFlag_RFBUSYS>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	2b01      	cmp	r3, #1
 8004344:	d0e9      	beq.n	800431a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000000 	.word	0x20000000

08004354 <LL_RCC_GetUSARTClockSource>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004360:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	401a      	ands	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	4313      	orrs	r3, r2
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <LL_RCC_GetLPUARTClockSource>:
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4013      	ands	r3, r2
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e042      	b.n	800442e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc ffea 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f995 	bl	8004708 <UART_SetConfig>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e022      	b.n	800442e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fbd9 	bl	8004ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fc5f 	bl	8004cea <UART_CheckIdleState>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b08a      	sub	sp, #40	; 0x28
 800443a:	af02      	add	r7, sp, #8
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	2b20      	cmp	r3, #32
 800444e:	f040 8083 	bne.w	8004558 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_UART_Transmit+0x28>
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07b      	b.n	800455a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_UART_Transmit+0x3a>
 800446c:	2302      	movs	r3, #2
 800446e:	e074      	b.n	800455a <HAL_UART_Transmit+0x124>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	; 0x21
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004488:	f7fd fb86 	bl	8001b98 <HAL_GetTick>
 800448c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d108      	bne.n	80044ba <HAL_UART_Transmit+0x84>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e003      	b.n	80044c2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80044ca:	e02c      	b.n	8004526 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fc52 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e039      	b.n	800455a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	3302      	adds	r3, #2
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e007      	b.n	8004514 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1cc      	bne.n	80044cc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	2140      	movs	r1, #64	; 0x40
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fc1f 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e006      	b.n	800455a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08a      	sub	sp, #40	; 0x28
 8004566:	af02      	add	r7, sp, #8
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	2b20      	cmp	r3, #32
 800457a:	f040 80c0 	bne.w	80046fe <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_UART_Receive+0x28>
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0b8      	b.n	8004700 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_UART_Receive+0x3a>
 8004598:	2302      	movs	r3, #2
 800459a:	e0b1      	b.n	8004700 <HAL_UART_Receive+0x19e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2222      	movs	r2, #34	; 0x22
 80045b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ba:	f7fd faed 	bl	8001b98 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d10e      	bne.n	80045f8 <HAL_UART_Receive+0x96>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_UART_Receive+0x8c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ec:	e02d      	b.n	800464a <HAL_UART_Receive+0xe8>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	22ff      	movs	r2, #255	; 0xff
 80045f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045f6:	e028      	b.n	800464a <HAL_UART_Receive+0xe8>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_UART_Receive+0xba>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_UART_Receive+0xb0>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004610:	e01b      	b.n	800464a <HAL_UART_Receive+0xe8>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	227f      	movs	r2, #127	; 0x7f
 8004616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800461a:	e016      	b.n	800464a <HAL_UART_Receive+0xe8>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004624:	d10d      	bne.n	8004642 <HAL_UART_Receive+0xe0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <HAL_UART_Receive+0xd6>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	227f      	movs	r2, #127	; 0x7f
 8004632:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004636:	e008      	b.n	800464a <HAL_UART_Receive+0xe8>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	223f      	movs	r2, #63	; 0x3f
 800463c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004640:	e003      	b.n	800464a <HAL_UART_Receive+0xe8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004650:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d108      	bne.n	800466e <HAL_UART_Receive+0x10c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e003      	b.n	8004676 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800467e:	e032      	b.n	80046e6 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	2120      	movs	r1, #32
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fb78 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e032      	b.n	8004700 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10c      	bne.n	80046ba <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	8a7b      	ldrh	r3, [r7, #18]
 80046aa:	4013      	ands	r3, r2
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	3302      	adds	r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e00c      	b.n	80046d4 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	8a7b      	ldrh	r3, [r7, #18]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	4013      	ands	r3, r2
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1c6      	bne.n	8004680 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e000      	b.n	8004700 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004708:	b5b0      	push	{r4, r5, r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4bab      	ldr	r3, [pc, #684]	; (80049e0 <UART_SetConfig+0x2d8>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	69f9      	ldr	r1, [r7, #28]
 800473c:	430b      	orrs	r3, r1
 800473e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4aa0      	ldr	r2, [pc, #640]	; (80049e4 <UART_SetConfig+0x2dc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	4313      	orrs	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800477a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	69f9      	ldr	r1, [r7, #28]
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f023 010f 	bic.w	r1, r3, #15
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a91      	ldr	r2, [pc, #580]	; (80049e8 <UART_SetConfig+0x2e0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d122      	bne.n	80047ee <UART_SetConfig+0xe6>
 80047a8:	2003      	movs	r0, #3
 80047aa:	f7ff fdd3 	bl	8004354 <LL_RCC_GetUSARTClockSource>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d817      	bhi.n	80047e8 <UART_SetConfig+0xe0>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0xb8>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047dd 	.word	0x080047dd
 80047c8:	080047d7 	.word	0x080047d7
 80047cc:	080047e3 	.word	0x080047e3
 80047d0:	2301      	movs	r3, #1
 80047d2:	76fb      	strb	r3, [r7, #27]
 80047d4:	e072      	b.n	80048bc <UART_SetConfig+0x1b4>
 80047d6:	2302      	movs	r3, #2
 80047d8:	76fb      	strb	r3, [r7, #27]
 80047da:	e06f      	b.n	80048bc <UART_SetConfig+0x1b4>
 80047dc:	2304      	movs	r3, #4
 80047de:	76fb      	strb	r3, [r7, #27]
 80047e0:	e06c      	b.n	80048bc <UART_SetConfig+0x1b4>
 80047e2:	2308      	movs	r3, #8
 80047e4:	76fb      	strb	r3, [r7, #27]
 80047e6:	e069      	b.n	80048bc <UART_SetConfig+0x1b4>
 80047e8:	2310      	movs	r3, #16
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e066      	b.n	80048bc <UART_SetConfig+0x1b4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7e      	ldr	r2, [pc, #504]	; (80049ec <UART_SetConfig+0x2e4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d134      	bne.n	8004862 <UART_SetConfig+0x15a>
 80047f8:	200c      	movs	r0, #12
 80047fa:	f7ff fdab 	bl	8004354 <LL_RCC_GetUSARTClockSource>
 80047fe:	4603      	mov	r3, r0
 8004800:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d829      	bhi.n	800485c <UART_SetConfig+0x154>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <UART_SetConfig+0x108>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004845 	.word	0x08004845
 8004814:	0800485d 	.word	0x0800485d
 8004818:	0800485d 	.word	0x0800485d
 800481c:	0800485d 	.word	0x0800485d
 8004820:	08004851 	.word	0x08004851
 8004824:	0800485d 	.word	0x0800485d
 8004828:	0800485d 	.word	0x0800485d
 800482c:	0800485d 	.word	0x0800485d
 8004830:	0800484b 	.word	0x0800484b
 8004834:	0800485d 	.word	0x0800485d
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800485d 	.word	0x0800485d
 8004840:	08004857 	.word	0x08004857
 8004844:	2300      	movs	r3, #0
 8004846:	76fb      	strb	r3, [r7, #27]
 8004848:	e038      	b.n	80048bc <UART_SetConfig+0x1b4>
 800484a:	2302      	movs	r3, #2
 800484c:	76fb      	strb	r3, [r7, #27]
 800484e:	e035      	b.n	80048bc <UART_SetConfig+0x1b4>
 8004850:	2304      	movs	r3, #4
 8004852:	76fb      	strb	r3, [r7, #27]
 8004854:	e032      	b.n	80048bc <UART_SetConfig+0x1b4>
 8004856:	2308      	movs	r3, #8
 8004858:	76fb      	strb	r3, [r7, #27]
 800485a:	e02f      	b.n	80048bc <UART_SetConfig+0x1b4>
 800485c:	2310      	movs	r3, #16
 800485e:	76fb      	strb	r3, [r7, #27]
 8004860:	e02c      	b.n	80048bc <UART_SetConfig+0x1b4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5f      	ldr	r2, [pc, #380]	; (80049e4 <UART_SetConfig+0x2dc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d125      	bne.n	80048b8 <UART_SetConfig+0x1b0>
 800486c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004870:	f7ff fd82 	bl	8004378 <LL_RCC_GetLPUARTClockSource>
 8004874:	4603      	mov	r3, r0
 8004876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x1a4>
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004880:	d817      	bhi.n	80048b2 <UART_SetConfig+0x1aa>
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x198>
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d811      	bhi.n	80048b2 <UART_SetConfig+0x1aa>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x192>
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x19e>
 8004898:	e00b      	b.n	80048b2 <UART_SetConfig+0x1aa>
 800489a:	2300      	movs	r3, #0
 800489c:	76fb      	strb	r3, [r7, #27]
 800489e:	e00d      	b.n	80048bc <UART_SetConfig+0x1b4>
 80048a0:	2302      	movs	r3, #2
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e00a      	b.n	80048bc <UART_SetConfig+0x1b4>
 80048a6:	2304      	movs	r3, #4
 80048a8:	76fb      	strb	r3, [r7, #27]
 80048aa:	e007      	b.n	80048bc <UART_SetConfig+0x1b4>
 80048ac:	2308      	movs	r3, #8
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x1b4>
 80048b2:	2310      	movs	r3, #16
 80048b4:	76fb      	strb	r3, [r7, #27]
 80048b6:	e001      	b.n	80048bc <UART_SetConfig+0x1b4>
 80048b8:	2310      	movs	r3, #16
 80048ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a48      	ldr	r2, [pc, #288]	; (80049e4 <UART_SetConfig+0x2dc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f040 8098 	bne.w	80049f8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c8:	7efb      	ldrb	r3, [r7, #27]
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d823      	bhi.n	8004916 <UART_SetConfig+0x20e>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x1cc>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004907 	.word	0x08004907
 80048e8:	08004917 	.word	0x08004917
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004917 	.word	0x08004917
 80048f4:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f8:	f7fe fd90 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80048fc:	6178      	str	r0, [r7, #20]
        break;
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <UART_SetConfig+0x2e8>)
 8004902:	617b      	str	r3, [r7, #20]
        break;
 8004904:	e00c      	b.n	8004920 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe fcd5 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800490a:	6178      	str	r0, [r7, #20]
        break;
 800490c:	e008      	b.n	8004920 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	617b      	str	r3, [r7, #20]
        break;
 8004914:	e004      	b.n	8004920 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	76bb      	strb	r3, [r7, #26]
        break;
 800491e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8128 	beq.w	8004b78 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <UART_SetConfig+0x2ec>)
 800492e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004932:	461a      	mov	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fbb3 f3f2 	udiv	r3, r3, r2
 800493a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d305      	bcc.n	8004958 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	76bb      	strb	r3, [r7, #26]
 800495c:	e10c      	b.n	8004b78 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4618      	mov	r0, r3
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <UART_SetConfig+0x2ec>)
 800496c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004970:	b29a      	uxth	r2, r3
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f7fc f8ef 	bl	8000b58 <__aeabi_uldivmod>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	020b      	lsls	r3, r1, #8
 800498c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004990:	0202      	lsls	r2, r0, #8
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	6849      	ldr	r1, [r1, #4]
 8004996:	0849      	lsrs	r1, r1, #1
 8004998:	4608      	mov	r0, r1
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	1814      	adds	r4, r2, r0
 80049a0:	eb43 0501 	adc.w	r5, r3, r1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fc f8d1 	bl	8000b58 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4613      	mov	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c4:	d308      	bcc.n	80049d8 <UART_SetConfig+0x2d0>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049cc:	d204      	bcs.n	80049d8 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e0cf      	b.n	8004b78 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	76bb      	strb	r3, [r7, #26]
 80049dc:	e0cc      	b.n	8004b78 <UART_SetConfig+0x470>
 80049de:	bf00      	nop
 80049e0:	cfff69f3 	.word	0xcfff69f3
 80049e4:	40008000 	.word	0x40008000
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40004400 	.word	0x40004400
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	0800ba04 	.word	0x0800ba04
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a00:	d165      	bne.n	8004ace <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004a02:	7efb      	ldrb	r3, [r7, #27]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d828      	bhi.n	8004a5a <UART_SetConfig+0x352>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0x308>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a5b 	.word	0x08004a5b
 8004a20:	08004a4b 	.word	0x08004a4b
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a5b 	.word	0x08004a5b
 8004a2c:	08004a5b 	.word	0x08004a5b
 8004a30:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7fe fcf2 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004a38:	6178      	str	r0, [r7, #20]
        break;
 8004a3a:	e013      	b.n	8004a64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a3c:	f7fe fd00 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 8004a40:	6178      	str	r0, [r7, #20]
        break;
 8004a42:	e00f      	b.n	8004a64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <UART_SetConfig+0x498>)
 8004a46:	617b      	str	r3, [r7, #20]
        break;
 8004a48:	e00c      	b.n	8004a64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe fc33 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004a4e:	6178      	str	r0, [r7, #20]
        break;
 8004a50:	e008      	b.n	8004a64 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	617b      	str	r3, [r7, #20]
        break;
 8004a58:	e004      	b.n	8004a64 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	76bb      	strb	r3, [r7, #26]
        break;
 8004a62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8086 	beq.w	8004b78 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	4a4c      	ldr	r2, [pc, #304]	; (8004ba4 <UART_SetConfig+0x49c>)
 8004a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a76:	461a      	mov	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a7e:	005a      	lsls	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d916      	bls.n	8004ac8 <UART_SetConfig+0x3c0>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d212      	bcs.n	8004ac8 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f023 030f 	bic.w	r3, r3, #15
 8004aaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	89fa      	ldrh	r2, [r7, #14]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e057      	b.n	8004b78 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	76bb      	strb	r3, [r7, #26]
 8004acc:	e054      	b.n	8004b78 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ace:	7efb      	ldrb	r3, [r7, #27]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d828      	bhi.n	8004b26 <UART_SetConfig+0x41e>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x3d4>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b27 	.word	0x08004b27
 8004aec:	08004b17 	.word	0x08004b17
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b27 	.word	0x08004b27
 8004af8:	08004b27 	.word	0x08004b27
 8004afc:	08004b1f 	.word	0x08004b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fe fc8c 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004b04:	6178      	str	r0, [r7, #20]
        break;
 8004b06:	e013      	b.n	8004b30 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b08:	f7fe fc9a 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 8004b0c:	6178      	str	r0, [r7, #20]
        break;
 8004b0e:	e00f      	b.n	8004b30 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b10:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <UART_SetConfig+0x498>)
 8004b12:	617b      	str	r3, [r7, #20]
        break;
 8004b14:	e00c      	b.n	8004b30 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b16:	f7fe fbcd 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004b1a:	6178      	str	r0, [r7, #20]
        break;
 8004b1c:	e008      	b.n	8004b30 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b22:	617b      	str	r3, [r7, #20]
        break;
 8004b24:	e004      	b.n	8004b30 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	76bb      	strb	r3, [r7, #26]
        break;
 8004b2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d020      	beq.n	8004b78 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <UART_SetConfig+0x49c>)
 8004b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b40:	461a      	mov	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	441a      	add	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b0f      	cmp	r3, #15
 8004b60:	d908      	bls.n	8004b74 <UART_SetConfig+0x46c>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d204      	bcs.n	8004b74 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	e001      	b.n	8004b78 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b94:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	0800ba04 	.word	0x0800ba04

08004ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca6:	d10a      	bne.n	8004cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af02      	add	r7, sp, #8
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cfa:	f7fc ff4d 	bl	8001b98 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d10e      	bne.n	8004d2c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f82f 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e025      	b.n	8004d78 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d10e      	bne.n	8004d58 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f819 	bl	8004d80 <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e00f      	b.n	8004d78 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09c      	sub	sp, #112	; 0x70
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d90:	e0a9      	b.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	f000 80a5 	beq.w	8004ee6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9c:	f7fc fefc 	bl	8001b98 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x32>
 8004dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d140      	bne.n	8004e34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd2:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e04:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e069      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d051      	beq.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e50:	d149      	bne.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eae:	623a      	str	r2, [r7, #32]
 8004eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e010      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf0c      	ite	eq
 8004ef6:	2301      	moveq	r3, #1
 8004ef8:	2300      	movne	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	f43f af46 	beq.w	8004d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3770      	adds	r7, #112	; 0x70
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e027      	b.n	8004f76 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2224      	movs	r2, #36	; 0x24
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e02d      	b.n	8004ff4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2224      	movs	r2, #36	; 0x24
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f84f 	bl	8005078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e02d      	b.n	8005070 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f811 	bl	8005078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005084:	2b00      	cmp	r3, #0
 8005086:	d108      	bne.n	800509a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005098:	e031      	b.n	80050fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800509a:	2308      	movs	r3, #8
 800509c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800509e:	2308      	movs	r3, #8
 80050a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	0e5b      	lsrs	r3, r3, #25
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	0f5b      	lsrs	r3, r3, #29
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050c2:	7bbb      	ldrb	r3, [r7, #14]
 80050c4:	7b3a      	ldrb	r2, [r7, #12]
 80050c6:	4910      	ldr	r1, [pc, #64]	; (8005108 <UARTEx_SetNbDataToProcess+0x90>)
 80050c8:	5c8a      	ldrb	r2, [r1, r2]
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050ce:	7b3a      	ldrb	r2, [r7, #12]
 80050d0:	490e      	ldr	r1, [pc, #56]	; (800510c <UARTEx_SetNbDataToProcess+0x94>)
 80050d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	7b7a      	ldrb	r2, [r7, #13]
 80050e4:	4908      	ldr	r1, [pc, #32]	; (8005108 <UARTEx_SetNbDataToProcess+0x90>)
 80050e6:	5c8a      	ldrb	r2, [r1, r2]
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050ec:	7b7a      	ldrb	r2, [r7, #13]
 80050ee:	4907      	ldr	r1, [pc, #28]	; (800510c <UARTEx_SetNbDataToProcess+0x94>)
 80050f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	0800ba1c 	.word	0x0800ba1c
 800510c:	0800ba24 	.word	0x0800ba24

08005110 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <RadioInit+0x60>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <RadioInit+0x64>)
 8005120:	2200      	movs	r2, #0
 8005122:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <RadioInit+0x64>)
 8005126:	2200      	movs	r2, #0
 8005128:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <RadioInit+0x64>)
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005130:	4811      	ldr	r0, [pc, #68]	; (8005178 <RadioInit+0x68>)
 8005132:	f001 fdc1 	bl	8006cb8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8005136:	2000      	movs	r0, #0
 8005138:	f000 ffb0 	bl	800609c <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800513c:	f002 f852 	bl	80071e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005140:	2100      	movs	r1, #0
 8005142:	2000      	movs	r0, #0
 8005144:	f002 fba8 	bl	8007898 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005148:	2204      	movs	r2, #4
 800514a:	2100      	movs	r1, #0
 800514c:	2001      	movs	r0, #1
 800514e:	f002 f9d3 	bl	80074f8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005152:	2300      	movs	r3, #0
 8005154:	2200      	movs	r2, #0
 8005156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800515a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800515e:	f002 f907 	bl	8007370 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005162:	f000 fe4f 	bl	8005e04 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000440 	.word	0x20000440
 8005174:	20000578 	.word	0x20000578
 8005178:	08006109 	.word	0x08006109

0800517c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005180:	f001 fddc 	bl	8006d3c <SUBGRF_GetOperatingMode>
 8005184:	4603      	mov	r3, r0
 8005186:	2b07      	cmp	r3, #7
 8005188:	d00a      	beq.n	80051a0 <RadioGetStatus+0x24>
 800518a:	2b07      	cmp	r3, #7
 800518c:	dc0a      	bgt.n	80051a4 <RadioGetStatus+0x28>
 800518e:	2b04      	cmp	r3, #4
 8005190:	d002      	beq.n	8005198 <RadioGetStatus+0x1c>
 8005192:	2b05      	cmp	r3, #5
 8005194:	d002      	beq.n	800519c <RadioGetStatus+0x20>
 8005196:	e005      	b.n	80051a4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005198:	2302      	movs	r3, #2
 800519a:	e004      	b.n	80051a6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800519c:	2301      	movs	r3, #1
 800519e:	e002      	b.n	80051a6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e000      	b.n	80051a6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80051a4:	2300      	movs	r3, #0
    }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80051b6:	4a25      	ldr	r2, [pc, #148]	; (800524c <RadioSetModem+0xa0>)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 fedf 	bl	8007f82 <RFW_SetRadioModem>
    switch( modem )
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d80b      	bhi.n	80051e4 <RadioSetModem+0x38>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <RadioSetModem+0x28>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005227 	.word	0x08005227
 80051e0:	08005235 	.word	0x08005235
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80051e4:	2000      	movs	r0, #0
 80051e6:	f002 f961 	bl	80074ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <RadioSetModem+0xa0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	735a      	strb	r2, [r3, #13]
        break;
 80051f0:	e028      	b.n	8005244 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80051f2:	2001      	movs	r0, #1
 80051f4:	f002 f95a 	bl	80074ac <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <RadioSetModem+0xa0>)
 80051fa:	7b5a      	ldrb	r2, [r3, #13]
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <RadioSetModem+0xa0>)
 80051fe:	7b1b      	ldrb	r3, [r3, #12]
 8005200:	429a      	cmp	r2, r3
 8005202:	d01e      	beq.n	8005242 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <RadioSetModem+0xa0>)
 8005206:	7b1a      	ldrb	r2, [r3, #12]
 8005208:	4b10      	ldr	r3, [pc, #64]	; (800524c <RadioSetModem+0xa0>)
 800520a:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <RadioSetModem+0xa0>)
 800520e:	7b5b      	ldrb	r3, [r3, #13]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 ff43 	bl	800609c <RadioSetPublicNetwork>
        }
        break;
 8005216:	e014      	b.n	8005242 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005218:	2002      	movs	r0, #2
 800521a:	f002 f947 	bl	80074ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <RadioSetModem+0xa0>)
 8005220:	2200      	movs	r2, #0
 8005222:	735a      	strb	r2, [r3, #13]
        break;
 8005224:	e00e      	b.n	8005244 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005226:	2002      	movs	r0, #2
 8005228:	f002 f940 	bl	80074ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <RadioSetModem+0xa0>)
 800522e:	2200      	movs	r2, #0
 8005230:	735a      	strb	r2, [r3, #13]
        break;
 8005232:	e007      	b.n	8005244 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005234:	2000      	movs	r0, #0
 8005236:	f002 f939 	bl	80074ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800523a:	4b04      	ldr	r3, [pc, #16]	; (800524c <RadioSetModem+0xa0>)
 800523c:	2200      	movs	r2, #0
 800523e:	735a      	strb	r2, [r3, #13]
        break;
 8005240:	e000      	b.n	8005244 <RadioSetModem+0x98>
        break;
 8005242:	bf00      	nop
    }
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000578 	.word	0x20000578

08005250 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f002 f8e5 	bl	8007428 <SUBGRF_SetRfFrequency>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b090      	sub	sp, #64	; 0x40
 800526a:	af0a      	add	r7, sp, #40	; 0x28
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005282:	f000 fdd2 	bl	8005e2a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005286:	2000      	movs	r0, #0
 8005288:	f7ff ff90 	bl	80051ac <RadioSetModem>

    RadioSetChannel( freq );
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ffdf 	bl	8005250 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005292:	2301      	movs	r3, #1
 8005294:	9309      	str	r3, [sp, #36]	; 0x24
 8005296:	2300      	movs	r3, #0
 8005298:	9308      	str	r3, [sp, #32]
 800529a:	2300      	movs	r3, #0
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	2300      	movs	r3, #0
 80052a0:	9306      	str	r3, [sp, #24]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9305      	str	r3, [sp, #20]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9303      	str	r3, [sp, #12]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	2303      	movs	r3, #3
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	2000      	movs	r0, #0
 80052c4:	f000 f826 	bl	8005314 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80052c8:	2000      	movs	r0, #0
 80052ca:	f000 fdb5 	bl	8005e38 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80052ce:	f000 ff13 	bl	80060f8 <RadioGetWakeupTime>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fc fc69 	bl	8001bac <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80052da:	f000 fda6 	bl	8005e2a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80052f2:	2001      	movs	r0, #1
 80052f4:	f7ff ff5a 	bl	80051ac <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80052f8:	2300      	movs	r3, #0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	2000      	movs	r0, #0
 8005300:	f002 f836 	bl	8007370 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8005304:	f001 fdeb 	bl	8006ede <SUBGRF_GetRandom>
 8005308:	6078      	str	r0, [r7, #4]

    return rnd;
 800530a:	687b      	ldr	r3, [r7, #4]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	; 0x28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	461a      	mov	r2, r3
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	4613      	mov	r3, r2
 8005326:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8005328:	4abd      	ldr	r2, [pc, #756]	; (8005620 <RadioSetRxConfig+0x30c>)
 800532a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800532e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005330:	f002 fde5 	bl	8007efe <RFW_DeInit>
    if( rxContinuous == true )
 8005334:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005340:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8005348:	4ab6      	ldr	r2, [pc, #728]	; (8005624 <RadioSetRxConfig+0x310>)
 800534a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800534e:	7013      	strb	r3, [r2, #0]
 8005350:	e002      	b.n	8005358 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005352:	4bb4      	ldr	r3, [pc, #720]	; (8005624 <RadioSetRxConfig+0x310>)
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d009      	beq.n	8005372 <RadioSetRxConfig+0x5e>
 800535e:	2b04      	cmp	r3, #4
 8005360:	f300 81da 	bgt.w	8005718 <RadioSetRxConfig+0x404>
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80bf 	beq.w	80054e8 <RadioSetRxConfig+0x1d4>
 800536a:	2b01      	cmp	r3, #1
 800536c:	f000 812c 	beq.w	80055c8 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005370:	e1d2      	b.n	8005718 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005372:	2001      	movs	r0, #1
 8005374:	f001 fef8 	bl	8007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005378:	4ba9      	ldr	r3, [pc, #676]	; (8005620 <RadioSetRxConfig+0x30c>)
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005380:	4aa7      	ldr	r2, [pc, #668]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005386:	4ba6      	ldr	r3, [pc, #664]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005388:	2209      	movs	r2, #9
 800538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800538e:	4ba4      	ldr	r3, [pc, #656]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005390:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f002 fce2 	bl	8007d60 <SUBGRF_GetFskBandwidthRegValue>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	4b9f      	ldr	r3, [pc, #636]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80053a6:	4b9e      	ldr	r3, [pc, #632]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80053ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	4b9b      	ldr	r3, [pc, #620]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053b4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80053b6:	4b9a      	ldr	r3, [pc, #616]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80053bc:	4b98      	ldr	r3, [pc, #608]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053be:	2210      	movs	r2, #16
 80053c0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80053c2:	4b97      	ldr	r3, [pc, #604]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80053c8:	4b95      	ldr	r3, [pc, #596]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80053ce:	4b95      	ldr	r3, [pc, #596]	; (8005624 <RadioSetRxConfig+0x310>)
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	4b93      	ldr	r3, [pc, #588]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053d4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80053d6:	4b92      	ldr	r3, [pc, #584]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053d8:	2201      	movs	r2, #1
 80053da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80053dc:	4b90      	ldr	r3, [pc, #576]	; (8005620 <RadioSetRxConfig+0x30c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80053e2:	2004      	movs	r0, #4
 80053e4:	f7ff fee2 	bl	80051ac <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80053e8:	488f      	ldr	r0, [pc, #572]	; (8005628 <RadioSetRxConfig+0x314>)
 80053ea:	f002 f8eb 	bl	80075c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80053ee:	488f      	ldr	r0, [pc, #572]	; (800562c <RadioSetRxConfig+0x318>)
 80053f0:	f002 f9b4 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80053f4:	4a8e      	ldr	r2, [pc, #568]	; (8005630 <RadioSetRxConfig+0x31c>)
 80053f6:	f107 031c 	add.w	r3, r7, #28
 80053fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8005402:	f107 031c 	add.w	r3, r7, #28
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fce7 	bl	8006dda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800540c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005410:	f001 fd32 	bl	8006e78 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005414:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005418:	f000 fdde 	bl	8005fd8 <RadioRead>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8005422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800542e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005432:	4619      	mov	r1, r3
 8005434:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005438:	f000 fdbc 	bl	8005fb4 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800543c:	2104      	movs	r1, #4
 800543e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005442:	f000 fdb7 	bl	8005fb4 <RadioWrite>
            modReg= RadioRead(0x89b);
 8005446:	f640 009b 	movw	r0, #2203	; 0x89b
 800544a:	f000 fdc5 	bl	8005fd8 <RadioRead>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005458:	f023 031c 	bic.w	r3, r3, #28
 800545c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005464:	f043 0308 	orr.w	r3, r3, #8
 8005468:	b2db      	uxtb	r3, r3
 800546a:	4619      	mov	r1, r3
 800546c:	f640 009b 	movw	r0, #2203	; 0x89b
 8005470:	f000 fda0 	bl	8005fb4 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005474:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005478:	f000 fdae 	bl	8005fd8 <RadioRead>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005486:	f023 0318 	bic.w	r3, r3, #24
 800548a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800548e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005492:	f043 0318 	orr.w	r3, r3, #24
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4619      	mov	r1, r3
 800549a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800549e:	f000 fd89 	bl	8005fb4 <RadioWrite>
            modReg= RadioRead(0x6ac);
 80054a2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80054a6:	f000 fd97 	bl	8005fd8 <RadioRead>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80054b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80054bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	4619      	mov	r1, r3
 80054c8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80054cc:	f000 fd72 	bl	8005fb4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80054d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	4a4f      	ldr	r2, [pc, #316]	; (8005620 <RadioSetRxConfig+0x30c>)
 80054e4:	6093      	str	r3, [r2, #8]
            break;
 80054e6:	e118      	b.n	800571a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80054e8:	2000      	movs	r0, #0
 80054ea:	f001 fe3d 	bl	8007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80054ee:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <RadioSetRxConfig+0x30c>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80054f6:	4a4a      	ldr	r2, [pc, #296]	; (8005620 <RadioSetRxConfig+0x30c>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80054fc:	4b48      	ldr	r3, [pc, #288]	; (8005620 <RadioSetRxConfig+0x30c>)
 80054fe:	220b      	movs	r2, #11
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005504:	68b8      	ldr	r0, [r7, #8]
 8005506:	f002 fc2b 	bl	8007d60 <SUBGRF_GetFskBandwidthRegValue>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	4b44      	ldr	r3, [pc, #272]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005514:	4b42      	ldr	r3, [pc, #264]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005516:	2200      	movs	r2, #0
 8005518:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800551a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	b29a      	uxth	r2, r3
 8005520:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005522:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005524:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005526:	2204      	movs	r2, #4
 8005528:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800552a:	4b3d      	ldr	r3, [pc, #244]	; (8005620 <RadioSetRxConfig+0x30c>)
 800552c:	2218      	movs	r2, #24
 800552e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005532:	2200      	movs	r2, #0
 8005534:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005536:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800553a:	f083 0301 	eor.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	4b37      	ldr	r3, [pc, #220]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005544:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <RadioSetRxConfig+0x310>)
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	4b35      	ldr	r3, [pc, #212]	; (8005620 <RadioSetRxConfig+0x30c>)
 800554c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800554e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005556:	4b32      	ldr	r3, [pc, #200]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005558:	22f2      	movs	r2, #242	; 0xf2
 800555a:	75da      	strb	r2, [r3, #23]
 800555c:	e002      	b.n	8005564 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800555e:	4b30      	ldr	r3, [pc, #192]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005560:	2201      	movs	r2, #1
 8005562:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005566:	2201      	movs	r2, #1
 8005568:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800556a:	f000 fc5e 	bl	8005e2a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005570:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe14 	bl	80051ac <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005584:	4828      	ldr	r0, [pc, #160]	; (8005628 <RadioSetRxConfig+0x314>)
 8005586:	f002 f81d 	bl	80075c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800558a:	4828      	ldr	r0, [pc, #160]	; (800562c <RadioSetRxConfig+0x318>)
 800558c:	f002 f8e6 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <RadioSetRxConfig+0x320>)
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800559a:	e883 0003 	stmia.w	r3, {r0, r1}
 800559e:	f107 0314 	add.w	r3, r7, #20
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fc19 	bl	8006dda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80055a8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ac:	f001 fc64 	bl	8006e78 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80055b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <RadioSetRxConfig+0x30c>)
 80055c4:	6093      	str	r3, [r2, #8]
            break;
 80055c6:	e0a8      	b.n	800571a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80055c8:	2000      	movs	r0, #0
 80055ca:	f001 fdcd 	bl	8007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <RadioSetRxConfig+0x30c>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <RadioSetRxConfig+0x30c>)
 80055dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <RadioSetRxConfig+0x324>)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <RadioSetRxConfig+0x30c>)
 80055ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <RadioSetRxConfig+0x30c>)
 80055f0:	7bbb      	ldrb	r3, [r7, #14]
 80055f2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <RadioSetRxConfig+0x2f4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b0b      	cmp	r3, #11
 8005600:	d008      	beq.n	8005614 <RadioSetRxConfig+0x300>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d005      	beq.n	8005614 <RadioSetRxConfig+0x300>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d116      	bne.n	800563c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d113      	bne.n	800563c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <RadioSetRxConfig+0x30c>)
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800561c:	e012      	b.n	8005644 <RadioSetRxConfig+0x330>
 800561e:	bf00      	nop
 8005620:	20000578 	.word	0x20000578
 8005624:	20000009 	.word	0x20000009
 8005628:	200005b0 	.word	0x200005b0
 800562c:	20000586 	.word	0x20000586
 8005630:	0800b6a0 	.word	0x0800b6a0
 8005634:	0800b6a8 	.word	0x0800b6a8
 8005638:	0800bab0 	.word	0x0800bab0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <RadioSetRxConfig+0x410>)
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005644:	4b37      	ldr	r3, [pc, #220]	; (8005724 <RadioSetRxConfig+0x410>)
 8005646:	2201      	movs	r2, #1
 8005648:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <RadioSetRxConfig+0x410>)
 800564c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005650:	2b05      	cmp	r3, #5
 8005652:	d004      	beq.n	800565e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005654:	4b33      	ldr	r3, [pc, #204]	; (8005724 <RadioSetRxConfig+0x410>)
 8005656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800565a:	2b06      	cmp	r3, #6
 800565c:	d10a      	bne.n	8005674 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800565e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005660:	2b0b      	cmp	r3, #11
 8005662:	d803      	bhi.n	800566c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005664:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <RadioSetRxConfig+0x410>)
 8005666:	220c      	movs	r2, #12
 8005668:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800566a:	e006      	b.n	800567a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800566c:	4a2d      	ldr	r2, [pc, #180]	; (8005724 <RadioSetRxConfig+0x410>)
 800566e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005670:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005672:	e002      	b.n	800567a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005674:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <RadioSetRxConfig+0x410>)
 8005676:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005678:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800567a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <RadioSetRxConfig+0x410>)
 8005680:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <RadioSetRxConfig+0x414>)
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <RadioSetRxConfig+0x410>)
 8005688:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800568a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <RadioSetRxConfig+0x410>)
 8005690:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005694:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <RadioSetRxConfig+0x410>)
 800569a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800569e:	f000 fbc4 	bl	8005e2a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <RadioSetRxConfig+0x410>)
 80056a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fd7a 	bl	80051ac <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80056b8:	481c      	ldr	r0, [pc, #112]	; (800572c <RadioSetRxConfig+0x418>)
 80056ba:	f001 ff83 	bl	80075c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056be:	481c      	ldr	r0, [pc, #112]	; (8005730 <RadioSetRxConfig+0x41c>)
 80056c0:	f002 f84c 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80056c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fd5c 	bl	8007186 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80056ce:	4b15      	ldr	r3, [pc, #84]	; (8005724 <RadioSetRxConfig+0x410>)
 80056d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10d      	bne.n	80056f4 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80056d8:	f240 7036 	movw	r0, #1846	; 0x736
 80056dc:	f002 f99a 	bl	8007a14 <SUBGRF_ReadRegister>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f023 0304 	bic.w	r3, r3, #4
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	4619      	mov	r1, r3
 80056ea:	f240 7036 	movw	r0, #1846	; 0x736
 80056ee:	f002 f97d 	bl	80079ec <SUBGRF_WriteRegister>
 80056f2:	e00c      	b.n	800570e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80056f4:	f240 7036 	movw	r0, #1846	; 0x736
 80056f8:	f002 f98c 	bl	8007a14 <SUBGRF_ReadRegister>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	f240 7036 	movw	r0, #1846	; 0x736
 800570a:	f002 f96f 	bl	80079ec <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <RadioSetRxConfig+0x410>)
 8005710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005714:	609a      	str	r2, [r3, #8]
            break;
 8005716:	e000      	b.n	800571a <RadioSetRxConfig+0x406>
            break;
 8005718:	bf00      	nop
    }
}
 800571a:	bf00      	nop
 800571c:	3728      	adds	r7, #40	; 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000578 	.word	0x20000578
 8005728:	20000009 	.word	0x20000009
 800572c:	200005b0 	.word	0x200005b0
 8005730:	20000586 	.word	0x20000586

08005734 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60ba      	str	r2, [r7, #8]
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	4603      	mov	r3, r0
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	460b      	mov	r3, r1
 8005744:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005746:	f002 fbda 	bl	8007efe <RFW_DeInit>
    switch( modem )
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b03      	cmp	r3, #3
 800574e:	f000 80d7 	beq.w	8005900 <RadioSetTxConfig+0x1cc>
 8005752:	2b03      	cmp	r3, #3
 8005754:	f300 80e6 	bgt.w	8005924 <RadioSetTxConfig+0x1f0>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <RadioSetTxConfig+0x2e>
 800575c:	2b01      	cmp	r3, #1
 800575e:	d061      	beq.n	8005824 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005760:	e0e0      	b.n	8005924 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005762:	4b7c      	ldr	r3, [pc, #496]	; (8005954 <RadioSetTxConfig+0x220>)
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800576a:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <RadioSetTxConfig+0x220>)
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <RadioSetTxConfig+0x220>)
 8005772:	220b      	movs	r2, #11
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 faf1 	bl	8007d60 <SUBGRF_GetFskBandwidthRegValue>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	4b74      	ldr	r3, [pc, #464]	; (8005954 <RadioSetTxConfig+0x220>)
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005788:	4a72      	ldr	r2, [pc, #456]	; (8005954 <RadioSetTxConfig+0x220>)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800578e:	4b71      	ldr	r3, [pc, #452]	; (8005954 <RadioSetTxConfig+0x220>)
 8005790:	2200      	movs	r2, #0
 8005792:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	b29a      	uxth	r2, r3
 800579a:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <RadioSetTxConfig+0x220>)
 800579c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800579e:	4b6d      	ldr	r3, [pc, #436]	; (8005954 <RadioSetTxConfig+0x220>)
 80057a0:	2204      	movs	r2, #4
 80057a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80057a4:	4b6b      	ldr	r3, [pc, #428]	; (8005954 <RadioSetTxConfig+0x220>)
 80057a6:	2218      	movs	r2, #24
 80057a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80057aa:	4b6a      	ldr	r3, [pc, #424]	; (8005954 <RadioSetTxConfig+0x220>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80057b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057b4:	f083 0301 	eor.w	r3, r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b65      	ldr	r3, [pc, #404]	; (8005954 <RadioSetTxConfig+0x220>)
 80057be:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80057c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80057c8:	4b62      	ldr	r3, [pc, #392]	; (8005954 <RadioSetTxConfig+0x220>)
 80057ca:	22f2      	movs	r2, #242	; 0xf2
 80057cc:	75da      	strb	r2, [r3, #23]
 80057ce:	e002      	b.n	80057d6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80057d0:	4b60      	ldr	r3, [pc, #384]	; (8005954 <RadioSetTxConfig+0x220>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <RadioSetTxConfig+0x220>)
 80057d8:	2201      	movs	r2, #1
 80057da:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80057dc:	f000 fb25 	bl	8005e2a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80057e0:	4b5c      	ldr	r3, [pc, #368]	; (8005954 <RadioSetTxConfig+0x220>)
 80057e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fcdb 	bl	80051ac <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057f6:	4858      	ldr	r0, [pc, #352]	; (8005958 <RadioSetTxConfig+0x224>)
 80057f8:	f001 fee4 	bl	80075c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057fc:	4857      	ldr	r0, [pc, #348]	; (800595c <RadioSetTxConfig+0x228>)
 80057fe:	f001 ffad 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005802:	4a57      	ldr	r2, [pc, #348]	; (8005960 <RadioSetTxConfig+0x22c>)
 8005804:	f107 0310 	add.w	r3, r7, #16
 8005808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800580c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fae0 	bl	8006dda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800581a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800581e:	f001 fb2b 	bl	8006e78 <SUBGRF_SetWhiteningSeed>
            break;
 8005822:	e080      	b.n	8005926 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005824:	4b4b      	ldr	r3, [pc, #300]	; (8005954 <RadioSetTxConfig+0x220>)
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b48      	ldr	r3, [pc, #288]	; (8005954 <RadioSetTxConfig+0x220>)
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005836:	4a4b      	ldr	r2, [pc, #300]	; (8005964 <RadioSetTxConfig+0x230>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	4b45      	ldr	r3, [pc, #276]	; (8005954 <RadioSetTxConfig+0x220>)
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005844:	4a43      	ldr	r2, [pc, #268]	; (8005954 <RadioSetTxConfig+0x220>)
 8005846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800584a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <RadioSetTxConfig+0x12c>
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d008      	beq.n	800586c <RadioSetTxConfig+0x138>
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	d005      	beq.n	800586c <RadioSetTxConfig+0x138>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	2b0c      	cmp	r3, #12
 800586a:	d104      	bne.n	8005876 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800586c:	4b39      	ldr	r3, [pc, #228]	; (8005954 <RadioSetTxConfig+0x220>)
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005874:	e003      	b.n	800587e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <RadioSetTxConfig+0x220>)
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800587e:	4b35      	ldr	r3, [pc, #212]	; (8005954 <RadioSetTxConfig+0x220>)
 8005880:	2201      	movs	r2, #1
 8005882:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005884:	4b33      	ldr	r3, [pc, #204]	; (8005954 <RadioSetTxConfig+0x220>)
 8005886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588a:	2b05      	cmp	r3, #5
 800588c:	d004      	beq.n	8005898 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <RadioSetTxConfig+0x220>)
 8005890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005894:	2b06      	cmp	r3, #6
 8005896:	d10a      	bne.n	80058ae <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005898:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800589a:	2b0b      	cmp	r3, #11
 800589c:	d803      	bhi.n	80058a6 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800589e:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <RadioSetTxConfig+0x220>)
 80058a0:	220c      	movs	r2, #12
 80058a2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80058a4:	e006      	b.n	80058b4 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80058a6:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <RadioSetTxConfig+0x220>)
 80058a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80058aa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80058ac:	e002      	b.n	80058b4 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80058ae:	4a29      	ldr	r2, [pc, #164]	; (8005954 <RadioSetTxConfig+0x220>)
 80058b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80058b2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80058b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80058b8:	4b26      	ldr	r3, [pc, #152]	; (8005954 <RadioSetTxConfig+0x220>)
 80058ba:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <RadioSetTxConfig+0x234>)
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <RadioSetTxConfig+0x220>)
 80058c2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80058c4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <RadioSetTxConfig+0x220>)
 80058ca:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80058ce:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <RadioSetTxConfig+0x220>)
 80058d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80058d8:	f000 faa7 	bl	8005e2a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <RadioSetTxConfig+0x220>)
 80058de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fc5d 	bl	80051ac <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058f2:	4819      	ldr	r0, [pc, #100]	; (8005958 <RadioSetTxConfig+0x224>)
 80058f4:	f001 fe66 	bl	80075c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80058f8:	4818      	ldr	r0, [pc, #96]	; (800595c <RadioSetTxConfig+0x228>)
 80058fa:	f001 ff2f 	bl	800775c <SUBGRF_SetPacketParams>
            break;
 80058fe:	e012      	b.n	8005926 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005900:	2003      	movs	r0, #3
 8005902:	f7ff fc53 	bl	80051ac <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005906:	4b13      	ldr	r3, [pc, #76]	; (8005954 <RadioSetTxConfig+0x220>)
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800590e:	4a11      	ldr	r2, [pc, #68]	; (8005954 <RadioSetTxConfig+0x220>)
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005914:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <RadioSetTxConfig+0x220>)
 8005916:	2216      	movs	r2, #22
 8005918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800591c:	480e      	ldr	r0, [pc, #56]	; (8005958 <RadioSetTxConfig+0x224>)
 800591e:	f001 fe51 	bl	80075c4 <SUBGRF_SetModulationParams>
            break;
 8005922:	e000      	b.n	8005926 <RadioSetTxConfig+0x1f2>
            break;
 8005924:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800592a:	4618      	mov	r0, r3
 800592c:	f002 f92a 	bl	8007b84 <SUBGRF_SetRfTxPower>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <RadioSetTxConfig+0x220>)
 8005936:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <RadioSetTxConfig+0x220>)
 800593c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005940:	4618      	mov	r0, r3
 8005942:	f002 faf0 	bl	8007f26 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005946:	4a03      	ldr	r2, [pc, #12]	; (8005954 <RadioSetTxConfig+0x220>)
 8005948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594a:	6053      	str	r3, [r2, #4]
}
 800594c:	bf00      	nop
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000578 	.word	0x20000578
 8005958:	200005b0 	.word	0x200005b0
 800595c:	20000586 	.word	0x20000586
 8005960:	0800b6a8 	.word	0x0800b6a8
 8005964:	0800bab0 	.word	0x0800bab0
 8005968:	20000009 	.word	0x20000009

0800596c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    return true;
 8005974:	2301      	movs	r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b0a      	cmp	r3, #10
 8005992:	d83e      	bhi.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <RadioGetLoRaBandwidthInHz+0x1c>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059e9 	.word	0x080059e9
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	08005a07 	.word	0x08005a07
 80059b4:	08005a0d 	.word	0x08005a0d
 80059b8:	08005a13 	.word	0x08005a13
 80059bc:	080059d1 	.word	0x080059d1
 80059c0:	080059e1 	.word	0x080059e1
 80059c4:	080059f1 	.word	0x080059f1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80059c8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80059cc:	60fb      	str	r3, [r7, #12]
        break;
 80059ce:	e020      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80059d0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80059d4:	60fb      	str	r3, [r7, #12]
        break;
 80059d6:	e01c      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80059d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80059dc:	60fb      	str	r3, [r7, #12]
        break;
 80059de:	e018      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80059e0:	f245 1361 	movw	r3, #20833	; 0x5161
 80059e4:	60fb      	str	r3, [r7, #12]
        break;
 80059e6:	e014      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80059e8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80059ec:	60fb      	str	r3, [r7, #12]
        break;
 80059ee:	e010      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80059f0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80059f4:	60fb      	str	r3, [r7, #12]
        break;
 80059f6:	e00c      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80059f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80059fc:	60fb      	str	r3, [r7, #12]
        break;
 80059fe:	e008      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <RadioGetLoRaBandwidthInHz+0xa0>)
 8005a02:	60fb      	str	r3, [r7, #12]
        break;
 8005a04:	e005      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <RadioGetLoRaBandwidthInHz+0xa4>)
 8005a08:	60fb      	str	r3, [r7, #12]
        break;
 8005a0a:	e002      	b.n	8005a12 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <RadioGetLoRaBandwidthInHz+0xa8>)
 8005a0e:	60fb      	str	r3, [r7, #12]
        break;
 8005a10:	bf00      	nop
    }

    return bandwidthInHz;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	0001e848 	.word	0x0001e848
 8005a24:	0003d090 	.word	0x0003d090
 8005a28:	0007a120 	.word	0x0007a120

08005a2c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	70fb      	strb	r3, [r7, #3]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	803b      	strh	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8005a46:	883b      	ldrh	r3, [r7, #0]
 8005a48:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a4a:	78ba      	ldrb	r2, [r7, #2]
 8005a4c:	f082 0201 	eor.w	r2, r2, #1
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d001      	beq.n	8005a5a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8005a56:	2208      	movs	r2, #8
 8005a58:	e000      	b.n	8005a5c <RadioGetGfskTimeOnAirNumerator+0x30>
 8005a5a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005a5c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a5e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005a62:	7c3b      	ldrb	r3, [r7, #16]
 8005a64:	7d39      	ldrb	r1, [r7, #20]
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d001      	beq.n	8005a6e <RadioGetGfskTimeOnAirNumerator+0x42>
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	e000      	b.n	8005a70 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005a6e:	2100      	movs	r1, #0
 8005a70:	440b      	add	r3, r1
 8005a72:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a74:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b08b      	sub	sp, #44	; 0x2c
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	460b      	mov	r3, r1
 8005a90:	71fb      	strb	r3, [r7, #7]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d002      	beq.n	8005aae <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d104      	bne.n	8005ab8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005aae:	88bb      	ldrh	r3, [r7, #4]
 8005ab0:	2b0b      	cmp	r3, #11
 8005ab2:	d801      	bhi.n	8005ab8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b0b      	cmp	r3, #11
 8005ac2:	d008      	beq.n	8005ad6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b0c      	cmp	r3, #12
 8005ac8:	d005      	beq.n	8005ad6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d102      	bne.n	8005adc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005adc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005ae0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005ae2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d001      	beq.n	8005aee <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005aea:	2210      	movs	r2, #16
 8005aec:	e000      	b.n	8005af0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005aee:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005af0:	4413      	add	r3, r2
 8005af2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005af8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005afa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d001      	beq.n	8005b06 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005b02:	2200      	movs	r2, #0
 8005b04:	e000      	b.n	8005b08 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005b06:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005b08:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005b0a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b06      	cmp	r3, #6
 8005b10:	d803      	bhi.n	8005b1a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	623b      	str	r3, [r7, #32]
 8005b18:	e00e      	b.n	8005b38 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3b02      	subs	r3, #2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	623b      	str	r3, [r7, #32]
 8005b30:	e002      	b.n	8005b38 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da01      	bge.n	8005b42 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	4413      	add	r3, r2
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	fb02 f203 	mul.w	r2, r2, r3
 8005b56:	88bb      	ldrh	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
    int32_t intermediate =
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d802      	bhi.n	8005b6a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	3302      	adds	r3, #2
 8005b68:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3b02      	subs	r3, #2
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	372c      	adds	r7, #44	; 0x2c
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
	...

08005b84 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af04      	add	r7, sp, #16
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	4613      	mov	r3, r2
 8005b96:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <RadioTimeOnAir+0x28>
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d017      	beq.n	8005bda <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005baa:	e035      	b.n	8005c18 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005bac:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005bb0:	8c3a      	ldrh	r2, [r7, #32]
 8005bb2:	7bb9      	ldrb	r1, [r7, #14]
 8005bb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff32 	bl	8005a2c <RadioGetGfskTimeOnAirNumerator>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	613b      	str	r3, [r7, #16]
        break;
 8005bd8:	e01e      	b.n	8005c18 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005bda:	8c39      	ldrh	r1, [r7, #32]
 8005bdc:	7bba      	ldrb	r2, [r7, #14]
 8005bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be2:	9302      	str	r3, [sp, #8]
 8005be4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	68b8      	ldr	r0, [r7, #8]
 8005bf6:	f7ff ff43 	bl	8005a80 <RadioGetLoRaTimeOnAirNumerator>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <RadioTimeOnAir+0xac>)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff feb6 	bl	8005980 <RadioGetLoRaBandwidthInHz>
 8005c14:	6138      	str	r0, [r7, #16]
        break;
 8005c16:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800bab0 	.word	0x0800bab0

08005c34 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005c40:	2300      	movs	r3, #0
 8005c42:	2200      	movs	r2, #0
 8005c44:	f240 2101 	movw	r1, #513	; 0x201
 8005c48:	f240 2001 	movw	r0, #513	; 0x201
 8005c4c:	f001 fb90 	bl	8007370 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005c50:	4b69      	ldr	r3, [pc, #420]	; (8005df8 <RadioSend+0x1c4>)
 8005c52:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005c56:	2101      	movs	r1, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 ff6b 	bl	8007b34 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005c5e:	4b66      	ldr	r3, [pc, #408]	; (8005df8 <RadioSend+0x1c4>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d112      	bne.n	8005c8c <RadioSend+0x58>
 8005c66:	4b64      	ldr	r3, [pc, #400]	; (8005df8 <RadioSend+0x1c4>)
 8005c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c6c:	2b06      	cmp	r3, #6
 8005c6e:	d10d      	bne.n	8005c8c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005c70:	f640 0089 	movw	r0, #2185	; 0x889
 8005c74:	f001 fece 	bl	8007a14 <SUBGRF_ReadRegister>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	4619      	mov	r1, r3
 8005c82:	f640 0089 	movw	r0, #2185	; 0x889
 8005c86:	f001 feb1 	bl	80079ec <SUBGRF_WriteRegister>
 8005c8a:	e00c      	b.n	8005ca6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005c8c:	f640 0089 	movw	r0, #2185	; 0x889
 8005c90:	f001 fec0 	bl	8007a14 <SUBGRF_ReadRegister>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f043 0304 	orr.w	r3, r3, #4
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f640 0089 	movw	r0, #2185	; 0x889
 8005ca2:	f001 fea3 	bl	80079ec <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8005ca6:	4b54      	ldr	r3, [pc, #336]	; (8005df8 <RadioSend+0x1c4>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	f200 809e 	bhi.w	8005dec <RadioSend+0x1b8>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <RadioSend+0x84>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005cc9 	.word	0x08005cc9
 8005cc0:	08005d35 	.word	0x08005d35
 8005cc4:	08005d55 	.word	0x08005d55
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005cc8:	4a4b      	ldr	r2, [pc, #300]	; (8005df8 <RadioSend+0x1c4>)
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cce:	484b      	ldr	r0, [pc, #300]	; (8005dfc <RadioSend+0x1c8>)
 8005cd0:	f001 fd44 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f86a 	bl	8006db4 <SUBGRF_SendPayload>
            break;
 8005ce0:	e087      	b.n	8005df2 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005ce2:	f002 f912 	bl	8007f0a <RFW_Is_Init>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d116      	bne.n	8005d1a <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005cec:	f107 020d 	add.w	r2, r7, #13
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 f920 	bl	8007f3a <RFW_TransmitInit>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d177      	bne.n	8005df0 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005d00:	7b7a      	ldrb	r2, [r7, #13]
 8005d02:	4b3d      	ldr	r3, [pc, #244]	; (8005df8 <RadioSend+0x1c4>)
 8005d04:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d06:	483d      	ldr	r0, [pc, #244]	; (8005dfc <RadioSend+0x1c8>)
 8005d08:	f001 fd28 	bl	800775c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005d0c:	7b7b      	ldrb	r3, [r7, #13]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 f84e 	bl	8006db4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005d18:	e06b      	b.n	8005df2 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005d1a:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <RadioSend+0x1c4>)
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d20:	4836      	ldr	r0, [pc, #216]	; (8005dfc <RadioSend+0x1c8>)
 8005d22:	f001 fd1b 	bl	800775c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 f841 	bl	8006db4 <SUBGRF_SendPayload>
            break;
 8005d32:	e05e      	b.n	8005df2 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d34:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <RadioSend+0x1c4>)
 8005d36:	2202      	movs	r2, #2
 8005d38:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005d3a:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <RadioSend+0x1c4>)
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d40:	482e      	ldr	r0, [pc, #184]	; (8005dfc <RadioSend+0x1c8>)
 8005d42:	f001 fd0b 	bl	800775c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 f831 	bl	8006db4 <SUBGRF_SendPayload>
            break;
 8005d52:	e04e      	b.n	8005df2 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4829      	ldr	r0, [pc, #164]	; (8005e00 <RadioSend+0x1cc>)
 8005d5c:	f000 fbb1 	bl	80064c2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <RadioSend+0x1c4>)
 8005d62:	2202      	movs	r2, #2
 8005d64:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <RadioSend+0x1c4>)
 8005d6e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d70:	4822      	ldr	r0, [pc, #136]	; (8005dfc <RadioSend+0x1c8>)
 8005d72:	f001 fcf3 	bl	800775c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005d76:	2100      	movs	r1, #0
 8005d78:	20f1      	movs	r0, #241	; 0xf1
 8005d7a:	f000 f91b 	bl	8005fb4 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005d7e:	2100      	movs	r1, #0
 8005d80:	20f0      	movs	r0, #240	; 0xf0
 8005d82:	f000 f917 	bl	8005fb4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <RadioSend+0x1c4>)
 8005d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d108      	bne.n	8005da0 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005d8e:	2170      	movs	r1, #112	; 0x70
 8005d90:	20f3      	movs	r0, #243	; 0xf3
 8005d92:	f000 f90f 	bl	8005fb4 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8005d96:	211d      	movs	r1, #29
 8005d98:	20f2      	movs	r0, #242	; 0xf2
 8005d9a:	f000 f90b 	bl	8005fb4 <RadioWrite>
 8005d9e:	e007      	b.n	8005db0 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8005da0:	21e1      	movs	r1, #225	; 0xe1
 8005da2:	20f3      	movs	r0, #243	; 0xf3
 8005da4:	f000 f906 	bl	8005fb4 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8005da8:	2104      	movs	r1, #4
 8005daa:	20f2      	movs	r0, #242	; 0xf2
 8005dac:	f000 f902 	bl	8005fb4 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3302      	adds	r3, #2
 8005dba:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	20f4      	movs	r0, #244	; 0xf4
 8005dc8:	f000 f8f4 	bl	8005fb4 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	20f5      	movs	r0, #245	; 0xf5
 8005dd4:	f000 f8ee 	bl	8005fb4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005de2:	4619      	mov	r1, r3
 8005de4:	4806      	ldr	r0, [pc, #24]	; (8005e00 <RadioSend+0x1cc>)
 8005de6:	f000 ffe5 	bl	8006db4 <SUBGRF_SendPayload>
            break;
 8005dea:	e002      	b.n	8005df2 <RadioSend+0x1be>
        }
        default:
            break;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <RadioSend+0x1be>
                return;
 8005df0:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000578 	.word	0x20000578
 8005dfc:	20000586 	.word	0x20000586
 8005e00:	20000340 	.word	0x20000340

08005e04 <RadioSleep>:

static void RadioSleep( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005e0e:	793b      	ldrb	r3, [r7, #4]
 8005e10:	f043 0304 	orr.w	r3, r3, #4
 8005e14:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005e16:	7938      	ldrb	r0, [r7, #4]
 8005e18:	f001 f8a8 	bl	8006f6c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	f7fb fec5 	bl	8001bac <HAL_Delay>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <RadioStandby>:

static void RadioStandby( void )
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f001 f8ce 	bl	8006fd0 <SUBGRF_SetStandby>
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005e40:	f002 f863 	bl	8007f0a <RFW_Is_Init>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005e4a:	f002 f886 	bl	8007f5a <RFW_ReceiveInit>
 8005e4e:	e007      	b.n	8005e60 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	f240 2162 	movw	r1, #610	; 0x262
 8005e58:	f240 2062 	movw	r0, #610	; 0x262
 8005e5c:	f001 fa88 	bl	8007370 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <RadioRx+0x5c>)
 8005e62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fe63 	bl	8007b34 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <RadioRx+0x5c>)
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005e76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005e7a:	f001 f8e5 	bl	8007048 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005e7e:	e005      	b.n	8005e8c <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <RadioRx+0x5c>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f8de 	bl	8007048 <SUBGRF_SetRx>
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000578 	.word	0x20000578

08005e98 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8005ea0:	f002 f833 	bl	8007f0a <RFW_Is_Init>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8005eaa:	f002 f856 	bl	8007f5a <RFW_ReceiveInit>
 8005eae:	e007      	b.n	8005ec0 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f240 2162 	movw	r1, #610	; 0x262
 8005eb8:	f240 2062 	movw	r0, #610	; 0x262
 8005ebc:	f001 fa58 	bl	8007370 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <RadioRxBoosted+0x5c>)
 8005ec2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fe33 	bl	8007b34 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RadioRxBoosted+0x5c>)
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005ed6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005eda:	f001 f8d5 	bl	8007088 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005ede:	e005      	b.n	8005eec <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <RadioRxBoosted+0x5c>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 f8ce 	bl	8007088 <SUBGRF_SetRxBoosted>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000578 	.word	0x20000578

08005ef8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <RadioSetRxDutyCycle+0x28>)
 8005f04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fe12 	bl	8007b34 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 f8dc 	bl	80070d0 <SUBGRF_SetRxDutyCycle>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000578 	.word	0x20000578

08005f24 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <RadioStartCad+0x2c>)
 8005f2a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fdff 	bl	8007b34 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005f3e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005f42:	f001 fa15 	bl	8007370 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005f46:	f001 f8ef 	bl	8007128 <SUBGRF_SetCad>
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000578 	.word	0x20000578

08005f54 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
 8005f60:	4613      	mov	r3, r2
 8005f62:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8005f64:	883b      	ldrh	r3, [r7, #0]
 8005f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fa59 	bl	8007428 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fe02 	bl	8007b84 <SUBGRF_SetRfTxPower>
 8005f80:	4603      	mov	r3, r0
 8005f82:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fdd3 	bl	8007b34 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005f8e:	f001 f8d9 	bl	8007144 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005fa4:	f001 fc8f 	bl	80078c6 <SUBGRF_GetRssiInst>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	b21b      	sxth	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	80fb      	strh	r3, [r7, #6]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8005fc4:	797a      	ldrb	r2, [r7, #5]
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fd0e 	bl	80079ec <SUBGRF_WriteRegister>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fd15 	bl	8007a14 <SUBGRF_ReadRegister>
 8005fea:	4603      	mov	r3, r0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	80fb      	strh	r3, [r7, #6]
 8006000:	4613      	mov	r3, r2
 8006002:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006004:	797b      	ldrb	r3, [r7, #5]
 8006006:	b29a      	uxth	r2, r3
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fd15 	bl	8007a3c <SUBGRF_WriteRegisters>
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	4603      	mov	r3, r0
 8006022:	6039      	str	r1, [r7, #0]
 8006024:	80fb      	strh	r3, [r7, #6]
 8006026:	4613      	mov	r3, r2
 8006028:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800602a:	797b      	ldrb	r3, [r7, #5]
 800602c:	b29a      	uxth	r2, r3
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fd16 	bl	8007a64 <SUBGRF_ReadRegisters>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	460a      	mov	r2, r1
 800604a:	71fb      	strb	r3, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10a      	bne.n	800606c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <RadioSetMaxPayloadLength+0x50>)
 8006058:	79bb      	ldrb	r3, [r7, #6]
 800605a:	7013      	strb	r3, [r2, #0]
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <RadioSetMaxPayloadLength+0x50>)
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <RadioSetMaxPayloadLength+0x54>)
 8006062:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006064:	480c      	ldr	r0, [pc, #48]	; (8006098 <RadioSetMaxPayloadLength+0x58>)
 8006066:	f001 fb79 	bl	800775c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800606a:	e00d      	b.n	8006088 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <RadioSetMaxPayloadLength+0x54>)
 800606e:	7d5b      	ldrb	r3, [r3, #21]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d109      	bne.n	8006088 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006074:	4a06      	ldr	r2, [pc, #24]	; (8006090 <RadioSetMaxPayloadLength+0x50>)
 8006076:	79bb      	ldrb	r3, [r7, #6]
 8006078:	7013      	strb	r3, [r2, #0]
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <RadioSetMaxPayloadLength+0x50>)
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <RadioSetMaxPayloadLength+0x54>)
 8006080:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006082:	4805      	ldr	r0, [pc, #20]	; (8006098 <RadioSetMaxPayloadLength+0x58>)
 8006084:	f001 fb6a 	bl	800775c <SUBGRF_SetPacketParams>
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000009 	.word	0x20000009
 8006094:	20000578 	.word	0x20000578
 8006098:	20000586 	.word	0x20000586

0800609c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <RadioSetPublicNetwork+0x58>)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	7313      	strb	r3, [r2, #12]
 80060ac:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <RadioSetPublicNetwork+0x58>)
 80060ae:	7b1a      	ldrb	r2, [r3, #12]
 80060b0:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <RadioSetPublicNetwork+0x58>)
 80060b2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80060b4:	2001      	movs	r0, #1
 80060b6:	f7ff f879 	bl	80051ac <RadioSetModem>
    if( enable == true )
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80060c0:	2134      	movs	r1, #52	; 0x34
 80060c2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80060c6:	f001 fc91 	bl	80079ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80060ca:	2144      	movs	r1, #68	; 0x44
 80060cc:	f240 7041 	movw	r0, #1857	; 0x741
 80060d0:	f001 fc8c 	bl	80079ec <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80060d4:	e009      	b.n	80060ea <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80060d6:	2114      	movs	r1, #20
 80060d8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80060dc:	f001 fc86 	bl	80079ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80060e0:	2124      	movs	r1, #36	; 0x24
 80060e2:	f240 7041 	movw	r0, #1857	; 0x741
 80060e6:	f001 fc81 	bl	80079ec <SUBGRF_WriteRegister>
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000578 	.word	0x20000578

080060f8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80060fc:	f001 fd76 	bl	8007bec <SUBGRF_GetRadioWakeUpTime>
 8006100:	4603      	mov	r3, r0
 8006102:	3303      	adds	r3, #3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}

08006108 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8006112:	4a05      	ldr	r2, [pc, #20]	; (8006128 <RadioOnDioIrq+0x20>)
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800611a:	f000 f807 	bl	800612c <RadioIrqProcess>
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000578 	.word	0x20000578

0800612c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800612c:	b590      	push	{r4, r7, lr}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800613a:	4bab      	ldr	r3, [pc, #684]	; (80063e8 <RadioIrqProcess+0x2bc>)
 800613c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006144:	f000 8104 	beq.w	8006350 <RadioIrqProcess+0x224>
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	f300 816e 	bgt.w	800642c <RadioIrqProcess+0x300>
 8006150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006154:	f000 80ea 	beq.w	800632c <RadioIrqProcess+0x200>
 8006158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615c:	f300 8166 	bgt.w	800642c <RadioIrqProcess+0x300>
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	f000 80cf 	beq.w	8006304 <RadioIrqProcess+0x1d8>
 8006166:	2b80      	cmp	r3, #128	; 0x80
 8006168:	f300 8160 	bgt.w	800642c <RadioIrqProcess+0x300>
 800616c:	2b20      	cmp	r3, #32
 800616e:	dc49      	bgt.n	8006204 <RadioIrqProcess+0xd8>
 8006170:	2b00      	cmp	r3, #0
 8006172:	f340 815b 	ble.w	800642c <RadioIrqProcess+0x300>
 8006176:	3b01      	subs	r3, #1
 8006178:	2b1f      	cmp	r3, #31
 800617a:	f200 8157 	bhi.w	800642c <RadioIrqProcess+0x300>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <RadioIrqProcess+0x58>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	0800620d 	.word	0x0800620d
 8006188:	08006241 	.word	0x08006241
 800618c:	0800642d 	.word	0x0800642d
 8006190:	0800642d 	.word	0x0800642d
 8006194:	0800642d 	.word	0x0800642d
 8006198:	0800642d 	.word	0x0800642d
 800619c:	0800642d 	.word	0x0800642d
 80061a0:	080063a9 	.word	0x080063a9
 80061a4:	0800642d 	.word	0x0800642d
 80061a8:	0800642d 	.word	0x0800642d
 80061ac:	0800642d 	.word	0x0800642d
 80061b0:	0800642d 	.word	0x0800642d
 80061b4:	0800642d 	.word	0x0800642d
 80061b8:	0800642d 	.word	0x0800642d
 80061bc:	0800642d 	.word	0x0800642d
 80061c0:	0800642d 	.word	0x0800642d
 80061c4:	0800642d 	.word	0x0800642d
 80061c8:	0800642d 	.word	0x0800642d
 80061cc:	0800642d 	.word	0x0800642d
 80061d0:	0800642d 	.word	0x0800642d
 80061d4:	0800642d 	.word	0x0800642d
 80061d8:	0800642d 	.word	0x0800642d
 80061dc:	0800642d 	.word	0x0800642d
 80061e0:	0800642d 	.word	0x0800642d
 80061e4:	0800642d 	.word	0x0800642d
 80061e8:	0800642d 	.word	0x0800642d
 80061ec:	0800642d 	.word	0x0800642d
 80061f0:	0800642d 	.word	0x0800642d
 80061f4:	0800642d 	.word	0x0800642d
 80061f8:	0800642d 	.word	0x0800642d
 80061fc:	0800642d 	.word	0x0800642d
 8006200:	080063b9 	.word	0x080063b9
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	f000 80f9 	beq.w	80063fc <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800620a:	e10f      	b.n	800642c <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 800620c:	2000      	movs	r0, #0
 800620e:	f000 fedf 	bl	8006fd0 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8006212:	f001 fe81 	bl	8007f18 <RFW_Is_LongPacketModeEnabled>
 8006216:	4603      	mov	r3, r0
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 800621c:	f001 fea5 	bl	8007f6a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006220:	4b72      	ldr	r3, [pc, #456]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8103 	beq.w	8006430 <RadioIrqProcess+0x304>
 800622a:	4b70      	ldr	r3, [pc, #448]	; (80063ec <RadioIrqProcess+0x2c0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80fd 	beq.w	8006430 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 8006236:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4798      	blx	r3
        break;
 800623e:	e0f7      	b.n	8006430 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8006240:	4b69      	ldr	r3, [pc, #420]	; (80063e8 <RadioIrqProcess+0x2bc>)
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	f083 0301 	eor.w	r3, r3, #1
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d014      	beq.n	8006278 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 800624e:	2000      	movs	r0, #0
 8006250:	f000 febe 	bl	8006fd0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006254:	2100      	movs	r1, #0
 8006256:	f640 1002 	movw	r0, #2306	; 0x902
 800625a:	f001 fbc7 	bl	80079ec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800625e:	f640 1044 	movw	r0, #2372	; 0x944
 8006262:	f001 fbd7 	bl	8007a14 <SUBGRF_ReadRegister>
 8006266:	4603      	mov	r3, r0
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4619      	mov	r1, r3
 8006270:	f640 1044 	movw	r0, #2372	; 0x944
 8006274:	f001 fbba 	bl	80079ec <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006278:	1dfb      	adds	r3, r7, #7
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	4619      	mov	r1, r3
 800627e:	485c      	ldr	r0, [pc, #368]	; (80063f0 <RadioIrqProcess+0x2c4>)
 8006280:	f000 fd76 	bl	8006d70 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006284:	485b      	ldr	r0, [pc, #364]	; (80063f4 <RadioIrqProcess+0x2c8>)
 8006286:	f001 fb5f 	bl	8007948 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <RadioIrqProcess+0x2c0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d036      	beq.n	8006300 <RadioIrqProcess+0x1d4>
 8006292:	4b56      	ldr	r3, [pc, #344]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d031      	beq.n	8006300 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 800629c:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <RadioIrqProcess+0x2bc>)
 800629e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10e      	bne.n	80062c4 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80062a6:	4b51      	ldr	r3, [pc, #324]	; (80063ec <RadioIrqProcess+0x2c0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689c      	ldr	r4, [r3, #8]
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	b299      	uxth	r1, r3
 80062b0:	4b4d      	ldr	r3, [pc, #308]	; (80063e8 <RadioIrqProcess+0x2bc>)
 80062b2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80062b6:	b21a      	sxth	r2, r3
 80062b8:	4b4b      	ldr	r3, [pc, #300]	; (80063e8 <RadioIrqProcess+0x2bc>)
 80062ba:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80062be:	484c      	ldr	r0, [pc, #304]	; (80063f0 <RadioIrqProcess+0x2c4>)
 80062c0:	47a0      	blx	r4
                break;
 80062c2:	e01e      	b.n	8006302 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80062c4:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <RadioIrqProcess+0x2bc>)
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	463a      	mov	r2, r7
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fd6f 	bl	8007db0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80062d2:	4b46      	ldr	r3, [pc, #280]	; (80063ec <RadioIrqProcess+0x2c0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689c      	ldr	r4, [r3, #8]
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	b299      	uxth	r1, r3
 80062dc:	4b42      	ldr	r3, [pc, #264]	; (80063e8 <RadioIrqProcess+0x2bc>)
 80062de:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80062e2:	b218      	sxth	r0, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80062ea:	4a43      	ldr	r2, [pc, #268]	; (80063f8 <RadioIrqProcess+0x2cc>)
 80062ec:	fb82 c203 	smull	ip, r2, r2, r3
 80062f0:	1192      	asrs	r2, r2, #6
 80062f2:	17db      	asrs	r3, r3, #31
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	4602      	mov	r2, r0
 80062fa:	483d      	ldr	r0, [pc, #244]	; (80063f0 <RadioIrqProcess+0x2c4>)
 80062fc:	47a0      	blx	r4
                break;
 80062fe:	e000      	b.n	8006302 <RadioIrqProcess+0x1d6>
        }
 8006300:	bf00      	nop
        break;
 8006302:	e0a2      	b.n	800644a <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 8006304:	2000      	movs	r0, #0
 8006306:	f000 fe63 	bl	8006fd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <RadioIrqProcess+0x2c0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8090 	beq.w	8006434 <RadioIrqProcess+0x308>
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 808a 	beq.w	8006434 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2000      	movs	r0, #0
 8006328:	4798      	blx	r3
        break;
 800632a:	e083      	b.n	8006434 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 800632c:	2000      	movs	r0, #0
 800632e:	f000 fe4f 	bl	8006fd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006332:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d07e      	beq.n	8006438 <RadioIrqProcess+0x30c>
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <RadioIrqProcess+0x2c0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d079      	beq.n	8006438 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006344:	4b29      	ldr	r3, [pc, #164]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2001      	movs	r0, #1
 800634c:	4798      	blx	r3
        break;
 800634e:	e073      	b.n	8006438 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006350:	f000 fcf4 	bl	8006d3c <SUBGRF_GetOperatingMode>
 8006354:	4603      	mov	r3, r0
 8006356:	2b04      	cmp	r3, #4
 8006358:	d110      	bne.n	800637c <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 800635a:	2000      	movs	r0, #0
 800635c:	f000 fe38 	bl	8006fd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006360:	4b22      	ldr	r3, [pc, #136]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d069      	beq.n	800643c <RadioIrqProcess+0x310>
 8006368:	4b20      	ldr	r3, [pc, #128]	; (80063ec <RadioIrqProcess+0x2c0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d064      	beq.n	800643c <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	4798      	blx	r3
        break;
 800637a:	e05f      	b.n	800643c <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800637c:	f000 fcde 	bl	8006d3c <SUBGRF_GetOperatingMode>
 8006380:	4603      	mov	r3, r0
 8006382:	2b05      	cmp	r3, #5
 8006384:	d15a      	bne.n	800643c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006386:	2000      	movs	r0, #0
 8006388:	f000 fe22 	bl	8006fd0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800638c:	4b17      	ldr	r3, [pc, #92]	; (80063ec <RadioIrqProcess+0x2c0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d053      	beq.n	800643c <RadioIrqProcess+0x310>
 8006394:	4b15      	ldr	r3, [pc, #84]	; (80063ec <RadioIrqProcess+0x2c0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d04e      	beq.n	800643c <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <RadioIrqProcess+0x2c0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4798      	blx	r3
        break;
 80063a6:	e049      	b.n	800643c <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 80063a8:	f001 fdaf 	bl	8007f0a <RFW_Is_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d146      	bne.n	8006440 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 80063b2:	f001 fde0 	bl	8007f76 <RFW_ReceivePayload>
        break;
 80063b6:	e043      	b.n	8006440 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <RadioIrqProcess+0x2bc>)
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	f083 0301 	eor.w	r3, r3, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 80063c6:	2000      	movs	r0, #0
 80063c8:	f000 fe02 	bl	8006fd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <RadioIrqProcess+0x2c0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d037      	beq.n	8006444 <RadioIrqProcess+0x318>
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <RadioIrqProcess+0x2c0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d032      	beq.n	8006444 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <RadioIrqProcess+0x2c0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4798      	blx	r3
        break;
 80063e6:	e02d      	b.n	8006444 <RadioIrqProcess+0x318>
 80063e8:	20000578 	.word	0x20000578
 80063ec:	20000440 	.word	0x20000440
 80063f0:	20000340 	.word	0x20000340
 80063f4:	2000059c 	.word	0x2000059c
 80063f8:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <RadioIrqProcess+0x328>)
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	f083 0301 	eor.w	r3, r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 800640a:	2000      	movs	r0, #0
 800640c:	f000 fde0 	bl	8006fd0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006410:	4b11      	ldr	r3, [pc, #68]	; (8006458 <RadioIrqProcess+0x32c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <RadioIrqProcess+0x31c>
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <RadioIrqProcess+0x32c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d012      	beq.n	8006448 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8006422:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <RadioIrqProcess+0x32c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4798      	blx	r3
        break;
 800642a:	e00d      	b.n	8006448 <RadioIrqProcess+0x31c>
        break;
 800642c:	bf00      	nop
 800642e:	e00c      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006430:	bf00      	nop
 8006432:	e00a      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006434:	bf00      	nop
 8006436:	e008      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006438:	bf00      	nop
 800643a:	e006      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 800643c:	bf00      	nop
 800643e:	e004      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <RadioIrqProcess+0x31e>
        break;
 8006448:	bf00      	nop
  }
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}
 8006452:	bf00      	nop
 8006454:	20000578 	.word	0x20000578
 8006458:	20000440 	.word	0x20000440

0800645c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <RadioTxPrbs+0x2c>)
 8006462:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fb63 	bl	8007b34 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <RadioTxPrbs+0x30>)
 8006470:	212d      	movs	r1, #45	; 0x2d
 8006472:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006476:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8006478:	f000 fe6d 	bl	8007156 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800647c:	4804      	ldr	r0, [pc, #16]	; (8006490 <RadioTxPrbs+0x34>)
 800647e:	f000 fdc3 	bl	8007008 <SUBGRF_SetTx>
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000578 	.word	0x20000578
 800648c:	08005fb5 	.word	0x08005fb5
 8006490:	000fffff 	.word	0x000fffff

08006494 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800649e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fb6e 	bl	8007b84 <SUBGRF_SetRfTxPower>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fb3f 	bl	8007b34 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80064b6:	f000 fe45 	bl	8007144 <SUBGRF_SetTxContinuousWave>
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80064c2:	b480      	push	{r7}
 80064c4:	b089      	sub	sp, #36	; 0x24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	4613      	mov	r3, r2
 80064ce:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80064d8:	2300      	movs	r3, #0
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e011      	b.n	8006502 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4413      	add	r3, r2
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	440b      	add	r3, r1
 80064ec:	43d2      	mvns	r2, r2
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	3301      	adds	r3, #1
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	429a      	cmp	r2, r3
 8006508:	dbe9      	blt.n	80064de <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e049      	b.n	80065a4 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	425a      	negs	r2, r3
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	f002 0207 	and.w	r2, r2, #7
 800651c:	bf58      	it	pl
 800651e:	4253      	negpl	r3, r2
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f1c3 0307 	rsb	r3, r3, #7
 8006526:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da00      	bge.n	8006530 <payload_integration+0x6e>
 800652e:	3307      	adds	r3, #7
 8006530:	10db      	asrs	r3, r3, #3
 8006532:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	3301      	adds	r3, #1
 8006538:	425a      	negs	r2, r3
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	f002 0207 	and.w	r2, r2, #7
 8006542:	bf58      	it	pl
 8006544:	4253      	negpl	r3, r2
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f1c3 0307 	rsb	r3, r3, #7
 800654c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	3301      	adds	r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	da00      	bge.n	8006558 <payload_integration+0x96>
 8006556:	3307      	adds	r3, #7
 8006558:	10db      	asrs	r3, r3, #3
 800655a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4413      	add	r3, r2
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	7dfb      	ldrb	r3, [r7, #23]
 8006568:	fa42 f303 	asr.w	r3, r2, r3
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006574:	7ffa      	ldrb	r2, [r7, #31]
 8006576:	7cfb      	ldrb	r3, [r7, #19]
 8006578:	4053      	eors	r3, r2
 800657a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800657c:	7d3b      	ldrb	r3, [r7, #20]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b25a      	sxtb	r2, r3
 8006586:	7ff9      	ldrb	r1, [r7, #31]
 8006588:	7d7b      	ldrb	r3, [r7, #21]
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	b25b      	sxtb	r3, r3
 8006590:	4313      	orrs	r3, r2
 8006592:	b259      	sxtb	r1, r3
 8006594:	7d3b      	ldrb	r3, [r7, #20]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	b2ca      	uxtb	r2, r1
 800659c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	3301      	adds	r3, #1
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	dbb0      	blt.n	8006510 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
 80065b0:	01db      	lsls	r3, r3, #7
 80065b2:	b25a      	sxtb	r2, r3
 80065b4:	7ffb      	ldrb	r3, [r7, #31]
 80065b6:	019b      	lsls	r3, r3, #6
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	4313      	orrs	r3, r2
 80065bc:	b25b      	sxtb	r3, r3
 80065be:	7ffa      	ldrb	r2, [r7, #31]
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d101      	bne.n	80065c8 <payload_integration+0x106>
 80065c4:	2220      	movs	r2, #32
 80065c6:	e000      	b.n	80065ca <payload_integration+0x108>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4313      	orrs	r3, r2
 80065cc:	b259      	sxtb	r1, r3
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	b2ca      	uxtb	r2, r1
 80065d6:	701a      	strb	r2, [r3, #0]
}
 80065d8:	bf00      	nop
 80065da:	3724      	adds	r7, #36	; 0x24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
	...

080065e4 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80065f8:	2300      	movs	r3, #0
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	2300      	movs	r3, #0
 80065fe:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006600:	f001 fc7d 	bl	8007efe <RFW_DeInit>

    if( rxContinuous != 0 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4ba9      	ldr	r3, [pc, #676]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 800661c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <RadioSetRxGenericConfig+0x48>
 8006624:	2b01      	cmp	r3, #1
 8006626:	f000 80e8 	beq.w	80067fa <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800662a:	e1a0      	b.n	800696e <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <RadioSetRxGenericConfig+0x58>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800663c:	f04f 33ff 	mov.w	r3, #4294967295
 8006640:	e196      	b.n	8006970 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	7d5b      	ldrb	r3, [r3, #21]
 8006646:	2b08      	cmp	r3, #8
 8006648:	d902      	bls.n	8006650 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	e18f      	b.n	8006970 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006650:	2300      	movs	r3, #0
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
 8006654:	e00d      	b.n	8006672 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	4413      	add	r3, r2
 800665e:	7819      	ldrb	r1, [r3, #0]
 8006660:	f107 021c 	add.w	r2, r7, #28
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	4413      	add	r3, r2
 8006668:	460a      	mov	r2, r1
 800666a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	3301      	adds	r3, #1
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	7d5b      	ldrb	r3, [r3, #21]
 8006676:	461a      	mov	r2, r3
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	4293      	cmp	r3, r2
 800667c:	dbeb      	blt.n	8006656 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fd6b 	bl	8007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006692:	4b8b      	ldr	r3, [pc, #556]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	4a88      	ldr	r2, [pc, #544]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066a0:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	791a      	ldrb	r2, [r3, #4]
 80066a6:	4b86      	ldr	r3, [pc, #536]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fb55 	bl	8007d60 <SUBGRF_GetFskBandwidthRegValue>
 80066b6:	4603      	mov	r3, r0
 80066b8:	461a      	mov	r2, r3
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80066c0:	4b7f      	ldr	r3, [pc, #508]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066d2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	7d1a      	ldrb	r2, [r3, #20]
 80066d8:	4b79      	ldr	r3, [pc, #484]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066da:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	7d5b      	ldrb	r3, [r3, #21]
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b76      	ldr	r3, [pc, #472]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066e6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80066ee:	4b74      	ldr	r3, [pc, #464]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80066f0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4b6f      	ldr	r3, [pc, #444]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006704:	759a      	strb	r2, [r3, #22]
 8006706:	e00b      	b.n	8006720 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800670e:	2b02      	cmp	r3, #2
 8006710:	d103      	bne.n	800671a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006712:	4b6b      	ldr	r3, [pc, #428]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	759a      	strb	r2, [r3, #22]
 8006718:	e002      	b.n	8006720 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800671a:	4b69      	ldr	r3, [pc, #420]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 800671c:	22ff      	movs	r2, #255	; 0xff
 800671e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006726:	2b02      	cmp	r3, #2
 8006728:	d004      	beq.n	8006734 <RadioSetRxGenericConfig+0x150>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006730:	2b02      	cmp	r3, #2
 8006732:	d12d      	bne.n	8006790 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800673a:	2bf1      	cmp	r3, #241	; 0xf1
 800673c:	d00c      	beq.n	8006758 <RadioSetRxGenericConfig+0x174>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006744:	2bf2      	cmp	r3, #242	; 0xf2
 8006746:	d007      	beq.n	8006758 <RadioSetRxGenericConfig+0x174>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800674e:	2b01      	cmp	r3, #1
 8006750:	d002      	beq.n	8006758 <RadioSetRxGenericConfig+0x174>
            return -1;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e10b      	b.n	8006970 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8006758:	2300      	movs	r3, #0
 800675a:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006760:	4b58      	ldr	r3, [pc, #352]	; (80068c4 <RadioSetRxGenericConfig+0x2e0>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	4a57      	ldr	r2, [pc, #348]	; (80068c8 <RadioSetRxGenericConfig+0x2e4>)
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fbba 	bl	8007ee4 <RFW_Init>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <RadioSetRxGenericConfig+0x198>
            return -1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e0f9      	b.n	8006970 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 800677e:	2200      	movs	r2, #0
 8006780:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006782:	4b4f      	ldr	r3, [pc, #316]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006784:	2201      	movs	r2, #1
 8006786:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 800678a:	2200      	movs	r2, #0
 800678c:	755a      	strb	r2, [r3, #21]
        {
 800678e:	e00e      	b.n	80067ae <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006796:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006798:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80067a0:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80067a2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80067aa:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80067ac:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80067ae:	f7ff fb3c 	bl	8005e2a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80067b2:	2000      	movs	r0, #0
 80067b4:	f7fe fcfa 	bl	80051ac <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80067b8:	4844      	ldr	r0, [pc, #272]	; (80068cc <RadioSetRxGenericConfig+0x2e8>)
 80067ba:	f000 ff03 	bl	80075c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80067be:	4844      	ldr	r0, [pc, #272]	; (80068d0 <RadioSetRxGenericConfig+0x2ec>)
 80067c0:	f000 ffcc 	bl	800775c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80067c4:	f107 031c 	add.w	r3, r7, #28
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fb06 	bl	8006dda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	8c1b      	ldrh	r3, [r3, #32]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fb50 	bl	8006e78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fb2b 	bl	8006e38 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80067e8:	fb02 f203 	mul.w	r2, r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	4a32      	ldr	r2, [pc, #200]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80067f6:	6093      	str	r3, [r2, #8]
        break;
 80067f8:	e0b9      	b.n	800696e <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <RadioSetRxGenericConfig+0x224>
            return -1;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295
 8006806:	e0b3      	b.n	8006970 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800680e:	2b01      	cmp	r3, #1
 8006810:	d104      	bne.n	800681c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800681a:	e002      	b.n	8006822 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800681c:	23ff      	movs	r3, #255	; 0xff
 800681e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf14      	ite	ne
 800682a:	2301      	movne	r3, #1
 800682c:	2300      	moveq	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fc99 	bl	8007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fca3 	bl	8007186 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006840:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800685a:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006868:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006872:	2b02      	cmp	r3, #2
 8006874:	d010      	beq.n	8006898 <RadioSetRxGenericConfig+0x2b4>
 8006876:	2b02      	cmp	r3, #2
 8006878:	dc2c      	bgt.n	80068d4 <RadioSetRxGenericConfig+0x2f0>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <RadioSetRxGenericConfig+0x2a0>
 800687e:	2b01      	cmp	r3, #1
 8006880:	d005      	beq.n	800688e <RadioSetRxGenericConfig+0x2aa>
            break;
 8006882:	e027      	b.n	80068d4 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006884:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800688c:	e023      	b.n	80068d6 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006896:	e01e      	b.n	80068d6 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800689e:	2b0b      	cmp	r3, #11
 80068a0:	d004      	beq.n	80068ac <RadioSetRxGenericConfig+0x2c8>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d104      	bne.n	80068b6 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80068b4:	e00f      	b.n	80068d6 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80068b6:	4b02      	ldr	r3, [pc, #8]	; (80068c0 <RadioSetRxGenericConfig+0x2dc>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80068be:	e00a      	b.n	80068d6 <RadioSetRxGenericConfig+0x2f2>
 80068c0:	20000578 	.word	0x20000578
 80068c4:	20000440 	.word	0x20000440
 80068c8:	200005d1 	.word	0x200005d1
 80068cc:	200005b0 	.word	0x200005b0
 80068d0:	20000586 	.word	0x20000586
            break;
 80068d4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80068d6:	4b28      	ldr	r3, [pc, #160]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 80068d8:	2201      	movs	r2, #1
 80068da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 80068e2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 80068ec:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80068ee:	4a22      	ldr	r2, [pc, #136]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 80068f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 800690a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800690e:	f7ff fa8c 	bl	8005e2a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006912:	2001      	movs	r0, #1
 8006914:	f7fe fc4a 	bl	80051ac <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006918:	4818      	ldr	r0, [pc, #96]	; (800697c <RadioSetRxGenericConfig+0x398>)
 800691a:	f000 fe53 	bl	80075c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800691e:	4818      	ldr	r0, [pc, #96]	; (8006980 <RadioSetRxGenericConfig+0x39c>)
 8006920:	f000 ff1c 	bl	800775c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 8006926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10d      	bne.n	800694a <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800692e:	f240 7036 	movw	r0, #1846	; 0x736
 8006932:	f001 f86f 	bl	8007a14 <SUBGRF_ReadRegister>
 8006936:	4603      	mov	r3, r0
 8006938:	f023 0304 	bic.w	r3, r3, #4
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	f240 7036 	movw	r0, #1846	; 0x736
 8006944:	f001 f852 	bl	80079ec <SUBGRF_WriteRegister>
 8006948:	e00c      	b.n	8006964 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800694a:	f240 7036 	movw	r0, #1846	; 0x736
 800694e:	f001 f861 	bl	8007a14 <SUBGRF_ReadRegister>
 8006952:	4603      	mov	r3, r0
 8006954:	f043 0304 	orr.w	r3, r3, #4
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	f240 7036 	movw	r0, #1846	; 0x736
 8006960:	f001 f844 	bl	80079ec <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <RadioSetRxGenericConfig+0x394>)
 8006966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800696a:	609a      	str	r2, [r3, #8]
        break;
 800696c:	bf00      	nop
    }
    return status;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006970:	4618      	mov	r0, r3
 8006972:	3730      	adds	r7, #48	; 0x30
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000578 	.word	0x20000578
 800697c:	200005b0 	.word	0x200005b0
 8006980:	20000586 	.word	0x20000586

08006984 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607b      	str	r3, [r7, #4]
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	4613      	mov	r3, r2
 8006994:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	2300      	movs	r3, #0
 800699c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800699e:	f001 faae 	bl	8007efe <RFW_DeInit>
    switch( modem )
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	f000 8144 	beq.w	8006c32 <RadioSetTxGenericConfig+0x2ae>
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	f300 8160 	bgt.w	8006c70 <RadioSetTxGenericConfig+0x2ec>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <RadioSetTxGenericConfig+0x38>
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f000 80b7 	beq.w	8006b28 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80069ba:	e159      	b.n	8006c70 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <RadioSetTxGenericConfig+0x48>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <RadioSetTxGenericConfig+0x4e>
            return -1;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	e163      	b.n	8006c9a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	7d1b      	ldrb	r3, [r3, #20]
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d902      	bls.n	80069e0 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	e15c      	b.n	8006c9a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
 80069e4:	e00d      	b.n	8006a02 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	4413      	add	r3, r2
 80069ee:	7819      	ldrb	r1, [r3, #0]
 80069f0:	f107 021c 	add.w	r2, r7, #28
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	4413      	add	r3, r2
 80069f8:	460a      	mov	r2, r1
 80069fa:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	7d1b      	ldrb	r3, [r3, #20]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	dbeb      	blt.n	80069e6 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006a0e:	4ba5      	ldr	r3, [pc, #660]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4aa2      	ldr	r2, [pc, #648]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a1c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	4ba0      	ldr	r3, [pc, #640]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f997 	bl	8007d60 <SUBGRF_GetFskBandwidthRegValue>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b9b      	ldr	r3, [pc, #620]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a98      	ldr	r2, [pc, #608]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a42:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006a44:	4b97      	ldr	r3, [pc, #604]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	4b93      	ldr	r3, [pc, #588]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a56:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006a58:	4b92      	ldr	r3, [pc, #584]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7d1b      	ldrb	r3, [r3, #20]
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b8f      	ldr	r3, [pc, #572]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a68:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006a6a:	4b8e      	ldr	r3, [pc, #568]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d003      	beq.n	8006a82 <RadioSetTxGenericConfig+0xfe>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7f9b      	ldrb	r3, [r3, #30]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d12a      	bne.n	8006ad8 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7fdb      	ldrb	r3, [r3, #31]
 8006a86:	2bf1      	cmp	r3, #241	; 0xf1
 8006a88:	d00a      	beq.n	8006aa0 <RadioSetTxGenericConfig+0x11c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7fdb      	ldrb	r3, [r3, #31]
 8006a8e:	2bf2      	cmp	r3, #242	; 0xf2
 8006a90:	d006      	beq.n	8006aa0 <RadioSetTxGenericConfig+0x11c>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	7fdb      	ldrb	r3, [r3, #31]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d002      	beq.n	8006aa0 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	e0fc      	b.n	8006c9a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006aa8:	4b7f      	ldr	r3, [pc, #508]	; (8006ca8 <RadioSetTxGenericConfig+0x324>)
 8006aaa:	6819      	ldr	r1, [r3, #0]
 8006aac:	f107 0310 	add.w	r3, r7, #16
 8006ab0:	4a7e      	ldr	r2, [pc, #504]	; (8006cac <RadioSetTxGenericConfig+0x328>)
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fa16 	bl	8007ee4 <RFW_Init>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <RadioSetTxGenericConfig+0x140>
              return -1;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	e0ea      	b.n	8006c9a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006ac4:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006aca:	4b76      	ldr	r3, [pc, #472]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006ad0:	4b74      	ldr	r3, [pc, #464]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	755a      	strb	r2, [r3, #21]
        {
 8006ad6:	e00c      	b.n	8006af2 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	7fda      	ldrb	r2, [r3, #31]
 8006adc:	4b71      	ldr	r3, [pc, #452]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006ade:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006ae6:	4b6f      	ldr	r3, [pc, #444]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006ae8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	7f9a      	ldrb	r2, [r3, #30]
 8006aee:	4b6d      	ldr	r3, [pc, #436]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006af0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006af2:	f7ff f99a 	bl	8005e2a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7fe fb58 	bl	80051ac <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006afc:	486c      	ldr	r0, [pc, #432]	; (8006cb0 <RadioSetTxGenericConfig+0x32c>)
 8006afe:	f000 fd61 	bl	80075c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b02:	486c      	ldr	r0, [pc, #432]	; (8006cb4 <RadioSetTxGenericConfig+0x330>)
 8006b04:	f000 fe2a 	bl	800775c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006b08:	f107 031c 	add.w	r3, r7, #28
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f964 	bl	8006dda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	8b9b      	ldrh	r3, [r3, #28]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f9ae 	bl	8006e78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	8c1b      	ldrh	r3, [r3, #32]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f989 	bl	8006e38 <SUBGRF_SetCrcPolynomial>
        break;
 8006b26:	e0a4      	b.n	8006c72 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006b28:	4b5e      	ldr	r3, [pc, #376]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006b36:	4b5b      	ldr	r3, [pc, #364]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006b42:	4b58      	ldr	r3, [pc, #352]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006b4e:	4b55      	ldr	r3, [pc, #340]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d010      	beq.n	8006b80 <RadioSetTxGenericConfig+0x1fc>
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	dc22      	bgt.n	8006ba8 <RadioSetTxGenericConfig+0x224>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <RadioSetTxGenericConfig+0x1e8>
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d005      	beq.n	8006b76 <RadioSetTxGenericConfig+0x1f2>
            break;
 8006b6a:	e01d      	b.n	8006ba8 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006b6c:	4b4d      	ldr	r3, [pc, #308]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b74:	e019      	b.n	8006baa <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006b76:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b7e:	e014      	b.n	8006baa <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b86:	2b0b      	cmp	r3, #11
 8006b88:	d004      	beq.n	8006b94 <RadioSetTxGenericConfig+0x210>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b90:	2b0c      	cmp	r3, #12
 8006b92:	d104      	bne.n	8006b9e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006b94:	4b43      	ldr	r3, [pc, #268]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b9c:	e005      	b.n	8006baa <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006b9e:	4b41      	ldr	r3, [pc, #260]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006ba6:	e000      	b.n	8006baa <RadioSetTxGenericConfig+0x226>
            break;
 8006ba8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006baa:	4b3e      	ldr	r3, [pc, #248]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bb6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006bbe:	4b39      	ldr	r3, [pc, #228]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bc0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006bc8:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bca:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006bd4:	4b33      	ldr	r3, [pc, #204]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006bda:	f7ff f926 	bl	8005e2a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006bde:	2001      	movs	r0, #1
 8006be0:	f7fe fae4 	bl	80051ac <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006be4:	4832      	ldr	r0, [pc, #200]	; (8006cb0 <RadioSetTxGenericConfig+0x32c>)
 8006be6:	f000 fced 	bl	80075c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bea:	4832      	ldr	r0, [pc, #200]	; (8006cb4 <RadioSetTxGenericConfig+0x330>)
 8006bec:	f000 fdb6 	bl	800775c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006bf0:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d10d      	bne.n	8006c16 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006bfa:	f640 0089 	movw	r0, #2185	; 0x889
 8006bfe:	f000 ff09 	bl	8007a14 <SUBGRF_ReadRegister>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f023 0304 	bic.w	r3, r3, #4
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f640 0089 	movw	r0, #2185	; 0x889
 8006c10:	f000 feec 	bl	80079ec <SUBGRF_WriteRegister>
        break;
 8006c14:	e02d      	b.n	8006c72 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006c16:	f640 0089 	movw	r0, #2185	; 0x889
 8006c1a:	f000 fefb 	bl	8007a14 <SUBGRF_ReadRegister>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f043 0304 	orr.w	r3, r3, #4
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	4619      	mov	r1, r3
 8006c28:	f640 0089 	movw	r0, #2185	; 0x889
 8006c2c:	f000 fede 	bl	80079ec <SUBGRF_WriteRegister>
        break;
 8006c30:	e01f      	b.n	8006c72 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <RadioSetTxGenericConfig+0x2c0>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c42:	d902      	bls.n	8006c4a <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	e027      	b.n	8006c9a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006c4a:	2002      	movs	r0, #2
 8006c4c:	f7fe faae 	bl	80051ac <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006c50:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	4a11      	ldr	r2, [pc, #68]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c5e:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c62:	2216      	movs	r2, #22
 8006c64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c68:	4811      	ldr	r0, [pc, #68]	; (8006cb0 <RadioSetTxGenericConfig+0x32c>)
 8006c6a:	f000 fcab 	bl	80075c4 <SUBGRF_SetModulationParams>
        break;
 8006c6e:	e000      	b.n	8006c72 <RadioSetTxGenericConfig+0x2ee>
        break;
 8006c70:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 ff84 	bl	8007b84 <SUBGRF_SetRfTxPower>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c82:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f94a 	bl	8007f26 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006c92:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <RadioSetTxGenericConfig+0x320>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6053      	str	r3, [r2, #4]
    return 0;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3728      	adds	r7, #40	; 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000578 	.word	0x20000578
 8006ca8:	20000440 	.word	0x20000440
 8006cac:	200005d0 	.word	0x200005d0
 8006cb0:	200005b0 	.word	0x200005b0
 8006cb4:	20000586 	.word	0x20000586

08006cb8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006cc6:	4a1a      	ldr	r2, [pc, #104]	; (8006d30 <SUBGRF_Init+0x78>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006ccc:	f7fa fc12 	bl	80014f4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006cd0:	2002      	movs	r0, #2
 8006cd2:	f001 f823 	bl	8007d1c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006cd6:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <SUBGRF_Init+0x7c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f000 f977 	bl	8006fd0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006ce2:	f7fa fadd 	bl	80012a0 <RBI_IsTCXO>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10e      	bne.n	8006d0a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f000 fb78 	bl	80073e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f640 1011 	movw	r0, #2321	; 0x911
 8006cfa:	f000 fe77 	bl	80079ec <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006cfe:	237f      	movs	r3, #127	; 0x7f
 8006d00:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006d02:	7b38      	ldrb	r0, [r7, #12]
 8006d04:	f000 fa85 	bl	8007212 <SUBGRF_Calibrate>
 8006d08:	e009      	b.n	8006d1e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006d0a:	2120      	movs	r1, #32
 8006d0c:	f640 1011 	movw	r0, #2321	; 0x911
 8006d10:	f000 fe6c 	bl	80079ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006d14:	2120      	movs	r1, #32
 8006d16:	f640 1012 	movw	r0, #2322	; 0x912
 8006d1a:	f000 fe67 	bl	80079ec <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006d1e:	f7fa faa3 	bl	8001268 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <SUBGRF_Init+0x80>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000450 	.word	0x20000450
 8006d34:	2000044c 	.word	0x2000044c
 8006d38:	20000444 	.word	0x20000444

08006d3c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <SUBGRF_GetOperatingMode+0x10>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr
 8006d4c:	20000444 	.word	0x20000444

08006d50 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	2000      	movs	r0, #0
 8006d64:	f000 fe92 	bl	8007a8c <SUBGRF_WriteBuffer>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8006d82:	f107 0317 	add.w	r3, r7, #23
 8006d86:	4619      	mov	r1, r3
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f000 fdb1 	bl	80078f0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	79fa      	ldrb	r2, [r7, #7]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d201      	bcs.n	8006d9c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e007      	b.n	8006dac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006d9c:	7df8      	ldrb	r0, [r7, #23]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	f000 fe87 	bl	8007ab8 <SUBGRF_ReadBuffer>

    return 0;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ffc2 	bl	8006d50 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f91b 	bl	8007008 <SUBGRF_SetTx>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006de2:	2208      	movs	r2, #8
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006dea:	f000 fe27 	bl	8007a3c <SUBGRF_WriteRegisters>
    return 0;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006e12:	f000 fb67 	bl	80074e4 <SUBGRF_GetPacketType>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006e1c:	f107 030c 	add.w	r3, r7, #12
 8006e20:	2202      	movs	r2, #2
 8006e22:	4619      	mov	r1, r3
 8006e24:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006e28:	f000 fe08 	bl	8007a3c <SUBGRF_WriteRegisters>
            break;
 8006e2c:	e000      	b.n	8006e30 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006e2e:	bf00      	nop
    }
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006e52:	f000 fb47 	bl	80074e4 <SUBGRF_GetPacketType>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d108      	bne.n	8006e6e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	2202      	movs	r2, #2
 8006e62:	4619      	mov	r1, r3
 8006e64:	f240 60be 	movw	r0, #1726	; 0x6be
 8006e68:	f000 fde8 	bl	8007a3c <SUBGRF_WriteRegisters>
            break;
 8006e6c:	e000      	b.n	8006e70 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006e6e:	bf00      	nop
    }
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8006e86:	f000 fb2d 	bl	80074e4 <SUBGRF_GetPacketType>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d121      	bne.n	8006ed4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006e90:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006e94:	f000 fdbe 	bl	8007a14 <SUBGRF_ReadRegister>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	b25b      	sxtb	r3, r3
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	b25a      	sxtb	r2, r3
 8006eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006ec0:	f000 fd94 	bl	80079ec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8006ece:	f000 fd8d 	bl	80079ec <SUBGRF_WriteRegister>
            break;
 8006ed2:	e000      	b.n	8006ed6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8006ed4:	bf00      	nop
    }
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006ef0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006ef4:	f000 fd8e 	bl	8007a14 <SUBGRF_ReadRegister>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006f0a:	f000 fd6f 	bl	80079ec <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006f0e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006f12:	f000 fd7f 	bl	8007a14 <SUBGRF_ReadRegister>
 8006f16:	4603      	mov	r3, r0
 8006f18:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006f1a:	79bb      	ldrb	r3, [r7, #6]
 8006f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	4619      	mov	r1, r3
 8006f24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006f28:	f000 fd60 	bl	80079ec <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006f2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006f30:	f000 f88a 	bl	8007048 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006f34:	463b      	mov	r3, r7
 8006f36:	2204      	movs	r2, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f640 0019 	movw	r0, #2073	; 0x819
 8006f3e:	f000 fd91 	bl	8007a64 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8006f42:	2000      	movs	r0, #0
 8006f44:	f000 f844 	bl	8006fd0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006f50:	f000 fd4c 	bl	80079ec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006f54:	79bb      	ldrb	r3, [r7, #6]
 8006f56:	4619      	mov	r1, r3
 8006f58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006f5c:	f000 fd46 	bl	80079ec <SUBGRF_WriteRegister>

    return number;
 8006f60:	683b      	ldr	r3, [r7, #0]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006f74:	2000      	movs	r0, #0
 8006f76:	f7fa f97e 	bl	8001276 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006f7a:	2002      	movs	r0, #2
 8006f7c:	f000 fece 	bl	8007d1c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006f80:	793b      	ldrb	r3, [r7, #4]
 8006f82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006f8c:	793b      	ldrb	r3, [r7, #4]
 8006f8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006f9c:	793b      	ldrb	r3, [r7, #4]
 8006f9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006fac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006fae:	f107 030f 	add.w	r3, r7, #15
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	2084      	movs	r0, #132	; 0x84
 8006fb8:	f000 fd94 	bl	8007ae4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <SUBGRF_SetSleep+0x60>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000444 	.word	0x20000444

08006fd0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006fda:	1dfb      	adds	r3, r7, #7
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4619      	mov	r1, r3
 8006fe0:	2080      	movs	r0, #128	; 0x80
 8006fe2:	f000 fd7f 	bl	8007ae4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <SUBGRF_SetStandby+0x34>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006ff2:	e002      	b.n	8006ffa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006ff4:	4b03      	ldr	r3, [pc, #12]	; (8007004 <SUBGRF_SetStandby+0x34>)
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000444 	.word	0x20000444

08007008 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <SUBGRF_SetTx+0x3c>)
 8007012:	2204      	movs	r2, #4
 8007014:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	b2db      	uxtb	r3, r3
 800701c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	b2db      	uxtb	r3, r3
 8007024:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	2203      	movs	r2, #3
 8007032:	4619      	mov	r1, r3
 8007034:	2083      	movs	r0, #131	; 0x83
 8007036:	f000 fd55 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000444 	.word	0x20000444

08007048 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <SUBGRF_SetRx+0x3c>)
 8007052:	2205      	movs	r2, #5
 8007054:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0c1b      	lsrs	r3, r3, #16
 800705a:	b2db      	uxtb	r3, r3
 800705c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	0a1b      	lsrs	r3, r3, #8
 8007062:	b2db      	uxtb	r3, r3
 8007064:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800706c:	f107 030c 	add.w	r3, r7, #12
 8007070:	2203      	movs	r2, #3
 8007072:	4619      	mov	r1, r3
 8007074:	2082      	movs	r0, #130	; 0x82
 8007076:	f000 fd35 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000444 	.word	0x20000444

08007088 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <SUBGRF_SetRxBoosted+0x44>)
 8007092:	2205      	movs	r2, #5
 8007094:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8007096:	2197      	movs	r1, #151	; 0x97
 8007098:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800709c:	f000 fca6 	bl	80079ec <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0c1b      	lsrs	r3, r3, #16
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	2203      	movs	r2, #3
 80070bc:	4619      	mov	r1, r3
 80070be:	2082      	movs	r0, #130	; 0x82
 80070c0:	f000 fd10 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000444 	.word	0x20000444

080070d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	2206      	movs	r2, #6
 800710c:	4619      	mov	r1, r3
 800710e:	2094      	movs	r0, #148	; 0x94
 8007110:	f000 fce8 	bl	8007ae4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8007114:	4b03      	ldr	r3, [pc, #12]	; (8007124 <SUBGRF_SetRxDutyCycle+0x54>)
 8007116:	2206      	movs	r2, #6
 8007118:	701a      	strb	r2, [r3, #0]
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000444 	.word	0x20000444

08007128 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800712c:	2200      	movs	r2, #0
 800712e:	2100      	movs	r1, #0
 8007130:	20c5      	movs	r0, #197	; 0xc5
 8007132:	f000 fcd7 	bl	8007ae4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8007136:	4b02      	ldr	r3, [pc, #8]	; (8007140 <SUBGRF_SetCad+0x18>)
 8007138:	2207      	movs	r2, #7
 800713a:	701a      	strb	r2, [r3, #0]
}
 800713c:	bf00      	nop
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000444 	.word	0x20000444

08007144 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8007148:	2200      	movs	r2, #0
 800714a:	2100      	movs	r1, #0
 800714c:	20d1      	movs	r0, #209	; 0xd1
 800714e:	f000 fcc9 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}

08007156 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8007156:	b580      	push	{r7, lr}
 8007158:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	20d2      	movs	r0, #210	; 0xd2
 8007160:	f000 fcc0 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}

08007168 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007172:	1dfb      	adds	r3, r7, #7
 8007174:	2201      	movs	r2, #1
 8007176:	4619      	mov	r1, r3
 8007178:	209f      	movs	r0, #159	; 0x9f
 800717a:	f000 fcb3 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007190:	1dfb      	adds	r3, r7, #7
 8007192:	2201      	movs	r2, #1
 8007194:	4619      	mov	r1, r3
 8007196:	20a0      	movs	r0, #160	; 0xa0
 8007198:	f000 fca4 	bl	8007ae4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b3f      	cmp	r3, #63	; 0x3f
 80071a0:	d91c      	bls.n	80071dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80071b0:	e005      	b.n	80071be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	089b      	lsrs	r3, r3, #2
 80071b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	3301      	adds	r3, #1
 80071bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2b1f      	cmp	r3, #31
 80071c2:	d8f6      	bhi.n	80071b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	4413      	add	r3, r2
 80071ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80071d0:	7b7b      	ldrb	r3, [r7, #13]
 80071d2:	4619      	mov	r1, r3
 80071d4:	f240 7006 	movw	r0, #1798	; 0x706
 80071d8:	f000 fc08 	bl	80079ec <SUBGRF_WriteRegister>
    }
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80071ea:	f7fa f860 	bl	80012ae <RBI_IsDCDC>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80071f4:	2301      	movs	r3, #1
 80071f6:	71fb      	strb	r3, [r7, #7]
 80071f8:	e001      	b.n	80071fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80071fa:	2300      	movs	r3, #0
 80071fc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80071fe:	1dfb      	adds	r3, r7, #7
 8007200:	2201      	movs	r2, #1
 8007202:	4619      	mov	r1, r3
 8007204:	2096      	movs	r0, #150	; 0x96
 8007206:	f000 fc6d 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800721a:	793b      	ldrb	r3, [r7, #4]
 800721c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007220:	b2db      	uxtb	r3, r3
 8007222:	019b      	lsls	r3, r3, #6
 8007224:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007226:	793b      	ldrb	r3, [r7, #4]
 8007228:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007230:	b25b      	sxtb	r3, r3
 8007232:	4313      	orrs	r3, r2
 8007234:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007236:	793b      	ldrb	r3, [r7, #4]
 8007238:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007240:	b25b      	sxtb	r3, r3
 8007242:	4313      	orrs	r3, r2
 8007244:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007246:	793b      	ldrb	r3, [r7, #4]
 8007248:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800724c:	b2db      	uxtb	r3, r3
 800724e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007250:	b25b      	sxtb	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007256:	793b      	ldrb	r3, [r7, #4]
 8007258:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007260:	b25b      	sxtb	r3, r3
 8007262:	4313      	orrs	r3, r2
 8007264:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007266:	793b      	ldrb	r3, [r7, #4]
 8007268:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007270:	b25b      	sxtb	r3, r3
 8007272:	4313      	orrs	r3, r2
 8007274:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007276:	793b      	ldrb	r3, [r7, #4]
 8007278:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007280:	4313      	orrs	r3, r2
 8007282:	b25b      	sxtb	r3, r3
 8007284:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007286:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007288:	f107 030f 	add.w	r3, r7, #15
 800728c:	2201      	movs	r2, #1
 800728e:	4619      	mov	r1, r3
 8007290:	2089      	movs	r0, #137	; 0x89
 8007292:	f000 fc27 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <SUBGRF_CalibrateImage+0x78>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d904      	bls.n	80072ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80072b0:	23e1      	movs	r3, #225	; 0xe1
 80072b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80072b4:	23e9      	movs	r3, #233	; 0xe9
 80072b6:	737b      	strb	r3, [r7, #13]
 80072b8:	e022      	b.n	8007300 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a17      	ldr	r2, [pc, #92]	; (800731c <SUBGRF_CalibrateImage+0x7c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d904      	bls.n	80072cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80072c2:	23d7      	movs	r3, #215	; 0xd7
 80072c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80072c6:	23db      	movs	r3, #219	; 0xdb
 80072c8:	737b      	strb	r3, [r7, #13]
 80072ca:	e019      	b.n	8007300 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a14      	ldr	r2, [pc, #80]	; (8007320 <SUBGRF_CalibrateImage+0x80>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d904      	bls.n	80072de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80072d4:	23c1      	movs	r3, #193	; 0xc1
 80072d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80072d8:	23c5      	movs	r3, #197	; 0xc5
 80072da:	737b      	strb	r3, [r7, #13]
 80072dc:	e010      	b.n	8007300 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a10      	ldr	r2, [pc, #64]	; (8007324 <SUBGRF_CalibrateImage+0x84>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d904      	bls.n	80072f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80072e6:	2375      	movs	r3, #117	; 0x75
 80072e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80072ea:	2381      	movs	r3, #129	; 0x81
 80072ec:	737b      	strb	r3, [r7, #13]
 80072ee:	e007      	b.n	8007300 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <SUBGRF_CalibrateImage+0x88>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d903      	bls.n	8007300 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80072f8:	236b      	movs	r3, #107	; 0x6b
 80072fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80072fc:	236f      	movs	r3, #111	; 0x6f
 80072fe:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	2202      	movs	r2, #2
 8007306:	4619      	mov	r1, r3
 8007308:	2098      	movs	r0, #152	; 0x98
 800730a:	f000 fbeb 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	35a4e900 	.word	0x35a4e900
 800731c:	32a9f880 	.word	0x32a9f880
 8007320:	2de54480 	.word	0x2de54480
 8007324:	1b6b0b00 	.word	0x1b6b0b00
 8007328:	1954fc40 	.word	0x1954fc40

0800732c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4623      	mov	r3, r4
 800733c:	71fb      	strb	r3, [r7, #7]
 800733e:	4603      	mov	r3, r0
 8007340:	71bb      	strb	r3, [r7, #6]
 8007342:	460b      	mov	r3, r1
 8007344:	717b      	strb	r3, [r7, #5]
 8007346:	4613      	mov	r3, r2
 8007348:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800734e:	79bb      	ldrb	r3, [r7, #6]
 8007350:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007352:	797b      	ldrb	r3, [r7, #5]
 8007354:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007356:	793b      	ldrb	r3, [r7, #4]
 8007358:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800735a:	f107 030c 	add.w	r3, r7, #12
 800735e:	2204      	movs	r2, #4
 8007360:	4619      	mov	r1, r3
 8007362:	2095      	movs	r0, #149	; 0x95
 8007364:	f000 fbbe 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	461a      	mov	r2, r3
 800737e:	4623      	mov	r3, r4
 8007380:	80fb      	strh	r3, [r7, #6]
 8007382:	4603      	mov	r3, r0
 8007384:	80bb      	strh	r3, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	807b      	strh	r3, [r7, #2]
 800738a:	4613      	mov	r3, r2
 800738c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	b29b      	uxth	r3, r3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800739e:	88bb      	ldrh	r3, [r7, #4]
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80073a8:	88bb      	ldrh	r3, [r7, #4]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80073ae:	887b      	ldrh	r3, [r7, #2]
 80073b0:	0a1b      	lsrs	r3, r3, #8
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80073b8:	887b      	ldrh	r3, [r7, #2]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80073c8:	883b      	ldrh	r3, [r7, #0]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	2208      	movs	r2, #8
 80073d4:	4619      	mov	r1, r3
 80073d6:	2008      	movs	r0, #8
 80073d8:	f000 fb84 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}

080073e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	0a1b      	lsrs	r3, r3, #8
 8007406:	b2db      	uxtb	r3, r3
 8007408:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	2204      	movs	r2, #4
 8007416:	4619      	mov	r1, r3
 8007418:	2097      	movs	r0, #151	; 0x97
 800741a:	f000 fb63 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007428:	b5b0      	push	{r4, r5, r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <SUBGRF_SetRfFrequency+0x7c>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f083 0301 	eor.w	r3, r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ff2c 	bl	80072a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007448:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <SUBGRF_SetRfFrequency+0x7c>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	461a      	mov	r2, r3
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	09d5      	lsrs	r5, r2, #7
 8007458:	0654      	lsls	r4, r2, #25
 800745a:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <SUBGRF_SetRfFrequency+0x80>)
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	4620      	mov	r0, r4
 8007462:	4629      	mov	r1, r5
 8007464:	f7f9 fb78 	bl	8000b58 <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4613      	mov	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	0e1b      	lsrs	r3, r3, #24
 8007474:	b2db      	uxtb	r3, r3
 8007476:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	b2db      	uxtb	r3, r3
 800747e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	b2db      	uxtb	r3, r3
 8007486:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	2204      	movs	r2, #4
 8007494:	4619      	mov	r1, r3
 8007496:	2086      	movs	r0, #134	; 0x86
 8007498:	f000 fb24 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bdb0      	pop	{r4, r5, r7, pc}
 80074a4:	2000044c 	.word	0x2000044c
 80074a8:	01e84800 	.word	0x01e84800

080074ac <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <SUBGRF_SetPacketType+0x34>)
 80074ba:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80074c2:	2100      	movs	r1, #0
 80074c4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074c8:	f000 fa90 	bl	80079ec <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80074cc:	1dfb      	adds	r3, r7, #7
 80074ce:	2201      	movs	r2, #1
 80074d0:	4619      	mov	r1, r3
 80074d2:	208a      	movs	r0, #138	; 0x8a
 80074d4:	f000 fb06 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000445 	.word	0x20000445

080074e4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
    return PacketType;
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <SUBGRF_GetPacketType+0x10>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	20000445 	.word	0x20000445

080074f8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	71fb      	strb	r3, [r7, #7]
 8007502:	460b      	mov	r3, r1
 8007504:	71bb      	strb	r3, [r7, #6]
 8007506:	4613      	mov	r3, r2
 8007508:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d124      	bne.n	800755a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8007510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007514:	2b0f      	cmp	r3, #15
 8007516:	d106      	bne.n	8007526 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8007518:	2301      	movs	r3, #1
 800751a:	2201      	movs	r2, #1
 800751c:	2100      	movs	r1, #0
 800751e:	2006      	movs	r0, #6
 8007520:	f7ff ff04 	bl	800732c <SUBGRF_SetPaConfig>
 8007524:	e005      	b.n	8007532 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8007526:	2301      	movs	r3, #1
 8007528:	2201      	movs	r2, #1
 800752a:	2100      	movs	r1, #0
 800752c:	2004      	movs	r0, #4
 800752e:	f7ff fefd 	bl	800732c <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007532:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007536:	2b0d      	cmp	r3, #13
 8007538:	dd02      	ble.n	8007540 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800753a:	230e      	movs	r3, #14
 800753c:	71bb      	strb	r3, [r7, #6]
 800753e:	e006      	b.n	800754e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007540:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007544:	f113 0f11 	cmn.w	r3, #17
 8007548:	da01      	bge.n	800754e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800754a:	23ef      	movs	r3, #239	; 0xef
 800754c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800754e:	2118      	movs	r1, #24
 8007550:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007554:	f000 fa4a 	bl	80079ec <SUBGRF_WriteRegister>
 8007558:	e025      	b.n	80075a6 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800755a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800755e:	f000 fa59 	bl	8007a14 <SUBGRF_ReadRegister>
 8007562:	4603      	mov	r3, r0
 8007564:	f043 031e 	orr.w	r3, r3, #30
 8007568:	b2db      	uxtb	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007570:	f000 fa3c 	bl	80079ec <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007574:	2301      	movs	r3, #1
 8007576:	2200      	movs	r2, #0
 8007578:	2107      	movs	r1, #7
 800757a:	2004      	movs	r0, #4
 800757c:	f7ff fed6 	bl	800732c <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007580:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007584:	2b16      	cmp	r3, #22
 8007586:	dd02      	ble.n	800758e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007588:	2316      	movs	r3, #22
 800758a:	71bb      	strb	r3, [r7, #6]
 800758c:	e006      	b.n	800759c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800758e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007592:	f113 0f09 	cmn.w	r3, #9
 8007596:	da01      	bge.n	800759c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007598:	23f7      	movs	r3, #247	; 0xf7
 800759a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800759c:	2138      	movs	r1, #56	; 0x38
 800759e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80075a2:	f000 fa23 	bl	80079ec <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80075a6:	79bb      	ldrb	r3, [r7, #6]
 80075a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 80075aa:	797b      	ldrb	r3, [r7, #5]
 80075ac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	2202      	movs	r2, #2
 80075b4:	4619      	mov	r1, r3
 80075b6:	208e      	movs	r0, #142	; 0x8e
 80075b8:	f000 fa94 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 80075bc:	bf00      	nop
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80075c4:	b5b0      	push	{r4, r5, r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80075d0:	4a5e      	ldr	r2, [pc, #376]	; (800774c <SUBGRF_SetModulationParams+0x188>)
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075da:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <SUBGRF_SetModulationParams+0x18c>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d004      	beq.n	80075f4 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff ff5c 	bl	80074ac <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	f200 80a2 	bhi.w	8007742 <SUBGRF_SetModulationParams+0x17e>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <SUBGRF_SetModulationParams+0x40>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007615 	.word	0x08007615
 8007608:	080076d1 	.word	0x080076d1
 800760c:	08007693 	.word	0x08007693
 8007610:	080076ff 	.word	0x080076ff
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007614:	2308      	movs	r3, #8
 8007616:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a4d      	ldr	r2, [pc, #308]	; (8007754 <SUBGRF_SetModulationParams+0x190>)
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	b2db      	uxtb	r3, r3
 800762a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	b2db      	uxtb	r3, r3
 8007632:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7b1b      	ldrb	r3, [r3, #12]
 800763e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	7b5b      	ldrb	r3, [r3, #13]
 8007644:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	461a      	mov	r2, r3
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	09d5      	lsrs	r5, r2, #7
 8007652:	0654      	lsls	r4, r2, #25
 8007654:	4a40      	ldr	r2, [pc, #256]	; (8007758 <SUBGRF_SetModulationParams+0x194>)
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	f7f9 fa7b 	bl	8000b58 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4613      	mov	r3, r2
 8007668:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	b2db      	uxtb	r3, r3
 8007670:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	b2db      	uxtb	r3, r3
 8007678:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007680:	7cfb      	ldrb	r3, [r7, #19]
 8007682:	b29a      	uxth	r2, r3
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	4619      	mov	r1, r3
 800768a:	208b      	movs	r0, #139	; 0x8b
 800768c:	f000 fa2a 	bl	8007ae4 <SUBGRF_WriteCommand>
        break;
 8007690:	e058      	b.n	8007744 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007692:	2304      	movs	r3, #4
 8007694:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	4a2e      	ldr	r2, [pc, #184]	; (8007754 <SUBGRF_SetModulationParams+0x190>)
 800769c:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7d1b      	ldrb	r3, [r3, #20]
 80076bc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076be:	7cfb      	ldrb	r3, [r7, #19]
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4619      	mov	r1, r3
 80076c8:	208b      	movs	r0, #139	; 0x8b
 80076ca:	f000 fa0b 	bl	8007ae4 <SUBGRF_WriteCommand>
        break;
 80076ce:	e039      	b.n	8007744 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 80076d0:	2304      	movs	r3, #4
 80076d2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7e1b      	ldrb	r3, [r3, #24]
 80076d8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7e5b      	ldrb	r3, [r3, #25]
 80076de:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	7e9b      	ldrb	r3, [r3, #26]
 80076e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7edb      	ldrb	r3, [r3, #27]
 80076ea:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076ec:	7cfb      	ldrb	r3, [r7, #19]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4619      	mov	r1, r3
 80076f6:	208b      	movs	r0, #139	; 0x8b
 80076f8:	f000 f9f4 	bl	8007ae4 <SUBGRF_WriteCommand>

        break;
 80076fc:	e022      	b.n	8007744 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80076fe:	2305      	movs	r3, #5
 8007700:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <SUBGRF_SetModulationParams+0x190>)
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	0c1b      	lsrs	r3, r3, #16
 8007712:	b2db      	uxtb	r3, r3
 8007714:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	0a1b      	lsrs	r3, r3, #8
 800771a:	b2db      	uxtb	r3, r3
 800771c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7b5b      	ldrb	r3, [r3, #13]
 800772e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007730:	7cfb      	ldrb	r3, [r7, #19]
 8007732:	b29a      	uxth	r2, r3
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	4619      	mov	r1, r3
 800773a:	208b      	movs	r0, #139	; 0x8b
 800773c:	f000 f9d2 	bl	8007ae4 <SUBGRF_WriteCommand>
        break;
 8007740:	e000      	b.n	8007744 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007742:	bf00      	nop
    }
}
 8007744:	bf00      	nop
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bdb0      	pop	{r4, r5, r7, pc}
 800774c:	0800b6b0 	.word	0x0800b6b0
 8007750:	20000445 	.word	0x20000445
 8007754:	3d090000 	.word	0x3d090000
 8007758:	01e84800 	.word	0x01e84800

0800775c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007768:	4a48      	ldr	r2, [pc, #288]	; (800788c <SUBGRF_SetPacketParams+0x130>)
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007770:	c303      	stmia	r3!, {r0, r1}
 8007772:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	4b45      	ldr	r3, [pc, #276]	; (8007890 <SUBGRF_SetPacketParams+0x134>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d004      	beq.n	800778a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fe91 	bl	80074ac <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d878      	bhi.n	8007884 <SUBGRF_SetPacketParams+0x128>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <SUBGRF_SetPacketParams+0x3c>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077a9 	.word	0x080077a9
 800779c:	08007839 	.word	0x08007839
 80077a0:	0800782d 	.word	0x0800782d
 80077a4:	080077a9 	.word	0x080077a9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	7a5b      	ldrb	r3, [r3, #9]
 80077ac:	2bf1      	cmp	r3, #241	; 0xf1
 80077ae:	d10a      	bne.n	80077c6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80077b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80077b4:	f7ff fb20 	bl	8006df8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80077b8:	f248 0005 	movw	r0, #32773	; 0x8005
 80077bc:	f7ff fb3c 	bl	8006e38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80077c0:	2302      	movs	r3, #2
 80077c2:	75bb      	strb	r3, [r7, #22]
 80077c4:	e011      	b.n	80077ea <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7a5b      	ldrb	r3, [r3, #9]
 80077ca:	2bf2      	cmp	r3, #242	; 0xf2
 80077cc:	d10a      	bne.n	80077e4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80077ce:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80077d2:	f7ff fb11 	bl	8006df8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80077d6:	f241 0021 	movw	r0, #4129	; 0x1021
 80077da:	f7ff fb2d 	bl	8006e38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80077de:	2306      	movs	r3, #6
 80077e0:	75bb      	strb	r3, [r7, #22]
 80077e2:	e002      	b.n	80077ea <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7a5b      	ldrb	r3, [r3, #9]
 80077e8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80077ea:	2309      	movs	r3, #9
 80077ec:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	885b      	ldrh	r3, [r3, #2]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	795b      	ldrb	r3, [r3, #5]
 800780c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	799b      	ldrb	r3, [r3, #6]
 8007812:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	79db      	ldrb	r3, [r3, #7]
 8007818:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7a1b      	ldrb	r3, [r3, #8]
 800781e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007820:	7dbb      	ldrb	r3, [r7, #22]
 8007822:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	7a9b      	ldrb	r3, [r3, #10]
 8007828:	753b      	strb	r3, [r7, #20]
        break;
 800782a:	e022      	b.n	8007872 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7b1b      	ldrb	r3, [r3, #12]
 8007834:	733b      	strb	r3, [r7, #12]
        break;
 8007836:	e01c      	b.n	8007872 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007838:	2306      	movs	r3, #6
 800783a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	89db      	ldrh	r3, [r3, #14]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	b29b      	uxth	r3, r3
 8007844:	b2db      	uxtb	r3, r3
 8007846:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	89db      	ldrh	r3, [r3, #14]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	7c1a      	ldrb	r2, [r3, #16]
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <SUBGRF_SetPacketParams+0x138>)
 8007856:	4611      	mov	r1, r2
 8007858:	7019      	strb	r1, [r3, #0]
 800785a:	4613      	mov	r3, r2
 800785c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7c5b      	ldrb	r3, [r3, #17]
 8007862:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7c9b      	ldrb	r3, [r3, #18]
 8007868:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7cdb      	ldrb	r3, [r3, #19]
 800786e:	747b      	strb	r3, [r7, #17]
        break;
 8007870:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	b29a      	uxth	r2, r3
 8007876:	f107 030c 	add.w	r3, r7, #12
 800787a:	4619      	mov	r1, r3
 800787c:	208c      	movs	r0, #140	; 0x8c
 800787e:	f000 f931 	bl	8007ae4 <SUBGRF_WriteCommand>
 8007882:	e000      	b.n	8007886 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007884:	bf00      	nop
}
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	0800b6b8 	.word	0x0800b6b8
 8007890:	20000445 	.word	0x20000445
 8007894:	20000446 	.word	0x20000446

08007898 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	460a      	mov	r2, r1
 80078a2:	71fb      	strb	r3, [r7, #7]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80078ac:	79bb      	ldrb	r3, [r7, #6]
 80078ae:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80078b0:	f107 030c 	add.w	r3, r7, #12
 80078b4:	2202      	movs	r2, #2
 80078b6:	4619      	mov	r1, r3
 80078b8:	208f      	movs	r0, #143	; 0x8f
 80078ba:	f000 f913 	bl	8007ae4 <SUBGRF_WriteCommand>
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80078d0:	1d3b      	adds	r3, r7, #4
 80078d2:	2201      	movs	r2, #1
 80078d4:	4619      	mov	r1, r3
 80078d6:	2015      	movs	r0, #21
 80078d8:	f000 f918 	bl	8007b0c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80078dc:	793b      	ldrb	r3, [r7, #4]
 80078de:	425b      	negs	r3, r3
 80078e0:	105b      	asrs	r3, r3, #1
 80078e2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80078e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80078fa:	f107 030c 	add.w	r3, r7, #12
 80078fe:	2202      	movs	r2, #2
 8007900:	4619      	mov	r1, r3
 8007902:	2013      	movs	r0, #19
 8007904:	f000 f902 	bl	8007b0c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007908:	f7ff fdec 	bl	80074e4 <SUBGRF_GetPacketType>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10d      	bne.n	800792e <SUBGRF_GetRxBufferStatus+0x3e>
 8007912:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <SUBGRF_GetRxBufferStatus+0x54>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d108      	bne.n	800792e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800791c:	f240 7002 	movw	r0, #1794	; 0x702
 8007920:	f000 f878 	bl	8007a14 <SUBGRF_ReadRegister>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e002      	b.n	8007934 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800792e:	7b3a      	ldrb	r2, [r7, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007934:	7b7a      	ldrb	r2, [r7, #13]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	701a      	strb	r2, [r3, #0]
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000446 	.word	0x20000446

08007948 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	2203      	movs	r2, #3
 8007956:	4619      	mov	r1, r3
 8007958:	2014      	movs	r0, #20
 800795a:	f000 f8d7 	bl	8007b0c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800795e:	f7ff fdc1 	bl	80074e4 <SUBGRF_GetPacketType>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <SUBGRF_GetPacketStatus+0x30>
 8007972:	2b01      	cmp	r3, #1
 8007974:	d013      	beq.n	800799e <SUBGRF_GetPacketStatus+0x56>
 8007976:	e02a      	b.n	80079ce <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007978:	7b3a      	ldrb	r2, [r7, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800797e:	7b7b      	ldrb	r3, [r7, #13]
 8007980:	425b      	negs	r3, r3
 8007982:	105b      	asrs	r3, r3, #1
 8007984:	b25a      	sxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	425b      	negs	r3, r3
 800798e:	105b      	asrs	r3, r3, #1
 8007990:	b25a      	sxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	609a      	str	r2, [r3, #8]
            break;
 800799c:	e020      	b.n	80079e0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800799e:	7b3b      	ldrb	r3, [r7, #12]
 80079a0:	425b      	negs	r3, r3
 80079a2:	105b      	asrs	r3, r3, #1
 80079a4:	b25a      	sxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80079aa:	7b7b      	ldrb	r3, [r7, #13]
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	3302      	adds	r3, #2
 80079b0:	109b      	asrs	r3, r3, #2
 80079b2:	b25a      	sxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	425b      	negs	r3, r3
 80079bc:	105b      	asrs	r3, r3, #1
 80079be:	b25a      	sxtb	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80079c4:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <SUBGRF_GetPacketStatus+0xa0>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	611a      	str	r2, [r3, #16]
            break;
 80079cc:	e008      	b.n	80079e0 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80079ce:	2214      	movs	r2, #20
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fda6 	bl	8008524 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220f      	movs	r2, #15
 80079dc:	701a      	strb	r2, [r3, #0]
            break;
 80079de:	bf00      	nop
    }
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000448 	.word	0x20000448

080079ec <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	460a      	mov	r2, r1
 80079f6:	80fb      	strh	r3, [r7, #6]
 80079f8:	4613      	mov	r3, r2
 80079fa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80079fc:	1d7a      	adds	r2, r7, #5
 80079fe:	88f9      	ldrh	r1, [r7, #6]
 8007a00:	2301      	movs	r3, #1
 8007a02:	4803      	ldr	r0, [pc, #12]	; (8007a10 <SUBGRF_WriteRegister+0x24>)
 8007a04:	f7fc f8ea 	bl	8003bdc <HAL_SUBGHZ_WriteRegisters>
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200004f4 	.word	0x200004f4

08007a14 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007a1e:	f107 020f 	add.w	r2, r7, #15
 8007a22:	88f9      	ldrh	r1, [r7, #6]
 8007a24:	2301      	movs	r3, #1
 8007a26:	4804      	ldr	r0, [pc, #16]	; (8007a38 <SUBGRF_ReadRegister+0x24>)
 8007a28:	f7fc f937 	bl	8003c9a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200004f4 	.word	0x200004f4

08007a3c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	80fb      	strh	r3, [r7, #6]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007a4c:	88bb      	ldrh	r3, [r7, #4]
 8007a4e:	88f9      	ldrh	r1, [r7, #6]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	4803      	ldr	r0, [pc, #12]	; (8007a60 <SUBGRF_WriteRegisters+0x24>)
 8007a54:	f7fc f8c2 	bl	8003bdc <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	200004f4 	.word	0x200004f4

08007a64 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	80fb      	strh	r3, [r7, #6]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007a74:	88bb      	ldrh	r3, [r7, #4]
 8007a76:	88f9      	ldrh	r1, [r7, #6]
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	4803      	ldr	r0, [pc, #12]	; (8007a88 <SUBGRF_ReadRegisters+0x24>)
 8007a7c:	f7fc f90d 	bl	8003c9a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	200004f4 	.word	0x200004f4

08007a8c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007a9c:	79bb      	ldrb	r3, [r7, #6]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	79f9      	ldrb	r1, [r7, #7]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	4803      	ldr	r0, [pc, #12]	; (8007ab4 <SUBGRF_WriteBuffer+0x28>)
 8007aa6:	f7fc fa0c 	bl	8003ec2 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	200004f4 	.word	0x200004f4

08007ab8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007ac8:	79bb      	ldrb	r3, [r7, #6]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	79f9      	ldrb	r1, [r7, #7]
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4803      	ldr	r0, [pc, #12]	; (8007ae0 <SUBGRF_ReadBuffer+0x28>)
 8007ad2:	f7fc fa49 	bl	8003f68 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200004f4 	.word	0x200004f4

08007ae4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
 8007af0:	4613      	mov	r3, r2
 8007af2:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007af4:	88bb      	ldrh	r3, [r7, #4]
 8007af6:	79f9      	ldrb	r1, [r7, #7]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	4803      	ldr	r0, [pc, #12]	; (8007b08 <SUBGRF_WriteCommand+0x24>)
 8007afc:	f7fc f92e 	bl	8003d5c <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200004f4 	.word	0x200004f4

08007b0c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007b1c:	88bb      	ldrh	r3, [r7, #4]
 8007b1e:	79f9      	ldrb	r1, [r7, #7]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	4803      	ldr	r0, [pc, #12]	; (8007b30 <SUBGRF_ReadCommand+0x24>)
 8007b24:	f7fc f979 	bl	8003e1a <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200004f4 	.word	0x200004f4

08007b34 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	460a      	mov	r2, r1
 8007b3e:	71fb      	strb	r3, [r7, #7]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007b48:	79bb      	ldrb	r3, [r7, #6]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d10d      	bne.n	8007b6a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d104      	bne.n	8007b5e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007b54:	2302      	movs	r3, #2
 8007b56:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007b58:	2004      	movs	r0, #4
 8007b5a:	f000 f8df 	bl	8007d1c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d107      	bne.n	8007b74 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	e004      	b.n	8007b74 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007b6a:	79bb      	ldrb	r3, [r7, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f9 fb7d 	bl	8001276 <RBI_ConfigRFSwitch>
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007b92:	f7f9 fb7e 	bl	8001292 <RBI_GetTxConfig>
 8007b96:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d016      	beq.n	8007bcc <SUBGRF_SetRfTxPower+0x48>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	dc16      	bgt.n	8007bd2 <SUBGRF_SetRfTxPower+0x4e>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <SUBGRF_SetRfTxPower+0x2e>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d00a      	beq.n	8007bc6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007bb0:	e00f      	b.n	8007bd2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	dd02      	ble.n	8007bc0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	73fb      	strb	r3, [r7, #15]
            break;
 8007bbe:	e009      	b.n	8007bd4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
            break;
 8007bc4:	e006      	b.n	8007bd4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
            break;
 8007bca:	e003      	b.n	8007bd4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	73fb      	strb	r3, [r7, #15]
            break;
 8007bd0:	e000      	b.n	8007bd4 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007bd2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007bd4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fc8b 	bl	80074f8 <SUBGRF_SetTxParams>

    return paSelect;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007bf0:	2301      	movs	r3, #1
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr
	...

08007bfc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007c04:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2001      	movs	r0, #1
 8007c0a:	4798      	blx	r3
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000450 	.word	0x20000450

08007c18 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007c20:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2002      	movs	r0, #2
 8007c26:	4798      	blx	r3
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000450 	.word	0x20000450

08007c34 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007c3c:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2040      	movs	r0, #64	; 0x40
 8007c42:	4798      	blx	r3
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000450 	.word	0x20000450

08007c50 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d005      	beq.n	8007c72 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007c66:	e00a      	b.n	8007c7e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2080      	movs	r0, #128	; 0x80
 8007c6e:	4798      	blx	r3
            break;
 8007c70:	e005      	b.n	8007c7e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c7a:	4798      	blx	r3
            break;
 8007c7c:	bf00      	nop
    }
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000450 	.word	0x20000450

08007c8c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c9c:	4798      	blx	r3
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000450 	.word	0x20000450

08007cac <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2020      	movs	r0, #32
 8007cba:	4798      	blx	r3
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000450 	.word	0x20000450

08007cc8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2004      	movs	r0, #4
 8007cd6:	4798      	blx	r3
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000450 	.word	0x20000450

08007ce4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2008      	movs	r0, #8
 8007cf2:	4798      	blx	r3
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000450 	.word	0x20000450

08007d00 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2010      	movs	r0, #16
 8007d0e:	4798      	blx	r3
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000450 	.word	0x20000450

08007d1c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007d26:	f7f9 fac2 	bl	80012ae <RBI_IsDCDC>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d112      	bne.n	8007d56 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007d30:	f640 1023 	movw	r0, #2339	; 0x923
 8007d34:	f7ff fe6e 	bl	8007a14 <SUBGRF_ReadRegister>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	f023 0306 	bic.w	r3, r3, #6
 8007d42:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007d44:	7bfa      	ldrb	r2, [r7, #15]
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f640 1023 	movw	r0, #2339	; 0x923
 8007d52:	f7ff fe4b 	bl	80079ec <SUBGRF_WriteRegister>
  }
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007d6e:	231f      	movs	r3, #31
 8007d70:	e016      	b.n	8007da0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	e00f      	b.n	8007d98 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d205      	bcs.n	8007d92 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	4a08      	ldr	r2, [pc, #32]	; (8007dac <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	791b      	ldrb	r3, [r3, #4]
 8007d90:	e006      	b.n	8007da0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	3301      	adds	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b15      	cmp	r3, #21
 8007d9c:	d9ec      	bls.n	8007d78 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8007d9e:	e7fe      	b.n	8007d9e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	0800bab4 	.word	0x0800bab4

08007db0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007dba:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <SUBGRF_GetCFO+0xe4>)
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8007dbe:	f640 0007 	movw	r0, #2055	; 0x807
 8007dc2:	f7ff fe27 	bl	8007a14 <SUBGRF_ReadRegister>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007dca:	7ffb      	ldrb	r3, [r7, #31]
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007dd8:	4413      	add	r3, r2
 8007dda:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007dde:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007de0:	7ffb      	ldrb	r3, [r7, #31]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007de8:	7fba      	ldrb	r2, [r7, #30]
 8007dea:	7f7b      	ldrb	r3, [r7, #29]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	4b28      	ldr	r3, [pc, #160]	; (8007e98 <SUBGRF_GetCFO+0xe8>)
 8007df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e04:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
 8007e16:	2b07      	cmp	r3, #7
 8007e18:	d802      	bhi.n	8007e20 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d802      	bhi.n	8007e34 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007e2e:	2304      	movs	r3, #4
 8007e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007e34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007e40:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007e44:	f7ff fde6 	bl	8007a14 <SUBGRF_ReadRegister>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e50:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8007e52:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007e56:	f7ff fddd 	bl	8007a14 <SUBGRF_ReadRegister>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8007e74:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007e78:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	6a3a      	ldr	r2, [r7, #32]
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	11da      	asrs	r2, r3, #7
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0c0a0804 	.word	0x0c0a0804
 8007e98:	01e84800 	.word	0x01e84800

08007e9c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8007eae:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007eb4:	697b      	ldr	r3, [r7, #20]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bc80      	pop	{r7}
 8007ebe:	4770      	bx	lr

08007ec0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007ed8:	697b      	ldr	r3, [r7, #20]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <RFW_DeInit>:

void RFW_DeInit( void)
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8007f02:	bf00      	nop
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8007f0e:	2300      	movs	r3, #0
#endif
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr

08007f18 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8007f1c:	2300      	movs	r3, #0
#endif
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b087      	sub	sp, #28
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	460b      	mov	r3, r1
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8007f4e:	697b      	ldr	r3, [r7, #20]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8007f6e:	bf00      	nop
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8007f76:	b480      	push	{r7}
 8007f78:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8007f7a:	bf00      	nop
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	4603      	mov	r3, r0
 8007f8a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
	...

08007f98 <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 8007faa:	480e      	ldr	r0, [pc, #56]	; (8007fe4 <list_insert+0x4c>)
 8007fac:	f000 f946 	bl	800823c <list_debug>
		return NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e012      	b.n	8007fda <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 f878 	bl	80080ac <list_index>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f90d 	bl	80081e0 <list_node_link>
 8007fc6:	6078      	str	r0, [r7, #4]
	if (n)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <list_insert+0x40>
		++self->size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	605a      	str	r2, [r3, #4]
	return n;
 8007fd8:	687b      	ldr	r3, [r7, #4]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	0800b6d0 	.word	0x0800b6d0

08007fe8 <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f832 	bl	800805c <list_head>
 8007ff8:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 8007ffa:	e00e      	b.n	800801a <list_search+0x32>
		
		if (self->compare(data, n->data))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	68d2      	ldr	r2, [r2, #12]
 8008004:	4611      	mov	r1, r2
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <list_search+0x2c>
			return n;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	e00c      	b.n	800802e <list_search+0x46>
		n = n->next;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f89c 	bl	8008158 <list_end>
 8008020:	4603      	mov	r3, r0
 8008022:	f083 0301 	eor.w	r3, r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e7      	bne.n	8007ffc <list_search+0x14>
	}
	return NULL;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f875 	bl	8008130 <list_size>
 8008046:	4603      	mov	r3, r0
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ffa3 	bl	8007f98 <list_insert>
 8008052:	4603      	mov	r3, r0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 800806a:	480e      	ldr	r0, [pc, #56]	; (80080a4 <list_head+0x48>)
 800806c:	f000 f8e6 	bl	800823c <list_debug>
		return NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	e012      	b.n	800809a <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f86d 	bl	8008158 <list_end>
 800807e:	4603      	mov	r3, r0
 8008080:	f083 0301 	eor.w	r3, r3, #1
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 800808a:	4807      	ldr	r0, [pc, #28]	; (80080a8 <list_head+0x4c>)
 800808c:	f000 f8d6 	bl	800823c <list_debug>
		return NULL;
 8008090:	2300      	movs	r3, #0
 8008092:	e002      	b.n	800809a <list_head+0x3e>
	}

	return self->sentinel->next;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	0800b710 	.word	0x0800b710
 80080a8:	0800b72c 	.word	0x0800b72c

080080ac <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f83a 	bl	8008130 <list_size>
 80080bc:	4603      	mov	r3, r0
 80080be:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da03      	bge.n	80080ce <list_index+0x22>
		pos += s;
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4413      	add	r3, r2
 80080cc:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	0fda      	lsrs	r2, r3, #31
 80080d6:	4413      	add	r3, r2
 80080d8:	105b      	asrs	r3, r3, #1
 80080da:	461a      	mov	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4293      	cmp	r3, r2
 80080e0:	dc11      	bgt.n	8008106 <list_index+0x5a>
		n = list_head(self);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff ffba 	bl	800805c <list_head>
 80080e8:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	e005      	b.n	80080fc <list_index+0x50>
			n = n->next;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	dbf5      	blt.n	80080f0 <list_index+0x44>
 8008104:	e00f      	b.n	8008126 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	e005      	b.n	800811e <list_index+0x72>
			n = n->prev;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b01      	subs	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	dcf5      	bgt.n	8008112 <list_index+0x66>
	}

	return n;
 8008126:	697b      	ldr	r3, [r7, #20]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <list_size+0x24>)
 8008140:	f000 f87c 	bl	800823c <list_debug>
		return 0;
 8008144:	2300      	movs	r3, #0
 8008146:	e001      	b.n	800814c <list_size+0x1c>
	}

	return self->size;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	0800b790 	.word	0x0800b790

08008158 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <list_end+0x18>
		list_debug("list_end(): n was NULL");
 8008166:	4805      	ldr	r0, [pc, #20]	; (800817c <list_end+0x24>)
 8008168:	f000 f868 	bl	800823c <list_debug>
		return false;
 800816c:	2300      	movs	r3, #0
 800816e:	e001      	b.n	8008174 <list_end+0x1c>
	}

	return n->sentinel;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	7a1b      	ldrb	r3, [r3, #8]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	0800b7ac 	.word	0x0800b7ac

08008180 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 800818a:	2010      	movs	r0, #16
 800818c:	f000 f9ac 	bl	80084e8 <malloc>
 8008190:	4603      	mov	r3, r0
 8008192:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d104      	bne.n	80081a4 <list_node_new+0x24>
		perror("list_node_new()");
 800819a:	4810      	ldr	r0, [pc, #64]	; (80081dc <list_node_new+0x5c>)
 800819c:	f000 ff68 	bl	8009070 <perror>
		return NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	e017      	b.n	80081d4 <list_node_new+0x54>
	}

	n->sentinel = false;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 80081b6:	6838      	ldr	r0, [r7, #0]
 80081b8:	f000 f996 	bl	80084e8 <malloc>
 80081bc:	4603      	mov	r3, r0
 80081be:	461a      	mov	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 f99b 	bl	8008508 <memcpy>
	return n;
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0800b838 	.word	0x0800b838

080081e0 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 80081f0:	4810      	ldr	r0, [pc, #64]	; (8008234 <list_node_link+0x54>)
 80081f2:	f000 f823 	bl	800823c <list_debug>
		return NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e017      	b.n	800822a <list_node_link+0x4a>
	}

	if (c == NULL) {
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 8008200:	480d      	ldr	r0, [pc, #52]	; (8008238 <list_node_link+0x58>)
 8008202:	f000 f81b 	bl	800823c <list_debug>
		return NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	e00f      	b.n	800822a <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	60fb      	str	r3, [r7, #12]

	a->next = b;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	b->prev = a;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	605a      	str	r2, [r3, #4]
	b->next = c;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	601a      	str	r2, [r3, #0]
	c->prev = b;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]

	return b;
 8008228:	687b      	ldr	r3, [r7, #4]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	0800b848 	.word	0x0800b848
 8008238:	0800b868 	.word	0x0800b868

0800823c <list_debug>:

	return b;
}

static void list_debug(const char *format, ...)
{
 800823c:	b40f      	push	{r0, r1, r2, r3}
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	b004      	add	sp, #16
 800824c:	4770      	bx	lr
	...

08008250 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b091      	sub	sp, #68	; 0x44
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 800825a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800825e:	461a      	mov	r2, r3
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f876 	bl	8008354 <packet_desirialize>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d152      	bne.n	8008314 <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 800826e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8008272:	4b2e      	ldr	r3, [pc, #184]	; (800832c <ll_receive+0xdc>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d14f      	bne.n	800831a <ll_receive+0xca>
 800827a:	4b2d      	ldr	r3, [pc, #180]	; (8008330 <ll_receive+0xe0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff56 	bl	8008130 <list_size>
 8008284:	4603      	mov	r3, r0
 8008286:	2b09      	cmp	r3, #9
 8008288:	d847      	bhi.n	800831a <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 800828a:	4b29      	ldr	r3, [pc, #164]	; (8008330 <ll_receive+0xe0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff ff4e 	bl	8008130 <list_size>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d021      	beq.n	80082de <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 800829a:	4b25      	ldr	r3, [pc, #148]	; (8008330 <ll_receive+0xe0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80082a2:	4611      	mov	r1, r2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fe9f 	bl	8007fe8 <list_search>
 80082aa:	63f8      	str	r0, [r7, #60]	; 0x3c
				if(n != NULL )
 80082ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d015      	beq.n	80082de <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 80082b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
					packet_t * pack = (packet_t*) &(holder)->packet ;
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 80082bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082be:	78da      	ldrb	r2, [r3, #3]
 80082c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d10a      	bne.n	80082de <ll_receive+0x8e>
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	791a      	ldrb	r2, [r3, #4]
 80082cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d104      	bne.n	80082de <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f90e 	bl	80084f8 <free>
 80082dc:	e022      	b.n	8008324 <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 80082de:	f107 030c 	add.w	r3, r7, #12
 80082e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80082e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 80082ec:	f7f8 fe63 	bl	8000fb6 <sys_get_tick>
 80082f0:	4603      	mov	r3, r0
 80082f2:	61fb      	str	r3, [r7, #28]
			packet_holder.number_of_transmition = 0 ;
 80082f4:	2300      	movs	r3, #0
 80082f6:	623b      	str	r3, [r7, #32]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <ll_receive+0xe0>)
 80082fa:	681c      	ldr	r4, [r3, #0]
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	211c      	movs	r1, #28
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff ff3c 	bl	8008180 <list_node_new>
 8008308:	4603      	mov	r3, r0
 800830a:	4619      	mov	r1, r3
 800830c:	4620      	mov	r0, r4
 800830e:	f7ff fe92 	bl	8008036 <list_push_back>
 8008312:	e002      	b.n	800831a <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 8008314:	4807      	ldr	r0, [pc, #28]	; (8008334 <ll_receive+0xe4>)
 8008316:	f000 ff39 	bl	800918c <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 800831a:	4b07      	ldr	r3, [pc, #28]	; (8008338 <ll_receive+0xe8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3301      	adds	r3, #1
 8008320:	4a05      	ldr	r2, [pc, #20]	; (8008338 <ll_receive+0xe8>)
 8008322:	6013      	str	r3, [r2, #0]

}
 8008324:	3744      	adds	r7, #68	; 0x44
 8008326:	46bd      	mov	sp, r7
 8008328:	bd90      	pop	{r4, r7, pc}
 800832a:	bf00      	nop
 800832c:	2000000a 	.word	0x2000000a
 8008330:	200005d4 	.word	0x200005d4
 8008334:	0800b8a4 	.word	0x0800b8a4
 8008338:	20000454 	.word	0x20000454

0800833c <ll_set_transmition_done>:
		debug_packet(pp) ;
	}
}

void ll_set_transmition_done()
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 8008340:	4b03      	ldr	r3, [pc, #12]	; (8008350 <ll_set_transmition_done+0x14>)
 8008342:	2201      	movs	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
}
 8008346:	bf00      	nop
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20000458 	.word	0x20000458

08008354 <packet_desirialize>:
		return 0;
	}
}

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3b02      	subs	r3, #2
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3b01      	subs	r3, #1
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b29a      	uxth	r2, r3
 800837a:	8afb      	ldrh	r3, [r7, #22]
 800837c:	4413      	add	r3, r2
 800837e:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3b02      	subs	r3, #2
 8008384:	4619      	mov	r1, r3
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f83a 	bl	8008400 <check_sum>
 800838c:	4603      	mov	r3, r0
 800838e:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 8008390:	8aba      	ldrh	r2, [r7, #20]
 8008392:	8afb      	ldrh	r3, [r7, #22]
 8008394:	429a      	cmp	r2, r3
 8008396:	d005      	beq.n	80083a4 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 8008398:	4818      	ldr	r0, [pc, #96]	; (80083fc <packet_desirialize+0xa8>)
 800839a:	f000 fef7 	bl	800918c <puts>
		return PACK_CHECKSUM_ERROR ;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	e026      	b.n	80083f2 <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	785a      	ldrb	r2, [r3, #1]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	78da      	ldrb	r2, [r3, #3]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	789a      	ldrb	r2, [r3, #2]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	791a      	ldrb	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	791b      	ldrb	r3, [r3, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 f889 	bl	80084e8 <malloc>
 80083d6:	4603      	mov	r3, r0
 80083d8:	461a      	mov	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6898      	ldr	r0, [r3, #8]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1d59      	adds	r1, r3, #5
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	791b      	ldrb	r3, [r3, #4]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 f88c 	bl	8008508 <memcpy>
	
	return PACK_OK ;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	0800b954 	.word	0x0800b954

08008400 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8008412:	e017      	b.n	8008444 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	b29b      	uxth	r3, r3
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3301      	adds	r3, #1
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	3b02      	subs	r3, #2
 800843c:	603b      	str	r3, [r7, #0]
		i += 2;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	3302      	adds	r3, #2
 8008442:	617b      	str	r3, [r7, #20]
	while(len>1)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b01      	cmp	r3, #1
 8008448:	dce4      	bgt.n	8008414 <check_sum+0x14>
	}
	
	if(len >0)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd13      	ble.n	8008478 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	3b01      	subs	r3, #1
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4413      	add	r3, r2
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 8008462:	e009      	b.n	8008478 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	b29b      	uxth	r3, r3
 8008468:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847e:	daf1      	bge.n	8008464 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	b29b      	uxth	r3, r3
 8008484:	43db      	mvns	r3, r3
 8008486:	b29b      	uxth	r3, r3
}
 8008488:	4618      	mov	r0, r3
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr
	...

08008494 <__errno>:
 8008494:	4b01      	ldr	r3, [pc, #4]	; (800849c <__errno+0x8>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	2000000c 	.word	0x2000000c

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4d0d      	ldr	r5, [pc, #52]	; (80084d8 <__libc_init_array+0x38>)
 80084a4:	4c0d      	ldr	r4, [pc, #52]	; (80084dc <__libc_init_array+0x3c>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	2600      	movs	r6, #0
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	4d0b      	ldr	r5, [pc, #44]	; (80084e0 <__libc_init_array+0x40>)
 80084b2:	4c0c      	ldr	r4, [pc, #48]	; (80084e4 <__libc_init_array+0x44>)
 80084b4:	f003 f83c 	bl	800b530 <_init>
 80084b8:	1b64      	subs	r4, r4, r5
 80084ba:	10a4      	asrs	r4, r4, #2
 80084bc:	2600      	movs	r6, #0
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	0800c5ec 	.word	0x0800c5ec
 80084dc:	0800c5ec 	.word	0x0800c5ec
 80084e0:	0800c5ec 	.word	0x0800c5ec
 80084e4:	0800c5f0 	.word	0x0800c5f0

080084e8 <malloc>:
 80084e8:	4b02      	ldr	r3, [pc, #8]	; (80084f4 <malloc+0xc>)
 80084ea:	4601      	mov	r1, r0
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	f000 b86f 	b.w	80085d0 <_malloc_r>
 80084f2:	bf00      	nop
 80084f4:	2000000c 	.word	0x2000000c

080084f8 <free>:
 80084f8:	4b02      	ldr	r3, [pc, #8]	; (8008504 <free+0xc>)
 80084fa:	4601      	mov	r1, r0
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	f000 b819 	b.w	8008534 <_free_r>
 8008502:	bf00      	nop
 8008504:	2000000c 	.word	0x2000000c

08008508 <memcpy>:
 8008508:	440a      	add	r2, r1
 800850a:	4291      	cmp	r1, r2
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d100      	bne.n	8008514 <memcpy+0xc>
 8008512:	4770      	bx	lr
 8008514:	b510      	push	{r4, lr}
 8008516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800851e:	4291      	cmp	r1, r2
 8008520:	d1f9      	bne.n	8008516 <memcpy+0xe>
 8008522:	bd10      	pop	{r4, pc}

08008524 <memset>:
 8008524:	4402      	add	r2, r0
 8008526:	4603      	mov	r3, r0
 8008528:	4293      	cmp	r3, r2
 800852a:	d100      	bne.n	800852e <memset+0xa>
 800852c:	4770      	bx	lr
 800852e:	f803 1b01 	strb.w	r1, [r3], #1
 8008532:	e7f9      	b.n	8008528 <memset+0x4>

08008534 <_free_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4605      	mov	r5, r0
 8008538:	2900      	cmp	r1, #0
 800853a:	d045      	beq.n	80085c8 <_free_r+0x94>
 800853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008540:	1f0c      	subs	r4, r1, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfb8      	it	lt
 8008546:	18e4      	addlt	r4, r4, r3
 8008548:	f002 f9e0 	bl	800a90c <__malloc_lock>
 800854c:	4a1f      	ldr	r2, [pc, #124]	; (80085cc <_free_r+0x98>)
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	4610      	mov	r0, r2
 8008552:	b933      	cbnz	r3, 8008562 <_free_r+0x2e>
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6014      	str	r4, [r2, #0]
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855e:	f002 b9db 	b.w	800a918 <__malloc_unlock>
 8008562:	42a3      	cmp	r3, r4
 8008564:	d90b      	bls.n	800857e <_free_r+0x4a>
 8008566:	6821      	ldr	r1, [r4, #0]
 8008568:	1862      	adds	r2, r4, r1
 800856a:	4293      	cmp	r3, r2
 800856c:	bf04      	itt	eq
 800856e:	681a      	ldreq	r2, [r3, #0]
 8008570:	685b      	ldreq	r3, [r3, #4]
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	bf04      	itt	eq
 8008576:	1852      	addeq	r2, r2, r1
 8008578:	6022      	streq	r2, [r4, #0]
 800857a:	6004      	str	r4, [r0, #0]
 800857c:	e7ec      	b.n	8008558 <_free_r+0x24>
 800857e:	461a      	mov	r2, r3
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	b10b      	cbz	r3, 8008588 <_free_r+0x54>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d9fa      	bls.n	800857e <_free_r+0x4a>
 8008588:	6811      	ldr	r1, [r2, #0]
 800858a:	1850      	adds	r0, r2, r1
 800858c:	42a0      	cmp	r0, r4
 800858e:	d10b      	bne.n	80085a8 <_free_r+0x74>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	4401      	add	r1, r0
 8008594:	1850      	adds	r0, r2, r1
 8008596:	4283      	cmp	r3, r0
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	d1dd      	bne.n	8008558 <_free_r+0x24>
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	6053      	str	r3, [r2, #4]
 80085a2:	4401      	add	r1, r0
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	e7d7      	b.n	8008558 <_free_r+0x24>
 80085a8:	d902      	bls.n	80085b0 <_free_r+0x7c>
 80085aa:	230c      	movs	r3, #12
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	e7d3      	b.n	8008558 <_free_r+0x24>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	1821      	adds	r1, r4, r0
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf04      	itt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	bf04      	itt	eq
 80085c0:	1809      	addeq	r1, r1, r0
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	6054      	str	r4, [r2, #4]
 80085c6:	e7c7      	b.n	8008558 <_free_r+0x24>
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	2000045c 	.word	0x2000045c

080085d0 <_malloc_r>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	1ccd      	adds	r5, r1, #3
 80085d4:	f025 0503 	bic.w	r5, r5, #3
 80085d8:	3508      	adds	r5, #8
 80085da:	2d0c      	cmp	r5, #12
 80085dc:	bf38      	it	cc
 80085de:	250c      	movcc	r5, #12
 80085e0:	2d00      	cmp	r5, #0
 80085e2:	4606      	mov	r6, r0
 80085e4:	db01      	blt.n	80085ea <_malloc_r+0x1a>
 80085e6:	42a9      	cmp	r1, r5
 80085e8:	d903      	bls.n	80085f2 <_malloc_r+0x22>
 80085ea:	230c      	movs	r3, #12
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	2000      	movs	r0, #0
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f2:	f002 f98b 	bl	800a90c <__malloc_lock>
 80085f6:	4921      	ldr	r1, [pc, #132]	; (800867c <_malloc_r+0xac>)
 80085f8:	680a      	ldr	r2, [r1, #0]
 80085fa:	4614      	mov	r4, r2
 80085fc:	b99c      	cbnz	r4, 8008626 <_malloc_r+0x56>
 80085fe:	4f20      	ldr	r7, [pc, #128]	; (8008680 <_malloc_r+0xb0>)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	b923      	cbnz	r3, 800860e <_malloc_r+0x3e>
 8008604:	4621      	mov	r1, r4
 8008606:	4630      	mov	r0, r6
 8008608:	f000 fdc8 	bl	800919c <_sbrk_r>
 800860c:	6038      	str	r0, [r7, #0]
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f000 fdc3 	bl	800919c <_sbrk_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d123      	bne.n	8008662 <_malloc_r+0x92>
 800861a:	230c      	movs	r3, #12
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	4630      	mov	r0, r6
 8008620:	f002 f97a 	bl	800a918 <__malloc_unlock>
 8008624:	e7e3      	b.n	80085ee <_malloc_r+0x1e>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	1b5b      	subs	r3, r3, r5
 800862a:	d417      	bmi.n	800865c <_malloc_r+0x8c>
 800862c:	2b0b      	cmp	r3, #11
 800862e:	d903      	bls.n	8008638 <_malloc_r+0x68>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	441c      	add	r4, r3
 8008634:	6025      	str	r5, [r4, #0]
 8008636:	e004      	b.n	8008642 <_malloc_r+0x72>
 8008638:	6863      	ldr	r3, [r4, #4]
 800863a:	42a2      	cmp	r2, r4
 800863c:	bf0c      	ite	eq
 800863e:	600b      	streq	r3, [r1, #0]
 8008640:	6053      	strne	r3, [r2, #4]
 8008642:	4630      	mov	r0, r6
 8008644:	f002 f968 	bl	800a918 <__malloc_unlock>
 8008648:	f104 000b 	add.w	r0, r4, #11
 800864c:	1d23      	adds	r3, r4, #4
 800864e:	f020 0007 	bic.w	r0, r0, #7
 8008652:	1ac2      	subs	r2, r0, r3
 8008654:	d0cc      	beq.n	80085f0 <_malloc_r+0x20>
 8008656:	1a1b      	subs	r3, r3, r0
 8008658:	50a3      	str	r3, [r4, r2]
 800865a:	e7c9      	b.n	80085f0 <_malloc_r+0x20>
 800865c:	4622      	mov	r2, r4
 800865e:	6864      	ldr	r4, [r4, #4]
 8008660:	e7cc      	b.n	80085fc <_malloc_r+0x2c>
 8008662:	1cc4      	adds	r4, r0, #3
 8008664:	f024 0403 	bic.w	r4, r4, #3
 8008668:	42a0      	cmp	r0, r4
 800866a:	d0e3      	beq.n	8008634 <_malloc_r+0x64>
 800866c:	1a21      	subs	r1, r4, r0
 800866e:	4630      	mov	r0, r6
 8008670:	f000 fd94 	bl	800919c <_sbrk_r>
 8008674:	3001      	adds	r0, #1
 8008676:	d1dd      	bne.n	8008634 <_malloc_r+0x64>
 8008678:	e7cf      	b.n	800861a <_malloc_r+0x4a>
 800867a:	bf00      	nop
 800867c:	2000045c 	.word	0x2000045c
 8008680:	20000460 	.word	0x20000460

08008684 <__cvt>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	461f      	mov	r7, r3
 800868e:	4614      	mov	r4, r2
 8008690:	bfb8      	it	lt
 8008692:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008698:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800869a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800869e:	bfb6      	itet	lt
 80086a0:	461f      	movlt	r7, r3
 80086a2:	2300      	movge	r3, #0
 80086a4:	232d      	movlt	r3, #45	; 0x2d
 80086a6:	7013      	strb	r3, [r2, #0]
 80086a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086aa:	f023 0820 	bic.w	r8, r3, #32
 80086ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086b2:	d005      	beq.n	80086c0 <__cvt+0x3c>
 80086b4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086b8:	d100      	bne.n	80086bc <__cvt+0x38>
 80086ba:	3501      	adds	r5, #1
 80086bc:	2302      	movs	r3, #2
 80086be:	e000      	b.n	80086c2 <__cvt+0x3e>
 80086c0:	2303      	movs	r3, #3
 80086c2:	aa07      	add	r2, sp, #28
 80086c4:	9204      	str	r2, [sp, #16]
 80086c6:	aa06      	add	r2, sp, #24
 80086c8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086cc:	e9cd 3500 	strd	r3, r5, [sp]
 80086d0:	4622      	mov	r2, r4
 80086d2:	463b      	mov	r3, r7
 80086d4:	f001 f8b8 	bl	8009848 <_dtoa_r>
 80086d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086dc:	4606      	mov	r6, r0
 80086de:	d102      	bne.n	80086e6 <__cvt+0x62>
 80086e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e2:	07db      	lsls	r3, r3, #31
 80086e4:	d522      	bpl.n	800872c <__cvt+0xa8>
 80086e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086ea:	eb06 0905 	add.w	r9, r6, r5
 80086ee:	d110      	bne.n	8008712 <__cvt+0x8e>
 80086f0:	7833      	ldrb	r3, [r6, #0]
 80086f2:	2b30      	cmp	r3, #48	; 0x30
 80086f4:	d10a      	bne.n	800870c <__cvt+0x88>
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	4620      	mov	r0, r4
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f8 f9bb 	bl	8000a78 <__aeabi_dcmpeq>
 8008702:	b918      	cbnz	r0, 800870c <__cvt+0x88>
 8008704:	f1c5 0501 	rsb	r5, r5, #1
 8008708:	f8ca 5000 	str.w	r5, [sl]
 800870c:	f8da 3000 	ldr.w	r3, [sl]
 8008710:	4499      	add	r9, r3
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	4620      	mov	r0, r4
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 f9ad 	bl	8000a78 <__aeabi_dcmpeq>
 800871e:	b108      	cbz	r0, 8008724 <__cvt+0xa0>
 8008720:	f8cd 901c 	str.w	r9, [sp, #28]
 8008724:	2230      	movs	r2, #48	; 0x30
 8008726:	9b07      	ldr	r3, [sp, #28]
 8008728:	454b      	cmp	r3, r9
 800872a:	d307      	bcc.n	800873c <__cvt+0xb8>
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008730:	1b9b      	subs	r3, r3, r6
 8008732:	4630      	mov	r0, r6
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	b008      	add	sp, #32
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	1c59      	adds	r1, r3, #1
 800873e:	9107      	str	r1, [sp, #28]
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e7f0      	b.n	8008726 <__cvt+0xa2>

08008744 <__exponent>:
 8008744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008746:	4603      	mov	r3, r0
 8008748:	2900      	cmp	r1, #0
 800874a:	bfb8      	it	lt
 800874c:	4249      	neglt	r1, r1
 800874e:	f803 2b02 	strb.w	r2, [r3], #2
 8008752:	bfb4      	ite	lt
 8008754:	222d      	movlt	r2, #45	; 0x2d
 8008756:	222b      	movge	r2, #43	; 0x2b
 8008758:	2909      	cmp	r1, #9
 800875a:	7042      	strb	r2, [r0, #1]
 800875c:	dd2a      	ble.n	80087b4 <__exponent+0x70>
 800875e:	f10d 0407 	add.w	r4, sp, #7
 8008762:	46a4      	mov	ip, r4
 8008764:	270a      	movs	r7, #10
 8008766:	46a6      	mov	lr, r4
 8008768:	460a      	mov	r2, r1
 800876a:	fb91 f6f7 	sdiv	r6, r1, r7
 800876e:	fb07 1516 	mls	r5, r7, r6, r1
 8008772:	3530      	adds	r5, #48	; 0x30
 8008774:	2a63      	cmp	r2, #99	; 0x63
 8008776:	f104 34ff 	add.w	r4, r4, #4294967295
 800877a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800877e:	4631      	mov	r1, r6
 8008780:	dcf1      	bgt.n	8008766 <__exponent+0x22>
 8008782:	3130      	adds	r1, #48	; 0x30
 8008784:	f1ae 0502 	sub.w	r5, lr, #2
 8008788:	f804 1c01 	strb.w	r1, [r4, #-1]
 800878c:	1c44      	adds	r4, r0, #1
 800878e:	4629      	mov	r1, r5
 8008790:	4561      	cmp	r1, ip
 8008792:	d30a      	bcc.n	80087aa <__exponent+0x66>
 8008794:	f10d 0209 	add.w	r2, sp, #9
 8008798:	eba2 020e 	sub.w	r2, r2, lr
 800879c:	4565      	cmp	r5, ip
 800879e:	bf88      	it	hi
 80087a0:	2200      	movhi	r2, #0
 80087a2:	4413      	add	r3, r2
 80087a4:	1a18      	subs	r0, r3, r0
 80087a6:	b003      	add	sp, #12
 80087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087b2:	e7ed      	b.n	8008790 <__exponent+0x4c>
 80087b4:	2330      	movs	r3, #48	; 0x30
 80087b6:	3130      	adds	r1, #48	; 0x30
 80087b8:	7083      	strb	r3, [r0, #2]
 80087ba:	70c1      	strb	r1, [r0, #3]
 80087bc:	1d03      	adds	r3, r0, #4
 80087be:	e7f1      	b.n	80087a4 <__exponent+0x60>

080087c0 <_printf_float>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	b091      	sub	sp, #68	; 0x44
 80087c6:	460c      	mov	r4, r1
 80087c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80087cc:	4616      	mov	r6, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	4605      	mov	r5, r0
 80087d2:	f002 f81d 	bl	800a810 <_localeconv_r>
 80087d6:	6803      	ldr	r3, [r0, #0]
 80087d8:	9309      	str	r3, [sp, #36]	; 0x24
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f7 fcd0 	bl	8000180 <strlen>
 80087e0:	2300      	movs	r3, #0
 80087e2:	930e      	str	r3, [sp, #56]	; 0x38
 80087e4:	f8d8 3000 	ldr.w	r3, [r8]
 80087e8:	900a      	str	r0, [sp, #40]	; 0x28
 80087ea:	3307      	adds	r3, #7
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	f103 0208 	add.w	r2, r3, #8
 80087f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80087f8:	f8d4 b000 	ldr.w	fp, [r4]
 80087fc:	f8c8 2000 	str.w	r2, [r8]
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008808:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800880c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008810:	930b      	str	r3, [sp, #44]	; 0x2c
 8008812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008814:	4b9c      	ldr	r3, [pc, #624]	; (8008a88 <_printf_float+0x2c8>)
 8008816:	f04f 32ff 	mov.w	r2, #4294967295
 800881a:	4640      	mov	r0, r8
 800881c:	f7f8 f95e 	bl	8000adc <__aeabi_dcmpun>
 8008820:	bb70      	cbnz	r0, 8008880 <_printf_float+0xc0>
 8008822:	4b99      	ldr	r3, [pc, #612]	; (8008a88 <_printf_float+0x2c8>)
 8008824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	4640      	mov	r0, r8
 800882c:	f7f8 f938 	bl	8000aa0 <__aeabi_dcmple>
 8008830:	bb30      	cbnz	r0, 8008880 <_printf_float+0xc0>
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	4640      	mov	r0, r8
 8008838:	4651      	mov	r1, sl
 800883a:	f7f8 f927 	bl	8000a8c <__aeabi_dcmplt>
 800883e:	b110      	cbz	r0, 8008846 <_printf_float+0x86>
 8008840:	232d      	movs	r3, #45	; 0x2d
 8008842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008846:	4b91      	ldr	r3, [pc, #580]	; (8008a8c <_printf_float+0x2cc>)
 8008848:	4891      	ldr	r0, [pc, #580]	; (8008a90 <_printf_float+0x2d0>)
 800884a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800884e:	bf94      	ite	ls
 8008850:	4698      	movls	r8, r3
 8008852:	4680      	movhi	r8, r0
 8008854:	2303      	movs	r3, #3
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	f02b 0304 	bic.w	r3, fp, #4
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	9700      	str	r7, [sp, #0]
 8008864:	4633      	mov	r3, r6
 8008866:	aa0f      	add	r2, sp, #60	; 0x3c
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f9d2 	bl	8008c14 <_printf_common>
 8008870:	3001      	adds	r0, #1
 8008872:	f040 808f 	bne.w	8008994 <_printf_float+0x1d4>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b011      	add	sp, #68	; 0x44
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	4642      	mov	r2, r8
 8008882:	4653      	mov	r3, sl
 8008884:	4640      	mov	r0, r8
 8008886:	4651      	mov	r1, sl
 8008888:	f7f8 f928 	bl	8000adc <__aeabi_dcmpun>
 800888c:	b140      	cbz	r0, 80088a0 <_printf_float+0xe0>
 800888e:	f1ba 0f00 	cmp.w	sl, #0
 8008892:	bfbc      	itt	lt
 8008894:	232d      	movlt	r3, #45	; 0x2d
 8008896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800889a:	487e      	ldr	r0, [pc, #504]	; (8008a94 <_printf_float+0x2d4>)
 800889c:	4b7e      	ldr	r3, [pc, #504]	; (8008a98 <_printf_float+0x2d8>)
 800889e:	e7d4      	b.n	800884a <_printf_float+0x8a>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80088a8:	d142      	bne.n	8008930 <_printf_float+0x170>
 80088aa:	2306      	movs	r3, #6
 80088ac:	6063      	str	r3, [r4, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	9206      	str	r2, [sp, #24]
 80088b2:	aa0e      	add	r2, sp, #56	; 0x38
 80088b4:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80088b8:	aa0d      	add	r2, sp, #52	; 0x34
 80088ba:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80088be:	9203      	str	r2, [sp, #12]
 80088c0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80088c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4642      	mov	r2, r8
 80088d0:	4653      	mov	r3, sl
 80088d2:	4628      	mov	r0, r5
 80088d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80088d6:	f7ff fed5 	bl	8008684 <__cvt>
 80088da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088dc:	2947      	cmp	r1, #71	; 0x47
 80088de:	4680      	mov	r8, r0
 80088e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088e2:	d108      	bne.n	80088f6 <_printf_float+0x136>
 80088e4:	1cc8      	adds	r0, r1, #3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x12e>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	dd40      	ble.n	8008970 <_printf_float+0x1b0>
 80088ee:	f1a9 0902 	sub.w	r9, r9, #2
 80088f2:	fa5f f989 	uxtb.w	r9, r9
 80088f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088fa:	d81f      	bhi.n	800893c <_printf_float+0x17c>
 80088fc:	3901      	subs	r1, #1
 80088fe:	464a      	mov	r2, r9
 8008900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008904:	910d      	str	r1, [sp, #52]	; 0x34
 8008906:	f7ff ff1d 	bl	8008744 <__exponent>
 800890a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890c:	1813      	adds	r3, r2, r0
 800890e:	2a01      	cmp	r2, #1
 8008910:	4682      	mov	sl, r0
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	dc02      	bgt.n	800891c <_printf_float+0x15c>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d2      	lsls	r2, r2, #31
 800891a:	d501      	bpl.n	8008920 <_printf_float+0x160>
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008924:	2b00      	cmp	r3, #0
 8008926:	d09c      	beq.n	8008862 <_printf_float+0xa2>
 8008928:	232d      	movs	r3, #45	; 0x2d
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892e:	e798      	b.n	8008862 <_printf_float+0xa2>
 8008930:	2947      	cmp	r1, #71	; 0x47
 8008932:	d1bc      	bne.n	80088ae <_printf_float+0xee>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ba      	bne.n	80088ae <_printf_float+0xee>
 8008938:	2301      	movs	r3, #1
 800893a:	e7b7      	b.n	80088ac <_printf_float+0xec>
 800893c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008940:	d118      	bne.n	8008974 <_printf_float+0x1b4>
 8008942:	2900      	cmp	r1, #0
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	dd0b      	ble.n	8008960 <_printf_float+0x1a0>
 8008948:	6121      	str	r1, [r4, #16]
 800894a:	b913      	cbnz	r3, 8008952 <_printf_float+0x192>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	07d0      	lsls	r0, r2, #31
 8008950:	d502      	bpl.n	8008958 <_printf_float+0x198>
 8008952:	3301      	adds	r3, #1
 8008954:	440b      	add	r3, r1
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	65a1      	str	r1, [r4, #88]	; 0x58
 800895a:	f04f 0a00 	mov.w	sl, #0
 800895e:	e7df      	b.n	8008920 <_printf_float+0x160>
 8008960:	b913      	cbnz	r3, 8008968 <_printf_float+0x1a8>
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	07d2      	lsls	r2, r2, #31
 8008966:	d501      	bpl.n	800896c <_printf_float+0x1ac>
 8008968:	3302      	adds	r3, #2
 800896a:	e7f4      	b.n	8008956 <_printf_float+0x196>
 800896c:	2301      	movs	r3, #1
 800896e:	e7f2      	b.n	8008956 <_printf_float+0x196>
 8008970:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008976:	4299      	cmp	r1, r3
 8008978:	db05      	blt.n	8008986 <_printf_float+0x1c6>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	6121      	str	r1, [r4, #16]
 800897e:	07d8      	lsls	r0, r3, #31
 8008980:	d5ea      	bpl.n	8008958 <_printf_float+0x198>
 8008982:	1c4b      	adds	r3, r1, #1
 8008984:	e7e7      	b.n	8008956 <_printf_float+0x196>
 8008986:	2900      	cmp	r1, #0
 8008988:	bfd4      	ite	le
 800898a:	f1c1 0202 	rsble	r2, r1, #2
 800898e:	2201      	movgt	r2, #1
 8008990:	4413      	add	r3, r2
 8008992:	e7e0      	b.n	8008956 <_printf_float+0x196>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	055a      	lsls	r2, r3, #21
 8008998:	d407      	bmi.n	80089aa <_printf_float+0x1ea>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	4642      	mov	r2, r8
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	d12b      	bne.n	8008a00 <_printf_float+0x240>
 80089a8:	e765      	b.n	8008876 <_printf_float+0xb6>
 80089aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80089ae:	f240 80dc 	bls.w	8008b6a <_printf_float+0x3aa>
 80089b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089b6:	2200      	movs	r2, #0
 80089b8:	2300      	movs	r3, #0
 80089ba:	f7f8 f85d 	bl	8000a78 <__aeabi_dcmpeq>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d033      	beq.n	8008a2a <_printf_float+0x26a>
 80089c2:	4a36      	ldr	r2, [pc, #216]	; (8008a9c <_printf_float+0x2dc>)
 80089c4:	2301      	movs	r3, #1
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	f43f af52 	beq.w	8008876 <_printf_float+0xb6>
 80089d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089d6:	429a      	cmp	r2, r3
 80089d8:	db02      	blt.n	80089e0 <_printf_float+0x220>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	07d8      	lsls	r0, r3, #31
 80089de:	d50f      	bpl.n	8008a00 <_printf_float+0x240>
 80089e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f af43 	beq.w	8008876 <_printf_float+0xb6>
 80089f0:	f04f 0800 	mov.w	r8, #0
 80089f4:	f104 091a 	add.w	r9, r4, #26
 80089f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fa:	3b01      	subs	r3, #1
 80089fc:	4543      	cmp	r3, r8
 80089fe:	dc09      	bgt.n	8008a14 <_printf_float+0x254>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	079b      	lsls	r3, r3, #30
 8008a04:	f100 8101 	bmi.w	8008c0a <_printf_float+0x44a>
 8008a08:	68e0      	ldr	r0, [r4, #12]
 8008a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	bfb8      	it	lt
 8008a10:	4618      	movlt	r0, r3
 8008a12:	e732      	b.n	800887a <_printf_float+0xba>
 8008a14:	2301      	movs	r3, #1
 8008a16:	464a      	mov	r2, r9
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f af29 	beq.w	8008876 <_printf_float+0xb6>
 8008a24:	f108 0801 	add.w	r8, r8, #1
 8008a28:	e7e6      	b.n	80089f8 <_printf_float+0x238>
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc37      	bgt.n	8008aa0 <_printf_float+0x2e0>
 8008a30:	4a1a      	ldr	r2, [pc, #104]	; (8008a9c <_printf_float+0x2dc>)
 8008a32:	2301      	movs	r3, #1
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f af1b 	beq.w	8008876 <_printf_float+0xb6>
 8008a40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a44:	4313      	orrs	r3, r2
 8008a46:	d102      	bne.n	8008a4e <_printf_float+0x28e>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d5d8      	bpl.n	8008a00 <_printf_float+0x240>
 8008a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	f43f af0c 	beq.w	8008876 <_printf_float+0xb6>
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	f104 0a1a 	add.w	sl, r4, #26
 8008a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a68:	425b      	negs	r3, r3
 8008a6a:	454b      	cmp	r3, r9
 8008a6c:	dc01      	bgt.n	8008a72 <_printf_float+0x2b2>
 8008a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a70:	e794      	b.n	800899c <_printf_float+0x1dc>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4652      	mov	r2, sl
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f43f aefa 	beq.w	8008876 <_printf_float+0xb6>
 8008a82:	f109 0901 	add.w	r9, r9, #1
 8008a86:	e7ee      	b.n	8008a66 <_printf_float+0x2a6>
 8008a88:	7fefffff 	.word	0x7fefffff
 8008a8c:	0800bb68 	.word	0x0800bb68
 8008a90:	0800bb6c 	.word	0x0800bb6c
 8008a94:	0800bb74 	.word	0x0800bb74
 8008a98:	0800bb70 	.word	0x0800bb70
 8008a9c:	0800bb78 	.word	0x0800bb78
 8008aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	bfa8      	it	ge
 8008aa8:	461a      	movge	r2, r3
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	4691      	mov	r9, r2
 8008aae:	dc37      	bgt.n	8008b20 <_printf_float+0x360>
 8008ab0:	f04f 0b00 	mov.w	fp, #0
 8008ab4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ab8:	f104 021a 	add.w	r2, r4, #26
 8008abc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ac0:	ebaa 0309 	sub.w	r3, sl, r9
 8008ac4:	455b      	cmp	r3, fp
 8008ac6:	dc33      	bgt.n	8008b30 <_printf_float+0x370>
 8008ac8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008acc:	429a      	cmp	r2, r3
 8008ace:	db3b      	blt.n	8008b48 <_printf_float+0x388>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	07da      	lsls	r2, r3, #31
 8008ad4:	d438      	bmi.n	8008b48 <_printf_float+0x388>
 8008ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ada:	eba2 030a 	sub.w	r3, r2, sl
 8008ade:	eba2 0901 	sub.w	r9, r2, r1
 8008ae2:	4599      	cmp	r9, r3
 8008ae4:	bfa8      	it	ge
 8008ae6:	4699      	movge	r9, r3
 8008ae8:	f1b9 0f00 	cmp.w	r9, #0
 8008aec:	dc34      	bgt.n	8008b58 <_printf_float+0x398>
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af6:	f104 0a1a 	add.w	sl, r4, #26
 8008afa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	eba3 0309 	sub.w	r3, r3, r9
 8008b04:	4543      	cmp	r3, r8
 8008b06:	f77f af7b 	ble.w	8008a00 <_printf_float+0x240>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	f43f aeae 	beq.w	8008876 <_printf_float+0xb6>
 8008b1a:	f108 0801 	add.w	r8, r8, #1
 8008b1e:	e7ec      	b.n	8008afa <_printf_float+0x33a>
 8008b20:	4613      	mov	r3, r2
 8008b22:	4631      	mov	r1, r6
 8008b24:	4642      	mov	r2, r8
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d1c0      	bne.n	8008ab0 <_printf_float+0x2f0>
 8008b2e:	e6a2      	b.n	8008876 <_printf_float+0xb6>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f ae9b 	beq.w	8008876 <_printf_float+0xb6>
 8008b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b42:	f10b 0b01 	add.w	fp, fp, #1
 8008b46:	e7b9      	b.n	8008abc <_printf_float+0x2fc>
 8008b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	d1bf      	bne.n	8008ad6 <_printf_float+0x316>
 8008b56:	e68e      	b.n	8008876 <_printf_float+0xb6>
 8008b58:	464b      	mov	r3, r9
 8008b5a:	eb08 020a 	add.w	r2, r8, sl
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b8      	blx	r7
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1c2      	bne.n	8008aee <_printf_float+0x32e>
 8008b68:	e685      	b.n	8008876 <_printf_float+0xb6>
 8008b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b6c:	2a01      	cmp	r2, #1
 8008b6e:	dc01      	bgt.n	8008b74 <_printf_float+0x3b4>
 8008b70:	07db      	lsls	r3, r3, #31
 8008b72:	d537      	bpl.n	8008be4 <_printf_float+0x424>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4642      	mov	r2, r8
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f ae79 	beq.w	8008876 <_printf_float+0xb6>
 8008b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f ae71 	beq.w	8008876 <_printf_float+0xb6>
 8008b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f7f7 ff6c 	bl	8000a78 <__aeabi_dcmpeq>
 8008ba0:	b9d8      	cbnz	r0, 8008bda <_printf_float+0x41a>
 8008ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba4:	f108 0201 	add.w	r2, r8, #1
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d10e      	bne.n	8008bd2 <_printf_float+0x412>
 8008bb4:	e65f      	b.n	8008876 <_printf_float+0xb6>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	464a      	mov	r2, r9
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f ae58 	beq.w	8008876 <_printf_float+0xb6>
 8008bc6:	f108 0801 	add.w	r8, r8, #1
 8008bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4543      	cmp	r3, r8
 8008bd0:	dcf1      	bgt.n	8008bb6 <_printf_float+0x3f6>
 8008bd2:	4653      	mov	r3, sl
 8008bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bd8:	e6e1      	b.n	800899e <_printf_float+0x1de>
 8008bda:	f04f 0800 	mov.w	r8, #0
 8008bde:	f104 091a 	add.w	r9, r4, #26
 8008be2:	e7f2      	b.n	8008bca <_printf_float+0x40a>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4642      	mov	r2, r8
 8008be8:	e7df      	b.n	8008baa <_printf_float+0x3ea>
 8008bea:	2301      	movs	r3, #1
 8008bec:	464a      	mov	r2, r9
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f ae3e 	beq.w	8008876 <_printf_float+0xb6>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c02:	1a5b      	subs	r3, r3, r1
 8008c04:	4543      	cmp	r3, r8
 8008c06:	dcf0      	bgt.n	8008bea <_printf_float+0x42a>
 8008c08:	e6fe      	b.n	8008a08 <_printf_float+0x248>
 8008c0a:	f04f 0800 	mov.w	r8, #0
 8008c0e:	f104 0919 	add.w	r9, r4, #25
 8008c12:	e7f4      	b.n	8008bfe <_printf_float+0x43e>

08008c14 <_printf_common>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	4616      	mov	r6, r2
 8008c1a:	4699      	mov	r9, r3
 8008c1c:	688a      	ldr	r2, [r1, #8]
 8008c1e:	690b      	ldr	r3, [r1, #16]
 8008c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	bfb8      	it	lt
 8008c28:	4613      	movlt	r3, r2
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c30:	4607      	mov	r7, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b10a      	cbz	r2, 8008c3a <_printf_common+0x26>
 8008c36:	3301      	adds	r3, #1
 8008c38:	6033      	str	r3, [r6, #0]
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	0699      	lsls	r1, r3, #26
 8008c3e:	bf42      	ittt	mi
 8008c40:	6833      	ldrmi	r3, [r6, #0]
 8008c42:	3302      	addmi	r3, #2
 8008c44:	6033      	strmi	r3, [r6, #0]
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	f015 0506 	ands.w	r5, r5, #6
 8008c4c:	d106      	bne.n	8008c5c <_printf_common+0x48>
 8008c4e:	f104 0a19 	add.w	sl, r4, #25
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	6832      	ldr	r2, [r6, #0]
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	dc26      	bgt.n	8008caa <_printf_common+0x96>
 8008c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c60:	1e13      	subs	r3, r2, #0
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	bf18      	it	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	0692      	lsls	r2, r2, #26
 8008c6a:	d42b      	bmi.n	8008cc4 <_printf_common+0xb0>
 8008c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c70:	4649      	mov	r1, r9
 8008c72:	4638      	mov	r0, r7
 8008c74:	47c0      	blx	r8
 8008c76:	3001      	adds	r0, #1
 8008c78:	d01e      	beq.n	8008cb8 <_printf_common+0xa4>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	68e5      	ldr	r5, [r4, #12]
 8008c7e:	6832      	ldr	r2, [r6, #0]
 8008c80:	f003 0306 	and.w	r3, r3, #6
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	bf08      	it	eq
 8008c88:	1aad      	subeq	r5, r5, r2
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	bf0c      	ite	eq
 8008c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c94:	2500      	movne	r5, #0
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bfc4      	itt	gt
 8008c9a:	1a9b      	subgt	r3, r3, r2
 8008c9c:	18ed      	addgt	r5, r5, r3
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	341a      	adds	r4, #26
 8008ca2:	42b5      	cmp	r5, r6
 8008ca4:	d11a      	bne.n	8008cdc <_printf_common+0xc8>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e008      	b.n	8008cbc <_printf_common+0xa8>
 8008caa:	2301      	movs	r3, #1
 8008cac:	4652      	mov	r2, sl
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	47c0      	blx	r8
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d103      	bne.n	8008cc0 <_printf_common+0xac>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	e7c6      	b.n	8008c52 <_printf_common+0x3e>
 8008cc4:	18e1      	adds	r1, r4, r3
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	2030      	movs	r0, #48	; 0x30
 8008cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cce:	4422      	add	r2, r4
 8008cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd8:	3302      	adds	r3, #2
 8008cda:	e7c7      	b.n	8008c6c <_printf_common+0x58>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	47c0      	blx	r8
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d0e6      	beq.n	8008cb8 <_printf_common+0xa4>
 8008cea:	3601      	adds	r6, #1
 8008cec:	e7d9      	b.n	8008ca2 <_printf_common+0x8e>
	...

08008cf0 <_printf_i>:
 8008cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4691      	mov	r9, r2
 8008cf8:	7e27      	ldrb	r7, [r4, #24]
 8008cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cfc:	2f78      	cmp	r7, #120	; 0x78
 8008cfe:	4680      	mov	r8, r0
 8008d00:	469a      	mov	sl, r3
 8008d02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d06:	d807      	bhi.n	8008d18 <_printf_i+0x28>
 8008d08:	2f62      	cmp	r7, #98	; 0x62
 8008d0a:	d80a      	bhi.n	8008d22 <_printf_i+0x32>
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	f000 80d8 	beq.w	8008ec2 <_printf_i+0x1d2>
 8008d12:	2f58      	cmp	r7, #88	; 0x58
 8008d14:	f000 80a3 	beq.w	8008e5e <_printf_i+0x16e>
 8008d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d20:	e03a      	b.n	8008d98 <_printf_i+0xa8>
 8008d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d26:	2b15      	cmp	r3, #21
 8008d28:	d8f6      	bhi.n	8008d18 <_printf_i+0x28>
 8008d2a:	a001      	add	r0, pc, #4	; (adr r0, 8008d30 <_printf_i+0x40>)
 8008d2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d19 	.word	0x08008d19
 8008d3c:	08008d19 	.word	0x08008d19
 8008d40:	08008d19 	.word	0x08008d19
 8008d44:	08008d19 	.word	0x08008d19
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008d19 	.word	0x08008d19
 8008d50:	08008d19 	.word	0x08008d19
 8008d54:	08008d19 	.word	0x08008d19
 8008d58:	08008d19 	.word	0x08008d19
 8008d5c:	08008ea9 	.word	0x08008ea9
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008e8b 	.word	0x08008e8b
 8008d68:	08008d19 	.word	0x08008d19
 8008d6c:	08008d19 	.word	0x08008d19
 8008d70:	08008ecb 	.word	0x08008ecb
 8008d74:	08008d19 	.word	0x08008d19
 8008d78:	08008dcd 	.word	0x08008dcd
 8008d7c:	08008d19 	.word	0x08008d19
 8008d80:	08008d19 	.word	0x08008d19
 8008d84:	08008e93 	.word	0x08008e93
 8008d88:	680b      	ldr	r3, [r1, #0]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	600a      	str	r2, [r1, #0]
 8008d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0a3      	b.n	8008ee4 <_printf_i+0x1f4>
 8008d9c:	6825      	ldr	r5, [r4, #0]
 8008d9e:	6808      	ldr	r0, [r1, #0]
 8008da0:	062e      	lsls	r6, r5, #24
 8008da2:	f100 0304 	add.w	r3, r0, #4
 8008da6:	d50a      	bpl.n	8008dbe <_printf_i+0xce>
 8008da8:	6805      	ldr	r5, [r0, #0]
 8008daa:	600b      	str	r3, [r1, #0]
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	da03      	bge.n	8008db8 <_printf_i+0xc8>
 8008db0:	232d      	movs	r3, #45	; 0x2d
 8008db2:	426d      	negs	r5, r5
 8008db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db8:	485e      	ldr	r0, [pc, #376]	; (8008f34 <_printf_i+0x244>)
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e019      	b.n	8008df2 <_printf_i+0x102>
 8008dbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dc2:	6805      	ldr	r5, [r0, #0]
 8008dc4:	600b      	str	r3, [r1, #0]
 8008dc6:	bf18      	it	ne
 8008dc8:	b22d      	sxthne	r5, r5
 8008dca:	e7ef      	b.n	8008dac <_printf_i+0xbc>
 8008dcc:	680b      	ldr	r3, [r1, #0]
 8008dce:	6825      	ldr	r5, [r4, #0]
 8008dd0:	1d18      	adds	r0, r3, #4
 8008dd2:	6008      	str	r0, [r1, #0]
 8008dd4:	0628      	lsls	r0, r5, #24
 8008dd6:	d501      	bpl.n	8008ddc <_printf_i+0xec>
 8008dd8:	681d      	ldr	r5, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <_printf_i+0xf2>
 8008ddc:	0669      	lsls	r1, r5, #25
 8008dde:	d5fb      	bpl.n	8008dd8 <_printf_i+0xe8>
 8008de0:	881d      	ldrh	r5, [r3, #0]
 8008de2:	4854      	ldr	r0, [pc, #336]	; (8008f34 <_printf_i+0x244>)
 8008de4:	2f6f      	cmp	r7, #111	; 0x6f
 8008de6:	bf0c      	ite	eq
 8008de8:	2308      	moveq	r3, #8
 8008dea:	230a      	movne	r3, #10
 8008dec:	2100      	movs	r1, #0
 8008dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008df2:	6866      	ldr	r6, [r4, #4]
 8008df4:	60a6      	str	r6, [r4, #8]
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	bfa2      	ittt	ge
 8008dfa:	6821      	ldrge	r1, [r4, #0]
 8008dfc:	f021 0104 	bicge.w	r1, r1, #4
 8008e00:	6021      	strge	r1, [r4, #0]
 8008e02:	b90d      	cbnz	r5, 8008e08 <_printf_i+0x118>
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	d04d      	beq.n	8008ea4 <_printf_i+0x1b4>
 8008e08:	4616      	mov	r6, r2
 8008e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8008e12:	5dc7      	ldrb	r7, [r0, r7]
 8008e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e18:	462f      	mov	r7, r5
 8008e1a:	42bb      	cmp	r3, r7
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	d9f4      	bls.n	8008e0a <_printf_i+0x11a>
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d10b      	bne.n	8008e3c <_printf_i+0x14c>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	07df      	lsls	r7, r3, #31
 8008e28:	d508      	bpl.n	8008e3c <_printf_i+0x14c>
 8008e2a:	6923      	ldr	r3, [r4, #16]
 8008e2c:	6861      	ldr	r1, [r4, #4]
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	bfde      	ittt	le
 8008e32:	2330      	movle	r3, #48	; 0x30
 8008e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e3c:	1b92      	subs	r2, r2, r6
 8008e3e:	6122      	str	r2, [r4, #16]
 8008e40:	f8cd a000 	str.w	sl, [sp]
 8008e44:	464b      	mov	r3, r9
 8008e46:	aa03      	add	r2, sp, #12
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f7ff fee2 	bl	8008c14 <_printf_common>
 8008e50:	3001      	adds	r0, #1
 8008e52:	d14c      	bne.n	8008eee <_printf_i+0x1fe>
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	b004      	add	sp, #16
 8008e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5e:	4835      	ldr	r0, [pc, #212]	; (8008f34 <_printf_i+0x244>)
 8008e60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	680e      	ldr	r6, [r1, #0]
 8008e68:	061f      	lsls	r7, r3, #24
 8008e6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e6e:	600e      	str	r6, [r1, #0]
 8008e70:	d514      	bpl.n	8008e9c <_printf_i+0x1ac>
 8008e72:	07d9      	lsls	r1, r3, #31
 8008e74:	bf44      	itt	mi
 8008e76:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7a:	6023      	strmi	r3, [r4, #0]
 8008e7c:	b91d      	cbnz	r5, 8008e86 <_printf_i+0x196>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f023 0320 	bic.w	r3, r3, #32
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	2310      	movs	r3, #16
 8008e88:	e7b0      	b.n	8008dec <_printf_i+0xfc>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f043 0320 	orr.w	r3, r3, #32
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	2378      	movs	r3, #120	; 0x78
 8008e94:	4828      	ldr	r0, [pc, #160]	; (8008f38 <_printf_i+0x248>)
 8008e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e9a:	e7e3      	b.n	8008e64 <_printf_i+0x174>
 8008e9c:	065e      	lsls	r6, r3, #25
 8008e9e:	bf48      	it	mi
 8008ea0:	b2ad      	uxthmi	r5, r5
 8008ea2:	e7e6      	b.n	8008e72 <_printf_i+0x182>
 8008ea4:	4616      	mov	r6, r2
 8008ea6:	e7bb      	b.n	8008e20 <_printf_i+0x130>
 8008ea8:	680b      	ldr	r3, [r1, #0]
 8008eaa:	6826      	ldr	r6, [r4, #0]
 8008eac:	6960      	ldr	r0, [r4, #20]
 8008eae:	1d1d      	adds	r5, r3, #4
 8008eb0:	600d      	str	r5, [r1, #0]
 8008eb2:	0635      	lsls	r5, r6, #24
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0x1cc>
 8008eb8:	6018      	str	r0, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0x1d2>
 8008ebc:	0671      	lsls	r1, r6, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0x1c8>
 8008ec0:	8018      	strh	r0, [r3, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	4616      	mov	r6, r2
 8008ec8:	e7ba      	b.n	8008e40 <_printf_i+0x150>
 8008eca:	680b      	ldr	r3, [r1, #0]
 8008ecc:	1d1a      	adds	r2, r3, #4
 8008ece:	600a      	str	r2, [r1, #0]
 8008ed0:	681e      	ldr	r6, [r3, #0]
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7f7 f95a 	bl	8000190 <memchr>
 8008edc:	b108      	cbz	r0, 8008ee2 <_printf_i+0x1f2>
 8008ede:	1b80      	subs	r0, r0, r6
 8008ee0:	6060      	str	r0, [r4, #4]
 8008ee2:	6863      	ldr	r3, [r4, #4]
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eec:	e7a8      	b.n	8008e40 <_printf_i+0x150>
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	47d0      	blx	sl
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d0ab      	beq.n	8008e54 <_printf_i+0x164>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	079b      	lsls	r3, r3, #30
 8008f00:	d413      	bmi.n	8008f2a <_printf_i+0x23a>
 8008f02:	68e0      	ldr	r0, [r4, #12]
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	4298      	cmp	r0, r3
 8008f08:	bfb8      	it	lt
 8008f0a:	4618      	movlt	r0, r3
 8008f0c:	e7a4      	b.n	8008e58 <_printf_i+0x168>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4632      	mov	r2, r6
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	47d0      	blx	sl
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d09b      	beq.n	8008e54 <_printf_i+0x164>
 8008f1c:	3501      	adds	r5, #1
 8008f1e:	68e3      	ldr	r3, [r4, #12]
 8008f20:	9903      	ldr	r1, [sp, #12]
 8008f22:	1a5b      	subs	r3, r3, r1
 8008f24:	42ab      	cmp	r3, r5
 8008f26:	dcf2      	bgt.n	8008f0e <_printf_i+0x21e>
 8008f28:	e7eb      	b.n	8008f02 <_printf_i+0x212>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	f104 0619 	add.w	r6, r4, #25
 8008f30:	e7f5      	b.n	8008f1e <_printf_i+0x22e>
 8008f32:	bf00      	nop
 8008f34:	0800bb7a 	.word	0x0800bb7a
 8008f38:	0800bb8b 	.word	0x0800bb8b

08008f3c <_perror_r>:
 8008f3c:	6983      	ldr	r3, [r0, #24]
 8008f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f40:	68c4      	ldr	r4, [r0, #12]
 8008f42:	4605      	mov	r5, r0
 8008f44:	460e      	mov	r6, r1
 8008f46:	b90b      	cbnz	r3, 8008f4c <_perror_r+0x10>
 8008f48:	f001 fbc4 	bl	800a6d4 <__sinit>
 8008f4c:	4b43      	ldr	r3, [pc, #268]	; (800905c <_perror_r+0x120>)
 8008f4e:	429c      	cmp	r4, r3
 8008f50:	d132      	bne.n	8008fb8 <_perror_r+0x7c>
 8008f52:	686c      	ldr	r4, [r5, #4]
 8008f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f56:	07d8      	lsls	r0, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_perror_r+0x2a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	0599      	lsls	r1, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_perror_r+0x2a>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f001 fc5a 	bl	800a81a <__retarget_lock_acquire_recursive>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f001 fae1 	bl	800a530 <_fflush_r>
 8008f6e:	bb6e      	cbnz	r6, 8008fcc <_perror_r+0x90>
 8008f70:	6829      	ldr	r1, [r5, #0]
 8008f72:	ab01      	add	r3, sp, #4
 8008f74:	2201      	movs	r2, #1
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 f920 	bl	80091bc <_strerror_r>
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d14f      	bne.n	8009022 <_perror_r+0xe6>
 8008f82:	4837      	ldr	r0, [pc, #220]	; (8009060 <_perror_r+0x124>)
 8008f84:	4f36      	ldr	r7, [pc, #216]	; (8009060 <_perror_r+0x124>)
 8008f86:	f7f7 f8fb 	bl	8000180 <strlen>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	b156      	cbz	r6, 8008fa4 <_perror_r+0x68>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f001 fb0a 	bl	800a5a8 <fileno>
 8008f94:	4633      	mov	r3, r6
 8008f96:	4601      	mov	r1, r0
 8008f98:	463a      	mov	r2, r7
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 fb48 	bl	8009630 <_write_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	da51      	bge.n	8009048 <_perror_r+0x10c>
 8008fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fae:	07d2      	lsls	r2, r2, #31
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	d54c      	bpl.n	800904e <_perror_r+0x112>
 8008fb4:	b003      	add	sp, #12
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb8:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <_perror_r+0x128>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d101      	bne.n	8008fc2 <_perror_r+0x86>
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	e7c8      	b.n	8008f54 <_perror_r+0x18>
 8008fc2:	4b29      	ldr	r3, [pc, #164]	; (8009068 <_perror_r+0x12c>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	bf08      	it	eq
 8008fc8:	68ec      	ldreq	r4, [r5, #12]
 8008fca:	e7c3      	b.n	8008f54 <_perror_r+0x18>
 8008fcc:	7833      	ldrb	r3, [r6, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ce      	beq.n	8008f70 <_perror_r+0x34>
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7f7 f8d4 	bl	8000180 <strlen>
 8008fd8:	4607      	mov	r7, r0
 8008fda:	b157      	cbz	r7, 8008ff2 <_perror_r+0xb6>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f001 fae3 	bl	800a5a8 <fileno>
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	4632      	mov	r2, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 fb21 	bl	8009630 <_write_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	da14      	bge.n	800901c <_perror_r+0xe0>
 8008ff2:	481e      	ldr	r0, [pc, #120]	; (800906c <_perror_r+0x130>)
 8008ff4:	4f1d      	ldr	r7, [pc, #116]	; (800906c <_perror_r+0x130>)
 8008ff6:	f7f7 f8c3 	bl	8000180 <strlen>
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	2e00      	cmp	r6, #0
 8008ffe:	d0b7      	beq.n	8008f70 <_perror_r+0x34>
 8009000:	4620      	mov	r0, r4
 8009002:	f001 fad1 	bl	800a5a8 <fileno>
 8009006:	4633      	mov	r3, r6
 8009008:	4601      	mov	r1, r0
 800900a:	463a      	mov	r2, r7
 800900c:	4628      	mov	r0, r5
 800900e:	f000 fb0f 	bl	8009630 <_write_r>
 8009012:	2800      	cmp	r0, #0
 8009014:	dbac      	blt.n	8008f70 <_perror_r+0x34>
 8009016:	1a36      	subs	r6, r6, r0
 8009018:	4407      	add	r7, r0
 800901a:	e7ef      	b.n	8008ffc <_perror_r+0xc0>
 800901c:	1a3f      	subs	r7, r7, r0
 800901e:	4406      	add	r6, r0
 8009020:	e7db      	b.n	8008fda <_perror_r+0x9e>
 8009022:	f7f7 f8ad 	bl	8000180 <strlen>
 8009026:	4606      	mov	r6, r0
 8009028:	2e00      	cmp	r6, #0
 800902a:	d0aa      	beq.n	8008f82 <_perror_r+0x46>
 800902c:	4620      	mov	r0, r4
 800902e:	f001 fabb 	bl	800a5a8 <fileno>
 8009032:	4633      	mov	r3, r6
 8009034:	4601      	mov	r1, r0
 8009036:	463a      	mov	r2, r7
 8009038:	4628      	mov	r0, r5
 800903a:	f000 faf9 	bl	8009630 <_write_r>
 800903e:	2800      	cmp	r0, #0
 8009040:	db9f      	blt.n	8008f82 <_perror_r+0x46>
 8009042:	1a36      	subs	r6, r6, r0
 8009044:	4407      	add	r7, r0
 8009046:	e7ef      	b.n	8009028 <_perror_r+0xec>
 8009048:	1a36      	subs	r6, r6, r0
 800904a:	4407      	add	r7, r0
 800904c:	e79e      	b.n	8008f8c <_perror_r+0x50>
 800904e:	059b      	lsls	r3, r3, #22
 8009050:	d4b0      	bmi.n	8008fb4 <_perror_r+0x78>
 8009052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009054:	f001 fbe2 	bl	800a81c <__retarget_lock_release_recursive>
 8009058:	e7ac      	b.n	8008fb4 <_perror_r+0x78>
 800905a:	bf00      	nop
 800905c:	0800c3e8 	.word	0x0800c3e8
 8009060:	0800c5df 	.word	0x0800c5df
 8009064:	0800c408 	.word	0x0800c408
 8009068:	0800c3c8 	.word	0x0800c3c8
 800906c:	0800c5af 	.word	0x0800c5af

08009070 <perror>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <perror+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f7ff bf61 	b.w	8008f3c <_perror_r>
 800907a:	bf00      	nop
 800907c:	2000000c 	.word	0x2000000c

08009080 <iprintf>:
 8009080:	b40f      	push	{r0, r1, r2, r3}
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <iprintf+0x2c>)
 8009084:	b513      	push	{r0, r1, r4, lr}
 8009086:	681c      	ldr	r4, [r3, #0]
 8009088:	b124      	cbz	r4, 8009094 <iprintf+0x14>
 800908a:	69a3      	ldr	r3, [r4, #24]
 800908c:	b913      	cbnz	r3, 8009094 <iprintf+0x14>
 800908e:	4620      	mov	r0, r4
 8009090:	f001 fb20 	bl	800a6d4 <__sinit>
 8009094:	ab05      	add	r3, sp, #20
 8009096:	9a04      	ldr	r2, [sp, #16]
 8009098:	68a1      	ldr	r1, [r4, #8]
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	4620      	mov	r0, r4
 800909e:	f001 fff5 	bl	800b08c <_vfiprintf_r>
 80090a2:	b002      	add	sp, #8
 80090a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a8:	b004      	add	sp, #16
 80090aa:	4770      	bx	lr
 80090ac:	2000000c 	.word	0x2000000c

080090b0 <_puts_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	460e      	mov	r6, r1
 80090b4:	4605      	mov	r5, r0
 80090b6:	b118      	cbz	r0, 80090c0 <_puts_r+0x10>
 80090b8:	6983      	ldr	r3, [r0, #24]
 80090ba:	b90b      	cbnz	r3, 80090c0 <_puts_r+0x10>
 80090bc:	f001 fb0a 	bl	800a6d4 <__sinit>
 80090c0:	69ab      	ldr	r3, [r5, #24]
 80090c2:	68ac      	ldr	r4, [r5, #8]
 80090c4:	b913      	cbnz	r3, 80090cc <_puts_r+0x1c>
 80090c6:	4628      	mov	r0, r5
 80090c8:	f001 fb04 	bl	800a6d4 <__sinit>
 80090cc:	4b2c      	ldr	r3, [pc, #176]	; (8009180 <_puts_r+0xd0>)
 80090ce:	429c      	cmp	r4, r3
 80090d0:	d120      	bne.n	8009114 <_puts_r+0x64>
 80090d2:	686c      	ldr	r4, [r5, #4]
 80090d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d6:	07db      	lsls	r3, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <_puts_r+0x36>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	0598      	lsls	r0, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_puts_r+0x36>
 80090e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e2:	f001 fb9a 	bl	800a81a <__retarget_lock_acquire_recursive>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	0719      	lsls	r1, r3, #28
 80090ea:	d51d      	bpl.n	8009128 <_puts_r+0x78>
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	b1db      	cbz	r3, 8009128 <_puts_r+0x78>
 80090f0:	3e01      	subs	r6, #1
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090f8:	3b01      	subs	r3, #1
 80090fa:	60a3      	str	r3, [r4, #8]
 80090fc:	bb39      	cbnz	r1, 800914e <_puts_r+0x9e>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da38      	bge.n	8009174 <_puts_r+0xc4>
 8009102:	4622      	mov	r2, r4
 8009104:	210a      	movs	r1, #10
 8009106:	4628      	mov	r0, r5
 8009108:	f000 fa40 	bl	800958c <__swbuf_r>
 800910c:	3001      	adds	r0, #1
 800910e:	d011      	beq.n	8009134 <_puts_r+0x84>
 8009110:	250a      	movs	r5, #10
 8009112:	e011      	b.n	8009138 <_puts_r+0x88>
 8009114:	4b1b      	ldr	r3, [pc, #108]	; (8009184 <_puts_r+0xd4>)
 8009116:	429c      	cmp	r4, r3
 8009118:	d101      	bne.n	800911e <_puts_r+0x6e>
 800911a:	68ac      	ldr	r4, [r5, #8]
 800911c:	e7da      	b.n	80090d4 <_puts_r+0x24>
 800911e:	4b1a      	ldr	r3, [pc, #104]	; (8009188 <_puts_r+0xd8>)
 8009120:	429c      	cmp	r4, r3
 8009122:	bf08      	it	eq
 8009124:	68ec      	ldreq	r4, [r5, #12]
 8009126:	e7d5      	b.n	80090d4 <_puts_r+0x24>
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f000 fa92 	bl	8009654 <__swsetup_r>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0dd      	beq.n	80090f0 <_puts_r+0x40>
 8009134:	f04f 35ff 	mov.w	r5, #4294967295
 8009138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800913a:	07da      	lsls	r2, r3, #31
 800913c:	d405      	bmi.n	800914a <_puts_r+0x9a>
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	059b      	lsls	r3, r3, #22
 8009142:	d402      	bmi.n	800914a <_puts_r+0x9a>
 8009144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009146:	f001 fb69 	bl	800a81c <__retarget_lock_release_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	2b00      	cmp	r3, #0
 8009150:	da04      	bge.n	800915c <_puts_r+0xac>
 8009152:	69a2      	ldr	r2, [r4, #24]
 8009154:	429a      	cmp	r2, r3
 8009156:	dc06      	bgt.n	8009166 <_puts_r+0xb6>
 8009158:	290a      	cmp	r1, #10
 800915a:	d004      	beq.n	8009166 <_puts_r+0xb6>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	7019      	strb	r1, [r3, #0]
 8009164:	e7c5      	b.n	80090f2 <_puts_r+0x42>
 8009166:	4622      	mov	r2, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f000 fa0f 	bl	800958c <__swbuf_r>
 800916e:	3001      	adds	r0, #1
 8009170:	d1bf      	bne.n	80090f2 <_puts_r+0x42>
 8009172:	e7df      	b.n	8009134 <_puts_r+0x84>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	250a      	movs	r5, #10
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	6022      	str	r2, [r4, #0]
 800917c:	701d      	strb	r5, [r3, #0]
 800917e:	e7db      	b.n	8009138 <_puts_r+0x88>
 8009180:	0800c3e8 	.word	0x0800c3e8
 8009184:	0800c408 	.word	0x0800c408
 8009188:	0800c3c8 	.word	0x0800c3c8

0800918c <puts>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <puts+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f7ff bf8d 	b.w	80090b0 <_puts_r>
 8009196:	bf00      	nop
 8009198:	2000000c 	.word	0x2000000c

0800919c <_sbrk_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d06      	ldr	r5, [pc, #24]	; (80091b8 <_sbrk_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	f7f8 fb3a 	bl	8001820 <_sbrk>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_sbrk_r+0x1a>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_sbrk_r+0x1a>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	200005e8 	.word	0x200005e8

080091bc <_strerror_r>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	288e      	cmp	r0, #142	; 0x8e
 80091c6:	f200 812f 	bhi.w	8009428 <_strerror_r+0x26c>
 80091ca:	e8df f010 	tbh	[pc, r0, lsl #1]
 80091ce:	0138      	.short	0x0138
 80091d0:	0091008f 	.word	0x0091008f
 80091d4:	00950093 	.word	0x00950093
 80091d8:	00990097 	.word	0x00990097
 80091dc:	009d009b 	.word	0x009d009b
 80091e0:	00a300a1 	.word	0x00a300a1
 80091e4:	00a900a7 	.word	0x00a900a7
 80091e8:	00ad00ab 	.word	0x00ad00ab
 80091ec:	00af012d 	.word	0x00af012d
 80091f0:	00b300b1 	.word	0x00b300b1
 80091f4:	00b700b5 	.word	0x00b700b5
 80091f8:	00bf00bd 	.word	0x00bf00bd
 80091fc:	00c700c5 	.word	0x00c700c5
 8009200:	00cb00c9 	.word	0x00cb00c9
 8009204:	00d100cd 	.word	0x00d100cd
 8009208:	00d700d5 	.word	0x00d700d5
 800920c:	00db00d9 	.word	0x00db00d9
 8009210:	00df00dd 	.word	0x00df00dd
 8009214:	00e300e1 	.word	0x00e300e1
 8009218:	012d012d 	.word	0x012d012d
 800921c:	012d012d 	.word	0x012d012d
 8009220:	012d012d 	.word	0x012d012d
 8009224:	012d012d 	.word	0x012d012d
 8009228:	00eb00e7 	.word	0x00eb00e7
 800922c:	012d012d 	.word	0x012d012d
 8009230:	012d012d 	.word	0x012d012d
 8009234:	012d012d 	.word	0x012d012d
 8009238:	012d012d 	.word	0x012d012d
 800923c:	012d012d 	.word	0x012d012d
 8009240:	012d012d 	.word	0x012d012d
 8009244:	00ed012d 	.word	0x00ed012d
 8009248:	00ef0107 	.word	0x00ef0107
 800924c:	012d00f1 	.word	0x012d00f1
 8009250:	012d012d 	.word	0x012d012d
 8009254:	012d00f3 	.word	0x012d00f3
 8009258:	012d012d 	.word	0x012d012d
 800925c:	012d00f5 	.word	0x012d00f5
 8009260:	00f9012d 	.word	0x00f9012d
 8009264:	012d012d 	.word	0x012d012d
 8009268:	012d00fb 	.word	0x012d00fb
 800926c:	012d012d 	.word	0x012d012d
 8009270:	012d012d 	.word	0x012d012d
 8009274:	012d012d 	.word	0x012d012d
 8009278:	012d012d 	.word	0x012d012d
 800927c:	00fd012d 	.word	0x00fd012d
 8009280:	00ff012d 	.word	0x00ff012d
 8009284:	01030101 	.word	0x01030101
 8009288:	012d012d 	.word	0x012d012d
 800928c:	012d0125 	.word	0x012d0125
 8009290:	012d012d 	.word	0x012d012d
 8009294:	012d012d 	.word	0x012d012d
 8009298:	012d012d 	.word	0x012d012d
 800929c:	0113012d 	.word	0x0113012d
 80092a0:	01090105 	.word	0x01090105
 80092a4:	010d010b 	.word	0x010d010b
 80092a8:	012d010f 	.word	0x012d010f
 80092ac:	01150111 	.word	0x01150111
 80092b0:	00e90119 	.word	0x00e90119
 80092b4:	012b00c1 	.word	0x012b00c1
 80092b8:	00cf00b9 	.word	0x00cf00b9
 80092bc:	009f00bb 	.word	0x009f00bb
 80092c0:	012900a5 	.word	0x012900a5
 80092c4:	012d00f7 	.word	0x012d00f7
 80092c8:	00c30117 	.word	0x00c30117
 80092cc:	011b011d 	.word	0x011b011d
 80092d0:	012d012d 	.word	0x012d012d
 80092d4:	012d012d 	.word	0x012d012d
 80092d8:	00d3012d 	.word	0x00d3012d
 80092dc:	012d012d 	.word	0x012d012d
 80092e0:	00e5012d 	.word	0x00e5012d
 80092e4:	011f0127 	.word	0x011f0127
 80092e8:	01230121 	.word	0x01230121
 80092ec:	4855      	ldr	r0, [pc, #340]	; (8009444 <_strerror_r+0x288>)
 80092ee:	bd10      	pop	{r4, pc}
 80092f0:	4855      	ldr	r0, [pc, #340]	; (8009448 <_strerror_r+0x28c>)
 80092f2:	e7fc      	b.n	80092ee <_strerror_r+0x132>
 80092f4:	4855      	ldr	r0, [pc, #340]	; (800944c <_strerror_r+0x290>)
 80092f6:	e7fa      	b.n	80092ee <_strerror_r+0x132>
 80092f8:	4855      	ldr	r0, [pc, #340]	; (8009450 <_strerror_r+0x294>)
 80092fa:	e7f8      	b.n	80092ee <_strerror_r+0x132>
 80092fc:	4855      	ldr	r0, [pc, #340]	; (8009454 <_strerror_r+0x298>)
 80092fe:	e7f6      	b.n	80092ee <_strerror_r+0x132>
 8009300:	4855      	ldr	r0, [pc, #340]	; (8009458 <_strerror_r+0x29c>)
 8009302:	e7f4      	b.n	80092ee <_strerror_r+0x132>
 8009304:	4855      	ldr	r0, [pc, #340]	; (800945c <_strerror_r+0x2a0>)
 8009306:	e7f2      	b.n	80092ee <_strerror_r+0x132>
 8009308:	4855      	ldr	r0, [pc, #340]	; (8009460 <_strerror_r+0x2a4>)
 800930a:	e7f0      	b.n	80092ee <_strerror_r+0x132>
 800930c:	4855      	ldr	r0, [pc, #340]	; (8009464 <_strerror_r+0x2a8>)
 800930e:	e7ee      	b.n	80092ee <_strerror_r+0x132>
 8009310:	4855      	ldr	r0, [pc, #340]	; (8009468 <_strerror_r+0x2ac>)
 8009312:	e7ec      	b.n	80092ee <_strerror_r+0x132>
 8009314:	4855      	ldr	r0, [pc, #340]	; (800946c <_strerror_r+0x2b0>)
 8009316:	e7ea      	b.n	80092ee <_strerror_r+0x132>
 8009318:	4855      	ldr	r0, [pc, #340]	; (8009470 <_strerror_r+0x2b4>)
 800931a:	e7e8      	b.n	80092ee <_strerror_r+0x132>
 800931c:	4855      	ldr	r0, [pc, #340]	; (8009474 <_strerror_r+0x2b8>)
 800931e:	e7e6      	b.n	80092ee <_strerror_r+0x132>
 8009320:	4855      	ldr	r0, [pc, #340]	; (8009478 <_strerror_r+0x2bc>)
 8009322:	e7e4      	b.n	80092ee <_strerror_r+0x132>
 8009324:	4855      	ldr	r0, [pc, #340]	; (800947c <_strerror_r+0x2c0>)
 8009326:	e7e2      	b.n	80092ee <_strerror_r+0x132>
 8009328:	4855      	ldr	r0, [pc, #340]	; (8009480 <_strerror_r+0x2c4>)
 800932a:	e7e0      	b.n	80092ee <_strerror_r+0x132>
 800932c:	4855      	ldr	r0, [pc, #340]	; (8009484 <_strerror_r+0x2c8>)
 800932e:	e7de      	b.n	80092ee <_strerror_r+0x132>
 8009330:	4855      	ldr	r0, [pc, #340]	; (8009488 <_strerror_r+0x2cc>)
 8009332:	e7dc      	b.n	80092ee <_strerror_r+0x132>
 8009334:	4855      	ldr	r0, [pc, #340]	; (800948c <_strerror_r+0x2d0>)
 8009336:	e7da      	b.n	80092ee <_strerror_r+0x132>
 8009338:	4855      	ldr	r0, [pc, #340]	; (8009490 <_strerror_r+0x2d4>)
 800933a:	e7d8      	b.n	80092ee <_strerror_r+0x132>
 800933c:	4855      	ldr	r0, [pc, #340]	; (8009494 <_strerror_r+0x2d8>)
 800933e:	e7d6      	b.n	80092ee <_strerror_r+0x132>
 8009340:	4855      	ldr	r0, [pc, #340]	; (8009498 <_strerror_r+0x2dc>)
 8009342:	e7d4      	b.n	80092ee <_strerror_r+0x132>
 8009344:	4855      	ldr	r0, [pc, #340]	; (800949c <_strerror_r+0x2e0>)
 8009346:	e7d2      	b.n	80092ee <_strerror_r+0x132>
 8009348:	4855      	ldr	r0, [pc, #340]	; (80094a0 <_strerror_r+0x2e4>)
 800934a:	e7d0      	b.n	80092ee <_strerror_r+0x132>
 800934c:	4855      	ldr	r0, [pc, #340]	; (80094a4 <_strerror_r+0x2e8>)
 800934e:	e7ce      	b.n	80092ee <_strerror_r+0x132>
 8009350:	4855      	ldr	r0, [pc, #340]	; (80094a8 <_strerror_r+0x2ec>)
 8009352:	e7cc      	b.n	80092ee <_strerror_r+0x132>
 8009354:	4855      	ldr	r0, [pc, #340]	; (80094ac <_strerror_r+0x2f0>)
 8009356:	e7ca      	b.n	80092ee <_strerror_r+0x132>
 8009358:	4855      	ldr	r0, [pc, #340]	; (80094b0 <_strerror_r+0x2f4>)
 800935a:	e7c8      	b.n	80092ee <_strerror_r+0x132>
 800935c:	4855      	ldr	r0, [pc, #340]	; (80094b4 <_strerror_r+0x2f8>)
 800935e:	e7c6      	b.n	80092ee <_strerror_r+0x132>
 8009360:	4855      	ldr	r0, [pc, #340]	; (80094b8 <_strerror_r+0x2fc>)
 8009362:	e7c4      	b.n	80092ee <_strerror_r+0x132>
 8009364:	4855      	ldr	r0, [pc, #340]	; (80094bc <_strerror_r+0x300>)
 8009366:	e7c2      	b.n	80092ee <_strerror_r+0x132>
 8009368:	4855      	ldr	r0, [pc, #340]	; (80094c0 <_strerror_r+0x304>)
 800936a:	e7c0      	b.n	80092ee <_strerror_r+0x132>
 800936c:	4855      	ldr	r0, [pc, #340]	; (80094c4 <_strerror_r+0x308>)
 800936e:	e7be      	b.n	80092ee <_strerror_r+0x132>
 8009370:	4855      	ldr	r0, [pc, #340]	; (80094c8 <_strerror_r+0x30c>)
 8009372:	e7bc      	b.n	80092ee <_strerror_r+0x132>
 8009374:	4855      	ldr	r0, [pc, #340]	; (80094cc <_strerror_r+0x310>)
 8009376:	e7ba      	b.n	80092ee <_strerror_r+0x132>
 8009378:	4855      	ldr	r0, [pc, #340]	; (80094d0 <_strerror_r+0x314>)
 800937a:	e7b8      	b.n	80092ee <_strerror_r+0x132>
 800937c:	4855      	ldr	r0, [pc, #340]	; (80094d4 <_strerror_r+0x318>)
 800937e:	e7b6      	b.n	80092ee <_strerror_r+0x132>
 8009380:	4855      	ldr	r0, [pc, #340]	; (80094d8 <_strerror_r+0x31c>)
 8009382:	e7b4      	b.n	80092ee <_strerror_r+0x132>
 8009384:	4855      	ldr	r0, [pc, #340]	; (80094dc <_strerror_r+0x320>)
 8009386:	e7b2      	b.n	80092ee <_strerror_r+0x132>
 8009388:	4855      	ldr	r0, [pc, #340]	; (80094e0 <_strerror_r+0x324>)
 800938a:	e7b0      	b.n	80092ee <_strerror_r+0x132>
 800938c:	4855      	ldr	r0, [pc, #340]	; (80094e4 <_strerror_r+0x328>)
 800938e:	e7ae      	b.n	80092ee <_strerror_r+0x132>
 8009390:	4855      	ldr	r0, [pc, #340]	; (80094e8 <_strerror_r+0x32c>)
 8009392:	e7ac      	b.n	80092ee <_strerror_r+0x132>
 8009394:	4855      	ldr	r0, [pc, #340]	; (80094ec <_strerror_r+0x330>)
 8009396:	e7aa      	b.n	80092ee <_strerror_r+0x132>
 8009398:	4855      	ldr	r0, [pc, #340]	; (80094f0 <_strerror_r+0x334>)
 800939a:	e7a8      	b.n	80092ee <_strerror_r+0x132>
 800939c:	4855      	ldr	r0, [pc, #340]	; (80094f4 <_strerror_r+0x338>)
 800939e:	e7a6      	b.n	80092ee <_strerror_r+0x132>
 80093a0:	4855      	ldr	r0, [pc, #340]	; (80094f8 <_strerror_r+0x33c>)
 80093a2:	e7a4      	b.n	80092ee <_strerror_r+0x132>
 80093a4:	4855      	ldr	r0, [pc, #340]	; (80094fc <_strerror_r+0x340>)
 80093a6:	e7a2      	b.n	80092ee <_strerror_r+0x132>
 80093a8:	4855      	ldr	r0, [pc, #340]	; (8009500 <_strerror_r+0x344>)
 80093aa:	e7a0      	b.n	80092ee <_strerror_r+0x132>
 80093ac:	4855      	ldr	r0, [pc, #340]	; (8009504 <_strerror_r+0x348>)
 80093ae:	e79e      	b.n	80092ee <_strerror_r+0x132>
 80093b0:	4855      	ldr	r0, [pc, #340]	; (8009508 <_strerror_r+0x34c>)
 80093b2:	e79c      	b.n	80092ee <_strerror_r+0x132>
 80093b4:	4855      	ldr	r0, [pc, #340]	; (800950c <_strerror_r+0x350>)
 80093b6:	e79a      	b.n	80092ee <_strerror_r+0x132>
 80093b8:	4855      	ldr	r0, [pc, #340]	; (8009510 <_strerror_r+0x354>)
 80093ba:	e798      	b.n	80092ee <_strerror_r+0x132>
 80093bc:	4855      	ldr	r0, [pc, #340]	; (8009514 <_strerror_r+0x358>)
 80093be:	e796      	b.n	80092ee <_strerror_r+0x132>
 80093c0:	4855      	ldr	r0, [pc, #340]	; (8009518 <_strerror_r+0x35c>)
 80093c2:	e794      	b.n	80092ee <_strerror_r+0x132>
 80093c4:	4855      	ldr	r0, [pc, #340]	; (800951c <_strerror_r+0x360>)
 80093c6:	e792      	b.n	80092ee <_strerror_r+0x132>
 80093c8:	4855      	ldr	r0, [pc, #340]	; (8009520 <_strerror_r+0x364>)
 80093ca:	e790      	b.n	80092ee <_strerror_r+0x132>
 80093cc:	4855      	ldr	r0, [pc, #340]	; (8009524 <_strerror_r+0x368>)
 80093ce:	e78e      	b.n	80092ee <_strerror_r+0x132>
 80093d0:	4855      	ldr	r0, [pc, #340]	; (8009528 <_strerror_r+0x36c>)
 80093d2:	e78c      	b.n	80092ee <_strerror_r+0x132>
 80093d4:	4855      	ldr	r0, [pc, #340]	; (800952c <_strerror_r+0x370>)
 80093d6:	e78a      	b.n	80092ee <_strerror_r+0x132>
 80093d8:	4855      	ldr	r0, [pc, #340]	; (8009530 <_strerror_r+0x374>)
 80093da:	e788      	b.n	80092ee <_strerror_r+0x132>
 80093dc:	4855      	ldr	r0, [pc, #340]	; (8009534 <_strerror_r+0x378>)
 80093de:	e786      	b.n	80092ee <_strerror_r+0x132>
 80093e0:	4855      	ldr	r0, [pc, #340]	; (8009538 <_strerror_r+0x37c>)
 80093e2:	e784      	b.n	80092ee <_strerror_r+0x132>
 80093e4:	4855      	ldr	r0, [pc, #340]	; (800953c <_strerror_r+0x380>)
 80093e6:	e782      	b.n	80092ee <_strerror_r+0x132>
 80093e8:	4855      	ldr	r0, [pc, #340]	; (8009540 <_strerror_r+0x384>)
 80093ea:	e780      	b.n	80092ee <_strerror_r+0x132>
 80093ec:	4855      	ldr	r0, [pc, #340]	; (8009544 <_strerror_r+0x388>)
 80093ee:	e77e      	b.n	80092ee <_strerror_r+0x132>
 80093f0:	4855      	ldr	r0, [pc, #340]	; (8009548 <_strerror_r+0x38c>)
 80093f2:	e77c      	b.n	80092ee <_strerror_r+0x132>
 80093f4:	4855      	ldr	r0, [pc, #340]	; (800954c <_strerror_r+0x390>)
 80093f6:	e77a      	b.n	80092ee <_strerror_r+0x132>
 80093f8:	4855      	ldr	r0, [pc, #340]	; (8009550 <_strerror_r+0x394>)
 80093fa:	e778      	b.n	80092ee <_strerror_r+0x132>
 80093fc:	4855      	ldr	r0, [pc, #340]	; (8009554 <_strerror_r+0x398>)
 80093fe:	e776      	b.n	80092ee <_strerror_r+0x132>
 8009400:	4855      	ldr	r0, [pc, #340]	; (8009558 <_strerror_r+0x39c>)
 8009402:	e774      	b.n	80092ee <_strerror_r+0x132>
 8009404:	4855      	ldr	r0, [pc, #340]	; (800955c <_strerror_r+0x3a0>)
 8009406:	e772      	b.n	80092ee <_strerror_r+0x132>
 8009408:	4855      	ldr	r0, [pc, #340]	; (8009560 <_strerror_r+0x3a4>)
 800940a:	e770      	b.n	80092ee <_strerror_r+0x132>
 800940c:	4855      	ldr	r0, [pc, #340]	; (8009564 <_strerror_r+0x3a8>)
 800940e:	e76e      	b.n	80092ee <_strerror_r+0x132>
 8009410:	4855      	ldr	r0, [pc, #340]	; (8009568 <_strerror_r+0x3ac>)
 8009412:	e76c      	b.n	80092ee <_strerror_r+0x132>
 8009414:	4855      	ldr	r0, [pc, #340]	; (800956c <_strerror_r+0x3b0>)
 8009416:	e76a      	b.n	80092ee <_strerror_r+0x132>
 8009418:	4855      	ldr	r0, [pc, #340]	; (8009570 <_strerror_r+0x3b4>)
 800941a:	e768      	b.n	80092ee <_strerror_r+0x132>
 800941c:	4855      	ldr	r0, [pc, #340]	; (8009574 <_strerror_r+0x3b8>)
 800941e:	e766      	b.n	80092ee <_strerror_r+0x132>
 8009420:	4855      	ldr	r0, [pc, #340]	; (8009578 <_strerror_r+0x3bc>)
 8009422:	e764      	b.n	80092ee <_strerror_r+0x132>
 8009424:	4855      	ldr	r0, [pc, #340]	; (800957c <_strerror_r+0x3c0>)
 8009426:	e762      	b.n	80092ee <_strerror_r+0x132>
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf14      	ite	ne
 800942c:	461a      	movne	r2, r3
 800942e:	4622      	moveq	r2, r4
 8009430:	f000 f8aa 	bl	8009588 <_user_strerror>
 8009434:	4b52      	ldr	r3, [pc, #328]	; (8009580 <_strerror_r+0x3c4>)
 8009436:	2800      	cmp	r0, #0
 8009438:	bf08      	it	eq
 800943a:	4618      	moveq	r0, r3
 800943c:	e757      	b.n	80092ee <_strerror_r+0x132>
 800943e:	4851      	ldr	r0, [pc, #324]	; (8009584 <_strerror_r+0x3c8>)
 8009440:	e755      	b.n	80092ee <_strerror_r+0x132>
 8009442:	bf00      	nop
 8009444:	0800bb9c 	.word	0x0800bb9c
 8009448:	0800bba6 	.word	0x0800bba6
 800944c:	0800bbc0 	.word	0x0800bbc0
 8009450:	0800bbd0 	.word	0x0800bbd0
 8009454:	0800bbe8 	.word	0x0800bbe8
 8009458:	0800bbf2 	.word	0x0800bbf2
 800945c:	0800bc0c 	.word	0x0800bc0c
 8009460:	0800bc1e 	.word	0x0800bc1e
 8009464:	0800bc30 	.word	0x0800bc30
 8009468:	0800bc49 	.word	0x0800bc49
 800946c:	0800bc59 	.word	0x0800bc59
 8009470:	0800bc65 	.word	0x0800bc65
 8009474:	0800bc82 	.word	0x0800bc82
 8009478:	0800bc94 	.word	0x0800bc94
 800947c:	0800bca5 	.word	0x0800bca5
 8009480:	0800bcb7 	.word	0x0800bcb7
 8009484:	0800bcc3 	.word	0x0800bcc3
 8009488:	0800bcdb 	.word	0x0800bcdb
 800948c:	0800bce7 	.word	0x0800bce7
 8009490:	0800bcf9 	.word	0x0800bcf9
 8009494:	0800bd08 	.word	0x0800bd08
 8009498:	0800bd18 	.word	0x0800bd18
 800949c:	0800bd25 	.word	0x0800bd25
 80094a0:	0800bd44 	.word	0x0800bd44
 80094a4:	0800bd53 	.word	0x0800bd53
 80094a8:	0800bd64 	.word	0x0800bd64
 80094ac:	0800bd88 	.word	0x0800bd88
 80094b0:	0800bda6 	.word	0x0800bda6
 80094b4:	0800bdc4 	.word	0x0800bdc4
 80094b8:	0800bde4 	.word	0x0800bde4
 80094bc:	0800bdfb 	.word	0x0800bdfb
 80094c0:	0800be0a 	.word	0x0800be0a
 80094c4:	0800be19 	.word	0x0800be19
 80094c8:	0800be2d 	.word	0x0800be2d
 80094cc:	0800be45 	.word	0x0800be45
 80094d0:	0800be53 	.word	0x0800be53
 80094d4:	0800be60 	.word	0x0800be60
 80094d8:	0800be76 	.word	0x0800be76
 80094dc:	0800be85 	.word	0x0800be85
 80094e0:	0800be91 	.word	0x0800be91
 80094e4:	0800bec0 	.word	0x0800bec0
 80094e8:	0800bed1 	.word	0x0800bed1
 80094ec:	0800beec 	.word	0x0800beec
 80094f0:	0800beff 	.word	0x0800beff
 80094f4:	0800bf15 	.word	0x0800bf15
 80094f8:	0800bf1e 	.word	0x0800bf1e
 80094fc:	0800bf35 	.word	0x0800bf35
 8009500:	0800bf3d 	.word	0x0800bf3d
 8009504:	0800bf4a 	.word	0x0800bf4a
 8009508:	0800bf5f 	.word	0x0800bf5f
 800950c:	0800bf73 	.word	0x0800bf73
 8009510:	0800bf8b 	.word	0x0800bf8b
 8009514:	0800bf9a 	.word	0x0800bf9a
 8009518:	0800bfab 	.word	0x0800bfab
 800951c:	0800bfbe 	.word	0x0800bfbe
 8009520:	0800bfca 	.word	0x0800bfca
 8009524:	0800bfe3 	.word	0x0800bfe3
 8009528:	0800bff7 	.word	0x0800bff7
 800952c:	0800c012 	.word	0x0800c012
 8009530:	0800c02a 	.word	0x0800c02a
 8009534:	0800c044 	.word	0x0800c044
 8009538:	0800c04c 	.word	0x0800c04c
 800953c:	0800c07c 	.word	0x0800c07c
 8009540:	0800c09b 	.word	0x0800c09b
 8009544:	0800c0ba 	.word	0x0800c0ba
 8009548:	0800c0d1 	.word	0x0800c0d1
 800954c:	0800c0e4 	.word	0x0800c0e4
 8009550:	0800c0fd 	.word	0x0800c0fd
 8009554:	0800c114 	.word	0x0800c114
 8009558:	0800c12a 	.word	0x0800c12a
 800955c:	0800c14b 	.word	0x0800c14b
 8009560:	0800c163 	.word	0x0800c163
 8009564:	0800c17f 	.word	0x0800c17f
 8009568:	0800c192 	.word	0x0800c192
 800956c:	0800c1a8 	.word	0x0800c1a8
 8009570:	0800c1bc 	.word	0x0800c1bc
 8009574:	0800c1de 	.word	0x0800c1de
 8009578:	0800c204 	.word	0x0800c204
 800957c:	0800c215 	.word	0x0800c215
 8009580:	0800c5e0 	.word	0x0800c5e0
 8009584:	0800c22a 	.word	0x0800c22a

08009588 <_user_strerror>:
 8009588:	2000      	movs	r0, #0
 800958a:	4770      	bx	lr

0800958c <__swbuf_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	460e      	mov	r6, r1
 8009590:	4614      	mov	r4, r2
 8009592:	4605      	mov	r5, r0
 8009594:	b118      	cbz	r0, 800959e <__swbuf_r+0x12>
 8009596:	6983      	ldr	r3, [r0, #24]
 8009598:	b90b      	cbnz	r3, 800959e <__swbuf_r+0x12>
 800959a:	f001 f89b 	bl	800a6d4 <__sinit>
 800959e:	4b21      	ldr	r3, [pc, #132]	; (8009624 <__swbuf_r+0x98>)
 80095a0:	429c      	cmp	r4, r3
 80095a2:	d12b      	bne.n	80095fc <__swbuf_r+0x70>
 80095a4:	686c      	ldr	r4, [r5, #4]
 80095a6:	69a3      	ldr	r3, [r4, #24]
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	071a      	lsls	r2, r3, #28
 80095ae:	d52f      	bpl.n	8009610 <__swbuf_r+0x84>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	b36b      	cbz	r3, 8009610 <__swbuf_r+0x84>
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	6820      	ldr	r0, [r4, #0]
 80095b8:	1ac0      	subs	r0, r0, r3
 80095ba:	6963      	ldr	r3, [r4, #20]
 80095bc:	b2f6      	uxtb	r6, r6
 80095be:	4283      	cmp	r3, r0
 80095c0:	4637      	mov	r7, r6
 80095c2:	dc04      	bgt.n	80095ce <__swbuf_r+0x42>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 ffb2 	bl	800a530 <_fflush_r>
 80095cc:	bb30      	cbnz	r0, 800961c <__swbuf_r+0x90>
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	701e      	strb	r6, [r3, #0]
 80095dc:	6963      	ldr	r3, [r4, #20]
 80095de:	3001      	adds	r0, #1
 80095e0:	4283      	cmp	r3, r0
 80095e2:	d004      	beq.n	80095ee <__swbuf_r+0x62>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d506      	bpl.n	80095f8 <__swbuf_r+0x6c>
 80095ea:	2e0a      	cmp	r6, #10
 80095ec:	d104      	bne.n	80095f8 <__swbuf_r+0x6c>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	f000 ff9d 	bl	800a530 <_fflush_r>
 80095f6:	b988      	cbnz	r0, 800961c <__swbuf_r+0x90>
 80095f8:	4638      	mov	r0, r7
 80095fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <__swbuf_r+0x9c>)
 80095fe:	429c      	cmp	r4, r3
 8009600:	d101      	bne.n	8009606 <__swbuf_r+0x7a>
 8009602:	68ac      	ldr	r4, [r5, #8]
 8009604:	e7cf      	b.n	80095a6 <__swbuf_r+0x1a>
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <__swbuf_r+0xa0>)
 8009608:	429c      	cmp	r4, r3
 800960a:	bf08      	it	eq
 800960c:	68ec      	ldreq	r4, [r5, #12]
 800960e:	e7ca      	b.n	80095a6 <__swbuf_r+0x1a>
 8009610:	4621      	mov	r1, r4
 8009612:	4628      	mov	r0, r5
 8009614:	f000 f81e 	bl	8009654 <__swsetup_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	d0cb      	beq.n	80095b4 <__swbuf_r+0x28>
 800961c:	f04f 37ff 	mov.w	r7, #4294967295
 8009620:	e7ea      	b.n	80095f8 <__swbuf_r+0x6c>
 8009622:	bf00      	nop
 8009624:	0800c3e8 	.word	0x0800c3e8
 8009628:	0800c408 	.word	0x0800c408
 800962c:	0800c3c8 	.word	0x0800c3c8

08009630 <_write_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d07      	ldr	r5, [pc, #28]	; (8009650 <_write_r+0x20>)
 8009634:	4604      	mov	r4, r0
 8009636:	4608      	mov	r0, r1
 8009638:	4611      	mov	r1, r2
 800963a:	2200      	movs	r2, #0
 800963c:	602a      	str	r2, [r5, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f7f8 f8a2 	bl	8001788 <_write>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_write_r+0x1e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_write_r+0x1e>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	200005e8 	.word	0x200005e8

08009654 <__swsetup_r>:
 8009654:	4b32      	ldr	r3, [pc, #200]	; (8009720 <__swsetup_r+0xcc>)
 8009656:	b570      	push	{r4, r5, r6, lr}
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	4606      	mov	r6, r0
 800965c:	460c      	mov	r4, r1
 800965e:	b125      	cbz	r5, 800966a <__swsetup_r+0x16>
 8009660:	69ab      	ldr	r3, [r5, #24]
 8009662:	b913      	cbnz	r3, 800966a <__swsetup_r+0x16>
 8009664:	4628      	mov	r0, r5
 8009666:	f001 f835 	bl	800a6d4 <__sinit>
 800966a:	4b2e      	ldr	r3, [pc, #184]	; (8009724 <__swsetup_r+0xd0>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d10f      	bne.n	8009690 <__swsetup_r+0x3c>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009678:	0719      	lsls	r1, r3, #28
 800967a:	d42c      	bmi.n	80096d6 <__swsetup_r+0x82>
 800967c:	06dd      	lsls	r5, r3, #27
 800967e:	d411      	bmi.n	80096a4 <__swsetup_r+0x50>
 8009680:	2309      	movs	r3, #9
 8009682:	6033      	str	r3, [r6, #0]
 8009684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	e03e      	b.n	800970e <__swsetup_r+0xba>
 8009690:	4b25      	ldr	r3, [pc, #148]	; (8009728 <__swsetup_r+0xd4>)
 8009692:	429c      	cmp	r4, r3
 8009694:	d101      	bne.n	800969a <__swsetup_r+0x46>
 8009696:	68ac      	ldr	r4, [r5, #8]
 8009698:	e7eb      	b.n	8009672 <__swsetup_r+0x1e>
 800969a:	4b24      	ldr	r3, [pc, #144]	; (800972c <__swsetup_r+0xd8>)
 800969c:	429c      	cmp	r4, r3
 800969e:	bf08      	it	eq
 80096a0:	68ec      	ldreq	r4, [r5, #12]
 80096a2:	e7e6      	b.n	8009672 <__swsetup_r+0x1e>
 80096a4:	0758      	lsls	r0, r3, #29
 80096a6:	d512      	bpl.n	80096ce <__swsetup_r+0x7a>
 80096a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096aa:	b141      	cbz	r1, 80096be <__swsetup_r+0x6a>
 80096ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d002      	beq.n	80096ba <__swsetup_r+0x66>
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7fe ff3d 	bl	8008534 <_free_r>
 80096ba:	2300      	movs	r3, #0
 80096bc:	6363      	str	r3, [r4, #52]	; 0x34
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	f043 0308 	orr.w	r3, r3, #8
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	b94b      	cbnz	r3, 80096ee <__swsetup_r+0x9a>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e4:	d003      	beq.n	80096ee <__swsetup_r+0x9a>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4630      	mov	r0, r6
 80096ea:	f001 f8bd 	bl	800a868 <__smakebuf_r>
 80096ee:	89a0      	ldrh	r0, [r4, #12]
 80096f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096f4:	f010 0301 	ands.w	r3, r0, #1
 80096f8:	d00a      	beq.n	8009710 <__swsetup_r+0xbc>
 80096fa:	2300      	movs	r3, #0
 80096fc:	60a3      	str	r3, [r4, #8]
 80096fe:	6963      	ldr	r3, [r4, #20]
 8009700:	425b      	negs	r3, r3
 8009702:	61a3      	str	r3, [r4, #24]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	b943      	cbnz	r3, 800971a <__swsetup_r+0xc6>
 8009708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800970c:	d1ba      	bne.n	8009684 <__swsetup_r+0x30>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	0781      	lsls	r1, r0, #30
 8009712:	bf58      	it	pl
 8009714:	6963      	ldrpl	r3, [r4, #20]
 8009716:	60a3      	str	r3, [r4, #8]
 8009718:	e7f4      	b.n	8009704 <__swsetup_r+0xb0>
 800971a:	2000      	movs	r0, #0
 800971c:	e7f7      	b.n	800970e <__swsetup_r+0xba>
 800971e:	bf00      	nop
 8009720:	2000000c 	.word	0x2000000c
 8009724:	0800c3e8 	.word	0x0800c3e8
 8009728:	0800c408 	.word	0x0800c408
 800972c:	0800c3c8 	.word	0x0800c3c8

08009730 <quorem>:
 8009730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	6903      	ldr	r3, [r0, #16]
 8009736:	690c      	ldr	r4, [r1, #16]
 8009738:	42a3      	cmp	r3, r4
 800973a:	4607      	mov	r7, r0
 800973c:	f2c0 8081 	blt.w	8009842 <quorem+0x112>
 8009740:	3c01      	subs	r4, #1
 8009742:	f101 0814 	add.w	r8, r1, #20
 8009746:	f100 0514 	add.w	r5, r0, #20
 800974a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009758:	3301      	adds	r3, #1
 800975a:	429a      	cmp	r2, r3
 800975c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009760:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009764:	fbb2 f6f3 	udiv	r6, r2, r3
 8009768:	d331      	bcc.n	80097ce <quorem+0x9e>
 800976a:	f04f 0e00 	mov.w	lr, #0
 800976e:	4640      	mov	r0, r8
 8009770:	46ac      	mov	ip, r5
 8009772:	46f2      	mov	sl, lr
 8009774:	f850 2b04 	ldr.w	r2, [r0], #4
 8009778:	b293      	uxth	r3, r2
 800977a:	fb06 e303 	mla	r3, r6, r3, lr
 800977e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009782:	b29b      	uxth	r3, r3
 8009784:	ebaa 0303 	sub.w	r3, sl, r3
 8009788:	0c12      	lsrs	r2, r2, #16
 800978a:	f8dc a000 	ldr.w	sl, [ip]
 800978e:	fb06 e202 	mla	r2, r6, r2, lr
 8009792:	fa13 f38a 	uxtah	r3, r3, sl
 8009796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800979a:	fa1f fa82 	uxth.w	sl, r2
 800979e:	f8dc 2000 	ldr.w	r2, [ip]
 80097a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80097a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b0:	4581      	cmp	r9, r0
 80097b2:	f84c 3b04 	str.w	r3, [ip], #4
 80097b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097ba:	d2db      	bcs.n	8009774 <quorem+0x44>
 80097bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80097c0:	b92b      	cbnz	r3, 80097ce <quorem+0x9e>
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	429d      	cmp	r5, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	d32e      	bcc.n	800982a <quorem+0xfa>
 80097cc:	613c      	str	r4, [r7, #16]
 80097ce:	4638      	mov	r0, r7
 80097d0:	f001 fb24 	bl	800ae1c <__mcmp>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	db24      	blt.n	8009822 <quorem+0xf2>
 80097d8:	3601      	adds	r6, #1
 80097da:	4628      	mov	r0, r5
 80097dc:	f04f 0c00 	mov.w	ip, #0
 80097e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80097e4:	f8d0 e000 	ldr.w	lr, [r0]
 80097e8:	b293      	uxth	r3, r2
 80097ea:	ebac 0303 	sub.w	r3, ip, r3
 80097ee:	0c12      	lsrs	r2, r2, #16
 80097f0:	fa13 f38e 	uxtah	r3, r3, lr
 80097f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009802:	45c1      	cmp	r9, r8
 8009804:	f840 3b04 	str.w	r3, [r0], #4
 8009808:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800980c:	d2e8      	bcs.n	80097e0 <quorem+0xb0>
 800980e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009816:	b922      	cbnz	r2, 8009822 <quorem+0xf2>
 8009818:	3b04      	subs	r3, #4
 800981a:	429d      	cmp	r5, r3
 800981c:	461a      	mov	r2, r3
 800981e:	d30a      	bcc.n	8009836 <quorem+0x106>
 8009820:	613c      	str	r4, [r7, #16]
 8009822:	4630      	mov	r0, r6
 8009824:	b003      	add	sp, #12
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	3b04      	subs	r3, #4
 800982e:	2a00      	cmp	r2, #0
 8009830:	d1cc      	bne.n	80097cc <quorem+0x9c>
 8009832:	3c01      	subs	r4, #1
 8009834:	e7c7      	b.n	80097c6 <quorem+0x96>
 8009836:	6812      	ldr	r2, [r2, #0]
 8009838:	3b04      	subs	r3, #4
 800983a:	2a00      	cmp	r2, #0
 800983c:	d1f0      	bne.n	8009820 <quorem+0xf0>
 800983e:	3c01      	subs	r4, #1
 8009840:	e7eb      	b.n	800981a <quorem+0xea>
 8009842:	2000      	movs	r0, #0
 8009844:	e7ee      	b.n	8009824 <quorem+0xf4>
	...

08009848 <_dtoa_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800984e:	b099      	sub	sp, #100	; 0x64
 8009850:	4616      	mov	r6, r2
 8009852:	461f      	mov	r7, r3
 8009854:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009858:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800985c:	4605      	mov	r5, r0
 800985e:	b974      	cbnz	r4, 800987e <_dtoa_r+0x36>
 8009860:	2010      	movs	r0, #16
 8009862:	f7fe fe41 	bl	80084e8 <malloc>
 8009866:	4602      	mov	r2, r0
 8009868:	6268      	str	r0, [r5, #36]	; 0x24
 800986a:	b920      	cbnz	r0, 8009876 <_dtoa_r+0x2e>
 800986c:	4ba8      	ldr	r3, [pc, #672]	; (8009b10 <_dtoa_r+0x2c8>)
 800986e:	21ea      	movs	r1, #234	; 0xea
 8009870:	48a8      	ldr	r0, [pc, #672]	; (8009b14 <_dtoa_r+0x2cc>)
 8009872:	f001 fd8b 	bl	800b38c <__assert_func>
 8009876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800987a:	6004      	str	r4, [r0, #0]
 800987c:	60c4      	str	r4, [r0, #12]
 800987e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	b151      	cbz	r1, 800989a <_dtoa_r+0x52>
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	604a      	str	r2, [r1, #4]
 8009888:	2301      	movs	r3, #1
 800988a:	4093      	lsls	r3, r2
 800988c:	608b      	str	r3, [r1, #8]
 800988e:	4628      	mov	r0, r5
 8009890:	f001 f888 	bl	800a9a4 <_Bfree>
 8009894:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009896:	2200      	movs	r2, #0
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	1e3b      	subs	r3, r7, #0
 800989c:	bfb9      	ittee	lt
 800989e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a2:	9305      	strlt	r3, [sp, #20]
 80098a4:	2300      	movge	r3, #0
 80098a6:	f8c8 3000 	strge.w	r3, [r8]
 80098aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80098ae:	4b9a      	ldr	r3, [pc, #616]	; (8009b18 <_dtoa_r+0x2d0>)
 80098b0:	bfbc      	itt	lt
 80098b2:	2201      	movlt	r2, #1
 80098b4:	f8c8 2000 	strlt.w	r2, [r8]
 80098b8:	ea33 0309 	bics.w	r3, r3, r9
 80098bc:	d119      	bne.n	80098f2 <_dtoa_r+0xaa>
 80098be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ca:	4333      	orrs	r3, r6
 80098cc:	f000 8581 	beq.w	800a3d2 <_dtoa_r+0xb8a>
 80098d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098d2:	b953      	cbnz	r3, 80098ea <_dtoa_r+0xa2>
 80098d4:	4b91      	ldr	r3, [pc, #580]	; (8009b1c <_dtoa_r+0x2d4>)
 80098d6:	e022      	b.n	800991e <_dtoa_r+0xd6>
 80098d8:	4b91      	ldr	r3, [pc, #580]	; (8009b20 <_dtoa_r+0x2d8>)
 80098da:	9308      	str	r3, [sp, #32]
 80098dc:	3308      	adds	r3, #8
 80098de:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	9808      	ldr	r0, [sp, #32]
 80098e4:	b019      	add	sp, #100	; 0x64
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	4b8c      	ldr	r3, [pc, #560]	; (8009b1c <_dtoa_r+0x2d4>)
 80098ec:	9308      	str	r3, [sp, #32]
 80098ee:	3303      	adds	r3, #3
 80098f0:	e7f5      	b.n	80098de <_dtoa_r+0x96>
 80098f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098f6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80098fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098fe:	2200      	movs	r2, #0
 8009900:	2300      	movs	r3, #0
 8009902:	f7f7 f8b9 	bl	8000a78 <__aeabi_dcmpeq>
 8009906:	4680      	mov	r8, r0
 8009908:	b158      	cbz	r0, 8009922 <_dtoa_r+0xda>
 800990a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800990c:	2301      	movs	r3, #1
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 855a 	beq.w	800a3cc <_dtoa_r+0xb84>
 8009918:	4882      	ldr	r0, [pc, #520]	; (8009b24 <_dtoa_r+0x2dc>)
 800991a:	6018      	str	r0, [r3, #0]
 800991c:	1e43      	subs	r3, r0, #1
 800991e:	9308      	str	r3, [sp, #32]
 8009920:	e7df      	b.n	80098e2 <_dtoa_r+0x9a>
 8009922:	ab16      	add	r3, sp, #88	; 0x58
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	ab17      	add	r3, sp, #92	; 0x5c
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	4628      	mov	r0, r5
 800992c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009930:	f001 fb1a 	bl	800af68 <__d2b>
 8009934:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009938:	4682      	mov	sl, r0
 800993a:	2c00      	cmp	r4, #0
 800993c:	d07e      	beq.n	8009a3c <_dtoa_r+0x1f4>
 800993e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009940:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800994c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009950:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009954:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009958:	4b73      	ldr	r3, [pc, #460]	; (8009b28 <_dtoa_r+0x2e0>)
 800995a:	2200      	movs	r2, #0
 800995c:	f7f6 fc6c 	bl	8000238 <__aeabi_dsub>
 8009960:	a365      	add	r3, pc, #404	; (adr r3, 8009af8 <_dtoa_r+0x2b0>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fe1f 	bl	80005a8 <__aeabi_dmul>
 800996a:	a365      	add	r3, pc, #404	; (adr r3, 8009b00 <_dtoa_r+0x2b8>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	f7f6 fc64 	bl	800023c <__adddf3>
 8009974:	4606      	mov	r6, r0
 8009976:	4620      	mov	r0, r4
 8009978:	460f      	mov	r7, r1
 800997a:	f7f6 fdab 	bl	80004d4 <__aeabi_i2d>
 800997e:	a362      	add	r3, pc, #392	; (adr r3, 8009b08 <_dtoa_r+0x2c0>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fe10 	bl	80005a8 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f7f6 fc54 	bl	800023c <__adddf3>
 8009994:	4606      	mov	r6, r0
 8009996:	460f      	mov	r7, r1
 8009998:	f7f7 f8b6 	bl	8000b08 <__aeabi_d2iz>
 800999c:	2200      	movs	r2, #0
 800999e:	4681      	mov	r9, r0
 80099a0:	2300      	movs	r3, #0
 80099a2:	4630      	mov	r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	f7f7 f871 	bl	8000a8c <__aeabi_dcmplt>
 80099aa:	b148      	cbz	r0, 80099c0 <_dtoa_r+0x178>
 80099ac:	4648      	mov	r0, r9
 80099ae:	f7f6 fd91 	bl	80004d4 <__aeabi_i2d>
 80099b2:	4632      	mov	r2, r6
 80099b4:	463b      	mov	r3, r7
 80099b6:	f7f7 f85f 	bl	8000a78 <__aeabi_dcmpeq>
 80099ba:	b908      	cbnz	r0, 80099c0 <_dtoa_r+0x178>
 80099bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80099c0:	f1b9 0f16 	cmp.w	r9, #22
 80099c4:	d857      	bhi.n	8009a76 <_dtoa_r+0x22e>
 80099c6:	4b59      	ldr	r3, [pc, #356]	; (8009b2c <_dtoa_r+0x2e4>)
 80099c8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099d4:	f7f7 f85a 	bl	8000a8c <__aeabi_dcmplt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d04e      	beq.n	8009a7a <_dtoa_r+0x232>
 80099dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80099e0:	2300      	movs	r3, #0
 80099e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099e6:	1b1c      	subs	r4, r3, r4
 80099e8:	1e63      	subs	r3, r4, #1
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	bf45      	ittet	mi
 80099ee:	f1c4 0301 	rsbmi	r3, r4, #1
 80099f2:	9306      	strmi	r3, [sp, #24]
 80099f4:	2300      	movpl	r3, #0
 80099f6:	2300      	movmi	r3, #0
 80099f8:	bf4c      	ite	mi
 80099fa:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099fc:	9306      	strpl	r3, [sp, #24]
 80099fe:	f1b9 0f00 	cmp.w	r9, #0
 8009a02:	db3c      	blt.n	8009a7e <_dtoa_r+0x236>
 8009a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a06:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009a0a:	444b      	add	r3, r9
 8009a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0e:	2300      	movs	r3, #0
 8009a10:	930a      	str	r3, [sp, #40]	; 0x28
 8009a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a14:	2b09      	cmp	r3, #9
 8009a16:	f200 808d 	bhi.w	8009b34 <_dtoa_r+0x2ec>
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	bfc4      	itt	gt
 8009a1e:	3b04      	subgt	r3, #4
 8009a20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a24:	f1a3 0302 	sub.w	r3, r3, #2
 8009a28:	bfcc      	ite	gt
 8009a2a:	2400      	movgt	r4, #0
 8009a2c:	2401      	movle	r4, #1
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	f200 808c 	bhi.w	8009b4c <_dtoa_r+0x304>
 8009a34:	e8df f003 	tbb	[pc, r3]
 8009a38:	5b4d4f2d 	.word	0x5b4d4f2d
 8009a3c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009a40:	441c      	add	r4, r3
 8009a42:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	bfc3      	ittte	gt
 8009a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a4e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009a52:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a56:	f1c3 0320 	rsble	r3, r3, #32
 8009a5a:	bfc6      	itte	gt
 8009a5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a60:	4318      	orrgt	r0, r3
 8009a62:	fa06 f003 	lslle.w	r0, r6, r3
 8009a66:	f7f6 fd25 	bl	80004b4 <__aeabi_ui2d>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a70:	3c01      	subs	r4, #1
 8009a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a74:	e770      	b.n	8009958 <_dtoa_r+0x110>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7b3      	b.n	80099e2 <_dtoa_r+0x19a>
 8009a7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a7c:	e7b2      	b.n	80099e4 <_dtoa_r+0x19c>
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	eba3 0309 	sub.w	r3, r3, r9
 8009a84:	9306      	str	r3, [sp, #24]
 8009a86:	f1c9 0300 	rsb	r3, r9, #0
 8009a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8009a90:	e7bf      	b.n	8009a12 <_dtoa_r+0x1ca>
 8009a92:	2300      	movs	r3, #0
 8009a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc5a      	bgt.n	8009b52 <_dtoa_r+0x30a>
 8009a9c:	f04f 0b01 	mov.w	fp, #1
 8009aa0:	f8cd b008 	str.w	fp, [sp, #8]
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009aaa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009aac:	2200      	movs	r2, #0
 8009aae:	6042      	str	r2, [r0, #4]
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	f102 0614 	add.w	r6, r2, #20
 8009ab6:	429e      	cmp	r6, r3
 8009ab8:	6841      	ldr	r1, [r0, #4]
 8009aba:	d950      	bls.n	8009b5e <_dtoa_r+0x316>
 8009abc:	4628      	mov	r0, r5
 8009abe:	f000 ff31 	bl	800a924 <_Balloc>
 8009ac2:	9008      	str	r0, [sp, #32]
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d14e      	bne.n	8009b66 <_dtoa_r+0x31e>
 8009ac8:	4b19      	ldr	r3, [pc, #100]	; (8009b30 <_dtoa_r+0x2e8>)
 8009aca:	4602      	mov	r2, r0
 8009acc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ad0:	e6ce      	b.n	8009870 <_dtoa_r+0x28>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e7de      	b.n	8009a94 <_dtoa_r+0x24c>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009adc:	eb09 0b03 	add.w	fp, r9, r3
 8009ae0:	f10b 0301 	add.w	r3, fp, #1
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	9302      	str	r3, [sp, #8]
 8009ae8:	bfb8      	it	lt
 8009aea:	2301      	movlt	r3, #1
 8009aec:	e7dd      	b.n	8009aaa <_dtoa_r+0x262>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e7f2      	b.n	8009ad8 <_dtoa_r+0x290>
 8009af2:	bf00      	nop
 8009af4:	f3af 8000 	nop.w
 8009af8:	636f4361 	.word	0x636f4361
 8009afc:	3fd287a7 	.word	0x3fd287a7
 8009b00:	8b60c8b3 	.word	0x8b60c8b3
 8009b04:	3fc68a28 	.word	0x3fc68a28
 8009b08:	509f79fb 	.word	0x509f79fb
 8009b0c:	3fd34413 	.word	0x3fd34413
 8009b10:	0800c340 	.word	0x0800c340
 8009b14:	0800c357 	.word	0x0800c357
 8009b18:	7ff00000 	.word	0x7ff00000
 8009b1c:	0800c33c 	.word	0x0800c33c
 8009b20:	0800c333 	.word	0x0800c333
 8009b24:	0800bb79 	.word	0x0800bb79
 8009b28:	3ff80000 	.word	0x3ff80000
 8009b2c:	0800c4c0 	.word	0x0800c4c0
 8009b30:	0800c3b6 	.word	0x0800c3b6
 8009b34:	2401      	movs	r4, #1
 8009b36:	2300      	movs	r3, #0
 8009b38:	9322      	str	r3, [sp, #136]	; 0x88
 8009b3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b3c:	f04f 3bff 	mov.w	fp, #4294967295
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8cd b008 	str.w	fp, [sp, #8]
 8009b46:	2312      	movs	r3, #18
 8009b48:	9223      	str	r2, [sp, #140]	; 0x8c
 8009b4a:	e7ae      	b.n	8009aaa <_dtoa_r+0x262>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b50:	e7f4      	b.n	8009b3c <_dtoa_r+0x2f4>
 8009b52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009b56:	f8cd b008 	str.w	fp, [sp, #8]
 8009b5a:	465b      	mov	r3, fp
 8009b5c:	e7a5      	b.n	8009aaa <_dtoa_r+0x262>
 8009b5e:	3101      	adds	r1, #1
 8009b60:	6041      	str	r1, [r0, #4]
 8009b62:	0052      	lsls	r2, r2, #1
 8009b64:	e7a5      	b.n	8009ab2 <_dtoa_r+0x26a>
 8009b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b68:	9a08      	ldr	r2, [sp, #32]
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	2b0e      	cmp	r3, #14
 8009b70:	f200 80a8 	bhi.w	8009cc4 <_dtoa_r+0x47c>
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	f000 80a5 	beq.w	8009cc4 <_dtoa_r+0x47c>
 8009b7a:	f1b9 0f00 	cmp.w	r9, #0
 8009b7e:	dd34      	ble.n	8009bea <_dtoa_r+0x3a2>
 8009b80:	4a9a      	ldr	r2, [pc, #616]	; (8009dec <_dtoa_r+0x5a4>)
 8009b82:	f009 030f 	and.w	r3, r9, #15
 8009b86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b8e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009b9a:	d016      	beq.n	8009bca <_dtoa_r+0x382>
 8009b9c:	4b94      	ldr	r3, [pc, #592]	; (8009df0 <_dtoa_r+0x5a8>)
 8009b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ba2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ba6:	f7f6 fe29 	bl	80007fc <__aeabi_ddiv>
 8009baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bae:	f004 040f 	and.w	r4, r4, #15
 8009bb2:	2703      	movs	r7, #3
 8009bb4:	4e8e      	ldr	r6, [pc, #568]	; (8009df0 <_dtoa_r+0x5a8>)
 8009bb6:	b954      	cbnz	r4, 8009bce <_dtoa_r+0x386>
 8009bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bc0:	f7f6 fe1c 	bl	80007fc <__aeabi_ddiv>
 8009bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bc8:	e029      	b.n	8009c1e <_dtoa_r+0x3d6>
 8009bca:	2702      	movs	r7, #2
 8009bcc:	e7f2      	b.n	8009bb4 <_dtoa_r+0x36c>
 8009bce:	07e1      	lsls	r1, r4, #31
 8009bd0:	d508      	bpl.n	8009be4 <_dtoa_r+0x39c>
 8009bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bda:	f7f6 fce5 	bl	80005a8 <__aeabi_dmul>
 8009bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009be2:	3701      	adds	r7, #1
 8009be4:	1064      	asrs	r4, r4, #1
 8009be6:	3608      	adds	r6, #8
 8009be8:	e7e5      	b.n	8009bb6 <_dtoa_r+0x36e>
 8009bea:	f000 80a5 	beq.w	8009d38 <_dtoa_r+0x4f0>
 8009bee:	f1c9 0400 	rsb	r4, r9, #0
 8009bf2:	4b7e      	ldr	r3, [pc, #504]	; (8009dec <_dtoa_r+0x5a4>)
 8009bf4:	4e7e      	ldr	r6, [pc, #504]	; (8009df0 <_dtoa_r+0x5a8>)
 8009bf6:	f004 020f 	and.w	r2, r4, #15
 8009bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c06:	f7f6 fccf 	bl	80005a8 <__aeabi_dmul>
 8009c0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c0e:	1124      	asrs	r4, r4, #4
 8009c10:	2300      	movs	r3, #0
 8009c12:	2702      	movs	r7, #2
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	f040 8084 	bne.w	8009d22 <_dtoa_r+0x4da>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d2      	bne.n	8009bc4 <_dtoa_r+0x37c>
 8009c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 808b 	beq.w	8009d3c <_dtoa_r+0x4f4>
 8009c26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c32:	4b70      	ldr	r3, [pc, #448]	; (8009df4 <_dtoa_r+0x5ac>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 ff29 	bl	8000a8c <__aeabi_dcmplt>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d07e      	beq.n	8009d3c <_dtoa_r+0x4f4>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d07b      	beq.n	8009d3c <_dtoa_r+0x4f4>
 8009c44:	f1bb 0f00 	cmp.w	fp, #0
 8009c48:	dd38      	ble.n	8009cbc <_dtoa_r+0x474>
 8009c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c4e:	4b6a      	ldr	r3, [pc, #424]	; (8009df8 <_dtoa_r+0x5b0>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	f7f6 fca9 	bl	80005a8 <__aeabi_dmul>
 8009c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5a:	f109 38ff 	add.w	r8, r9, #4294967295
 8009c5e:	3701      	adds	r7, #1
 8009c60:	465c      	mov	r4, fp
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7f6 fc36 	bl	80004d4 <__aeabi_i2d>
 8009c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c6c:	f7f6 fc9c 	bl	80005a8 <__aeabi_dmul>
 8009c70:	4b62      	ldr	r3, [pc, #392]	; (8009dfc <_dtoa_r+0x5b4>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fae2 	bl	800023c <__adddf3>
 8009c78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c80:	9611      	str	r6, [sp, #68]	; 0x44
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	d15d      	bne.n	8009d42 <_dtoa_r+0x4fa>
 8009c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c8a:	4b5d      	ldr	r3, [pc, #372]	; (8009e00 <_dtoa_r+0x5b8>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f7f6 fad3 	bl	8000238 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c9c:	4633      	mov	r3, r6
 8009c9e:	f7f6 ff13 	bl	8000ac8 <__aeabi_dcmpgt>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f040 829e 	bne.w	800a1e4 <_dtoa_r+0x99c>
 8009ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009cb2:	f7f6 feeb 	bl	8000a8c <__aeabi_dcmplt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f040 8292 	bne.w	800a1e0 <_dtoa_r+0x998>
 8009cbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009cc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f2c0 8153 	blt.w	8009f72 <_dtoa_r+0x72a>
 8009ccc:	f1b9 0f0e 	cmp.w	r9, #14
 8009cd0:	f300 814f 	bgt.w	8009f72 <_dtoa_r+0x72a>
 8009cd4:	4b45      	ldr	r3, [pc, #276]	; (8009dec <_dtoa_r+0x5a4>)
 8009cd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009cda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f280 80db 	bge.w	8009ea0 <_dtoa_r+0x658>
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f300 80d7 	bgt.w	8009ea0 <_dtoa_r+0x658>
 8009cf2:	f040 8274 	bne.w	800a1de <_dtoa_r+0x996>
 8009cf6:	4b42      	ldr	r3, [pc, #264]	; (8009e00 <_dtoa_r+0x5b8>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cfe:	f7f6 fc53 	bl	80005a8 <__aeabi_dmul>
 8009d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d06:	f7f6 fed5 	bl	8000ab4 <__aeabi_dcmpge>
 8009d0a:	9c02      	ldr	r4, [sp, #8]
 8009d0c:	4626      	mov	r6, r4
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 824a 	bne.w	800a1a8 <_dtoa_r+0x960>
 8009d14:	9f08      	ldr	r7, [sp, #32]
 8009d16:	2331      	movs	r3, #49	; 0x31
 8009d18:	f807 3b01 	strb.w	r3, [r7], #1
 8009d1c:	f109 0901 	add.w	r9, r9, #1
 8009d20:	e246      	b.n	800a1b0 <_dtoa_r+0x968>
 8009d22:	07e2      	lsls	r2, r4, #31
 8009d24:	d505      	bpl.n	8009d32 <_dtoa_r+0x4ea>
 8009d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d2a:	f7f6 fc3d 	bl	80005a8 <__aeabi_dmul>
 8009d2e:	3701      	adds	r7, #1
 8009d30:	2301      	movs	r3, #1
 8009d32:	1064      	asrs	r4, r4, #1
 8009d34:	3608      	adds	r6, #8
 8009d36:	e76d      	b.n	8009c14 <_dtoa_r+0x3cc>
 8009d38:	2702      	movs	r7, #2
 8009d3a:	e770      	b.n	8009c1e <_dtoa_r+0x3d6>
 8009d3c:	9c02      	ldr	r4, [sp, #8]
 8009d3e:	46c8      	mov	r8, r9
 8009d40:	e78f      	b.n	8009c62 <_dtoa_r+0x41a>
 8009d42:	9908      	ldr	r1, [sp, #32]
 8009d44:	4b29      	ldr	r3, [pc, #164]	; (8009dec <_dtoa_r+0x5a4>)
 8009d46:	4421      	add	r1, r4
 8009d48:	9112      	str	r1, [sp, #72]	; 0x48
 8009d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	d055      	beq.n	8009e08 <_dtoa_r+0x5c0>
 8009d5c:	4929      	ldr	r1, [pc, #164]	; (8009e04 <_dtoa_r+0x5bc>)
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f7f6 fd4c 	bl	80007fc <__aeabi_ddiv>
 8009d64:	463b      	mov	r3, r7
 8009d66:	4632      	mov	r2, r6
 8009d68:	f7f6 fa66 	bl	8000238 <__aeabi_dsub>
 8009d6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d70:	9f08      	ldr	r7, [sp, #32]
 8009d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d76:	f7f6 fec7 	bl	8000b08 <__aeabi_d2iz>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	f7f6 fbaa 	bl	80004d4 <__aeabi_i2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d88:	f7f6 fa56 	bl	8000238 <__aeabi_dsub>
 8009d8c:	3430      	adds	r4, #48	; 0x30
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d96:	f807 4b01 	strb.w	r4, [r7], #1
 8009d9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d9e:	f7f6 fe75 	bl	8000a8c <__aeabi_dcmplt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d174      	bne.n	8009e90 <_dtoa_r+0x648>
 8009da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009daa:	4912      	ldr	r1, [pc, #72]	; (8009df4 <_dtoa_r+0x5ac>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7f6 fa43 	bl	8000238 <__aeabi_dsub>
 8009db2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009db6:	f7f6 fe69 	bl	8000a8c <__aeabi_dcmplt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 80b6 	bne.w	8009f2c <_dtoa_r+0x6e4>
 8009dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dc2:	429f      	cmp	r7, r3
 8009dc4:	f43f af7a 	beq.w	8009cbc <_dtoa_r+0x474>
 8009dc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <_dtoa_r+0x5b0>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f7f6 fbea 	bl	80005a8 <__aeabi_dmul>
 8009dd4:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <_dtoa_r+0x5b0>)
 8009dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009dda:	2200      	movs	r2, #0
 8009ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009de0:	f7f6 fbe2 	bl	80005a8 <__aeabi_dmul>
 8009de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de8:	e7c3      	b.n	8009d72 <_dtoa_r+0x52a>
 8009dea:	bf00      	nop
 8009dec:	0800c4c0 	.word	0x0800c4c0
 8009df0:	0800c498 	.word	0x0800c498
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	401c0000 	.word	0x401c0000
 8009e00:	40140000 	.word	0x40140000
 8009e04:	3fe00000 	.word	0x3fe00000
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fbcc 	bl	80005a8 <__aeabi_dmul>
 8009e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e16:	9c08      	ldr	r4, [sp, #32]
 8009e18:	9314      	str	r3, [sp, #80]	; 0x50
 8009e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1e:	f7f6 fe73 	bl	8000b08 <__aeabi_d2iz>
 8009e22:	9015      	str	r0, [sp, #84]	; 0x54
 8009e24:	f7f6 fb56 	bl	80004d4 <__aeabi_i2d>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e30:	f7f6 fa02 	bl	8000238 <__aeabi_dsub>
 8009e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e36:	3330      	adds	r3, #48	; 0x30
 8009e38:	f804 3b01 	strb.w	r3, [r4], #1
 8009e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	d124      	bne.n	8009e94 <_dtoa_r+0x64c>
 8009e4a:	4bb2      	ldr	r3, [pc, #712]	; (800a114 <_dtoa_r+0x8cc>)
 8009e4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e50:	f7f6 f9f4 	bl	800023c <__adddf3>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fe34 	bl	8000ac8 <__aeabi_dcmpgt>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d162      	bne.n	8009f2a <_dtoa_r+0x6e2>
 8009e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e68:	49aa      	ldr	r1, [pc, #680]	; (800a114 <_dtoa_r+0x8cc>)
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	f7f6 f9e4 	bl	8000238 <__aeabi_dsub>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fe08 	bl	8000a8c <__aeabi_dcmplt>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f43f af1d 	beq.w	8009cbc <_dtoa_r+0x474>
 8009e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e84:	1e7b      	subs	r3, r7, #1
 8009e86:	9314      	str	r3, [sp, #80]	; 0x50
 8009e88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e8c:	2b30      	cmp	r3, #48	; 0x30
 8009e8e:	d0f8      	beq.n	8009e82 <_dtoa_r+0x63a>
 8009e90:	46c1      	mov	r9, r8
 8009e92:	e03a      	b.n	8009f0a <_dtoa_r+0x6c2>
 8009e94:	4ba0      	ldr	r3, [pc, #640]	; (800a118 <_dtoa_r+0x8d0>)
 8009e96:	f7f6 fb87 	bl	80005a8 <__aeabi_dmul>
 8009e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e9e:	e7bc      	b.n	8009e1a <_dtoa_r+0x5d2>
 8009ea0:	9f08      	ldr	r7, [sp, #32]
 8009ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eaa:	f7f6 fca7 	bl	80007fc <__aeabi_ddiv>
 8009eae:	f7f6 fe2b 	bl	8000b08 <__aeabi_d2iz>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	f7f6 fb0e 	bl	80004d4 <__aeabi_i2d>
 8009eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ebc:	f7f6 fb74 	bl	80005a8 <__aeabi_dmul>
 8009ec0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ecc:	f7f6 f9b4 	bl	8000238 <__aeabi_dsub>
 8009ed0:	f807 6b01 	strb.w	r6, [r7], #1
 8009ed4:	9e08      	ldr	r6, [sp, #32]
 8009ed6:	9b02      	ldr	r3, [sp, #8]
 8009ed8:	1bbe      	subs	r6, r7, r6
 8009eda:	42b3      	cmp	r3, r6
 8009edc:	d13a      	bne.n	8009f54 <_dtoa_r+0x70c>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	f7f6 f9ab 	bl	800023c <__adddf3>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ef2:	f7f6 fde9 	bl	8000ac8 <__aeabi_dcmpgt>
 8009ef6:	bb58      	cbnz	r0, 8009f50 <_dtoa_r+0x708>
 8009ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f00:	f7f6 fdba 	bl	8000a78 <__aeabi_dcmpeq>
 8009f04:	b108      	cbz	r0, 8009f0a <_dtoa_r+0x6c2>
 8009f06:	07e1      	lsls	r1, r4, #31
 8009f08:	d422      	bmi.n	8009f50 <_dtoa_r+0x708>
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4651      	mov	r1, sl
 8009f0e:	f000 fd49 	bl	800a9a4 <_Bfree>
 8009f12:	2300      	movs	r3, #0
 8009f14:	703b      	strb	r3, [r7, #0]
 8009f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f18:	f109 0001 	add.w	r0, r9, #1
 8009f1c:	6018      	str	r0, [r3, #0]
 8009f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f43f acde 	beq.w	80098e2 <_dtoa_r+0x9a>
 8009f26:	601f      	str	r7, [r3, #0]
 8009f28:	e4db      	b.n	80098e2 <_dtoa_r+0x9a>
 8009f2a:	4627      	mov	r7, r4
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	461f      	mov	r7, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a39      	cmp	r2, #57	; 0x39
 8009f36:	d107      	bne.n	8009f48 <_dtoa_r+0x700>
 8009f38:	9a08      	ldr	r2, [sp, #32]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d1f7      	bne.n	8009f2e <_dtoa_r+0x6e6>
 8009f3e:	9908      	ldr	r1, [sp, #32]
 8009f40:	2230      	movs	r2, #48	; 0x30
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	700a      	strb	r2, [r1, #0]
 8009f48:	781a      	ldrb	r2, [r3, #0]
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	e79f      	b.n	8009e90 <_dtoa_r+0x648>
 8009f50:	46c8      	mov	r8, r9
 8009f52:	e7eb      	b.n	8009f2c <_dtoa_r+0x6e4>
 8009f54:	4b70      	ldr	r3, [pc, #448]	; (800a118 <_dtoa_r+0x8d0>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	f7f6 fb26 	bl	80005a8 <__aeabi_dmul>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	f7f6 fd86 	bl	8000a78 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d098      	beq.n	8009ea2 <_dtoa_r+0x65a>
 8009f70:	e7cb      	b.n	8009f0a <_dtoa_r+0x6c2>
 8009f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80d1 	beq.w	800a11c <_dtoa_r+0x8d4>
 8009f7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f7c:	2a01      	cmp	r2, #1
 8009f7e:	f300 80af 	bgt.w	800a0e0 <_dtoa_r+0x898>
 8009f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	f000 80a7 	beq.w	800a0d8 <_dtoa_r+0x890>
 8009f8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f90:	9f06      	ldr	r7, [sp, #24]
 8009f92:	9a06      	ldr	r2, [sp, #24]
 8009f94:	441a      	add	r2, r3
 8009f96:	9206      	str	r2, [sp, #24]
 8009f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	441a      	add	r2, r3
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa2:	f000 fdb9 	bl	800ab18 <__i2b>
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	dd0c      	ble.n	8009fc6 <_dtoa_r+0x77e>
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dd09      	ble.n	8009fc6 <_dtoa_r+0x77e>
 8009fb2:	42bb      	cmp	r3, r7
 8009fb4:	9a06      	ldr	r2, [sp, #24]
 8009fb6:	bfa8      	it	ge
 8009fb8:	463b      	movge	r3, r7
 8009fba:	1ad2      	subs	r2, r2, r3
 8009fbc:	9206      	str	r2, [sp, #24]
 8009fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc0:	1aff      	subs	r7, r7, r3
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	b1f3      	cbz	r3, 800a008 <_dtoa_r+0x7c0>
 8009fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80a9 	beq.w	800a124 <_dtoa_r+0x8dc>
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	dd10      	ble.n	8009ff8 <_dtoa_r+0x7b0>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4622      	mov	r2, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fe58 	bl	800ac90 <__pow5mult>
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 fdac 	bl	800ab44 <__multiply>
 8009fec:	4651      	mov	r1, sl
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 fcd7 	bl	800a9a4 <_Bfree>
 8009ff6:	46c2      	mov	sl, r8
 8009ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffa:	1b1a      	subs	r2, r3, r4
 8009ffc:	d004      	beq.n	800a008 <_dtoa_r+0x7c0>
 8009ffe:	4651      	mov	r1, sl
 800a000:	4628      	mov	r0, r5
 800a002:	f000 fe45 	bl	800ac90 <__pow5mult>
 800a006:	4682      	mov	sl, r0
 800a008:	2101      	movs	r1, #1
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 fd84 	bl	800ab18 <__i2b>
 800a010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a012:	2b00      	cmp	r3, #0
 800a014:	4604      	mov	r4, r0
 800a016:	f340 8087 	ble.w	800a128 <_dtoa_r+0x8e0>
 800a01a:	461a      	mov	r2, r3
 800a01c:	4601      	mov	r1, r0
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 fe36 	bl	800ac90 <__pow5mult>
 800a024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a026:	2b01      	cmp	r3, #1
 800a028:	4604      	mov	r4, r0
 800a02a:	f340 8080 	ble.w	800a12e <_dtoa_r+0x8e6>
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a038:	6918      	ldr	r0, [r3, #16]
 800a03a:	f000 fd1f 	bl	800aa7c <__hi0bits>
 800a03e:	f1c0 0020 	rsb	r0, r0, #32
 800a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a044:	4418      	add	r0, r3
 800a046:	f010 001f 	ands.w	r0, r0, #31
 800a04a:	f000 8092 	beq.w	800a172 <_dtoa_r+0x92a>
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	2b04      	cmp	r3, #4
 800a054:	f340 808a 	ble.w	800a16c <_dtoa_r+0x924>
 800a058:	f1c0 001c 	rsb	r0, r0, #28
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	4403      	add	r3, r0
 800a060:	9306      	str	r3, [sp, #24]
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	4403      	add	r3, r0
 800a066:	4407      	add	r7, r0
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dd05      	ble.n	800a07c <_dtoa_r+0x834>
 800a070:	4651      	mov	r1, sl
 800a072:	461a      	mov	r2, r3
 800a074:	4628      	mov	r0, r5
 800a076:	f000 fe65 	bl	800ad44 <__lshift>
 800a07a:	4682      	mov	sl, r0
 800a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd05      	ble.n	800a08e <_dtoa_r+0x846>
 800a082:	4621      	mov	r1, r4
 800a084:	461a      	mov	r2, r3
 800a086:	4628      	mov	r0, r5
 800a088:	f000 fe5c 	bl	800ad44 <__lshift>
 800a08c:	4604      	mov	r4, r0
 800a08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d070      	beq.n	800a176 <_dtoa_r+0x92e>
 800a094:	4621      	mov	r1, r4
 800a096:	4650      	mov	r0, sl
 800a098:	f000 fec0 	bl	800ae1c <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	da6a      	bge.n	800a176 <_dtoa_r+0x92e>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4651      	mov	r1, sl
 800a0a4:	220a      	movs	r2, #10
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 fc9e 	bl	800a9e8 <__multadd>
 800a0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8193 	beq.w	800a3e0 <_dtoa_r+0xb98>
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	2300      	movs	r3, #0
 800a0be:	220a      	movs	r2, #10
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 fc91 	bl	800a9e8 <__multadd>
 800a0c6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	f300 8093 	bgt.w	800a1f6 <_dtoa_r+0x9ae>
 800a0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	dc57      	bgt.n	800a186 <_dtoa_r+0x93e>
 800a0d6:	e08e      	b.n	800a1f6 <_dtoa_r+0x9ae>
 800a0d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0de:	e756      	b.n	8009f8e <_dtoa_r+0x746>
 800a0e0:	9b02      	ldr	r3, [sp, #8]
 800a0e2:	1e5c      	subs	r4, r3, #1
 800a0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	bfbf      	itttt	lt
 800a0ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a0ee:	1ae2      	sublt	r2, r4, r3
 800a0f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0f2:	bfb6      	itet	lt
 800a0f4:	189b      	addlt	r3, r3, r2
 800a0f6:	1b1c      	subge	r4, r3, r4
 800a0f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	bfb8      	it	lt
 800a0fe:	2400      	movlt	r4, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	bfb9      	ittee	lt
 800a104:	9b06      	ldrlt	r3, [sp, #24]
 800a106:	9a02      	ldrlt	r2, [sp, #8]
 800a108:	9f06      	ldrge	r7, [sp, #24]
 800a10a:	9b02      	ldrge	r3, [sp, #8]
 800a10c:	bfbc      	itt	lt
 800a10e:	1a9f      	sublt	r7, r3, r2
 800a110:	2300      	movlt	r3, #0
 800a112:	e73e      	b.n	8009f92 <_dtoa_r+0x74a>
 800a114:	3fe00000 	.word	0x3fe00000
 800a118:	40240000 	.word	0x40240000
 800a11c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a11e:	9f06      	ldr	r7, [sp, #24]
 800a120:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a122:	e741      	b.n	8009fa8 <_dtoa_r+0x760>
 800a124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a126:	e76a      	b.n	8009ffe <_dtoa_r+0x7b6>
 800a128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	dc19      	bgt.n	800a162 <_dtoa_r+0x91a>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	b9bb      	cbnz	r3, 800a162 <_dtoa_r+0x91a>
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a138:	b99b      	cbnz	r3, 800a162 <_dtoa_r+0x91a>
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a140:	0d1b      	lsrs	r3, r3, #20
 800a142:	051b      	lsls	r3, r3, #20
 800a144:	b183      	cbz	r3, 800a168 <_dtoa_r+0x920>
 800a146:	9b06      	ldr	r3, [sp, #24]
 800a148:	3301      	adds	r3, #1
 800a14a:	9306      	str	r3, [sp, #24]
 800a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14e:	3301      	adds	r3, #1
 800a150:	9309      	str	r3, [sp, #36]	; 0x24
 800a152:	f04f 0801 	mov.w	r8, #1
 800a156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f af6a 	bne.w	800a032 <_dtoa_r+0x7ea>
 800a15e:	2001      	movs	r0, #1
 800a160:	e76f      	b.n	800a042 <_dtoa_r+0x7fa>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	e7f6      	b.n	800a156 <_dtoa_r+0x90e>
 800a168:	4698      	mov	r8, r3
 800a16a:	e7f4      	b.n	800a156 <_dtoa_r+0x90e>
 800a16c:	f43f af7d 	beq.w	800a06a <_dtoa_r+0x822>
 800a170:	4618      	mov	r0, r3
 800a172:	301c      	adds	r0, #28
 800a174:	e772      	b.n	800a05c <_dtoa_r+0x814>
 800a176:	9b02      	ldr	r3, [sp, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dc36      	bgt.n	800a1ea <_dtoa_r+0x9a2>
 800a17c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dd33      	ble.n	800a1ea <_dtoa_r+0x9a2>
 800a182:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	d10d      	bne.n	800a1a8 <_dtoa_r+0x960>
 800a18c:	4621      	mov	r1, r4
 800a18e:	465b      	mov	r3, fp
 800a190:	2205      	movs	r2, #5
 800a192:	4628      	mov	r0, r5
 800a194:	f000 fc28 	bl	800a9e8 <__multadd>
 800a198:	4601      	mov	r1, r0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4650      	mov	r0, sl
 800a19e:	f000 fe3d 	bl	800ae1c <__mcmp>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f73f adb6 	bgt.w	8009d14 <_dtoa_r+0x4cc>
 800a1a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1aa:	9f08      	ldr	r7, [sp, #32]
 800a1ac:	ea6f 0903 	mvn.w	r9, r3
 800a1b0:	f04f 0800 	mov.w	r8, #0
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 fbf4 	bl	800a9a4 <_Bfree>
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	f43f aea4 	beq.w	8009f0a <_dtoa_r+0x6c2>
 800a1c2:	f1b8 0f00 	cmp.w	r8, #0
 800a1c6:	d005      	beq.n	800a1d4 <_dtoa_r+0x98c>
 800a1c8:	45b0      	cmp	r8, r6
 800a1ca:	d003      	beq.n	800a1d4 <_dtoa_r+0x98c>
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fbe8 	bl	800a9a4 <_Bfree>
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 fbe4 	bl	800a9a4 <_Bfree>
 800a1dc:	e695      	b.n	8009f0a <_dtoa_r+0x6c2>
 800a1de:	2400      	movs	r4, #0
 800a1e0:	4626      	mov	r6, r4
 800a1e2:	e7e1      	b.n	800a1a8 <_dtoa_r+0x960>
 800a1e4:	46c1      	mov	r9, r8
 800a1e6:	4626      	mov	r6, r4
 800a1e8:	e594      	b.n	8009d14 <_dtoa_r+0x4cc>
 800a1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80fc 	beq.w	800a3ee <_dtoa_r+0xba6>
 800a1f6:	2f00      	cmp	r7, #0
 800a1f8:	dd05      	ble.n	800a206 <_dtoa_r+0x9be>
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	463a      	mov	r2, r7
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fda0 	bl	800ad44 <__lshift>
 800a204:	4606      	mov	r6, r0
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	d05c      	beq.n	800a2c6 <_dtoa_r+0xa7e>
 800a20c:	6871      	ldr	r1, [r6, #4]
 800a20e:	4628      	mov	r0, r5
 800a210:	f000 fb88 	bl	800a924 <_Balloc>
 800a214:	4607      	mov	r7, r0
 800a216:	b928      	cbnz	r0, 800a224 <_dtoa_r+0x9dc>
 800a218:	4b7f      	ldr	r3, [pc, #508]	; (800a418 <_dtoa_r+0xbd0>)
 800a21a:	4602      	mov	r2, r0
 800a21c:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a220:	f7ff bb26 	b.w	8009870 <_dtoa_r+0x28>
 800a224:	6932      	ldr	r2, [r6, #16]
 800a226:	3202      	adds	r2, #2
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	f106 010c 	add.w	r1, r6, #12
 800a22e:	300c      	adds	r0, #12
 800a230:	f7fe f96a 	bl	8008508 <memcpy>
 800a234:	2201      	movs	r2, #1
 800a236:	4639      	mov	r1, r7
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fd83 	bl	800ad44 <__lshift>
 800a23e:	9b08      	ldr	r3, [sp, #32]
 800a240:	3301      	adds	r3, #1
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	9b08      	ldr	r3, [sp, #32]
 800a246:	445b      	add	r3, fp
 800a248:	930a      	str	r3, [sp, #40]	; 0x28
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	46b0      	mov	r8, r6
 800a252:	9309      	str	r3, [sp, #36]	; 0x24
 800a254:	4606      	mov	r6, r0
 800a256:	9b02      	ldr	r3, [sp, #8]
 800a258:	4621      	mov	r1, r4
 800a25a:	4650      	mov	r0, sl
 800a25c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a260:	f7ff fa66 	bl	8009730 <quorem>
 800a264:	4603      	mov	r3, r0
 800a266:	3330      	adds	r3, #48	; 0x30
 800a268:	9004      	str	r0, [sp, #16]
 800a26a:	4641      	mov	r1, r8
 800a26c:	4650      	mov	r0, sl
 800a26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a270:	f000 fdd4 	bl	800ae1c <__mcmp>
 800a274:	4632      	mov	r2, r6
 800a276:	9006      	str	r0, [sp, #24]
 800a278:	4621      	mov	r1, r4
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 fdea 	bl	800ae54 <__mdiff>
 800a280:	68c2      	ldr	r2, [r0, #12]
 800a282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a284:	4607      	mov	r7, r0
 800a286:	bb02      	cbnz	r2, 800a2ca <_dtoa_r+0xa82>
 800a288:	4601      	mov	r1, r0
 800a28a:	4650      	mov	r0, sl
 800a28c:	f000 fdc6 	bl	800ae1c <__mcmp>
 800a290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a292:	4602      	mov	r2, r0
 800a294:	4639      	mov	r1, r7
 800a296:	4628      	mov	r0, r5
 800a298:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a29c:	f000 fb82 	bl	800a9a4 <_Bfree>
 800a2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a4:	9f02      	ldr	r7, [sp, #8]
 800a2a6:	ea43 0102 	orr.w	r1, r3, r2
 800a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b0:	d10d      	bne.n	800a2ce <_dtoa_r+0xa86>
 800a2b2:	2b39      	cmp	r3, #57	; 0x39
 800a2b4:	d027      	beq.n	800a306 <_dtoa_r+0xabe>
 800a2b6:	9a06      	ldr	r2, [sp, #24]
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	dd01      	ble.n	800a2c0 <_dtoa_r+0xa78>
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	3331      	adds	r3, #49	; 0x31
 800a2c0:	f88b 3000 	strb.w	r3, [fp]
 800a2c4:	e776      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	e7b9      	b.n	800a23e <_dtoa_r+0x9f6>
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	e7e2      	b.n	800a294 <_dtoa_r+0xa4c>
 800a2ce:	9906      	ldr	r1, [sp, #24]
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	db04      	blt.n	800a2de <_dtoa_r+0xa96>
 800a2d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a2d6:	4301      	orrs	r1, r0
 800a2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2da:	4301      	orrs	r1, r0
 800a2dc:	d120      	bne.n	800a320 <_dtoa_r+0xad8>
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	ddee      	ble.n	800a2c0 <_dtoa_r+0xa78>
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	9302      	str	r3, [sp, #8]
 800a2ea:	f000 fd2b 	bl	800ad44 <__lshift>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	f000 fd93 	bl	800ae1c <__mcmp>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	dc02      	bgt.n	800a302 <_dtoa_r+0xaba>
 800a2fc:	d1e0      	bne.n	800a2c0 <_dtoa_r+0xa78>
 800a2fe:	07da      	lsls	r2, r3, #31
 800a300:	d5de      	bpl.n	800a2c0 <_dtoa_r+0xa78>
 800a302:	2b39      	cmp	r3, #57	; 0x39
 800a304:	d1da      	bne.n	800a2bc <_dtoa_r+0xa74>
 800a306:	2339      	movs	r3, #57	; 0x39
 800a308:	f88b 3000 	strb.w	r3, [fp]
 800a30c:	463b      	mov	r3, r7
 800a30e:	461f      	mov	r7, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a316:	2a39      	cmp	r2, #57	; 0x39
 800a318:	d050      	beq.n	800a3bc <_dtoa_r+0xb74>
 800a31a:	3201      	adds	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	e749      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a320:	2a00      	cmp	r2, #0
 800a322:	dd03      	ble.n	800a32c <_dtoa_r+0xae4>
 800a324:	2b39      	cmp	r3, #57	; 0x39
 800a326:	d0ee      	beq.n	800a306 <_dtoa_r+0xabe>
 800a328:	3301      	adds	r3, #1
 800a32a:	e7c9      	b.n	800a2c0 <_dtoa_r+0xa78>
 800a32c:	9a02      	ldr	r2, [sp, #8]
 800a32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a330:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a334:	428a      	cmp	r2, r1
 800a336:	d02a      	beq.n	800a38e <_dtoa_r+0xb46>
 800a338:	4651      	mov	r1, sl
 800a33a:	2300      	movs	r3, #0
 800a33c:	220a      	movs	r2, #10
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 fb52 	bl	800a9e8 <__multadd>
 800a344:	45b0      	cmp	r8, r6
 800a346:	4682      	mov	sl, r0
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	f04f 020a 	mov.w	r2, #10
 800a350:	4641      	mov	r1, r8
 800a352:	4628      	mov	r0, r5
 800a354:	d107      	bne.n	800a366 <_dtoa_r+0xb1e>
 800a356:	f000 fb47 	bl	800a9e8 <__multadd>
 800a35a:	4680      	mov	r8, r0
 800a35c:	4606      	mov	r6, r0
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	3301      	adds	r3, #1
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	e777      	b.n	800a256 <_dtoa_r+0xa0e>
 800a366:	f000 fb3f 	bl	800a9e8 <__multadd>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4680      	mov	r8, r0
 800a36e:	2300      	movs	r3, #0
 800a370:	220a      	movs	r2, #10
 800a372:	4628      	mov	r0, r5
 800a374:	f000 fb38 	bl	800a9e8 <__multadd>
 800a378:	4606      	mov	r6, r0
 800a37a:	e7f0      	b.n	800a35e <_dtoa_r+0xb16>
 800a37c:	f1bb 0f00 	cmp.w	fp, #0
 800a380:	9a08      	ldr	r2, [sp, #32]
 800a382:	bfcc      	ite	gt
 800a384:	465f      	movgt	r7, fp
 800a386:	2701      	movle	r7, #1
 800a388:	4417      	add	r7, r2
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	4651      	mov	r1, sl
 800a390:	2201      	movs	r2, #1
 800a392:	4628      	mov	r0, r5
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	f000 fcd5 	bl	800ad44 <__lshift>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4682      	mov	sl, r0
 800a39e:	f000 fd3d 	bl	800ae1c <__mcmp>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	dcb2      	bgt.n	800a30c <_dtoa_r+0xac4>
 800a3a6:	d102      	bne.n	800a3ae <_dtoa_r+0xb66>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d4ae      	bmi.n	800a30c <_dtoa_r+0xac4>
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	461f      	mov	r7, r3
 800a3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3b6:	2a30      	cmp	r2, #48	; 0x30
 800a3b8:	d0fa      	beq.n	800a3b0 <_dtoa_r+0xb68>
 800a3ba:	e6fb      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a3bc:	9a08      	ldr	r2, [sp, #32]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d1a5      	bne.n	800a30e <_dtoa_r+0xac6>
 800a3c2:	2331      	movs	r3, #49	; 0x31
 800a3c4:	f109 0901 	add.w	r9, r9, #1
 800a3c8:	7013      	strb	r3, [r2, #0]
 800a3ca:	e6f3      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a3cc:	4b13      	ldr	r3, [pc, #76]	; (800a41c <_dtoa_r+0xbd4>)
 800a3ce:	f7ff baa6 	b.w	800991e <_dtoa_r+0xd6>
 800a3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f47f aa7f 	bne.w	80098d8 <_dtoa_r+0x90>
 800a3da:	4b11      	ldr	r3, [pc, #68]	; (800a420 <_dtoa_r+0xbd8>)
 800a3dc:	f7ff ba9f 	b.w	800991e <_dtoa_r+0xd6>
 800a3e0:	f1bb 0f00 	cmp.w	fp, #0
 800a3e4:	dc03      	bgt.n	800a3ee <_dtoa_r+0xba6>
 800a3e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	f73f aecc 	bgt.w	800a186 <_dtoa_r+0x93e>
 800a3ee:	9f08      	ldr	r7, [sp, #32]
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	f7ff f99c 	bl	8009730 <quorem>
 800a3f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a400:	9a08      	ldr	r2, [sp, #32]
 800a402:	1aba      	subs	r2, r7, r2
 800a404:	4593      	cmp	fp, r2
 800a406:	ddb9      	ble.n	800a37c <_dtoa_r+0xb34>
 800a408:	4651      	mov	r1, sl
 800a40a:	2300      	movs	r3, #0
 800a40c:	220a      	movs	r2, #10
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 faea 	bl	800a9e8 <__multadd>
 800a414:	4682      	mov	sl, r0
 800a416:	e7eb      	b.n	800a3f0 <_dtoa_r+0xba8>
 800a418:	0800c3b6 	.word	0x0800c3b6
 800a41c:	0800bb78 	.word	0x0800bb78
 800a420:	0800c333 	.word	0x0800c333

0800a424 <__sflush_r>:
 800a424:	898a      	ldrh	r2, [r1, #12]
 800a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	0710      	lsls	r0, r2, #28
 800a42e:	460c      	mov	r4, r1
 800a430:	d458      	bmi.n	800a4e4 <__sflush_r+0xc0>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc05      	bgt.n	800a444 <__sflush_r+0x20>
 800a438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc02      	bgt.n	800a444 <__sflush_r+0x20>
 800a43e:	2000      	movs	r0, #0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0f9      	beq.n	800a43e <__sflush_r+0x1a>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	d032      	beq.n	800a4bc <__sflush_r+0x98>
 800a456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	075a      	lsls	r2, r3, #29
 800a45c:	d505      	bpl.n	800a46a <__sflush_r+0x46>
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	1ac0      	subs	r0, r0, r3
 800a462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a464:	b10b      	cbz	r3, 800a46a <__sflush_r+0x46>
 800a466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a468:	1ac0      	subs	r0, r0, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	4602      	mov	r2, r0
 800a46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a470:	6a21      	ldr	r1, [r4, #32]
 800a472:	4628      	mov	r0, r5
 800a474:	47b0      	blx	r6
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	d106      	bne.n	800a48a <__sflush_r+0x66>
 800a47c:	6829      	ldr	r1, [r5, #0]
 800a47e:	291d      	cmp	r1, #29
 800a480:	d82c      	bhi.n	800a4dc <__sflush_r+0xb8>
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <__sflush_r+0x108>)
 800a484:	40ca      	lsrs	r2, r1
 800a486:	07d6      	lsls	r6, r2, #31
 800a488:	d528      	bpl.n	800a4dc <__sflush_r+0xb8>
 800a48a:	2200      	movs	r2, #0
 800a48c:	6062      	str	r2, [r4, #4]
 800a48e:	04d9      	lsls	r1, r3, #19
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	d504      	bpl.n	800a4a0 <__sflush_r+0x7c>
 800a496:	1c42      	adds	r2, r0, #1
 800a498:	d101      	bne.n	800a49e <__sflush_r+0x7a>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b903      	cbnz	r3, 800a4a0 <__sflush_r+0x7c>
 800a49e:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a2:	602f      	str	r7, [r5, #0]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d0ca      	beq.n	800a43e <__sflush_r+0x1a>
 800a4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <__sflush_r+0x92>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7fe f83f 	bl	8008534 <_free_r>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ba:	e7c1      	b.n	800a440 <__sflush_r+0x1c>
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c7      	bne.n	800a458 <__sflush_r+0x34>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c4      	beq.n	800a458 <__sflush_r+0x34>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xb2>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb6>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b1      	b.n	800a43e <__sflush_r+0x1a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ad      	b.n	800a440 <__sflush_r+0x1c>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0a9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	680e      	ldr	r6, [r1, #0]
 800a4ee:	bf08      	it	eq
 800a4f0:	694b      	ldreq	r3, [r1, #20]
 800a4f2:	600f      	str	r7, [r1, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	eba6 0807 	sub.w	r8, r6, r7
 800a4fc:	608b      	str	r3, [r1, #8]
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	dd9c      	ble.n	800a43e <__sflush_r+0x1a>
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a508:	4643      	mov	r3, r8
 800a50a:	463a      	mov	r2, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	2800      	cmp	r0, #0
 800a512:	dc06      	bgt.n	800a522 <__sflush_r+0xfe>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e78e      	b.n	800a440 <__sflush_r+0x1c>
 800a522:	4407      	add	r7, r0
 800a524:	eba8 0800 	sub.w	r8, r8, r0
 800a528:	e7e9      	b.n	800a4fe <__sflush_r+0xda>
 800a52a:	bf00      	nop
 800a52c:	20400001 	.word	0x20400001

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6983      	ldr	r3, [r0, #24]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f000 f8c5 	bl	800a6d4 <__sinit>
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <_fflush_r+0x6c>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d11b      	bne.n	800a588 <_fflush_r+0x58>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ef      	beq.n	800a53a <_fflush_r+0xa>
 800a55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a55c:	07d0      	lsls	r0, r2, #31
 800a55e:	d404      	bmi.n	800a56a <_fflush_r+0x3a>
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <_fflush_r+0x3a>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f000 f958 	bl	800a81a <__retarget_lock_acquire_recursive>
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7ff ff59 	bl	800a424 <__sflush_r>
 800a572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a574:	07da      	lsls	r2, r3, #31
 800a576:	4605      	mov	r5, r0
 800a578:	d4e0      	bmi.n	800a53c <_fflush_r+0xc>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	059b      	lsls	r3, r3, #22
 800a57e:	d4dd      	bmi.n	800a53c <_fflush_r+0xc>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f000 f94b 	bl	800a81c <__retarget_lock_release_recursive>
 800a586:	e7d9      	b.n	800a53c <_fflush_r+0xc>
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_fflush_r+0x70>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d101      	bne.n	800a592 <_fflush_r+0x62>
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	e7df      	b.n	800a552 <_fflush_r+0x22>
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <_fflush_r+0x74>)
 800a594:	429c      	cmp	r4, r3
 800a596:	bf08      	it	eq
 800a598:	68ec      	ldreq	r4, [r5, #12]
 800a59a:	e7da      	b.n	800a552 <_fflush_r+0x22>
 800a59c:	0800c3e8 	.word	0x0800c3e8
 800a5a0:	0800c408 	.word	0x0800c408
 800a5a4:	0800c3c8 	.word	0x0800c3c8

0800a5a8 <fileno>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4e1a      	ldr	r6, [pc, #104]	; (800a614 <fileno+0x6c>)
 800a5ac:	6835      	ldr	r5, [r6, #0]
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	b125      	cbz	r5, 800a5bc <fileno+0x14>
 800a5b2:	69ab      	ldr	r3, [r5, #24]
 800a5b4:	b913      	cbnz	r3, 800a5bc <fileno+0x14>
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 f88c 	bl	800a6d4 <__sinit>
 800a5bc:	4b16      	ldr	r3, [pc, #88]	; (800a618 <fileno+0x70>)
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d118      	bne.n	800a5f4 <fileno+0x4c>
 800a5c2:	686c      	ldr	r4, [r5, #4]
 800a5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c6:	07d8      	lsls	r0, r3, #31
 800a5c8:	d405      	bmi.n	800a5d6 <fileno+0x2e>
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	0599      	lsls	r1, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <fileno+0x2e>
 800a5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d2:	f000 f922 	bl	800a81a <__retarget_lock_acquire_recursive>
 800a5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5da:	b1ab      	cbz	r3, 800a608 <fileno+0x60>
 800a5dc:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800a5e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5e2:	07d2      	lsls	r2, r2, #31
 800a5e4:	d404      	bmi.n	800a5f0 <fileno+0x48>
 800a5e6:	059b      	lsls	r3, r3, #22
 800a5e8:	d402      	bmi.n	800a5f0 <fileno+0x48>
 800a5ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ec:	f000 f916 	bl	800a81c <__retarget_lock_release_recursive>
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	4b09      	ldr	r3, [pc, #36]	; (800a61c <fileno+0x74>)
 800a5f6:	429c      	cmp	r4, r3
 800a5f8:	d101      	bne.n	800a5fe <fileno+0x56>
 800a5fa:	68ac      	ldr	r4, [r5, #8]
 800a5fc:	e7e2      	b.n	800a5c4 <fileno+0x1c>
 800a5fe:	4b08      	ldr	r3, [pc, #32]	; (800a620 <fileno+0x78>)
 800a600:	429c      	cmp	r4, r3
 800a602:	bf08      	it	eq
 800a604:	68ec      	ldreq	r4, [r5, #12]
 800a606:	e7dd      	b.n	800a5c4 <fileno+0x1c>
 800a608:	6832      	ldr	r2, [r6, #0]
 800a60a:	2109      	movs	r1, #9
 800a60c:	6011      	str	r1, [r2, #0]
 800a60e:	f04f 35ff 	mov.w	r5, #4294967295
 800a612:	e7e5      	b.n	800a5e0 <fileno+0x38>
 800a614:	2000000c 	.word	0x2000000c
 800a618:	0800c3e8 	.word	0x0800c3e8
 800a61c:	0800c408 	.word	0x0800c408
 800a620:	0800c3c8 	.word	0x0800c3c8

0800a624 <std>:
 800a624:	2300      	movs	r3, #0
 800a626:	b510      	push	{r4, lr}
 800a628:	4604      	mov	r4, r0
 800a62a:	e9c0 3300 	strd	r3, r3, [r0]
 800a62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a632:	6083      	str	r3, [r0, #8]
 800a634:	8181      	strh	r1, [r0, #12]
 800a636:	6643      	str	r3, [r0, #100]	; 0x64
 800a638:	81c2      	strh	r2, [r0, #14]
 800a63a:	6183      	str	r3, [r0, #24]
 800a63c:	4619      	mov	r1, r3
 800a63e:	2208      	movs	r2, #8
 800a640:	305c      	adds	r0, #92	; 0x5c
 800a642:	f7fd ff6f 	bl	8008524 <memset>
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <std+0x38>)
 800a648:	6263      	str	r3, [r4, #36]	; 0x24
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <std+0x3c>)
 800a64c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <std+0x40>)
 800a650:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a652:	4b05      	ldr	r3, [pc, #20]	; (800a668 <std+0x44>)
 800a654:	6224      	str	r4, [r4, #32]
 800a656:	6323      	str	r3, [r4, #48]	; 0x30
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	bf00      	nop
 800a65c:	0800b2ed 	.word	0x0800b2ed
 800a660:	0800b30f 	.word	0x0800b30f
 800a664:	0800b347 	.word	0x0800b347
 800a668:	0800b36b 	.word	0x0800b36b

0800a66c <_cleanup_r>:
 800a66c:	4901      	ldr	r1, [pc, #4]	; (800a674 <_cleanup_r+0x8>)
 800a66e:	f000 b8af 	b.w	800a7d0 <_fwalk_reent>
 800a672:	bf00      	nop
 800a674:	0800a531 	.word	0x0800a531

0800a678 <__sfmoreglue>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	1e4a      	subs	r2, r1, #1
 800a67c:	2568      	movs	r5, #104	; 0x68
 800a67e:	4355      	muls	r5, r2
 800a680:	460e      	mov	r6, r1
 800a682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a686:	f7fd ffa3 	bl	80085d0 <_malloc_r>
 800a68a:	4604      	mov	r4, r0
 800a68c:	b140      	cbz	r0, 800a6a0 <__sfmoreglue+0x28>
 800a68e:	2100      	movs	r1, #0
 800a690:	e9c0 1600 	strd	r1, r6, [r0]
 800a694:	300c      	adds	r0, #12
 800a696:	60a0      	str	r0, [r4, #8]
 800a698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a69c:	f7fd ff42 	bl	8008524 <memset>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}

0800a6a4 <__sfp_lock_acquire>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__sfp_lock_acquire+0x8>)
 800a6a6:	f000 b8b8 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	200005e4 	.word	0x200005e4

0800a6b0 <__sfp_lock_release>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	; (800a6b8 <__sfp_lock_release+0x8>)
 800a6b2:	f000 b8b3 	b.w	800a81c <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	200005e4 	.word	0x200005e4

0800a6bc <__sinit_lock_acquire>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <__sinit_lock_acquire+0x8>)
 800a6be:	f000 b8ac 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	200005df 	.word	0x200005df

0800a6c8 <__sinit_lock_release>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__sinit_lock_release+0x8>)
 800a6ca:	f000 b8a7 	b.w	800a81c <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	200005df 	.word	0x200005df

0800a6d4 <__sinit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	f7ff fff0 	bl	800a6bc <__sinit_lock_acquire>
 800a6dc:	69a3      	ldr	r3, [r4, #24]
 800a6de:	b11b      	cbz	r3, 800a6e8 <__sinit+0x14>
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f7ff bff0 	b.w	800a6c8 <__sinit_lock_release>
 800a6e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <__sinit+0x68>)
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <__sinit+0x6c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	bf04      	itt	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	61a3      	streq	r3, [r4, #24]
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 f820 	bl	800a744 <__sfp>
 800a704:	6060      	str	r0, [r4, #4]
 800a706:	4620      	mov	r0, r4
 800a708:	f000 f81c 	bl	800a744 <__sfp>
 800a70c:	60a0      	str	r0, [r4, #8]
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 f818 	bl	800a744 <__sfp>
 800a714:	2200      	movs	r2, #0
 800a716:	60e0      	str	r0, [r4, #12]
 800a718:	2104      	movs	r1, #4
 800a71a:	6860      	ldr	r0, [r4, #4]
 800a71c:	f7ff ff82 	bl	800a624 <std>
 800a720:	68a0      	ldr	r0, [r4, #8]
 800a722:	2201      	movs	r2, #1
 800a724:	2109      	movs	r1, #9
 800a726:	f7ff ff7d 	bl	800a624 <std>
 800a72a:	68e0      	ldr	r0, [r4, #12]
 800a72c:	2202      	movs	r2, #2
 800a72e:	2112      	movs	r1, #18
 800a730:	f7ff ff78 	bl	800a624 <std>
 800a734:	2301      	movs	r3, #1
 800a736:	61a3      	str	r3, [r4, #24]
 800a738:	e7d2      	b.n	800a6e0 <__sinit+0xc>
 800a73a:	bf00      	nop
 800a73c:	0800bb64 	.word	0x0800bb64
 800a740:	0800a66d 	.word	0x0800a66d

0800a744 <__sfp>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4607      	mov	r7, r0
 800a748:	f7ff ffac 	bl	800a6a4 <__sfp_lock_acquire>
 800a74c:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <__sfp+0x84>)
 800a74e:	681e      	ldr	r6, [r3, #0]
 800a750:	69b3      	ldr	r3, [r6, #24]
 800a752:	b913      	cbnz	r3, 800a75a <__sfp+0x16>
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff ffbd 	bl	800a6d4 <__sinit>
 800a75a:	3648      	adds	r6, #72	; 0x48
 800a75c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a760:	3b01      	subs	r3, #1
 800a762:	d503      	bpl.n	800a76c <__sfp+0x28>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	b30b      	cbz	r3, 800a7ac <__sfp+0x68>
 800a768:	6836      	ldr	r6, [r6, #0]
 800a76a:	e7f7      	b.n	800a75c <__sfp+0x18>
 800a76c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a770:	b9d5      	cbnz	r5, 800a7a8 <__sfp+0x64>
 800a772:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <__sfp+0x88>)
 800a774:	60e3      	str	r3, [r4, #12]
 800a776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a77a:	6665      	str	r5, [r4, #100]	; 0x64
 800a77c:	f000 f84c 	bl	800a818 <__retarget_lock_init_recursive>
 800a780:	f7ff ff96 	bl	800a6b0 <__sfp_lock_release>
 800a784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a78c:	6025      	str	r5, [r4, #0]
 800a78e:	61a5      	str	r5, [r4, #24]
 800a790:	2208      	movs	r2, #8
 800a792:	4629      	mov	r1, r5
 800a794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a798:	f7fd fec4 	bl	8008524 <memset>
 800a79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a8:	3468      	adds	r4, #104	; 0x68
 800a7aa:	e7d9      	b.n	800a760 <__sfp+0x1c>
 800a7ac:	2104      	movs	r1, #4
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7ff ff62 	bl	800a678 <__sfmoreglue>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	6030      	str	r0, [r6, #0]
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1d5      	bne.n	800a768 <__sfp+0x24>
 800a7bc:	f7ff ff78 	bl	800a6b0 <__sfp_lock_release>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	e7ee      	b.n	800a7a4 <__sfp+0x60>
 800a7c6:	bf00      	nop
 800a7c8:	0800bb64 	.word	0x0800bb64
 800a7cc:	ffff0001 	.word	0xffff0001

0800a7d0 <_fwalk_reent>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7dc:	2700      	movs	r7, #0
 800a7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e6:	d505      	bpl.n	800a7f4 <_fwalk_reent+0x24>
 800a7e8:	6824      	ldr	r4, [r4, #0]
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d1f7      	bne.n	800a7de <_fwalk_reent+0xe>
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d907      	bls.n	800a80a <_fwalk_reent+0x3a>
 800a7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7fe:	3301      	adds	r3, #1
 800a800:	d003      	beq.n	800a80a <_fwalk_reent+0x3a>
 800a802:	4629      	mov	r1, r5
 800a804:	4630      	mov	r0, r6
 800a806:	47c0      	blx	r8
 800a808:	4307      	orrs	r7, r0
 800a80a:	3568      	adds	r5, #104	; 0x68
 800a80c:	e7e9      	b.n	800a7e2 <_fwalk_reent+0x12>
	...

0800a810 <_localeconv_r>:
 800a810:	4800      	ldr	r0, [pc, #0]	; (800a814 <_localeconv_r+0x4>)
 800a812:	4770      	bx	lr
 800a814:	20000160 	.word	0x20000160

0800a818 <__retarget_lock_init_recursive>:
 800a818:	4770      	bx	lr

0800a81a <__retarget_lock_acquire_recursive>:
 800a81a:	4770      	bx	lr

0800a81c <__retarget_lock_release_recursive>:
 800a81c:	4770      	bx	lr

0800a81e <__swhatbuf_r>:
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	460e      	mov	r6, r1
 800a822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a826:	2900      	cmp	r1, #0
 800a828:	b096      	sub	sp, #88	; 0x58
 800a82a:	4614      	mov	r4, r2
 800a82c:	461d      	mov	r5, r3
 800a82e:	da07      	bge.n	800a840 <__swhatbuf_r+0x22>
 800a830:	2300      	movs	r3, #0
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	89b3      	ldrh	r3, [r6, #12]
 800a836:	061a      	lsls	r2, r3, #24
 800a838:	d410      	bmi.n	800a85c <__swhatbuf_r+0x3e>
 800a83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a83e:	e00e      	b.n	800a85e <__swhatbuf_r+0x40>
 800a840:	466a      	mov	r2, sp
 800a842:	f000 fde3 	bl	800b40c <_fstat_r>
 800a846:	2800      	cmp	r0, #0
 800a848:	dbf2      	blt.n	800a830 <__swhatbuf_r+0x12>
 800a84a:	9a01      	ldr	r2, [sp, #4]
 800a84c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a850:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a854:	425a      	negs	r2, r3
 800a856:	415a      	adcs	r2, r3
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	e7ee      	b.n	800a83a <__swhatbuf_r+0x1c>
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	2000      	movs	r0, #0
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	b016      	add	sp, #88	; 0x58
 800a864:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a868 <__smakebuf_r>:
 800a868:	898b      	ldrh	r3, [r1, #12]
 800a86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a86c:	079d      	lsls	r5, r3, #30
 800a86e:	4606      	mov	r6, r0
 800a870:	460c      	mov	r4, r1
 800a872:	d507      	bpl.n	800a884 <__smakebuf_r+0x1c>
 800a874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	2301      	movs	r3, #1
 800a87e:	6163      	str	r3, [r4, #20]
 800a880:	b002      	add	sp, #8
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	ab01      	add	r3, sp, #4
 800a886:	466a      	mov	r2, sp
 800a888:	f7ff ffc9 	bl	800a81e <__swhatbuf_r>
 800a88c:	9900      	ldr	r1, [sp, #0]
 800a88e:	4605      	mov	r5, r0
 800a890:	4630      	mov	r0, r6
 800a892:	f7fd fe9d 	bl	80085d0 <_malloc_r>
 800a896:	b948      	cbnz	r0, 800a8ac <__smakebuf_r+0x44>
 800a898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a89c:	059a      	lsls	r2, r3, #22
 800a89e:	d4ef      	bmi.n	800a880 <__smakebuf_r+0x18>
 800a8a0:	f023 0303 	bic.w	r3, r3, #3
 800a8a4:	f043 0302 	orr.w	r3, r3, #2
 800a8a8:	81a3      	strh	r3, [r4, #12]
 800a8aa:	e7e3      	b.n	800a874 <__smakebuf_r+0xc>
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <__smakebuf_r+0x7c>)
 800a8ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	6020      	str	r0, [r4, #0]
 800a8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	9b00      	ldr	r3, [sp, #0]
 800a8bc:	6163      	str	r3, [r4, #20]
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	6120      	str	r0, [r4, #16]
 800a8c2:	b15b      	cbz	r3, 800a8dc <__smakebuf_r+0x74>
 800a8c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f000 fdb1 	bl	800b430 <_isatty_r>
 800a8ce:	b128      	cbz	r0, 800a8dc <__smakebuf_r+0x74>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	f043 0301 	orr.w	r3, r3, #1
 800a8da:	81a3      	strh	r3, [r4, #12]
 800a8dc:	89a0      	ldrh	r0, [r4, #12]
 800a8de:	4305      	orrs	r5, r0
 800a8e0:	81a5      	strh	r5, [r4, #12]
 800a8e2:	e7cd      	b.n	800a880 <__smakebuf_r+0x18>
 800a8e4:	0800a66d 	.word	0x0800a66d

0800a8e8 <__ascii_mbtowc>:
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	b901      	cbnz	r1, 800a8ee <__ascii_mbtowc+0x6>
 800a8ec:	a901      	add	r1, sp, #4
 800a8ee:	b142      	cbz	r2, 800a902 <__ascii_mbtowc+0x1a>
 800a8f0:	b14b      	cbz	r3, 800a906 <__ascii_mbtowc+0x1e>
 800a8f2:	7813      	ldrb	r3, [r2, #0]
 800a8f4:	600b      	str	r3, [r1, #0]
 800a8f6:	7812      	ldrb	r2, [r2, #0]
 800a8f8:	1e10      	subs	r0, r2, #0
 800a8fa:	bf18      	it	ne
 800a8fc:	2001      	movne	r0, #1
 800a8fe:	b002      	add	sp, #8
 800a900:	4770      	bx	lr
 800a902:	4610      	mov	r0, r2
 800a904:	e7fb      	b.n	800a8fe <__ascii_mbtowc+0x16>
 800a906:	f06f 0001 	mvn.w	r0, #1
 800a90a:	e7f8      	b.n	800a8fe <__ascii_mbtowc+0x16>

0800a90c <__malloc_lock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__malloc_lock+0x8>)
 800a90e:	f7ff bf84 	b.w	800a81a <__retarget_lock_acquire_recursive>
 800a912:	bf00      	nop
 800a914:	200005e0 	.word	0x200005e0

0800a918 <__malloc_unlock>:
 800a918:	4801      	ldr	r0, [pc, #4]	; (800a920 <__malloc_unlock+0x8>)
 800a91a:	f7ff bf7f 	b.w	800a81c <__retarget_lock_release_recursive>
 800a91e:	bf00      	nop
 800a920:	200005e0 	.word	0x200005e0

0800a924 <_Balloc>:
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a928:	4604      	mov	r4, r0
 800a92a:	460d      	mov	r5, r1
 800a92c:	b976      	cbnz	r6, 800a94c <_Balloc+0x28>
 800a92e:	2010      	movs	r0, #16
 800a930:	f7fd fdda 	bl	80084e8 <malloc>
 800a934:	4602      	mov	r2, r0
 800a936:	6260      	str	r0, [r4, #36]	; 0x24
 800a938:	b920      	cbnz	r0, 800a944 <_Balloc+0x20>
 800a93a:	4b18      	ldr	r3, [pc, #96]	; (800a99c <_Balloc+0x78>)
 800a93c:	4818      	ldr	r0, [pc, #96]	; (800a9a0 <_Balloc+0x7c>)
 800a93e:	2166      	movs	r1, #102	; 0x66
 800a940:	f000 fd24 	bl	800b38c <__assert_func>
 800a944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a948:	6006      	str	r6, [r0, #0]
 800a94a:	60c6      	str	r6, [r0, #12]
 800a94c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a94e:	68f3      	ldr	r3, [r6, #12]
 800a950:	b183      	cbz	r3, 800a974 <_Balloc+0x50>
 800a952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a95a:	b9b8      	cbnz	r0, 800a98c <_Balloc+0x68>
 800a95c:	2101      	movs	r1, #1
 800a95e:	fa01 f605 	lsl.w	r6, r1, r5
 800a962:	1d72      	adds	r2, r6, #5
 800a964:	0092      	lsls	r2, r2, #2
 800a966:	4620      	mov	r0, r4
 800a968:	f000 fb5a 	bl	800b020 <_calloc_r>
 800a96c:	b160      	cbz	r0, 800a988 <_Balloc+0x64>
 800a96e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a972:	e00e      	b.n	800a992 <_Balloc+0x6e>
 800a974:	2221      	movs	r2, #33	; 0x21
 800a976:	2104      	movs	r1, #4
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fb51 	bl	800b020 <_calloc_r>
 800a97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a980:	60f0      	str	r0, [r6, #12]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e4      	bne.n	800a952 <_Balloc+0x2e>
 800a988:	2000      	movs	r0, #0
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	6802      	ldr	r2, [r0, #0]
 800a98e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a992:	2300      	movs	r3, #0
 800a994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a998:	e7f7      	b.n	800a98a <_Balloc+0x66>
 800a99a:	bf00      	nop
 800a99c:	0800c340 	.word	0x0800c340
 800a9a0:	0800c432 	.word	0x0800c432

0800a9a4 <_Bfree>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	b976      	cbnz	r6, 800a9cc <_Bfree+0x28>
 800a9ae:	2010      	movs	r0, #16
 800a9b0:	f7fd fd9a 	bl	80084e8 <malloc>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	6268      	str	r0, [r5, #36]	; 0x24
 800a9b8:	b920      	cbnz	r0, 800a9c4 <_Bfree+0x20>
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <_Bfree+0x3c>)
 800a9bc:	4809      	ldr	r0, [pc, #36]	; (800a9e4 <_Bfree+0x40>)
 800a9be:	218a      	movs	r1, #138	; 0x8a
 800a9c0:	f000 fce4 	bl	800b38c <__assert_func>
 800a9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9c8:	6006      	str	r6, [r0, #0]
 800a9ca:	60c6      	str	r6, [r0, #12]
 800a9cc:	b13c      	cbz	r4, 800a9de <_Bfree+0x3a>
 800a9ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9d0:	6862      	ldr	r2, [r4, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9d8:	6021      	str	r1, [r4, #0]
 800a9da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	0800c340 	.word	0x0800c340
 800a9e4:	0800c432 	.word	0x0800c432

0800a9e8 <__multadd>:
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	690e      	ldr	r6, [r1, #16]
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	4698      	mov	r8, r3
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f101 0014 	add.w	r0, r1, #20
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6805      	ldr	r5, [r0, #0]
 800a9fc:	b2a9      	uxth	r1, r5
 800a9fe:	fb02 8101 	mla	r1, r2, r1, r8
 800aa02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aa06:	0c2d      	lsrs	r5, r5, #16
 800aa08:	fb02 c505 	mla	r5, r2, r5, ip
 800aa0c:	b289      	uxth	r1, r1
 800aa0e:	3301      	adds	r3, #1
 800aa10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aa14:	429e      	cmp	r6, r3
 800aa16:	f840 1b04 	str.w	r1, [r0], #4
 800aa1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aa1e:	dcec      	bgt.n	800a9fa <__multadd+0x12>
 800aa20:	f1b8 0f00 	cmp.w	r8, #0
 800aa24:	d022      	beq.n	800aa6c <__multadd+0x84>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	42b3      	cmp	r3, r6
 800aa2a:	dc19      	bgt.n	800aa60 <__multadd+0x78>
 800aa2c:	6861      	ldr	r1, [r4, #4]
 800aa2e:	4638      	mov	r0, r7
 800aa30:	3101      	adds	r1, #1
 800aa32:	f7ff ff77 	bl	800a924 <_Balloc>
 800aa36:	4605      	mov	r5, r0
 800aa38:	b928      	cbnz	r0, 800aa46 <__multadd+0x5e>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <__multadd+0x8c>)
 800aa3e:	480e      	ldr	r0, [pc, #56]	; (800aa78 <__multadd+0x90>)
 800aa40:	21b5      	movs	r1, #181	; 0xb5
 800aa42:	f000 fca3 	bl	800b38c <__assert_func>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	3202      	adds	r2, #2
 800aa4a:	f104 010c 	add.w	r1, r4, #12
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7fd fd59 	bl	8008508 <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ffa3 	bl	800a9a4 <_Bfree>
 800aa5e:	462c      	mov	r4, r5
 800aa60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aa64:	3601      	adds	r6, #1
 800aa66:	f8c3 8014 	str.w	r8, [r3, #20]
 800aa6a:	6126      	str	r6, [r4, #16]
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa72:	bf00      	nop
 800aa74:	0800c3b6 	.word	0x0800c3b6
 800aa78:	0800c432 	.word	0x0800c432

0800aa7c <__hi0bits>:
 800aa7c:	0c02      	lsrs	r2, r0, #16
 800aa7e:	0412      	lsls	r2, r2, #16
 800aa80:	4603      	mov	r3, r0
 800aa82:	b9ca      	cbnz	r2, 800aab8 <__hi0bits+0x3c>
 800aa84:	0403      	lsls	r3, r0, #16
 800aa86:	2010      	movs	r0, #16
 800aa88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa8c:	bf04      	itt	eq
 800aa8e:	021b      	lsleq	r3, r3, #8
 800aa90:	3008      	addeq	r0, #8
 800aa92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa96:	bf04      	itt	eq
 800aa98:	011b      	lsleq	r3, r3, #4
 800aa9a:	3004      	addeq	r0, #4
 800aa9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aaa0:	bf04      	itt	eq
 800aaa2:	009b      	lsleq	r3, r3, #2
 800aaa4:	3002      	addeq	r0, #2
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	db05      	blt.n	800aab6 <__hi0bits+0x3a>
 800aaaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aaae:	f100 0001 	add.w	r0, r0, #1
 800aab2:	bf08      	it	eq
 800aab4:	2020      	moveq	r0, #32
 800aab6:	4770      	bx	lr
 800aab8:	2000      	movs	r0, #0
 800aaba:	e7e5      	b.n	800aa88 <__hi0bits+0xc>

0800aabc <__lo0bits>:
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	4602      	mov	r2, r0
 800aac0:	f013 0007 	ands.w	r0, r3, #7
 800aac4:	d00b      	beq.n	800aade <__lo0bits+0x22>
 800aac6:	07d9      	lsls	r1, r3, #31
 800aac8:	d422      	bmi.n	800ab10 <__lo0bits+0x54>
 800aaca:	0798      	lsls	r0, r3, #30
 800aacc:	bf49      	itett	mi
 800aace:	085b      	lsrmi	r3, r3, #1
 800aad0:	089b      	lsrpl	r3, r3, #2
 800aad2:	2001      	movmi	r0, #1
 800aad4:	6013      	strmi	r3, [r2, #0]
 800aad6:	bf5c      	itt	pl
 800aad8:	6013      	strpl	r3, [r2, #0]
 800aada:	2002      	movpl	r0, #2
 800aadc:	4770      	bx	lr
 800aade:	b299      	uxth	r1, r3
 800aae0:	b909      	cbnz	r1, 800aae6 <__lo0bits+0x2a>
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	2010      	movs	r0, #16
 800aae6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aaea:	bf04      	itt	eq
 800aaec:	0a1b      	lsreq	r3, r3, #8
 800aaee:	3008      	addeq	r0, #8
 800aaf0:	0719      	lsls	r1, r3, #28
 800aaf2:	bf04      	itt	eq
 800aaf4:	091b      	lsreq	r3, r3, #4
 800aaf6:	3004      	addeq	r0, #4
 800aaf8:	0799      	lsls	r1, r3, #30
 800aafa:	bf04      	itt	eq
 800aafc:	089b      	lsreq	r3, r3, #2
 800aafe:	3002      	addeq	r0, #2
 800ab00:	07d9      	lsls	r1, r3, #31
 800ab02:	d403      	bmi.n	800ab0c <__lo0bits+0x50>
 800ab04:	085b      	lsrs	r3, r3, #1
 800ab06:	f100 0001 	add.w	r0, r0, #1
 800ab0a:	d003      	beq.n	800ab14 <__lo0bits+0x58>
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	4770      	bx	lr
 800ab10:	2000      	movs	r0, #0
 800ab12:	4770      	bx	lr
 800ab14:	2020      	movs	r0, #32
 800ab16:	4770      	bx	lr

0800ab18 <__i2b>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	f7ff ff01 	bl	800a924 <_Balloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	b928      	cbnz	r0, 800ab32 <__i2b+0x1a>
 800ab26:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <__i2b+0x24>)
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <__i2b+0x28>)
 800ab2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab2e:	f000 fc2d 	bl	800b38c <__assert_func>
 800ab32:	2301      	movs	r3, #1
 800ab34:	6144      	str	r4, [r0, #20]
 800ab36:	6103      	str	r3, [r0, #16]
 800ab38:	bd10      	pop	{r4, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800c3b6 	.word	0x0800c3b6
 800ab40:	0800c432 	.word	0x0800c432

0800ab44 <__multiply>:
 800ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	4614      	mov	r4, r2
 800ab4a:	690a      	ldr	r2, [r1, #16]
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	bfb8      	it	lt
 800ab52:	460b      	movlt	r3, r1
 800ab54:	460d      	mov	r5, r1
 800ab56:	bfbc      	itt	lt
 800ab58:	4625      	movlt	r5, r4
 800ab5a:	461c      	movlt	r4, r3
 800ab5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ab60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab64:	68ab      	ldr	r3, [r5, #8]
 800ab66:	6869      	ldr	r1, [r5, #4]
 800ab68:	eb0a 0709 	add.w	r7, sl, r9
 800ab6c:	42bb      	cmp	r3, r7
 800ab6e:	b085      	sub	sp, #20
 800ab70:	bfb8      	it	lt
 800ab72:	3101      	addlt	r1, #1
 800ab74:	f7ff fed6 	bl	800a924 <_Balloc>
 800ab78:	b930      	cbnz	r0, 800ab88 <__multiply+0x44>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4b42      	ldr	r3, [pc, #264]	; (800ac88 <__multiply+0x144>)
 800ab7e:	4843      	ldr	r0, [pc, #268]	; (800ac8c <__multiply+0x148>)
 800ab80:	f240 115d 	movw	r1, #349	; 0x15d
 800ab84:	f000 fc02 	bl	800b38c <__assert_func>
 800ab88:	f100 0614 	add.w	r6, r0, #20
 800ab8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ab90:	4633      	mov	r3, r6
 800ab92:	2200      	movs	r2, #0
 800ab94:	4543      	cmp	r3, r8
 800ab96:	d31e      	bcc.n	800abd6 <__multiply+0x92>
 800ab98:	f105 0c14 	add.w	ip, r5, #20
 800ab9c:	f104 0314 	add.w	r3, r4, #20
 800aba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	ebac 0205 	sub.w	r2, ip, r5
 800abae:	3a15      	subs	r2, #21
 800abb0:	f022 0203 	bic.w	r2, r2, #3
 800abb4:	3204      	adds	r2, #4
 800abb6:	f105 0115 	add.w	r1, r5, #21
 800abba:	458c      	cmp	ip, r1
 800abbc:	bf38      	it	cc
 800abbe:	2204      	movcc	r2, #4
 800abc0:	9201      	str	r2, [sp, #4]
 800abc2:	9a02      	ldr	r2, [sp, #8]
 800abc4:	9303      	str	r3, [sp, #12]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d808      	bhi.n	800abdc <__multiply+0x98>
 800abca:	2f00      	cmp	r7, #0
 800abcc:	dc55      	bgt.n	800ac7a <__multiply+0x136>
 800abce:	6107      	str	r7, [r0, #16]
 800abd0:	b005      	add	sp, #20
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	f843 2b04 	str.w	r2, [r3], #4
 800abda:	e7db      	b.n	800ab94 <__multiply+0x50>
 800abdc:	f8b3 a000 	ldrh.w	sl, [r3]
 800abe0:	f1ba 0f00 	cmp.w	sl, #0
 800abe4:	d020      	beq.n	800ac28 <__multiply+0xe4>
 800abe6:	f105 0e14 	add.w	lr, r5, #20
 800abea:	46b1      	mov	r9, r6
 800abec:	2200      	movs	r2, #0
 800abee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800abf2:	f8d9 b000 	ldr.w	fp, [r9]
 800abf6:	b2a1      	uxth	r1, r4
 800abf8:	fa1f fb8b 	uxth.w	fp, fp
 800abfc:	fb0a b101 	mla	r1, sl, r1, fp
 800ac00:	4411      	add	r1, r2
 800ac02:	f8d9 2000 	ldr.w	r2, [r9]
 800ac06:	0c24      	lsrs	r4, r4, #16
 800ac08:	0c12      	lsrs	r2, r2, #16
 800ac0a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ac0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ac12:	b289      	uxth	r1, r1
 800ac14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac18:	45f4      	cmp	ip, lr
 800ac1a:	f849 1b04 	str.w	r1, [r9], #4
 800ac1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ac22:	d8e4      	bhi.n	800abee <__multiply+0xaa>
 800ac24:	9901      	ldr	r1, [sp, #4]
 800ac26:	5072      	str	r2, [r6, r1]
 800ac28:	9a03      	ldr	r2, [sp, #12]
 800ac2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	f1b9 0f00 	cmp.w	r9, #0
 800ac34:	d01f      	beq.n	800ac76 <__multiply+0x132>
 800ac36:	6834      	ldr	r4, [r6, #0]
 800ac38:	f105 0114 	add.w	r1, r5, #20
 800ac3c:	46b6      	mov	lr, r6
 800ac3e:	f04f 0a00 	mov.w	sl, #0
 800ac42:	880a      	ldrh	r2, [r1, #0]
 800ac44:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ac48:	fb09 b202 	mla	r2, r9, r2, fp
 800ac4c:	4492      	add	sl, r2
 800ac4e:	b2a4      	uxth	r4, r4
 800ac50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ac54:	f84e 4b04 	str.w	r4, [lr], #4
 800ac58:	f851 4b04 	ldr.w	r4, [r1], #4
 800ac5c:	f8be 2000 	ldrh.w	r2, [lr]
 800ac60:	0c24      	lsrs	r4, r4, #16
 800ac62:	fb09 2404 	mla	r4, r9, r4, r2
 800ac66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ac6a:	458c      	cmp	ip, r1
 800ac6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac70:	d8e7      	bhi.n	800ac42 <__multiply+0xfe>
 800ac72:	9a01      	ldr	r2, [sp, #4]
 800ac74:	50b4      	str	r4, [r6, r2]
 800ac76:	3604      	adds	r6, #4
 800ac78:	e7a3      	b.n	800abc2 <__multiply+0x7e>
 800ac7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1a5      	bne.n	800abce <__multiply+0x8a>
 800ac82:	3f01      	subs	r7, #1
 800ac84:	e7a1      	b.n	800abca <__multiply+0x86>
 800ac86:	bf00      	nop
 800ac88:	0800c3b6 	.word	0x0800c3b6
 800ac8c:	0800c432 	.word	0x0800c432

0800ac90 <__pow5mult>:
 800ac90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac94:	4615      	mov	r5, r2
 800ac96:	f012 0203 	ands.w	r2, r2, #3
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	d007      	beq.n	800acb0 <__pow5mult+0x20>
 800aca0:	4c25      	ldr	r4, [pc, #148]	; (800ad38 <__pow5mult+0xa8>)
 800aca2:	3a01      	subs	r2, #1
 800aca4:	2300      	movs	r3, #0
 800aca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acaa:	f7ff fe9d 	bl	800a9e8 <__multadd>
 800acae:	4607      	mov	r7, r0
 800acb0:	10ad      	asrs	r5, r5, #2
 800acb2:	d03d      	beq.n	800ad30 <__pow5mult+0xa0>
 800acb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acb6:	b97c      	cbnz	r4, 800acd8 <__pow5mult+0x48>
 800acb8:	2010      	movs	r0, #16
 800acba:	f7fd fc15 	bl	80084e8 <malloc>
 800acbe:	4602      	mov	r2, r0
 800acc0:	6270      	str	r0, [r6, #36]	; 0x24
 800acc2:	b928      	cbnz	r0, 800acd0 <__pow5mult+0x40>
 800acc4:	4b1d      	ldr	r3, [pc, #116]	; (800ad3c <__pow5mult+0xac>)
 800acc6:	481e      	ldr	r0, [pc, #120]	; (800ad40 <__pow5mult+0xb0>)
 800acc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800accc:	f000 fb5e 	bl	800b38c <__assert_func>
 800acd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd4:	6004      	str	r4, [r0, #0]
 800acd6:	60c4      	str	r4, [r0, #12]
 800acd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ace0:	b94c      	cbnz	r4, 800acf6 <__pow5mult+0x66>
 800ace2:	f240 2171 	movw	r1, #625	; 0x271
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ff16 	bl	800ab18 <__i2b>
 800acec:	2300      	movs	r3, #0
 800acee:	f8c8 0008 	str.w	r0, [r8, #8]
 800acf2:	4604      	mov	r4, r0
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	f04f 0900 	mov.w	r9, #0
 800acfa:	07eb      	lsls	r3, r5, #31
 800acfc:	d50a      	bpl.n	800ad14 <__pow5mult+0x84>
 800acfe:	4639      	mov	r1, r7
 800ad00:	4622      	mov	r2, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff1e 	bl	800ab44 <__multiply>
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7ff fe49 	bl	800a9a4 <_Bfree>
 800ad12:	4647      	mov	r7, r8
 800ad14:	106d      	asrs	r5, r5, #1
 800ad16:	d00b      	beq.n	800ad30 <__pow5mult+0xa0>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	b938      	cbnz	r0, 800ad2c <__pow5mult+0x9c>
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ff0f 	bl	800ab44 <__multiply>
 800ad26:	6020      	str	r0, [r4, #0]
 800ad28:	f8c0 9000 	str.w	r9, [r0]
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	e7e4      	b.n	800acfa <__pow5mult+0x6a>
 800ad30:	4638      	mov	r0, r7
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	bf00      	nop
 800ad38:	0800c588 	.word	0x0800c588
 800ad3c:	0800c340 	.word	0x0800c340
 800ad40:	0800c432 	.word	0x0800c432

0800ad44 <__lshift>:
 800ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	460c      	mov	r4, r1
 800ad4a:	6849      	ldr	r1, [r1, #4]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	4607      	mov	r7, r0
 800ad56:	4691      	mov	r9, r2
 800ad58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad5c:	f108 0601 	add.w	r6, r8, #1
 800ad60:	42b3      	cmp	r3, r6
 800ad62:	db0b      	blt.n	800ad7c <__lshift+0x38>
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff fddd 	bl	800a924 <_Balloc>
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	b948      	cbnz	r0, 800ad82 <__lshift+0x3e>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	4b28      	ldr	r3, [pc, #160]	; (800ae14 <__lshift+0xd0>)
 800ad72:	4829      	ldr	r0, [pc, #164]	; (800ae18 <__lshift+0xd4>)
 800ad74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad78:	f000 fb08 	bl	800b38c <__assert_func>
 800ad7c:	3101      	adds	r1, #1
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	e7ee      	b.n	800ad60 <__lshift+0x1c>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f100 0114 	add.w	r1, r0, #20
 800ad88:	f100 0210 	add.w	r2, r0, #16
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	4553      	cmp	r3, sl
 800ad90:	db33      	blt.n	800adfa <__lshift+0xb6>
 800ad92:	6920      	ldr	r0, [r4, #16]
 800ad94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad98:	f104 0314 	add.w	r3, r4, #20
 800ad9c:	f019 091f 	ands.w	r9, r9, #31
 800ada0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ada4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ada8:	d02b      	beq.n	800ae02 <__lshift+0xbe>
 800adaa:	f1c9 0e20 	rsb	lr, r9, #32
 800adae:	468a      	mov	sl, r1
 800adb0:	2200      	movs	r2, #0
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	fa00 f009 	lsl.w	r0, r0, r9
 800adb8:	4302      	orrs	r2, r0
 800adba:	f84a 2b04 	str.w	r2, [sl], #4
 800adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc2:	459c      	cmp	ip, r3
 800adc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800adc8:	d8f3      	bhi.n	800adb2 <__lshift+0x6e>
 800adca:	ebac 0304 	sub.w	r3, ip, r4
 800adce:	3b15      	subs	r3, #21
 800add0:	f023 0303 	bic.w	r3, r3, #3
 800add4:	3304      	adds	r3, #4
 800add6:	f104 0015 	add.w	r0, r4, #21
 800adda:	4584      	cmp	ip, r0
 800addc:	bf38      	it	cc
 800adde:	2304      	movcc	r3, #4
 800ade0:	50ca      	str	r2, [r1, r3]
 800ade2:	b10a      	cbz	r2, 800ade8 <__lshift+0xa4>
 800ade4:	f108 0602 	add.w	r6, r8, #2
 800ade8:	3e01      	subs	r6, #1
 800adea:	4638      	mov	r0, r7
 800adec:	612e      	str	r6, [r5, #16]
 800adee:	4621      	mov	r1, r4
 800adf0:	f7ff fdd8 	bl	800a9a4 <_Bfree>
 800adf4:	4628      	mov	r0, r5
 800adf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800adfe:	3301      	adds	r3, #1
 800ae00:	e7c5      	b.n	800ad8e <__lshift+0x4a>
 800ae02:	3904      	subs	r1, #4
 800ae04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae0c:	459c      	cmp	ip, r3
 800ae0e:	d8f9      	bhi.n	800ae04 <__lshift+0xc0>
 800ae10:	e7ea      	b.n	800ade8 <__lshift+0xa4>
 800ae12:	bf00      	nop
 800ae14:	0800c3b6 	.word	0x0800c3b6
 800ae18:	0800c432 	.word	0x0800c432

0800ae1c <__mcmp>:
 800ae1c:	690a      	ldr	r2, [r1, #16]
 800ae1e:	4603      	mov	r3, r0
 800ae20:	6900      	ldr	r0, [r0, #16]
 800ae22:	1a80      	subs	r0, r0, r2
 800ae24:	b530      	push	{r4, r5, lr}
 800ae26:	d10d      	bne.n	800ae44 <__mcmp+0x28>
 800ae28:	3314      	adds	r3, #20
 800ae2a:	3114      	adds	r1, #20
 800ae2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae3c:	4295      	cmp	r5, r2
 800ae3e:	d002      	beq.n	800ae46 <__mcmp+0x2a>
 800ae40:	d304      	bcc.n	800ae4c <__mcmp+0x30>
 800ae42:	2001      	movs	r0, #1
 800ae44:	bd30      	pop	{r4, r5, pc}
 800ae46:	42a3      	cmp	r3, r4
 800ae48:	d3f4      	bcc.n	800ae34 <__mcmp+0x18>
 800ae4a:	e7fb      	b.n	800ae44 <__mcmp+0x28>
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	e7f8      	b.n	800ae44 <__mcmp+0x28>
	...

0800ae54 <__mdiff>:
 800ae54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	460c      	mov	r4, r1
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4617      	mov	r7, r2
 800ae62:	f7ff ffdb 	bl	800ae1c <__mcmp>
 800ae66:	1e05      	subs	r5, r0, #0
 800ae68:	d111      	bne.n	800ae8e <__mdiff+0x3a>
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff fd59 	bl	800a924 <_Balloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	b928      	cbnz	r0, 800ae82 <__mdiff+0x2e>
 800ae76:	4b3a      	ldr	r3, [pc, #232]	; (800af60 <__mdiff+0x10c>)
 800ae78:	f240 2132 	movw	r1, #562	; 0x232
 800ae7c:	4839      	ldr	r0, [pc, #228]	; (800af64 <__mdiff+0x110>)
 800ae7e:	f000 fa85 	bl	800b38c <__assert_func>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae88:	4610      	mov	r0, r2
 800ae8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8e:	bfa4      	itt	ge
 800ae90:	463b      	movge	r3, r7
 800ae92:	4627      	movge	r7, r4
 800ae94:	4630      	mov	r0, r6
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	bfa6      	itte	ge
 800ae9a:	461c      	movge	r4, r3
 800ae9c:	2500      	movge	r5, #0
 800ae9e:	2501      	movlt	r5, #1
 800aea0:	f7ff fd40 	bl	800a924 <_Balloc>
 800aea4:	4602      	mov	r2, r0
 800aea6:	b918      	cbnz	r0, 800aeb0 <__mdiff+0x5c>
 800aea8:	4b2d      	ldr	r3, [pc, #180]	; (800af60 <__mdiff+0x10c>)
 800aeaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aeae:	e7e5      	b.n	800ae7c <__mdiff+0x28>
 800aeb0:	693e      	ldr	r6, [r7, #16]
 800aeb2:	60c5      	str	r5, [r0, #12]
 800aeb4:	6925      	ldr	r5, [r4, #16]
 800aeb6:	f107 0114 	add.w	r1, r7, #20
 800aeba:	f100 0e14 	add.w	lr, r0, #20
 800aebe:	f104 0914 	add.w	r9, r4, #20
 800aec2:	f107 0010 	add.w	r0, r7, #16
 800aec6:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aeca:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aece:	46f2      	mov	sl, lr
 800aed0:	2700      	movs	r7, #0
 800aed2:	f859 3b04 	ldr.w	r3, [r9], #4
 800aed6:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800aeda:	fa1f f883 	uxth.w	r8, r3
 800aede:	fa17 f78b 	uxtah	r7, r7, fp
 800aee2:	0c1b      	lsrs	r3, r3, #16
 800aee4:	eba7 0808 	sub.w	r8, r7, r8
 800aee8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aeec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aef0:	fa1f f888 	uxth.w	r8, r8
 800aef4:	141f      	asrs	r7, r3, #16
 800aef6:	454d      	cmp	r5, r9
 800aef8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aefc:	f84a 3b04 	str.w	r3, [sl], #4
 800af00:	d8e7      	bhi.n	800aed2 <__mdiff+0x7e>
 800af02:	1b2b      	subs	r3, r5, r4
 800af04:	3b15      	subs	r3, #21
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	3304      	adds	r3, #4
 800af0c:	3415      	adds	r4, #21
 800af0e:	42a5      	cmp	r5, r4
 800af10:	bf38      	it	cc
 800af12:	2304      	movcc	r3, #4
 800af14:	4419      	add	r1, r3
 800af16:	4473      	add	r3, lr
 800af18:	469e      	mov	lr, r3
 800af1a:	460d      	mov	r5, r1
 800af1c:	4565      	cmp	r5, ip
 800af1e:	d30e      	bcc.n	800af3e <__mdiff+0xea>
 800af20:	f10c 0003 	add.w	r0, ip, #3
 800af24:	1a40      	subs	r0, r0, r1
 800af26:	f020 0003 	bic.w	r0, r0, #3
 800af2a:	3903      	subs	r1, #3
 800af2c:	458c      	cmp	ip, r1
 800af2e:	bf38      	it	cc
 800af30:	2000      	movcc	r0, #0
 800af32:	4418      	add	r0, r3
 800af34:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800af38:	b17b      	cbz	r3, 800af5a <__mdiff+0x106>
 800af3a:	6116      	str	r6, [r2, #16]
 800af3c:	e7a4      	b.n	800ae88 <__mdiff+0x34>
 800af3e:	f855 8b04 	ldr.w	r8, [r5], #4
 800af42:	fa17 f488 	uxtah	r4, r7, r8
 800af46:	1420      	asrs	r0, r4, #16
 800af48:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800af4c:	b2a4      	uxth	r4, r4
 800af4e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800af52:	f84e 4b04 	str.w	r4, [lr], #4
 800af56:	1407      	asrs	r7, r0, #16
 800af58:	e7e0      	b.n	800af1c <__mdiff+0xc8>
 800af5a:	3e01      	subs	r6, #1
 800af5c:	e7ea      	b.n	800af34 <__mdiff+0xe0>
 800af5e:	bf00      	nop
 800af60:	0800c3b6 	.word	0x0800c3b6
 800af64:	0800c432 	.word	0x0800c432

0800af68 <__d2b>:
 800af68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af6c:	2101      	movs	r1, #1
 800af6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800af72:	4690      	mov	r8, r2
 800af74:	461d      	mov	r5, r3
 800af76:	f7ff fcd5 	bl	800a924 <_Balloc>
 800af7a:	4604      	mov	r4, r0
 800af7c:	b930      	cbnz	r0, 800af8c <__d2b+0x24>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b25      	ldr	r3, [pc, #148]	; (800b018 <__d2b+0xb0>)
 800af82:	4826      	ldr	r0, [pc, #152]	; (800b01c <__d2b+0xb4>)
 800af84:	f240 310a 	movw	r1, #778	; 0x30a
 800af88:	f000 fa00 	bl	800b38c <__assert_func>
 800af8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800af90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800af94:	bb2d      	cbnz	r5, 800afe2 <__d2b+0x7a>
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	f1b8 0300 	subs.w	r3, r8, #0
 800af9c:	d026      	beq.n	800afec <__d2b+0x84>
 800af9e:	4668      	mov	r0, sp
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	f7ff fd8b 	bl	800aabc <__lo0bits>
 800afa6:	9900      	ldr	r1, [sp, #0]
 800afa8:	b1f0      	cbz	r0, 800afe8 <__d2b+0x80>
 800afaa:	9a01      	ldr	r2, [sp, #4]
 800afac:	f1c0 0320 	rsb	r3, r0, #32
 800afb0:	fa02 f303 	lsl.w	r3, r2, r3
 800afb4:	430b      	orrs	r3, r1
 800afb6:	40c2      	lsrs	r2, r0
 800afb8:	6163      	str	r3, [r4, #20]
 800afba:	9201      	str	r2, [sp, #4]
 800afbc:	9b01      	ldr	r3, [sp, #4]
 800afbe:	61a3      	str	r3, [r4, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	bf14      	ite	ne
 800afc4:	2102      	movne	r1, #2
 800afc6:	2101      	moveq	r1, #1
 800afc8:	6121      	str	r1, [r4, #16]
 800afca:	b1c5      	cbz	r5, 800affe <__d2b+0x96>
 800afcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afd0:	4405      	add	r5, r0
 800afd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afd6:	603d      	str	r5, [r7, #0]
 800afd8:	6030      	str	r0, [r6, #0]
 800afda:	4620      	mov	r0, r4
 800afdc:	b002      	add	sp, #8
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afe6:	e7d6      	b.n	800af96 <__d2b+0x2e>
 800afe8:	6161      	str	r1, [r4, #20]
 800afea:	e7e7      	b.n	800afbc <__d2b+0x54>
 800afec:	a801      	add	r0, sp, #4
 800afee:	f7ff fd65 	bl	800aabc <__lo0bits>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	6163      	str	r3, [r4, #20]
 800aff6:	2101      	movs	r1, #1
 800aff8:	6121      	str	r1, [r4, #16]
 800affa:	3020      	adds	r0, #32
 800affc:	e7e5      	b.n	800afca <__d2b+0x62>
 800affe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b002:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b006:	6038      	str	r0, [r7, #0]
 800b008:	6918      	ldr	r0, [r3, #16]
 800b00a:	f7ff fd37 	bl	800aa7c <__hi0bits>
 800b00e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b012:	6031      	str	r1, [r6, #0]
 800b014:	e7e1      	b.n	800afda <__d2b+0x72>
 800b016:	bf00      	nop
 800b018:	0800c3b6 	.word	0x0800c3b6
 800b01c:	0800c432 	.word	0x0800c432

0800b020 <_calloc_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	fb02 f501 	mul.w	r5, r2, r1
 800b026:	4629      	mov	r1, r5
 800b028:	f7fd fad2 	bl	80085d0 <_malloc_r>
 800b02c:	4604      	mov	r4, r0
 800b02e:	b118      	cbz	r0, 800b038 <_calloc_r+0x18>
 800b030:	462a      	mov	r2, r5
 800b032:	2100      	movs	r1, #0
 800b034:	f7fd fa76 	bl	8008524 <memset>
 800b038:	4620      	mov	r0, r4
 800b03a:	bd38      	pop	{r3, r4, r5, pc}

0800b03c <__sfputc_r>:
 800b03c:	6893      	ldr	r3, [r2, #8]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	b410      	push	{r4}
 800b044:	6093      	str	r3, [r2, #8]
 800b046:	da07      	bge.n	800b058 <__sfputc_r+0x1c>
 800b048:	6994      	ldr	r4, [r2, #24]
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	db01      	blt.n	800b052 <__sfputc_r+0x16>
 800b04e:	290a      	cmp	r1, #10
 800b050:	d102      	bne.n	800b058 <__sfputc_r+0x1c>
 800b052:	bc10      	pop	{r4}
 800b054:	f7fe ba9a 	b.w	800958c <__swbuf_r>
 800b058:	6813      	ldr	r3, [r2, #0]
 800b05a:	1c58      	adds	r0, r3, #1
 800b05c:	6010      	str	r0, [r2, #0]
 800b05e:	7019      	strb	r1, [r3, #0]
 800b060:	4608      	mov	r0, r1
 800b062:	bc10      	pop	{r4}
 800b064:	4770      	bx	lr

0800b066 <__sfputs_r>:
 800b066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b068:	4606      	mov	r6, r0
 800b06a:	460f      	mov	r7, r1
 800b06c:	4614      	mov	r4, r2
 800b06e:	18d5      	adds	r5, r2, r3
 800b070:	42ac      	cmp	r4, r5
 800b072:	d101      	bne.n	800b078 <__sfputs_r+0x12>
 800b074:	2000      	movs	r0, #0
 800b076:	e007      	b.n	800b088 <__sfputs_r+0x22>
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	463a      	mov	r2, r7
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff ffdc 	bl	800b03c <__sfputc_r>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d1f3      	bne.n	800b070 <__sfputs_r+0xa>
 800b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b08c <_vfiprintf_r>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	460d      	mov	r5, r1
 800b092:	b09d      	sub	sp, #116	; 0x74
 800b094:	4614      	mov	r4, r2
 800b096:	4698      	mov	r8, r3
 800b098:	4606      	mov	r6, r0
 800b09a:	b118      	cbz	r0, 800b0a4 <_vfiprintf_r+0x18>
 800b09c:	6983      	ldr	r3, [r0, #24]
 800b09e:	b90b      	cbnz	r3, 800b0a4 <_vfiprintf_r+0x18>
 800b0a0:	f7ff fb18 	bl	800a6d4 <__sinit>
 800b0a4:	4b89      	ldr	r3, [pc, #548]	; (800b2cc <_vfiprintf_r+0x240>)
 800b0a6:	429d      	cmp	r5, r3
 800b0a8:	d11b      	bne.n	800b0e2 <_vfiprintf_r+0x56>
 800b0aa:	6875      	ldr	r5, [r6, #4]
 800b0ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ae:	07d9      	lsls	r1, r3, #31
 800b0b0:	d405      	bmi.n	800b0be <_vfiprintf_r+0x32>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	059a      	lsls	r2, r3, #22
 800b0b6:	d402      	bmi.n	800b0be <_vfiprintf_r+0x32>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ba:	f7ff fbae 	bl	800a81a <__retarget_lock_acquire_recursive>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	071b      	lsls	r3, r3, #28
 800b0c2:	d501      	bpl.n	800b0c8 <_vfiprintf_r+0x3c>
 800b0c4:	692b      	ldr	r3, [r5, #16]
 800b0c6:	b9eb      	cbnz	r3, 800b104 <_vfiprintf_r+0x78>
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7fe fac2 	bl	8009654 <__swsetup_r>
 800b0d0:	b1c0      	cbz	r0, 800b104 <_vfiprintf_r+0x78>
 800b0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0d4:	07dc      	lsls	r4, r3, #31
 800b0d6:	d50e      	bpl.n	800b0f6 <_vfiprintf_r+0x6a>
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0dc:	b01d      	add	sp, #116	; 0x74
 800b0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e2:	4b7b      	ldr	r3, [pc, #492]	; (800b2d0 <_vfiprintf_r+0x244>)
 800b0e4:	429d      	cmp	r5, r3
 800b0e6:	d101      	bne.n	800b0ec <_vfiprintf_r+0x60>
 800b0e8:	68b5      	ldr	r5, [r6, #8]
 800b0ea:	e7df      	b.n	800b0ac <_vfiprintf_r+0x20>
 800b0ec:	4b79      	ldr	r3, [pc, #484]	; (800b2d4 <_vfiprintf_r+0x248>)
 800b0ee:	429d      	cmp	r5, r3
 800b0f0:	bf08      	it	eq
 800b0f2:	68f5      	ldreq	r5, [r6, #12]
 800b0f4:	e7da      	b.n	800b0ac <_vfiprintf_r+0x20>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	0598      	lsls	r0, r3, #22
 800b0fa:	d4ed      	bmi.n	800b0d8 <_vfiprintf_r+0x4c>
 800b0fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0fe:	f7ff fb8d 	bl	800a81c <__retarget_lock_release_recursive>
 800b102:	e7e9      	b.n	800b0d8 <_vfiprintf_r+0x4c>
 800b104:	2300      	movs	r3, #0
 800b106:	9309      	str	r3, [sp, #36]	; 0x24
 800b108:	2320      	movs	r3, #32
 800b10a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b112:	2330      	movs	r3, #48	; 0x30
 800b114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2d8 <_vfiprintf_r+0x24c>
 800b118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b11c:	f04f 0901 	mov.w	r9, #1
 800b120:	4623      	mov	r3, r4
 800b122:	469a      	mov	sl, r3
 800b124:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b128:	b10a      	cbz	r2, 800b12e <_vfiprintf_r+0xa2>
 800b12a:	2a25      	cmp	r2, #37	; 0x25
 800b12c:	d1f9      	bne.n	800b122 <_vfiprintf_r+0x96>
 800b12e:	ebba 0b04 	subs.w	fp, sl, r4
 800b132:	d00b      	beq.n	800b14c <_vfiprintf_r+0xc0>
 800b134:	465b      	mov	r3, fp
 800b136:	4622      	mov	r2, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff ff93 	bl	800b066 <__sfputs_r>
 800b140:	3001      	adds	r0, #1
 800b142:	f000 80aa 	beq.w	800b29a <_vfiprintf_r+0x20e>
 800b146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b148:	445a      	add	r2, fp
 800b14a:	9209      	str	r2, [sp, #36]	; 0x24
 800b14c:	f89a 3000 	ldrb.w	r3, [sl]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 80a2 	beq.w	800b29a <_vfiprintf_r+0x20e>
 800b156:	2300      	movs	r3, #0
 800b158:	f04f 32ff 	mov.w	r2, #4294967295
 800b15c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b160:	f10a 0a01 	add.w	sl, sl, #1
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	9307      	str	r3, [sp, #28]
 800b168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b16c:	931a      	str	r3, [sp, #104]	; 0x68
 800b16e:	4654      	mov	r4, sl
 800b170:	2205      	movs	r2, #5
 800b172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b176:	4858      	ldr	r0, [pc, #352]	; (800b2d8 <_vfiprintf_r+0x24c>)
 800b178:	f7f5 f80a 	bl	8000190 <memchr>
 800b17c:	9a04      	ldr	r2, [sp, #16]
 800b17e:	b9d8      	cbnz	r0, 800b1b8 <_vfiprintf_r+0x12c>
 800b180:	06d1      	lsls	r1, r2, #27
 800b182:	bf44      	itt	mi
 800b184:	2320      	movmi	r3, #32
 800b186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18a:	0713      	lsls	r3, r2, #28
 800b18c:	bf44      	itt	mi
 800b18e:	232b      	movmi	r3, #43	; 0x2b
 800b190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b2a      	cmp	r3, #42	; 0x2a
 800b19a:	d015      	beq.n	800b1c8 <_vfiprintf_r+0x13c>
 800b19c:	9a07      	ldr	r2, [sp, #28]
 800b19e:	4654      	mov	r4, sl
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f04f 0c0a 	mov.w	ip, #10
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ac:	3b30      	subs	r3, #48	; 0x30
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d94e      	bls.n	800b250 <_vfiprintf_r+0x1c4>
 800b1b2:	b1b0      	cbz	r0, 800b1e2 <_vfiprintf_r+0x156>
 800b1b4:	9207      	str	r2, [sp, #28]
 800b1b6:	e014      	b.n	800b1e2 <_vfiprintf_r+0x156>
 800b1b8:	eba0 0308 	sub.w	r3, r0, r8
 800b1bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	46a2      	mov	sl, r4
 800b1c6:	e7d2      	b.n	800b16e <_vfiprintf_r+0xe2>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	1d19      	adds	r1, r3, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	9103      	str	r1, [sp, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfbb      	ittet	lt
 800b1d4:	425b      	neglt	r3, r3
 800b1d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1da:	9307      	strge	r3, [sp, #28]
 800b1dc:	9307      	strlt	r3, [sp, #28]
 800b1de:	bfb8      	it	lt
 800b1e0:	9204      	strlt	r2, [sp, #16]
 800b1e2:	7823      	ldrb	r3, [r4, #0]
 800b1e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e6:	d10c      	bne.n	800b202 <_vfiprintf_r+0x176>
 800b1e8:	7863      	ldrb	r3, [r4, #1]
 800b1ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ec:	d135      	bne.n	800b25a <_vfiprintf_r+0x1ce>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	9203      	str	r2, [sp, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bfb8      	it	lt
 800b1fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1fe:	3402      	adds	r4, #2
 800b200:	9305      	str	r3, [sp, #20]
 800b202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2e8 <_vfiprintf_r+0x25c>
 800b206:	7821      	ldrb	r1, [r4, #0]
 800b208:	2203      	movs	r2, #3
 800b20a:	4650      	mov	r0, sl
 800b20c:	f7f4 ffc0 	bl	8000190 <memchr>
 800b210:	b140      	cbz	r0, 800b224 <_vfiprintf_r+0x198>
 800b212:	2340      	movs	r3, #64	; 0x40
 800b214:	eba0 000a 	sub.w	r0, r0, sl
 800b218:	fa03 f000 	lsl.w	r0, r3, r0
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	4303      	orrs	r3, r0
 800b220:	3401      	adds	r4, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b228:	482c      	ldr	r0, [pc, #176]	; (800b2dc <_vfiprintf_r+0x250>)
 800b22a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b22e:	2206      	movs	r2, #6
 800b230:	f7f4 ffae 	bl	8000190 <memchr>
 800b234:	2800      	cmp	r0, #0
 800b236:	d03f      	beq.n	800b2b8 <_vfiprintf_r+0x22c>
 800b238:	4b29      	ldr	r3, [pc, #164]	; (800b2e0 <_vfiprintf_r+0x254>)
 800b23a:	bb1b      	cbnz	r3, 800b284 <_vfiprintf_r+0x1f8>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	3307      	adds	r3, #7
 800b240:	f023 0307 	bic.w	r3, r3, #7
 800b244:	3308      	adds	r3, #8
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24a:	443b      	add	r3, r7
 800b24c:	9309      	str	r3, [sp, #36]	; 0x24
 800b24e:	e767      	b.n	800b120 <_vfiprintf_r+0x94>
 800b250:	fb0c 3202 	mla	r2, ip, r2, r3
 800b254:	460c      	mov	r4, r1
 800b256:	2001      	movs	r0, #1
 800b258:	e7a5      	b.n	800b1a6 <_vfiprintf_r+0x11a>
 800b25a:	2300      	movs	r3, #0
 800b25c:	3401      	adds	r4, #1
 800b25e:	9305      	str	r3, [sp, #20]
 800b260:	4619      	mov	r1, r3
 800b262:	f04f 0c0a 	mov.w	ip, #10
 800b266:	4620      	mov	r0, r4
 800b268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26c:	3a30      	subs	r2, #48	; 0x30
 800b26e:	2a09      	cmp	r2, #9
 800b270:	d903      	bls.n	800b27a <_vfiprintf_r+0x1ee>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0c5      	beq.n	800b202 <_vfiprintf_r+0x176>
 800b276:	9105      	str	r1, [sp, #20]
 800b278:	e7c3      	b.n	800b202 <_vfiprintf_r+0x176>
 800b27a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b27e:	4604      	mov	r4, r0
 800b280:	2301      	movs	r3, #1
 800b282:	e7f0      	b.n	800b266 <_vfiprintf_r+0x1da>
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	462a      	mov	r2, r5
 800b28a:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <_vfiprintf_r+0x258>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	4630      	mov	r0, r6
 800b290:	f7fd fa96 	bl	80087c0 <_printf_float>
 800b294:	4607      	mov	r7, r0
 800b296:	1c78      	adds	r0, r7, #1
 800b298:	d1d6      	bne.n	800b248 <_vfiprintf_r+0x1bc>
 800b29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b29c:	07d9      	lsls	r1, r3, #31
 800b29e:	d405      	bmi.n	800b2ac <_vfiprintf_r+0x220>
 800b2a0:	89ab      	ldrh	r3, [r5, #12]
 800b2a2:	059a      	lsls	r2, r3, #22
 800b2a4:	d402      	bmi.n	800b2ac <_vfiprintf_r+0x220>
 800b2a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a8:	f7ff fab8 	bl	800a81c <__retarget_lock_release_recursive>
 800b2ac:	89ab      	ldrh	r3, [r5, #12]
 800b2ae:	065b      	lsls	r3, r3, #25
 800b2b0:	f53f af12 	bmi.w	800b0d8 <_vfiprintf_r+0x4c>
 800b2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2b6:	e711      	b.n	800b0dc <_vfiprintf_r+0x50>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <_vfiprintf_r+0x258>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7fd fd14 	bl	8008cf0 <_printf_i>
 800b2c8:	e7e4      	b.n	800b294 <_vfiprintf_r+0x208>
 800b2ca:	bf00      	nop
 800b2cc:	0800c3e8 	.word	0x0800c3e8
 800b2d0:	0800c408 	.word	0x0800c408
 800b2d4:	0800c3c8 	.word	0x0800c3c8
 800b2d8:	0800c594 	.word	0x0800c594
 800b2dc:	0800c59e 	.word	0x0800c59e
 800b2e0:	080087c1 	.word	0x080087c1
 800b2e4:	0800b067 	.word	0x0800b067
 800b2e8:	0800c59a 	.word	0x0800c59a

0800b2ec <__sread>:
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f4:	f000 f8be 	bl	800b474 <_read_r>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	bfab      	itete	ge
 800b2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b300:	181b      	addge	r3, r3, r0
 800b302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b306:	bfac      	ite	ge
 800b308:	6563      	strge	r3, [r4, #84]	; 0x54
 800b30a:	81a3      	strhlt	r3, [r4, #12]
 800b30c:	bd10      	pop	{r4, pc}

0800b30e <__swrite>:
 800b30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b312:	461f      	mov	r7, r3
 800b314:	898b      	ldrh	r3, [r1, #12]
 800b316:	05db      	lsls	r3, r3, #23
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	4616      	mov	r6, r2
 800b31e:	d505      	bpl.n	800b32c <__swrite+0x1e>
 800b320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b324:	2302      	movs	r3, #2
 800b326:	2200      	movs	r2, #0
 800b328:	f000 f892 	bl	800b450 <_lseek_r>
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	4632      	mov	r2, r6
 800b33a:	463b      	mov	r3, r7
 800b33c:	4628      	mov	r0, r5
 800b33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b342:	f7fe b975 	b.w	8009630 <_write_r>

0800b346 <__sseek>:
 800b346:	b510      	push	{r4, lr}
 800b348:	460c      	mov	r4, r1
 800b34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34e:	f000 f87f 	bl	800b450 <_lseek_r>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	bf15      	itete	ne
 800b358:	6560      	strne	r0, [r4, #84]	; 0x54
 800b35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b362:	81a3      	strheq	r3, [r4, #12]
 800b364:	bf18      	it	ne
 800b366:	81a3      	strhne	r3, [r4, #12]
 800b368:	bd10      	pop	{r4, pc}

0800b36a <__sclose>:
 800b36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36e:	f000 b82b 	b.w	800b3c8 <_close_r>

0800b372 <__ascii_wctomb>:
 800b372:	4603      	mov	r3, r0
 800b374:	4608      	mov	r0, r1
 800b376:	b141      	cbz	r1, 800b38a <__ascii_wctomb+0x18>
 800b378:	2aff      	cmp	r2, #255	; 0xff
 800b37a:	d904      	bls.n	800b386 <__ascii_wctomb+0x14>
 800b37c:	228a      	movs	r2, #138	; 0x8a
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	4770      	bx	lr
 800b386:	700a      	strb	r2, [r1, #0]
 800b388:	2001      	movs	r0, #1
 800b38a:	4770      	bx	lr

0800b38c <__assert_func>:
 800b38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b38e:	4614      	mov	r4, r2
 800b390:	461a      	mov	r2, r3
 800b392:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <__assert_func+0x2c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4605      	mov	r5, r0
 800b398:	68d8      	ldr	r0, [r3, #12]
 800b39a:	b14c      	cbz	r4, 800b3b0 <__assert_func+0x24>
 800b39c:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <__assert_func+0x30>)
 800b39e:	9100      	str	r1, [sp, #0]
 800b3a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3a4:	4906      	ldr	r1, [pc, #24]	; (800b3c0 <__assert_func+0x34>)
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	f000 f81e 	bl	800b3e8 <fiprintf>
 800b3ac:	f000 f874 	bl	800b498 <abort>
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <__assert_func+0x38>)
 800b3b2:	461c      	mov	r4, r3
 800b3b4:	e7f3      	b.n	800b39e <__assert_func+0x12>
 800b3b6:	bf00      	nop
 800b3b8:	2000000c 	.word	0x2000000c
 800b3bc:	0800c5a5 	.word	0x0800c5a5
 800b3c0:	0800c5b2 	.word	0x0800c5b2
 800b3c4:	0800c5e0 	.word	0x0800c5e0

0800b3c8 <_close_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4d06      	ldr	r5, [pc, #24]	; (800b3e4 <_close_r+0x1c>)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	f7f6 f9f4 	bl	80017c0 <_close>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_close_r+0x1a>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_close_r+0x1a>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	200005e8 	.word	0x200005e8

0800b3e8 <fiprintf>:
 800b3e8:	b40e      	push	{r1, r2, r3}
 800b3ea:	b503      	push	{r0, r1, lr}
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	ab03      	add	r3, sp, #12
 800b3f0:	4805      	ldr	r0, [pc, #20]	; (800b408 <fiprintf+0x20>)
 800b3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f6:	6800      	ldr	r0, [r0, #0]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	f7ff fe47 	bl	800b08c <_vfiprintf_r>
 800b3fe:	b002      	add	sp, #8
 800b400:	f85d eb04 	ldr.w	lr, [sp], #4
 800b404:	b003      	add	sp, #12
 800b406:	4770      	bx	lr
 800b408:	2000000c 	.word	0x2000000c

0800b40c <_fstat_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d07      	ldr	r5, [pc, #28]	; (800b42c <_fstat_r+0x20>)
 800b410:	2300      	movs	r3, #0
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	f7f6 f9dc 	bl	80017d6 <_fstat>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d102      	bne.n	800b428 <_fstat_r+0x1c>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b103      	cbz	r3, 800b428 <_fstat_r+0x1c>
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	bf00      	nop
 800b42c:	200005e8 	.word	0x200005e8

0800b430 <_isatty_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d06      	ldr	r5, [pc, #24]	; (800b44c <_isatty_r+0x1c>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	f7f6 f9da 	bl	80017f4 <_isatty>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_isatty_r+0x1a>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_isatty_r+0x1a>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	200005e8 	.word	0x200005e8

0800b450 <_lseek_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d07      	ldr	r5, [pc, #28]	; (800b470 <_lseek_r+0x20>)
 800b454:	4604      	mov	r4, r0
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f7f6 f9d2 	bl	8001808 <_lseek>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_lseek_r+0x1e>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_lseek_r+0x1e>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	200005e8 	.word	0x200005e8

0800b474 <_read_r>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4d07      	ldr	r5, [pc, #28]	; (800b494 <_read_r+0x20>)
 800b478:	4604      	mov	r4, r0
 800b47a:	4608      	mov	r0, r1
 800b47c:	4611      	mov	r1, r2
 800b47e:	2200      	movs	r2, #0
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f7f6 f963 	bl	800174e <_read>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_read_r+0x1e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_read_r+0x1e>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200005e8 	.word	0x200005e8

0800b498 <abort>:
 800b498:	b508      	push	{r3, lr}
 800b49a:	2006      	movs	r0, #6
 800b49c:	f000 f82c 	bl	800b4f8 <raise>
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f7f6 f94a 	bl	800173a <_exit>

0800b4a6 <_raise_r>:
 800b4a6:	291f      	cmp	r1, #31
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	d904      	bls.n	800b4ba <_raise_r+0x14>
 800b4b0:	2316      	movs	r3, #22
 800b4b2:	6003      	str	r3, [r0, #0]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4bc:	b112      	cbz	r2, 800b4c4 <_raise_r+0x1e>
 800b4be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4c2:	b94b      	cbnz	r3, 800b4d8 <_raise_r+0x32>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 f831 	bl	800b52c <_getpid_r>
 800b4ca:	462a      	mov	r2, r5
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4d4:	f000 b818 	b.w	800b508 <_kill_r>
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d00a      	beq.n	800b4f2 <_raise_r+0x4c>
 800b4dc:	1c59      	adds	r1, r3, #1
 800b4de:	d103      	bne.n	800b4e8 <_raise_r+0x42>
 800b4e0:	2316      	movs	r3, #22
 800b4e2:	6003      	str	r3, [r0, #0]
 800b4e4:	2001      	movs	r0, #1
 800b4e6:	e7e7      	b.n	800b4b8 <_raise_r+0x12>
 800b4e8:	2400      	movs	r4, #0
 800b4ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	4798      	blx	r3
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e7e0      	b.n	800b4b8 <_raise_r+0x12>
	...

0800b4f8 <raise>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <raise+0xc>)
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f7ff bfd2 	b.w	800b4a6 <_raise_r>
 800b502:	bf00      	nop
 800b504:	2000000c 	.word	0x2000000c

0800b508 <_kill_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d07      	ldr	r5, [pc, #28]	; (800b528 <_kill_r+0x20>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f7f6 f900 	bl	800171a <_kill>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d102      	bne.n	800b524 <_kill_r+0x1c>
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	b103      	cbz	r3, 800b524 <_kill_r+0x1c>
 800b522:	6023      	str	r3, [r4, #0]
 800b524:	bd38      	pop	{r3, r4, r5, pc}
 800b526:	bf00      	nop
 800b528:	200005e8 	.word	0x200005e8

0800b52c <_getpid_r>:
 800b52c:	f7f6 b8ee 	b.w	800170c <_getpid>

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
