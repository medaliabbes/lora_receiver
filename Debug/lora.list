
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb68  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000113c  0800bca8  0800bca8  0001bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde4  0800cde4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdec  0800cdec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdec  0800cdec  0001cdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdf0  0800cdf0  0001cdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001dc  0800cfd0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800cfd0  00020604  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241b5  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a26  00000000  00000000  000443bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00048de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  0004a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e09c  00000000  00000000  0004bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a3c  00000000  00000000  00069fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6ff6  00000000  00000000  00083a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a9f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078b4  00000000  00000000  0012aa4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bc90 	.word	0x0800bc90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	0800bc90 	.word	0x0800bc90

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96c 	b.w	8000e68 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8082 	bne.w	8000cbe <__udivmoddi4+0x116>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	d946      	bls.n	8000c4e <__udivmoddi4+0xa6>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x32>
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa05 f302 	lsl.w	r3, r5, r2
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbe fcf8 	udiv	ip, lr, r8
 8000be4:	b2b9      	uxth	r1, r7
 8000be6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bee:	fb0c f001 	mul.w	r0, ip, r1
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000bfc:	f080 8116 	bcs.w	8000e2c <__udivmoddi4+0x284>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f240 8113 	bls.w	8000e2c <__udivmoddi4+0x284>
 8000c06:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f101 	mul.w	r1, r0, r1
 8000c20:	42a1      	cmp	r1, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8101 	bcs.w	8000e30 <__udivmoddi4+0x288>
 8000c2e:	42a1      	cmp	r1, r4
 8000c30:	f240 80fe 	bls.w	8000e30 <__udivmoddi4+0x288>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	1a64      	subs	r4, r4, r1
 8000c3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40d4      	lsrs	r4, r2
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xaa>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d14f      	bne.n	8000cfa <__udivmoddi4+0x152>
 8000c5a:	1bcb      	subs	r3, r1, r7
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f f887 	uxth.w	r8, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6a:	0c25      	lsrs	r5, r4, #16
 8000c6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c74:	fb08 f30c 	mul.w	r3, r8, ip
 8000c78:	42ab      	cmp	r3, r5
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000c7c:	197d      	adds	r5, r7, r5
 8000c7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0xe2>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	f200 80e7 	bhi.w	8000e58 <__udivmoddi4+0x2b0>
 8000c8a:	4684      	mov	ip, r0
 8000c8c:	1aed      	subs	r5, r5, r3
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c9c:	fb08 f800 	mul.w	r8, r8, r0
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x10c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x10a>
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	f200 80d7 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	eba4 0408 	sub.w	r4, r4, r8
 8000cb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbc:	e7c0      	b.n	8000c40 <__udivmoddi4+0x98>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80af 	beq.w	8000e26 <__udivmoddi4+0x27e>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d14b      	bne.n	8000d74 <__udivmoddi4+0x1cc>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0x13e>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80b7 	bhi.w	8000e54 <__udivmoddi4+0x2ac>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0303 	sbc.w	r3, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	469e      	mov	lr, r3
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0aa      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cf8:	e7a7      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000cfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	4097      	lsls	r7, r2
 8000d04:	fa20 f00c 	lsr.w	r0, r0, ip
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000d10:	4318      	orrs	r0, r3
 8000d12:	fbbc f1fe 	udiv	r1, ip, lr
 8000d16:	0c05      	lsrs	r5, r0, #16
 8000d18:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d24:	fb01 f308 	mul.w	r3, r1, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x19c>
 8000d30:	197d      	adds	r5, r7, r5
 8000d32:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d36:	f080 808b 	bcs.w	8000e50 <__udivmoddi4+0x2a8>
 8000d3a:	42ab      	cmp	r3, r5
 8000d3c:	f240 8088 	bls.w	8000e50 <__udivmoddi4+0x2a8>
 8000d40:	3902      	subs	r1, #2
 8000d42:	443d      	add	r5, r7
 8000d44:	1aeb      	subs	r3, r5, r3
 8000d46:	b285      	uxth	r5, r0
 8000d48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d54:	fb00 f308 	mul.w	r3, r0, r8
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	197d      	adds	r5, r7, r5
 8000d5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d62:	d271      	bcs.n	8000e48 <__udivmoddi4+0x2a0>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d96f      	bls.n	8000e48 <__udivmoddi4+0x2a0>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443d      	add	r5, r7
 8000d6c:	1aeb      	subs	r3, r5, r3
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	e778      	b.n	8000c66 <__udivmoddi4+0xbe>
 8000d74:	f1c1 0c20 	rsb	ip, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d84:	fa05 f301 	lsl.w	r3, r5, r1
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	0c23      	lsrs	r3, r4, #16
 8000d94:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000da0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000da4:	fb09 fa08 	mul.w	sl, r9, r8
 8000da8:	45aa      	cmp	sl, r5
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	fa00 f301 	lsl.w	r3, r0, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x21e>
 8000db4:	197d      	adds	r5, r7, r5
 8000db6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dba:	d247      	bcs.n	8000e4c <__udivmoddi4+0x2a4>
 8000dbc:	45aa      	cmp	sl, r5
 8000dbe:	d945      	bls.n	8000e4c <__udivmoddi4+0x2a4>
 8000dc0:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	eba5 050a 	sub.w	r5, r5, sl
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000dd0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000dd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd8:	fb00 f808 	mul.w	r8, r0, r8
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x248>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de6:	d22d      	bcs.n	8000e44 <__udivmoddi4+0x29c>
 8000de8:	45a0      	cmp	r8, r4
 8000dea:	d92b      	bls.n	8000e44 <__udivmoddi4+0x29c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfc:	454c      	cmp	r4, r9
 8000dfe:	46c6      	mov	lr, r8
 8000e00:	464d      	mov	r5, r9
 8000e02:	d319      	bcc.n	8000e38 <__udivmoddi4+0x290>
 8000e04:	d016      	beq.n	8000e34 <__udivmoddi4+0x28c>
 8000e06:	b15e      	cbz	r6, 8000e20 <__udivmoddi4+0x278>
 8000e08:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0c:	eb64 0405 	sbc.w	r4, r4, r5
 8000e10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e14:	40ca      	lsrs	r2, r1
 8000e16:	ea4c 0202 	orr.w	r2, ip, r2
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c6 2400 	strd	r2, r4, [r6]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e70e      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e2c:	46ac      	mov	ip, r5
 8000e2e:	e6ed      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e701      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e34:	4543      	cmp	r3, r8
 8000e36:	d2e6      	bcs.n	8000e06 <__udivmoddi4+0x25e>
 8000e38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3c:	eb69 0507 	sbc.w	r5, r9, r7
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7e0      	b.n	8000e06 <__udivmoddi4+0x25e>
 8000e44:	4628      	mov	r0, r5
 8000e46:	e7d3      	b.n	8000df0 <__udivmoddi4+0x248>
 8000e48:	4660      	mov	r0, ip
 8000e4a:	e78f      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e7ba      	b.n	8000dc6 <__udivmoddi4+0x21e>
 8000e50:	4661      	mov	r1, ip
 8000e52:	e777      	b.n	8000d44 <__udivmoddi4+0x19c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e74b      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	443d      	add	r5, r7
 8000e5e:	e715      	b.n	8000c8c <__udivmoddi4+0xe4>
 8000e60:	3802      	subs	r0, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	e726      	b.n	8000cb4 <__udivmoddi4+0x10c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 8000e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e74:	f001 f81a 	bl	8001eac <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 8000e78:	f000 fff6 	bl	8001e68 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <config_init+0x1c>)
 8000e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e82:	611a      	str	r2, [r3, #16]
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58004000 	.word	0x58004000

08000e8c <config_load>:
	  }

}

void config_load(config_t * param)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8000e94:	2008      	movs	r0, #8
 8000e96:	f007 fec9 	bl	8008c2c <malloc>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <config_load+0x54>)
 8000ea0:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e00b      	b.n	8000ec0 <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	440b      	add	r3, r1
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d9f0      	bls.n	8000ea8 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f007 fecc 	bl	8008c68 <memcpy>

	free(p_mydata) ;
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f007 feb3 	bl	8008c3c <free>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	0803f800 	.word	0x0803f800

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <__NVIC_EnableIRQ+0x34>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f80:	f023 0218 	bic.w	r2, r3, #24
 8000f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32 sys_get_tick()
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 8000fce:	f000 fe11 	bl	8001bf4 <HAL_GetTick>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <sys_random>:

extern u8  sys_random() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 8000fdc:	f000 fac8 	bl	8001570 <get_random>
 8000fe0:	4601      	mov	r1, r0
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <sys_random+0x20>)
 8000fe4:	fba3 2301 	umull	r2, r3, r3, r1
 8000fe8:	09da      	lsrs	r2, r3, #7
 8000fea:	4613      	mov	r3, r2
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	1aca      	subs	r2, r1, r3
 8000ff2:	b2d3      	uxtb	r3, r2
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	80808081 	.word	0x80808081

08000ffc <main>:

config_t config_param ;
config_t config_param_copy ; // this should be loaded from the flash

int main(void)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af02      	add	r7, sp, #8

  HAL_Init();
 8001002:	f000 fd8b 	bl	8001b1c <HAL_Init>

  SystemClock_Config();
 8001006:	f000 f869 	bl	80010dc <SystemClock_Config>

  MX_GPIO_Init();
 800100a:	f000 f915 	bl	8001238 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800100e:	f000 f8bf 	bl	8001190 <MX_USART1_UART_Init>
  SubghzApp_Init();
 8001012:	f000 fab7 	bl	8001584 <SubghzApp_Init>

  //Rx pin should not be floating
  //uart_driver_init() ;

  printf("Yes we did 'it!!\n");
 8001016:	4828      	ldr	r0, [pc, #160]	; (80010b8 <main+0xbc>)
 8001018:	f008 fc68 	bl	80098ec <puts>
  printf("enter your config\n");
 800101c:	4827      	ldr	r0, [pc, #156]	; (80010bc <main+0xc0>)
 800101e:	f008 fc65 	bl	80098ec <puts>

  /************load configuration from flash and print it ************/
  config_init();
 8001022:	f7ff ff23 	bl	8000e6c <config_init>

  config_load(&config_param) ;
 8001026:	4826      	ldr	r0, [pc, #152]	; (80010c0 <main+0xc4>)
 8001028:	f7ff ff30 	bl	8000e8c <config_load>

  memcpy(&config_param_copy , &config_param , sizeof(config_t));
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <main+0xc8>)
 800102e:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <main+0xc4>)
 8001030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001034:	e883 0003 	stmia.w	r3, {r0, r1}

  printf("param seuil %f , debit %f\n",config_param.seuil , config_param.debit) ;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <main+0xc4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa6b 	bl	8000518 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <main+0xc4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa64 	bl	8000518 <__aeabi_f2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9cd 2300 	strd	r2, r3, [sp]
 8001058:	4622      	mov	r2, r4
 800105a:	462b      	mov	r3, r5
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <main+0xcc>)
 800105e:	f008 fbbf 	bl	80097e0 <iprintf>

  /********************************************************************/
#ifdef RECEIVER

  ll_init(77) ;
 8001062:	204d      	movs	r0, #77	; 0x4d
 8001064:	f007 f8f6 	bl	8008254 <ll_init>

  printf("Node receiver \n");
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0xd0>)
 800106a:	f008 fc3f 	bl	80098ec <puts>

	  //PingPong_Process() ;

	  //HAL_Delay(1000);

	  ll_process() ;
 800106e:	f007 fbf5 	bl	800885c <ll_process>

#ifdef RECEIVER

	  int len = ll_get_recv_from( 52,recv) ;
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	2034      	movs	r0, #52	; 0x34
 8001078:	f007 fb8c 	bl	8008794 <ll_get_recv_from>
 800107c:	6178      	str	r0, [r7, #20]

	  if(len>0)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b00      	cmp	r3, #0
 8001082:	ddf4      	ble.n	800106e <main+0x72>
	  {
		  recv[len] = 0 ;
 8001084:	463a      	mov	r2, r7
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
		  printf("data from %d :   %s\n" , 52 ,recv) ;
 800108e:	463b      	mov	r3, r7
 8001090:	461a      	mov	r2, r3
 8001092:	2134      	movs	r1, #52	; 0x34
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <main+0xd4>)
 8001096:	f008 fba3 	bl	80097e0 <iprintf>

		  if(memcmp(recv,"medali" , 6) == 0 )
 800109a:	463b      	mov	r3, r7
 800109c:	2206      	movs	r2, #6
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <main+0xd8>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 fdd3 	bl	8008c4c <memcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e0      	bne.n	800106e <main+0x72>
			  {
				  ll_send_to(52 , (u8*)"abbes" , 5);
 80010ac:	2205      	movs	r2, #5
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <main+0xdc>)
 80010b0:	2034      	movs	r0, #52	; 0x34
 80010b2:	f007 f96b 	bl	800838c <ll_send_to>
  {
 80010b6:	e7da      	b.n	800106e <main+0x72>
 80010b8:	0800bca8 	.word	0x0800bca8
 80010bc:	0800bcbc 	.word	0x0800bcbc
 80010c0:	2000046c 	.word	0x2000046c
 80010c4:	20000504 	.word	0x20000504
 80010c8:	0800bcd0 	.word	0x0800bcd0
 80010cc:	0800bcec 	.word	0x0800bcec
 80010d0:	0800bcfc 	.word	0x0800bcfc
 80010d4:	0800bd14 	.word	0x0800bd14
 80010d8:	0800bd1c 	.word	0x0800bd1c

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09a      	sub	sp, #104	; 0x68
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2248      	movs	r2, #72	; 0x48
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f007 fdca 	bl	8008c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001102:	f001 f8ad 	bl	8002260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ff32 	bl	8000f70 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <SystemClock_Config+0xb0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <SystemClock_Config+0xb0>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <SystemClock_Config+0xb0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001128:	2324      	movs	r3, #36	; 0x24
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800112c:	2381      	movs	r3, #129	; 0x81
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001138:	23b0      	movs	r3, #176	; 0xb0
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fb35 	bl	80027b4 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001150:	f000 f879 	bl	8001246 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001154:	234f      	movs	r3, #79	; 0x4f
 8001156:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 feb8 	bl	8002ee8 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800117e:	f000 f862 	bl	8001246 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3768      	adds	r7, #104	; 0x68
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58000400 	.word	0x58000400

08001190 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 8001196:	4a27      	ldr	r2, [pc, #156]	; (8001234 <MX_USART1_UART_Init+0xa4>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011da:	f003 f81a 	bl	8004212 <HAL_UART_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011e4:	f000 f82f 	bl	8001246 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011ec:	f003 fe06 	bl	8004dfc <HAL_UARTEx_SetTxFifoThreshold>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011f6:	f000 f826 	bl	8001246 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 80011fe:	f003 fe3b 	bl	8004e78 <HAL_UARTEx_SetRxFifoThreshold>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001208:	f000 f81d 	bl	8001246 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <MX_USART1_UART_Init+0xa0>)
 800120e:	f003 fdbd 	bl	8004d8c <HAL_UARTEx_DisableFifoMode>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001218:	f000 f815 	bl	8001246 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 800121c:	2024      	movs	r0, #36	; 0x24
 800121e:	f7ff fe61 	bl	8000ee4 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 8001222:	2101      	movs	r1, #1
 8001224:	2024      	movs	r0, #36	; 0x24
 8001226:	f7ff fe79 	bl	8000f1c <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000474 	.word	0x20000474
 8001234:	40013800 	.word	0x40013800

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff feac 	bl	8000f9a <LL_AHB2_GRP1_EnableClock>

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124a:	b672      	cpsid	i
}
 800124c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124e:	e7fe      	b.n	800124e <Error_Handler+0x8>

08001250 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 8001256:	1d39      	adds	r1, r7, #4
 8001258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125c:	2201      	movs	r2, #1
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <__io_getchar+0x20>)
 8001260:	f003 f8bd 	bl	80043de <HAL_UART_Receive>
	return ch ;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000474 	.word	0x20000474

08001274 <__io_putchar>:

int __io_putchar(int ch)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 800127c:	1d39      	adds	r1, r7, #4
 800127e:	230a      	movs	r3, #10
 8001280:	2201      	movs	r2, #1
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <__io_putchar+0x20>)
 8001284:	f003 f815 	bl	80042b2 <HAL_UART_Transmit>
	return ch ;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000474 	.word	0x20000474

08001298 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800129c:	f000 fb8e 	bl	80019bc <BSP_RADIO_Init>
 80012a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fbc0 	bl	8001a38 <BSP_RADIO_ConfigRFSwitch>
 80012b8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80012c6:	f000 fc13 	bl	8001af0 <BSP_RADIO_GetTxConfig>
 80012ca:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80012d4:	f000 fc13 	bl	8001afe <BSP_RADIO_IsTCXO>
 80012d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}

080012de <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80012e2:	f000 fc13 	bl	8001b0c <BSP_RADIO_IsDCDC>
 80012e6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}

080012ec <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d302      	bcc.n	8001314 <ring_pushOver+0x28>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	e002      	b.n	800131a <ring_pushOver+0x2e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	3301      	adds	r3, #1
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	d110      	bne.n	800134c <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d302      	bcc.n	800133e <ring_pushOver+0x52>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	e002      	b.n	8001344 <ring_pushOver+0x58>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	60d3      	str	r3, [r2, #12]
        return 1;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <ring_pushOver+0x62>
    }
    
    return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <LL_AHB2_GRP1_EnableClock>:
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ac:	68fb      	ldr	r3, [r7, #12]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b096      	sub	sp, #88	; 0x58
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2238      	movs	r2, #56	; 0x38
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 fc4d 	bl	8008c84 <memset>
  if(huart->Instance==USART1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_UART_MspInit+0x94>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d12d      	bne.n	8001450 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013fc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f002 f916 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800140e:	f7ff ff1a 	bl	8001246 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001412:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001416:	f7ff ffb7 	bl	8001388 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ff9c 	bl	8001358 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001430:	2307      	movs	r3, #7
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001438:	4619      	mov	r1, r3
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <HAL_UART_MspInit+0x98>)
 800143c:	f000 fd98 	bl	8001f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2024      	movs	r0, #36	; 0x24
 8001446:	f000 fcda 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800144a:	2024      	movs	r0, #36	; 0x24
 800144c:	f000 fcf1 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3758      	adds	r7, #88	; 0x58
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013800 	.word	0x40013800
 800145c:	48000400 	.word	0x48000400

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 fb93 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <USART1_IRQHandler+0x2c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f003 0320 	and.w	r3, r3, #32
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <USART1_IRQHandler+0x2c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fa1c 	bl	800190c <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000474 	.word	0x20000474

080014e0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80014e6:	f002 fcd5 	bl	8003e94 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000050c 	.word	0x2000050c

080014f4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_SUBGHZ_Init+0x20>)
 800152a:	2208      	movs	r2, #8
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_SUBGHZ_Init+0x20>)
 8001530:	f002 fa34 	bl	800399c <HAL_SUBGHZ_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800153a:	f7ff fe84 	bl	8001246 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000050c 	.word	0x2000050c

08001548 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff ffcf 	bl	80014f4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2032      	movs	r0, #50	; 0x32
 800155c:	f000 fc4f 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001560:	2032      	movs	r0, #50	; 0x32
 8001562:	f000 fc66 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <get_random+0x10>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4798      	blx	r3
 800157a:	4603      	mov	r3, r0
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0800c22c 	.word	0x0800c22c

08001584 <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08b      	sub	sp, #44	; 0x2c
 8001588:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  printf( "\n\rPING PONG\n\r");
 800158a:	4843      	ldr	r0, [pc, #268]	; (8001698 <SubghzApp_Init+0x114>)
 800158c:	f008 f928 	bl	80097e0 <iprintf>
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 8001590:	2300      	movs	r3, #0
 8001592:	2201      	movs	r2, #1
 8001594:	2101      	movs	r1, #1
 8001596:	4841      	ldr	r0, [pc, #260]	; (800169c <SubghzApp_Init+0x118>)
 8001598:	f008 f922 	bl	80097e0 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <SubghzApp_Init+0x11c>)
 800159e:	4a41      	ldr	r2, [pc, #260]	; (80016a4 <SubghzApp_Init+0x120>)
 80015a0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <SubghzApp_Init+0x11c>)
 80015a4:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <SubghzApp_Init+0x124>)
 80015a6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <SubghzApp_Init+0x11c>)
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <SubghzApp_Init+0x128>)
 80015ac:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <SubghzApp_Init+0x11c>)
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <SubghzApp_Init+0x12c>)
 80015b2:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <SubghzApp_Init+0x11c>)
 80015b6:	4a3f      	ldr	r2, [pc, #252]	; (80016b4 <SubghzApp_Init+0x130>)
 80015b8:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <SubghzApp_Init+0x134>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4838      	ldr	r0, [pc, #224]	; (80016a0 <SubghzApp_Init+0x11c>)
 80015c0:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <SubghzApp_Init+0x134>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	483d      	ldr	r0, [pc, #244]	; (80016bc <SubghzApp_Init+0x138>)
 80015c8:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 80015ca:	483d      	ldr	r0, [pc, #244]	; (80016c0 <SubghzApp_Init+0x13c>)
 80015cc:	f008 f908 	bl	80097e0 <iprintf>
  printf("LORA_MODULATION\n\r");
 80015d0:	483c      	ldr	r0, [pc, #240]	; (80016c4 <SubghzApp_Init+0x140>)
 80015d2:	f008 f905 	bl	80097e0 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 80015d6:	217d      	movs	r1, #125	; 0x7d
 80015d8:	483b      	ldr	r0, [pc, #236]	; (80016c8 <SubghzApp_Init+0x144>)
 80015da:	f008 f901 	bl	80097e0 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 80015de:	2107      	movs	r1, #7
 80015e0:	483a      	ldr	r0, [pc, #232]	; (80016cc <SubghzApp_Init+0x148>)
 80015e2:	f008 f8fd 	bl	80097e0 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <SubghzApp_Init+0x134>)
 80015e8:	69dc      	ldr	r4, [r3, #28]
 80015ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015ee:	9308      	str	r3, [sp, #32]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9307      	str	r3, [sp, #28]
 80015f4:	2300      	movs	r3, #0
 80015f6:	9306      	str	r3, [sp, #24]
 80015f8:	2300      	movs	r3, #0
 80015fa:	9305      	str	r3, [sp, #20]
 80015fc:	2301      	movs	r3, #1
 80015fe:	9304      	str	r3, [sp, #16]
 8001600:	2300      	movs	r3, #0
 8001602:	9303      	str	r3, [sp, #12]
 8001604:	2308      	movs	r3, #8
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2307      	movs	r3, #7
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	2200      	movs	r2, #0
 8001614:	2114      	movs	r1, #20
 8001616:	2001      	movs	r0, #1
 8001618:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <SubghzApp_Init+0x134>)
 800161c:	699c      	ldr	r4, [r3, #24]
 800161e:	2301      	movs	r3, #1
 8001620:	9309      	str	r3, [sp, #36]	; 0x24
 8001622:	2300      	movs	r3, #0
 8001624:	9308      	str	r3, [sp, #32]
 8001626:	2300      	movs	r3, #0
 8001628:	9307      	str	r3, [sp, #28]
 800162a:	2300      	movs	r3, #0
 800162c:	9306      	str	r3, [sp, #24]
 800162e:	2301      	movs	r3, #1
 8001630:	9305      	str	r3, [sp, #20]
 8001632:	2300      	movs	r3, #0
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	2300      	movs	r3, #0
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	2305      	movs	r3, #5
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2308      	movs	r3, #8
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	2207      	movs	r2, #7
 800164a:	2100      	movs	r1, #0
 800164c:	2001      	movs	r0, #1
 800164e:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <SubghzApp_Init+0x134>)
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	21ff      	movs	r1, #255	; 0xff
 8001656:	2001      	movs	r0, #1
 8001658:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <SubghzApp_Init+0x134>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	0d9b      	lsrs	r3, r3, #22
 8001664:	461a      	mov	r2, r3
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <SubghzApp_Init+0x14c>)
 8001668:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800166a:	22ff      	movs	r2, #255	; 0xff
 800166c:	2100      	movs	r1, #0
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <SubghzApp_Init+0x150>)
 8001670:	f007 fb08 	bl	8008c84 <memset>

  printf( "rand=%ld\n\r", random_delay);
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <SubghzApp_Init+0x14c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <SubghzApp_Init+0x154>)
 800167c:	f008 f8b0 	bl	80097e0 <iprintf>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SubghzApp_Init+0x134>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <SubghzApp_Init+0x14c>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800168c:	4610      	mov	r0, r2
 800168e:	4798      	blx	r3

}
 8001690:	bf00      	nop
 8001692:	3704      	adds	r7, #4
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	0800bda0 	.word	0x0800bda0
 800169c:	0800bdb0 	.word	0x0800bdb0
 80016a0:	200001f8 	.word	0x200001f8
 80016a4:	080016dd 	.word	0x080016dd
 80016a8:	080016e9 	.word	0x080016e9
 80016ac:	08001715 	.word	0x08001715
 80016b0:	08001731 	.word	0x08001731
 80016b4:	0800174d 	.word	0x0800174d
 80016b8:	0800c22c 	.word	0x0800c22c
 80016bc:	33bca100 	.word	0x33bca100
 80016c0:	0800bdcc 	.word	0x0800bdcc
 80016c4:	0800bde0 	.word	0x0800bde0
 80016c8:	0800bdf4 	.word	0x0800bdf4
 80016cc:	0800be08 	.word	0x0800be08
 80016d0:	20000318 	.word	0x20000318
 80016d4:	20000218 	.word	0x20000218
 80016d8:	0800be18 	.word	0x0800be18

080016dc <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 80016e0:	f007 f8dc 	bl	800889c <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	817b      	strh	r3, [r7, #10]
 80016fa:	460b      	mov	r3, r1
 80016fc:	813b      	strh	r3, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	4619      	mov	r1, r3
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f006 ff02 	bl	8008510 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <OnTxTimeout+0x14>)
 800171a:	f008 f861 	bl	80097e0 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <OnTxTimeout+0x18>)
 8001720:	2204      	movs	r2, #4
 8001722:	701a      	strb	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800be24 	.word	0x0800be24
 800172c:	20000214 	.word	0x20000214

08001730 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <OnRxTimeout+0x14>)
 8001736:	f008 f853 	bl	80097e0 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <OnRxTimeout+0x18>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800be34 	.word	0x0800be34
 8001748:	20000214 	.word	0x20000214

0800174c <OnRxError>:

static void OnRxError(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <OnRxError+0x14>)
 8001752:	f008 f845 	bl	80097e0 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8001756:	4b03      	ldr	r3, [pc, #12]	; (8001764 <OnRxError+0x18>)
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	0800be44 	.word	0x0800be44
 8001764:	20000214 	.word	0x20000214

08001768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	return 1;
 800176c:	2301      	movs	r3, #1
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <_kill>:

int _kill(int pid, int sig)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001780:	f007 fa2a 	bl	8008bd8 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	2216      	movs	r2, #22
 8001788:	601a      	str	r2, [r3, #0]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_exit>:

void _exit (int status)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800179e:	f04f 31ff 	mov.w	r1, #4294967295
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffe7 	bl	8001776 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017a8:	e7fe      	b.n	80017a8 <_exit+0x12>

080017aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e00a      	b.n	80017d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017bc:	f7ff fd48 	bl	8001250 <__io_getchar>
 80017c0:	4601      	mov	r1, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	60ba      	str	r2, [r7, #8]
 80017c8:	b2ca      	uxtb	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbf0      	blt.n	80017bc <_read+0x12>
	}

return len;
 80017da:	687b      	ldr	r3, [r7, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e009      	b.n	800180a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fd38 	bl	8001274 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf1      	blt.n	80017f6 <_write+0x12>
	}
	return len;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_close>:

int _close(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001842:	605a      	str	r2, [r3, #4]
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <_isatty>:

int _isatty(int file)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f007 f994 	bl	8008bd8 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20008000 	.word	0x20008000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	2000031c 	.word	0x2000031c
 80018e4:	20000608 	.word	0x20000608

080018e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <set_NL_detection+0x14>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000320 	.word	0x20000320

0800190c <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d101      	bne.n	8001920 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 800191c:	f7ff ffea 	bl	80018f4 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4619      	mov	r1, r3
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <uart_RX_interrupt_hanlder+0x28>)
 8001926:	f7ff fce1 	bl	80012ec <ring_pushOver>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000518 	.word	0x20000518

08001938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7ff ffd4 	bl	80018e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopForever+0x6>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopForever+0xe>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopForever+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001966:	f007 f93d 	bl	8008be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff fb47 	bl	8000ffc <main>

0800196e <LoopForever>:

LoopForever:
    b LoopForever
 800196e:	e7fe      	b.n	800196e <LoopForever>
  ldr   r0, =_estack
 8001970:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800197c:	0800cdf4 	.word	0x0800cdf4
  ldr r2, =_sbss
 8001980:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001984:	20000604 	.word	0x20000604

08001988 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>

0800198a <LL_AHB2_GRP1_EnableClock>:
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4313      	orrs	r3, r2
 80019a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80019d0:	2004      	movs	r0, #4
 80019d2:	f7ff ffda 	bl	800198a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80019d6:	2310      	movs	r3, #16
 80019d8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <BSP_RADIO_Init+0x78>)
 80019ec:	f000 fac0 	bl	8001f70 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80019f0:	2320      	movs	r3, #32
 80019f2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <BSP_RADIO_Init+0x78>)
 80019fa:	f000 fab9 	bl	8001f70 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80019fe:	2308      	movs	r3, #8
 8001a00:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <BSP_RADIO_Init+0x78>)
 8001a08:	f000 fab2 	bl	8001f70 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2120      	movs	r1, #32
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <BSP_RADIO_Init+0x78>)
 8001a12:	f000 fc0d 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001a16:	2200      	movs	r2, #0
 8001a18:	2110      	movs	r1, #16
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <BSP_RADIO_Init+0x78>)
 8001a1c:	f000 fc08 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001a20:	2200      	movs	r2, #0
 8001a22:	2108      	movs	r1, #8
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <BSP_RADIO_Init+0x78>)
 8001a26:	f000 fc03 	bl	8002230 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	48000800 	.word	0x48000800

08001a38 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d84b      	bhi.n	8001ae0 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a81 	.word	0x08001a81
 8001a58:	08001aa1 	.word	0x08001aa1
 8001a5c:	08001ac1 	.word	0x08001ac1
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2108      	movs	r1, #8
 8001a64:	4821      	ldr	r0, [pc, #132]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a66:	f000 fbe3 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	481f      	ldr	r0, [pc, #124]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a70:	f000 fbde 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2120      	movs	r1, #32
 8001a78:	481c      	ldr	r0, [pc, #112]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a7a:	f000 fbd9 	bl	8002230 <HAL_GPIO_WritePin>
      break;      
 8001a7e:	e030      	b.n	8001ae2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2108      	movs	r1, #8
 8001a84:	4819      	ldr	r0, [pc, #100]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a86:	f000 fbd3 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4817      	ldr	r0, [pc, #92]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a90:	f000 fbce 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001a94:	2200      	movs	r2, #0
 8001a96:	2120      	movs	r1, #32
 8001a98:	4814      	ldr	r0, [pc, #80]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001a9a:	f000 fbc9 	bl	8002230 <HAL_GPIO_WritePin>
      break;
 8001a9e:	e020      	b.n	8001ae2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001aa6:	f000 fbc3 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	480f      	ldr	r0, [pc, #60]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ab0:	f000 fbbe 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001aba:	f000 fbb9 	bl	8002230 <HAL_GPIO_WritePin>
      break;
 8001abe:	e010      	b.n	8001ae2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ac6:	f000 fbb3 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001aca:	2200      	movs	r2, #0
 8001acc:	2110      	movs	r1, #16
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ad0:	f000 fbae 	bl	8002230 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ada:	f000 fba9 	bl	8002230 <HAL_GPIO_WritePin>
      break;
 8001ade:	e000      	b.n	8001ae2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001ae0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	48000800 	.word	0x48000800

08001af0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 f95e 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b2c:	f001 fba0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_Init+0x3c>)
 8001b34:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f810 	bl	8001b5c <HAL_InitTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	e001      	b.n	8001b4c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b48:	f7ff fc36 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_InitTick+0x6c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d024      	beq.n	8001bba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b70:	f001 fb7e 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_InitTick+0x6c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f960 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10f      	bne.n	8001bb4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d809      	bhi.n	8001bae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	f000 f92c 	bl	8001dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_InitTick+0x70>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e007      	b.n	8001bbe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e004      	b.n	8001bbe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	2000058c 	.word	0x2000058c

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	2000058c 	.word	0x2000058c

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffe0 	bl	8001bf4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008

08001c50 <__NVIC_SetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff44 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff92 	bl	8001d40 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff61 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff37 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa4 	bl	8001da4 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_FLASH_Unlock+0x38>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da0b      	bge.n	8001e92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_FLASH_Unlock+0x38>)
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_FLASH_Unlock+0x3c>)
 8001e7e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_FLASH_Unlock+0x38>)
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_FLASH_Unlock+0x40>)
 8001e84:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_FLASH_Unlock+0x38>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da01      	bge.n	8001e92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	58004000 	.word	0x58004000
 8001ea4:	45670123 	.word	0x45670123
 8001ea8:	cdef89ab 	.word	0xcdef89ab

08001eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fe9e 	bl	8001bf4 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001eba:	e009      	b.n	8001ed0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001ebc:	f7ff fe9a 	bl	8001bf4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d801      	bhi.n	8001ed0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e047      	b.n	8001f60 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d0ee      	beq.n	8001ebc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001efa:	4013      	ands	r3, r2
 8001efc:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <FLASH_WaitForLastOperation+0x6c>
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001f12:	4915      	ldr	r1, [pc, #84]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	618b      	str	r3, [r1, #24]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <FLASH_WaitForLastOperation+0x80>
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001f2a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <FLASH_WaitForLastOperation+0xc0>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e011      	b.n	8001f60 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001f3c:	f7ff fe5a 	bl	8001bf4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d801      	bhi.n	8001f50 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e007      	b.n	8001f60 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <FLASH_WaitForLastOperation+0xbc>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f5c:	d0ee      	beq.n	8001f3c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	58004000 	.word	0x58004000
 8001f6c:	20000324 	.word	0x20000324

08001f70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e140      	b.n	8002202 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8132 	beq.w	80021fc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_GPIO_Init+0x40>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b03      	cmp	r3, #3
 800201c:	d017      	beq.n	800204e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d123      	bne.n	80020a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	6939      	ldr	r1, [r7, #16]
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0203 	and.w	r2, r3, #3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 808c 	beq.w	80021fc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	2207      	movs	r2, #7
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1bc>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a44      	ldr	r2, [pc, #272]	; (8002224 <HAL_GPIO_Init+0x2b4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1b8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_GPIO_Init+0x2b8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1b4>
 8002120:	2302      	movs	r3, #2
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1be>
 8002124:	2307      	movs	r3, #7
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1be>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1be>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800213e:	4938      	ldr	r1, [pc, #224]	; (8002220 <HAL_GPIO_Init+0x2b0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_GPIO_Init+0x2bc>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002152:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002172:	4a2e      	ldr	r2, [pc, #184]	; (800222c <HAL_GPIO_Init+0x2bc>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_GPIO_Init+0x2bc>)
 800217c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002180:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_GPIO_Init+0x2bc>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_GPIO_Init+0x2bc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021cc:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_GPIO_Init+0x2bc>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_GPIO_Init+0x2bc>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_GPIO_Init+0x2bc>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f aeb7 	bne.w	8001f80 <HAL_GPIO_Init+0x10>
  }
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800
 800222c:	58000800 	.word	0x58000800

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800224c:	e002      	b.n	8002254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <HAL_PWR_EnableBkUpAccess+0x18>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	58000400 	.word	0x58000400

0800227c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_PWREx_GetVoltageRange+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	58000400 	.word	0x58000400

08002294 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d101      	bne.n	80022aa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_PWR_IsEnabledBkUpAccess+0x18>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	58000400 	.word	0x58000400

080022b8 <LL_RCC_HSE_EnableTcxo>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <LL_RCC_HSE_DisableTcxo>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002302:	d101      	bne.n	8002308 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <LL_RCC_HSE_Enable>:
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <LL_RCC_HSE_Disable>:
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_HSE_IsReady>:
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800235c:	d101      	bne.n	8002362 <LL_RCC_HSE_IsReady+0x18>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_RCC_HSE_IsReady+0x1a>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <LL_RCC_HSI_Enable>:
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <LL_RCC_HSI_Disable>:
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <LL_RCC_HSI_IsReady>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80023a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d101      	bne.n	80023bc <LL_RCC_HSI_IsReady+0x18>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_RCC_HSI_IsReady+0x1a>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d101      	bne.n	8002406 <LL_RCC_LSE_IsReady+0x18>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_RCC_LSE_IsReady+0x1a>
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d101      	bne.n	8002468 <LL_RCC_LSI_IsReady+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_RCC_LSI_IsReady+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d101      	bne.n	80024c0 <LL_RCC_MSI_IsReady+0x16>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_RCC_MSI_IsReady+0x18>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d101      	bne.n	80024e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b2:	f023 020f 	bic.w	r2, r3, #15
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002688:	6013      	str	r3, [r2, #0]
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026c0:	d101      	bne.n	80026c6 <LL_RCC_PLL_IsReady+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_RCC_PLL_IsReady+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d101      	bne.n	8002742 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d101      	bne.n	8002766 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002782:	d101      	bne.n	8002788 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a4:	d101      	bne.n	80027aa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e38a      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	f7ff fece 	bl	8002566 <LL_RCC_GetSysClkSource>
 80027ca:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027cc:	f7ff ffa2 	bl	8002714 <LL_RCC_PLL_GetMainSource>
 80027d0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80c9 	beq.w	8002972 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3e>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d17b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d178      	bne.n	80028e4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f2:	f7ff fe5a 	bl	80024aa <LL_RCC_MSI_IsReady>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x54>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e369      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x72>
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002824:	e006      	b.n	8002834 <HAL_RCC_OscConfig+0x80>
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	4293      	cmp	r3, r2
 8002836:	d222      	bcs.n	800287e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fd4f 	bl	80032e0 <RCC_SetFlashLatencyFromMSIRange>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e347      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fe4e 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>
 800287c:	e021      	b.n	80028c2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fe35 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fd14 	bl	80032e0 <RCC_SetFlashLatencyFromMSIRange>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e30c      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028c2:	f000 fcd5 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4ab4      	ldr	r2, [pc, #720]	; (8002b9c <HAL_RCC_OscConfig+0x3e8>)
 80028ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028cc:	4bb4      	ldr	r3, [pc, #720]	; (8002ba0 <HAL_RCC_OscConfig+0x3ec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f943 	bl	8001b5c <HAL_InitTick>
 80028d6:	4603      	mov	r3, r0
 80028d8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d047      	beq.n	8002970 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	e2fb      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02c      	beq.n	8002946 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ec:	f7ff fdc1 	bl	8002472 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f980 	bl	8001bf4 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f8:	f7ff f97c 	bl	8001bf4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e2e8      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800290a:	f7ff fdce 	bl	80024aa <LL_RCC_MSI_IsReady>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f1      	beq.n	80028f8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fdea 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002946:	f7ff fda2 	bl	800248e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294a:	f7ff f953 	bl	8001bf4 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002952:	f7ff f94f 	bl	8001bf4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e2bb      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002964:	f7ff fda1 	bl	80024aa <LL_RCC_MSI_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f1      	bne.n	8002952 <HAL_RCC_OscConfig+0x19e>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002970:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d05f      	beq.n	8002a3e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d005      	beq.n	8002990 <HAL_RCC_OscConfig+0x1dc>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d10d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d10a      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	f7ff fcdb 	bl	800234a <LL_RCC_HSE_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d050      	beq.n	8002a3c <HAL_RCC_OscConfig+0x288>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e29a      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x218>
 80029c6:	f7ff fca4 	bl	8002312 <LL_RCC_HSE_Enable>
 80029ca:	e00d      	b.n	80029e8 <HAL_RCC_OscConfig+0x234>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80029d4:	d104      	bne.n	80029e0 <HAL_RCC_OscConfig+0x22c>
 80029d6:	f7ff fc6f 	bl	80022b8 <LL_RCC_HSE_EnableTcxo>
 80029da:	f7ff fc9a 	bl	8002312 <LL_RCC_HSE_Enable>
 80029de:	e003      	b.n	80029e8 <HAL_RCC_OscConfig+0x234>
 80029e0:	f7ff fca5 	bl	800232e <LL_RCC_HSE_Disable>
 80029e4:	f7ff fc76 	bl	80022d4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d012      	beq.n	8002a16 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff f900 	bl	8001bf4 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff f8fc 	bl	8001bf4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e268      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a0a:	f7ff fc9e 	bl	800234a <LL_RCC_HSE_IsReady>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f1      	beq.n	80029f8 <HAL_RCC_OscConfig+0x244>
 8002a14:	e013      	b.n	8002a3e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff f8ed 	bl	8001bf4 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1e:	f7ff f8e9 	bl	8001bf4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	; 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e255      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a30:	f7ff fc8b 	bl	800234a <LL_RCC_HSE_IsReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <HAL_RCC_OscConfig+0x26a>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2a8>
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d113      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d110      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	f7ff fca2 	bl	80023a4 <LL_RCC_HSI_IsReady>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2be>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e234      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fca5 	bl	80023c6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	e031      	b.n	8002ae2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d019      	beq.n	8002aba <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a86:	f7ff fc71 	bl	800236c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f8b3 	bl	8001bf4 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7ff f8af 	bl	8001bf4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e21b      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002aa4:	f7ff fc7e 	bl	80023a4 <LL_RCC_HSI_IsReady>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f1      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fc87 	bl	80023c6 <LL_RCC_HSI_SetCalibTrimming>
 8002ab8:	e013      	b.n	8002ae2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	f7ff fc65 	bl	8002388 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7ff f899 	bl	8001bf4 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7ff f895 	bl	8001bf4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e201      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ad8:	f7ff fc64 	bl	80023a4 <LL_RCC_HSI_IsReady>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f1      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d06e      	beq.n	8002bcc <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d056      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d031      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1da      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002b30:	f7ff fc7e 	bl	8002430 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b34:	f7ff f85e 	bl	8001bf4 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f85a 	bl	8001bf4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b11      	cmp	r3, #17
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e1c6      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002b4e:	f7ff fc7f 	bl	8002450 <LL_RCC_LSI_IsReady>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f1      	bne.n	8002b3c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b60:	f023 0210 	bic.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	f7ff fc4d 	bl	8002410 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7ff f83d 	bl	8001bf4 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7ff f839 	bl	8001bf4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b11      	cmp	r3, #17
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1a5      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b90:	f7ff fc5e 	bl	8002450 <LL_RCC_LSI_IsReady>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f1      	beq.n	8002b7e <HAL_RCC_OscConfig+0x3ca>
 8002b9a:	e017      	b.n	8002bcc <HAL_RCC_OscConfig+0x418>
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	f7ff fc44 	bl	8002430 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7ff f824 	bl	8001bf4 <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7ff f820 	bl	8001bf4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b11      	cmp	r3, #17
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e18c      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002bc2:	f7ff fc45 	bl	8002450 <LL_RCC_LSI_IsReady>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f1      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80d8 	beq.w	8002d8a <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bda:	f7ff fb5b 	bl	8002294 <LL_PWR_IsEnabledBkUpAccess>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d113      	bne.n	8002c0c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002be4:	f7ff fb3c 	bl	8002260 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be8:	f7ff f804 	bl	8001bf4 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7ff f800 	bl	8001bf4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e16c      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002c02:	f7ff fb47 	bl	8002294 <LL_PWR_IsEnabledBkUpAccess>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f1      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d07b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b85      	cmp	r3, #133	; 0x85
 8002c1a:	d003      	beq.n	8002c24 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe ffdc 	bl	8001bf4 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe ffce 	bl	8001bf4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e138      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c6a:	f7ff fbc0 	bl	80023ee <LL_RCC_LSE_IsReady>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b81      	cmp	r3, #129	; 0x81
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b85      	cmp	r3, #133	; 0x85
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe ffb6 	bl	8001bf4 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe ffa8 	bl	8001bf4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e112      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ec      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002cc6:	e060      	b.n	8002d8a <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe ff94 	bl	8001bf4 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe ff86 	bl	8001bf4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0f0      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ec      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x530>
 8002d0a:	e03e      	b.n	8002d8a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe ff72 	bl	8001bf4 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe ff64 	bl	8001bf4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0ce      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ec      	bne.n	8002d28 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff51 	bl	8001bf4 <HAL_GetTick>
 8002d52:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe ff43 	bl	8001bf4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0ad      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d80:	f7ff fb35 	bl	80023ee <LL_RCC_LSE_IsReady>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ef      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a3 	beq.w	8002eda <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d076      	beq.n	8002e88 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d14b      	bne.n	8002e3a <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	f7ff fc76 	bl	8002692 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe ff25 	bl	8001bf4 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe ff21 	bl	8001bf4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b0a      	cmp	r3, #10
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e08d      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dc0:	f7ff fc75 	bl	80026ae <LL_RCC_PLL_IsReady>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f1      	bne.n	8002dae <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_RCC_OscConfig+0x730>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	4311      	orrs	r1, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002df6:	430a      	orrs	r2, r1
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	f7ff fc39 	bl	8002676 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe feee 	bl	8001bf4 <HAL_GetTick>
 8002e18:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe feea 	bl	8001bf4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e056      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e2e:	f7ff fc3e 	bl	80026ae <LL_RCC_PLL_IsReady>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f1      	beq.n	8002e1c <HAL_RCC_OscConfig+0x668>
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	f7ff fc2a 	bl	8002692 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	f023 0303 	bic.w	r3, r3, #3
 8002e4c:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e58:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e60:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fec7 	bl	8001bf4 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe fec3 	bl	8001bf4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b0a      	cmp	r3, #10
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e02f      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e7c:	f7ff fc17 	bl	80026ae <LL_RCC_PLL_IsReady>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f1      	bne.n	8002e6a <HAL_RCC_OscConfig+0x6b6>
 8002e86:	e028      	b.n	8002eda <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e023      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d115      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	11c1808c 	.word	0x11c1808c

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e10f      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d91b      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0a:	4b86      	ldr	r3, [pc, #536]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 0207 	bic.w	r2, r3, #7
 8002f12:	4984      	ldr	r1, [pc, #528]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fe6b 	bl	8001bf4 <HAL_GetTick>
 8002f1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f22:	f7fe fe67 	bl	8001bf4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0f3      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d1ef      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fb12 	bl	800257c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fe4c 	bl	8001bf4 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f60:	f7fe fe48 	bl	8001bf4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0d4      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f72:	f7ff fbda 	bl	800272a <LL_RCC_IsActiveFlag_HPRE>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d016      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fb08 	bl	80025a2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f92:	f7fe fe2f 	bl	8001bf4 <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f9a:	f7fe fe2b 	bl	8001bf4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b7      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002fac:	f7ff fbce 	bl	800274c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f1      	beq.n	8002f9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fb01 	bl	80025ce <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fcc:	f7fe fe12 	bl	8001bf4 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fd4:	f7fe fe0e 	bl	8001bf4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e09a      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fe6:	f7ff fbc3 	bl	8002770 <LL_RCC_IsActiveFlag_PPRE1>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f1      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d017      	beq.n	800302c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff faf6 	bl	80025f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003008:	f7fe fdf4 	bl	8001bf4 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003010:	f7fe fdf0 	bl	8001bf4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e07c      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003022:	f7ff fbb6 	bl	8002792 <LL_RCC_IsActiveFlag_PPRE2>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d043      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d106      	bne.n	800304e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003040:	f7ff f983 	bl	800234a <LL_RCC_HSE_IsReady>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11e      	bne.n	8003088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e066      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d106      	bne.n	8003064 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003056:	f7ff fb2a 	bl	80026ae <LL_RCC_PLL_IsReady>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e05b      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800306c:	f7ff fa1d 	bl	80024aa <LL_RCC_MSI_IsReady>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e050      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800307a:	f7ff f993 	bl	80023a4 <LL_RCC_HSI_IsReady>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e049      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fa57 	bl	8002540 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003092:	f7fe fdaf 	bl	8001bf4 <HAL_GetTick>
 8003096:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309a:	f7fe fdab 	bl	8001bf4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e035      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b0:	f7ff fa59 	bl	8002566 <LL_RCC_GetSysClkSource>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1ec      	bne.n	800309a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d21b      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4913      	ldr	r1, [pc, #76]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fe fd89 	bl	8001bf4 <HAL_GetTick>
 80030e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030e6:	f7fe fd85 	bl	8001bf4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e011      	b.n	800311c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x23c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003106:	f000 f8b3 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 800310a:	4603      	mov	r3, r0
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_RCC_ClockConfig+0x240>)
 800310e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_ClockConfig+0x244>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe fd21 	bl	8001b5c <HAL_InitTick>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	58004000 	.word	0x58004000
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	f7ff fa12 	bl	8002566 <LL_RCC_GetSysClkSource>
 8003142:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	f7ff fae6 	bl	8002714 <LL_RCC_PLL_GetMainSource>
 8003148:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x2c>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d139      	bne.n	80031ca <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d136      	bne.n	80031ca <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800315c:	f7ff f9b5 	bl	80024ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d115      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x62>
 8003166:	f7ff f9b0 	bl	80024ca <LL_RCC_MSI_IsEnabledRangeSelect>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_GetSysClockFreq+0x4e>
 8003170:	f7ff f9bb 	bl	80024ea <LL_RCC_MSI_GetRange>
 8003174:	4603      	mov	r3, r0
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	e005      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x5a>
 800317e:	f7ff f9bf 	bl	8002500 <LL_RCC_MSI_GetRangeAfterStandby>
 8003182:	4603      	mov	r3, r0
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_RCC_GetSysClockFreq+0x134>)
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	e014      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x8c>
 8003192:	f7ff f99a 	bl	80024ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x7a>
 800319c:	f7ff f9a5 	bl	80024ea <LL_RCC_MSI_GetRange>
 80031a0:	4603      	mov	r3, r0
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	e005      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
 80031aa:	f7ff f9a9 	bl	8002500 <LL_RCC_MSI_GetRangeAfterStandby>
 80031ae:	4603      	mov	r3, r0
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <HAL_RCC_GetSysClockFreq+0x134>)
 80031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031bc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d115      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80031c8:	e012      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e00c      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d109      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031dc:	f7ff f888 	bl	80022f0 <LL_RCC_HSE_IsEnabledDiv2>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e001      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <HAL_RCC_GetSysClockFreq+0x13c>)
 80031ee:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f0:	f7ff f9b9 	bl	8002566 <LL_RCC_GetSysClkSource>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d12f      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80031fa:	f7ff fa8b 	bl	8002714 <LL_RCC_PLL_GetMainSource>
 80031fe:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0xde>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d003      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0xe4>
 800320c:	e00d      	b.n	800322a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 8003210:	60fb      	str	r3, [r7, #12]
        break;
 8003212:	e00d      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003214:	f7ff f86c 	bl	80022f0 <LL_RCC_HSE_IsEnabledDiv2>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_GetSysClockFreq+0x138>)
 8003220:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003222:	e005      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003226:	60fb      	str	r3, [r7, #12]
        break;
 8003228:	e002      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	60fb      	str	r3, [r7, #12]
        break;
 800322e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003230:	f7ff fa4e 	bl	80026d0 <LL_RCC_PLL_GetN>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	fb03 f402 	mul.w	r4, r3, r2
 800323c:	f7ff fa5f 	bl	80026fe <LL_RCC_PLL_GetDivider>
 8003240:	4603      	mov	r3, r0
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	3301      	adds	r3, #1
 8003246:	fbb4 f4f3 	udiv	r4, r4, r3
 800324a:	f7ff fa4d 	bl	80026e8 <LL_RCC_PLL_GetR>
 800324e:	4603      	mov	r3, r0
 8003250:	0f5b      	lsrs	r3, r3, #29
 8003252:	3301      	adds	r3, #1
 8003254:	fbb4 f3f3 	udiv	r3, r4, r3
 8003258:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800325a:	697b      	ldr	r3, [r7, #20]
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}
 8003264:	0800c1c4 	.word	0x0800c1c4
 8003268:	00f42400 	.word	0x00f42400
 800326c:	01e84800 	.word	0x01e84800

08003270 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b598      	push	{r3, r4, r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003274:	f7ff ff5c 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8003278:	4604      	mov	r4, r0
 800327a:	f7ff f9ce 	bl	800261a <LL_RCC_GetAHBPrescaler>
 800327e:	4603      	mov	r3, r0
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_GetHCLKFreq+0x24>)
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd98      	pop	{r3, r4, r7, pc}
 8003294:	0800c164 	.word	0x0800c164

08003298 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003298:	b598      	push	{r3, r4, r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800329c:	f7ff ffe8 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032a0:	4604      	mov	r4, r0
 80032a2:	f7ff f9d2 	bl	800264a <LL_RCC_GetAPB1Prescaler>
 80032a6:	4603      	mov	r3, r0
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	4a03      	ldr	r2, [pc, #12]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd98      	pop	{r3, r4, r7, pc}
 80032b8:	0800c1a4 	.word	0x0800c1a4

080032bc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b598      	push	{r3, r4, r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80032c0:	f7ff ffd6 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032c4:	4604      	mov	r4, r0
 80032c6:	f7ff f9cb 	bl	8002660 <LL_RCC_GetAPB2Prescaler>
 80032ca:	4603      	mov	r3, r0
 80032cc:	0adb      	lsrs	r3, r3, #11
 80032ce:	4a03      	ldr	r2, [pc, #12]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd98      	pop	{r3, r4, r7, pc}
 80032dc:	0800c1a4 	.word	0x0800c1a4

080032e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80032f8:	f7ff f99a 	bl	8002630 <LL_RCC_GetAHB3Prescaler>
 80032fc:	4603      	mov	r3, r0
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4a09      	ldr	r2, [pc, #36]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9c      	lsrs	r4, r3, #18
 800331c:	f7fe ffae 	bl	800227c <HAL_PWREx_GetVoltageRange>
 8003320:	4603      	mov	r3, r0
 8003322:	4619      	mov	r1, r3
 8003324:	4620      	mov	r0, r4
 8003326:	f000 f80b 	bl	8003340 <RCC_SetFlashLatency>
 800332a:	4603      	mov	r3, r0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bd90      	pop	{r4, r7, pc}
 8003334:	0800c1c4 	.word	0x0800c1c4
 8003338:	0800c164 	.word	0x0800c164
 800333c:	431bde83 	.word	0x431bde83

08003340 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800334a:	4a3c      	ldr	r2, [pc, #240]	; (800343c <RCC_SetFlashLatency+0xfc>)
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003354:	6018      	str	r0, [r3, #0]
 8003356:	3304      	adds	r3, #4
 8003358:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800335a:	4a39      	ldr	r2, [pc, #228]	; (8003440 <RCC_SetFlashLatency+0x100>)
 800335c:	f107 0318 	add.w	r3, r7, #24
 8003360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003364:	6018      	str	r0, [r3, #0]
 8003366:	3304      	adds	r3, #4
 8003368:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800336a:	4a36      	ldr	r2, [pc, #216]	; (8003444 <RCC_SetFlashLatency+0x104>)
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	ca07      	ldmia	r2, {r0, r1, r2}
 8003372:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003376:	2300      	movs	r3, #0
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003380:	d11d      	bne.n	80033be <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 8003386:	e016      	b.n	80033b6 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003390:	4413      	add	r3, r2
 8003392:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4293      	cmp	r3, r2
 800339c:	d808      	bhi.n	80033b0 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a6:	4413      	add	r3, r2
 80033a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ae:	e023      	b.n	80033f8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	3301      	adds	r3, #1
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d9e5      	bls.n	8003388 <RCC_SetFlashLatency+0x48>
 80033bc:	e01c      	b.n	80033f8 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e016      	b.n	80033f2 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033cc:	4413      	add	r3, r2
 80033ce:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80033d2:	461a      	mov	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d808      	bhi.n	80033ec <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033e2:	4413      	add	r3, r2
 80033e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ea:	e005      	b.n	80033f8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	3301      	adds	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d9e5      	bls.n	80033c4 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <RCC_SetFlashLatency+0x108>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	4911      	ldr	r1, [pc, #68]	; (8003448 <RCC_SetFlashLatency+0x108>)
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003408:	f7fe fbf4 	bl	8001bf4 <HAL_GetTick>
 800340c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800340e:	e008      	b.n	8003422 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003410:	f7fe fbf0 	bl	8001bf4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e007      	b.n	8003432 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <RCC_SetFlashLatency+0x108>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800342c:	429a      	cmp	r2, r3
 800342e:	d1ef      	bne.n	8003410 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3738      	adds	r7, #56	; 0x38
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0800be84 	.word	0x0800be84
 8003440:	0800be8c 	.word	0x0800be8c
 8003444:	0800be94 	.word	0x0800be94
 8003448:	58004000 	.word	0x58004000

0800344c <LL_RCC_LSE_IsReady>:
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d101      	bne.n	8003464 <LL_RCC_LSE_IsReady+0x18>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <LL_RCC_LSE_IsReady+0x1a>
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <LL_RCC_SetUSARTClockSource>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	43db      	mvns	r3, r3
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <LL_RCC_SetI2SClockSource>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <LL_RCC_SetLPUARTClockSource>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <LL_RCC_SetI2CClockSource>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800350a:	43db      	mvns	r3, r3
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <LL_RCC_SetLPTIMClockSource>:
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003536:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <LL_RCC_SetRNGClockSource>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <LL_RCC_SetADCClockSource>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <LL_RCC_SetRTCClockSource>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <LL_RCC_GetRTCClockSource>:
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_ForceBackupDomainReset>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
	...

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003640:	2300      	movs	r3, #0
 8003642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003644:	2300      	movs	r3, #0
 8003646:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d058      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003654:	f7fe fe04 	bl	8002260 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003658:	f7fe facc 	bl	8001bf4 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fe fac8 	bl	8001bf4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d902      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	74fb      	strb	r3, [r7, #19]
        break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003674:	4b7b      	ldr	r3, [pc, #492]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003680:	d1ee      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d13c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003688:	f7ff ffa7 	bl	80035da <LL_RCC_GetRTCClockSource>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	429a      	cmp	r2, r3
 8003694:	d00f      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	f7ff ffa5 	bl	80035f2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	f7ff ffb3 	bl	8003612 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d014      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fa98 	bl	8001bf4 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80036c6:	e00b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fa94 	bl	8001bf4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
            break;
 80036de:	e004      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80036e0:	f7ff feb4 	bl	800344c <LL_RCC_LSE_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5b 	bl	80035b0 <LL_RCC_SetRTCClockSource>
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
 8003700:	e001      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fea9 	bl	800346e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fe9e 	bl	800346e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fec0 	bl	80034c8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fee6 	bl	800352a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fedb 	bl	800352a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fed0 	bl	800352a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fea9 	bl	80034f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe9e 	bl	80034f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fe93 	bl	80034f2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d011      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fe5e 	bl	800349e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ea:	d107      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d010      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fea5 	bl	800355c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003828:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fea3 	bl	8003586 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003848:	d107      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800385a:	7cbb      	ldrb	r3, [r7, #18]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	58000400 	.word	0x58000400

08003868 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	58000400 	.word	0x58000400

08003890 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a04      	ldr	r2, [pc, #16]	; (80038ac <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800389c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	58000400 	.word	0x58000400

080038b0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80038bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	58000400 	.word	0x58000400

080038d0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80038d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038da:	619a      	str	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	58000400 	.word	0x58000400

080038e8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d101      	bne.n	80038fc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	58000400 	.word	0x58000400

0800390c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d101      	bne.n	8003920 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	58000400 	.word	0x58000400

08003930 <LL_RCC_RF_DisableReset>:
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <LL_RCC_IsRFUnderReset>:
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003964:	d101      	bne.n	800396a <LL_RCC_IsRFUnderReset+0x1a>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_RCC_IsRFUnderReset+0x1c>
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <LL_EXTI_EnableIT_32_63+0x24>)
 800397e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003982:	4905      	ldr	r1, [pc, #20]	; (8003998 <LL_EXTI_EnableIT_32_63+0x24>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	58000800 	.word	0x58000800

0800399c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
    return status;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	e04b      	b.n	8003a4a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	799b      	ldrb	r3, [r3, #6]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fdbe 	bl	8001548 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80039d2:	f7ff ffad 	bl	8003930 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80039d6:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <HAL_SUBGHZ_Init+0xb8>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	0cdb      	lsrs	r3, r3, #19
 80039e4:	2264      	movs	r2, #100	; 0x64
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e007      	b.n	8003a0e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003a04:	f7ff ffa4 	bl	8003950 <LL_RCC_IsRFUnderReset>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ee      	bne.n	80039ec <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a0e:	f7ff ff3f 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003a12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a16:	f7ff ffad 	bl	8003974 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003a1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a1e:	f7ff ff23 	bl	8003868 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003a22:	f7ff ff55 	bl	80038d0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 faad 	bl	8003f90 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	719a      	strb	r2, [r3, #6]

  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000000 	.word	0x20000000

08003a58 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	799b      	ldrb	r3, [r3, #6]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d14a      	bne.n	8003b0c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	795b      	ldrb	r3, [r3, #5]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e045      	b.n	8003b0e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb4c 	bl	800412c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a94:	f7ff ff0c 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003a98:	210d      	movs	r1, #13
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa98 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003aa0:	897b      	ldrh	r3, [r7, #10]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa90 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa8a 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	82bb      	strh	r3, [r7, #20]
 8003ac0:	e00a      	b.n	8003ad8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ac2:	8abb      	ldrh	r3, [r7, #20]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fa7f 	bl	8003fd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ad2:	8abb      	ldrh	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	82bb      	strh	r3, [r7, #20]
 8003ad8:	8aba      	ldrh	r2, [r7, #20]
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3f0      	bcc.n	8003ac2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ae0:	f7ff fed6 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fb45 	bl	8004174 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
 8003af6:	e001      	b.n	8003afc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	715a      	strb	r2, [r3, #5]

    return status;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	e000      	b.n	8003b0e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	461a      	mov	r2, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	4613      	mov	r3, r2
 8003b28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	799b      	ldrb	r3, [r3, #6]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d14a      	bne.n	8003bce <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	795b      	ldrb	r3, [r3, #5]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e045      	b.n	8003bd0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 faee 	bl	800412c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b50:	f7ff feae 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003b54:	211d      	movs	r1, #29
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fa3a 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa32 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b6c:	897b      	ldrh	r3, [r7, #10]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa2c 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa28 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	82fb      	strh	r3, [r7, #22]
 8003b84:	e009      	b.n	8003b9a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa77 	bl	800407c <SUBGHZSPI_Receive>
      pData++;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b94:	8afb      	ldrh	r3, [r7, #22]
 8003b96:	3301      	adds	r3, #1
 8003b98:	82fb      	strh	r3, [r7, #22]
 8003b9a:	8afa      	ldrh	r2, [r7, #22]
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3f1      	bcc.n	8003b86 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ba2:	f7ff fe75 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fae4 	bl	8004174 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e001      	b.n	8003bbe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	715a      	strb	r2, [r3, #5]

    return status;
 8003bca:	7ffb      	ldrb	r3, [r7, #31]
 8003bcc:	e000      	b.n	8003bd0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	461a      	mov	r2, r3
 8003be4:	460b      	mov	r3, r1
 8003be6:	72fb      	strb	r3, [r7, #11]
 8003be8:	4613      	mov	r3, r2
 8003bea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	799b      	ldrb	r3, [r3, #6]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d14a      	bne.n	8003c8c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	795b      	ldrb	r3, [r3, #5]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e045      	b.n	8003c8e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fa8f 	bl	800412c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	2b84      	cmp	r3, #132	; 0x84
 8003c12:	d002      	beq.n	8003c1a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	2b94      	cmp	r3, #148	; 0x94
 8003c18:	d103      	bne.n	8003c22 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	711a      	strb	r2, [r3, #4]
 8003c20:	e002      	b.n	8003c28 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c28:	f7ff fe42 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f9cd 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	82bb      	strh	r3, [r7, #20]
 8003c3a:	e00a      	b.n	8003c52 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c3c:	8abb      	ldrh	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f9c2 	bl	8003fd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c4c:	8abb      	ldrh	r3, [r7, #20]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	82bb      	strh	r3, [r7, #20]
 8003c52:	8aba      	ldrh	r2, [r7, #20]
 8003c54:	893b      	ldrh	r3, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3f0      	bcc.n	8003c3c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c5a:	f7ff fe19 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	2b84      	cmp	r3, #132	; 0x84
 8003c62:	d002      	beq.n	8003c6a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa85 	bl	8004174 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
 8003c76:	e001      	b.n	8003c7c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	715a      	strb	r2, [r3, #5]

    return status;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	e000      	b.n	8003c8e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b088      	sub	sp, #32
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	72fb      	strb	r3, [r7, #11]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	799b      	ldrb	r3, [r3, #6]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d13d      	bne.n	8003d34 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	795b      	ldrb	r3, [r3, #5]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e038      	b.n	8003d36 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa2e 	bl	800412c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cd0:	f7ff fdee 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f979 	bl	8003fd0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f975 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	82fb      	strh	r3, [r7, #22]
 8003cea:	e009      	b.n	8003d00 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f9c4 	bl	800407c <SUBGHZSPI_Receive>
      pData++;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	82fb      	strh	r3, [r7, #22]
 8003d00:	8afa      	ldrh	r2, [r7, #22]
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3f1      	bcc.n	8003cec <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d08:	f7ff fdc2 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa31 	bl	8004174 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e001      	b.n	8003d24 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	715a      	strb	r2, [r3, #5]

    return status;
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	e000      	b.n	8003d36 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	72fb      	strb	r3, [r7, #11]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	799b      	ldrb	r3, [r3, #6]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d13e      	bne.n	8003dda <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	795b      	ldrb	r3, [r3, #5]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e039      	b.n	8003ddc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f9dc 	bl	800412c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d74:	f7ff fd9c 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003d78:	210e      	movs	r1, #14
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f928 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	4619      	mov	r1, r3
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f923 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	82bb      	strh	r3, [r7, #20]
 8003d8e:	e00a      	b.n	8003da6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d90:	8abb      	ldrh	r3, [r7, #20]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f918 	bl	8003fd0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003da0:	8abb      	ldrh	r3, [r7, #20]
 8003da2:	3301      	adds	r3, #1
 8003da4:	82bb      	strh	r3, [r7, #20]
 8003da6:	8aba      	ldrh	r2, [r7, #20]
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3f0      	bcc.n	8003d90 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dae:	f7ff fd6f 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9de 	bl	8004174 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
 8003dc4:	e001      	b.n	8003dca <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	715a      	strb	r2, [r3, #5]

    return status;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	e000      	b.n	8003ddc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	460b      	mov	r3, r1
 8003df2:	72fb      	strb	r3, [r7, #11]
 8003df4:	4613      	mov	r3, r2
 8003df6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	799b      	ldrb	r3, [r3, #6]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d141      	bne.n	8003e8a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	795b      	ldrb	r3, [r3, #5]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e03c      	b.n	8003e8c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f987 	bl	800412c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e1e:	f7ff fd47 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003e22:	211e      	movs	r1, #30
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f8d3 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f8ce 	bl	8003fd0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e34:	2100      	movs	r1, #0
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f8ca 	bl	8003fd0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	82fb      	strh	r3, [r7, #22]
 8003e40:	e009      	b.n	8003e56 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f919 	bl	800407c <SUBGHZSPI_Receive>
      pData++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e50:	8afb      	ldrh	r3, [r7, #22]
 8003e52:	3301      	adds	r3, #1
 8003e54:	82fb      	strh	r3, [r7, #22]
 8003e56:	8afa      	ldrh	r2, [r7, #22]
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3f1      	bcc.n	8003e42 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e5e:	f7ff fd17 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f986 	bl	8004174 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e001      	b.n	8003e7a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	715a      	strb	r2, [r3, #5]

    return status;
 8003e86:	7ffb      	ldrb	r3, [r7, #31]
 8003e88:	e000      	b.n	8003e8c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8003ea0:	f107 020c 	add.w	r2, r7, #12
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	2112      	movs	r1, #18
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fef4 	bl	8003c96 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8003eae:	7b3b      	ldrb	r3, [r7, #12]
 8003eb0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	7b7b      	ldrb	r3, [r7, #13]
 8003eba:	b21b      	sxth	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b21b      	sxth	r3, r3
 8003ec0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003ec2:	89fb      	ldrh	r3, [r7, #14]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f003 fdd3 	bl	8007a78 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f003 fdd8 	bl	8007a94 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003ee4:	89fb      	ldrh	r3, [r7, #14]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f003 fe27 	bl	8007b44 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f003 fe2c 	bl	8007b60 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003f08:	89fb      	ldrh	r3, [r7, #14]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f003 fe31 	bl	8007b7c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f003 fdfe 	bl	8007b28 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003f2c:	89fb      	ldrh	r3, [r7, #14]
 8003f2e:	099b      	lsrs	r3, r3, #6
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f003 fdb9 	bl	8007ab0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003f3e:	89fb      	ldrh	r3, [r7, #14]
 8003f40:	09db      	lsrs	r3, r3, #7
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003f4a:	89fb      	ldrh	r3, [r7, #14]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003f56:	2101      	movs	r1, #1
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f003 fdb7 	bl	8007acc <HAL_SUBGHZ_CADStatusCallback>
 8003f5e:	e003      	b.n	8003f68 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003f60:	2100      	movs	r1, #0
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f003 fdb2 	bl	8007acc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	0a5b      	lsrs	r3, r3, #9
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f003 fdc7 	bl	8007b08 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003f7a:	f107 020c 	add.w	r2, r7, #12
 8003f7e:	2302      	movs	r3, #2
 8003f80:	2102      	movs	r1, #2
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fe28 	bl	8003bd8 <HAL_SUBGHZ_ExecSetCmd>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003fac:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003fb0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <SUBGHZSPI_Init+0x3c>)
 8003fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	58010000 	.word	0x58010000

08003fd0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <SUBGHZSPI_Transmit+0xa0>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	0cdb      	lsrs	r3, r3, #19
 8003fee:	2264      	movs	r2, #100	; 0x64
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	609a      	str	r2, [r3, #8]
      break;
 8004006:	e008      	b.n	800401a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b01      	subs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <SUBGHZSPI_Transmit+0xa4>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d1ed      	bne.n	8003ff6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <SUBGHZSPI_Transmit+0xa8>)
 800401c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <SUBGHZSPI_Transmit+0xa0>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	0cdb      	lsrs	r3, r3, #19
 8004032:	2264      	movs	r2, #100	; 0x64
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	609a      	str	r2, [r3, #8]
      break;
 800404a:	e008      	b.n	800405e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <SUBGHZSPI_Transmit+0xa4>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d1ed      	bne.n	800403a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <SUBGHZSPI_Transmit+0xa4>)
 8004060:	68db      	ldr	r3, [r3, #12]

  return status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000000 	.word	0x20000000
 8004074:	58010000 	.word	0x58010000
 8004078:	5801000c 	.word	0x5801000c

0800407c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800408a:	4b25      	ldr	r3, [pc, #148]	; (8004120 <SUBGHZSPI_Receive+0xa4>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	0cdb      	lsrs	r3, r3, #19
 8004098:	2264      	movs	r2, #100	; 0x64
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	609a      	str	r2, [r3, #8]
      break;
 80040b0:	e008      	b.n	80040c4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <SUBGHZSPI_Receive+0xa8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d1ed      	bne.n	80040a0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <SUBGHZSPI_Receive+0xac>)
 80040c6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <SUBGHZSPI_Receive+0xa4>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	0cdb      	lsrs	r3, r3, #19
 80040dc:	2264      	movs	r2, #100	; 0x64
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	609a      	str	r2, [r3, #8]
      break;
 80040f4:	e008      	b.n	8004108 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <SUBGHZSPI_Receive+0xa8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d1ed      	bne.n	80040e4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <SUBGHZSPI_Receive+0xa8>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	701a      	strb	r2, [r3, #0]

  return status;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000
 8004124:	58010000 	.word	0x58010000
 8004128:	5801000c 	.word	0x5801000c

0800412c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	791b      	ldrb	r3, [r3, #4]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d111      	bne.n	8004160 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <SUBGHZ_CheckDeviceReady+0x44>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800414c:	f7ff fbb0 	bl	80038b0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f9      	bne.n	8004150 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800415c:	f7ff fb98 	bl	8003890 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f807 	bl	8004174 <SUBGHZ_WaitOnBusy>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000000 	.word	0x20000000

08004174 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <SUBGHZ_WaitOnBusy+0x58>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	0d1b      	lsrs	r3, r3, #20
 800418e:	2264      	movs	r2, #100	; 0x64
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004196:	f7ff fbb9 	bl	800390c <LL_PWR_IsActiveFlag_RFBUSYMS>
 800419a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	609a      	str	r2, [r3, #8]
      break;
 80041ac:	e009      	b.n	80041c2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80041b4:	f7ff fb98 	bl	80038e8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d0e9      	beq.n	8004196 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000000 	.word	0x20000000

080041d0 <LL_RCC_GetUSARTClockSource>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	401a      	ands	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	4313      	orrs	r3, r2
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_GetLPUARTClockSource>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4013      	ands	r3, r2
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e042      	b.n	80042aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd f8c4 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f995 	bl	8004584 <UART_SetConfig>
 800425a:	4603      	mov	r3, r0
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e022      	b.n	80042aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fbd9 	bl	8004a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004280:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004290:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fc5f 	bl	8004b66 <UART_CheckIdleState>
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b08a      	sub	sp, #40	; 0x28
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	f040 8083 	bne.w	80043d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_Transmit+0x28>
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07b      	b.n	80043d6 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Transmit+0x3a>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e074      	b.n	80043d6 <HAL_UART_Transmit+0x124>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	; 0x21
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004304:	f7fd fc76 	bl	8001bf4 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d108      	bne.n	8004336 <HAL_UART_Transmit+0x84>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e003      	b.n	800433e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004346:	e02c      	b.n	80043a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fc52 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e039      	b.n	80043d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3302      	adds	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e007      	b.n	8004390 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1cc      	bne.n	8004348 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	; 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fc1f 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b08a      	sub	sp, #40	; 0x28
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	f040 80c0 	bne.w	800457a <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_UART_Receive+0x28>
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0b8      	b.n	800457c <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Receive+0x3a>
 8004414:	2302      	movs	r3, #2
 8004416:	e0b1      	b.n	800457c <HAL_UART_Receive+0x19e>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2222      	movs	r2, #34	; 0x22
 800442c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004436:	f7fd fbdd 	bl	8001bf4 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d10e      	bne.n	8004474 <HAL_UART_Receive+0x96>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_UART_Receive+0x8c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004468:	e02d      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004472:	e028      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_UART_Receive+0xba>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <HAL_UART_Receive+0xb0>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	22ff      	movs	r2, #255	; 0xff
 8004488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800448c:	e01b      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	227f      	movs	r2, #127	; 0x7f
 8004492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004496:	e016      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a0:	d10d      	bne.n	80044be <HAL_UART_Receive+0xe0>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Receive+0xd6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	227f      	movs	r2, #127	; 0x7f
 80044ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044b2:	e008      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	223f      	movs	r2, #63	; 0x3f
 80044b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044bc:	e003      	b.n	80044c6 <HAL_UART_Receive+0xe8>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d108      	bne.n	80044ea <HAL_UART_Receive+0x10c>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e003      	b.n	80044f2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044fa:	e032      	b.n	8004562 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	2120      	movs	r1, #32
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fb78 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e032      	b.n	800457c <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10c      	bne.n	8004536 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	b29a      	uxth	r2, r3
 8004524:	8a7b      	ldrh	r3, [r7, #18]
 8004526:	4013      	ands	r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	3302      	adds	r3, #2
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e00c      	b.n	8004550 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	b2da      	uxtb	r2, r3
 800453e:	8a7b      	ldrh	r3, [r7, #18]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	4013      	ands	r3, r2
 8004544:	b2da      	uxtb	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1c6      	bne.n	80044fc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	b5b0      	push	{r4, r5, r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4bab      	ldr	r3, [pc, #684]	; (800485c <UART_SetConfig+0x2d8>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	69f9      	ldr	r1, [r7, #28]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4aa0      	ldr	r2, [pc, #640]	; (8004860 <UART_SetConfig+0x2dc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	430b      	orrs	r3, r1
 8004602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f023 010f 	bic.w	r1, r3, #15
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a91      	ldr	r2, [pc, #580]	; (8004864 <UART_SetConfig+0x2e0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d122      	bne.n	800466a <UART_SetConfig+0xe6>
 8004624:	2003      	movs	r0, #3
 8004626:	f7ff fdd3 	bl	80041d0 <LL_RCC_GetUSARTClockSource>
 800462a:	4603      	mov	r3, r0
 800462c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004630:	2b03      	cmp	r3, #3
 8004632:	d817      	bhi.n	8004664 <UART_SetConfig+0xe0>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0xb8>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004659 	.word	0x08004659
 8004644:	08004653 	.word	0x08004653
 8004648:	0800465f 	.word	0x0800465f
 800464c:	2301      	movs	r3, #1
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	e072      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004652:	2302      	movs	r3, #2
 8004654:	76fb      	strb	r3, [r7, #27]
 8004656:	e06f      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004658:	2304      	movs	r3, #4
 800465a:	76fb      	strb	r3, [r7, #27]
 800465c:	e06c      	b.n	8004738 <UART_SetConfig+0x1b4>
 800465e:	2308      	movs	r3, #8
 8004660:	76fb      	strb	r3, [r7, #27]
 8004662:	e069      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004664:	2310      	movs	r3, #16
 8004666:	76fb      	strb	r3, [r7, #27]
 8004668:	e066      	b.n	8004738 <UART_SetConfig+0x1b4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7e      	ldr	r2, [pc, #504]	; (8004868 <UART_SetConfig+0x2e4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d134      	bne.n	80046de <UART_SetConfig+0x15a>
 8004674:	200c      	movs	r0, #12
 8004676:	f7ff fdab 	bl	80041d0 <LL_RCC_GetUSARTClockSource>
 800467a:	4603      	mov	r3, r0
 800467c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d829      	bhi.n	80046d8 <UART_SetConfig+0x154>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x108>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046d9 	.word	0x080046d9
 8004694:	080046d9 	.word	0x080046d9
 8004698:	080046d9 	.word	0x080046d9
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046d9 	.word	0x080046d9
 80046a4:	080046d9 	.word	0x080046d9
 80046a8:	080046d9 	.word	0x080046d9
 80046ac:	080046c7 	.word	0x080046c7
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046d9 	.word	0x080046d9
 80046bc:	080046d3 	.word	0x080046d3
 80046c0:	2300      	movs	r3, #0
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e038      	b.n	8004738 <UART_SetConfig+0x1b4>
 80046c6:	2302      	movs	r3, #2
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e035      	b.n	8004738 <UART_SetConfig+0x1b4>
 80046cc:	2304      	movs	r3, #4
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e032      	b.n	8004738 <UART_SetConfig+0x1b4>
 80046d2:	2308      	movs	r3, #8
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e02f      	b.n	8004738 <UART_SetConfig+0x1b4>
 80046d8:	2310      	movs	r3, #16
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e02c      	b.n	8004738 <UART_SetConfig+0x1b4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5f      	ldr	r2, [pc, #380]	; (8004860 <UART_SetConfig+0x2dc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d125      	bne.n	8004734 <UART_SetConfig+0x1b0>
 80046e8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80046ec:	f7ff fd82 	bl	80041f4 <LL_RCC_GetLPUARTClockSource>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f6:	d017      	beq.n	8004728 <UART_SetConfig+0x1a4>
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fc:	d817      	bhi.n	800472e <UART_SetConfig+0x1aa>
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d00b      	beq.n	800471c <UART_SetConfig+0x198>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004708:	d811      	bhi.n	800472e <UART_SetConfig+0x1aa>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <UART_SetConfig+0x192>
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d006      	beq.n	8004722 <UART_SetConfig+0x19e>
 8004714:	e00b      	b.n	800472e <UART_SetConfig+0x1aa>
 8004716:	2300      	movs	r3, #0
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e00d      	b.n	8004738 <UART_SetConfig+0x1b4>
 800471c:	2302      	movs	r3, #2
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e00a      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004722:	2304      	movs	r3, #4
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e007      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004728:	2308      	movs	r3, #8
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e004      	b.n	8004738 <UART_SetConfig+0x1b4>
 800472e:	2310      	movs	r3, #16
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e001      	b.n	8004738 <UART_SetConfig+0x1b4>
 8004734:	2310      	movs	r3, #16
 8004736:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a48      	ldr	r2, [pc, #288]	; (8004860 <UART_SetConfig+0x2dc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f040 8098 	bne.w	8004874 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004744:	7efb      	ldrb	r3, [r7, #27]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d823      	bhi.n	8004792 <UART_SetConfig+0x20e>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x1cc>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	08004793 	.word	0x08004793
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004793 	.word	0x08004793
 8004760:	08004783 	.word	0x08004783
 8004764:	08004793 	.word	0x08004793
 8004768:	08004793 	.word	0x08004793
 800476c:	08004793 	.word	0x08004793
 8004770:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe fd90 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8004778:	6178      	str	r0, [r7, #20]
        break;
 800477a:	e00f      	b.n	800479c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <UART_SetConfig+0x2e8>)
 800477e:	617b      	str	r3, [r7, #20]
        break;
 8004780:	e00c      	b.n	800479c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fcd5 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8004786:	6178      	str	r0, [r7, #20]
        break;
 8004788:	e008      	b.n	800479c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	617b      	str	r3, [r7, #20]
        break;
 8004790:	e004      	b.n	800479c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	76bb      	strb	r3, [r7, #26]
        break;
 800479a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8128 	beq.w	80049f4 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	4a31      	ldr	r2, [pc, #196]	; (8004870 <UART_SetConfig+0x2ec>)
 80047aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ae:	461a      	mov	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d305      	bcc.n	80047d4 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d902      	bls.n	80047da <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	76bb      	strb	r3, [r7, #26]
 80047d8:	e10c      	b.n	80049f4 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4618      	mov	r0, r3
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	4a22      	ldr	r2, [pc, #136]	; (8004870 <UART_SetConfig+0x2ec>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f7fc f9c1 	bl	8000b78 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	020b      	lsls	r3, r1, #8
 8004808:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800480c:	0202      	lsls	r2, r0, #8
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6849      	ldr	r1, [r1, #4]
 8004812:	0849      	lsrs	r1, r1, #1
 8004814:	4608      	mov	r0, r1
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	1814      	adds	r4, r2, r0
 800481c:	eb43 0501 	adc.w	r5, r3, r1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	461a      	mov	r2, r3
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	f7fc f9a3 	bl	8000b78 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4613      	mov	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d308      	bcc.n	8004854 <UART_SetConfig+0x2d0>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d204      	bcs.n	8004854 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e0cf      	b.n	80049f4 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	76bb      	strb	r3, [r7, #26]
 8004858:	e0cc      	b.n	80049f4 <UART_SetConfig+0x470>
 800485a:	bf00      	nop
 800485c:	cfff69f3 	.word	0xcfff69f3
 8004860:	40008000 	.word	0x40008000
 8004864:	40013800 	.word	0x40013800
 8004868:	40004400 	.word	0x40004400
 800486c:	00f42400 	.word	0x00f42400
 8004870:	0800c204 	.word	0x0800c204
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487c:	d165      	bne.n	800494a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d828      	bhi.n	80048d6 <UART_SetConfig+0x352>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x308>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe fcf2 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6178      	str	r0, [r7, #20]
        break;
 80048b6:	e013      	b.n	80048e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fe fd00 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 80048bc:	6178      	str	r0, [r7, #20]
        break;
 80048be:	e00f      	b.n	80048e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <UART_SetConfig+0x498>)
 80048c2:	617b      	str	r3, [r7, #20]
        break;
 80048c4:	e00c      	b.n	80048e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fe fc33 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80048ca:	6178      	str	r0, [r7, #20]
        break;
 80048cc:	e008      	b.n	80048e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d2:	617b      	str	r3, [r7, #20]
        break;
 80048d4:	e004      	b.n	80048e0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	76bb      	strb	r3, [r7, #26]
        break;
 80048de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8086 	beq.w	80049f4 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	4a4c      	ldr	r2, [pc, #304]	; (8004a20 <UART_SetConfig+0x49c>)
 80048ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f2:	461a      	mov	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048fa:	005a      	lsls	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	441a      	add	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	d916      	bls.n	8004944 <UART_SetConfig+0x3c0>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491c:	d212      	bcs.n	8004944 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f023 030f 	bic.w	r3, r3, #15
 8004926:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	b29a      	uxth	r2, r3
 8004934:	89fb      	ldrh	r3, [r7, #14]
 8004936:	4313      	orrs	r3, r2
 8004938:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	89fa      	ldrh	r2, [r7, #14]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	e057      	b.n	80049f4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	76bb      	strb	r3, [r7, #26]
 8004948:	e054      	b.n	80049f4 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494a:	7efb      	ldrb	r3, [r7, #27]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d828      	bhi.n	80049a2 <UART_SetConfig+0x41e>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x3d4>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004985 	.word	0x08004985
 8004960:	0800498d 	.word	0x0800498d
 8004964:	080049a3 	.word	0x080049a3
 8004968:	08004993 	.word	0x08004993
 800496c:	080049a3 	.word	0x080049a3
 8004970:	080049a3 	.word	0x080049a3
 8004974:	080049a3 	.word	0x080049a3
 8004978:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7fe fc8c 	bl	8003298 <HAL_RCC_GetPCLK1Freq>
 8004980:	6178      	str	r0, [r7, #20]
        break;
 8004982:	e013      	b.n	80049ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004984:	f7fe fc9a 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8004988:	6178      	str	r0, [r7, #20]
        break;
 800498a:	e00f      	b.n	80049ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <UART_SetConfig+0x498>)
 800498e:	617b      	str	r3, [r7, #20]
        break;
 8004990:	e00c      	b.n	80049ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe fbcd 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8004996:	6178      	str	r0, [r7, #20]
        break;
 8004998:	e008      	b.n	80049ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e004      	b.n	80049ac <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	76bb      	strb	r3, [r7, #26]
        break;
 80049aa:	bf00      	nop
    }

    if (pclk != 0U)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <UART_SetConfig+0x49c>)
 80049b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049bc:	461a      	mov	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d908      	bls.n	80049f0 <UART_SetConfig+0x46c>
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d204      	bcs.n	80049f0 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	e001      	b.n	80049f4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a10:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bdb0      	pop	{r4, r5, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	0800c204 	.word	0x0800c204

08004a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d10a      	bne.n	8004b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b76:	f7fd f83d 	bl	8001bf4 <HAL_GetTick>
 8004b7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d10e      	bne.n	8004ba8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f82f 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e025      	b.n	8004bf4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d10e      	bne.n	8004bd4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f819 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e00f      	b.n	8004bf4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b09c      	sub	sp, #112	; 0x70
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0c:	e0a9      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	f000 80a5 	beq.w	8004d62 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fc ffec 	bl	8001bf4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x32>
 8004c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d140      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c42:	667b      	str	r3, [r7, #100]	; 0x64
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c4e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	663b      	str	r3, [r7, #96]	; 0x60
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c80:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e5      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e069      	b.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d051      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ccc:	d149      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e6      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d2a:	623a      	str	r2, [r7, #32]
 8004d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e010      	b.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f43f af46 	beq.w	8004c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3770      	adds	r7, #112	; 0x70
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e027      	b.n	8004df2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e02d      	b.n	8004e70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f84f 	bl	8004ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e02d      	b.n	8004eec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f811 	bl	8004ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f14:	e031      	b.n	8004f7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f16:	2308      	movs	r3, #8
 8004f18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	0e5b      	lsrs	r3, r3, #25
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	0f5b      	lsrs	r3, r3, #29
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	7b3a      	ldrb	r2, [r7, #12]
 8004f42:	4910      	ldr	r1, [pc, #64]	; (8004f84 <UARTEx_SetNbDataToProcess+0x90>)
 8004f44:	5c8a      	ldrb	r2, [r1, r2]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f4a:	7b3a      	ldrb	r2, [r7, #12]
 8004f4c:	490e      	ldr	r1, [pc, #56]	; (8004f88 <UARTEx_SetNbDataToProcess+0x94>)
 8004f4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	7b7a      	ldrb	r2, [r7, #13]
 8004f60:	4908      	ldr	r1, [pc, #32]	; (8004f84 <UARTEx_SetNbDataToProcess+0x90>)
 8004f62:	5c8a      	ldrb	r2, [r1, r2]
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f68:	7b7a      	ldrb	r2, [r7, #13]
 8004f6a:	4907      	ldr	r1, [pc, #28]	; (8004f88 <UARTEx_SetNbDataToProcess+0x94>)
 8004f6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	0800c21c 	.word	0x0800c21c
 8004f88:	0800c224 	.word	0x0800c224

08004f8c <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <RadioInit+0x60>)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8004f9a:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <RadioInit+0x64>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <RadioInit+0x64>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <RadioInit+0x64>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8004fac:	4811      	ldr	r0, [pc, #68]	; (8004ff4 <RadioInit+0x68>)
 8004fae:	f001 fdc1 	bl	8006b34 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f000 ffb0 	bl	8005f18 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8004fb8:	f002 f852 	bl	8007060 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f002 fba8 	bl	8007714 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f002 f9d3 	bl	8007374 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004fda:	f002 f907 	bl	80071ec <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8004fde:	f000 fe4f 	bl	8005c80 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000043c 	.word	0x2000043c
 8004ff0:	20000590 	.word	0x20000590
 8004ff4:	08005f85 	.word	0x08005f85

08004ff8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8004ffc:	f001 fddc 	bl	8006bb8 <SUBGRF_GetOperatingMode>
 8005000:	4603      	mov	r3, r0
 8005002:	2b07      	cmp	r3, #7
 8005004:	d00a      	beq.n	800501c <RadioGetStatus+0x24>
 8005006:	2b07      	cmp	r3, #7
 8005008:	dc0a      	bgt.n	8005020 <RadioGetStatus+0x28>
 800500a:	2b04      	cmp	r3, #4
 800500c:	d002      	beq.n	8005014 <RadioGetStatus+0x1c>
 800500e:	2b05      	cmp	r3, #5
 8005010:	d002      	beq.n	8005018 <RadioGetStatus+0x20>
 8005012:	e005      	b.n	8005020 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005014:	2302      	movs	r3, #2
 8005016:	e004      	b.n	8005022 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005018:	2301      	movs	r3, #1
 800501a:	e002      	b.n	8005022 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800501c:	2303      	movs	r3, #3
 800501e:	e000      	b.n	8005022 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005020:	2300      	movs	r3, #0
    }
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005032:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <RadioSetModem+0xa0>)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	4618      	mov	r0, r3
 800503c:	f002 fedf 	bl	8007dfe <RFW_SetRadioModem>
    switch( modem )
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	3b01      	subs	r3, #1
 8005044:	2b03      	cmp	r3, #3
 8005046:	d80b      	bhi.n	8005060 <RadioSetModem+0x38>
 8005048:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <RadioSetModem+0x28>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	0800506f 	.word	0x0800506f
 8005054:	08005095 	.word	0x08005095
 8005058:	080050a3 	.word	0x080050a3
 800505c:	080050b1 	.word	0x080050b1
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005060:	2000      	movs	r0, #0
 8005062:	f002 f961 	bl	8007328 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <RadioSetModem+0xa0>)
 8005068:	2200      	movs	r2, #0
 800506a:	735a      	strb	r2, [r3, #13]
        break;
 800506c:	e028      	b.n	80050c0 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800506e:	2001      	movs	r0, #1
 8005070:	f002 f95a 	bl	8007328 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005074:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <RadioSetModem+0xa0>)
 8005076:	7b5a      	ldrb	r2, [r3, #13]
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <RadioSetModem+0xa0>)
 800507a:	7b1b      	ldrb	r3, [r3, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	d01e      	beq.n	80050be <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <RadioSetModem+0xa0>)
 8005082:	7b1a      	ldrb	r2, [r3, #12]
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <RadioSetModem+0xa0>)
 8005086:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <RadioSetModem+0xa0>)
 800508a:	7b5b      	ldrb	r3, [r3, #13]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 ff43 	bl	8005f18 <RadioSetPublicNetwork>
        }
        break;
 8005092:	e014      	b.n	80050be <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005094:	2002      	movs	r0, #2
 8005096:	f002 f947 	bl	8007328 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <RadioSetModem+0xa0>)
 800509c:	2200      	movs	r2, #0
 800509e:	735a      	strb	r2, [r3, #13]
        break;
 80050a0:	e00e      	b.n	80050c0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80050a2:	2002      	movs	r0, #2
 80050a4:	f002 f940 	bl	8007328 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <RadioSetModem+0xa0>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	735a      	strb	r2, [r3, #13]
        break;
 80050ae:	e007      	b.n	80050c0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80050b0:	2000      	movs	r0, #0
 80050b2:	f002 f939 	bl	8007328 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <RadioSetModem+0xa0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	735a      	strb	r2, [r3, #13]
        break;
 80050bc:	e000      	b.n	80050c0 <RadioSetModem+0x98>
        break;
 80050be:	bf00      	nop
    }
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000590 	.word	0x20000590

080050cc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f002 f8e5 	bl	80072a4 <SUBGRF_SetRfFrequency>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b090      	sub	sp, #64	; 0x40
 80050e6:	af0a      	add	r7, sp, #40	; 0x28
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80050fe:	f000 fdd2 	bl	8005ca6 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005102:	2000      	movs	r0, #0
 8005104:	f7ff ff90 	bl	8005028 <RadioSetModem>

    RadioSetChannel( freq );
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ffdf 	bl	80050cc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800510e:	2301      	movs	r3, #1
 8005110:	9309      	str	r3, [sp, #36]	; 0x24
 8005112:	2300      	movs	r3, #0
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	2300      	movs	r3, #0
 8005118:	9307      	str	r3, [sp, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	9306      	str	r3, [sp, #24]
 800511e:	2300      	movs	r3, #0
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	2300      	movs	r3, #0
 8005124:	9304      	str	r3, [sp, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	2300      	movs	r3, #0
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	2303      	movs	r3, #3
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	f44f 7216 	mov.w	r2, #600	; 0x258
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	2000      	movs	r0, #0
 8005140:	f000 f826 	bl	8005190 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005144:	2000      	movs	r0, #0
 8005146:	f000 fdb5 	bl	8005cb4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800514a:	f000 ff13 	bl	8005f74 <RadioGetWakeupTime>
 800514e:	4603      	mov	r3, r0
 8005150:	4618      	mov	r0, r3
 8005152:	f7fc fd59 	bl	8001c08 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005156:	f000 fda6 	bl	8005ca6 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800516e:	2001      	movs	r0, #1
 8005170:	f7ff ff5a 	bl	8005028 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005174:	2300      	movs	r3, #0
 8005176:	2200      	movs	r2, #0
 8005178:	2100      	movs	r1, #0
 800517a:	2000      	movs	r0, #0
 800517c:	f002 f836 	bl	80071ec <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8005180:	f001 fdeb 	bl	8006d5a <SUBGRF_GetRandom>
 8005184:	6078      	str	r0, [r7, #4]

    return rnd;
 8005186:	687b      	ldr	r3, [r7, #4]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	461a      	mov	r2, r3
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	4613      	mov	r3, r2
 80051a2:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80051a4:	4abd      	ldr	r2, [pc, #756]	; (800549c <RadioSetRxConfig+0x30c>)
 80051a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80051aa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80051ac:	f002 fde5 	bl	8007d7a <RFW_DeInit>
    if( rxContinuous == true )
 80051b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80051bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80051c4:	4ab6      	ldr	r2, [pc, #728]	; (80054a0 <RadioSetRxConfig+0x310>)
 80051c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80051ca:	7013      	strb	r3, [r2, #0]
 80051cc:	e002      	b.n	80051d4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80051ce:	4bb4      	ldr	r3, [pc, #720]	; (80054a0 <RadioSetRxConfig+0x310>)
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d009      	beq.n	80051ee <RadioSetRxConfig+0x5e>
 80051da:	2b04      	cmp	r3, #4
 80051dc:	f300 81da 	bgt.w	8005594 <RadioSetRxConfig+0x404>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80bf 	beq.w	8005364 <RadioSetRxConfig+0x1d4>
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	f000 812c 	beq.w	8005444 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80051ec:	e1d2      	b.n	8005594 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80051ee:	2001      	movs	r0, #1
 80051f0:	f001 fef8 	bl	8006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80051f4:	4ba9      	ldr	r3, [pc, #676]	; (800549c <RadioSetRxConfig+0x30c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80051fc:	4aa7      	ldr	r2, [pc, #668]	; (800549c <RadioSetRxConfig+0x30c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005202:	4ba6      	ldr	r3, [pc, #664]	; (800549c <RadioSetRxConfig+0x30c>)
 8005204:	2209      	movs	r2, #9
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800520a:	4ba4      	ldr	r3, [pc, #656]	; (800549c <RadioSetRxConfig+0x30c>)
 800520c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f002 fce2 	bl	8007bdc <SUBGRF_GetFskBandwidthRegValue>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	4b9f      	ldr	r3, [pc, #636]	; (800549c <RadioSetRxConfig+0x30c>)
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005222:	4b9e      	ldr	r3, [pc, #632]	; (800549c <RadioSetRxConfig+0x30c>)
 8005224:	2200      	movs	r2, #0
 8005226:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005228:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	b29a      	uxth	r2, r3
 800522e:	4b9b      	ldr	r3, [pc, #620]	; (800549c <RadioSetRxConfig+0x30c>)
 8005230:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005232:	4b9a      	ldr	r3, [pc, #616]	; (800549c <RadioSetRxConfig+0x30c>)
 8005234:	2200      	movs	r2, #0
 8005236:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005238:	4b98      	ldr	r3, [pc, #608]	; (800549c <RadioSetRxConfig+0x30c>)
 800523a:	2210      	movs	r2, #16
 800523c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800523e:	4b97      	ldr	r3, [pc, #604]	; (800549c <RadioSetRxConfig+0x30c>)
 8005240:	2200      	movs	r2, #0
 8005242:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005244:	4b95      	ldr	r3, [pc, #596]	; (800549c <RadioSetRxConfig+0x30c>)
 8005246:	2200      	movs	r2, #0
 8005248:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800524a:	4b95      	ldr	r3, [pc, #596]	; (80054a0 <RadioSetRxConfig+0x310>)
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	4b93      	ldr	r3, [pc, #588]	; (800549c <RadioSetRxConfig+0x30c>)
 8005250:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005252:	4b92      	ldr	r3, [pc, #584]	; (800549c <RadioSetRxConfig+0x30c>)
 8005254:	2201      	movs	r2, #1
 8005256:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8005258:	4b90      	ldr	r3, [pc, #576]	; (800549c <RadioSetRxConfig+0x30c>)
 800525a:	2200      	movs	r2, #0
 800525c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800525e:	2004      	movs	r0, #4
 8005260:	f7ff fee2 	bl	8005028 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005264:	488f      	ldr	r0, [pc, #572]	; (80054a4 <RadioSetRxConfig+0x314>)
 8005266:	f002 f8eb 	bl	8007440 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800526a:	488f      	ldr	r0, [pc, #572]	; (80054a8 <RadioSetRxConfig+0x318>)
 800526c:	f002 f9b4 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005270:	4a8e      	ldr	r2, [pc, #568]	; (80054ac <RadioSetRxConfig+0x31c>)
 8005272:	f107 031c 	add.w	r3, r7, #28
 8005276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800527a:	e883 0003 	stmia.w	r3, {r0, r1}
 800527e:	f107 031c 	add.w	r3, r7, #28
 8005282:	4618      	mov	r0, r3
 8005284:	f001 fce7 	bl	8006c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005288:	f240 10ff 	movw	r0, #511	; 0x1ff
 800528c:	f001 fd32 	bl	8006cf4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005290:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005294:	f000 fdde 	bl	8005e54 <RadioRead>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800529e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80052aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ae:	4619      	mov	r1, r3
 80052b0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80052b4:	f000 fdbc 	bl	8005e30 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80052b8:	2104      	movs	r1, #4
 80052ba:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80052be:	f000 fdb7 	bl	8005e30 <RadioWrite>
            modReg= RadioRead(0x89b);
 80052c2:	f640 009b 	movw	r0, #2203	; 0x89b
 80052c6:	f000 fdc5 	bl	8005e54 <RadioRead>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d4:	f023 031c 	bic.w	r3, r3, #28
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80052dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052e0:	f043 0308 	orr.w	r3, r3, #8
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4619      	mov	r1, r3
 80052e8:	f640 009b 	movw	r0, #2203	; 0x89b
 80052ec:	f000 fda0 	bl	8005e30 <RadioWrite>
            modReg= RadioRead(0x6d1);
 80052f0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80052f4:	f000 fdae 	bl	8005e54 <RadioRead>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80052fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005302:	f023 0318 	bic.w	r3, r3, #24
 8005306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800530a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800530e:	f043 0318 	orr.w	r3, r3, #24
 8005312:	b2db      	uxtb	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800531a:	f000 fd89 	bl	8005e30 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800531e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005322:	f000 fd97 	bl	8005e54 <RadioRead>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8005338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800533c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005340:	b2db      	uxtb	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005348:	f000 fd72 	bl	8005e30 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800534c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800534e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	461a      	mov	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	4a4f      	ldr	r2, [pc, #316]	; (800549c <RadioSetRxConfig+0x30c>)
 8005360:	6093      	str	r3, [r2, #8]
            break;
 8005362:	e118      	b.n	8005596 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005364:	2000      	movs	r0, #0
 8005366:	f001 fe3d 	bl	8006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800536a:	4b4c      	ldr	r3, [pc, #304]	; (800549c <RadioSetRxConfig+0x30c>)
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005372:	4a4a      	ldr	r2, [pc, #296]	; (800549c <RadioSetRxConfig+0x30c>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005378:	4b48      	ldr	r3, [pc, #288]	; (800549c <RadioSetRxConfig+0x30c>)
 800537a:	220b      	movs	r2, #11
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005380:	68b8      	ldr	r0, [r7, #8]
 8005382:	f002 fc2b 	bl	8007bdc <SUBGRF_GetFskBandwidthRegValue>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <RadioSetRxConfig+0x30c>)
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005390:	4b42      	ldr	r3, [pc, #264]	; (800549c <RadioSetRxConfig+0x30c>)
 8005392:	2200      	movs	r2, #0
 8005394:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005396:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	b29a      	uxth	r2, r3
 800539c:	4b3f      	ldr	r3, [pc, #252]	; (800549c <RadioSetRxConfig+0x30c>)
 800539e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80053a0:	4b3e      	ldr	r3, [pc, #248]	; (800549c <RadioSetRxConfig+0x30c>)
 80053a2:	2204      	movs	r2, #4
 80053a4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80053a6:	4b3d      	ldr	r3, [pc, #244]	; (800549c <RadioSetRxConfig+0x30c>)
 80053a8:	2218      	movs	r2, #24
 80053aa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80053ac:	4b3b      	ldr	r3, [pc, #236]	; (800549c <RadioSetRxConfig+0x30c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80053b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80053b6:	f083 0301 	eor.w	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <RadioSetRxConfig+0x30c>)
 80053c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80053c2:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <RadioSetRxConfig+0x310>)
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <RadioSetRxConfig+0x30c>)
 80053c8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80053ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80053d2:	4b32      	ldr	r3, [pc, #200]	; (800549c <RadioSetRxConfig+0x30c>)
 80053d4:	22f2      	movs	r2, #242	; 0xf2
 80053d6:	75da      	strb	r2, [r3, #23]
 80053d8:	e002      	b.n	80053e0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80053da:	4b30      	ldr	r3, [pc, #192]	; (800549c <RadioSetRxConfig+0x30c>)
 80053dc:	2201      	movs	r2, #1
 80053de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80053e0:	4b2e      	ldr	r3, [pc, #184]	; (800549c <RadioSetRxConfig+0x30c>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80053e6:	f000 fc5e 	bl	8005ca6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80053ea:	4b2c      	ldr	r3, [pc, #176]	; (800549c <RadioSetRxConfig+0x30c>)
 80053ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fe14 	bl	8005028 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005400:	4828      	ldr	r0, [pc, #160]	; (80054a4 <RadioSetRxConfig+0x314>)
 8005402:	f002 f81d 	bl	8007440 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005406:	4828      	ldr	r0, [pc, #160]	; (80054a8 <RadioSetRxConfig+0x318>)
 8005408:	f002 f8e6 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800540c:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <RadioSetRxConfig+0x320>)
 800540e:	f107 0314 	add.w	r3, r7, #20
 8005412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005416:	e883 0003 	stmia.w	r3, {r0, r1}
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fc19 	bl	8006c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005424:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005428:	f001 fc64 	bl	8006cf4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800542c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800542e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	4a17      	ldr	r2, [pc, #92]	; (800549c <RadioSetRxConfig+0x30c>)
 8005440:	6093      	str	r3, [r2, #8]
            break;
 8005442:	e0a8      	b.n	8005596 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005444:	2000      	movs	r0, #0
 8005446:	f001 fdcd 	bl	8006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <RadioSetRxConfig+0x30c>)
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <RadioSetRxConfig+0x30c>)
 8005458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <RadioSetRxConfig+0x324>)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <RadioSetRxConfig+0x30c>)
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <RadioSetRxConfig+0x30c>)
 800546c:	7bbb      	ldrb	r3, [r7, #14]
 800546e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <RadioSetRxConfig+0x2f4>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b0b      	cmp	r3, #11
 800547c:	d008      	beq.n	8005490 <RadioSetRxConfig+0x300>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b0c      	cmp	r3, #12
 8005482:	d005      	beq.n	8005490 <RadioSetRxConfig+0x300>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d116      	bne.n	80054b8 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d113      	bne.n	80054b8 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <RadioSetRxConfig+0x30c>)
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005498:	e012      	b.n	80054c0 <RadioSetRxConfig+0x330>
 800549a:	bf00      	nop
 800549c:	20000590 	.word	0x20000590
 80054a0:	20000009 	.word	0x20000009
 80054a4:	200005c8 	.word	0x200005c8
 80054a8:	2000059e 	.word	0x2000059e
 80054ac:	0800bea0 	.word	0x0800bea0
 80054b0:	0800bea8 	.word	0x0800bea8
 80054b4:	0800c2b0 	.word	0x0800c2b0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80054b8:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80054c0:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80054c6:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054cc:	2b05      	cmp	r3, #5
 80054ce:	d004      	beq.n	80054da <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80054d0:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d10a      	bne.n	80054f0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80054da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054dc:	2b0b      	cmp	r3, #11
 80054de:	d803      	bhi.n	80054e8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80054e0:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054e2:	220c      	movs	r2, #12
 80054e4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80054e6:	e006      	b.n	80054f6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054ec:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80054ee:	e002      	b.n	80054f6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054f4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80054f6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <RadioSetRxConfig+0x410>)
 80054fc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <RadioSetRxConfig+0x414>)
 8005500:	781a      	ldrb	r2, [r3, #0]
 8005502:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <RadioSetRxConfig+0x410>)
 8005504:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005506:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800550a:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <RadioSetRxConfig+0x410>)
 800550c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005510:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005514:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <RadioSetRxConfig+0x410>)
 8005516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800551a:	f000 fbc4 	bl	8005ca6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800551e:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <RadioSetRxConfig+0x410>)
 8005520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fd7a 	bl	8005028 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005534:	481c      	ldr	r0, [pc, #112]	; (80055a8 <RadioSetRxConfig+0x418>)
 8005536:	f001 ff83 	bl	8007440 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800553a:	481c      	ldr	r0, [pc, #112]	; (80055ac <RadioSetRxConfig+0x41c>)
 800553c:	f002 f84c 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005540:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fd5c 	bl	8007002 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <RadioSetRxConfig+0x410>)
 800554c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10d      	bne.n	8005570 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005554:	f240 7036 	movw	r0, #1846	; 0x736
 8005558:	f002 f99a 	bl	8007890 <SUBGRF_ReadRegister>
 800555c:	4603      	mov	r3, r0
 800555e:	f023 0304 	bic.w	r3, r3, #4
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	f240 7036 	movw	r0, #1846	; 0x736
 800556a:	f002 f97d 	bl	8007868 <SUBGRF_WriteRegister>
 800556e:	e00c      	b.n	800558a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005570:	f240 7036 	movw	r0, #1846	; 0x736
 8005574:	f002 f98c 	bl	8007890 <SUBGRF_ReadRegister>
 8005578:	4603      	mov	r3, r0
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	b2db      	uxtb	r3, r3
 8005580:	4619      	mov	r1, r3
 8005582:	f240 7036 	movw	r0, #1846	; 0x736
 8005586:	f002 f96f 	bl	8007868 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <RadioSetRxConfig+0x410>)
 800558c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005590:	609a      	str	r2, [r3, #8]
            break;
 8005592:	e000      	b.n	8005596 <RadioSetRxConfig+0x406>
            break;
 8005594:	bf00      	nop
    }
}
 8005596:	bf00      	nop
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000590 	.word	0x20000590
 80055a4:	20000009 	.word	0x20000009
 80055a8:	200005c8 	.word	0x200005c8
 80055ac:	2000059e 	.word	0x2000059e

080055b0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60ba      	str	r2, [r7, #8]
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	460b      	mov	r3, r1
 80055c0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80055c2:	f002 fbda 	bl	8007d7a <RFW_DeInit>
    switch( modem )
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	f000 80d7 	beq.w	800577c <RadioSetTxConfig+0x1cc>
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	f300 80e6 	bgt.w	80057a0 <RadioSetTxConfig+0x1f0>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <RadioSetTxConfig+0x2e>
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d061      	beq.n	80056a0 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 80055dc:	e0e0      	b.n	80057a0 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80055de:	4b7c      	ldr	r3, [pc, #496]	; (80057d0 <RadioSetTxConfig+0x220>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80055e6:	4a7a      	ldr	r2, [pc, #488]	; (80057d0 <RadioSetTxConfig+0x220>)
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80055ec:	4b78      	ldr	r3, [pc, #480]	; (80057d0 <RadioSetTxConfig+0x220>)
 80055ee:	220b      	movs	r2, #11
 80055f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f002 faf1 	bl	8007bdc <SUBGRF_GetFskBandwidthRegValue>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b74      	ldr	r3, [pc, #464]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005604:	4a72      	ldr	r2, [pc, #456]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800560a:	4b71      	ldr	r3, [pc, #452]	; (80057d0 <RadioSetTxConfig+0x220>)
 800560c:	2200      	movs	r2, #0
 800560e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	b29a      	uxth	r2, r3
 8005616:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005618:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800561a:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <RadioSetTxConfig+0x220>)
 800561c:	2204      	movs	r2, #4
 800561e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005620:	4b6b      	ldr	r3, [pc, #428]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005622:	2218      	movs	r2, #24
 8005624:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005628:	2200      	movs	r2, #0
 800562a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800562c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005630:	f083 0301 	eor.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	4b65      	ldr	r3, [pc, #404]	; (80057d0 <RadioSetTxConfig+0x220>)
 800563a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800563c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005644:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005646:	22f2      	movs	r2, #242	; 0xf2
 8005648:	75da      	strb	r2, [r3, #23]
 800564a:	e002      	b.n	8005652 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800564c:	4b60      	ldr	r3, [pc, #384]	; (80057d0 <RadioSetTxConfig+0x220>)
 800564e:	2201      	movs	r2, #1
 8005650:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005652:	4b5f      	ldr	r3, [pc, #380]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005654:	2201      	movs	r2, #1
 8005656:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005658:	f000 fb25 	bl	8005ca6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800565c:	4b5c      	ldr	r3, [pc, #368]	; (80057d0 <RadioSetTxConfig+0x220>)
 800565e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf14      	ite	ne
 8005666:	2301      	movne	r3, #1
 8005668:	2300      	moveq	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fcdb 	bl	8005028 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005672:	4858      	ldr	r0, [pc, #352]	; (80057d4 <RadioSetTxConfig+0x224>)
 8005674:	f001 fee4 	bl	8007440 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005678:	4857      	ldr	r0, [pc, #348]	; (80057d8 <RadioSetTxConfig+0x228>)
 800567a:	f001 ffad 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800567e:	4a57      	ldr	r2, [pc, #348]	; (80057dc <RadioSetTxConfig+0x22c>)
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005688:	e883 0003 	stmia.w	r3, {r0, r1}
 800568c:	f107 0310 	add.w	r3, r7, #16
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fae0 	bl	8006c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800569a:	f001 fb2b 	bl	8006cf4 <SUBGRF_SetWhiteningSeed>
            break;
 800569e:	e080      	b.n	80057a2 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	4b48      	ldr	r3, [pc, #288]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80056b2:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <RadioSetTxConfig+0x230>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80056c0:	4a43      	ldr	r2, [pc, #268]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056c6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d105      	bne.n	80056dc <RadioSetTxConfig+0x12c>
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b0b      	cmp	r3, #11
 80056d4:	d008      	beq.n	80056e8 <RadioSetTxConfig+0x138>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d005      	beq.n	80056e8 <RadioSetTxConfig+0x138>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d107      	bne.n	80056f2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d104      	bne.n	80056f2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80056e8:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80056f0:	e003      	b.n	80056fa <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80056f2:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80056fa:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <RadioSetTxConfig+0x220>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005700:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005706:	2b05      	cmp	r3, #5
 8005708:	d004      	beq.n	8005714 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <RadioSetTxConfig+0x220>)
 800570c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005710:	2b06      	cmp	r3, #6
 8005712:	d10a      	bne.n	800572a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005716:	2b0b      	cmp	r3, #11
 8005718:	d803      	bhi.n	8005722 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800571a:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <RadioSetTxConfig+0x220>)
 800571c:	220c      	movs	r2, #12
 800571e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005720:	e006      	b.n	8005730 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005722:	4a2b      	ldr	r2, [pc, #172]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005724:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005726:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005728:	e002      	b.n	8005730 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800572a:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <RadioSetTxConfig+0x220>)
 800572c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800572e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005730:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005736:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005738:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <RadioSetTxConfig+0x234>)
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <RadioSetTxConfig+0x220>)
 800573e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005740:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005744:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005746:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800574a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800574e:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005754:	f000 faa7 	bl	8005ca6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <RadioSetTxConfig+0x220>)
 800575a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fc5d 	bl	8005028 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800576e:	4819      	ldr	r0, [pc, #100]	; (80057d4 <RadioSetTxConfig+0x224>)
 8005770:	f001 fe66 	bl	8007440 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005774:	4818      	ldr	r0, [pc, #96]	; (80057d8 <RadioSetTxConfig+0x228>)
 8005776:	f001 ff2f 	bl	80075d8 <SUBGRF_SetPacketParams>
            break;
 800577a:	e012      	b.n	80057a2 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800577c:	2003      	movs	r0, #3
 800577e:	f7ff fc53 	bl	8005028 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <RadioSetTxConfig+0x220>)
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <RadioSetTxConfig+0x220>)
 8005792:	2216      	movs	r2, #22
 8005794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005798:	480e      	ldr	r0, [pc, #56]	; (80057d4 <RadioSetTxConfig+0x224>)
 800579a:	f001 fe51 	bl	8007440 <SUBGRF_SetModulationParams>
            break;
 800579e:	e000      	b.n	80057a2 <RadioSetTxConfig+0x1f2>
            break;
 80057a0:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80057a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 f92a 	bl	8007a00 <SUBGRF_SetRfTxPower>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <RadioSetTxConfig+0x220>)
 80057b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <RadioSetTxConfig+0x220>)
 80057b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80057bc:	4618      	mov	r0, r3
 80057be:	f002 faf0 	bl	8007da2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80057c2:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <RadioSetTxConfig+0x220>)
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	6053      	str	r3, [r2, #4]
}
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000590 	.word	0x20000590
 80057d4:	200005c8 	.word	0x200005c8
 80057d8:	2000059e 	.word	0x2000059e
 80057dc:	0800bea8 	.word	0x0800bea8
 80057e0:	0800c2b0 	.word	0x0800c2b0
 80057e4:	20000009 	.word	0x20000009

080057e8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    return true;
 80057f0:	2301      	movs	r3, #1
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b0a      	cmp	r3, #10
 800580e:	d83e      	bhi.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <RadioGetLoRaBandwidthInHz+0x1c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	08005845 	.word	0x08005845
 800581c:	08005855 	.word	0x08005855
 8005820:	08005865 	.word	0x08005865
 8005824:	08005875 	.word	0x08005875
 8005828:	0800587d 	.word	0x0800587d
 800582c:	08005883 	.word	0x08005883
 8005830:	08005889 	.word	0x08005889
 8005834:	0800588f 	.word	0x0800588f
 8005838:	0800584d 	.word	0x0800584d
 800583c:	0800585d 	.word	0x0800585d
 8005840:	0800586d 	.word	0x0800586d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8005844:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005848:	60fb      	str	r3, [r7, #12]
        break;
 800584a:	e020      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800584c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8005850:	60fb      	str	r3, [r7, #12]
        break;
 8005852:	e01c      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8005854:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005858:	60fb      	str	r3, [r7, #12]
        break;
 800585a:	e018      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800585c:	f245 1361 	movw	r3, #20833	; 0x5161
 8005860:	60fb      	str	r3, [r7, #12]
        break;
 8005862:	e014      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8005864:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005868:	60fb      	str	r3, [r7, #12]
        break;
 800586a:	e010      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800586c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8005870:	60fb      	str	r3, [r7, #12]
        break;
 8005872:	e00c      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005874:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005878:	60fb      	str	r3, [r7, #12]
        break;
 800587a:	e008      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800587c:	4b07      	ldr	r3, [pc, #28]	; (800589c <RadioGetLoRaBandwidthInHz+0xa0>)
 800587e:	60fb      	str	r3, [r7, #12]
        break;
 8005880:	e005      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8005884:	60fb      	str	r3, [r7, #12]
        break;
 8005886:	e002      	b.n	800588e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <RadioGetLoRaBandwidthInHz+0xa8>)
 800588a:	60fb      	str	r3, [r7, #12]
        break;
 800588c:	bf00      	nop
    }

    return bandwidthInHz;
 800588e:	68fb      	ldr	r3, [r7, #12]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	0001e848 	.word	0x0001e848
 80058a0:	0003d090 	.word	0x0003d090
 80058a4:	0007a120 	.word	0x0007a120

080058a8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	70fb      	strb	r3, [r7, #3]
 80058ba:	460b      	mov	r3, r1
 80058bc:	803b      	strh	r3, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80058c2:	883b      	ldrh	r3, [r7, #0]
 80058c4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80058c6:	78ba      	ldrb	r2, [r7, #2]
 80058c8:	f082 0201 	eor.w	r2, r2, #1
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	d001      	beq.n	80058d6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80058d2:	2208      	movs	r2, #8
 80058d4:	e000      	b.n	80058d8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80058d6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80058d8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80058da:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80058de:	7c3b      	ldrb	r3, [r7, #16]
 80058e0:	7d39      	ldrb	r1, [r7, #20]
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d001      	beq.n	80058ea <RadioGetGfskTimeOnAirNumerator+0x42>
 80058e6:	2102      	movs	r1, #2
 80058e8:	e000      	b.n	80058ec <RadioGetGfskTimeOnAirNumerator+0x44>
 80058ea:	2100      	movs	r1, #0
 80058ec:	440b      	add	r3, r1
 80058ee:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80058f0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b08b      	sub	sp, #44	; 0x2c
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	460b      	mov	r3, r1
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	4613      	mov	r3, r2
 8005910:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	3304      	adds	r3, #4
 8005916:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b05      	cmp	r3, #5
 8005922:	d002      	beq.n	800592a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b06      	cmp	r3, #6
 8005928:	d104      	bne.n	8005934 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800592a:	88bb      	ldrh	r3, [r7, #4]
 800592c:	2b0b      	cmp	r3, #11
 800592e:	d801      	bhi.n	8005934 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005930:	230c      	movs	r3, #12
 8005932:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d008      	beq.n	8005952 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d005      	beq.n	8005952 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d105      	bne.n	8005958 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d102      	bne.n	8005958 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005958:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800595c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800595e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005962:	2a00      	cmp	r2, #0
 8005964:	d001      	beq.n	800596a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005966:	2210      	movs	r2, #16
 8005968:	e000      	b.n	800596c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800596a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800596c:	4413      	add	r3, r2
 800596e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005974:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005976:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800597a:	2a00      	cmp	r2, #0
 800597c:	d001      	beq.n	8005982 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800597e:	2200      	movs	r2, #0
 8005980:	e000      	b.n	8005984 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005982:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005984:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005986:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d803      	bhi.n	8005996 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	e00e      	b.n	80059b4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3308      	adds	r3, #8
 800599a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800599c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	3b02      	subs	r3, #2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	e002      	b.n	80059b4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da01      	bge.n	80059be <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	4413      	add	r3, r2
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	fb02 f203 	mul.w	r2, r2, r3
 80059d2:	88bb      	ldrh	r3, [r7, #4]
 80059d4:	4413      	add	r3, r2
    int32_t intermediate =
 80059d6:	330c      	adds	r3, #12
 80059d8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b06      	cmp	r3, #6
 80059de:	d802      	bhi.n	80059e6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	3302      	adds	r3, #2
 80059e4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	3b02      	subs	r3, #2
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	372c      	adds	r7, #44	; 0x2c
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr
	...

08005a00 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af04      	add	r7, sp, #16
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	4613      	mov	r3, r2
 8005a12:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <RadioTimeOnAir+0x28>
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d017      	beq.n	8005a56 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005a26:	e035      	b.n	8005a94 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005a28:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005a2c:	8c3a      	ldrh	r2, [r7, #32]
 8005a2e:	7bb9      	ldrb	r1, [r7, #14]
 8005a30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff32 	bl	80058a8 <RadioGetGfskTimeOnAirNumerator>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	613b      	str	r3, [r7, #16]
        break;
 8005a54:	e01e      	b.n	8005a94 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005a56:	8c39      	ldrh	r1, [r7, #32]
 8005a58:	7bba      	ldrb	r2, [r7, #14]
 8005a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f7ff ff43 	bl	80058fc <RadioGetLoRaTimeOnAirNumerator>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <RadioTimeOnAir+0xac>)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff feb6 	bl	80057fc <RadioGetLoRaBandwidthInHz>
 8005a90:	6138      	str	r0, [r7, #16]
        break;
 8005a92:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	0800c2b0 	.word	0x0800c2b0

08005ab0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005abc:	2300      	movs	r3, #0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f240 2101 	movw	r1, #513	; 0x201
 8005ac4:	f240 2001 	movw	r0, #513	; 0x201
 8005ac8:	f001 fb90 	bl	80071ec <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005acc:	4b69      	ldr	r3, [pc, #420]	; (8005c74 <RadioSend+0x1c4>)
 8005ace:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 ff6b 	bl	80079b0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005ada:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <RadioSend+0x1c4>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d112      	bne.n	8005b08 <RadioSend+0x58>
 8005ae2:	4b64      	ldr	r3, [pc, #400]	; (8005c74 <RadioSend+0x1c4>)
 8005ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d10d      	bne.n	8005b08 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005aec:	f640 0089 	movw	r0, #2185	; 0x889
 8005af0:	f001 fece 	bl	8007890 <SUBGRF_ReadRegister>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	4619      	mov	r1, r3
 8005afe:	f640 0089 	movw	r0, #2185	; 0x889
 8005b02:	f001 feb1 	bl	8007868 <SUBGRF_WriteRegister>
 8005b06:	e00c      	b.n	8005b22 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005b08:	f640 0089 	movw	r0, #2185	; 0x889
 8005b0c:	f001 fec0 	bl	8007890 <SUBGRF_ReadRegister>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f043 0304 	orr.w	r3, r3, #4
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f640 0089 	movw	r0, #2185	; 0x889
 8005b1e:	f001 fea3 	bl	8007868 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8005b22:	4b54      	ldr	r3, [pc, #336]	; (8005c74 <RadioSend+0x1c4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f200 809e 	bhi.w	8005c68 <RadioSend+0x1b8>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <RadioSend+0x84>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b45 	.word	0x08005b45
 8005b3c:	08005bb1 	.word	0x08005bb1
 8005b40:	08005bd1 	.word	0x08005bd1
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005b44:	4a4b      	ldr	r2, [pc, #300]	; (8005c74 <RadioSend+0x1c4>)
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005b4a:	484b      	ldr	r0, [pc, #300]	; (8005c78 <RadioSend+0x1c8>)
 8005b4c:	f001 fd44 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2200      	movs	r2, #0
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f86a 	bl	8006c30 <SUBGRF_SendPayload>
            break;
 8005b5c:	e087      	b.n	8005c6e <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005b5e:	f002 f912 	bl	8007d86 <RFW_Is_Init>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d116      	bne.n	8005b96 <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005b68:	f107 020d 	add.w	r2, r7, #13
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f002 f920 	bl	8007db6 <RFW_TransmitInit>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d177      	bne.n	8005c6c <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005b7c:	7b7a      	ldrb	r2, [r7, #13]
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <RadioSend+0x1c4>)
 8005b80:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005b82:	483d      	ldr	r0, [pc, #244]	; (8005c78 <RadioSend+0x1c8>)
 8005b84:	f001 fd28 	bl	80075d8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005b88:	7b7b      	ldrb	r3, [r7, #13]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 f84e 	bl	8006c30 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005b94:	e06b      	b.n	8005c6e <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005b96:	4a37      	ldr	r2, [pc, #220]	; (8005c74 <RadioSend+0x1c4>)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005b9c:	4836      	ldr	r0, [pc, #216]	; (8005c78 <RadioSend+0x1c8>)
 8005b9e:	f001 fd1b 	bl	80075d8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 f841 	bl	8006c30 <SUBGRF_SendPayload>
            break;
 8005bae:	e05e      	b.n	8005c6e <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <RadioSend+0x1c4>)
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <RadioSend+0x1c4>)
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005bbc:	482e      	ldr	r0, [pc, #184]	; (8005c78 <RadioSend+0x1c8>)
 8005bbe:	f001 fd0b 	bl	80075d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 f831 	bl	8006c30 <SUBGRF_SendPayload>
            break;
 8005bce:	e04e      	b.n	8005c6e <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4829      	ldr	r0, [pc, #164]	; (8005c7c <RadioSend+0x1cc>)
 8005bd8:	f000 fbb1 	bl	800633e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <RadioSend+0x1c4>)
 8005bde:	2202      	movs	r2, #2
 8005be0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	3301      	adds	r3, #1
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <RadioSend+0x1c4>)
 8005bea:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005bec:	4822      	ldr	r0, [pc, #136]	; (8005c78 <RadioSend+0x1c8>)
 8005bee:	f001 fcf3 	bl	80075d8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	20f1      	movs	r0, #241	; 0xf1
 8005bf6:	f000 f91b 	bl	8005e30 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	20f0      	movs	r0, #240	; 0xf0
 8005bfe:	f000 f917 	bl	8005e30 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <RadioSend+0x1c4>)
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d108      	bne.n	8005c1c <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005c0a:	2170      	movs	r1, #112	; 0x70
 8005c0c:	20f3      	movs	r0, #243	; 0xf3
 8005c0e:	f000 f90f 	bl	8005e30 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8005c12:	211d      	movs	r1, #29
 8005c14:	20f2      	movs	r0, #242	; 0xf2
 8005c16:	f000 f90b 	bl	8005e30 <RadioWrite>
 8005c1a:	e007      	b.n	8005c2c <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8005c1c:	21e1      	movs	r1, #225	; 0xe1
 8005c1e:	20f3      	movs	r0, #243	; 0xf3
 8005c20:	f000 f906 	bl	8005e30 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8005c24:	2104      	movs	r1, #4
 8005c26:	20f2      	movs	r0, #242	; 0xf2
 8005c28:	f000 f902 	bl	8005e30 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3302      	adds	r3, #2
 8005c36:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005c38:	89fb      	ldrh	r3, [r7, #14]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	20f4      	movs	r0, #244	; 0xf4
 8005c44:	f000 f8f4 	bl	8005e30 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	20f5      	movs	r0, #245	; 0xf5
 8005c50:	f000 f8ee 	bl	8005e30 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	3301      	adds	r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4806      	ldr	r0, [pc, #24]	; (8005c7c <RadioSend+0x1cc>)
 8005c62:	f000 ffe5 	bl	8006c30 <SUBGRF_SendPayload>
            break;
 8005c66:	e002      	b.n	8005c6e <RadioSend+0x1be>
        }
        default:
            break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <RadioSend+0x1be>
                return;
 8005c6c:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000590 	.word	0x20000590
 8005c78:	2000059e 	.word	0x2000059e
 8005c7c:	2000033c 	.word	0x2000033c

08005c80 <RadioSleep>:

static void RadioSleep( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005c86:	2300      	movs	r3, #0
 8005c88:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005c8a:	793b      	ldrb	r3, [r7, #4]
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005c92:	7938      	ldrb	r0, [r7, #4]
 8005c94:	f001 f8a8 	bl	8006de8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005c98:	2002      	movs	r0, #2
 8005c9a:	f7fb ffb5 	bl	8001c08 <HAL_Delay>
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <RadioStandby>:

static void RadioStandby( void )
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005caa:	2000      	movs	r0, #0
 8005cac:	f001 f8ce 	bl	8006e4c <SUBGRF_SetStandby>
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005cbc:	f002 f863 	bl	8007d86 <RFW_Is_Init>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d102      	bne.n	8005ccc <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005cc6:	f002 f886 	bl	8007dd6 <RFW_ReceiveInit>
 8005cca:	e007      	b.n	8005cdc <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f240 2162 	movw	r1, #610	; 0x262
 8005cd4:	f240 2062 	movw	r0, #610	; 0x262
 8005cd8:	f001 fa88 	bl	80071ec <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <RadioRx+0x5c>)
 8005cde:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fe63 	bl	80079b0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <RadioRx+0x5c>)
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005cf2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005cf6:	f001 f8e5 	bl	8006ec4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005cfa:	e005      	b.n	8005d08 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <RadioRx+0x5c>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 f8de 	bl	8006ec4 <SUBGRF_SetRx>
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000590 	.word	0x20000590

08005d14 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8005d1c:	f002 f833 	bl	8007d86 <RFW_Is_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8005d26:	f002 f856 	bl	8007dd6 <RFW_ReceiveInit>
 8005d2a:	e007      	b.n	8005d3c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f240 2162 	movw	r1, #610	; 0x262
 8005d34:	f240 2062 	movw	r0, #610	; 0x262
 8005d38:	f001 fa58 	bl	80071ec <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <RadioRxBoosted+0x5c>)
 8005d3e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fe33 	bl	80079b0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <RadioRxBoosted+0x5c>)
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005d52:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005d56:	f001 f8d5 	bl	8006f04 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005d5a:	e005      	b.n	8005d68 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <RadioRxBoosted+0x5c>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 f8ce 	bl	8006f04 <SUBGRF_SetRxBoosted>
}
 8005d68:	bf00      	nop
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20000590 	.word	0x20000590

08005d74 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <RadioSetRxDutyCycle+0x28>)
 8005d80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fe12 	bl	80079b0 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 f8dc 	bl	8006f4c <SUBGRF_SetRxDutyCycle>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000590 	.word	0x20000590

08005da0 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <RadioStartCad+0x2c>)
 8005da6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fdff 	bl	80079b0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005db2:	2300      	movs	r3, #0
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005dba:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005dbe:	f001 fa15 	bl	80071ec <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005dc2:	f001 f8ef 	bl	8006fa4 <SUBGRF_SetCad>
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000590 	.word	0x20000590

08005dd0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8005de0:	883b      	ldrh	r3, [r7, #0]
 8005de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fa59 	bl	80072a4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 fe02 	bl	8007a00 <SUBGRF_SetRfTxPower>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	2101      	movs	r1, #1
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 fdd3 	bl	80079b0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005e0a:	f001 f8d9 	bl	8006fc0 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005e20:	f001 fc8f 	bl	8007742 <SUBGRF_GetRssiInst>
 8005e24:	4603      	mov	r3, r0
 8005e26:	b21b      	sxth	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	460a      	mov	r2, r1
 8005e3a:	80fb      	strh	r3, [r7, #6]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8005e40:	797a      	ldrb	r2, [r7, #5]
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fd0e 	bl	8007868 <SUBGRF_WriteRegister>
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 fd15 	bl	8007890 <SUBGRF_ReadRegister>
 8005e66:	4603      	mov	r3, r0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	80fb      	strh	r3, [r7, #6]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005e80:	797b      	ldrb	r3, [r7, #5]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fd15 	bl	80078b8 <SUBGRF_WriteRegisters>
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	6039      	str	r1, [r7, #0]
 8005ea0:	80fb      	strh	r3, [r7, #6]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005ea6:	797b      	ldrb	r3, [r7, #5]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fd16 	bl	80078e0 <SUBGRF_ReadRegisters>
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	460a      	mov	r2, r1
 8005ec6:	71fb      	strb	r3, [r7, #7]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10a      	bne.n	8005ee8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005ed2:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <RadioSetMaxPayloadLength+0x50>)
 8005ed4:	79bb      	ldrb	r3, [r7, #6]
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <RadioSetMaxPayloadLength+0x50>)
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <RadioSetMaxPayloadLength+0x54>)
 8005ede:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ee0:	480c      	ldr	r0, [pc, #48]	; (8005f14 <RadioSetMaxPayloadLength+0x58>)
 8005ee2:	f001 fb79 	bl	80075d8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8005ee6:	e00d      	b.n	8005f04 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <RadioSetMaxPayloadLength+0x54>)
 8005eea:	7d5b      	ldrb	r3, [r3, #21]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d109      	bne.n	8005f04 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005ef0:	4a06      	ldr	r2, [pc, #24]	; (8005f0c <RadioSetMaxPayloadLength+0x50>)
 8005ef2:	79bb      	ldrb	r3, [r7, #6]
 8005ef4:	7013      	strb	r3, [r2, #0]
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <RadioSetMaxPayloadLength+0x50>)
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <RadioSetMaxPayloadLength+0x54>)
 8005efc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005efe:	4805      	ldr	r0, [pc, #20]	; (8005f14 <RadioSetMaxPayloadLength+0x58>)
 8005f00:	f001 fb6a 	bl	80075d8 <SUBGRF_SetPacketParams>
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000009 	.word	0x20000009
 8005f10:	20000590 	.word	0x20000590
 8005f14:	2000059e 	.word	0x2000059e

08005f18 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <RadioSetPublicNetwork+0x58>)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	7313      	strb	r3, [r2, #12]
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <RadioSetPublicNetwork+0x58>)
 8005f2a:	7b1a      	ldrb	r2, [r3, #12]
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <RadioSetPublicNetwork+0x58>)
 8005f2e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8005f30:	2001      	movs	r0, #1
 8005f32:	f7ff f879 	bl	8005028 <RadioSetModem>
    if( enable == true )
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005f3c:	2134      	movs	r1, #52	; 0x34
 8005f3e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005f42:	f001 fc91 	bl	8007868 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005f46:	2144      	movs	r1, #68	; 0x44
 8005f48:	f240 7041 	movw	r0, #1857	; 0x741
 8005f4c:	f001 fc8c 	bl	8007868 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8005f50:	e009      	b.n	8005f66 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8005f52:	2114      	movs	r1, #20
 8005f54:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005f58:	f001 fc86 	bl	8007868 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005f5c:	2124      	movs	r1, #36	; 0x24
 8005f5e:	f240 7041 	movw	r0, #1857	; 0x741
 8005f62:	f001 fc81 	bl	8007868 <SUBGRF_WriteRegister>
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000590 	.word	0x20000590

08005f74 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005f78:	f001 fd76 	bl	8007a68 <SUBGRF_GetRadioWakeUpTime>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	3303      	adds	r3, #3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8005f8e:	4a05      	ldr	r2, [pc, #20]	; (8005fa4 <RadioOnDioIrq+0x20>)
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8005f96:	f000 f807 	bl	8005fa8 <RadioIrqProcess>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000590 	.word	0x20000590

08005fa8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8005fb6:	4bab      	ldr	r3, [pc, #684]	; (8006264 <RadioIrqProcess+0x2bc>)
 8005fb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc0:	f000 8104 	beq.w	80061cc <RadioIrqProcess+0x224>
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc8:	f300 816e 	bgt.w	80062a8 <RadioIrqProcess+0x300>
 8005fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd0:	f000 80ea 	beq.w	80061a8 <RadioIrqProcess+0x200>
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd8:	f300 8166 	bgt.w	80062a8 <RadioIrqProcess+0x300>
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	f000 80cf 	beq.w	8006180 <RadioIrqProcess+0x1d8>
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	f300 8160 	bgt.w	80062a8 <RadioIrqProcess+0x300>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	dc49      	bgt.n	8006080 <RadioIrqProcess+0xd8>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f340 815b 	ble.w	80062a8 <RadioIrqProcess+0x300>
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b1f      	cmp	r3, #31
 8005ff6:	f200 8157 	bhi.w	80062a8 <RadioIrqProcess+0x300>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <RadioIrqProcess+0x58>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006089 	.word	0x08006089
 8006004:	080060bd 	.word	0x080060bd
 8006008:	080062a9 	.word	0x080062a9
 800600c:	080062a9 	.word	0x080062a9
 8006010:	080062a9 	.word	0x080062a9
 8006014:	080062a9 	.word	0x080062a9
 8006018:	080062a9 	.word	0x080062a9
 800601c:	08006225 	.word	0x08006225
 8006020:	080062a9 	.word	0x080062a9
 8006024:	080062a9 	.word	0x080062a9
 8006028:	080062a9 	.word	0x080062a9
 800602c:	080062a9 	.word	0x080062a9
 8006030:	080062a9 	.word	0x080062a9
 8006034:	080062a9 	.word	0x080062a9
 8006038:	080062a9 	.word	0x080062a9
 800603c:	080062a9 	.word	0x080062a9
 8006040:	080062a9 	.word	0x080062a9
 8006044:	080062a9 	.word	0x080062a9
 8006048:	080062a9 	.word	0x080062a9
 800604c:	080062a9 	.word	0x080062a9
 8006050:	080062a9 	.word	0x080062a9
 8006054:	080062a9 	.word	0x080062a9
 8006058:	080062a9 	.word	0x080062a9
 800605c:	080062a9 	.word	0x080062a9
 8006060:	080062a9 	.word	0x080062a9
 8006064:	080062a9 	.word	0x080062a9
 8006068:	080062a9 	.word	0x080062a9
 800606c:	080062a9 	.word	0x080062a9
 8006070:	080062a9 	.word	0x080062a9
 8006074:	080062a9 	.word	0x080062a9
 8006078:	080062a9 	.word	0x080062a9
 800607c:	08006235 	.word	0x08006235
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	f000 80f9 	beq.w	8006278 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8006086:	e10f      	b.n	80062a8 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 8006088:	2000      	movs	r0, #0
 800608a:	f000 fedf 	bl	8006e4c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800608e:	f001 fe81 	bl	8007d94 <RFW_Is_LongPacketModeEnabled>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8006098:	f001 fea5 	bl	8007de6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800609c:	4b72      	ldr	r3, [pc, #456]	; (8006268 <RadioIrqProcess+0x2c0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8103 	beq.w	80062ac <RadioIrqProcess+0x304>
 80060a6:	4b70      	ldr	r3, [pc, #448]	; (8006268 <RadioIrqProcess+0x2c0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80fd 	beq.w	80062ac <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 80060b2:	4b6d      	ldr	r3, [pc, #436]	; (8006268 <RadioIrqProcess+0x2c0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4798      	blx	r3
        break;
 80060ba:	e0f7      	b.n	80062ac <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 80060bc:	4b69      	ldr	r3, [pc, #420]	; (8006264 <RadioIrqProcess+0x2bc>)
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	f083 0301 	eor.w	r3, r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d014      	beq.n	80060f4 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 80060ca:	2000      	movs	r0, #0
 80060cc:	f000 febe 	bl	8006e4c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80060d0:	2100      	movs	r1, #0
 80060d2:	f640 1002 	movw	r0, #2306	; 0x902
 80060d6:	f001 fbc7 	bl	8007868 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80060da:	f640 1044 	movw	r0, #2372	; 0x944
 80060de:	f001 fbd7 	bl	8007890 <SUBGRF_ReadRegister>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	f640 1044 	movw	r0, #2372	; 0x944
 80060f0:	f001 fbba 	bl	8007868 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80060f4:	1dfb      	adds	r3, r7, #7
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	4619      	mov	r1, r3
 80060fa:	485c      	ldr	r0, [pc, #368]	; (800626c <RadioIrqProcess+0x2c4>)
 80060fc:	f000 fd76 	bl	8006bec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006100:	485b      	ldr	r0, [pc, #364]	; (8006270 <RadioIrqProcess+0x2c8>)
 8006102:	f001 fb5f 	bl	80077c4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006106:	4b58      	ldr	r3, [pc, #352]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d036      	beq.n	800617c <RadioIrqProcess+0x1d4>
 800610e:	4b56      	ldr	r3, [pc, #344]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d031      	beq.n	800617c <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 8006118:	4b52      	ldr	r3, [pc, #328]	; (8006264 <RadioIrqProcess+0x2bc>)
 800611a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10e      	bne.n	8006140 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8006122:	4b51      	ldr	r3, [pc, #324]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689c      	ldr	r4, [r3, #8]
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	b299      	uxth	r1, r3
 800612c:	4b4d      	ldr	r3, [pc, #308]	; (8006264 <RadioIrqProcess+0x2bc>)
 800612e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006132:	b21a      	sxth	r2, r3
 8006134:	4b4b      	ldr	r3, [pc, #300]	; (8006264 <RadioIrqProcess+0x2bc>)
 8006136:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800613a:	484c      	ldr	r0, [pc, #304]	; (800626c <RadioIrqProcess+0x2c4>)
 800613c:	47a0      	blx	r4
                break;
 800613e:	e01e      	b.n	800617e <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006140:	4b48      	ldr	r3, [pc, #288]	; (8006264 <RadioIrqProcess+0x2bc>)
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	463a      	mov	r2, r7
 8006146:	4611      	mov	r1, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f001 fd6f 	bl	8007c2c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800614e:	4b46      	ldr	r3, [pc, #280]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689c      	ldr	r4, [r3, #8]
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	b299      	uxth	r1, r3
 8006158:	4b42      	ldr	r3, [pc, #264]	; (8006264 <RadioIrqProcess+0x2bc>)
 800615a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800615e:	b218      	sxth	r0, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006166:	4a43      	ldr	r2, [pc, #268]	; (8006274 <RadioIrqProcess+0x2cc>)
 8006168:	fb82 c203 	smull	ip, r2, r2, r3
 800616c:	1192      	asrs	r2, r2, #6
 800616e:	17db      	asrs	r3, r3, #31
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b25b      	sxtb	r3, r3
 8006174:	4602      	mov	r2, r0
 8006176:	483d      	ldr	r0, [pc, #244]	; (800626c <RadioIrqProcess+0x2c4>)
 8006178:	47a0      	blx	r4
                break;
 800617a:	e000      	b.n	800617e <RadioIrqProcess+0x1d6>
        }
 800617c:	bf00      	nop
        break;
 800617e:	e0a2      	b.n	80062c6 <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 8006180:	2000      	movs	r0, #0
 8006182:	f000 fe63 	bl	8006e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006186:	4b38      	ldr	r3, [pc, #224]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8090 	beq.w	80062b0 <RadioIrqProcess+0x308>
 8006190:	4b35      	ldr	r3, [pc, #212]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 808a 	beq.w	80062b0 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 800619c:	4b32      	ldr	r3, [pc, #200]	; (8006268 <RadioIrqProcess+0x2c0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2000      	movs	r0, #0
 80061a4:	4798      	blx	r3
        break;
 80061a6:	e083      	b.n	80062b0 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 80061a8:	2000      	movs	r0, #0
 80061aa:	f000 fe4f 	bl	8006e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80061ae:	4b2e      	ldr	r3, [pc, #184]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d07e      	beq.n	80062b4 <RadioIrqProcess+0x30c>
 80061b6:	4b2c      	ldr	r3, [pc, #176]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d079      	beq.n	80062b4 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 80061c0:	4b29      	ldr	r3, [pc, #164]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2001      	movs	r0, #1
 80061c8:	4798      	blx	r3
        break;
 80061ca:	e073      	b.n	80062b4 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80061cc:	f000 fcf4 	bl	8006bb8 <SUBGRF_GetOperatingMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d110      	bne.n	80061f8 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 80061d6:	2000      	movs	r0, #0
 80061d8:	f000 fe38 	bl	8006e4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80061dc:	4b22      	ldr	r3, [pc, #136]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d069      	beq.n	80062b8 <RadioIrqProcess+0x310>
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d064      	beq.n	80062b8 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 80061ee:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <RadioIrqProcess+0x2c0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4798      	blx	r3
        break;
 80061f6:	e05f      	b.n	80062b8 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80061f8:	f000 fcde 	bl	8006bb8 <SUBGRF_GetOperatingMode>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d15a      	bne.n	80062b8 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006202:	2000      	movs	r0, #0
 8006204:	f000 fe22 	bl	8006e4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006208:	4b17      	ldr	r3, [pc, #92]	; (8006268 <RadioIrqProcess+0x2c0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d053      	beq.n	80062b8 <RadioIrqProcess+0x310>
 8006210:	4b15      	ldr	r3, [pc, #84]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d04e      	beq.n	80062b8 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <RadioIrqProcess+0x2c0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4798      	blx	r3
        break;
 8006222:	e049      	b.n	80062b8 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006224:	f001 fdaf 	bl	8007d86 <RFW_Is_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b01      	cmp	r3, #1
 800622c:	d146      	bne.n	80062bc <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 800622e:	f001 fde0 	bl	8007df2 <RFW_ReceivePayload>
        break;
 8006232:	e043      	b.n	80062bc <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006234:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <RadioIrqProcess+0x2bc>)
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	f083 0301 	eor.w	r3, r3, #1
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006242:	2000      	movs	r0, #0
 8006244:	f000 fe02 	bl	8006e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <RadioIrqProcess+0x2c0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d037      	beq.n	80062c0 <RadioIrqProcess+0x318>
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <RadioIrqProcess+0x2c0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d032      	beq.n	80062c0 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <RadioIrqProcess+0x2c0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4798      	blx	r3
        break;
 8006262:	e02d      	b.n	80062c0 <RadioIrqProcess+0x318>
 8006264:	20000590 	.word	0x20000590
 8006268:	2000043c 	.word	0x2000043c
 800626c:	2000033c 	.word	0x2000033c
 8006270:	200005b4 	.word	0x200005b4
 8006274:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8006278:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <RadioIrqProcess+0x328>)
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	f083 0301 	eor.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 8006286:	2000      	movs	r0, #0
 8006288:	f000 fde0 	bl	8006e4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <RadioIrqProcess+0x32c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d017      	beq.n	80062c4 <RadioIrqProcess+0x31c>
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <RadioIrqProcess+0x32c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d012      	beq.n	80062c4 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <RadioIrqProcess+0x32c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4798      	blx	r3
        break;
 80062a6:	e00d      	b.n	80062c4 <RadioIrqProcess+0x31c>
        break;
 80062a8:	bf00      	nop
 80062aa:	e00c      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062ac:	bf00      	nop
 80062ae:	e00a      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062b0:	bf00      	nop
 80062b2:	e008      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062b4:	bf00      	nop
 80062b6:	e006      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062b8:	bf00      	nop
 80062ba:	e004      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062bc:	bf00      	nop
 80062be:	e002      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062c0:	bf00      	nop
 80062c2:	e000      	b.n	80062c6 <RadioIrqProcess+0x31e>
        break;
 80062c4:	bf00      	nop
  }
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd90      	pop	{r4, r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000590 	.word	0x20000590
 80062d4:	2000043c 	.word	0x2000043c

080062d8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <RadioTxPrbs+0x2c>)
 80062de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80062e2:	2101      	movs	r1, #1
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 fb63 	bl	80079b0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <RadioTxPrbs+0x30>)
 80062ec:	212d      	movs	r1, #45	; 0x2d
 80062ee:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80062f2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80062f4:	f000 fe6d 	bl	8006fd2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80062f8:	4804      	ldr	r0, [pc, #16]	; (800630c <RadioTxPrbs+0x34>)
 80062fa:	f000 fdc3 	bl	8006e84 <SUBGRF_SetTx>
}
 80062fe:	bf00      	nop
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000590 	.word	0x20000590
 8006308:	08005e31 	.word	0x08005e31
 800630c:	000fffff 	.word	0x000fffff

08006310 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fb6e 	bl	8007a00 <SUBGRF_SetRfTxPower>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2101      	movs	r1, #1
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fb3f 	bl	80079b0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006332:	f000 fe45 	bl	8006fc0 <SUBGRF_SetTxContinuousWave>
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800633e:	b480      	push	{r7}
 8006340:	b089      	sub	sp, #36	; 0x24
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	4613      	mov	r3, r2
 800634a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	e011      	b.n	800637e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4413      	add	r3, r2
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	440b      	add	r3, r1
 8006368:	43d2      	mvns	r2, r2
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	3301      	adds	r3, #1
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	429a      	cmp	r2, r3
 8006384:	dbe9      	blt.n	800635a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e049      	b.n	8006420 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	425a      	negs	r2, r3
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	f002 0207 	and.w	r2, r2, #7
 8006398:	bf58      	it	pl
 800639a:	4253      	negpl	r3, r2
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f1c3 0307 	rsb	r3, r3, #7
 80063a2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da00      	bge.n	80063ac <payload_integration+0x6e>
 80063aa:	3307      	adds	r3, #7
 80063ac:	10db      	asrs	r3, r3, #3
 80063ae:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	3301      	adds	r3, #1
 80063b4:	425a      	negs	r2, r3
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	f002 0207 	and.w	r2, r2, #7
 80063be:	bf58      	it	pl
 80063c0:	4253      	negpl	r3, r2
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f1c3 0307 	rsb	r3, r3, #7
 80063c8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	3301      	adds	r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da00      	bge.n	80063d4 <payload_integration+0x96>
 80063d2:	3307      	adds	r3, #7
 80063d4:	10db      	asrs	r3, r3, #3
 80063d6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80063d8:	7dbb      	ldrb	r3, [r7, #22]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	fa42 f303 	asr.w	r3, r2, r3
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80063f0:	7ffa      	ldrb	r2, [r7, #31]
 80063f2:	7cfb      	ldrb	r3, [r7, #19]
 80063f4:	4053      	eors	r3, r2
 80063f6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80063f8:	7d3b      	ldrb	r3, [r7, #20]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b25a      	sxtb	r2, r3
 8006402:	7ff9      	ldrb	r1, [r7, #31]
 8006404:	7d7b      	ldrb	r3, [r7, #21]
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	b25b      	sxtb	r3, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	b259      	sxtb	r1, r3
 8006410:	7d3b      	ldrb	r3, [r7, #20]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	b2ca      	uxtb	r2, r1
 8006418:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	3301      	adds	r3, #1
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	429a      	cmp	r2, r3
 8006428:	dbb0      	blt.n	800638c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	01db      	lsls	r3, r3, #7
 800642e:	b25a      	sxtb	r2, r3
 8006430:	7ffb      	ldrb	r3, [r7, #31]
 8006432:	019b      	lsls	r3, r3, #6
 8006434:	b25b      	sxtb	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b25b      	sxtb	r3, r3
 800643a:	7ffa      	ldrb	r2, [r7, #31]
 800643c:	2a00      	cmp	r2, #0
 800643e:	d101      	bne.n	8006444 <payload_integration+0x106>
 8006440:	2220      	movs	r2, #32
 8006442:	e000      	b.n	8006446 <payload_integration+0x108>
 8006444:	2200      	movs	r2, #0
 8006446:	4313      	orrs	r3, r2
 8006448:	b259      	sxtb	r1, r3
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	b2ca      	uxtb	r2, r1
 8006452:	701a      	strb	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	3724      	adds	r7, #36	; 0x24
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
	...

08006460 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08c      	sub	sp, #48	; 0x30
 8006464:	af00      	add	r7, sp, #0
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800647c:	f001 fc7d 	bl	8007d7a <RFW_DeInit>

    if( rxContinuous != 0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2da      	uxtb	r2, r3
 8006496:	4ba9      	ldr	r3, [pc, #676]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006498:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <RadioSetRxGenericConfig+0x48>
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f000 80e8 	beq.w	8006676 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80064a6:	e1a0      	b.n	80067ea <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <RadioSetRxGenericConfig+0x58>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <RadioSetRxGenericConfig+0x5e>
            return -1;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e196      	b.n	80067ec <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	7d5b      	ldrb	r3, [r3, #21]
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d902      	bls.n	80064cc <RadioSetRxGenericConfig+0x6c>
            return -1;
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ca:	e18f      	b.n	80067ec <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80064cc:	2300      	movs	r3, #0
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d0:	e00d      	b.n	80064ee <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	4413      	add	r3, r2
 80064da:	7819      	ldrb	r1, [r3, #0]
 80064dc:	f107 021c 	add.w	r2, r7, #28
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	4413      	add	r3, r2
 80064e4:	460a      	mov	r2, r1
 80064e6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	3301      	adds	r3, #1
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	7d5b      	ldrb	r3, [r3, #21]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	4293      	cmp	r3, r2
 80064f8:	dbeb      	blt.n	80064d2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd6b 	bl	8006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800650e:	4b8b      	ldr	r3, [pc, #556]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4a88      	ldr	r2, [pc, #544]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800651c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	791a      	ldrb	r2, [r3, #4]
 8006522:	4b86      	ldr	r3, [pc, #536]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fb55 	bl	8007bdc <SUBGRF_GetFskBandwidthRegValue>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	4b81      	ldr	r3, [pc, #516]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800653c:	4b7f      	ldr	r3, [pc, #508]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800653e:	2200      	movs	r2, #0
 8006540:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	b29b      	uxth	r3, r3
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	b29a      	uxth	r2, r3
 800654c:	4b7b      	ldr	r3, [pc, #492]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800654e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	7d1a      	ldrb	r2, [r3, #20]
 8006554:	4b79      	ldr	r3, [pc, #484]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006556:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	7d5b      	ldrb	r3, [r3, #21]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b76      	ldr	r3, [pc, #472]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006562:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800656a:	4b74      	ldr	r3, [pc, #464]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800656c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4b6f      	ldr	r3, [pc, #444]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006580:	759a      	strb	r2, [r3, #22]
 8006582:	e00b      	b.n	800659c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800658a:	2b02      	cmp	r3, #2
 800658c:	d103      	bne.n	8006596 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800658e:	4b6b      	ldr	r3, [pc, #428]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	759a      	strb	r2, [r3, #22]
 8006594:	e002      	b.n	800659c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006596:	4b69      	ldr	r3, [pc, #420]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d004      	beq.n	80065b0 <RadioSetRxGenericConfig+0x150>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d12d      	bne.n	800660c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b6:	2bf1      	cmp	r3, #241	; 0xf1
 80065b8:	d00c      	beq.n	80065d4 <RadioSetRxGenericConfig+0x174>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065c0:	2bf2      	cmp	r3, #242	; 0xf2
 80065c2:	d007      	beq.n	80065d4 <RadioSetRxGenericConfig+0x174>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d002      	beq.n	80065d4 <RadioSetRxGenericConfig+0x174>
            return -1;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	e10b      	b.n	80067ec <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80065d4:	2300      	movs	r3, #0
 80065d6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80065dc:	4b58      	ldr	r3, [pc, #352]	; (8006740 <RadioSetRxGenericConfig+0x2e0>)
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	f107 0310 	add.w	r3, r7, #16
 80065e4:	4a57      	ldr	r2, [pc, #348]	; (8006744 <RadioSetRxGenericConfig+0x2e4>)
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fbba 	bl	8007d60 <RFW_Init>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <RadioSetRxGenericConfig+0x198>
            return -1;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	e0f9      	b.n	80067ec <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80065fe:	4b4f      	ldr	r3, [pc, #316]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006600:	2201      	movs	r2, #1
 8006602:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006604:	4b4d      	ldr	r3, [pc, #308]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006606:	2200      	movs	r2, #0
 8006608:	755a      	strb	r2, [r3, #21]
        {
 800660a:	e00e      	b.n	800662a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006612:	4b4a      	ldr	r3, [pc, #296]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006614:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800661c:	4b47      	ldr	r3, [pc, #284]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800661e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006626:	4b45      	ldr	r3, [pc, #276]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006628:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800662a:	f7ff fb3c 	bl	8005ca6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800662e:	2000      	movs	r0, #0
 8006630:	f7fe fcfa 	bl	8005028 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006634:	4844      	ldr	r0, [pc, #272]	; (8006748 <RadioSetRxGenericConfig+0x2e8>)
 8006636:	f000 ff03 	bl	8007440 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800663a:	4844      	ldr	r0, [pc, #272]	; (800674c <RadioSetRxGenericConfig+0x2ec>)
 800663c:	f000 ffcc 	bl	80075d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006640:	f107 031c 	add.w	r3, r7, #28
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fb06 	bl	8006c56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	8c1b      	ldrh	r3, [r3, #32]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fb50 	bl	8006cf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fb2b 	bl	8006cb4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006664:	fb02 f203 	mul.w	r2, r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	4a32      	ldr	r2, [pc, #200]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006672:	6093      	str	r3, [r2, #8]
        break;
 8006674:	e0b9      	b.n	80067ea <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <RadioSetRxGenericConfig+0x224>
            return -1;
 800667e:	f04f 33ff 	mov.w	r3, #4294967295
 8006682:	e0b3      	b.n	80067ec <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800668a:	2b01      	cmp	r3, #1
 800668c:	d104      	bne.n	8006698 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006696:	e002      	b.n	800669e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006698:	23ff      	movs	r3, #255	; 0xff
 800669a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bf14      	ite	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	2300      	moveq	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fc99 	bl	8006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fca3 	bl	8007002 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80066bc:	4b1f      	ldr	r3, [pc, #124]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80066ca:	4b1c      	ldr	r3, [pc, #112]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 80066cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80066d6:	4b19      	ldr	r3, [pc, #100]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 80066e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d010      	beq.n	8006714 <RadioSetRxGenericConfig+0x2b4>
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	dc2c      	bgt.n	8006750 <RadioSetRxGenericConfig+0x2f0>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <RadioSetRxGenericConfig+0x2a0>
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d005      	beq.n	800670a <RadioSetRxGenericConfig+0x2aa>
            break;
 80066fe:	e027      	b.n	8006750 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006708:	e023      	b.n	8006752 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006712:	e01e      	b.n	8006752 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800671a:	2b0b      	cmp	r3, #11
 800671c:	d004      	beq.n	8006728 <RadioSetRxGenericConfig+0x2c8>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d104      	bne.n	8006732 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006730:	e00f      	b.n	8006752 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006732:	4b02      	ldr	r3, [pc, #8]	; (800673c <RadioSetRxGenericConfig+0x2dc>)
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800673a:	e00a      	b.n	8006752 <RadioSetRxGenericConfig+0x2f2>
 800673c:	20000590 	.word	0x20000590
 8006740:	2000043c 	.word	0x2000043c
 8006744:	200005e9 	.word	0x200005e9
 8006748:	200005c8 	.word	0x200005c8
 800674c:	2000059e 	.word	0x2000059e
            break;
 8006750:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006752:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 8006754:	2201      	movs	r2, #1
 8006756:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 800675e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006766:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 8006768:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800676a:	4a22      	ldr	r2, [pc, #136]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 800676c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006770:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006778:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 800677a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 8006786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800678a:	f7ff fa8c 	bl	8005ca6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800678e:	2001      	movs	r0, #1
 8006790:	f7fe fc4a 	bl	8005028 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006794:	4818      	ldr	r0, [pc, #96]	; (80067f8 <RadioSetRxGenericConfig+0x398>)
 8006796:	f000 fe53 	bl	8007440 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800679a:	4818      	ldr	r0, [pc, #96]	; (80067fc <RadioSetRxGenericConfig+0x39c>)
 800679c:	f000 ff1c 	bl	80075d8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80067a0:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 80067a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10d      	bne.n	80067c6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80067aa:	f240 7036 	movw	r0, #1846	; 0x736
 80067ae:	f001 f86f 	bl	8007890 <SUBGRF_ReadRegister>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	4619      	mov	r1, r3
 80067bc:	f240 7036 	movw	r0, #1846	; 0x736
 80067c0:	f001 f852 	bl	8007868 <SUBGRF_WriteRegister>
 80067c4:	e00c      	b.n	80067e0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80067c6:	f240 7036 	movw	r0, #1846	; 0x736
 80067ca:	f001 f861 	bl	8007890 <SUBGRF_ReadRegister>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	4619      	mov	r1, r3
 80067d8:	f240 7036 	movw	r0, #1846	; 0x736
 80067dc:	f001 f844 	bl	8007868 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <RadioSetRxGenericConfig+0x394>)
 80067e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067e6:	609a      	str	r2, [r3, #8]
        break;
 80067e8:	bf00      	nop
    }
    return status;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3730      	adds	r7, #48	; 0x30
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000590 	.word	0x20000590
 80067f8:	200005c8 	.word	0x200005c8
 80067fc:	2000059e 	.word	0x2000059e

08006800 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
 800680e:	4613      	mov	r3, r2
 8006810:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	2300      	movs	r3, #0
 8006818:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800681a:	f001 faae 	bl	8007d7a <RFW_DeInit>
    switch( modem )
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f000 8144 	beq.w	8006aae <RadioSetTxGenericConfig+0x2ae>
 8006826:	2b02      	cmp	r3, #2
 8006828:	f300 8160 	bgt.w	8006aec <RadioSetTxGenericConfig+0x2ec>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <RadioSetTxGenericConfig+0x38>
 8006830:	2b01      	cmp	r3, #1
 8006832:	f000 80b7 	beq.w	80069a4 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8006836:	e159      	b.n	8006aec <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <RadioSetTxGenericConfig+0x48>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <RadioSetTxGenericConfig+0x4e>
            return -1;
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	e163      	b.n	8006b16 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	7d1b      	ldrb	r3, [r3, #20]
 8006852:	2b08      	cmp	r3, #8
 8006854:	d902      	bls.n	800685c <RadioSetTxGenericConfig+0x5c>
            return -1;
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	e15c      	b.n	8006b16 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	e00d      	b.n	800687e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	4413      	add	r3, r2
 800686a:	7819      	ldrb	r1, [r3, #0]
 800686c:	f107 021c 	add.w	r2, r7, #28
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	4413      	add	r3, r2
 8006874:	460a      	mov	r2, r1
 8006876:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	3301      	adds	r3, #1
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	7d1b      	ldrb	r3, [r3, #20]
 8006882:	461a      	mov	r2, r3
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	4293      	cmp	r3, r2
 8006888:	dbeb      	blt.n	8006862 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800688a:	4ba5      	ldr	r3, [pc, #660]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4aa2      	ldr	r2, [pc, #648]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006898:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	4ba0      	ldr	r3, [pc, #640]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f997 	bl	8007bdc <SUBGRF_GetFskBandwidthRegValue>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	4b9b      	ldr	r3, [pc, #620]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4a98      	ldr	r2, [pc, #608]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068be:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80068c0:	4b97      	ldr	r3, [pc, #604]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	4b93      	ldr	r3, [pc, #588]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068d2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80068d4:	4b92      	ldr	r3, [pc, #584]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068d6:	2204      	movs	r2, #4
 80068d8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7d1b      	ldrb	r3, [r3, #20]
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b8f      	ldr	r3, [pc, #572]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068e4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80068e6:	4b8e      	ldr	r3, [pc, #568]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d003      	beq.n	80068fe <RadioSetTxGenericConfig+0xfe>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	7f9b      	ldrb	r3, [r3, #30]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d12a      	bne.n	8006954 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	7fdb      	ldrb	r3, [r3, #31]
 8006902:	2bf1      	cmp	r3, #241	; 0xf1
 8006904:	d00a      	beq.n	800691c <RadioSetTxGenericConfig+0x11c>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7fdb      	ldrb	r3, [r3, #31]
 800690a:	2bf2      	cmp	r3, #242	; 0xf2
 800690c:	d006      	beq.n	800691c <RadioSetTxGenericConfig+0x11c>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	7fdb      	ldrb	r3, [r3, #31]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d002      	beq.n	800691c <RadioSetTxGenericConfig+0x11c>
                return -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	e0fc      	b.n	8006b16 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800691c:	2301      	movs	r3, #1
 800691e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006924:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <RadioSetTxGenericConfig+0x324>)
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	f107 0310 	add.w	r3, r7, #16
 800692c:	4a7e      	ldr	r2, [pc, #504]	; (8006b28 <RadioSetTxGenericConfig+0x328>)
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fa16 	bl	8007d60 <RFW_Init>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <RadioSetTxGenericConfig+0x140>
              return -1;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	e0ea      	b.n	8006b16 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006940:	4b77      	ldr	r3, [pc, #476]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006942:	2200      	movs	r2, #0
 8006944:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006946:	4b76      	ldr	r3, [pc, #472]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006948:	2201      	movs	r2, #1
 800694a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800694c:	4b74      	ldr	r3, [pc, #464]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 800694e:	2200      	movs	r2, #0
 8006950:	755a      	strb	r2, [r3, #21]
        {
 8006952:	e00c      	b.n	800696e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	7fda      	ldrb	r2, [r3, #31]
 8006958:	4b71      	ldr	r3, [pc, #452]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 800695a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006962:	4b6f      	ldr	r3, [pc, #444]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006964:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	7f9a      	ldrb	r2, [r3, #30]
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 800696c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800696e:	f7ff f99a 	bl	8005ca6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006972:	2000      	movs	r0, #0
 8006974:	f7fe fb58 	bl	8005028 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006978:	486c      	ldr	r0, [pc, #432]	; (8006b2c <RadioSetTxGenericConfig+0x32c>)
 800697a:	f000 fd61 	bl	8007440 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800697e:	486c      	ldr	r0, [pc, #432]	; (8006b30 <RadioSetTxGenericConfig+0x330>)
 8006980:	f000 fe2a 	bl	80075d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006984:	f107 031c 	add.w	r3, r7, #28
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f964 	bl	8006c56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	8b9b      	ldrh	r3, [r3, #28]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f9ae 	bl	8006cf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	8c1b      	ldrh	r3, [r3, #32]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f989 	bl	8006cb4 <SUBGRF_SetCrcPolynomial>
        break;
 80069a2:	e0a4      	b.n	8006aee <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80069a4:	4b5e      	ldr	r3, [pc, #376]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80069be:	4b58      	ldr	r3, [pc, #352]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80069ca:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d010      	beq.n	80069fc <RadioSetTxGenericConfig+0x1fc>
 80069da:	2b02      	cmp	r3, #2
 80069dc:	dc22      	bgt.n	8006a24 <RadioSetTxGenericConfig+0x224>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <RadioSetTxGenericConfig+0x1e8>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d005      	beq.n	80069f2 <RadioSetTxGenericConfig+0x1f2>
            break;
 80069e6:	e01d      	b.n	8006a24 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80069e8:	4b4d      	ldr	r3, [pc, #308]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069f0:	e019      	b.n	8006a26 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80069f2:	4b4b      	ldr	r3, [pc, #300]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069fa:	e014      	b.n	8006a26 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a02:	2b0b      	cmp	r3, #11
 8006a04:	d004      	beq.n	8006a10 <RadioSetTxGenericConfig+0x210>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d104      	bne.n	8006a1a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a10:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a18:	e005      	b.n	8006a26 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a22:	e000      	b.n	8006a26 <RadioSetTxGenericConfig+0x226>
            break;
 8006a24:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a26:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a30:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a32:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006a3a:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a3c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006a44:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a46:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006a50:	4b33      	ldr	r3, [pc, #204]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006a56:	f7ff f926 	bl	8005ca6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f7fe fae4 	bl	8005028 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a60:	4832      	ldr	r0, [pc, #200]	; (8006b2c <RadioSetTxGenericConfig+0x32c>)
 8006a62:	f000 fced 	bl	8007440 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a66:	4832      	ldr	r0, [pc, #200]	; (8006b30 <RadioSetTxGenericConfig+0x330>)
 8006a68:	f000 fdb6 	bl	80075d8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006a6c:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d10d      	bne.n	8006a92 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006a76:	f640 0089 	movw	r0, #2185	; 0x889
 8006a7a:	f000 ff09 	bl	8007890 <SUBGRF_ReadRegister>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f023 0304 	bic.w	r3, r3, #4
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	4619      	mov	r1, r3
 8006a88:	f640 0089 	movw	r0, #2185	; 0x889
 8006a8c:	f000 feec 	bl	8007868 <SUBGRF_WriteRegister>
        break;
 8006a90:	e02d      	b.n	8006aee <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006a92:	f640 0089 	movw	r0, #2185	; 0x889
 8006a96:	f000 fefb 	bl	8007890 <SUBGRF_ReadRegister>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f043 0304 	orr.w	r3, r3, #4
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f640 0089 	movw	r0, #2185	; 0x889
 8006aa8:	f000 fede 	bl	8007868 <SUBGRF_WriteRegister>
        break;
 8006aac:	e01f      	b.n	8006aee <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <RadioSetTxGenericConfig+0x2c0>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006abe:	d902      	bls.n	8006ac6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac4:	e027      	b.n	8006b16 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006ac6:	2002      	movs	r0, #2
 8006ac8:	f7fe faae 	bl	8005028 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006acc:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	4a11      	ldr	r2, [pc, #68]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006ada:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006adc:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006ade:	2216      	movs	r2, #22
 8006ae0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ae4:	4811      	ldr	r0, [pc, #68]	; (8006b2c <RadioSetTxGenericConfig+0x32c>)
 8006ae6:	f000 fcab 	bl	8007440 <SUBGRF_SetModulationParams>
        break;
 8006aea:	e000      	b.n	8006aee <RadioSetTxGenericConfig+0x2ee>
        break;
 8006aec:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 ff84 	bl	8007a00 <SUBGRF_SetRfTxPower>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006afe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006b02:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006b04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f94a 	bl	8007da2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006b0e:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <RadioSetTxGenericConfig+0x320>)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6053      	str	r3, [r2, #4]
    return 0;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000590 	.word	0x20000590
 8006b24:	2000043c 	.word	0x2000043c
 8006b28:	200005e8 	.word	0x200005e8
 8006b2c:	200005c8 	.word	0x200005c8
 8006b30:	2000059e 	.word	0x2000059e

08006b34 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006b42:	4a1a      	ldr	r2, [pc, #104]	; (8006bac <SUBGRF_Init+0x78>)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006b48:	f7fa fcec 	bl	8001524 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f001 f823 	bl	8007b98 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <SUBGRF_Init+0x7c>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006b58:	2000      	movs	r0, #0
 8006b5a:	f000 f977 	bl	8006e4c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006b5e:	f7fa fbb7 	bl	80012d0 <RBI_IsTCXO>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d10e      	bne.n	8006b86 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006b68:	2140      	movs	r1, #64	; 0x40
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f000 fb78 	bl	8007260 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006b70:	2100      	movs	r1, #0
 8006b72:	f640 1011 	movw	r0, #2321	; 0x911
 8006b76:	f000 fe77 	bl	8007868 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006b7a:	237f      	movs	r3, #127	; 0x7f
 8006b7c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006b7e:	7b38      	ldrb	r0, [r7, #12]
 8006b80:	f000 fa85 	bl	800708e <SUBGRF_Calibrate>
 8006b84:	e009      	b.n	8006b9a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006b86:	2120      	movs	r1, #32
 8006b88:	f640 1011 	movw	r0, #2321	; 0x911
 8006b8c:	f000 fe6c 	bl	8007868 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006b90:	2120      	movs	r1, #32
 8006b92:	f640 1012 	movw	r0, #2322	; 0x912
 8006b96:	f000 fe67 	bl	8007868 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006b9a:	f7fa fb7d 	bl	8001298 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <SUBGRF_Init+0x80>)
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2000044c 	.word	0x2000044c
 8006bb0:	20000448 	.word	0x20000448
 8006bb4:	20000440 	.word	0x20000440

08006bb8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <SUBGRF_GetOperatingMode+0x10>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr
 8006bc8:	20000440 	.word	0x20000440

08006bcc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	2000      	movs	r0, #0
 8006be0:	f000 fe92 	bl	8007908 <SUBGRF_WriteBuffer>
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8006bfe:	f107 0317 	add.w	r3, r7, #23
 8006c02:	4619      	mov	r1, r3
 8006c04:	68b8      	ldr	r0, [r7, #8]
 8006c06:	f000 fdb1 	bl	800776c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	79fa      	ldrb	r2, [r7, #7]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d201      	bcs.n	8006c18 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e007      	b.n	8006c28 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006c18:	7df8      	ldrb	r0, [r7, #23]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	f000 fe87 	bl	8007934 <SUBGRF_ReadBuffer>

    return 0;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	4619      	mov	r1, r3
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff ffc2 	bl	8006bcc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f91b 	bl	8006e84 <SUBGRF_SetTx>
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006c5e:	2208      	movs	r2, #8
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006c66:	f000 fe27 	bl	80078b8 <SUBGRF_WriteRegisters>
    return 0;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006c8e:	f000 fb67 	bl	8007360 <SUBGRF_GetPacketType>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d108      	bne.n	8006caa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006ca4:	f000 fe08 	bl	80078b8 <SUBGRF_WriteRegisters>
            break;
 8006ca8:	e000      	b.n	8006cac <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006caa:	bf00      	nop
    }
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006cce:	f000 fb47 	bl	8007360 <SUBGRF_GetPacketType>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d108      	bne.n	8006cea <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	2202      	movs	r2, #2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f240 60be 	movw	r0, #1726	; 0x6be
 8006ce4:	f000 fde8 	bl	80078b8 <SUBGRF_WriteRegisters>
            break;
 8006ce8:	e000      	b.n	8006cec <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006cea:	bf00      	nop
    }
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8006d02:	f000 fb2d 	bl	8007360 <SUBGRF_GetPacketType>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d121      	bne.n	8006d50 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006d0c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006d10:	f000 fdbe 	bl	8007890 <SUBGRF_ReadRegister>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	b25b      	sxtb	r3, r3
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	b25a      	sxtb	r2, r3
 8006d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	4619      	mov	r1, r3
 8006d38:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006d3c:	f000 fd94 	bl	8007868 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8006d4a:	f000 fd8d 	bl	8007868 <SUBGRF_WriteRegister>
            break;
 8006d4e:	e000      	b.n	8006d52 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8006d50:	bf00      	nop
    }
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006d6c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006d70:	f000 fd8e 	bl	8007890 <SUBGRF_ReadRegister>
 8006d74:	4603      	mov	r3, r0
 8006d76:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	4619      	mov	r1, r3
 8006d82:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006d86:	f000 fd6f 	bl	8007868 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006d8a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006d8e:	f000 fd7f 	bl	8007890 <SUBGRF_ReadRegister>
 8006d92:	4603      	mov	r3, r0
 8006d94:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006d96:	79bb      	ldrb	r3, [r7, #6]
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006da4:	f000 fd60 	bl	8007868 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006da8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006dac:	f000 f88a 	bl	8006ec4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006db0:	463b      	mov	r3, r7
 8006db2:	2204      	movs	r2, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	f640 0019 	movw	r0, #2073	; 0x819
 8006dba:	f000 fd91 	bl	80078e0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f000 f844 	bl	8006e4c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006dcc:	f000 fd4c 	bl	8007868 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006dd0:	79bb      	ldrb	r3, [r7, #6]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006dd8:	f000 fd46 	bl	8007868 <SUBGRF_WriteRegister>

    return number;
 8006ddc:	683b      	ldr	r3, [r7, #0]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7fa fa58 	bl	80012a6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006df6:	2002      	movs	r0, #2
 8006df8:	f000 fece 	bl	8007b98 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006dfc:	793b      	ldrb	r3, [r7, #4]
 8006dfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006e08:	793b      	ldrb	r3, [r7, #4]
 8006e0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	4313      	orrs	r3, r2
 8006e16:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006e18:	793b      	ldrb	r3, [r7, #4]
 8006e1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006e22:	4313      	orrs	r3, r2
 8006e24:	b25b      	sxtb	r3, r3
 8006e26:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006e28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006e2a:	f107 030f 	add.w	r3, r7, #15
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4619      	mov	r1, r3
 8006e32:	2084      	movs	r0, #132	; 0x84
 8006e34:	f000 fd94 	bl	8007960 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <SUBGRF_SetSleep+0x60>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000440 	.word	0x20000440

08006e4c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006e56:	1dfb      	adds	r3, r7, #7
 8006e58:	2201      	movs	r2, #1
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	2080      	movs	r0, #128	; 0x80
 8006e5e:	f000 fd7f 	bl	8007960 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <SUBGRF_SetStandby+0x34>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006e6e:	e002      	b.n	8006e76 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006e70:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <SUBGRF_SetStandby+0x34>)
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000440 	.word	0x20000440

08006e84 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <SUBGRF_SetTx+0x3c>)
 8006e8e:	2204      	movs	r2, #4
 8006e90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006ea8:	f107 030c 	add.w	r3, r7, #12
 8006eac:	2203      	movs	r2, #3
 8006eae:	4619      	mov	r1, r3
 8006eb0:	2083      	movs	r0, #131	; 0x83
 8006eb2:	f000 fd55 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000440 	.word	0x20000440

08006ec4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <SUBGRF_SetRx+0x3c>)
 8006ece:	2205      	movs	r2, #5
 8006ed0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006ee8:	f107 030c 	add.w	r3, r7, #12
 8006eec:	2203      	movs	r2, #3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	2082      	movs	r0, #130	; 0x82
 8006ef2:	f000 fd35 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000440 	.word	0x20000440

08006f04 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <SUBGRF_SetRxBoosted+0x44>)
 8006f0e:	2205      	movs	r2, #5
 8006f10:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006f12:	2197      	movs	r1, #151	; 0x97
 8006f14:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006f18:	f000 fca6 	bl	8007868 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	2203      	movs	r2, #3
 8006f38:	4619      	mov	r1, r3
 8006f3a:	2082      	movs	r0, #130	; 0x82
 8006f3c:	f000 fd10 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000440 	.word	0x20000440

08006f4c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	2206      	movs	r2, #6
 8006f88:	4619      	mov	r1, r3
 8006f8a:	2094      	movs	r0, #148	; 0x94
 8006f8c:	f000 fce8 	bl	8007960 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8006f90:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <SUBGRF_SetRxDutyCycle+0x54>)
 8006f92:	2206      	movs	r2, #6
 8006f94:	701a      	strb	r2, [r3, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000440 	.word	0x20000440

08006fa4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	20c5      	movs	r0, #197	; 0xc5
 8006fae:	f000 fcd7 	bl	8007960 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006fb2:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <SUBGRF_SetCad+0x18>)
 8006fb4:	2207      	movs	r2, #7
 8006fb6:	701a      	strb	r2, [r3, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000440 	.word	0x20000440

08006fc0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	20d1      	movs	r0, #209	; 0xd1
 8006fca:	f000 fcc9 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	20d2      	movs	r0, #210	; 0xd2
 8006fdc:	f000 fcc0 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006fe0:	bf00      	nop
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006fee:	1dfb      	adds	r3, r7, #7
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	209f      	movs	r0, #159	; 0x9f
 8006ff6:	f000 fcb3 	bl	8007960 <SUBGRF_WriteCommand>
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	4603      	mov	r3, r0
 800700a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800700c:	1dfb      	adds	r3, r7, #7
 800700e:	2201      	movs	r2, #1
 8007010:	4619      	mov	r1, r3
 8007012:	20a0      	movs	r0, #160	; 0xa0
 8007014:	f000 fca4 	bl	8007960 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b3f      	cmp	r3, #63	; 0x3f
 800701c:	d91c      	bls.n	8007058 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800702c:	e005      	b.n	800703a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	3301      	adds	r3, #1
 8007038:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b1f      	cmp	r3, #31
 800703e:	d8f6      	bhi.n	800702e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	b2da      	uxtb	r2, r3
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	4413      	add	r3, r2
 800704a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800704c:	7b7b      	ldrb	r3, [r7, #13]
 800704e:	4619      	mov	r1, r3
 8007050:	f240 7006 	movw	r0, #1798	; 0x706
 8007054:	f000 fc08 	bl	8007868 <SUBGRF_WriteRegister>
    }
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8007066:	f7fa f93a 	bl	80012de <RBI_IsDCDC>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d102      	bne.n	8007076 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8007070:	2301      	movs	r3, #1
 8007072:	71fb      	strb	r3, [r7, #7]
 8007074:	e001      	b.n	800707a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8007076:	2300      	movs	r3, #0
 8007078:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800707a:	1dfb      	adds	r3, r7, #7
 800707c:	2201      	movs	r2, #1
 800707e:	4619      	mov	r1, r3
 8007080:	2096      	movs	r0, #150	; 0x96
 8007082:	f000 fc6d 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007096:	793b      	ldrb	r3, [r7, #4]
 8007098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800709c:	b2db      	uxtb	r3, r3
 800709e:	019b      	lsls	r3, r3, #6
 80070a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80070a2:	793b      	ldrb	r3, [r7, #4]
 80070a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80070b2:	793b      	ldrb	r3, [r7, #4]
 80070b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80070c2:	793b      	ldrb	r3, [r7, #4]
 80070c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	4313      	orrs	r3, r2
 80070d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80070d2:	793b      	ldrb	r3, [r7, #4]
 80070d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80070dc:	b25b      	sxtb	r3, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80070e2:	793b      	ldrb	r3, [r7, #4]
 80070e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80070f2:	793b      	ldrb	r3, [r7, #4]
 80070f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b25b      	sxtb	r3, r3
 8007100:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007102:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007104:	f107 030f 	add.w	r3, r7, #15
 8007108:	2201      	movs	r2, #1
 800710a:	4619      	mov	r1, r3
 800710c:	2089      	movs	r0, #137	; 0x89
 800710e:	f000 fc27 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <SUBGRF_CalibrateImage+0x78>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d904      	bls.n	8007136 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800712c:	23e1      	movs	r3, #225	; 0xe1
 800712e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007130:	23e9      	movs	r3, #233	; 0xe9
 8007132:	737b      	strb	r3, [r7, #13]
 8007134:	e022      	b.n	800717c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a17      	ldr	r2, [pc, #92]	; (8007198 <SUBGRF_CalibrateImage+0x7c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d904      	bls.n	8007148 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800713e:	23d7      	movs	r3, #215	; 0xd7
 8007140:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8007142:	23db      	movs	r3, #219	; 0xdb
 8007144:	737b      	strb	r3, [r7, #13]
 8007146:	e019      	b.n	800717c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a14      	ldr	r2, [pc, #80]	; (800719c <SUBGRF_CalibrateImage+0x80>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d904      	bls.n	800715a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8007150:	23c1      	movs	r3, #193	; 0xc1
 8007152:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8007154:	23c5      	movs	r3, #197	; 0xc5
 8007156:	737b      	strb	r3, [r7, #13]
 8007158:	e010      	b.n	800717c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a10      	ldr	r2, [pc, #64]	; (80071a0 <SUBGRF_CalibrateImage+0x84>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d904      	bls.n	800716c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8007162:	2375      	movs	r3, #117	; 0x75
 8007164:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8007166:	2381      	movs	r3, #129	; 0x81
 8007168:	737b      	strb	r3, [r7, #13]
 800716a:	e007      	b.n	800717c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a0d      	ldr	r2, [pc, #52]	; (80071a4 <SUBGRF_CalibrateImage+0x88>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d903      	bls.n	800717c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8007174:	236b      	movs	r3, #107	; 0x6b
 8007176:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8007178:	236f      	movs	r3, #111	; 0x6f
 800717a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	2202      	movs	r2, #2
 8007182:	4619      	mov	r1, r3
 8007184:	2098      	movs	r0, #152	; 0x98
 8007186:	f000 fbeb 	bl	8007960 <SUBGRF_WriteCommand>
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	35a4e900 	.word	0x35a4e900
 8007198:	32a9f880 	.word	0x32a9f880
 800719c:	2de54480 	.word	0x2de54480
 80071a0:	1b6b0b00 	.word	0x1b6b0b00
 80071a4:	1954fc40 	.word	0x1954fc40

080071a8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80071a8:	b590      	push	{r4, r7, lr}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	71fb      	strb	r3, [r7, #7]
 80071ba:	4603      	mov	r3, r0
 80071bc:	71bb      	strb	r3, [r7, #6]
 80071be:	460b      	mov	r3, r1
 80071c0:	717b      	strb	r3, [r7, #5]
 80071c2:	4613      	mov	r3, r2
 80071c4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80071ca:	79bb      	ldrb	r3, [r7, #6]
 80071cc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80071ce:	797b      	ldrb	r3, [r7, #5]
 80071d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80071d2:	793b      	ldrb	r3, [r7, #4]
 80071d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80071d6:	f107 030c 	add.w	r3, r7, #12
 80071da:	2204      	movs	r2, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	2095      	movs	r0, #149	; 0x95
 80071e0:	f000 fbbe 	bl	8007960 <SUBGRF_WriteCommand>
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd90      	pop	{r4, r7, pc}

080071ec <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	80fb      	strh	r3, [r7, #6]
 80071fe:	4603      	mov	r3, r0
 8007200:	80bb      	strh	r3, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	807b      	strh	r3, [r7, #2]
 8007206:	4613      	mov	r3, r2
 8007208:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	b29b      	uxth	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800721a:	88bb      	ldrh	r3, [r7, #4]
 800721c:	0a1b      	lsrs	r3, r3, #8
 800721e:	b29b      	uxth	r3, r3
 8007220:	b2db      	uxtb	r3, r3
 8007222:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007224:	88bb      	ldrh	r3, [r7, #4]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	0a1b      	lsrs	r3, r3, #8
 800722e:	b29b      	uxth	r3, r3
 8007230:	b2db      	uxtb	r3, r3
 8007232:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007234:	887b      	ldrh	r3, [r7, #2]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800723a:	883b      	ldrh	r3, [r7, #0]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	b29b      	uxth	r3, r3
 8007240:	b2db      	uxtb	r3, r3
 8007242:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007244:	883b      	ldrh	r3, [r7, #0]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800724a:	f107 0308 	add.w	r3, r7, #8
 800724e:	2208      	movs	r2, #8
 8007250:	4619      	mov	r1, r3
 8007252:	2008      	movs	r0, #8
 8007254:	f000 fb84 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	bd90      	pop	{r4, r7, pc}

08007260 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	6039      	str	r1, [r7, #0]
 800726a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	b2db      	uxtb	r3, r3
 8007274:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2db      	uxtb	r3, r3
 800727c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	b2db      	uxtb	r3, r3
 8007284:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800728c:	f107 030c 	add.w	r3, r7, #12
 8007290:	2204      	movs	r2, #4
 8007292:	4619      	mov	r1, r3
 8007294:	2097      	movs	r0, #151	; 0x97
 8007296:	f000 fb63 	bl	8007960 <SUBGRF_WriteCommand>
}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80072a4:	b5b0      	push	{r4, r5, r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80072b0:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <SUBGRF_SetRfFrequency+0x7c>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f083 0301 	eor.w	r3, r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff ff2c 	bl	800711c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80072c4:	4b16      	ldr	r3, [pc, #88]	; (8007320 <SUBGRF_SetRfFrequency+0x7c>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	09d5      	lsrs	r5, r2, #7
 80072d4:	0654      	lsls	r4, r2, #25
 80072d6:	4a13      	ldr	r2, [pc, #76]	; (8007324 <SUBGRF_SetRfFrequency+0x80>)
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 fc4a 	bl	8000b78 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	0e1b      	lsrs	r3, r3, #24
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0c1b      	lsrs	r3, r3, #16
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b2db      	uxtb	r3, r3
 8007302:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	2204      	movs	r2, #4
 8007310:	4619      	mov	r1, r3
 8007312:	2086      	movs	r0, #134	; 0x86
 8007314:	f000 fb24 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bdb0      	pop	{r4, r5, r7, pc}
 8007320:	20000448 	.word	0x20000448
 8007324:	01e84800 	.word	0x01e84800

08007328 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007332:	79fa      	ldrb	r2, [r7, #7]
 8007334:	4b09      	ldr	r3, [pc, #36]	; (800735c <SUBGRF_SetPacketType+0x34>)
 8007336:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800733e:	2100      	movs	r1, #0
 8007340:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007344:	f000 fa90 	bl	8007868 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007348:	1dfb      	adds	r3, r7, #7
 800734a:	2201      	movs	r2, #1
 800734c:	4619      	mov	r1, r3
 800734e:	208a      	movs	r0, #138	; 0x8a
 8007350:	f000 fb06 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000441 	.word	0x20000441

08007360 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
    return PacketType;
 8007364:	4b02      	ldr	r3, [pc, #8]	; (8007370 <SUBGRF_GetPacketType+0x10>)
 8007366:	781b      	ldrb	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr
 8007370:	20000441 	.word	0x20000441

08007374 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	71fb      	strb	r3, [r7, #7]
 800737e:	460b      	mov	r3, r1
 8007380:	71bb      	strb	r3, [r7, #6]
 8007382:	4613      	mov	r3, r2
 8007384:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d124      	bne.n	80073d6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800738c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007390:	2b0f      	cmp	r3, #15
 8007392:	d106      	bne.n	80073a2 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8007394:	2301      	movs	r3, #1
 8007396:	2201      	movs	r2, #1
 8007398:	2100      	movs	r1, #0
 800739a:	2006      	movs	r0, #6
 800739c:	f7ff ff04 	bl	80071a8 <SUBGRF_SetPaConfig>
 80073a0:	e005      	b.n	80073ae <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80073a2:	2301      	movs	r3, #1
 80073a4:	2201      	movs	r2, #1
 80073a6:	2100      	movs	r1, #0
 80073a8:	2004      	movs	r0, #4
 80073aa:	f7ff fefd 	bl	80071a8 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80073ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80073b2:	2b0d      	cmp	r3, #13
 80073b4:	dd02      	ble.n	80073bc <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80073b6:	230e      	movs	r3, #14
 80073b8:	71bb      	strb	r3, [r7, #6]
 80073ba:	e006      	b.n	80073ca <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80073bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80073c0:	f113 0f11 	cmn.w	r3, #17
 80073c4:	da01      	bge.n	80073ca <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80073c6:	23ef      	movs	r3, #239	; 0xef
 80073c8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80073ca:	2118      	movs	r1, #24
 80073cc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80073d0:	f000 fa4a 	bl	8007868 <SUBGRF_WriteRegister>
 80073d4:	e025      	b.n	8007422 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80073d6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80073da:	f000 fa59 	bl	8007890 <SUBGRF_ReadRegister>
 80073de:	4603      	mov	r3, r0
 80073e0:	f043 031e 	orr.w	r3, r3, #30
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80073ec:	f000 fa3c 	bl	8007868 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80073f0:	2301      	movs	r3, #1
 80073f2:	2200      	movs	r2, #0
 80073f4:	2107      	movs	r1, #7
 80073f6:	2004      	movs	r0, #4
 80073f8:	f7ff fed6 	bl	80071a8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 80073fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007400:	2b16      	cmp	r3, #22
 8007402:	dd02      	ble.n	800740a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007404:	2316      	movs	r3, #22
 8007406:	71bb      	strb	r3, [r7, #6]
 8007408:	e006      	b.n	8007418 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800740a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800740e:	f113 0f09 	cmn.w	r3, #9
 8007412:	da01      	bge.n	8007418 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007414:	23f7      	movs	r3, #247	; 0xf7
 8007416:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8007418:	2138      	movs	r1, #56	; 0x38
 800741a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800741e:	f000 fa23 	bl	8007868 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007422:	79bb      	ldrb	r3, [r7, #6]
 8007424:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8007426:	797b      	ldrb	r3, [r7, #5]
 8007428:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800742a:	f107 030c 	add.w	r3, r7, #12
 800742e:	2202      	movs	r2, #2
 8007430:	4619      	mov	r1, r3
 8007432:	208e      	movs	r0, #142	; 0x8e
 8007434:	f000 fa94 	bl	8007960 <SUBGRF_WriteCommand>
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800744c:	4a5e      	ldr	r2, [pc, #376]	; (80075c8 <SUBGRF_SetModulationParams+0x188>)
 800744e:	f107 0308 	add.w	r3, r7, #8
 8007452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007456:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	4b5b      	ldr	r3, [pc, #364]	; (80075cc <SUBGRF_SetModulationParams+0x18c>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d004      	beq.n	8007470 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff ff5c 	bl	8007328 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b03      	cmp	r3, #3
 8007476:	f200 80a2 	bhi.w	80075be <SUBGRF_SetModulationParams+0x17e>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <SUBGRF_SetModulationParams+0x40>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	08007491 	.word	0x08007491
 8007484:	0800754d 	.word	0x0800754d
 8007488:	0800750f 	.word	0x0800750f
 800748c:	0800757b 	.word	0x0800757b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007490:	2308      	movs	r3, #8
 8007492:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a4d      	ldr	r2, [pc, #308]	; (80075d0 <SUBGRF_SetModulationParams+0x190>)
 800749a:	fbb2 f3f3 	udiv	r3, r2, r3
 800749e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7b1b      	ldrb	r3, [r3, #12]
 80074ba:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7b5b      	ldrb	r3, [r3, #13]
 80074c0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	09d5      	lsrs	r5, r2, #7
 80074ce:	0654      	lsls	r4, r2, #25
 80074d0:	4a40      	ldr	r2, [pc, #256]	; (80075d4 <SUBGRF_SetModulationParams+0x194>)
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 fb4d 	bl	8000b78 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4613      	mov	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	0c1b      	lsrs	r3, r3, #16
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80074fc:	7cfb      	ldrb	r3, [r7, #19]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f107 0308 	add.w	r3, r7, #8
 8007504:	4619      	mov	r1, r3
 8007506:	208b      	movs	r0, #139	; 0x8b
 8007508:	f000 fa2a 	bl	8007960 <SUBGRF_WriteCommand>
        break;
 800750c:	e058      	b.n	80075c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800750e:	2304      	movs	r3, #4
 8007510:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <SUBGRF_SetModulationParams+0x190>)
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	b2db      	uxtb	r3, r3
 8007524:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	b2db      	uxtb	r3, r3
 800752c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7d1b      	ldrb	r3, [r3, #20]
 8007538:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800753a:	7cfb      	ldrb	r3, [r7, #19]
 800753c:	b29a      	uxth	r2, r3
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	4619      	mov	r1, r3
 8007544:	208b      	movs	r0, #139	; 0x8b
 8007546:	f000 fa0b 	bl	8007960 <SUBGRF_WriteCommand>
        break;
 800754a:	e039      	b.n	80075c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800754c:	2304      	movs	r3, #4
 800754e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	7e1b      	ldrb	r3, [r3, #24]
 8007554:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7e5b      	ldrb	r3, [r3, #25]
 800755a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7e9b      	ldrb	r3, [r3, #26]
 8007560:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7edb      	ldrb	r3, [r3, #27]
 8007566:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	b29a      	uxth	r2, r3
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	4619      	mov	r1, r3
 8007572:	208b      	movs	r0, #139	; 0x8b
 8007574:	f000 f9f4 	bl	8007960 <SUBGRF_WriteCommand>

        break;
 8007578:	e022      	b.n	80075c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800757a:	2305      	movs	r3, #5
 800757c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <SUBGRF_SetModulationParams+0x190>)
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	b2db      	uxtb	r3, r3
 8007590:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	0a1b      	lsrs	r3, r3, #8
 8007596:	b2db      	uxtb	r3, r3
 8007598:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7b1b      	ldrb	r3, [r3, #12]
 80075a4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7b5b      	ldrb	r3, [r3, #13]
 80075aa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80075ac:	7cfb      	ldrb	r3, [r7, #19]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f107 0308 	add.w	r3, r7, #8
 80075b4:	4619      	mov	r1, r3
 80075b6:	208b      	movs	r0, #139	; 0x8b
 80075b8:	f000 f9d2 	bl	8007960 <SUBGRF_WriteCommand>
        break;
 80075bc:	e000      	b.n	80075c0 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80075be:	bf00      	nop
    }
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bdb0      	pop	{r4, r5, r7, pc}
 80075c8:	0800beb0 	.word	0x0800beb0
 80075cc:	20000441 	.word	0x20000441
 80075d0:	3d090000 	.word	0x3d090000
 80075d4:	01e84800 	.word	0x01e84800

080075d8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80075e4:	4a48      	ldr	r2, [pc, #288]	; (8007708 <SUBGRF_SetPacketParams+0x130>)
 80075e6:	f107 030c 	add.w	r3, r7, #12
 80075ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80075ec:	c303      	stmia	r3!, {r0, r1}
 80075ee:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	4b45      	ldr	r3, [pc, #276]	; (800770c <SUBGRF_SetPacketParams+0x134>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d004      	beq.n	8007606 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fe91 	bl	8007328 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d878      	bhi.n	8007700 <SUBGRF_SetPacketParams+0x128>
 800760e:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <SUBGRF_SetPacketParams+0x3c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007625 	.word	0x08007625
 8007618:	080076b5 	.word	0x080076b5
 800761c:	080076a9 	.word	0x080076a9
 8007620:	08007625 	.word	0x08007625
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7a5b      	ldrb	r3, [r3, #9]
 8007628:	2bf1      	cmp	r3, #241	; 0xf1
 800762a:	d10a      	bne.n	8007642 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800762c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007630:	f7ff fb20 	bl	8006c74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007634:	f248 0005 	movw	r0, #32773	; 0x8005
 8007638:	f7ff fb3c 	bl	8006cb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800763c:	2302      	movs	r3, #2
 800763e:	75bb      	strb	r3, [r7, #22]
 8007640:	e011      	b.n	8007666 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7a5b      	ldrb	r3, [r3, #9]
 8007646:	2bf2      	cmp	r3, #242	; 0xf2
 8007648:	d10a      	bne.n	8007660 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800764a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800764e:	f7ff fb11 	bl	8006c74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007652:	f241 0021 	movw	r0, #4129	; 0x1021
 8007656:	f7ff fb2d 	bl	8006cb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800765a:	2306      	movs	r3, #6
 800765c:	75bb      	strb	r3, [r7, #22]
 800765e:	e002      	b.n	8007666 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7a5b      	ldrb	r3, [r3, #9]
 8007664:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007666:	2309      	movs	r3, #9
 8007668:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	b2db      	uxtb	r3, r3
 8007674:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	791b      	ldrb	r3, [r3, #4]
 8007682:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	795b      	ldrb	r3, [r3, #5]
 8007688:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	799b      	ldrb	r3, [r3, #6]
 800768e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	79db      	ldrb	r3, [r3, #7]
 8007694:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7a1b      	ldrb	r3, [r3, #8]
 800769a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800769c:	7dbb      	ldrb	r3, [r7, #22]
 800769e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7a9b      	ldrb	r3, [r3, #10]
 80076a4:	753b      	strb	r3, [r7, #20]
        break;
 80076a6:	e022      	b.n	80076ee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7b1b      	ldrb	r3, [r3, #12]
 80076b0:	733b      	strb	r3, [r7, #12]
        break;
 80076b2:	e01c      	b.n	80076ee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80076b4:	2306      	movs	r3, #6
 80076b6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	89db      	ldrh	r3, [r3, #14]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	b29b      	uxth	r3, r3
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	89db      	ldrh	r3, [r3, #14]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7c1a      	ldrb	r2, [r3, #16]
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <SUBGRF_SetPacketParams+0x138>)
 80076d2:	4611      	mov	r1, r2
 80076d4:	7019      	strb	r1, [r3, #0]
 80076d6:	4613      	mov	r3, r2
 80076d8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c5b      	ldrb	r3, [r3, #17]
 80076de:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	7c9b      	ldrb	r3, [r3, #18]
 80076e4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7cdb      	ldrb	r3, [r3, #19]
 80076ea:	747b      	strb	r3, [r7, #17]
        break;
 80076ec:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f107 030c 	add.w	r3, r7, #12
 80076f6:	4619      	mov	r1, r3
 80076f8:	208c      	movs	r0, #140	; 0x8c
 80076fa:	f000 f931 	bl	8007960 <SUBGRF_WriteCommand>
 80076fe:	e000      	b.n	8007702 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007700:	bf00      	nop
}
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	0800beb8 	.word	0x0800beb8
 800770c:	20000441 	.word	0x20000441
 8007710:	20000442 	.word	0x20000442

08007714 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	460a      	mov	r2, r1
 800771e:	71fb      	strb	r3, [r7, #7]
 8007720:	4613      	mov	r3, r2
 8007722:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007728:	79bb      	ldrb	r3, [r7, #6]
 800772a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	2202      	movs	r2, #2
 8007732:	4619      	mov	r1, r3
 8007734:	208f      	movs	r0, #143	; 0x8f
 8007736:	f000 f913 	bl	8007960 <SUBGRF_WriteCommand>
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800774c:	1d3b      	adds	r3, r7, #4
 800774e:	2201      	movs	r2, #1
 8007750:	4619      	mov	r1, r3
 8007752:	2015      	movs	r0, #21
 8007754:	f000 f918 	bl	8007988 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007758:	793b      	ldrb	r3, [r7, #4]
 800775a:	425b      	negs	r3, r3
 800775c:	105b      	asrs	r3, r3, #1
 800775e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007760:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007776:	f107 030c 	add.w	r3, r7, #12
 800777a:	2202      	movs	r2, #2
 800777c:	4619      	mov	r1, r3
 800777e:	2013      	movs	r0, #19
 8007780:	f000 f902 	bl	8007988 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007784:	f7ff fdec 	bl	8007360 <SUBGRF_GetPacketType>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10d      	bne.n	80077aa <SUBGRF_GetRxBufferStatus+0x3e>
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <SUBGRF_GetRxBufferStatus+0x54>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d108      	bne.n	80077aa <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007798:	f240 7002 	movw	r0, #1794	; 0x702
 800779c:	f000 f878 	bl	8007890 <SUBGRF_ReadRegister>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	e002      	b.n	80077b0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80077aa:	7b3a      	ldrb	r2, [r7, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80077b0:	7b7a      	ldrb	r2, [r7, #13]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	701a      	strb	r2, [r3, #0]
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000442 	.word	0x20000442

080077c4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	2203      	movs	r2, #3
 80077d2:	4619      	mov	r1, r3
 80077d4:	2014      	movs	r0, #20
 80077d6:	f000 f8d7 	bl	8007988 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80077da:	f7ff fdc1 	bl	8007360 <SUBGRF_GetPacketType>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <SUBGRF_GetPacketStatus+0x30>
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d013      	beq.n	800781a <SUBGRF_GetPacketStatus+0x56>
 80077f2:	e02a      	b.n	800784a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80077f4:	7b3a      	ldrb	r2, [r7, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80077fa:	7b7b      	ldrb	r3, [r7, #13]
 80077fc:	425b      	negs	r3, r3
 80077fe:	105b      	asrs	r3, r3, #1
 8007800:	b25a      	sxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	425b      	negs	r3, r3
 800780a:	105b      	asrs	r3, r3, #1
 800780c:	b25a      	sxtb	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	609a      	str	r2, [r3, #8]
            break;
 8007818:	e020      	b.n	800785c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800781a:	7b3b      	ldrb	r3, [r7, #12]
 800781c:	425b      	negs	r3, r3
 800781e:	105b      	asrs	r3, r3, #1
 8007820:	b25a      	sxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007826:	7b7b      	ldrb	r3, [r7, #13]
 8007828:	b25b      	sxtb	r3, r3
 800782a:	3302      	adds	r3, #2
 800782c:	109b      	asrs	r3, r3, #2
 800782e:	b25a      	sxtb	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	425b      	negs	r3, r3
 8007838:	105b      	asrs	r3, r3, #1
 800783a:	b25a      	sxtb	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007840:	4b08      	ldr	r3, [pc, #32]	; (8007864 <SUBGRF_GetPacketStatus+0xa0>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	611a      	str	r2, [r3, #16]
            break;
 8007848:	e008      	b.n	800785c <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800784a:	2214      	movs	r2, #20
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fa18 	bl	8008c84 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	220f      	movs	r2, #15
 8007858:	701a      	strb	r2, [r3, #0]
            break;
 800785a:	bf00      	nop
    }
}
 800785c:	bf00      	nop
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000444 	.word	0x20000444

08007868 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	460a      	mov	r2, r1
 8007872:	80fb      	strh	r3, [r7, #6]
 8007874:	4613      	mov	r3, r2
 8007876:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007878:	1d7a      	adds	r2, r7, #5
 800787a:	88f9      	ldrh	r1, [r7, #6]
 800787c:	2301      	movs	r3, #1
 800787e:	4803      	ldr	r0, [pc, #12]	; (800788c <SUBGRF_WriteRegister+0x24>)
 8007880:	f7fc f8ea 	bl	8003a58 <HAL_SUBGHZ_WriteRegisters>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	2000050c 	.word	0x2000050c

08007890 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800789a:	f107 020f 	add.w	r2, r7, #15
 800789e:	88f9      	ldrh	r1, [r7, #6]
 80078a0:	2301      	movs	r3, #1
 80078a2:	4804      	ldr	r0, [pc, #16]	; (80078b4 <SUBGRF_ReadRegister+0x24>)
 80078a4:	f7fc f937 	bl	8003b16 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	2000050c 	.word	0x2000050c

080078b8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	80fb      	strh	r3, [r7, #6]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80078c8:	88bb      	ldrh	r3, [r7, #4]
 80078ca:	88f9      	ldrh	r1, [r7, #6]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	4803      	ldr	r0, [pc, #12]	; (80078dc <SUBGRF_WriteRegisters+0x24>)
 80078d0:	f7fc f8c2 	bl	8003a58 <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	2000050c 	.word	0x2000050c

080078e0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	6039      	str	r1, [r7, #0]
 80078ea:	80fb      	strh	r3, [r7, #6]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80078f0:	88bb      	ldrh	r3, [r7, #4]
 80078f2:	88f9      	ldrh	r1, [r7, #6]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	4803      	ldr	r0, [pc, #12]	; (8007904 <SUBGRF_ReadRegisters+0x24>)
 80078f8:	f7fc f90d 	bl	8003b16 <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	2000050c 	.word	0x2000050c

08007908 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
 8007914:	4613      	mov	r3, r2
 8007916:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007918:	79bb      	ldrb	r3, [r7, #6]
 800791a:	b29b      	uxth	r3, r3
 800791c:	79f9      	ldrb	r1, [r7, #7]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	4803      	ldr	r0, [pc, #12]	; (8007930 <SUBGRF_WriteBuffer+0x28>)
 8007922:	f7fc fa0c 	bl	8003d3e <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	2000050c 	.word	0x2000050c

08007934 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
 8007940:	4613      	mov	r3, r2
 8007942:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007944:	79bb      	ldrb	r3, [r7, #6]
 8007946:	b29b      	uxth	r3, r3
 8007948:	79f9      	ldrb	r1, [r7, #7]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4803      	ldr	r0, [pc, #12]	; (800795c <SUBGRF_ReadBuffer+0x28>)
 800794e:	f7fc fa49 	bl	8003de4 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	2000050c 	.word	0x2000050c

08007960 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	6039      	str	r1, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
 800796c:	4613      	mov	r3, r2
 800796e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007970:	88bb      	ldrh	r3, [r7, #4]
 8007972:	79f9      	ldrb	r1, [r7, #7]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	4803      	ldr	r0, [pc, #12]	; (8007984 <SUBGRF_WriteCommand+0x24>)
 8007978:	f7fc f92e 	bl	8003bd8 <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	2000050c 	.word	0x2000050c

08007988 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	4613      	mov	r3, r2
 8007996:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007998:	88bb      	ldrh	r3, [r7, #4]
 800799a:	79f9      	ldrb	r1, [r7, #7]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	4803      	ldr	r0, [pc, #12]	; (80079ac <SUBGRF_ReadCommand+0x24>)
 80079a0:	f7fc f979 	bl	8003c96 <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000050c 	.word	0x2000050c

080079b0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	460a      	mov	r2, r1
 80079ba:	71fb      	strb	r3, [r7, #7]
 80079bc:	4613      	mov	r3, r2
 80079be:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80079c4:	79bb      	ldrb	r3, [r7, #6]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10d      	bne.n	80079e6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d104      	bne.n	80079da <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80079d0:	2302      	movs	r3, #2
 80079d2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80079d4:	2004      	movs	r0, #4
 80079d6:	f000 f8df 	bl	8007b98 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d107      	bne.n	80079f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80079e0:	2303      	movs	r3, #3
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e004      	b.n	80079f0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80079e6:	79bb      	ldrb	r3, [r7, #6]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f9 fc57 	bl	80012a6 <RBI_ConfigRFSwitch>
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007a0e:	f7f9 fc58 	bl	80012c2 <RBI_GetTxConfig>
 8007a12:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d016      	beq.n	8007a48 <SUBGRF_SetRfTxPower+0x48>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	dc16      	bgt.n	8007a4e <SUBGRF_SetRfTxPower+0x4e>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <SUBGRF_SetRfTxPower+0x2e>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d00a      	beq.n	8007a42 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007a2c:	e00f      	b.n	8007a4e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	dd02      	ble.n	8007a3c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007a36:	2302      	movs	r3, #2
 8007a38:	73fb      	strb	r3, [r7, #15]
            break;
 8007a3a:	e009      	b.n	8007a50 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
            break;
 8007a40:	e006      	b.n	8007a50 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73fb      	strb	r3, [r7, #15]
            break;
 8007a46:	e003      	b.n	8007a50 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	73fb      	strb	r3, [r7, #15]
            break;
 8007a4c:	e000      	b.n	8007a50 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007a4e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007a50:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2202      	movs	r2, #2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fc8b 	bl	8007374 <SUBGRF_SetTxParams>

    return paSelect;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007a6c:	2301      	movs	r3, #1
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr
	...

08007a78 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007a80:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2001      	movs	r0, #1
 8007a86:	4798      	blx	r3
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	2000044c 	.word	0x2000044c

08007a94 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007a9c:	4b03      	ldr	r3, [pc, #12]	; (8007aac <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2002      	movs	r0, #2
 8007aa2:	4798      	blx	r3
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	2000044c 	.word	0x2000044c

08007ab0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007ab8:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2040      	movs	r0, #64	; 0x40
 8007abe:	4798      	blx	r3
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	2000044c 	.word	0x2000044c

08007acc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d005      	beq.n	8007aee <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007ae2:	e00a      	b.n	8007afa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007ae4:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2080      	movs	r0, #128	; 0x80
 8007aea:	4798      	blx	r3
            break;
 8007aec:	e005      	b.n	8007afa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007af6:	4798      	blx	r3
            break;
 8007af8:	bf00      	nop
    }
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000044c 	.word	0x2000044c

08007b08 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b18:	4798      	blx	r3
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	2000044c 	.word	0x2000044c

08007b28 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2020      	movs	r0, #32
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000044c 	.word	0x2000044c

08007b44 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007b4c:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2004      	movs	r0, #4
 8007b52:	4798      	blx	r3
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2000044c 	.word	0x2000044c

08007b60 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007b68:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2008      	movs	r0, #8
 8007b6e:	4798      	blx	r3
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	2000044c 	.word	0x2000044c

08007b7c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2010      	movs	r0, #16
 8007b8a:	4798      	blx	r3
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	2000044c 	.word	0x2000044c

08007b98 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007ba2:	f7f9 fb9c 	bl	80012de <RBI_IsDCDC>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d112      	bne.n	8007bd2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007bac:	f640 1023 	movw	r0, #2339	; 0x923
 8007bb0:	f7ff fe6e 	bl	8007890 <SUBGRF_ReadRegister>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	f023 0306 	bic.w	r3, r3, #6
 8007bbe:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f640 1023 	movw	r0, #2339	; 0x923
 8007bce:	f7ff fe4b 	bl	8007868 <SUBGRF_WriteRegister>
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007bea:	231f      	movs	r3, #31
 8007bec:	e016      	b.n	8007c1c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
 8007bf2:	e00f      	b.n	8007c14 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007bf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d205      	bcs.n	8007c0e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	e006      	b.n	8007c1c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	3301      	adds	r3, #1
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b15      	cmp	r3, #21
 8007c18:	d9ec      	bls.n	8007bf4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8007c1a:	e7fe      	b.n	8007c1a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	0800c2b4 	.word	0x0800c2b4

08007c2c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007c36:	4b36      	ldr	r3, [pc, #216]	; (8007d10 <SUBGRF_GetCFO+0xe4>)
 8007c38:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8007c3a:	f640 0007 	movw	r0, #2055	; 0x807
 8007c3e:	f7ff fe27 	bl	8007890 <SUBGRF_ReadRegister>
 8007c42:	4603      	mov	r3, r0
 8007c44:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007c46:	7ffb      	ldrb	r3, [r7, #31]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c54:	4413      	add	r3, r2
 8007c56:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007c5a:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007c5c:	7ffb      	ldrb	r3, [r7, #31]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007c64:	7fba      	ldrb	r2, [r7, #30]
 8007c66:	7f7b      	ldrb	r3, [r7, #29]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4b28      	ldr	r3, [pc, #160]	; (8007d14 <SUBGRF_GetCFO+0xe8>)
 8007c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	2b07      	cmp	r3, #7
 8007c94:	d802      	bhi.n	8007c9c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007c96:	2302      	movs	r3, #2
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d802      	bhi.n	8007cb0 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007caa:	2304      	movs	r3, #4
 8007cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007cb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007cbc:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007cc0:	f7ff fde6 	bl	8007890 <SUBGRF_ReadRegister>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ccc:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8007cce:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007cd2:	f7ff fddd 	bl	8007890 <SUBGRF_ReadRegister>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8007cf0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007cf4:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	095b      	lsrs	r3, r3, #5
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	11da      	asrs	r2, r3, #7
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	601a      	str	r2, [r3, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3728      	adds	r7, #40	; 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	0c0a0804 	.word	0x0c0a0804
 8007d14:	01e84800 	.word	0x01e84800

08007d18 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8007d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007d30:	697b      	ldr	r3, [r7, #20]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8007d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d52:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007d54:	697b      	ldr	r3, [r7, #20]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8007d6c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <RFW_DeInit>:

void RFW_DeInit( void)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8007d7e:	bf00      	nop
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8007d86:	b480      	push	{r7}
 8007d88:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8007d8a:	2300      	movs	r3, #0
#endif
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8007d98:	2300      	movs	r3, #0
#endif
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr

08007db6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b087      	sub	sp, #28
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8007de6:	b480      	push	{r7}
 8007de8:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8007dea:	bf00      	nop
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	4603      	mov	r3, r0
 8007e06:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
	...

08007e14 <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8007e1e:	2010      	movs	r0, #16
 8007e20:	f000 ff04 	bl	8008c2c <malloc>
 8007e24:	4603      	mov	r3, r0
 8007e26:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <list_new+0x24>
		perror("list_new()");
 8007e2e:	4818      	ldr	r0, [pc, #96]	; (8007e90 <list_new+0x7c>)
 8007e30:	f001 fcce 	bl	80097d0 <perror>
		return NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e027      	b.n	8007e88 <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 8007e38:	2100      	movs	r1, #0
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f000 f958 	bl	80080f0 <list_node_new>
 8007e40:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <list_new+0x3e>
		free(l);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fef7 	bl	8008c3c <free>
		return NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e01a      	b.n	8007e88 <list_new+0x74>
	}

	l->sentinel = sentinel;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	601a      	str	r2, [r3, #0]
	l->size = 0;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2201      	movs	r2, #1
 8007e62:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <list_new+0x66>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	e000      	b.n	8007e7c <list_new+0x68>
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <list_new+0x80>)
	l->compare = (compare == NULL)
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	60da      	str	r2, [r3, #12]

	return l;
 8007e86:	68fb      	ldr	r3, [r7, #12]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	0800bec4 	.word	0x0800bec4
 8007e94:	080080c9 	.word	0x080080c9

08007e98 <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 8007eaa:	480e      	ldr	r0, [pc, #56]	; (8007ee4 <list_insert+0x4c>)
 8007eac:	f000 f99b 	bl	80081e6 <list_debug>
		return NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e012      	b.n	8007eda <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f89c 	bl	8007ff4 <list_index>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f945 	bl	8008150 <list_node_link>
 8007ec6:	6078      	str	r0, [r7, #4]
	if (n)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <list_insert+0x40>
		++self->size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
	return n;
 8007ed8:	687b      	ldr	r3, [r7, #4]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	0800bed0 	.word	0x0800bed0

08007ee8 <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f856 	bl	8007fa4 <list_head>
 8007ef8:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 8007efa:	e00e      	b.n	8007f1a <list_search+0x32>
		
		if (self->compare(data, n->data))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	68d2      	ldr	r2, [r2, #12]
 8007f04:	4611      	mov	r1, r2
 8007f06:	6838      	ldr	r0, [r7, #0]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <list_search+0x2c>
			return n;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	e00c      	b.n	8007f2e <list_search+0x46>
		n = n->next;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f8c0 	bl	80080a0 <list_end>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f083 0301 	eor.w	r3, r3, #1
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e7      	bne.n	8007efc <list_search+0x14>
	}
	return NULL;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 8007f48:	480b      	ldr	r0, [pc, #44]	; (8007f78 <list_remove+0x40>)
 8007f4a:	f001 fc49 	bl	80097e0 <iprintf>
		return ;
 8007f4e:	e010      	b.n	8007f72 <list_remove+0x3a>
	}

	if(node == NULL)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00c      	beq.n	8007f70 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 8007f56:	6838      	ldr	r0, [r7, #0]
 8007f58:	f000 f928 	bl	80081ac <list_node_unlink>
 8007f5c:	60f8      	str	r0, [r7, #12]
	if (n)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <list_remove+0x3a>
	{
		--self->size;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	e000      	b.n	8007f72 <list_remove+0x3a>
		return ;
 8007f70:	bf00      	nop
	
	}

}
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	0800bef0 	.word	0x0800bef0

08007f7c <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f876 	bl	8008078 <list_size>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff ff80 	bl	8007e98 <list_insert>
 8007f98:	4603      	mov	r3, r0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <list_head+0x18>
		list_debug("list_head(): self was NULL");
 8007fb2:	480e      	ldr	r0, [pc, #56]	; (8007fec <list_head+0x48>)
 8007fb4:	f000 f917 	bl	80081e6 <list_debug>
		return NULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e012      	b.n	8007fe2 <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 f86d 	bl	80080a0 <list_end>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f083 0301 	eor.w	r3, r3, #1
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 8007fd2:	4807      	ldr	r0, [pc, #28]	; (8007ff0 <list_head+0x4c>)
 8007fd4:	f000 f907 	bl	80081e6 <list_debug>
		return NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e002      	b.n	8007fe2 <list_head+0x3e>
	}

	return self->sentinel->next;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	0800bf10 	.word	0x0800bf10
 8007ff0:	0800bf2c 	.word	0x0800bf2c

08007ff4 <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f83a 	bl	8008078 <list_size>
 8008004:	4603      	mov	r3, r0
 8008006:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	da03      	bge.n	8008016 <list_index+0x22>
		pos += s;
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4413      	add	r3, r2
 8008014:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	0fda      	lsrs	r2, r3, #31
 800801e:	4413      	add	r3, r2
 8008020:	105b      	asrs	r3, r3, #1
 8008022:	461a      	mov	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	4293      	cmp	r3, r2
 8008028:	dc11      	bgt.n	800804e <list_index+0x5a>
		n = list_head(self);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ffba 	bl	8007fa4 <list_head>
 8008030:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008032:	2300      	movs	r3, #0
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	e005      	b.n	8008044 <list_index+0x50>
			n = n->next;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3301      	adds	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	dbf5      	blt.n	8008038 <list_index+0x44>
 800804c:	e00f      	b.n	800806e <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e005      	b.n	8008066 <list_index+0x72>
			n = n->prev;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3b01      	subs	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	dcf5      	bgt.n	800805a <list_index+0x66>
	}

	return n;
 800806e:	697b      	ldr	r3, [r7, #20]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d104      	bne.n	8008090 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 8008086:	4805      	ldr	r0, [pc, #20]	; (800809c <list_size+0x24>)
 8008088:	f000 f8ad 	bl	80081e6 <list_debug>
		return 0;
 800808c:	2300      	movs	r3, #0
 800808e:	e001      	b.n	8008094 <list_size+0x1c>
	}

	return self->size;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	0800bf90 	.word	0x0800bf90

080080a0 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <list_end+0x18>
		list_debug("list_end(): n was NULL");
 80080ae:	4805      	ldr	r0, [pc, #20]	; (80080c4 <list_end+0x24>)
 80080b0:	f000 f899 	bl	80081e6 <list_debug>
		return false;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e001      	b.n	80080bc <list_end+0x1c>
	}

	return n->sentinel;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7a1b      	ldrb	r3, [r3, #8]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	0800bfac 	.word	0x0800bfac

080080c8 <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7f8 f853 	bl	8000180 <strcmp>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf0c      	ite	eq
 80080e0:	2301      	moveq	r3, #1
 80080e2:	2300      	movne	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 80080fa:	2010      	movs	r0, #16
 80080fc:	f000 fd96 	bl	8008c2c <malloc>
 8008100:	4603      	mov	r3, r0
 8008102:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <list_node_new+0x24>
		perror("list_node_new()");
 800810a:	4810      	ldr	r0, [pc, #64]	; (800814c <list_node_new+0x5c>)
 800810c:	f001 fb60 	bl	80097d0 <perror>
		return NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	e017      	b.n	8008144 <list_node_new+0x54>
	}

	n->sentinel = false;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f000 fd80 	bl	8008c2c <malloc>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fd93 	bl	8008c68 <memcpy>
	return n;
 8008142:	68fb      	ldr	r3, [r7, #12]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	0800c038 	.word	0x0800c038

08008150 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d104      	bne.n	800816a <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 8008160:	4810      	ldr	r0, [pc, #64]	; (80081a4 <list_node_link+0x54>)
 8008162:	f000 f840 	bl	80081e6 <list_debug>
		return NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	e017      	b.n	800819a <list_node_link+0x4a>
	}

	if (c == NULL) {
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 8008170:	480d      	ldr	r0, [pc, #52]	; (80081a8 <list_node_link+0x58>)
 8008172:	f000 f838 	bl	80081e6 <list_debug>
		return NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	e00f      	b.n	800819a <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]

	a->next = b;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
	b->prev = a;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	605a      	str	r2, [r3, #4]
	b->next = c;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	601a      	str	r2, [r3, #0]
	c->prev = b;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]

	return b;
 8008198:	687b      	ldr	r3, [r7, #4]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	0800c048 	.word	0x0800c048
 80081a8:	0800c068 	.word	0x0800c068

080081ac <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ff73 	bl	80080a0 <list_end>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <list_node_unlink+0x18>
		return NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e00c      	b.n	80081de <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60bb      	str	r3, [r7, #8]

	a->next = c;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	601a      	str	r2, [r3, #0]
	c->prev = a;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	605a      	str	r2, [r3, #4]

	return b;
 80081dc:	687b      	ldr	r3, [r7, #4]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <list_debug>:

static void list_debug(const char *format, ...)
{
 80081e6:	b40f      	push	{r0, r1, r2, r3}
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	461a      	mov	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4293      	cmp	r3, r2
 8008214:	d101      	bne.n	800821a <find_packet_by_Id+0x22>
    {
        return true ;
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 800821a:	2300      	movs	r3, #0
    }
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	461a      	mov	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4293      	cmp	r3, r2
 8008242:	d101      	bne.n	8008248 <rx_find_by_id+0x22>
	{
		return true ;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <rx_find_by_id+0x24>
	}
	else{
		return false ;
 8008248:	2300      	movs	r3, #0
	}
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 800825e:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <ll_init+0x40>)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 8008264:	490c      	ldr	r1, [pc, #48]	; (8008298 <ll_init+0x44>)
 8008266:	480d      	ldr	r0, [pc, #52]	; (800829c <ll_init+0x48>)
 8008268:	f7ff fdd4 	bl	8007e14 <list_new>
 800826c:	4603      	mov	r3, r0
 800826e:	4a0c      	ldr	r2, [pc, #48]	; (80082a0 <ll_init+0x4c>)
 8008270:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 8008272:	4909      	ldr	r1, [pc, #36]	; (8008298 <ll_init+0x44>)
 8008274:	480b      	ldr	r0, [pc, #44]	; (80082a4 <ll_init+0x50>)
 8008276:	f7ff fdcd 	bl	8007e14 <list_new>
 800827a:	4603      	mov	r3, r0
 800827c:	4a0a      	ldr	r2, [pc, #40]	; (80082a8 <ll_init+0x54>)
 800827e:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <ll_init+0x58>)
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008288:	4798      	blx	r3

	return 0 ;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000000a 	.word	0x2000000a
 8008298:	08008c3d 	.word	0x08008c3d
 800829c:	080081f9 	.word	0x080081f9
 80082a0:	200005f0 	.word	0x200005f0
 80082a4:	08008227 	.word	0x08008227
 80082a8:	200005ec 	.word	0x200005ec
 80082ac:	0800c22c 	.word	0x0800c22c

080082b0 <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len)
{
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b091      	sub	sp, #68	; 0x44
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	4603      	mov	r3, r0
 80082ba:	71fb      	strb	r3, [r7, #7]
 80082bc:	460b      	mov	r3, r1
 80082be:	71bb      	strb	r3, [r7, #6]
 80082c0:	4613      	mov	r3, r2
 80082c2:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <ll_send_packet+0x80>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fed5 	bl	8008078 <list_size>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d902      	bls.n	80082da <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 80082d4:	f06f 0309 	mvn.w	r3, #9
 80082d8:	e026      	b.n	8008328 <ll_send_packet+0x78>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 80082da:	4b16      	ldr	r3, [pc, #88]	; (8008334 <ll_send_packet+0x84>)
 80082dc:	7819      	ldrb	r1, [r3, #0]
 80082de:	79bc      	ldrb	r4, [r7, #6]
 80082e0:	79fa      	ldrb	r2, [r7, #7]
 80082e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	797b      	ldrb	r3, [r7, #5]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4623      	mov	r3, r4
 80082f6:	f000 fadd 	bl	80088b4 <packet>
	
	tmp_holder.packet = tmp ;
 80082fa:	f107 030c 	add.w	r3, r7, #12
 80082fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008302:	ca07      	ldmia	r2, {r0, r1, r2}
 8008304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008308:	2300      	movs	r3, #0
 800830a:	623b      	str	r3, [r7, #32]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 800830c:	4b08      	ldr	r3, [pc, #32]	; (8008330 <ll_send_packet+0x80>)
 800830e:	681c      	ldr	r4, [r3, #0]
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	2118      	movs	r1, #24
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff feea 	bl	80080f0 <list_node_new>
 800831c:	4603      	mov	r3, r0
 800831e:	4619      	mov	r1, r3
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff fe2b 	bl	8007f7c <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3734      	adds	r7, #52	; 0x34
 800832c:	46bd      	mov	sp, r7
 800832e:	bd90      	pop	{r4, r7, pc}
 8008330:	200005f0 	.word	0x200005f0
 8008334:	2000000a 	.word	0x2000000a

08008338 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af02      	add	r7, sp, #8
 800833e:	4603      	mov	r3, r0
 8008340:	460a      	mov	r2, r1
 8008342:	71fb      	strb	r3, [r7, #7]
 8008344:	4613      	mov	r3, r2
 8008346:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0);
 8008348:	79ba      	ldrb	r2, [r7, #6]
 800834a:	79f8      	ldrb	r0, [r7, #7]
 800834c:	2300      	movs	r3, #0
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	2300      	movs	r3, #0
 8008352:	2102      	movs	r1, #2
 8008354:	f7ff ffac 	bl	80082b0 <ll_send_packet>
 8008358:	4603      	mov	r3, r0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af02      	add	r7, sp, #8
 8008368:	4603      	mov	r3, r0
 800836a:	460a      	mov	r2, r1
 800836c:	71fb      	strb	r3, [r7, #7]
 800836e:	4613      	mov	r3, r2
 8008370:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0);
 8008372:	79ba      	ldrb	r2, [r7, #6]
 8008374:	79f8      	ldrb	r0, [r7, #7]
 8008376:	2300      	movs	r3, #0
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	2103      	movs	r1, #3
 800837e:	f7ff ff97 	bl	80082b0 <ll_send_packet>
 8008382:	4603      	mov	r3, r0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len) 
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af02      	add	r7, sp, #8
 8008392:	4603      	mov	r3, r0
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 800839a:	f7f8 fe1d 	bl	8000fd8 <sys_random>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	7dfa      	ldrb	r2, [r7, #23]
 80083a8:	7bf8      	ldrb	r0, [r7, #15]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2101      	movs	r1, #1
 80083b0:	f7ff ff7e 	bl	80082b0 <ll_send_packet>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <ll_transmit>:
{
	return list_size(Tx_packet_list)  ;
}

void ll_transmit(void) 
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 80083c6:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <ll_transmit+0x13c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fe54 	bl	8008078 <list_size>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 808d 	beq.w	80084f2 <ll_transmit+0x132>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 80083d8:	e073      	b.n	80084c2 <ll_transmit+0x102>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 80083da:	4b48      	ldr	r3, [pc, #288]	; (80084fc <ll_transmit+0x13c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a48      	ldr	r2, [pc, #288]	; (8008500 <ll_transmit+0x140>)
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fe05 	bl	8007ff4 <list_index>
 80083ea:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fbe1 	bl	8008bbe <packet_get_size>
 80083fc:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fc13 	bl	8008c2c <malloc>
 8008406:	4603      	mov	r3, r0
 8008408:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 fada 	bl	80089c6 <packet_serialize>

		//send to network
		if(buff != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01c      	beq.n	8008452 <ll_transmit+0x92>
		{
			network_transmit_index++;
 8008418:	4b39      	ldr	r3, [pc, #228]	; (8008500 <ll_transmit+0x140>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	4a38      	ldr	r2, [pc, #224]	; (8008500 <ll_transmit+0x140>)
 8008420:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	615a      	str	r2, [r3, #20]
			Radio.Send(buff , packet_size) ;
 800842c:	4b35      	ldr	r3, [pc, #212]	; (8008504 <ll_transmit+0x144>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	4611      	mov	r1, r2
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
			//wait for the transmition to complete
			while(tarnsmition_done == false);
 800843a:	bf00      	nop
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <ll_transmit+0x148>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f083 0301 	eor.w	r3, r3, #1
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f8      	bne.n	800843c <ll_transmit+0x7c>
			//break ;
			free(buff) ;
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fbf6 	bl	8008c3c <free>
 8008450:	e005      	b.n	800845e <ll_transmit+0x9e>
		}
		else if(buff == NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <ll_transmit+0x9e>
		{
			printf("\npacket_serialize FAILED\n");
 8008458:	482c      	ldr	r0, [pc, #176]	; (800850c <ll_transmit+0x14c>)
 800845a:	f001 fa47 	bl	80098ec <puts>
		}

		

		tarnsmition_done = false ;
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <ll_transmit+0x148>)
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d10e      	bne.n	800848a <ll_transmit+0xca>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 800846c:	4b23      	ldr	r3, [pc, #140]	; (80084fc <ll_transmit+0x13c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6979      	ldr	r1, [r7, #20]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fd60 	bl	8007f38 <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fbdf 	bl	8008c3c <free>
			free(holder);
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f000 fbdc 	bl	8008c3c <free>
			free(node) ;
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	f000 fbd9 	bl	8008c3c <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	2b04      	cmp	r3, #4
 8008490:	dd17      	ble.n	80084c2 <ll_transmit+0x102>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 8008492:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <ll_transmit+0x13c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fd4d 	bl	8007f38 <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d104      	bne.n	80084b0 <ll_transmit+0xf0>
			{
				free(pack->payload) ;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fbc6 	bl	8008c3c <free>
			}

			free(pack) ;
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fbc3 	bl	8008c3c <free>
			free(holder);
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f000 fbc0 	bl	8008c3c <free>
			free(node);
 80084bc:	6978      	ldr	r0, [r7, #20]
 80084be:	f000 fbbd 	bl	8008c3c <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 80084c2:	4b0e      	ldr	r3, [pc, #56]	; (80084fc <ll_transmit+0x13c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fdd6 	bl	8008078 <list_size>
 80084cc:	4602      	mov	r2, r0
 80084ce:	4b0c      	ldr	r3, [pc, #48]	; (8008500 <ll_transmit+0x140>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d881      	bhi.n	80083da <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <ll_transmit+0x13c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fdcc 	bl	8008078 <list_size>
 80084e0:	4602      	mov	r2, r0
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <ll_transmit+0x140>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d804      	bhi.n	80084f4 <ll_transmit+0x134>
	{
		network_transmit_index = 0 ;	
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <ll_transmit+0x140>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	e000      	b.n	80084f4 <ll_transmit+0x134>
		return ;
 80084f2:	bf00      	nop
	}
}
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200005f0 	.word	0x200005f0
 8008500:	20000450 	.word	0x20000450
 8008504:	0800c22c 	.word	0x0800c22c
 8008508:	2000045c 	.word	0x2000045c
 800850c:	0800c088 	.word	0x0800c088

08008510 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b08f      	sub	sp, #60	; 0x3c
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 800851a:	f107 0320 	add.w	r3, r7, #32
 800851e:	461a      	mov	r2, r3
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 faac 	bl	8008a80 <packet_desirialize>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d152      	bne.n	80085d4 <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 800852e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <ll_receive+0xdc>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d14f      	bne.n	80085da <ll_receive+0xca>
 800853a:	4b2d      	ldr	r3, [pc, #180]	; (80085f0 <ll_receive+0xe0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fd9a 	bl	8008078 <list_size>
 8008544:	4603      	mov	r3, r0
 8008546:	2b09      	cmp	r3, #9
 8008548:	d847      	bhi.n	80085da <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 800854a:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <ll_receive+0xe0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fd92 	bl	8008078 <list_size>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d021      	beq.n	800859e <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 800855a:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <ll_receive+0xe0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff fcbf 	bl	8007ee8 <list_search>
 800856a:	6378      	str	r0, [r7, #52]	; 0x34
				if(n != NULL )
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	2b00      	cmp	r3, #0
 8008570:	d015      	beq.n	800859e <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	633b      	str	r3, [r7, #48]	; 0x30
					packet_t * pack = (packet_t*) &(holder)->packet ;
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	78da      	ldrb	r2, [r3, #3]
 8008580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008584:	429a      	cmp	r2, r3
 8008586:	d10a      	bne.n	800859e <ll_receive+0x8e>
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	791a      	ldrb	r2, [r3, #4]
 800858c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008590:	429a      	cmp	r2, r3
 8008592:	d104      	bne.n	800859e <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fb50 	bl	8008c3c <free>
 800859c:	e022      	b.n	80085e4 <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	f107 0220 	add.w	r2, r7, #32
 80085a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80085a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 80085ac:	f7f8 fd0d 	bl	8000fca <sys_get_tick>
 80085b0:	4603      	mov	r3, r0
 80085b2:	61bb      	str	r3, [r7, #24]
			packet_holder.number_of_transmition = 0 ;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61fb      	str	r3, [r7, #28]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <ll_receive+0xe0>)
 80085ba:	681c      	ldr	r4, [r3, #0]
 80085bc:	f107 0308 	add.w	r3, r7, #8
 80085c0:	2118      	movs	r1, #24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd94 	bl	80080f0 <list_node_new>
 80085c8:	4603      	mov	r3, r0
 80085ca:	4619      	mov	r1, r3
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fcd5 	bl	8007f7c <list_push_back>
 80085d2:	e002      	b.n	80085da <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 80085d4:	4807      	ldr	r0, [pc, #28]	; (80085f4 <ll_receive+0xe4>)
 80085d6:	f001 f989 	bl	80098ec <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <ll_receive+0xe8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	4a05      	ldr	r2, [pc, #20]	; (80085f8 <ll_receive+0xe8>)
 80085e2:	6013      	str	r3, [r2, #0]

}
 80085e4:	373c      	adds	r7, #60	; 0x3c
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd90      	pop	{r4, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	2000000a 	.word	0x2000000a
 80085f0:	200005ec 	.word	0x200005ec
 80085f4:	0800c0a4 	.word	0x0800c0a4
 80085f8:	20000458 	.word	0x20000458

080085fc <ll_process_received>:

void ll_process_received()
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008602:	e0a4      	b.n	800874e <ll_process_received+0x152>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8008604:	4b60      	ldr	r3, [pc, #384]	; (8008788 <ll_process_received+0x18c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a60      	ldr	r2, [pc, #384]	; (800878c <ll_process_received+0x190>)
 800860a:	6812      	ldr	r2, [r2, #0]
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fcf0 	bl	8007ff4 <list_index>
 8008614:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	61fb      	str	r3, [r7, #28]

		//debug_packet(packet) ;


		if(packet->type == PACK_TYPE_DATA)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	78db      	ldrb	r3, [r3, #3]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <ll_process_received+0x4e>
			// ASK packet should be sent ,the data will be read later
			// by recv_from function ,also packet should be removed after certain time

			//number_of_transmition used to assure that a ASK has been send to confirm data recv
			//data packet will be removed by ll_get_recv_from
			if( holder->number_of_transmition == 0)
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8089 	bne.w	8008744 <ll_process_received+0x148>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	789b      	ldrb	r3, [r3, #2]
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7ff fe7b 	bl	8008338 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	2201      	movs	r2, #1
 8008646:	615a      	str	r2, [r3, #20]
 8008648:	e07c      	b.n	8008744 <ll_process_received+0x148>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	78db      	ldrb	r3, [r3, #3]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d141      	bne.n	80086d6 <ll_process_received+0xda>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008652:	4b4f      	ldr	r3, [pc, #316]	; (8008790 <ll_process_received+0x194>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	789b      	ldrb	r3, [r3, #2]
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f7ff fc43 	bl	8007ee8 <list_search>
 8008662:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10f      	bne.n	800868a <ll_process_received+0x8e>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 800866a:	4b47      	ldr	r3, [pc, #284]	; (8008788 <ll_process_received+0x18c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fc61 	bl	8007f38 <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 8008676:	69f8      	ldr	r0, [r7, #28]
 8008678:	f000 fae0 	bl	8008c3c <free>
				free(holder) ;
 800867c:	6a38      	ldr	r0, [r7, #32]
 800867e:	f000 fadd 	bl	8008c3c <free>
				free(n);
 8008682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008684:	f000 fada 	bl	8008c3c <free>
 8008688:	e05c      	b.n	8008744 <ll_process_received+0x148>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	78db      	ldrb	r3, [r3, #3]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d153      	bne.n	8008744 <ll_process_received+0x148>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	789b      	ldrb	r3, [r3, #2]
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7ff fe5b 	bl	8008362 <ll_send_NANK>
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 80086ac:	4b38      	ldr	r3, [pc, #224]	; (8008790 <ll_process_received+0x194>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68f9      	ldr	r1, [r7, #12]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff fc40 	bl	8007f38 <list_remove>
					//free memory
					free(pack_p->payload) ;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fabd 	bl	8008c3c <free>
					free(pack_p) ;
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 faba 	bl	8008c3c <free>
					free(h);
 80086c8:	68b8      	ldr	r0, [r7, #8]
 80086ca:	f000 fab7 	bl	8008c3c <free>
					free(tx_data_node) ;
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fab4 	bl	8008c3c <free>
 80086d4:	e036      	b.n	8008744 <ll_process_received+0x148>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	78db      	ldrb	r3, [r3, #3]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d132      	bne.n	8008744 <ll_process_received+0x148>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 80086de:	4b2c      	ldr	r3, [pc, #176]	; (8008790 <ll_process_received+0x194>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	789b      	ldrb	r3, [r3, #2]
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f7ff fbfd 	bl	8007ee8 <list_search>
 80086ee:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d017      	beq.n	8008726 <ll_process_received+0x12a>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	78db      	ldrb	r3, [r3, #3]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d10e      	bne.n	8008726 <ll_process_received+0x12a>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 8008708:	4b21      	ldr	r3, [pc, #132]	; (8008790 <ll_process_received+0x194>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69b9      	ldr	r1, [r7, #24]
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fc12 	bl	8007f38 <list_remove>

					//release memory

					free(ask_packet);
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	f000 fa91 	bl	8008c3c <free>
					free(p_holder) ;
 800871a:	6978      	ldr	r0, [r7, #20]
 800871c:	f000 fa8e 	bl	8008c3c <free>
					free(tx_ask_node) ;
 8008720:	69b8      	ldr	r0, [r7, #24]
 8008722:	f000 fa8b 	bl	8008c3c <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 8008726:	4b18      	ldr	r3, [pc, #96]	; (8008788 <ll_process_received+0x18c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fc03 	bl	8007f38 <list_remove>
			free(packet);
 8008732:	69f8      	ldr	r0, [r7, #28]
 8008734:	f000 fa82 	bl	8008c3c <free>
			free(holder);
 8008738:	6a38      	ldr	r0, [r7, #32]
 800873a:	f000 fa7f 	bl	8008c3c <free>
			free(n);
 800873e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008740:	f000 fa7c 	bl	8008c3c <free>
		}

		rx_packet_index++;
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <ll_process_received+0x190>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a10      	ldr	r2, [pc, #64]	; (800878c <ll_process_received+0x190>)
 800874c:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 800874e:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <ll_process_received+0x18c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fc90 	bl	8008078 <list_size>
 8008758:	4602      	mov	r2, r0
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <ll_process_received+0x190>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	f63f af50 	bhi.w	8008604 <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index > list_size(Rx_packet_list))
 8008764:	4b08      	ldr	r3, [pc, #32]	; (8008788 <ll_process_received+0x18c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fc85 	bl	8008078 <list_size>
 800876e:	4602      	mov	r2, r0
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <ll_process_received+0x190>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d202      	bcs.n	800877e <ll_process_received+0x182>
	{
		rx_packet_index = 0;
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <ll_process_received+0x190>)
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
	}

}
 800877e:	bf00      	nop
 8008780:	3728      	adds	r7, #40	; 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200005ec 	.word	0x200005ec
 800878c:	20000454 	.word	0x20000454
 8008790:	200005f0 	.word	0x200005f0

08008794 <ll_get_recv_from>:

int  ll_get_recv_from(u8 src ,u8 *data )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	6039      	str	r1, [r7, #0]
 800879e:	71fb      	strb	r3, [r7, #7]


	int rx_list_size = list_size(Rx_packet_list) ;
 80087a0:	4b2d      	ldr	r3, [pc, #180]	; (8008858 <ll_get_recv_from+0xc4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fc67 	bl	8008078 <list_size>
 80087aa:	4603      	mov	r3, r0
 80087ac:	61bb      	str	r3, [r7, #24]



	if(rx_list_size == 0)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <ll_get_recv_from+0x24>
		return 0 ;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e04b      	b.n	8008850 <ll_get_recv_from+0xbc>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 80087b8:	2300      	movs	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	e043      	b.n	8008846 <ll_get_recv_from+0xb2>
	{
		node = list_index(Rx_packet_list , i) ;
 80087be:	4b26      	ldr	r3, [pc, #152]	; (8008858 <ll_get_recv_from+0xc4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69f9      	ldr	r1, [r7, #28]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fc15 	bl	8007ff4 <list_index>
 80087ca:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	60fb      	str	r3, [r7, #12]

		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d130      	bne.n	8008840 <ll_get_recv_from+0xac>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	79fa      	ldrb	r2, [r7, #7]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d12b      	bne.n	8008840 <ll_get_recv_from+0xac>
		{
			int data_length =  pack->payload_length ;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	791b      	ldrb	r3, [r3, #4]
 80087ec:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6838      	ldr	r0, [r7, #0]
 80087f8:	f000 fa36 	bl	8008c68 <memcpy>

			if( holder->number_of_transmition == 0)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <ll_get_recv_from+0x80>
			{
#ifdef PROT_DEBUG
				printf("ASK send From ll_get_recv_from\n");
#endif
				ll_send_ASK(pack->src , pack->id) ;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	789b      	ldrb	r3, [r3, #2]
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7ff fd92 	bl	8008338 <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 8008814:	4b10      	ldr	r3, [pc, #64]	; (8008858 <ll_get_recv_from+0xc4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fb8c 	bl	8007f38 <list_remove>
			free(pack->payload) ;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fa09 	bl	8008c3c <free>
			free(pack) ;
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fa06 	bl	8008c3c <free>
			free(holder) ;
 8008830:	6938      	ldr	r0, [r7, #16]
 8008832:	f000 fa03 	bl	8008c3c <free>
			free(node) ;
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f000 fa00 	bl	8008c3c <free>
			return data_length ;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	e007      	b.n	8008850 <ll_get_recv_from+0xbc>
	for(int i = 0 ; i < rx_list_size ; i++)
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	3301      	adds	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	dbb7      	blt.n	80087be <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	200005ec 	.word	0x200005ec

0800885c <ll_process>:


u32 process_tmr = 0;
//this function should manage send and receive operations
void ll_process(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0

	ll_process_received();
 8008860:	f7ff fecc 	bl	80085fc <ll_process_received>
    if(sys_get_tick() - process_tmr > 1000)
 8008864:	f7f8 fbb1 	bl	8000fca <sys_get_tick>
 8008868:	4602      	mov	r2, r0
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <ll_process+0x38>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008874:	d90b      	bls.n	800888e <ll_process+0x32>
    {
	    ll_transmit() ;
 8008876:	f7ff fda3 	bl	80083c0 <ll_transmit>
	    Radio.Rx(1000);
 800887a:	4b07      	ldr	r3, [pc, #28]	; (8008898 <ll_process+0x3c>)
 800887c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008882:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 8008884:	f7f8 fba1 	bl	8000fca <sys_get_tick>
 8008888:	4603      	mov	r3, r0
 800888a:	4a02      	ldr	r2, [pc, #8]	; (8008894 <ll_process+0x38>)
 800888c:	6013      	str	r3, [r2, #0]

		default:
			break ;
		}
	*/
}
 800888e:	bf00      	nop
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000460 	.word	0x20000460
 8008898:	0800c22c 	.word	0x0800c22c

0800889c <ll_set_transmition_done>:


void ll_set_transmition_done()
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 80088a0:	4b03      	ldr	r3, [pc, #12]	; (80088b0 <ll_set_transmition_done+0x14>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	701a      	strb	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	2000045c 	.word	0x2000045c

080088b4 <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	4608      	mov	r0, r1
 80088be:	4611      	mov	r1, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	70fb      	strb	r3, [r7, #3]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70bb      	strb	r3, [r7, #2]
 80088ca:	4613      	mov	r3, r2
 80088cc:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f819 	bl	800890a <packet_set_src>
	packet_set_dest(pack  , dest) ;
 80088d8:	78bb      	ldrb	r3, [r7, #2]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f822 	bl	8008926 <packet_set_dest>
	packet_set_type(pack , type );
 80088e2:	787b      	ldrb	r3, [r7, #1]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f82b 	bl	8008942 <packet_set_type>
	packet_set_id(pack ,id) ;
 80088ec:	7c3b      	ldrb	r3, [r7, #16]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f85a 	bl	80089aa <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 80088f6:	7e3b      	ldrb	r3, [r7, #24]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6979      	ldr	r1, [r7, #20]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f82e 	bl	800895e <packet_set_payload>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	701a      	strb	r2, [r3, #0]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr

08008926 <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	705a      	strb	r2, [r3, #1]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr

08008942 <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	70da      	strb	r2, [r3, #3]
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr

0800895e <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d016      	beq.n	800899e <packet_set_payload+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d013      	beq.n	800899e <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f957 	bl	8008c2c <malloc>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f96a 	bl	8008c68 <memcpy>
		pack->payload_length = len ;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	b2da      	uxtb	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	711a      	strb	r2, [r3, #4]
		return ;
 800899c:	e002      	b.n	80089a4 <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	711a      	strb	r2, [r3, #4]
	
}
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	709a      	strb	r2, [r3, #2]
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr

080089c6 <packet_serialize>:
	printf("\n");
	
}

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	791b      	ldrb	r3, [r3, #4]
 80089d4:	3307      	adds	r3, #7
 80089d6:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d04a      	beq.n	8008a74 <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	785a      	ldrb	r2, [r3, #1]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	3301      	adds	r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	789a      	ldrb	r2, [r3, #2]
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	78da      	ldrb	r2, [r3, #3]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3301      	adds	r3, #1
 8008a18:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	791a      	ldrb	r2, [r3, #4]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6899      	ldr	r1, [r3, #8]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6938      	ldr	r0, [r7, #16]
 8008a34:	f000 f918 	bl	8008c68 <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	3305      	adds	r3, #5
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6838      	ldr	r0, [r7, #0]
 8008a42:	f000 f873 	bl	8008b2c <check_sum>
 8008a46:	4603      	mov	r3, r0
 8008a48:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3301      	adds	r3, #1
 8008a66:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 8008a68:	89fb      	ldrh	r3, [r7, #14]
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	e000      	b.n	8008a76 <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 8008a74:	2300      	movs	r3, #0
	}
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3b02      	subs	r3, #2
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	8afb      	ldrh	r3, [r7, #22]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3b02      	subs	r3, #2
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f83a 	bl	8008b2c <check_sum>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 8008abc:	8aba      	ldrh	r2, [r7, #20]
 8008abe:	8afb      	ldrh	r3, [r7, #22]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d005      	beq.n	8008ad0 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 8008ac4:	4818      	ldr	r0, [pc, #96]	; (8008b28 <packet_desirialize+0xa8>)
 8008ac6:	f000 ff11 	bl	80098ec <puts>
		return PACK_CHECKSUM_ERROR ;
 8008aca:	f04f 33ff 	mov.w	r3, #4294967295
 8008ace:	e026      	b.n	8008b1e <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	785a      	ldrb	r2, [r3, #1]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	78da      	ldrb	r2, [r3, #3]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	789a      	ldrb	r2, [r3, #2]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	791a      	ldrb	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f895 	bl	8008c2c <malloc>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6898      	ldr	r0, [r3, #8]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1d59      	adds	r1, r3, #5
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f000 f8a6 	bl	8008c68 <memcpy>
	
	return PACK_OK ;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	0800c154 	.word	0x0800c154

08008b2c <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8008b36:	2300      	movs	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8008b3e:	e017      	b.n	8008b70 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	4413      	add	r3, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	3301      	adds	r3, #1
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4413      	add	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	3b02      	subs	r3, #2
 8008b68:	603b      	str	r3, [r7, #0]
		i += 2;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	617b      	str	r3, [r7, #20]
	while(len>1)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	dce4      	bgt.n	8008b40 <check_sum+0x14>
	}
	
	if(len >0)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dd13      	ble.n	8008ba4 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 8008b8e:	e009      	b.n	8008ba4 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	0c1b      	lsrs	r3, r3, #16
 8008b9a:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008baa:	daf1      	bge.n	8008b90 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	b29b      	uxth	r3, r3
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	3307      	adds	r3, #7
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
	...

08008bd8 <__errno>:
 8008bd8:	4b01      	ldr	r3, [pc, #4]	; (8008be0 <__errno+0x8>)
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	2000000c 	.word	0x2000000c

08008be4 <__libc_init_array>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4d0d      	ldr	r5, [pc, #52]	; (8008c1c <__libc_init_array+0x38>)
 8008be8:	4c0d      	ldr	r4, [pc, #52]	; (8008c20 <__libc_init_array+0x3c>)
 8008bea:	1b64      	subs	r4, r4, r5
 8008bec:	10a4      	asrs	r4, r4, #2
 8008bee:	2600      	movs	r6, #0
 8008bf0:	42a6      	cmp	r6, r4
 8008bf2:	d109      	bne.n	8008c08 <__libc_init_array+0x24>
 8008bf4:	4d0b      	ldr	r5, [pc, #44]	; (8008c24 <__libc_init_array+0x40>)
 8008bf6:	4c0c      	ldr	r4, [pc, #48]	; (8008c28 <__libc_init_array+0x44>)
 8008bf8:	f003 f84a 	bl	800bc90 <_init>
 8008bfc:	1b64      	subs	r4, r4, r5
 8008bfe:	10a4      	asrs	r4, r4, #2
 8008c00:	2600      	movs	r6, #0
 8008c02:	42a6      	cmp	r6, r4
 8008c04:	d105      	bne.n	8008c12 <__libc_init_array+0x2e>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0c:	4798      	blx	r3
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7ee      	b.n	8008bf0 <__libc_init_array+0xc>
 8008c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c16:	4798      	blx	r3
 8008c18:	3601      	adds	r6, #1
 8008c1a:	e7f2      	b.n	8008c02 <__libc_init_array+0x1e>
 8008c1c:	0800cdec 	.word	0x0800cdec
 8008c20:	0800cdec 	.word	0x0800cdec
 8008c24:	0800cdec 	.word	0x0800cdec
 8008c28:	0800cdf0 	.word	0x0800cdf0

08008c2c <malloc>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <malloc+0xc>)
 8008c2e:	4601      	mov	r1, r0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f000 b87d 	b.w	8008d30 <_malloc_r>
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <free>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <free+0xc>)
 8008c3e:	4601      	mov	r1, r0
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f000 b827 	b.w	8008c94 <_free_r>
 8008c46:	bf00      	nop
 8008c48:	2000000c 	.word	0x2000000c

08008c4c <memcmp>:
 8008c4c:	b530      	push	{r4, r5, lr}
 8008c4e:	3901      	subs	r1, #1
 8008c50:	2400      	movs	r4, #0
 8008c52:	42a2      	cmp	r2, r4
 8008c54:	d101      	bne.n	8008c5a <memcmp+0xe>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e005      	b.n	8008c66 <memcmp+0x1a>
 8008c5a:	5d03      	ldrb	r3, [r0, r4]
 8008c5c:	3401      	adds	r4, #1
 8008c5e:	5d0d      	ldrb	r5, [r1, r4]
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	d0f6      	beq.n	8008c52 <memcmp+0x6>
 8008c64:	1b58      	subs	r0, r3, r5
 8008c66:	bd30      	pop	{r4, r5, pc}

08008c68 <memcpy>:
 8008c68:	440a      	add	r2, r1
 8008c6a:	4291      	cmp	r1, r2
 8008c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c70:	d100      	bne.n	8008c74 <memcpy+0xc>
 8008c72:	4770      	bx	lr
 8008c74:	b510      	push	{r4, lr}
 8008c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c7e:	4291      	cmp	r1, r2
 8008c80:	d1f9      	bne.n	8008c76 <memcpy+0xe>
 8008c82:	bd10      	pop	{r4, pc}

08008c84 <memset>:
 8008c84:	4402      	add	r2, r0
 8008c86:	4603      	mov	r3, r0
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d100      	bne.n	8008c8e <memset+0xa>
 8008c8c:	4770      	bx	lr
 8008c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c92:	e7f9      	b.n	8008c88 <memset+0x4>

08008c94 <_free_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4605      	mov	r5, r0
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d045      	beq.n	8008d28 <_free_r+0x94>
 8008c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca0:	1f0c      	subs	r4, r1, #4
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bfb8      	it	lt
 8008ca6:	18e4      	addlt	r4, r4, r3
 8008ca8:	f002 f9e0 	bl	800b06c <__malloc_lock>
 8008cac:	4a1f      	ldr	r2, [pc, #124]	; (8008d2c <_free_r+0x98>)
 8008cae:	6813      	ldr	r3, [r2, #0]
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	b933      	cbnz	r3, 8008cc2 <_free_r+0x2e>
 8008cb4:	6063      	str	r3, [r4, #4]
 8008cb6:	6014      	str	r4, [r2, #0]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cbe:	f002 b9db 	b.w	800b078 <__malloc_unlock>
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	d90b      	bls.n	8008cde <_free_r+0x4a>
 8008cc6:	6821      	ldr	r1, [r4, #0]
 8008cc8:	1862      	adds	r2, r4, r1
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	bf04      	itt	eq
 8008cce:	681a      	ldreq	r2, [r3, #0]
 8008cd0:	685b      	ldreq	r3, [r3, #4]
 8008cd2:	6063      	str	r3, [r4, #4]
 8008cd4:	bf04      	itt	eq
 8008cd6:	1852      	addeq	r2, r2, r1
 8008cd8:	6022      	streq	r2, [r4, #0]
 8008cda:	6004      	str	r4, [r0, #0]
 8008cdc:	e7ec      	b.n	8008cb8 <_free_r+0x24>
 8008cde:	461a      	mov	r2, r3
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	b10b      	cbz	r3, 8008ce8 <_free_r+0x54>
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	d9fa      	bls.n	8008cde <_free_r+0x4a>
 8008ce8:	6811      	ldr	r1, [r2, #0]
 8008cea:	1850      	adds	r0, r2, r1
 8008cec:	42a0      	cmp	r0, r4
 8008cee:	d10b      	bne.n	8008d08 <_free_r+0x74>
 8008cf0:	6820      	ldr	r0, [r4, #0]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	1850      	adds	r0, r2, r1
 8008cf6:	4283      	cmp	r3, r0
 8008cf8:	6011      	str	r1, [r2, #0]
 8008cfa:	d1dd      	bne.n	8008cb8 <_free_r+0x24>
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	6053      	str	r3, [r2, #4]
 8008d02:	4401      	add	r1, r0
 8008d04:	6011      	str	r1, [r2, #0]
 8008d06:	e7d7      	b.n	8008cb8 <_free_r+0x24>
 8008d08:	d902      	bls.n	8008d10 <_free_r+0x7c>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	602b      	str	r3, [r5, #0]
 8008d0e:	e7d3      	b.n	8008cb8 <_free_r+0x24>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	1821      	adds	r1, r4, r0
 8008d14:	428b      	cmp	r3, r1
 8008d16:	bf04      	itt	eq
 8008d18:	6819      	ldreq	r1, [r3, #0]
 8008d1a:	685b      	ldreq	r3, [r3, #4]
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	bf04      	itt	eq
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	6054      	str	r4, [r2, #4]
 8008d26:	e7c7      	b.n	8008cb8 <_free_r+0x24>
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000464 	.word	0x20000464

08008d30 <_malloc_r>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	1ccd      	adds	r5, r1, #3
 8008d34:	f025 0503 	bic.w	r5, r5, #3
 8008d38:	3508      	adds	r5, #8
 8008d3a:	2d0c      	cmp	r5, #12
 8008d3c:	bf38      	it	cc
 8008d3e:	250c      	movcc	r5, #12
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	4606      	mov	r6, r0
 8008d44:	db01      	blt.n	8008d4a <_malloc_r+0x1a>
 8008d46:	42a9      	cmp	r1, r5
 8008d48:	d903      	bls.n	8008d52 <_malloc_r+0x22>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	2000      	movs	r0, #0
 8008d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d52:	f002 f98b 	bl	800b06c <__malloc_lock>
 8008d56:	4921      	ldr	r1, [pc, #132]	; (8008ddc <_malloc_r+0xac>)
 8008d58:	680a      	ldr	r2, [r1, #0]
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	b99c      	cbnz	r4, 8008d86 <_malloc_r+0x56>
 8008d5e:	4f20      	ldr	r7, [pc, #128]	; (8008de0 <_malloc_r+0xb0>)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	b923      	cbnz	r3, 8008d6e <_malloc_r+0x3e>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 fdc8 	bl	80098fc <_sbrk_r>
 8008d6c:	6038      	str	r0, [r7, #0]
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 fdc3 	bl	80098fc <_sbrk_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d123      	bne.n	8008dc2 <_malloc_r+0x92>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	6033      	str	r3, [r6, #0]
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f002 f97a 	bl	800b078 <__malloc_unlock>
 8008d84:	e7e3      	b.n	8008d4e <_malloc_r+0x1e>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	1b5b      	subs	r3, r3, r5
 8008d8a:	d417      	bmi.n	8008dbc <_malloc_r+0x8c>
 8008d8c:	2b0b      	cmp	r3, #11
 8008d8e:	d903      	bls.n	8008d98 <_malloc_r+0x68>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	441c      	add	r4, r3
 8008d94:	6025      	str	r5, [r4, #0]
 8008d96:	e004      	b.n	8008da2 <_malloc_r+0x72>
 8008d98:	6863      	ldr	r3, [r4, #4]
 8008d9a:	42a2      	cmp	r2, r4
 8008d9c:	bf0c      	ite	eq
 8008d9e:	600b      	streq	r3, [r1, #0]
 8008da0:	6053      	strne	r3, [r2, #4]
 8008da2:	4630      	mov	r0, r6
 8008da4:	f002 f968 	bl	800b078 <__malloc_unlock>
 8008da8:	f104 000b 	add.w	r0, r4, #11
 8008dac:	1d23      	adds	r3, r4, #4
 8008dae:	f020 0007 	bic.w	r0, r0, #7
 8008db2:	1ac2      	subs	r2, r0, r3
 8008db4:	d0cc      	beq.n	8008d50 <_malloc_r+0x20>
 8008db6:	1a1b      	subs	r3, r3, r0
 8008db8:	50a3      	str	r3, [r4, r2]
 8008dba:	e7c9      	b.n	8008d50 <_malloc_r+0x20>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	6864      	ldr	r4, [r4, #4]
 8008dc0:	e7cc      	b.n	8008d5c <_malloc_r+0x2c>
 8008dc2:	1cc4      	adds	r4, r0, #3
 8008dc4:	f024 0403 	bic.w	r4, r4, #3
 8008dc8:	42a0      	cmp	r0, r4
 8008dca:	d0e3      	beq.n	8008d94 <_malloc_r+0x64>
 8008dcc:	1a21      	subs	r1, r4, r0
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 fd94 	bl	80098fc <_sbrk_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d1dd      	bne.n	8008d94 <_malloc_r+0x64>
 8008dd8:	e7cf      	b.n	8008d7a <_malloc_r+0x4a>
 8008dda:	bf00      	nop
 8008ddc:	20000464 	.word	0x20000464
 8008de0:	20000468 	.word	0x20000468

08008de4 <__cvt>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	b088      	sub	sp, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	461f      	mov	r7, r3
 8008dee:	4614      	mov	r4, r2
 8008df0:	bfb8      	it	lt
 8008df2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008df8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008dfa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008dfe:	bfb6      	itet	lt
 8008e00:	461f      	movlt	r7, r3
 8008e02:	2300      	movge	r3, #0
 8008e04:	232d      	movlt	r3, #45	; 0x2d
 8008e06:	7013      	strb	r3, [r2, #0]
 8008e08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e0a:	f023 0820 	bic.w	r8, r3, #32
 8008e0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e12:	d005      	beq.n	8008e20 <__cvt+0x3c>
 8008e14:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e18:	d100      	bne.n	8008e1c <__cvt+0x38>
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e000      	b.n	8008e22 <__cvt+0x3e>
 8008e20:	2303      	movs	r3, #3
 8008e22:	aa07      	add	r2, sp, #28
 8008e24:	9204      	str	r2, [sp, #16]
 8008e26:	aa06      	add	r2, sp, #24
 8008e28:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e2c:	e9cd 3500 	strd	r3, r5, [sp]
 8008e30:	4622      	mov	r2, r4
 8008e32:	463b      	mov	r3, r7
 8008e34:	f001 f8b8 	bl	8009fa8 <_dtoa_r>
 8008e38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	d102      	bne.n	8008e46 <__cvt+0x62>
 8008e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e42:	07db      	lsls	r3, r3, #31
 8008e44:	d522      	bpl.n	8008e8c <__cvt+0xa8>
 8008e46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e4a:	eb06 0905 	add.w	r9, r6, r5
 8008e4e:	d110      	bne.n	8008e72 <__cvt+0x8e>
 8008e50:	7833      	ldrb	r3, [r6, #0]
 8008e52:	2b30      	cmp	r3, #48	; 0x30
 8008e54:	d10a      	bne.n	8008e6c <__cvt+0x88>
 8008e56:	2200      	movs	r2, #0
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fe1b 	bl	8000a98 <__aeabi_dcmpeq>
 8008e62:	b918      	cbnz	r0, 8008e6c <__cvt+0x88>
 8008e64:	f1c5 0501 	rsb	r5, r5, #1
 8008e68:	f8ca 5000 	str.w	r5, [sl]
 8008e6c:	f8da 3000 	ldr.w	r3, [sl]
 8008e70:	4499      	add	r9, r3
 8008e72:	2200      	movs	r2, #0
 8008e74:	2300      	movs	r3, #0
 8008e76:	4620      	mov	r0, r4
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fe0d 	bl	8000a98 <__aeabi_dcmpeq>
 8008e7e:	b108      	cbz	r0, 8008e84 <__cvt+0xa0>
 8008e80:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e84:	2230      	movs	r2, #48	; 0x30
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	454b      	cmp	r3, r9
 8008e8a:	d307      	bcc.n	8008e9c <__cvt+0xb8>
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e90:	1b9b      	subs	r3, r3, r6
 8008e92:	4630      	mov	r0, r6
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	b008      	add	sp, #32
 8008e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9c:	1c59      	adds	r1, r3, #1
 8008e9e:	9107      	str	r1, [sp, #28]
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	e7f0      	b.n	8008e86 <__cvt+0xa2>

08008ea4 <__exponent>:
 8008ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	bfb8      	it	lt
 8008eac:	4249      	neglt	r1, r1
 8008eae:	f803 2b02 	strb.w	r2, [r3], #2
 8008eb2:	bfb4      	ite	lt
 8008eb4:	222d      	movlt	r2, #45	; 0x2d
 8008eb6:	222b      	movge	r2, #43	; 0x2b
 8008eb8:	2909      	cmp	r1, #9
 8008eba:	7042      	strb	r2, [r0, #1]
 8008ebc:	dd2a      	ble.n	8008f14 <__exponent+0x70>
 8008ebe:	f10d 0407 	add.w	r4, sp, #7
 8008ec2:	46a4      	mov	ip, r4
 8008ec4:	270a      	movs	r7, #10
 8008ec6:	46a6      	mov	lr, r4
 8008ec8:	460a      	mov	r2, r1
 8008eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ece:	fb07 1516 	mls	r5, r7, r6, r1
 8008ed2:	3530      	adds	r5, #48	; 0x30
 8008ed4:	2a63      	cmp	r2, #99	; 0x63
 8008ed6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008eda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ede:	4631      	mov	r1, r6
 8008ee0:	dcf1      	bgt.n	8008ec6 <__exponent+0x22>
 8008ee2:	3130      	adds	r1, #48	; 0x30
 8008ee4:	f1ae 0502 	sub.w	r5, lr, #2
 8008ee8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008eec:	1c44      	adds	r4, r0, #1
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4561      	cmp	r1, ip
 8008ef2:	d30a      	bcc.n	8008f0a <__exponent+0x66>
 8008ef4:	f10d 0209 	add.w	r2, sp, #9
 8008ef8:	eba2 020e 	sub.w	r2, r2, lr
 8008efc:	4565      	cmp	r5, ip
 8008efe:	bf88      	it	hi
 8008f00:	2200      	movhi	r2, #0
 8008f02:	4413      	add	r3, r2
 8008f04:	1a18      	subs	r0, r3, r0
 8008f06:	b003      	add	sp, #12
 8008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f12:	e7ed      	b.n	8008ef0 <__exponent+0x4c>
 8008f14:	2330      	movs	r3, #48	; 0x30
 8008f16:	3130      	adds	r1, #48	; 0x30
 8008f18:	7083      	strb	r3, [r0, #2]
 8008f1a:	70c1      	strb	r1, [r0, #3]
 8008f1c:	1d03      	adds	r3, r0, #4
 8008f1e:	e7f1      	b.n	8008f04 <__exponent+0x60>

08008f20 <_printf_float>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	b091      	sub	sp, #68	; 0x44
 8008f26:	460c      	mov	r4, r1
 8008f28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	461f      	mov	r7, r3
 8008f30:	4605      	mov	r5, r0
 8008f32:	f002 f81d 	bl	800af70 <_localeconv_r>
 8008f36:	6803      	ldr	r3, [r0, #0]
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f7 f92a 	bl	8000194 <strlen>
 8008f40:	2300      	movs	r3, #0
 8008f42:	930e      	str	r3, [sp, #56]	; 0x38
 8008f44:	f8d8 3000 	ldr.w	r3, [r8]
 8008f48:	900a      	str	r0, [sp, #40]	; 0x28
 8008f4a:	3307      	adds	r3, #7
 8008f4c:	f023 0307 	bic.w	r3, r3, #7
 8008f50:	f103 0208 	add.w	r2, r3, #8
 8008f54:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008f58:	f8d4 b000 	ldr.w	fp, [r4]
 8008f5c:	f8c8 2000 	str.w	r2, [r8]
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f68:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008f6c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f74:	4b9c      	ldr	r3, [pc, #624]	; (80091e8 <_printf_float+0x2c8>)
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f7f7 fdbe 	bl	8000afc <__aeabi_dcmpun>
 8008f80:	bb70      	cbnz	r0, 8008fe0 <_printf_float+0xc0>
 8008f82:	4b99      	ldr	r3, [pc, #612]	; (80091e8 <_printf_float+0x2c8>)
 8008f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7f7 fd98 	bl	8000ac0 <__aeabi_dcmple>
 8008f90:	bb30      	cbnz	r0, 8008fe0 <_printf_float+0xc0>
 8008f92:	2200      	movs	r2, #0
 8008f94:	2300      	movs	r3, #0
 8008f96:	4640      	mov	r0, r8
 8008f98:	4651      	mov	r1, sl
 8008f9a:	f7f7 fd87 	bl	8000aac <__aeabi_dcmplt>
 8008f9e:	b110      	cbz	r0, 8008fa6 <_printf_float+0x86>
 8008fa0:	232d      	movs	r3, #45	; 0x2d
 8008fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa6:	4b91      	ldr	r3, [pc, #580]	; (80091ec <_printf_float+0x2cc>)
 8008fa8:	4891      	ldr	r0, [pc, #580]	; (80091f0 <_printf_float+0x2d0>)
 8008faa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008fae:	bf94      	ite	ls
 8008fb0:	4698      	movls	r8, r3
 8008fb2:	4680      	movhi	r8, r0
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	f02b 0304 	bic.w	r3, fp, #4
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	f04f 0a00 	mov.w	sl, #0
 8008fc2:	9700      	str	r7, [sp, #0]
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	aa0f      	add	r2, sp, #60	; 0x3c
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 f9d2 	bl	8009374 <_printf_common>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f040 808f 	bne.w	80090f4 <_printf_float+0x1d4>
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	b011      	add	sp, #68	; 0x44
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4653      	mov	r3, sl
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4651      	mov	r1, sl
 8008fe8:	f7f7 fd88 	bl	8000afc <__aeabi_dcmpun>
 8008fec:	b140      	cbz	r0, 8009000 <_printf_float+0xe0>
 8008fee:	f1ba 0f00 	cmp.w	sl, #0
 8008ff2:	bfbc      	itt	lt
 8008ff4:	232d      	movlt	r3, #45	; 0x2d
 8008ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ffa:	487e      	ldr	r0, [pc, #504]	; (80091f4 <_printf_float+0x2d4>)
 8008ffc:	4b7e      	ldr	r3, [pc, #504]	; (80091f8 <_printf_float+0x2d8>)
 8008ffe:	e7d4      	b.n	8008faa <_printf_float+0x8a>
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009008:	d142      	bne.n	8009090 <_printf_float+0x170>
 800900a:	2306      	movs	r3, #6
 800900c:	6063      	str	r3, [r4, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	9206      	str	r2, [sp, #24]
 8009012:	aa0e      	add	r2, sp, #56	; 0x38
 8009014:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009018:	aa0d      	add	r2, sp, #52	; 0x34
 800901a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800901e:	9203      	str	r2, [sp, #12]
 8009020:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009024:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	4642      	mov	r2, r8
 8009030:	4653      	mov	r3, sl
 8009032:	4628      	mov	r0, r5
 8009034:	910b      	str	r1, [sp, #44]	; 0x2c
 8009036:	f7ff fed5 	bl	8008de4 <__cvt>
 800903a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800903c:	2947      	cmp	r1, #71	; 0x47
 800903e:	4680      	mov	r8, r0
 8009040:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009042:	d108      	bne.n	8009056 <_printf_float+0x136>
 8009044:	1cc8      	adds	r0, r1, #3
 8009046:	db02      	blt.n	800904e <_printf_float+0x12e>
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	4299      	cmp	r1, r3
 800904c:	dd40      	ble.n	80090d0 <_printf_float+0x1b0>
 800904e:	f1a9 0902 	sub.w	r9, r9, #2
 8009052:	fa5f f989 	uxtb.w	r9, r9
 8009056:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800905a:	d81f      	bhi.n	800909c <_printf_float+0x17c>
 800905c:	3901      	subs	r1, #1
 800905e:	464a      	mov	r2, r9
 8009060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009064:	910d      	str	r1, [sp, #52]	; 0x34
 8009066:	f7ff ff1d 	bl	8008ea4 <__exponent>
 800906a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800906c:	1813      	adds	r3, r2, r0
 800906e:	2a01      	cmp	r2, #1
 8009070:	4682      	mov	sl, r0
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	dc02      	bgt.n	800907c <_printf_float+0x15c>
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	07d2      	lsls	r2, r2, #31
 800907a:	d501      	bpl.n	8009080 <_printf_float+0x160>
 800907c:	3301      	adds	r3, #1
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009084:	2b00      	cmp	r3, #0
 8009086:	d09c      	beq.n	8008fc2 <_printf_float+0xa2>
 8009088:	232d      	movs	r3, #45	; 0x2d
 800908a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908e:	e798      	b.n	8008fc2 <_printf_float+0xa2>
 8009090:	2947      	cmp	r1, #71	; 0x47
 8009092:	d1bc      	bne.n	800900e <_printf_float+0xee>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ba      	bne.n	800900e <_printf_float+0xee>
 8009098:	2301      	movs	r3, #1
 800909a:	e7b7      	b.n	800900c <_printf_float+0xec>
 800909c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090a0:	d118      	bne.n	80090d4 <_printf_float+0x1b4>
 80090a2:	2900      	cmp	r1, #0
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	dd0b      	ble.n	80090c0 <_printf_float+0x1a0>
 80090a8:	6121      	str	r1, [r4, #16]
 80090aa:	b913      	cbnz	r3, 80090b2 <_printf_float+0x192>
 80090ac:	6822      	ldr	r2, [r4, #0]
 80090ae:	07d0      	lsls	r0, r2, #31
 80090b0:	d502      	bpl.n	80090b8 <_printf_float+0x198>
 80090b2:	3301      	adds	r3, #1
 80090b4:	440b      	add	r3, r1
 80090b6:	6123      	str	r3, [r4, #16]
 80090b8:	65a1      	str	r1, [r4, #88]	; 0x58
 80090ba:	f04f 0a00 	mov.w	sl, #0
 80090be:	e7df      	b.n	8009080 <_printf_float+0x160>
 80090c0:	b913      	cbnz	r3, 80090c8 <_printf_float+0x1a8>
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	07d2      	lsls	r2, r2, #31
 80090c6:	d501      	bpl.n	80090cc <_printf_float+0x1ac>
 80090c8:	3302      	adds	r3, #2
 80090ca:	e7f4      	b.n	80090b6 <_printf_float+0x196>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e7f2      	b.n	80090b6 <_printf_float+0x196>
 80090d0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80090d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d6:	4299      	cmp	r1, r3
 80090d8:	db05      	blt.n	80090e6 <_printf_float+0x1c6>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	6121      	str	r1, [r4, #16]
 80090de:	07d8      	lsls	r0, r3, #31
 80090e0:	d5ea      	bpl.n	80090b8 <_printf_float+0x198>
 80090e2:	1c4b      	adds	r3, r1, #1
 80090e4:	e7e7      	b.n	80090b6 <_printf_float+0x196>
 80090e6:	2900      	cmp	r1, #0
 80090e8:	bfd4      	ite	le
 80090ea:	f1c1 0202 	rsble	r2, r1, #2
 80090ee:	2201      	movgt	r2, #1
 80090f0:	4413      	add	r3, r2
 80090f2:	e7e0      	b.n	80090b6 <_printf_float+0x196>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	055a      	lsls	r2, r3, #21
 80090f8:	d407      	bmi.n	800910a <_printf_float+0x1ea>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	4642      	mov	r2, r8
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	d12b      	bne.n	8009160 <_printf_float+0x240>
 8009108:	e765      	b.n	8008fd6 <_printf_float+0xb6>
 800910a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800910e:	f240 80dc 	bls.w	80092ca <_printf_float+0x3aa>
 8009112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009116:	2200      	movs	r2, #0
 8009118:	2300      	movs	r3, #0
 800911a:	f7f7 fcbd 	bl	8000a98 <__aeabi_dcmpeq>
 800911e:	2800      	cmp	r0, #0
 8009120:	d033      	beq.n	800918a <_printf_float+0x26a>
 8009122:	4a36      	ldr	r2, [pc, #216]	; (80091fc <_printf_float+0x2dc>)
 8009124:	2301      	movs	r3, #1
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	f43f af52 	beq.w	8008fd6 <_printf_float+0xb6>
 8009132:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009136:	429a      	cmp	r2, r3
 8009138:	db02      	blt.n	8009140 <_printf_float+0x220>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	07d8      	lsls	r0, r3, #31
 800913e:	d50f      	bpl.n	8009160 <_printf_float+0x240>
 8009140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f af43 	beq.w	8008fd6 <_printf_float+0xb6>
 8009150:	f04f 0800 	mov.w	r8, #0
 8009154:	f104 091a 	add.w	r9, r4, #26
 8009158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915a:	3b01      	subs	r3, #1
 800915c:	4543      	cmp	r3, r8
 800915e:	dc09      	bgt.n	8009174 <_printf_float+0x254>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	079b      	lsls	r3, r3, #30
 8009164:	f100 8101 	bmi.w	800936a <_printf_float+0x44a>
 8009168:	68e0      	ldr	r0, [r4, #12]
 800916a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800916c:	4298      	cmp	r0, r3
 800916e:	bfb8      	it	lt
 8009170:	4618      	movlt	r0, r3
 8009172:	e732      	b.n	8008fda <_printf_float+0xba>
 8009174:	2301      	movs	r3, #1
 8009176:	464a      	mov	r2, r9
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f af29 	beq.w	8008fd6 <_printf_float+0xb6>
 8009184:	f108 0801 	add.w	r8, r8, #1
 8009188:	e7e6      	b.n	8009158 <_printf_float+0x238>
 800918a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918c:	2b00      	cmp	r3, #0
 800918e:	dc37      	bgt.n	8009200 <_printf_float+0x2e0>
 8009190:	4a1a      	ldr	r2, [pc, #104]	; (80091fc <_printf_float+0x2dc>)
 8009192:	2301      	movs	r3, #1
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	f43f af1b 	beq.w	8008fd6 <_printf_float+0xb6>
 80091a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091a4:	4313      	orrs	r3, r2
 80091a6:	d102      	bne.n	80091ae <_printf_float+0x28e>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d5d8      	bpl.n	8009160 <_printf_float+0x240>
 80091ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091b2:	4631      	mov	r1, r6
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	f43f af0c 	beq.w	8008fd6 <_printf_float+0xb6>
 80091be:	f04f 0900 	mov.w	r9, #0
 80091c2:	f104 0a1a 	add.w	sl, r4, #26
 80091c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c8:	425b      	negs	r3, r3
 80091ca:	454b      	cmp	r3, r9
 80091cc:	dc01      	bgt.n	80091d2 <_printf_float+0x2b2>
 80091ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091d0:	e794      	b.n	80090fc <_printf_float+0x1dc>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4652      	mov	r2, sl
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f aefa 	beq.w	8008fd6 <_printf_float+0xb6>
 80091e2:	f109 0901 	add.w	r9, r9, #1
 80091e6:	e7ee      	b.n	80091c6 <_printf_float+0x2a6>
 80091e8:	7fefffff 	.word	0x7fefffff
 80091ec:	0800c368 	.word	0x0800c368
 80091f0:	0800c36c 	.word	0x0800c36c
 80091f4:	0800c374 	.word	0x0800c374
 80091f8:	0800c370 	.word	0x0800c370
 80091fc:	0800c378 	.word	0x0800c378
 8009200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009204:	429a      	cmp	r2, r3
 8009206:	bfa8      	it	ge
 8009208:	461a      	movge	r2, r3
 800920a:	2a00      	cmp	r2, #0
 800920c:	4691      	mov	r9, r2
 800920e:	dc37      	bgt.n	8009280 <_printf_float+0x360>
 8009210:	f04f 0b00 	mov.w	fp, #0
 8009214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009218:	f104 021a 	add.w	r2, r4, #26
 800921c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009220:	ebaa 0309 	sub.w	r3, sl, r9
 8009224:	455b      	cmp	r3, fp
 8009226:	dc33      	bgt.n	8009290 <_printf_float+0x370>
 8009228:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800922c:	429a      	cmp	r2, r3
 800922e:	db3b      	blt.n	80092a8 <_printf_float+0x388>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	07da      	lsls	r2, r3, #31
 8009234:	d438      	bmi.n	80092a8 <_printf_float+0x388>
 8009236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009238:	990d      	ldr	r1, [sp, #52]	; 0x34
 800923a:	eba2 030a 	sub.w	r3, r2, sl
 800923e:	eba2 0901 	sub.w	r9, r2, r1
 8009242:	4599      	cmp	r9, r3
 8009244:	bfa8      	it	ge
 8009246:	4699      	movge	r9, r3
 8009248:	f1b9 0f00 	cmp.w	r9, #0
 800924c:	dc34      	bgt.n	80092b8 <_printf_float+0x398>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009256:	f104 0a1a 	add.w	sl, r4, #26
 800925a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	eba3 0309 	sub.w	r3, r3, r9
 8009264:	4543      	cmp	r3, r8
 8009266:	f77f af7b 	ble.w	8009160 <_printf_float+0x240>
 800926a:	2301      	movs	r3, #1
 800926c:	4652      	mov	r2, sl
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f aeae 	beq.w	8008fd6 <_printf_float+0xb6>
 800927a:	f108 0801 	add.w	r8, r8, #1
 800927e:	e7ec      	b.n	800925a <_printf_float+0x33a>
 8009280:	4613      	mov	r3, r2
 8009282:	4631      	mov	r1, r6
 8009284:	4642      	mov	r2, r8
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	d1c0      	bne.n	8009210 <_printf_float+0x2f0>
 800928e:	e6a2      	b.n	8008fd6 <_printf_float+0xb6>
 8009290:	2301      	movs	r3, #1
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	920b      	str	r2, [sp, #44]	; 0x2c
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f ae9b 	beq.w	8008fd6 <_printf_float+0xb6>
 80092a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092a2:	f10b 0b01 	add.w	fp, fp, #1
 80092a6:	e7b9      	b.n	800921c <_printf_float+0x2fc>
 80092a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	d1bf      	bne.n	8009236 <_printf_float+0x316>
 80092b6:	e68e      	b.n	8008fd6 <_printf_float+0xb6>
 80092b8:	464b      	mov	r3, r9
 80092ba:	eb08 020a 	add.w	r2, r8, sl
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	d1c2      	bne.n	800924e <_printf_float+0x32e>
 80092c8:	e685      	b.n	8008fd6 <_printf_float+0xb6>
 80092ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092cc:	2a01      	cmp	r2, #1
 80092ce:	dc01      	bgt.n	80092d4 <_printf_float+0x3b4>
 80092d0:	07db      	lsls	r3, r3, #31
 80092d2:	d537      	bpl.n	8009344 <_printf_float+0x424>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4642      	mov	r2, r8
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f ae79 	beq.w	8008fd6 <_printf_float+0xb6>
 80092e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f ae71 	beq.w	8008fd6 <_printf_float+0xb6>
 80092f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092f8:	2200      	movs	r2, #0
 80092fa:	2300      	movs	r3, #0
 80092fc:	f7f7 fbcc 	bl	8000a98 <__aeabi_dcmpeq>
 8009300:	b9d8      	cbnz	r0, 800933a <_printf_float+0x41a>
 8009302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009304:	f108 0201 	add.w	r2, r8, #1
 8009308:	3b01      	subs	r3, #1
 800930a:	4631      	mov	r1, r6
 800930c:	4628      	mov	r0, r5
 800930e:	47b8      	blx	r7
 8009310:	3001      	adds	r0, #1
 8009312:	d10e      	bne.n	8009332 <_printf_float+0x412>
 8009314:	e65f      	b.n	8008fd6 <_printf_float+0xb6>
 8009316:	2301      	movs	r3, #1
 8009318:	464a      	mov	r2, r9
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	f43f ae58 	beq.w	8008fd6 <_printf_float+0xb6>
 8009326:	f108 0801 	add.w	r8, r8, #1
 800932a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800932c:	3b01      	subs	r3, #1
 800932e:	4543      	cmp	r3, r8
 8009330:	dcf1      	bgt.n	8009316 <_printf_float+0x3f6>
 8009332:	4653      	mov	r3, sl
 8009334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009338:	e6e1      	b.n	80090fe <_printf_float+0x1de>
 800933a:	f04f 0800 	mov.w	r8, #0
 800933e:	f104 091a 	add.w	r9, r4, #26
 8009342:	e7f2      	b.n	800932a <_printf_float+0x40a>
 8009344:	2301      	movs	r3, #1
 8009346:	4642      	mov	r2, r8
 8009348:	e7df      	b.n	800930a <_printf_float+0x3ea>
 800934a:	2301      	movs	r3, #1
 800934c:	464a      	mov	r2, r9
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	47b8      	blx	r7
 8009354:	3001      	adds	r0, #1
 8009356:	f43f ae3e 	beq.w	8008fd6 <_printf_float+0xb6>
 800935a:	f108 0801 	add.w	r8, r8, #1
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009362:	1a5b      	subs	r3, r3, r1
 8009364:	4543      	cmp	r3, r8
 8009366:	dcf0      	bgt.n	800934a <_printf_float+0x42a>
 8009368:	e6fe      	b.n	8009168 <_printf_float+0x248>
 800936a:	f04f 0800 	mov.w	r8, #0
 800936e:	f104 0919 	add.w	r9, r4, #25
 8009372:	e7f4      	b.n	800935e <_printf_float+0x43e>

08009374 <_printf_common>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	4616      	mov	r6, r2
 800937a:	4699      	mov	r9, r3
 800937c:	688a      	ldr	r2, [r1, #8]
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009384:	4293      	cmp	r3, r2
 8009386:	bfb8      	it	lt
 8009388:	4613      	movlt	r3, r2
 800938a:	6033      	str	r3, [r6, #0]
 800938c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009390:	4607      	mov	r7, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b10a      	cbz	r2, 800939a <_printf_common+0x26>
 8009396:	3301      	adds	r3, #1
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	0699      	lsls	r1, r3, #26
 800939e:	bf42      	ittt	mi
 80093a0:	6833      	ldrmi	r3, [r6, #0]
 80093a2:	3302      	addmi	r3, #2
 80093a4:	6033      	strmi	r3, [r6, #0]
 80093a6:	6825      	ldr	r5, [r4, #0]
 80093a8:	f015 0506 	ands.w	r5, r5, #6
 80093ac:	d106      	bne.n	80093bc <_printf_common+0x48>
 80093ae:	f104 0a19 	add.w	sl, r4, #25
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	6832      	ldr	r2, [r6, #0]
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	dc26      	bgt.n	800940a <_printf_common+0x96>
 80093bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c0:	1e13      	subs	r3, r2, #0
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	bf18      	it	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	0692      	lsls	r2, r2, #26
 80093ca:	d42b      	bmi.n	8009424 <_printf_common+0xb0>
 80093cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d0:	4649      	mov	r1, r9
 80093d2:	4638      	mov	r0, r7
 80093d4:	47c0      	blx	r8
 80093d6:	3001      	adds	r0, #1
 80093d8:	d01e      	beq.n	8009418 <_printf_common+0xa4>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	68e5      	ldr	r5, [r4, #12]
 80093de:	6832      	ldr	r2, [r6, #0]
 80093e0:	f003 0306 	and.w	r3, r3, #6
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	bf08      	it	eq
 80093e8:	1aad      	subeq	r5, r5, r2
 80093ea:	68a3      	ldr	r3, [r4, #8]
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	bf0c      	ite	eq
 80093f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f4:	2500      	movne	r5, #0
 80093f6:	4293      	cmp	r3, r2
 80093f8:	bfc4      	itt	gt
 80093fa:	1a9b      	subgt	r3, r3, r2
 80093fc:	18ed      	addgt	r5, r5, r3
 80093fe:	2600      	movs	r6, #0
 8009400:	341a      	adds	r4, #26
 8009402:	42b5      	cmp	r5, r6
 8009404:	d11a      	bne.n	800943c <_printf_common+0xc8>
 8009406:	2000      	movs	r0, #0
 8009408:	e008      	b.n	800941c <_printf_common+0xa8>
 800940a:	2301      	movs	r3, #1
 800940c:	4652      	mov	r2, sl
 800940e:	4649      	mov	r1, r9
 8009410:	4638      	mov	r0, r7
 8009412:	47c0      	blx	r8
 8009414:	3001      	adds	r0, #1
 8009416:	d103      	bne.n	8009420 <_printf_common+0xac>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	3501      	adds	r5, #1
 8009422:	e7c6      	b.n	80093b2 <_printf_common+0x3e>
 8009424:	18e1      	adds	r1, r4, r3
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	2030      	movs	r0, #48	; 0x30
 800942a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800942e:	4422      	add	r2, r4
 8009430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009438:	3302      	adds	r3, #2
 800943a:	e7c7      	b.n	80093cc <_printf_common+0x58>
 800943c:	2301      	movs	r3, #1
 800943e:	4622      	mov	r2, r4
 8009440:	4649      	mov	r1, r9
 8009442:	4638      	mov	r0, r7
 8009444:	47c0      	blx	r8
 8009446:	3001      	adds	r0, #1
 8009448:	d0e6      	beq.n	8009418 <_printf_common+0xa4>
 800944a:	3601      	adds	r6, #1
 800944c:	e7d9      	b.n	8009402 <_printf_common+0x8e>
	...

08009450 <_printf_i>:
 8009450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	4691      	mov	r9, r2
 8009458:	7e27      	ldrb	r7, [r4, #24]
 800945a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800945c:	2f78      	cmp	r7, #120	; 0x78
 800945e:	4680      	mov	r8, r0
 8009460:	469a      	mov	sl, r3
 8009462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009466:	d807      	bhi.n	8009478 <_printf_i+0x28>
 8009468:	2f62      	cmp	r7, #98	; 0x62
 800946a:	d80a      	bhi.n	8009482 <_printf_i+0x32>
 800946c:	2f00      	cmp	r7, #0
 800946e:	f000 80d8 	beq.w	8009622 <_printf_i+0x1d2>
 8009472:	2f58      	cmp	r7, #88	; 0x58
 8009474:	f000 80a3 	beq.w	80095be <_printf_i+0x16e>
 8009478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800947c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009480:	e03a      	b.n	80094f8 <_printf_i+0xa8>
 8009482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009486:	2b15      	cmp	r3, #21
 8009488:	d8f6      	bhi.n	8009478 <_printf_i+0x28>
 800948a:	a001      	add	r0, pc, #4	; (adr r0, 8009490 <_printf_i+0x40>)
 800948c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094fd 	.word	0x080094fd
 8009498:	08009479 	.word	0x08009479
 800949c:	08009479 	.word	0x08009479
 80094a0:	08009479 	.word	0x08009479
 80094a4:	08009479 	.word	0x08009479
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009479 	.word	0x08009479
 80094b0:	08009479 	.word	0x08009479
 80094b4:	08009479 	.word	0x08009479
 80094b8:	08009479 	.word	0x08009479
 80094bc:	08009609 	.word	0x08009609
 80094c0:	0800952d 	.word	0x0800952d
 80094c4:	080095eb 	.word	0x080095eb
 80094c8:	08009479 	.word	0x08009479
 80094cc:	08009479 	.word	0x08009479
 80094d0:	0800962b 	.word	0x0800962b
 80094d4:	08009479 	.word	0x08009479
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	08009479 	.word	0x08009479
 80094e0:	08009479 	.word	0x08009479
 80094e4:	080095f3 	.word	0x080095f3
 80094e8:	680b      	ldr	r3, [r1, #0]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	600a      	str	r2, [r1, #0]
 80094f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0a3      	b.n	8009644 <_printf_i+0x1f4>
 80094fc:	6825      	ldr	r5, [r4, #0]
 80094fe:	6808      	ldr	r0, [r1, #0]
 8009500:	062e      	lsls	r6, r5, #24
 8009502:	f100 0304 	add.w	r3, r0, #4
 8009506:	d50a      	bpl.n	800951e <_printf_i+0xce>
 8009508:	6805      	ldr	r5, [r0, #0]
 800950a:	600b      	str	r3, [r1, #0]
 800950c:	2d00      	cmp	r5, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xc8>
 8009510:	232d      	movs	r3, #45	; 0x2d
 8009512:	426d      	negs	r5, r5
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009518:	485e      	ldr	r0, [pc, #376]	; (8009694 <_printf_i+0x244>)
 800951a:	230a      	movs	r3, #10
 800951c:	e019      	b.n	8009552 <_printf_i+0x102>
 800951e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009522:	6805      	ldr	r5, [r0, #0]
 8009524:	600b      	str	r3, [r1, #0]
 8009526:	bf18      	it	ne
 8009528:	b22d      	sxthne	r5, r5
 800952a:	e7ef      	b.n	800950c <_printf_i+0xbc>
 800952c:	680b      	ldr	r3, [r1, #0]
 800952e:	6825      	ldr	r5, [r4, #0]
 8009530:	1d18      	adds	r0, r3, #4
 8009532:	6008      	str	r0, [r1, #0]
 8009534:	0628      	lsls	r0, r5, #24
 8009536:	d501      	bpl.n	800953c <_printf_i+0xec>
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	e002      	b.n	8009542 <_printf_i+0xf2>
 800953c:	0669      	lsls	r1, r5, #25
 800953e:	d5fb      	bpl.n	8009538 <_printf_i+0xe8>
 8009540:	881d      	ldrh	r5, [r3, #0]
 8009542:	4854      	ldr	r0, [pc, #336]	; (8009694 <_printf_i+0x244>)
 8009544:	2f6f      	cmp	r7, #111	; 0x6f
 8009546:	bf0c      	ite	eq
 8009548:	2308      	moveq	r3, #8
 800954a:	230a      	movne	r3, #10
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009552:	6866      	ldr	r6, [r4, #4]
 8009554:	60a6      	str	r6, [r4, #8]
 8009556:	2e00      	cmp	r6, #0
 8009558:	bfa2      	ittt	ge
 800955a:	6821      	ldrge	r1, [r4, #0]
 800955c:	f021 0104 	bicge.w	r1, r1, #4
 8009560:	6021      	strge	r1, [r4, #0]
 8009562:	b90d      	cbnz	r5, 8009568 <_printf_i+0x118>
 8009564:	2e00      	cmp	r6, #0
 8009566:	d04d      	beq.n	8009604 <_printf_i+0x1b4>
 8009568:	4616      	mov	r6, r2
 800956a:	fbb5 f1f3 	udiv	r1, r5, r3
 800956e:	fb03 5711 	mls	r7, r3, r1, r5
 8009572:	5dc7      	ldrb	r7, [r0, r7]
 8009574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009578:	462f      	mov	r7, r5
 800957a:	42bb      	cmp	r3, r7
 800957c:	460d      	mov	r5, r1
 800957e:	d9f4      	bls.n	800956a <_printf_i+0x11a>
 8009580:	2b08      	cmp	r3, #8
 8009582:	d10b      	bne.n	800959c <_printf_i+0x14c>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07df      	lsls	r7, r3, #31
 8009588:	d508      	bpl.n	800959c <_printf_i+0x14c>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6861      	ldr	r1, [r4, #4]
 800958e:	4299      	cmp	r1, r3
 8009590:	bfde      	ittt	le
 8009592:	2330      	movle	r3, #48	; 0x30
 8009594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800959c:	1b92      	subs	r2, r2, r6
 800959e:	6122      	str	r2, [r4, #16]
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	464b      	mov	r3, r9
 80095a6:	aa03      	add	r2, sp, #12
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fee2 	bl	8009374 <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d14c      	bne.n	800964e <_printf_i+0x1fe>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	4835      	ldr	r0, [pc, #212]	; (8009694 <_printf_i+0x244>)
 80095c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	680e      	ldr	r6, [r1, #0]
 80095c8:	061f      	lsls	r7, r3, #24
 80095ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80095ce:	600e      	str	r6, [r1, #0]
 80095d0:	d514      	bpl.n	80095fc <_printf_i+0x1ac>
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b91d      	cbnz	r5, 80095e6 <_printf_i+0x196>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f023 0320 	bic.w	r3, r3, #32
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	2310      	movs	r3, #16
 80095e8:	e7b0      	b.n	800954c <_printf_i+0xfc>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f043 0320 	orr.w	r3, r3, #32
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	2378      	movs	r3, #120	; 0x78
 80095f4:	4828      	ldr	r0, [pc, #160]	; (8009698 <_printf_i+0x248>)
 80095f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095fa:	e7e3      	b.n	80095c4 <_printf_i+0x174>
 80095fc:	065e      	lsls	r6, r3, #25
 80095fe:	bf48      	it	mi
 8009600:	b2ad      	uxthmi	r5, r5
 8009602:	e7e6      	b.n	80095d2 <_printf_i+0x182>
 8009604:	4616      	mov	r6, r2
 8009606:	e7bb      	b.n	8009580 <_printf_i+0x130>
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	6826      	ldr	r6, [r4, #0]
 800960c:	6960      	ldr	r0, [r4, #20]
 800960e:	1d1d      	adds	r5, r3, #4
 8009610:	600d      	str	r5, [r1, #0]
 8009612:	0635      	lsls	r5, r6, #24
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	d501      	bpl.n	800961c <_printf_i+0x1cc>
 8009618:	6018      	str	r0, [r3, #0]
 800961a:	e002      	b.n	8009622 <_printf_i+0x1d2>
 800961c:	0671      	lsls	r1, r6, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0x1c8>
 8009620:	8018      	strh	r0, [r3, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	4616      	mov	r6, r2
 8009628:	e7ba      	b.n	80095a0 <_printf_i+0x150>
 800962a:	680b      	ldr	r3, [r1, #0]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	600a      	str	r2, [r1, #0]
 8009630:	681e      	ldr	r6, [r3, #0]
 8009632:	6862      	ldr	r2, [r4, #4]
 8009634:	2100      	movs	r1, #0
 8009636:	4630      	mov	r0, r6
 8009638:	f7f6 fdba 	bl	80001b0 <memchr>
 800963c:	b108      	cbz	r0, 8009642 <_printf_i+0x1f2>
 800963e:	1b80      	subs	r0, r0, r6
 8009640:	6060      	str	r0, [r4, #4]
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	2300      	movs	r3, #0
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964c:	e7a8      	b.n	80095a0 <_printf_i+0x150>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	4632      	mov	r2, r6
 8009652:	4649      	mov	r1, r9
 8009654:	4640      	mov	r0, r8
 8009656:	47d0      	blx	sl
 8009658:	3001      	adds	r0, #1
 800965a:	d0ab      	beq.n	80095b4 <_printf_i+0x164>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	079b      	lsls	r3, r3, #30
 8009660:	d413      	bmi.n	800968a <_printf_i+0x23a>
 8009662:	68e0      	ldr	r0, [r4, #12]
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	4298      	cmp	r0, r3
 8009668:	bfb8      	it	lt
 800966a:	4618      	movlt	r0, r3
 800966c:	e7a4      	b.n	80095b8 <_printf_i+0x168>
 800966e:	2301      	movs	r3, #1
 8009670:	4632      	mov	r2, r6
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d09b      	beq.n	80095b4 <_printf_i+0x164>
 800967c:	3501      	adds	r5, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	9903      	ldr	r1, [sp, #12]
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	42ab      	cmp	r3, r5
 8009686:	dcf2      	bgt.n	800966e <_printf_i+0x21e>
 8009688:	e7eb      	b.n	8009662 <_printf_i+0x212>
 800968a:	2500      	movs	r5, #0
 800968c:	f104 0619 	add.w	r6, r4, #25
 8009690:	e7f5      	b.n	800967e <_printf_i+0x22e>
 8009692:	bf00      	nop
 8009694:	0800c37a 	.word	0x0800c37a
 8009698:	0800c38b 	.word	0x0800c38b

0800969c <_perror_r>:
 800969c:	6983      	ldr	r3, [r0, #24]
 800969e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a0:	68c4      	ldr	r4, [r0, #12]
 80096a2:	4605      	mov	r5, r0
 80096a4:	460e      	mov	r6, r1
 80096a6:	b90b      	cbnz	r3, 80096ac <_perror_r+0x10>
 80096a8:	f001 fbc4 	bl	800ae34 <__sinit>
 80096ac:	4b43      	ldr	r3, [pc, #268]	; (80097bc <_perror_r+0x120>)
 80096ae:	429c      	cmp	r4, r3
 80096b0:	d132      	bne.n	8009718 <_perror_r+0x7c>
 80096b2:	686c      	ldr	r4, [r5, #4]
 80096b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096b6:	07d8      	lsls	r0, r3, #31
 80096b8:	d405      	bmi.n	80096c6 <_perror_r+0x2a>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	0599      	lsls	r1, r3, #22
 80096be:	d402      	bmi.n	80096c6 <_perror_r+0x2a>
 80096c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c2:	f001 fc5a 	bl	800af7a <__retarget_lock_acquire_recursive>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4628      	mov	r0, r5
 80096ca:	f001 fae1 	bl	800ac90 <_fflush_r>
 80096ce:	bb6e      	cbnz	r6, 800972c <_perror_r+0x90>
 80096d0:	6829      	ldr	r1, [r5, #0]
 80096d2:	ab01      	add	r3, sp, #4
 80096d4:	2201      	movs	r2, #1
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 f920 	bl	800991c <_strerror_r>
 80096dc:	4607      	mov	r7, r0
 80096de:	2800      	cmp	r0, #0
 80096e0:	d14f      	bne.n	8009782 <_perror_r+0xe6>
 80096e2:	4837      	ldr	r0, [pc, #220]	; (80097c0 <_perror_r+0x124>)
 80096e4:	4f36      	ldr	r7, [pc, #216]	; (80097c0 <_perror_r+0x124>)
 80096e6:	f7f6 fd55 	bl	8000194 <strlen>
 80096ea:	4606      	mov	r6, r0
 80096ec:	b156      	cbz	r6, 8009704 <_perror_r+0x68>
 80096ee:	4620      	mov	r0, r4
 80096f0:	f001 fb0a 	bl	800ad08 <fileno>
 80096f4:	4633      	mov	r3, r6
 80096f6:	4601      	mov	r1, r0
 80096f8:	463a      	mov	r2, r7
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 fb48 	bl	8009d90 <_write_r>
 8009700:	2800      	cmp	r0, #0
 8009702:	da51      	bge.n	80097a8 <_perror_r+0x10c>
 8009704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009708:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800970a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800970e:	07d2      	lsls	r2, r2, #31
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	d54c      	bpl.n	80097ae <_perror_r+0x112>
 8009714:	b003      	add	sp, #12
 8009716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009718:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <_perror_r+0x128>)
 800971a:	429c      	cmp	r4, r3
 800971c:	d101      	bne.n	8009722 <_perror_r+0x86>
 800971e:	68ac      	ldr	r4, [r5, #8]
 8009720:	e7c8      	b.n	80096b4 <_perror_r+0x18>
 8009722:	4b29      	ldr	r3, [pc, #164]	; (80097c8 <_perror_r+0x12c>)
 8009724:	429c      	cmp	r4, r3
 8009726:	bf08      	it	eq
 8009728:	68ec      	ldreq	r4, [r5, #12]
 800972a:	e7c3      	b.n	80096b4 <_perror_r+0x18>
 800972c:	7833      	ldrb	r3, [r6, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0ce      	beq.n	80096d0 <_perror_r+0x34>
 8009732:	4630      	mov	r0, r6
 8009734:	f7f6 fd2e 	bl	8000194 <strlen>
 8009738:	4607      	mov	r7, r0
 800973a:	b157      	cbz	r7, 8009752 <_perror_r+0xb6>
 800973c:	4620      	mov	r0, r4
 800973e:	f001 fae3 	bl	800ad08 <fileno>
 8009742:	463b      	mov	r3, r7
 8009744:	4601      	mov	r1, r0
 8009746:	4632      	mov	r2, r6
 8009748:	4628      	mov	r0, r5
 800974a:	f000 fb21 	bl	8009d90 <_write_r>
 800974e:	2800      	cmp	r0, #0
 8009750:	da14      	bge.n	800977c <_perror_r+0xe0>
 8009752:	481e      	ldr	r0, [pc, #120]	; (80097cc <_perror_r+0x130>)
 8009754:	4f1d      	ldr	r7, [pc, #116]	; (80097cc <_perror_r+0x130>)
 8009756:	f7f6 fd1d 	bl	8000194 <strlen>
 800975a:	4606      	mov	r6, r0
 800975c:	2e00      	cmp	r6, #0
 800975e:	d0b7      	beq.n	80096d0 <_perror_r+0x34>
 8009760:	4620      	mov	r0, r4
 8009762:	f001 fad1 	bl	800ad08 <fileno>
 8009766:	4633      	mov	r3, r6
 8009768:	4601      	mov	r1, r0
 800976a:	463a      	mov	r2, r7
 800976c:	4628      	mov	r0, r5
 800976e:	f000 fb0f 	bl	8009d90 <_write_r>
 8009772:	2800      	cmp	r0, #0
 8009774:	dbac      	blt.n	80096d0 <_perror_r+0x34>
 8009776:	1a36      	subs	r6, r6, r0
 8009778:	4407      	add	r7, r0
 800977a:	e7ef      	b.n	800975c <_perror_r+0xc0>
 800977c:	1a3f      	subs	r7, r7, r0
 800977e:	4406      	add	r6, r0
 8009780:	e7db      	b.n	800973a <_perror_r+0x9e>
 8009782:	f7f6 fd07 	bl	8000194 <strlen>
 8009786:	4606      	mov	r6, r0
 8009788:	2e00      	cmp	r6, #0
 800978a:	d0aa      	beq.n	80096e2 <_perror_r+0x46>
 800978c:	4620      	mov	r0, r4
 800978e:	f001 fabb 	bl	800ad08 <fileno>
 8009792:	4633      	mov	r3, r6
 8009794:	4601      	mov	r1, r0
 8009796:	463a      	mov	r2, r7
 8009798:	4628      	mov	r0, r5
 800979a:	f000 faf9 	bl	8009d90 <_write_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	db9f      	blt.n	80096e2 <_perror_r+0x46>
 80097a2:	1a36      	subs	r6, r6, r0
 80097a4:	4407      	add	r7, r0
 80097a6:	e7ef      	b.n	8009788 <_perror_r+0xec>
 80097a8:	1a36      	subs	r6, r6, r0
 80097aa:	4407      	add	r7, r0
 80097ac:	e79e      	b.n	80096ec <_perror_r+0x50>
 80097ae:	059b      	lsls	r3, r3, #22
 80097b0:	d4b0      	bmi.n	8009714 <_perror_r+0x78>
 80097b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097b4:	f001 fbe2 	bl	800af7c <__retarget_lock_release_recursive>
 80097b8:	e7ac      	b.n	8009714 <_perror_r+0x78>
 80097ba:	bf00      	nop
 80097bc:	0800cae8 	.word	0x0800cae8
 80097c0:	0800ccdf 	.word	0x0800ccdf
 80097c4:	0800cb08 	.word	0x0800cb08
 80097c8:	0800cac8 	.word	0x0800cac8
 80097cc:	0800ccaf 	.word	0x0800ccaf

080097d0 <perror>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	; (80097dc <perror+0xc>)
 80097d2:	4601      	mov	r1, r0
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f7ff bf61 	b.w	800969c <_perror_r>
 80097da:	bf00      	nop
 80097dc:	2000000c 	.word	0x2000000c

080097e0 <iprintf>:
 80097e0:	b40f      	push	{r0, r1, r2, r3}
 80097e2:	4b0a      	ldr	r3, [pc, #40]	; (800980c <iprintf+0x2c>)
 80097e4:	b513      	push	{r0, r1, r4, lr}
 80097e6:	681c      	ldr	r4, [r3, #0]
 80097e8:	b124      	cbz	r4, 80097f4 <iprintf+0x14>
 80097ea:	69a3      	ldr	r3, [r4, #24]
 80097ec:	b913      	cbnz	r3, 80097f4 <iprintf+0x14>
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 fb20 	bl	800ae34 <__sinit>
 80097f4:	ab05      	add	r3, sp, #20
 80097f6:	9a04      	ldr	r2, [sp, #16]
 80097f8:	68a1      	ldr	r1, [r4, #8]
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	4620      	mov	r0, r4
 80097fe:	f001 fff5 	bl	800b7ec <_vfiprintf_r>
 8009802:	b002      	add	sp, #8
 8009804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009808:	b004      	add	sp, #16
 800980a:	4770      	bx	lr
 800980c:	2000000c 	.word	0x2000000c

08009810 <_puts_r>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	460e      	mov	r6, r1
 8009814:	4605      	mov	r5, r0
 8009816:	b118      	cbz	r0, 8009820 <_puts_r+0x10>
 8009818:	6983      	ldr	r3, [r0, #24]
 800981a:	b90b      	cbnz	r3, 8009820 <_puts_r+0x10>
 800981c:	f001 fb0a 	bl	800ae34 <__sinit>
 8009820:	69ab      	ldr	r3, [r5, #24]
 8009822:	68ac      	ldr	r4, [r5, #8]
 8009824:	b913      	cbnz	r3, 800982c <_puts_r+0x1c>
 8009826:	4628      	mov	r0, r5
 8009828:	f001 fb04 	bl	800ae34 <__sinit>
 800982c:	4b2c      	ldr	r3, [pc, #176]	; (80098e0 <_puts_r+0xd0>)
 800982e:	429c      	cmp	r4, r3
 8009830:	d120      	bne.n	8009874 <_puts_r+0x64>
 8009832:	686c      	ldr	r4, [r5, #4]
 8009834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009836:	07db      	lsls	r3, r3, #31
 8009838:	d405      	bmi.n	8009846 <_puts_r+0x36>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	0598      	lsls	r0, r3, #22
 800983e:	d402      	bmi.n	8009846 <_puts_r+0x36>
 8009840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009842:	f001 fb9a 	bl	800af7a <__retarget_lock_acquire_recursive>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	d51d      	bpl.n	8009888 <_puts_r+0x78>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b1db      	cbz	r3, 8009888 <_puts_r+0x78>
 8009850:	3e01      	subs	r6, #1
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009858:	3b01      	subs	r3, #1
 800985a:	60a3      	str	r3, [r4, #8]
 800985c:	bb39      	cbnz	r1, 80098ae <_puts_r+0x9e>
 800985e:	2b00      	cmp	r3, #0
 8009860:	da38      	bge.n	80098d4 <_puts_r+0xc4>
 8009862:	4622      	mov	r2, r4
 8009864:	210a      	movs	r1, #10
 8009866:	4628      	mov	r0, r5
 8009868:	f000 fa40 	bl	8009cec <__swbuf_r>
 800986c:	3001      	adds	r0, #1
 800986e:	d011      	beq.n	8009894 <_puts_r+0x84>
 8009870:	250a      	movs	r5, #10
 8009872:	e011      	b.n	8009898 <_puts_r+0x88>
 8009874:	4b1b      	ldr	r3, [pc, #108]	; (80098e4 <_puts_r+0xd4>)
 8009876:	429c      	cmp	r4, r3
 8009878:	d101      	bne.n	800987e <_puts_r+0x6e>
 800987a:	68ac      	ldr	r4, [r5, #8]
 800987c:	e7da      	b.n	8009834 <_puts_r+0x24>
 800987e:	4b1a      	ldr	r3, [pc, #104]	; (80098e8 <_puts_r+0xd8>)
 8009880:	429c      	cmp	r4, r3
 8009882:	bf08      	it	eq
 8009884:	68ec      	ldreq	r4, [r5, #12]
 8009886:	e7d5      	b.n	8009834 <_puts_r+0x24>
 8009888:	4621      	mov	r1, r4
 800988a:	4628      	mov	r0, r5
 800988c:	f000 fa92 	bl	8009db4 <__swsetup_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	d0dd      	beq.n	8009850 <_puts_r+0x40>
 8009894:	f04f 35ff 	mov.w	r5, #4294967295
 8009898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800989a:	07da      	lsls	r2, r3, #31
 800989c:	d405      	bmi.n	80098aa <_puts_r+0x9a>
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	059b      	lsls	r3, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_puts_r+0x9a>
 80098a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a6:	f001 fb69 	bl	800af7c <__retarget_lock_release_recursive>
 80098aa:	4628      	mov	r0, r5
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da04      	bge.n	80098bc <_puts_r+0xac>
 80098b2:	69a2      	ldr	r2, [r4, #24]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	dc06      	bgt.n	80098c6 <_puts_r+0xb6>
 80098b8:	290a      	cmp	r1, #10
 80098ba:	d004      	beq.n	80098c6 <_puts_r+0xb6>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	6022      	str	r2, [r4, #0]
 80098c2:	7019      	strb	r1, [r3, #0]
 80098c4:	e7c5      	b.n	8009852 <_puts_r+0x42>
 80098c6:	4622      	mov	r2, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 fa0f 	bl	8009cec <__swbuf_r>
 80098ce:	3001      	adds	r0, #1
 80098d0:	d1bf      	bne.n	8009852 <_puts_r+0x42>
 80098d2:	e7df      	b.n	8009894 <_puts_r+0x84>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	250a      	movs	r5, #10
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	6022      	str	r2, [r4, #0]
 80098dc:	701d      	strb	r5, [r3, #0]
 80098de:	e7db      	b.n	8009898 <_puts_r+0x88>
 80098e0:	0800cae8 	.word	0x0800cae8
 80098e4:	0800cb08 	.word	0x0800cb08
 80098e8:	0800cac8 	.word	0x0800cac8

080098ec <puts>:
 80098ec:	4b02      	ldr	r3, [pc, #8]	; (80098f8 <puts+0xc>)
 80098ee:	4601      	mov	r1, r0
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f7ff bf8d 	b.w	8009810 <_puts_r>
 80098f6:	bf00      	nop
 80098f8:	2000000c 	.word	0x2000000c

080098fc <_sbrk_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d06      	ldr	r5, [pc, #24]	; (8009918 <_sbrk_r+0x1c>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f7f7 ffb8 	bl	800187c <_sbrk>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_sbrk_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_sbrk_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000600 	.word	0x20000600

0800991c <_strerror_r>:
 800991c:	b510      	push	{r4, lr}
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	288e      	cmp	r0, #142	; 0x8e
 8009926:	f200 812f 	bhi.w	8009b88 <_strerror_r+0x26c>
 800992a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800992e:	0138      	.short	0x0138
 8009930:	0091008f 	.word	0x0091008f
 8009934:	00950093 	.word	0x00950093
 8009938:	00990097 	.word	0x00990097
 800993c:	009d009b 	.word	0x009d009b
 8009940:	00a300a1 	.word	0x00a300a1
 8009944:	00a900a7 	.word	0x00a900a7
 8009948:	00ad00ab 	.word	0x00ad00ab
 800994c:	00af012d 	.word	0x00af012d
 8009950:	00b300b1 	.word	0x00b300b1
 8009954:	00b700b5 	.word	0x00b700b5
 8009958:	00bf00bd 	.word	0x00bf00bd
 800995c:	00c700c5 	.word	0x00c700c5
 8009960:	00cb00c9 	.word	0x00cb00c9
 8009964:	00d100cd 	.word	0x00d100cd
 8009968:	00d700d5 	.word	0x00d700d5
 800996c:	00db00d9 	.word	0x00db00d9
 8009970:	00df00dd 	.word	0x00df00dd
 8009974:	00e300e1 	.word	0x00e300e1
 8009978:	012d012d 	.word	0x012d012d
 800997c:	012d012d 	.word	0x012d012d
 8009980:	012d012d 	.word	0x012d012d
 8009984:	012d012d 	.word	0x012d012d
 8009988:	00eb00e7 	.word	0x00eb00e7
 800998c:	012d012d 	.word	0x012d012d
 8009990:	012d012d 	.word	0x012d012d
 8009994:	012d012d 	.word	0x012d012d
 8009998:	012d012d 	.word	0x012d012d
 800999c:	012d012d 	.word	0x012d012d
 80099a0:	012d012d 	.word	0x012d012d
 80099a4:	00ed012d 	.word	0x00ed012d
 80099a8:	00ef0107 	.word	0x00ef0107
 80099ac:	012d00f1 	.word	0x012d00f1
 80099b0:	012d012d 	.word	0x012d012d
 80099b4:	012d00f3 	.word	0x012d00f3
 80099b8:	012d012d 	.word	0x012d012d
 80099bc:	012d00f5 	.word	0x012d00f5
 80099c0:	00f9012d 	.word	0x00f9012d
 80099c4:	012d012d 	.word	0x012d012d
 80099c8:	012d00fb 	.word	0x012d00fb
 80099cc:	012d012d 	.word	0x012d012d
 80099d0:	012d012d 	.word	0x012d012d
 80099d4:	012d012d 	.word	0x012d012d
 80099d8:	012d012d 	.word	0x012d012d
 80099dc:	00fd012d 	.word	0x00fd012d
 80099e0:	00ff012d 	.word	0x00ff012d
 80099e4:	01030101 	.word	0x01030101
 80099e8:	012d012d 	.word	0x012d012d
 80099ec:	012d0125 	.word	0x012d0125
 80099f0:	012d012d 	.word	0x012d012d
 80099f4:	012d012d 	.word	0x012d012d
 80099f8:	012d012d 	.word	0x012d012d
 80099fc:	0113012d 	.word	0x0113012d
 8009a00:	01090105 	.word	0x01090105
 8009a04:	010d010b 	.word	0x010d010b
 8009a08:	012d010f 	.word	0x012d010f
 8009a0c:	01150111 	.word	0x01150111
 8009a10:	00e90119 	.word	0x00e90119
 8009a14:	012b00c1 	.word	0x012b00c1
 8009a18:	00cf00b9 	.word	0x00cf00b9
 8009a1c:	009f00bb 	.word	0x009f00bb
 8009a20:	012900a5 	.word	0x012900a5
 8009a24:	012d00f7 	.word	0x012d00f7
 8009a28:	00c30117 	.word	0x00c30117
 8009a2c:	011b011d 	.word	0x011b011d
 8009a30:	012d012d 	.word	0x012d012d
 8009a34:	012d012d 	.word	0x012d012d
 8009a38:	00d3012d 	.word	0x00d3012d
 8009a3c:	012d012d 	.word	0x012d012d
 8009a40:	00e5012d 	.word	0x00e5012d
 8009a44:	011f0127 	.word	0x011f0127
 8009a48:	01230121 	.word	0x01230121
 8009a4c:	4855      	ldr	r0, [pc, #340]	; (8009ba4 <_strerror_r+0x288>)
 8009a4e:	bd10      	pop	{r4, pc}
 8009a50:	4855      	ldr	r0, [pc, #340]	; (8009ba8 <_strerror_r+0x28c>)
 8009a52:	e7fc      	b.n	8009a4e <_strerror_r+0x132>
 8009a54:	4855      	ldr	r0, [pc, #340]	; (8009bac <_strerror_r+0x290>)
 8009a56:	e7fa      	b.n	8009a4e <_strerror_r+0x132>
 8009a58:	4855      	ldr	r0, [pc, #340]	; (8009bb0 <_strerror_r+0x294>)
 8009a5a:	e7f8      	b.n	8009a4e <_strerror_r+0x132>
 8009a5c:	4855      	ldr	r0, [pc, #340]	; (8009bb4 <_strerror_r+0x298>)
 8009a5e:	e7f6      	b.n	8009a4e <_strerror_r+0x132>
 8009a60:	4855      	ldr	r0, [pc, #340]	; (8009bb8 <_strerror_r+0x29c>)
 8009a62:	e7f4      	b.n	8009a4e <_strerror_r+0x132>
 8009a64:	4855      	ldr	r0, [pc, #340]	; (8009bbc <_strerror_r+0x2a0>)
 8009a66:	e7f2      	b.n	8009a4e <_strerror_r+0x132>
 8009a68:	4855      	ldr	r0, [pc, #340]	; (8009bc0 <_strerror_r+0x2a4>)
 8009a6a:	e7f0      	b.n	8009a4e <_strerror_r+0x132>
 8009a6c:	4855      	ldr	r0, [pc, #340]	; (8009bc4 <_strerror_r+0x2a8>)
 8009a6e:	e7ee      	b.n	8009a4e <_strerror_r+0x132>
 8009a70:	4855      	ldr	r0, [pc, #340]	; (8009bc8 <_strerror_r+0x2ac>)
 8009a72:	e7ec      	b.n	8009a4e <_strerror_r+0x132>
 8009a74:	4855      	ldr	r0, [pc, #340]	; (8009bcc <_strerror_r+0x2b0>)
 8009a76:	e7ea      	b.n	8009a4e <_strerror_r+0x132>
 8009a78:	4855      	ldr	r0, [pc, #340]	; (8009bd0 <_strerror_r+0x2b4>)
 8009a7a:	e7e8      	b.n	8009a4e <_strerror_r+0x132>
 8009a7c:	4855      	ldr	r0, [pc, #340]	; (8009bd4 <_strerror_r+0x2b8>)
 8009a7e:	e7e6      	b.n	8009a4e <_strerror_r+0x132>
 8009a80:	4855      	ldr	r0, [pc, #340]	; (8009bd8 <_strerror_r+0x2bc>)
 8009a82:	e7e4      	b.n	8009a4e <_strerror_r+0x132>
 8009a84:	4855      	ldr	r0, [pc, #340]	; (8009bdc <_strerror_r+0x2c0>)
 8009a86:	e7e2      	b.n	8009a4e <_strerror_r+0x132>
 8009a88:	4855      	ldr	r0, [pc, #340]	; (8009be0 <_strerror_r+0x2c4>)
 8009a8a:	e7e0      	b.n	8009a4e <_strerror_r+0x132>
 8009a8c:	4855      	ldr	r0, [pc, #340]	; (8009be4 <_strerror_r+0x2c8>)
 8009a8e:	e7de      	b.n	8009a4e <_strerror_r+0x132>
 8009a90:	4855      	ldr	r0, [pc, #340]	; (8009be8 <_strerror_r+0x2cc>)
 8009a92:	e7dc      	b.n	8009a4e <_strerror_r+0x132>
 8009a94:	4855      	ldr	r0, [pc, #340]	; (8009bec <_strerror_r+0x2d0>)
 8009a96:	e7da      	b.n	8009a4e <_strerror_r+0x132>
 8009a98:	4855      	ldr	r0, [pc, #340]	; (8009bf0 <_strerror_r+0x2d4>)
 8009a9a:	e7d8      	b.n	8009a4e <_strerror_r+0x132>
 8009a9c:	4855      	ldr	r0, [pc, #340]	; (8009bf4 <_strerror_r+0x2d8>)
 8009a9e:	e7d6      	b.n	8009a4e <_strerror_r+0x132>
 8009aa0:	4855      	ldr	r0, [pc, #340]	; (8009bf8 <_strerror_r+0x2dc>)
 8009aa2:	e7d4      	b.n	8009a4e <_strerror_r+0x132>
 8009aa4:	4855      	ldr	r0, [pc, #340]	; (8009bfc <_strerror_r+0x2e0>)
 8009aa6:	e7d2      	b.n	8009a4e <_strerror_r+0x132>
 8009aa8:	4855      	ldr	r0, [pc, #340]	; (8009c00 <_strerror_r+0x2e4>)
 8009aaa:	e7d0      	b.n	8009a4e <_strerror_r+0x132>
 8009aac:	4855      	ldr	r0, [pc, #340]	; (8009c04 <_strerror_r+0x2e8>)
 8009aae:	e7ce      	b.n	8009a4e <_strerror_r+0x132>
 8009ab0:	4855      	ldr	r0, [pc, #340]	; (8009c08 <_strerror_r+0x2ec>)
 8009ab2:	e7cc      	b.n	8009a4e <_strerror_r+0x132>
 8009ab4:	4855      	ldr	r0, [pc, #340]	; (8009c0c <_strerror_r+0x2f0>)
 8009ab6:	e7ca      	b.n	8009a4e <_strerror_r+0x132>
 8009ab8:	4855      	ldr	r0, [pc, #340]	; (8009c10 <_strerror_r+0x2f4>)
 8009aba:	e7c8      	b.n	8009a4e <_strerror_r+0x132>
 8009abc:	4855      	ldr	r0, [pc, #340]	; (8009c14 <_strerror_r+0x2f8>)
 8009abe:	e7c6      	b.n	8009a4e <_strerror_r+0x132>
 8009ac0:	4855      	ldr	r0, [pc, #340]	; (8009c18 <_strerror_r+0x2fc>)
 8009ac2:	e7c4      	b.n	8009a4e <_strerror_r+0x132>
 8009ac4:	4855      	ldr	r0, [pc, #340]	; (8009c1c <_strerror_r+0x300>)
 8009ac6:	e7c2      	b.n	8009a4e <_strerror_r+0x132>
 8009ac8:	4855      	ldr	r0, [pc, #340]	; (8009c20 <_strerror_r+0x304>)
 8009aca:	e7c0      	b.n	8009a4e <_strerror_r+0x132>
 8009acc:	4855      	ldr	r0, [pc, #340]	; (8009c24 <_strerror_r+0x308>)
 8009ace:	e7be      	b.n	8009a4e <_strerror_r+0x132>
 8009ad0:	4855      	ldr	r0, [pc, #340]	; (8009c28 <_strerror_r+0x30c>)
 8009ad2:	e7bc      	b.n	8009a4e <_strerror_r+0x132>
 8009ad4:	4855      	ldr	r0, [pc, #340]	; (8009c2c <_strerror_r+0x310>)
 8009ad6:	e7ba      	b.n	8009a4e <_strerror_r+0x132>
 8009ad8:	4855      	ldr	r0, [pc, #340]	; (8009c30 <_strerror_r+0x314>)
 8009ada:	e7b8      	b.n	8009a4e <_strerror_r+0x132>
 8009adc:	4855      	ldr	r0, [pc, #340]	; (8009c34 <_strerror_r+0x318>)
 8009ade:	e7b6      	b.n	8009a4e <_strerror_r+0x132>
 8009ae0:	4855      	ldr	r0, [pc, #340]	; (8009c38 <_strerror_r+0x31c>)
 8009ae2:	e7b4      	b.n	8009a4e <_strerror_r+0x132>
 8009ae4:	4855      	ldr	r0, [pc, #340]	; (8009c3c <_strerror_r+0x320>)
 8009ae6:	e7b2      	b.n	8009a4e <_strerror_r+0x132>
 8009ae8:	4855      	ldr	r0, [pc, #340]	; (8009c40 <_strerror_r+0x324>)
 8009aea:	e7b0      	b.n	8009a4e <_strerror_r+0x132>
 8009aec:	4855      	ldr	r0, [pc, #340]	; (8009c44 <_strerror_r+0x328>)
 8009aee:	e7ae      	b.n	8009a4e <_strerror_r+0x132>
 8009af0:	4855      	ldr	r0, [pc, #340]	; (8009c48 <_strerror_r+0x32c>)
 8009af2:	e7ac      	b.n	8009a4e <_strerror_r+0x132>
 8009af4:	4855      	ldr	r0, [pc, #340]	; (8009c4c <_strerror_r+0x330>)
 8009af6:	e7aa      	b.n	8009a4e <_strerror_r+0x132>
 8009af8:	4855      	ldr	r0, [pc, #340]	; (8009c50 <_strerror_r+0x334>)
 8009afa:	e7a8      	b.n	8009a4e <_strerror_r+0x132>
 8009afc:	4855      	ldr	r0, [pc, #340]	; (8009c54 <_strerror_r+0x338>)
 8009afe:	e7a6      	b.n	8009a4e <_strerror_r+0x132>
 8009b00:	4855      	ldr	r0, [pc, #340]	; (8009c58 <_strerror_r+0x33c>)
 8009b02:	e7a4      	b.n	8009a4e <_strerror_r+0x132>
 8009b04:	4855      	ldr	r0, [pc, #340]	; (8009c5c <_strerror_r+0x340>)
 8009b06:	e7a2      	b.n	8009a4e <_strerror_r+0x132>
 8009b08:	4855      	ldr	r0, [pc, #340]	; (8009c60 <_strerror_r+0x344>)
 8009b0a:	e7a0      	b.n	8009a4e <_strerror_r+0x132>
 8009b0c:	4855      	ldr	r0, [pc, #340]	; (8009c64 <_strerror_r+0x348>)
 8009b0e:	e79e      	b.n	8009a4e <_strerror_r+0x132>
 8009b10:	4855      	ldr	r0, [pc, #340]	; (8009c68 <_strerror_r+0x34c>)
 8009b12:	e79c      	b.n	8009a4e <_strerror_r+0x132>
 8009b14:	4855      	ldr	r0, [pc, #340]	; (8009c6c <_strerror_r+0x350>)
 8009b16:	e79a      	b.n	8009a4e <_strerror_r+0x132>
 8009b18:	4855      	ldr	r0, [pc, #340]	; (8009c70 <_strerror_r+0x354>)
 8009b1a:	e798      	b.n	8009a4e <_strerror_r+0x132>
 8009b1c:	4855      	ldr	r0, [pc, #340]	; (8009c74 <_strerror_r+0x358>)
 8009b1e:	e796      	b.n	8009a4e <_strerror_r+0x132>
 8009b20:	4855      	ldr	r0, [pc, #340]	; (8009c78 <_strerror_r+0x35c>)
 8009b22:	e794      	b.n	8009a4e <_strerror_r+0x132>
 8009b24:	4855      	ldr	r0, [pc, #340]	; (8009c7c <_strerror_r+0x360>)
 8009b26:	e792      	b.n	8009a4e <_strerror_r+0x132>
 8009b28:	4855      	ldr	r0, [pc, #340]	; (8009c80 <_strerror_r+0x364>)
 8009b2a:	e790      	b.n	8009a4e <_strerror_r+0x132>
 8009b2c:	4855      	ldr	r0, [pc, #340]	; (8009c84 <_strerror_r+0x368>)
 8009b2e:	e78e      	b.n	8009a4e <_strerror_r+0x132>
 8009b30:	4855      	ldr	r0, [pc, #340]	; (8009c88 <_strerror_r+0x36c>)
 8009b32:	e78c      	b.n	8009a4e <_strerror_r+0x132>
 8009b34:	4855      	ldr	r0, [pc, #340]	; (8009c8c <_strerror_r+0x370>)
 8009b36:	e78a      	b.n	8009a4e <_strerror_r+0x132>
 8009b38:	4855      	ldr	r0, [pc, #340]	; (8009c90 <_strerror_r+0x374>)
 8009b3a:	e788      	b.n	8009a4e <_strerror_r+0x132>
 8009b3c:	4855      	ldr	r0, [pc, #340]	; (8009c94 <_strerror_r+0x378>)
 8009b3e:	e786      	b.n	8009a4e <_strerror_r+0x132>
 8009b40:	4855      	ldr	r0, [pc, #340]	; (8009c98 <_strerror_r+0x37c>)
 8009b42:	e784      	b.n	8009a4e <_strerror_r+0x132>
 8009b44:	4855      	ldr	r0, [pc, #340]	; (8009c9c <_strerror_r+0x380>)
 8009b46:	e782      	b.n	8009a4e <_strerror_r+0x132>
 8009b48:	4855      	ldr	r0, [pc, #340]	; (8009ca0 <_strerror_r+0x384>)
 8009b4a:	e780      	b.n	8009a4e <_strerror_r+0x132>
 8009b4c:	4855      	ldr	r0, [pc, #340]	; (8009ca4 <_strerror_r+0x388>)
 8009b4e:	e77e      	b.n	8009a4e <_strerror_r+0x132>
 8009b50:	4855      	ldr	r0, [pc, #340]	; (8009ca8 <_strerror_r+0x38c>)
 8009b52:	e77c      	b.n	8009a4e <_strerror_r+0x132>
 8009b54:	4855      	ldr	r0, [pc, #340]	; (8009cac <_strerror_r+0x390>)
 8009b56:	e77a      	b.n	8009a4e <_strerror_r+0x132>
 8009b58:	4855      	ldr	r0, [pc, #340]	; (8009cb0 <_strerror_r+0x394>)
 8009b5a:	e778      	b.n	8009a4e <_strerror_r+0x132>
 8009b5c:	4855      	ldr	r0, [pc, #340]	; (8009cb4 <_strerror_r+0x398>)
 8009b5e:	e776      	b.n	8009a4e <_strerror_r+0x132>
 8009b60:	4855      	ldr	r0, [pc, #340]	; (8009cb8 <_strerror_r+0x39c>)
 8009b62:	e774      	b.n	8009a4e <_strerror_r+0x132>
 8009b64:	4855      	ldr	r0, [pc, #340]	; (8009cbc <_strerror_r+0x3a0>)
 8009b66:	e772      	b.n	8009a4e <_strerror_r+0x132>
 8009b68:	4855      	ldr	r0, [pc, #340]	; (8009cc0 <_strerror_r+0x3a4>)
 8009b6a:	e770      	b.n	8009a4e <_strerror_r+0x132>
 8009b6c:	4855      	ldr	r0, [pc, #340]	; (8009cc4 <_strerror_r+0x3a8>)
 8009b6e:	e76e      	b.n	8009a4e <_strerror_r+0x132>
 8009b70:	4855      	ldr	r0, [pc, #340]	; (8009cc8 <_strerror_r+0x3ac>)
 8009b72:	e76c      	b.n	8009a4e <_strerror_r+0x132>
 8009b74:	4855      	ldr	r0, [pc, #340]	; (8009ccc <_strerror_r+0x3b0>)
 8009b76:	e76a      	b.n	8009a4e <_strerror_r+0x132>
 8009b78:	4855      	ldr	r0, [pc, #340]	; (8009cd0 <_strerror_r+0x3b4>)
 8009b7a:	e768      	b.n	8009a4e <_strerror_r+0x132>
 8009b7c:	4855      	ldr	r0, [pc, #340]	; (8009cd4 <_strerror_r+0x3b8>)
 8009b7e:	e766      	b.n	8009a4e <_strerror_r+0x132>
 8009b80:	4855      	ldr	r0, [pc, #340]	; (8009cd8 <_strerror_r+0x3bc>)
 8009b82:	e764      	b.n	8009a4e <_strerror_r+0x132>
 8009b84:	4855      	ldr	r0, [pc, #340]	; (8009cdc <_strerror_r+0x3c0>)
 8009b86:	e762      	b.n	8009a4e <_strerror_r+0x132>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bf14      	ite	ne
 8009b8c:	461a      	movne	r2, r3
 8009b8e:	4622      	moveq	r2, r4
 8009b90:	f000 f8aa 	bl	8009ce8 <_user_strerror>
 8009b94:	4b52      	ldr	r3, [pc, #328]	; (8009ce0 <_strerror_r+0x3c4>)
 8009b96:	2800      	cmp	r0, #0
 8009b98:	bf08      	it	eq
 8009b9a:	4618      	moveq	r0, r3
 8009b9c:	e757      	b.n	8009a4e <_strerror_r+0x132>
 8009b9e:	4851      	ldr	r0, [pc, #324]	; (8009ce4 <_strerror_r+0x3c8>)
 8009ba0:	e755      	b.n	8009a4e <_strerror_r+0x132>
 8009ba2:	bf00      	nop
 8009ba4:	0800c39c 	.word	0x0800c39c
 8009ba8:	0800c3a6 	.word	0x0800c3a6
 8009bac:	0800c3c0 	.word	0x0800c3c0
 8009bb0:	0800c3d0 	.word	0x0800c3d0
 8009bb4:	0800c3e8 	.word	0x0800c3e8
 8009bb8:	0800c3f2 	.word	0x0800c3f2
 8009bbc:	0800c40c 	.word	0x0800c40c
 8009bc0:	0800c41e 	.word	0x0800c41e
 8009bc4:	0800c430 	.word	0x0800c430
 8009bc8:	0800c449 	.word	0x0800c449
 8009bcc:	0800c459 	.word	0x0800c459
 8009bd0:	0800c465 	.word	0x0800c465
 8009bd4:	0800c482 	.word	0x0800c482
 8009bd8:	0800c494 	.word	0x0800c494
 8009bdc:	0800c4a5 	.word	0x0800c4a5
 8009be0:	0800c4b7 	.word	0x0800c4b7
 8009be4:	0800c4c3 	.word	0x0800c4c3
 8009be8:	0800c4db 	.word	0x0800c4db
 8009bec:	0800c4e7 	.word	0x0800c4e7
 8009bf0:	0800c4f9 	.word	0x0800c4f9
 8009bf4:	0800c508 	.word	0x0800c508
 8009bf8:	0800c518 	.word	0x0800c518
 8009bfc:	0800c525 	.word	0x0800c525
 8009c00:	0800c544 	.word	0x0800c544
 8009c04:	0800c553 	.word	0x0800c553
 8009c08:	0800c564 	.word	0x0800c564
 8009c0c:	0800c588 	.word	0x0800c588
 8009c10:	0800c5a6 	.word	0x0800c5a6
 8009c14:	0800c5c4 	.word	0x0800c5c4
 8009c18:	0800c5e4 	.word	0x0800c5e4
 8009c1c:	0800c5fb 	.word	0x0800c5fb
 8009c20:	0800c60a 	.word	0x0800c60a
 8009c24:	0800c619 	.word	0x0800c619
 8009c28:	0800c62d 	.word	0x0800c62d
 8009c2c:	0800c645 	.word	0x0800c645
 8009c30:	0800c653 	.word	0x0800c653
 8009c34:	0800c660 	.word	0x0800c660
 8009c38:	0800c676 	.word	0x0800c676
 8009c3c:	0800c685 	.word	0x0800c685
 8009c40:	0800c691 	.word	0x0800c691
 8009c44:	0800c6c0 	.word	0x0800c6c0
 8009c48:	0800c6d1 	.word	0x0800c6d1
 8009c4c:	0800c6ec 	.word	0x0800c6ec
 8009c50:	0800c6ff 	.word	0x0800c6ff
 8009c54:	0800c715 	.word	0x0800c715
 8009c58:	0800c71e 	.word	0x0800c71e
 8009c5c:	0800c735 	.word	0x0800c735
 8009c60:	0800c73d 	.word	0x0800c73d
 8009c64:	0800c74a 	.word	0x0800c74a
 8009c68:	0800c75f 	.word	0x0800c75f
 8009c6c:	0800c773 	.word	0x0800c773
 8009c70:	0800c78b 	.word	0x0800c78b
 8009c74:	0800c79a 	.word	0x0800c79a
 8009c78:	0800c7ab 	.word	0x0800c7ab
 8009c7c:	0800c7be 	.word	0x0800c7be
 8009c80:	0800c7ca 	.word	0x0800c7ca
 8009c84:	0800c7e3 	.word	0x0800c7e3
 8009c88:	0800c7f7 	.word	0x0800c7f7
 8009c8c:	0800c812 	.word	0x0800c812
 8009c90:	0800c82a 	.word	0x0800c82a
 8009c94:	0800c844 	.word	0x0800c844
 8009c98:	0800c84c 	.word	0x0800c84c
 8009c9c:	0800c87c 	.word	0x0800c87c
 8009ca0:	0800c89b 	.word	0x0800c89b
 8009ca4:	0800c8ba 	.word	0x0800c8ba
 8009ca8:	0800c8d1 	.word	0x0800c8d1
 8009cac:	0800c8e4 	.word	0x0800c8e4
 8009cb0:	0800c8fd 	.word	0x0800c8fd
 8009cb4:	0800c914 	.word	0x0800c914
 8009cb8:	0800c92a 	.word	0x0800c92a
 8009cbc:	0800c94b 	.word	0x0800c94b
 8009cc0:	0800c963 	.word	0x0800c963
 8009cc4:	0800c97f 	.word	0x0800c97f
 8009cc8:	0800c992 	.word	0x0800c992
 8009ccc:	0800c9a8 	.word	0x0800c9a8
 8009cd0:	0800c9bc 	.word	0x0800c9bc
 8009cd4:	0800c9de 	.word	0x0800c9de
 8009cd8:	0800ca04 	.word	0x0800ca04
 8009cdc:	0800ca15 	.word	0x0800ca15
 8009ce0:	0800cce0 	.word	0x0800cce0
 8009ce4:	0800ca2a 	.word	0x0800ca2a

08009ce8 <_user_strerror>:
 8009ce8:	2000      	movs	r0, #0
 8009cea:	4770      	bx	lr

08009cec <__swbuf_r>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	460e      	mov	r6, r1
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b118      	cbz	r0, 8009cfe <__swbuf_r+0x12>
 8009cf6:	6983      	ldr	r3, [r0, #24]
 8009cf8:	b90b      	cbnz	r3, 8009cfe <__swbuf_r+0x12>
 8009cfa:	f001 f89b 	bl	800ae34 <__sinit>
 8009cfe:	4b21      	ldr	r3, [pc, #132]	; (8009d84 <__swbuf_r+0x98>)
 8009d00:	429c      	cmp	r4, r3
 8009d02:	d12b      	bne.n	8009d5c <__swbuf_r+0x70>
 8009d04:	686c      	ldr	r4, [r5, #4]
 8009d06:	69a3      	ldr	r3, [r4, #24]
 8009d08:	60a3      	str	r3, [r4, #8]
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	071a      	lsls	r2, r3, #28
 8009d0e:	d52f      	bpl.n	8009d70 <__swbuf_r+0x84>
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	b36b      	cbz	r3, 8009d70 <__swbuf_r+0x84>
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	1ac0      	subs	r0, r0, r3
 8009d1a:	6963      	ldr	r3, [r4, #20]
 8009d1c:	b2f6      	uxtb	r6, r6
 8009d1e:	4283      	cmp	r3, r0
 8009d20:	4637      	mov	r7, r6
 8009d22:	dc04      	bgt.n	8009d2e <__swbuf_r+0x42>
 8009d24:	4621      	mov	r1, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	f000 ffb2 	bl	800ac90 <_fflush_r>
 8009d2c:	bb30      	cbnz	r0, 8009d7c <__swbuf_r+0x90>
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	6022      	str	r2, [r4, #0]
 8009d3a:	701e      	strb	r6, [r3, #0]
 8009d3c:	6963      	ldr	r3, [r4, #20]
 8009d3e:	3001      	adds	r0, #1
 8009d40:	4283      	cmp	r3, r0
 8009d42:	d004      	beq.n	8009d4e <__swbuf_r+0x62>
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	07db      	lsls	r3, r3, #31
 8009d48:	d506      	bpl.n	8009d58 <__swbuf_r+0x6c>
 8009d4a:	2e0a      	cmp	r6, #10
 8009d4c:	d104      	bne.n	8009d58 <__swbuf_r+0x6c>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 ff9d 	bl	800ac90 <_fflush_r>
 8009d56:	b988      	cbnz	r0, 8009d7c <__swbuf_r+0x90>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <__swbuf_r+0x9c>)
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	d101      	bne.n	8009d66 <__swbuf_r+0x7a>
 8009d62:	68ac      	ldr	r4, [r5, #8]
 8009d64:	e7cf      	b.n	8009d06 <__swbuf_r+0x1a>
 8009d66:	4b09      	ldr	r3, [pc, #36]	; (8009d8c <__swbuf_r+0xa0>)
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	bf08      	it	eq
 8009d6c:	68ec      	ldreq	r4, [r5, #12]
 8009d6e:	e7ca      	b.n	8009d06 <__swbuf_r+0x1a>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f81e 	bl	8009db4 <__swsetup_r>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d0cb      	beq.n	8009d14 <__swbuf_r+0x28>
 8009d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d80:	e7ea      	b.n	8009d58 <__swbuf_r+0x6c>
 8009d82:	bf00      	nop
 8009d84:	0800cae8 	.word	0x0800cae8
 8009d88:	0800cb08 	.word	0x0800cb08
 8009d8c:	0800cac8 	.word	0x0800cac8

08009d90 <_write_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	; (8009db0 <_write_r+0x20>)
 8009d94:	4604      	mov	r4, r0
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	602a      	str	r2, [r5, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f7f7 fd20 	bl	80017e4 <_write>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_write_r+0x1e>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_write_r+0x1e>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20000600 	.word	0x20000600

08009db4 <__swsetup_r>:
 8009db4:	4b32      	ldr	r3, [pc, #200]	; (8009e80 <__swsetup_r+0xcc>)
 8009db6:	b570      	push	{r4, r5, r6, lr}
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	4606      	mov	r6, r0
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	b125      	cbz	r5, 8009dca <__swsetup_r+0x16>
 8009dc0:	69ab      	ldr	r3, [r5, #24]
 8009dc2:	b913      	cbnz	r3, 8009dca <__swsetup_r+0x16>
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f001 f835 	bl	800ae34 <__sinit>
 8009dca:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <__swsetup_r+0xd0>)
 8009dcc:	429c      	cmp	r4, r3
 8009dce:	d10f      	bne.n	8009df0 <__swsetup_r+0x3c>
 8009dd0:	686c      	ldr	r4, [r5, #4]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd8:	0719      	lsls	r1, r3, #28
 8009dda:	d42c      	bmi.n	8009e36 <__swsetup_r+0x82>
 8009ddc:	06dd      	lsls	r5, r3, #27
 8009dde:	d411      	bmi.n	8009e04 <__swsetup_r+0x50>
 8009de0:	2309      	movs	r3, #9
 8009de2:	6033      	str	r3, [r6, #0]
 8009de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	e03e      	b.n	8009e6e <__swsetup_r+0xba>
 8009df0:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <__swsetup_r+0xd4>)
 8009df2:	429c      	cmp	r4, r3
 8009df4:	d101      	bne.n	8009dfa <__swsetup_r+0x46>
 8009df6:	68ac      	ldr	r4, [r5, #8]
 8009df8:	e7eb      	b.n	8009dd2 <__swsetup_r+0x1e>
 8009dfa:	4b24      	ldr	r3, [pc, #144]	; (8009e8c <__swsetup_r+0xd8>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	bf08      	it	eq
 8009e00:	68ec      	ldreq	r4, [r5, #12]
 8009e02:	e7e6      	b.n	8009dd2 <__swsetup_r+0x1e>
 8009e04:	0758      	lsls	r0, r3, #29
 8009e06:	d512      	bpl.n	8009e2e <__swsetup_r+0x7a>
 8009e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e0a:	b141      	cbz	r1, 8009e1e <__swsetup_r+0x6a>
 8009e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e10:	4299      	cmp	r1, r3
 8009e12:	d002      	beq.n	8009e1a <__swsetup_r+0x66>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7fe ff3d 	bl	8008c94 <_free_r>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	2300      	movs	r3, #0
 8009e28:	6063      	str	r3, [r4, #4]
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f043 0308 	orr.w	r3, r3, #8
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	b94b      	cbnz	r3, 8009e4e <__swsetup_r+0x9a>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e44:	d003      	beq.n	8009e4e <__swsetup_r+0x9a>
 8009e46:	4621      	mov	r1, r4
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f001 f8bd 	bl	800afc8 <__smakebuf_r>
 8009e4e:	89a0      	ldrh	r0, [r4, #12]
 8009e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e54:	f010 0301 	ands.w	r3, r0, #1
 8009e58:	d00a      	beq.n	8009e70 <__swsetup_r+0xbc>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60a3      	str	r3, [r4, #8]
 8009e5e:	6963      	ldr	r3, [r4, #20]
 8009e60:	425b      	negs	r3, r3
 8009e62:	61a3      	str	r3, [r4, #24]
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	b943      	cbnz	r3, 8009e7a <__swsetup_r+0xc6>
 8009e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e6c:	d1ba      	bne.n	8009de4 <__swsetup_r+0x30>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	0781      	lsls	r1, r0, #30
 8009e72:	bf58      	it	pl
 8009e74:	6963      	ldrpl	r3, [r4, #20]
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	e7f4      	b.n	8009e64 <__swsetup_r+0xb0>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	e7f7      	b.n	8009e6e <__swsetup_r+0xba>
 8009e7e:	bf00      	nop
 8009e80:	2000000c 	.word	0x2000000c
 8009e84:	0800cae8 	.word	0x0800cae8
 8009e88:	0800cb08 	.word	0x0800cb08
 8009e8c:	0800cac8 	.word	0x0800cac8

08009e90 <quorem>:
 8009e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	6903      	ldr	r3, [r0, #16]
 8009e96:	690c      	ldr	r4, [r1, #16]
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	f2c0 8081 	blt.w	8009fa2 <quorem+0x112>
 8009ea0:	3c01      	subs	r4, #1
 8009ea2:	f101 0814 	add.w	r8, r1, #20
 8009ea6:	f100 0514 	add.w	r5, r0, #20
 8009eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ec4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ec8:	d331      	bcc.n	8009f2e <quorem+0x9e>
 8009eca:	f04f 0e00 	mov.w	lr, #0
 8009ece:	4640      	mov	r0, r8
 8009ed0:	46ac      	mov	ip, r5
 8009ed2:	46f2      	mov	sl, lr
 8009ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ed8:	b293      	uxth	r3, r2
 8009eda:	fb06 e303 	mla	r3, r6, r3, lr
 8009ede:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ee8:	0c12      	lsrs	r2, r2, #16
 8009eea:	f8dc a000 	ldr.w	sl, [ip]
 8009eee:	fb06 e202 	mla	r2, r6, r2, lr
 8009ef2:	fa13 f38a 	uxtah	r3, r3, sl
 8009ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009efa:	fa1f fa82 	uxth.w	sl, r2
 8009efe:	f8dc 2000 	ldr.w	r2, [ip]
 8009f02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f10:	4581      	cmp	r9, r0
 8009f12:	f84c 3b04 	str.w	r3, [ip], #4
 8009f16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f1a:	d2db      	bcs.n	8009ed4 <quorem+0x44>
 8009f1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f20:	b92b      	cbnz	r3, 8009f2e <quorem+0x9e>
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	3b04      	subs	r3, #4
 8009f26:	429d      	cmp	r5, r3
 8009f28:	461a      	mov	r2, r3
 8009f2a:	d32e      	bcc.n	8009f8a <quorem+0xfa>
 8009f2c:	613c      	str	r4, [r7, #16]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f001 fb24 	bl	800b57c <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	db24      	blt.n	8009f82 <quorem+0xf2>
 8009f38:	3601      	adds	r6, #1
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f04f 0c00 	mov.w	ip, #0
 8009f40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f44:	f8d0 e000 	ldr.w	lr, [r0]
 8009f48:	b293      	uxth	r3, r2
 8009f4a:	ebac 0303 	sub.w	r3, ip, r3
 8009f4e:	0c12      	lsrs	r2, r2, #16
 8009f50:	fa13 f38e 	uxtah	r3, r3, lr
 8009f54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f62:	45c1      	cmp	r9, r8
 8009f64:	f840 3b04 	str.w	r3, [r0], #4
 8009f68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f6c:	d2e8      	bcs.n	8009f40 <quorem+0xb0>
 8009f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f76:	b922      	cbnz	r2, 8009f82 <quorem+0xf2>
 8009f78:	3b04      	subs	r3, #4
 8009f7a:	429d      	cmp	r5, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	d30a      	bcc.n	8009f96 <quorem+0x106>
 8009f80:	613c      	str	r4, [r7, #16]
 8009f82:	4630      	mov	r0, r6
 8009f84:	b003      	add	sp, #12
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	6812      	ldr	r2, [r2, #0]
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d1cc      	bne.n	8009f2c <quorem+0x9c>
 8009f92:	3c01      	subs	r4, #1
 8009f94:	e7c7      	b.n	8009f26 <quorem+0x96>
 8009f96:	6812      	ldr	r2, [r2, #0]
 8009f98:	3b04      	subs	r3, #4
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	d1f0      	bne.n	8009f80 <quorem+0xf0>
 8009f9e:	3c01      	subs	r4, #1
 8009fa0:	e7eb      	b.n	8009f7a <quorem+0xea>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e7ee      	b.n	8009f84 <quorem+0xf4>
	...

08009fa8 <_dtoa_r>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fae:	b099      	sub	sp, #100	; 0x64
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fb8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b974      	cbnz	r4, 8009fde <_dtoa_r+0x36>
 8009fc0:	2010      	movs	r0, #16
 8009fc2:	f7fe fe33 	bl	8008c2c <malloc>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6268      	str	r0, [r5, #36]	; 0x24
 8009fca:	b920      	cbnz	r0, 8009fd6 <_dtoa_r+0x2e>
 8009fcc:	4ba8      	ldr	r3, [pc, #672]	; (800a270 <_dtoa_r+0x2c8>)
 8009fce:	21ea      	movs	r1, #234	; 0xea
 8009fd0:	48a8      	ldr	r0, [pc, #672]	; (800a274 <_dtoa_r+0x2cc>)
 8009fd2:	f001 fd8b 	bl	800baec <__assert_func>
 8009fd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fda:	6004      	str	r4, [r0, #0]
 8009fdc:	60c4      	str	r4, [r0, #12]
 8009fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	b151      	cbz	r1, 8009ffa <_dtoa_r+0x52>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	604a      	str	r2, [r1, #4]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4093      	lsls	r3, r2
 8009fec:	608b      	str	r3, [r1, #8]
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f001 f888 	bl	800b104 <_Bfree>
 8009ff4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	1e3b      	subs	r3, r7, #0
 8009ffc:	bfb9      	ittee	lt
 8009ffe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a002:	9305      	strlt	r3, [sp, #20]
 800a004:	2300      	movge	r3, #0
 800a006:	f8c8 3000 	strge.w	r3, [r8]
 800a00a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a00e:	4b9a      	ldr	r3, [pc, #616]	; (800a278 <_dtoa_r+0x2d0>)
 800a010:	bfbc      	itt	lt
 800a012:	2201      	movlt	r2, #1
 800a014:	f8c8 2000 	strlt.w	r2, [r8]
 800a018:	ea33 0309 	bics.w	r3, r3, r9
 800a01c:	d119      	bne.n	800a052 <_dtoa_r+0xaa>
 800a01e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a020:	f242 730f 	movw	r3, #9999	; 0x270f
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a02a:	4333      	orrs	r3, r6
 800a02c:	f000 8581 	beq.w	800ab32 <_dtoa_r+0xb8a>
 800a030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a032:	b953      	cbnz	r3, 800a04a <_dtoa_r+0xa2>
 800a034:	4b91      	ldr	r3, [pc, #580]	; (800a27c <_dtoa_r+0x2d4>)
 800a036:	e022      	b.n	800a07e <_dtoa_r+0xd6>
 800a038:	4b91      	ldr	r3, [pc, #580]	; (800a280 <_dtoa_r+0x2d8>)
 800a03a:	9308      	str	r3, [sp, #32]
 800a03c:	3308      	adds	r3, #8
 800a03e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	9808      	ldr	r0, [sp, #32]
 800a044:	b019      	add	sp, #100	; 0x64
 800a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04a:	4b8c      	ldr	r3, [pc, #560]	; (800a27c <_dtoa_r+0x2d4>)
 800a04c:	9308      	str	r3, [sp, #32]
 800a04e:	3303      	adds	r3, #3
 800a050:	e7f5      	b.n	800a03e <_dtoa_r+0x96>
 800a052:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a056:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a05a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	f7f6 fd19 	bl	8000a98 <__aeabi_dcmpeq>
 800a066:	4680      	mov	r8, r0
 800a068:	b158      	cbz	r0, 800a082 <_dtoa_r+0xda>
 800a06a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a06c:	2301      	movs	r3, #1
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 855a 	beq.w	800ab2c <_dtoa_r+0xb84>
 800a078:	4882      	ldr	r0, [pc, #520]	; (800a284 <_dtoa_r+0x2dc>)
 800a07a:	6018      	str	r0, [r3, #0]
 800a07c:	1e43      	subs	r3, r0, #1
 800a07e:	9308      	str	r3, [sp, #32]
 800a080:	e7df      	b.n	800a042 <_dtoa_r+0x9a>
 800a082:	ab16      	add	r3, sp, #88	; 0x58
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	ab17      	add	r3, sp, #92	; 0x5c
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4628      	mov	r0, r5
 800a08c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a090:	f001 fb1a 	bl	800b6c8 <__d2b>
 800a094:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a098:	4682      	mov	sl, r0
 800a09a:	2c00      	cmp	r4, #0
 800a09c:	d07e      	beq.n	800a19c <_dtoa_r+0x1f4>
 800a09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0ac:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a0b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0b4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0b8:	4b73      	ldr	r3, [pc, #460]	; (800a288 <_dtoa_r+0x2e0>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7f6 f8cc 	bl	8000258 <__aeabi_dsub>
 800a0c0:	a365      	add	r3, pc, #404	; (adr r3, 800a258 <_dtoa_r+0x2b0>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 fa7f 	bl	80005c8 <__aeabi_dmul>
 800a0ca:	a365      	add	r3, pc, #404	; (adr r3, 800a260 <_dtoa_r+0x2b8>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f8c4 	bl	800025c <__adddf3>
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	460f      	mov	r7, r1
 800a0da:	f7f6 fa0b 	bl	80004f4 <__aeabi_i2d>
 800a0de:	a362      	add	r3, pc, #392	; (adr r3, 800a268 <_dtoa_r+0x2c0>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 fa70 	bl	80005c8 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f7f6 f8b4 	bl	800025c <__adddf3>
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	f7f6 fd16 	bl	8000b28 <__aeabi_d2iz>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4681      	mov	r9, r0
 800a100:	2300      	movs	r3, #0
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 fcd1 	bl	8000aac <__aeabi_dcmplt>
 800a10a:	b148      	cbz	r0, 800a120 <_dtoa_r+0x178>
 800a10c:	4648      	mov	r0, r9
 800a10e:	f7f6 f9f1 	bl	80004f4 <__aeabi_i2d>
 800a112:	4632      	mov	r2, r6
 800a114:	463b      	mov	r3, r7
 800a116:	f7f6 fcbf 	bl	8000a98 <__aeabi_dcmpeq>
 800a11a:	b908      	cbnz	r0, 800a120 <_dtoa_r+0x178>
 800a11c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a120:	f1b9 0f16 	cmp.w	r9, #22
 800a124:	d857      	bhi.n	800a1d6 <_dtoa_r+0x22e>
 800a126:	4b59      	ldr	r3, [pc, #356]	; (800a28c <_dtoa_r+0x2e4>)
 800a128:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a134:	f7f6 fcba 	bl	8000aac <__aeabi_dcmplt>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d04e      	beq.n	800a1da <_dtoa_r+0x232>
 800a13c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a140:	2300      	movs	r3, #0
 800a142:	930f      	str	r3, [sp, #60]	; 0x3c
 800a144:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a146:	1b1c      	subs	r4, r3, r4
 800a148:	1e63      	subs	r3, r4, #1
 800a14a:	9309      	str	r3, [sp, #36]	; 0x24
 800a14c:	bf45      	ittet	mi
 800a14e:	f1c4 0301 	rsbmi	r3, r4, #1
 800a152:	9306      	strmi	r3, [sp, #24]
 800a154:	2300      	movpl	r3, #0
 800a156:	2300      	movmi	r3, #0
 800a158:	bf4c      	ite	mi
 800a15a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a15c:	9306      	strpl	r3, [sp, #24]
 800a15e:	f1b9 0f00 	cmp.w	r9, #0
 800a162:	db3c      	blt.n	800a1de <_dtoa_r+0x236>
 800a164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a166:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a16a:	444b      	add	r3, r9
 800a16c:	9309      	str	r3, [sp, #36]	; 0x24
 800a16e:	2300      	movs	r3, #0
 800a170:	930a      	str	r3, [sp, #40]	; 0x28
 800a172:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a174:	2b09      	cmp	r3, #9
 800a176:	f200 808d 	bhi.w	800a294 <_dtoa_r+0x2ec>
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	bfc4      	itt	gt
 800a17e:	3b04      	subgt	r3, #4
 800a180:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a184:	f1a3 0302 	sub.w	r3, r3, #2
 800a188:	bfcc      	ite	gt
 800a18a:	2400      	movgt	r4, #0
 800a18c:	2401      	movle	r4, #1
 800a18e:	2b03      	cmp	r3, #3
 800a190:	f200 808c 	bhi.w	800a2ac <_dtoa_r+0x304>
 800a194:	e8df f003 	tbb	[pc, r3]
 800a198:	5b4d4f2d 	.word	0x5b4d4f2d
 800a19c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a1a0:	441c      	add	r4, r3
 800a1a2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	bfc3      	ittte	gt
 800a1aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1ae:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a1b2:	fa09 f303 	lslgt.w	r3, r9, r3
 800a1b6:	f1c3 0320 	rsble	r3, r3, #32
 800a1ba:	bfc6      	itte	gt
 800a1bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1c0:	4318      	orrgt	r0, r3
 800a1c2:	fa06 f003 	lslle.w	r0, r6, r3
 800a1c6:	f7f6 f985 	bl	80004d4 <__aeabi_ui2d>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1d0:	3c01      	subs	r4, #1
 800a1d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1d4:	e770      	b.n	800a0b8 <_dtoa_r+0x110>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e7b3      	b.n	800a142 <_dtoa_r+0x19a>
 800a1da:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1dc:	e7b2      	b.n	800a144 <_dtoa_r+0x19c>
 800a1de:	9b06      	ldr	r3, [sp, #24]
 800a1e0:	eba3 0309 	sub.w	r3, r3, r9
 800a1e4:	9306      	str	r3, [sp, #24]
 800a1e6:	f1c9 0300 	rsb	r3, r9, #0
 800a1ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	930e      	str	r3, [sp, #56]	; 0x38
 800a1f0:	e7bf      	b.n	800a172 <_dtoa_r+0x1ca>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc5a      	bgt.n	800a2b2 <_dtoa_r+0x30a>
 800a1fc:	f04f 0b01 	mov.w	fp, #1
 800a200:	f8cd b008 	str.w	fp, [sp, #8]
 800a204:	465b      	mov	r3, fp
 800a206:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a20a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a20c:	2200      	movs	r2, #0
 800a20e:	6042      	str	r2, [r0, #4]
 800a210:	2204      	movs	r2, #4
 800a212:	f102 0614 	add.w	r6, r2, #20
 800a216:	429e      	cmp	r6, r3
 800a218:	6841      	ldr	r1, [r0, #4]
 800a21a:	d950      	bls.n	800a2be <_dtoa_r+0x316>
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 ff31 	bl	800b084 <_Balloc>
 800a222:	9008      	str	r0, [sp, #32]
 800a224:	2800      	cmp	r0, #0
 800a226:	d14e      	bne.n	800a2c6 <_dtoa_r+0x31e>
 800a228:	4b19      	ldr	r3, [pc, #100]	; (800a290 <_dtoa_r+0x2e8>)
 800a22a:	4602      	mov	r2, r0
 800a22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a230:	e6ce      	b.n	8009fd0 <_dtoa_r+0x28>
 800a232:	2301      	movs	r3, #1
 800a234:	e7de      	b.n	800a1f4 <_dtoa_r+0x24c>
 800a236:	2300      	movs	r3, #0
 800a238:	930b      	str	r3, [sp, #44]	; 0x2c
 800a23a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a23c:	eb09 0b03 	add.w	fp, r9, r3
 800a240:	f10b 0301 	add.w	r3, fp, #1
 800a244:	2b01      	cmp	r3, #1
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	bfb8      	it	lt
 800a24a:	2301      	movlt	r3, #1
 800a24c:	e7dd      	b.n	800a20a <_dtoa_r+0x262>
 800a24e:	2301      	movs	r3, #1
 800a250:	e7f2      	b.n	800a238 <_dtoa_r+0x290>
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	636f4361 	.word	0x636f4361
 800a25c:	3fd287a7 	.word	0x3fd287a7
 800a260:	8b60c8b3 	.word	0x8b60c8b3
 800a264:	3fc68a28 	.word	0x3fc68a28
 800a268:	509f79fb 	.word	0x509f79fb
 800a26c:	3fd34413 	.word	0x3fd34413
 800a270:	0800ca3f 	.word	0x0800ca3f
 800a274:	0800ca56 	.word	0x0800ca56
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	0800ca3b 	.word	0x0800ca3b
 800a280:	0800ca32 	.word	0x0800ca32
 800a284:	0800c379 	.word	0x0800c379
 800a288:	3ff80000 	.word	0x3ff80000
 800a28c:	0800cbc0 	.word	0x0800cbc0
 800a290:	0800cab5 	.word	0x0800cab5
 800a294:	2401      	movs	r4, #1
 800a296:	2300      	movs	r3, #0
 800a298:	9322      	str	r3, [sp, #136]	; 0x88
 800a29a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a29c:	f04f 3bff 	mov.w	fp, #4294967295
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8cd b008 	str.w	fp, [sp, #8]
 800a2a6:	2312      	movs	r3, #18
 800a2a8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a2aa:	e7ae      	b.n	800a20a <_dtoa_r+0x262>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b0:	e7f4      	b.n	800a29c <_dtoa_r+0x2f4>
 800a2b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a2b6:	f8cd b008 	str.w	fp, [sp, #8]
 800a2ba:	465b      	mov	r3, fp
 800a2bc:	e7a5      	b.n	800a20a <_dtoa_r+0x262>
 800a2be:	3101      	adds	r1, #1
 800a2c0:	6041      	str	r1, [r0, #4]
 800a2c2:	0052      	lsls	r2, r2, #1
 800a2c4:	e7a5      	b.n	800a212 <_dtoa_r+0x26a>
 800a2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2c8:	9a08      	ldr	r2, [sp, #32]
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	2b0e      	cmp	r3, #14
 800a2d0:	f200 80a8 	bhi.w	800a424 <_dtoa_r+0x47c>
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	f000 80a5 	beq.w	800a424 <_dtoa_r+0x47c>
 800a2da:	f1b9 0f00 	cmp.w	r9, #0
 800a2de:	dd34      	ble.n	800a34a <_dtoa_r+0x3a2>
 800a2e0:	4a9a      	ldr	r2, [pc, #616]	; (800a54c <_dtoa_r+0x5a4>)
 800a2e2:	f009 030f 	and.w	r3, r9, #15
 800a2e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2ee:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a2f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a2fa:	d016      	beq.n	800a32a <_dtoa_r+0x382>
 800a2fc:	4b94      	ldr	r3, [pc, #592]	; (800a550 <_dtoa_r+0x5a8>)
 800a2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a302:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a306:	f7f6 fa89 	bl	800081c <__aeabi_ddiv>
 800a30a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a30e:	f004 040f 	and.w	r4, r4, #15
 800a312:	2703      	movs	r7, #3
 800a314:	4e8e      	ldr	r6, [pc, #568]	; (800a550 <_dtoa_r+0x5a8>)
 800a316:	b954      	cbnz	r4, 800a32e <_dtoa_r+0x386>
 800a318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a31c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a320:	f7f6 fa7c 	bl	800081c <__aeabi_ddiv>
 800a324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a328:	e029      	b.n	800a37e <_dtoa_r+0x3d6>
 800a32a:	2702      	movs	r7, #2
 800a32c:	e7f2      	b.n	800a314 <_dtoa_r+0x36c>
 800a32e:	07e1      	lsls	r1, r4, #31
 800a330:	d508      	bpl.n	800a344 <_dtoa_r+0x39c>
 800a332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a336:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a33a:	f7f6 f945 	bl	80005c8 <__aeabi_dmul>
 800a33e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a342:	3701      	adds	r7, #1
 800a344:	1064      	asrs	r4, r4, #1
 800a346:	3608      	adds	r6, #8
 800a348:	e7e5      	b.n	800a316 <_dtoa_r+0x36e>
 800a34a:	f000 80a5 	beq.w	800a498 <_dtoa_r+0x4f0>
 800a34e:	f1c9 0400 	rsb	r4, r9, #0
 800a352:	4b7e      	ldr	r3, [pc, #504]	; (800a54c <_dtoa_r+0x5a4>)
 800a354:	4e7e      	ldr	r6, [pc, #504]	; (800a550 <_dtoa_r+0x5a8>)
 800a356:	f004 020f 	and.w	r2, r4, #15
 800a35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a366:	f7f6 f92f 	bl	80005c8 <__aeabi_dmul>
 800a36a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a36e:	1124      	asrs	r4, r4, #4
 800a370:	2300      	movs	r3, #0
 800a372:	2702      	movs	r7, #2
 800a374:	2c00      	cmp	r4, #0
 800a376:	f040 8084 	bne.w	800a482 <_dtoa_r+0x4da>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1d2      	bne.n	800a324 <_dtoa_r+0x37c>
 800a37e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 808b 	beq.w	800a49c <_dtoa_r+0x4f4>
 800a386:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a38a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a38e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a392:	4b70      	ldr	r3, [pc, #448]	; (800a554 <_dtoa_r+0x5ac>)
 800a394:	2200      	movs	r2, #0
 800a396:	f7f6 fb89 	bl	8000aac <__aeabi_dcmplt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d07e      	beq.n	800a49c <_dtoa_r+0x4f4>
 800a39e:	9b02      	ldr	r3, [sp, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d07b      	beq.n	800a49c <_dtoa_r+0x4f4>
 800a3a4:	f1bb 0f00 	cmp.w	fp, #0
 800a3a8:	dd38      	ble.n	800a41c <_dtoa_r+0x474>
 800a3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3ae:	4b6a      	ldr	r3, [pc, #424]	; (800a558 <_dtoa_r+0x5b0>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f7f6 f909 	bl	80005c8 <__aeabi_dmul>
 800a3b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3ba:	f109 38ff 	add.w	r8, r9, #4294967295
 800a3be:	3701      	adds	r7, #1
 800a3c0:	465c      	mov	r4, fp
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7f6 f896 	bl	80004f4 <__aeabi_i2d>
 800a3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3cc:	f7f6 f8fc 	bl	80005c8 <__aeabi_dmul>
 800a3d0:	4b62      	ldr	r3, [pc, #392]	; (800a55c <_dtoa_r+0x5b4>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f7f5 ff42 	bl	800025c <__adddf3>
 800a3d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3e0:	9611      	str	r6, [sp, #68]	; 0x44
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d15d      	bne.n	800a4a2 <_dtoa_r+0x4fa>
 800a3e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ea:	4b5d      	ldr	r3, [pc, #372]	; (800a560 <_dtoa_r+0x5b8>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f7f5 ff33 	bl	8000258 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3fc:	4633      	mov	r3, r6
 800a3fe:	f7f6 fb73 	bl	8000ae8 <__aeabi_dcmpgt>
 800a402:	2800      	cmp	r0, #0
 800a404:	f040 829e 	bne.w	800a944 <_dtoa_r+0x99c>
 800a408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a40c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a40e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a412:	f7f6 fb4b 	bl	8000aac <__aeabi_dcmplt>
 800a416:	2800      	cmp	r0, #0
 800a418:	f040 8292 	bne.w	800a940 <_dtoa_r+0x998>
 800a41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a420:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a426:	2b00      	cmp	r3, #0
 800a428:	f2c0 8153 	blt.w	800a6d2 <_dtoa_r+0x72a>
 800a42c:	f1b9 0f0e 	cmp.w	r9, #14
 800a430:	f300 814f 	bgt.w	800a6d2 <_dtoa_r+0x72a>
 800a434:	4b45      	ldr	r3, [pc, #276]	; (800a54c <_dtoa_r+0x5a4>)
 800a436:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a43a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a43e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a444:	2b00      	cmp	r3, #0
 800a446:	f280 80db 	bge.w	800a600 <_dtoa_r+0x658>
 800a44a:	9b02      	ldr	r3, [sp, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f300 80d7 	bgt.w	800a600 <_dtoa_r+0x658>
 800a452:	f040 8274 	bne.w	800a93e <_dtoa_r+0x996>
 800a456:	4b42      	ldr	r3, [pc, #264]	; (800a560 <_dtoa_r+0x5b8>)
 800a458:	2200      	movs	r2, #0
 800a45a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a45e:	f7f6 f8b3 	bl	80005c8 <__aeabi_dmul>
 800a462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a466:	f7f6 fb35 	bl	8000ad4 <__aeabi_dcmpge>
 800a46a:	9c02      	ldr	r4, [sp, #8]
 800a46c:	4626      	mov	r6, r4
 800a46e:	2800      	cmp	r0, #0
 800a470:	f040 824a 	bne.w	800a908 <_dtoa_r+0x960>
 800a474:	9f08      	ldr	r7, [sp, #32]
 800a476:	2331      	movs	r3, #49	; 0x31
 800a478:	f807 3b01 	strb.w	r3, [r7], #1
 800a47c:	f109 0901 	add.w	r9, r9, #1
 800a480:	e246      	b.n	800a910 <_dtoa_r+0x968>
 800a482:	07e2      	lsls	r2, r4, #31
 800a484:	d505      	bpl.n	800a492 <_dtoa_r+0x4ea>
 800a486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a48a:	f7f6 f89d 	bl	80005c8 <__aeabi_dmul>
 800a48e:	3701      	adds	r7, #1
 800a490:	2301      	movs	r3, #1
 800a492:	1064      	asrs	r4, r4, #1
 800a494:	3608      	adds	r6, #8
 800a496:	e76d      	b.n	800a374 <_dtoa_r+0x3cc>
 800a498:	2702      	movs	r7, #2
 800a49a:	e770      	b.n	800a37e <_dtoa_r+0x3d6>
 800a49c:	9c02      	ldr	r4, [sp, #8]
 800a49e:	46c8      	mov	r8, r9
 800a4a0:	e78f      	b.n	800a3c2 <_dtoa_r+0x41a>
 800a4a2:	9908      	ldr	r1, [sp, #32]
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <_dtoa_r+0x5a4>)
 800a4a6:	4421      	add	r1, r4
 800a4a8:	9112      	str	r1, [sp, #72]	; 0x48
 800a4aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a4b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	d055      	beq.n	800a568 <_dtoa_r+0x5c0>
 800a4bc:	4929      	ldr	r1, [pc, #164]	; (800a564 <_dtoa_r+0x5bc>)
 800a4be:	2000      	movs	r0, #0
 800a4c0:	f7f6 f9ac 	bl	800081c <__aeabi_ddiv>
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	f7f5 fec6 	bl	8000258 <__aeabi_dsub>
 800a4cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4d0:	9f08      	ldr	r7, [sp, #32]
 800a4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4d6:	f7f6 fb27 	bl	8000b28 <__aeabi_d2iz>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	f7f6 f80a 	bl	80004f4 <__aeabi_i2d>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e8:	f7f5 feb6 	bl	8000258 <__aeabi_dsub>
 800a4ec:	3430      	adds	r4, #48	; 0x30
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4f6:	f807 4b01 	strb.w	r4, [r7], #1
 800a4fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4fe:	f7f6 fad5 	bl	8000aac <__aeabi_dcmplt>
 800a502:	2800      	cmp	r0, #0
 800a504:	d174      	bne.n	800a5f0 <_dtoa_r+0x648>
 800a506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a50a:	4912      	ldr	r1, [pc, #72]	; (800a554 <_dtoa_r+0x5ac>)
 800a50c:	2000      	movs	r0, #0
 800a50e:	f7f5 fea3 	bl	8000258 <__aeabi_dsub>
 800a512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a516:	f7f6 fac9 	bl	8000aac <__aeabi_dcmplt>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	f040 80b6 	bne.w	800a68c <_dtoa_r+0x6e4>
 800a520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a522:	429f      	cmp	r7, r3
 800a524:	f43f af7a 	beq.w	800a41c <_dtoa_r+0x474>
 800a528:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a52c:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <_dtoa_r+0x5b0>)
 800a52e:	2200      	movs	r2, #0
 800a530:	f7f6 f84a 	bl	80005c8 <__aeabi_dmul>
 800a534:	4b08      	ldr	r3, [pc, #32]	; (800a558 <_dtoa_r+0x5b0>)
 800a536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a53a:	2200      	movs	r2, #0
 800a53c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a540:	f7f6 f842 	bl	80005c8 <__aeabi_dmul>
 800a544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a548:	e7c3      	b.n	800a4d2 <_dtoa_r+0x52a>
 800a54a:	bf00      	nop
 800a54c:	0800cbc0 	.word	0x0800cbc0
 800a550:	0800cb98 	.word	0x0800cb98
 800a554:	3ff00000 	.word	0x3ff00000
 800a558:	40240000 	.word	0x40240000
 800a55c:	401c0000 	.word	0x401c0000
 800a560:	40140000 	.word	0x40140000
 800a564:	3fe00000 	.word	0x3fe00000
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 f82c 	bl	80005c8 <__aeabi_dmul>
 800a570:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a576:	9c08      	ldr	r4, [sp, #32]
 800a578:	9314      	str	r3, [sp, #80]	; 0x50
 800a57a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57e:	f7f6 fad3 	bl	8000b28 <__aeabi_d2iz>
 800a582:	9015      	str	r0, [sp, #84]	; 0x54
 800a584:	f7f5 ffb6 	bl	80004f4 <__aeabi_i2d>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a590:	f7f5 fe62 	bl	8000258 <__aeabi_dsub>
 800a594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a596:	3330      	adds	r3, #48	; 0x30
 800a598:	f804 3b01 	strb.w	r3, [r4], #1
 800a59c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	d124      	bne.n	800a5f4 <_dtoa_r+0x64c>
 800a5aa:	4bb2      	ldr	r3, [pc, #712]	; (800a874 <_dtoa_r+0x8cc>)
 800a5ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5b0:	f7f5 fe54 	bl	800025c <__adddf3>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fa94 	bl	8000ae8 <__aeabi_dcmpgt>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d162      	bne.n	800a68a <_dtoa_r+0x6e2>
 800a5c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5c8:	49aa      	ldr	r1, [pc, #680]	; (800a874 <_dtoa_r+0x8cc>)
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f7f5 fe44 	bl	8000258 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 fa68 	bl	8000aac <__aeabi_dcmplt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f43f af1d 	beq.w	800a41c <_dtoa_r+0x474>
 800a5e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5e4:	1e7b      	subs	r3, r7, #1
 800a5e6:	9314      	str	r3, [sp, #80]	; 0x50
 800a5e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d0f8      	beq.n	800a5e2 <_dtoa_r+0x63a>
 800a5f0:	46c1      	mov	r9, r8
 800a5f2:	e03a      	b.n	800a66a <_dtoa_r+0x6c2>
 800a5f4:	4ba0      	ldr	r3, [pc, #640]	; (800a878 <_dtoa_r+0x8d0>)
 800a5f6:	f7f5 ffe7 	bl	80005c8 <__aeabi_dmul>
 800a5fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5fe:	e7bc      	b.n	800a57a <_dtoa_r+0x5d2>
 800a600:	9f08      	ldr	r7, [sp, #32]
 800a602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a60a:	f7f6 f907 	bl	800081c <__aeabi_ddiv>
 800a60e:	f7f6 fa8b 	bl	8000b28 <__aeabi_d2iz>
 800a612:	4604      	mov	r4, r0
 800a614:	f7f5 ff6e 	bl	80004f4 <__aeabi_i2d>
 800a618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a61c:	f7f5 ffd4 	bl	80005c8 <__aeabi_dmul>
 800a620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a624:	460b      	mov	r3, r1
 800a626:	4602      	mov	r2, r0
 800a628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a62c:	f7f5 fe14 	bl	8000258 <__aeabi_dsub>
 800a630:	f807 6b01 	strb.w	r6, [r7], #1
 800a634:	9e08      	ldr	r6, [sp, #32]
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	1bbe      	subs	r6, r7, r6
 800a63a:	42b3      	cmp	r3, r6
 800a63c:	d13a      	bne.n	800a6b4 <_dtoa_r+0x70c>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	f7f5 fe0b 	bl	800025c <__adddf3>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a64e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a652:	f7f6 fa49 	bl	8000ae8 <__aeabi_dcmpgt>
 800a656:	bb58      	cbnz	r0, 800a6b0 <_dtoa_r+0x708>
 800a658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a660:	f7f6 fa1a 	bl	8000a98 <__aeabi_dcmpeq>
 800a664:	b108      	cbz	r0, 800a66a <_dtoa_r+0x6c2>
 800a666:	07e1      	lsls	r1, r4, #31
 800a668:	d422      	bmi.n	800a6b0 <_dtoa_r+0x708>
 800a66a:	4628      	mov	r0, r5
 800a66c:	4651      	mov	r1, sl
 800a66e:	f000 fd49 	bl	800b104 <_Bfree>
 800a672:	2300      	movs	r3, #0
 800a674:	703b      	strb	r3, [r7, #0]
 800a676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a678:	f109 0001 	add.w	r0, r9, #1
 800a67c:	6018      	str	r0, [r3, #0]
 800a67e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a680:	2b00      	cmp	r3, #0
 800a682:	f43f acde 	beq.w	800a042 <_dtoa_r+0x9a>
 800a686:	601f      	str	r7, [r3, #0]
 800a688:	e4db      	b.n	800a042 <_dtoa_r+0x9a>
 800a68a:	4627      	mov	r7, r4
 800a68c:	463b      	mov	r3, r7
 800a68e:	461f      	mov	r7, r3
 800a690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a694:	2a39      	cmp	r2, #57	; 0x39
 800a696:	d107      	bne.n	800a6a8 <_dtoa_r+0x700>
 800a698:	9a08      	ldr	r2, [sp, #32]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d1f7      	bne.n	800a68e <_dtoa_r+0x6e6>
 800a69e:	9908      	ldr	r1, [sp, #32]
 800a6a0:	2230      	movs	r2, #48	; 0x30
 800a6a2:	f108 0801 	add.w	r8, r8, #1
 800a6a6:	700a      	strb	r2, [r1, #0]
 800a6a8:	781a      	ldrb	r2, [r3, #0]
 800a6aa:	3201      	adds	r2, #1
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	e79f      	b.n	800a5f0 <_dtoa_r+0x648>
 800a6b0:	46c8      	mov	r8, r9
 800a6b2:	e7eb      	b.n	800a68c <_dtoa_r+0x6e4>
 800a6b4:	4b70      	ldr	r3, [pc, #448]	; (800a878 <_dtoa_r+0x8d0>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f7f5 ff86 	bl	80005c8 <__aeabi_dmul>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f7f6 f9e6 	bl	8000a98 <__aeabi_dcmpeq>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d098      	beq.n	800a602 <_dtoa_r+0x65a>
 800a6d0:	e7cb      	b.n	800a66a <_dtoa_r+0x6c2>
 800a6d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	f000 80d1 	beq.w	800a87c <_dtoa_r+0x8d4>
 800a6da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6dc:	2a01      	cmp	r2, #1
 800a6de:	f300 80af 	bgt.w	800a840 <_dtoa_r+0x898>
 800a6e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	f000 80a7 	beq.w	800a838 <_dtoa_r+0x890>
 800a6ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6f0:	9f06      	ldr	r7, [sp, #24]
 800a6f2:	9a06      	ldr	r2, [sp, #24]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	9206      	str	r2, [sp, #24]
 800a6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	441a      	add	r2, r3
 800a6fe:	4628      	mov	r0, r5
 800a700:	9209      	str	r2, [sp, #36]	; 0x24
 800a702:	f000 fdb9 	bl	800b278 <__i2b>
 800a706:	4606      	mov	r6, r0
 800a708:	2f00      	cmp	r7, #0
 800a70a:	dd0c      	ble.n	800a726 <_dtoa_r+0x77e>
 800a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd09      	ble.n	800a726 <_dtoa_r+0x77e>
 800a712:	42bb      	cmp	r3, r7
 800a714:	9a06      	ldr	r2, [sp, #24]
 800a716:	bfa8      	it	ge
 800a718:	463b      	movge	r3, r7
 800a71a:	1ad2      	subs	r2, r2, r3
 800a71c:	9206      	str	r2, [sp, #24]
 800a71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a720:	1aff      	subs	r7, r7, r3
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	9309      	str	r3, [sp, #36]	; 0x24
 800a726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a728:	b1f3      	cbz	r3, 800a768 <_dtoa_r+0x7c0>
 800a72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80a9 	beq.w	800a884 <_dtoa_r+0x8dc>
 800a732:	2c00      	cmp	r4, #0
 800a734:	dd10      	ble.n	800a758 <_dtoa_r+0x7b0>
 800a736:	4631      	mov	r1, r6
 800a738:	4622      	mov	r2, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 fe58 	bl	800b3f0 <__pow5mult>
 800a740:	4652      	mov	r2, sl
 800a742:	4601      	mov	r1, r0
 800a744:	4606      	mov	r6, r0
 800a746:	4628      	mov	r0, r5
 800a748:	f000 fdac 	bl	800b2a4 <__multiply>
 800a74c:	4651      	mov	r1, sl
 800a74e:	4680      	mov	r8, r0
 800a750:	4628      	mov	r0, r5
 800a752:	f000 fcd7 	bl	800b104 <_Bfree>
 800a756:	46c2      	mov	sl, r8
 800a758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75a:	1b1a      	subs	r2, r3, r4
 800a75c:	d004      	beq.n	800a768 <_dtoa_r+0x7c0>
 800a75e:	4651      	mov	r1, sl
 800a760:	4628      	mov	r0, r5
 800a762:	f000 fe45 	bl	800b3f0 <__pow5mult>
 800a766:	4682      	mov	sl, r0
 800a768:	2101      	movs	r1, #1
 800a76a:	4628      	mov	r0, r5
 800a76c:	f000 fd84 	bl	800b278 <__i2b>
 800a770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a772:	2b00      	cmp	r3, #0
 800a774:	4604      	mov	r4, r0
 800a776:	f340 8087 	ble.w	800a888 <_dtoa_r+0x8e0>
 800a77a:	461a      	mov	r2, r3
 800a77c:	4601      	mov	r1, r0
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 fe36 	bl	800b3f0 <__pow5mult>
 800a784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a786:	2b01      	cmp	r3, #1
 800a788:	4604      	mov	r4, r0
 800a78a:	f340 8080 	ble.w	800a88e <_dtoa_r+0x8e6>
 800a78e:	f04f 0800 	mov.w	r8, #0
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a798:	6918      	ldr	r0, [r3, #16]
 800a79a:	f000 fd1f 	bl	800b1dc <__hi0bits>
 800a79e:	f1c0 0020 	rsb	r0, r0, #32
 800a7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a4:	4418      	add	r0, r3
 800a7a6:	f010 001f 	ands.w	r0, r0, #31
 800a7aa:	f000 8092 	beq.w	800a8d2 <_dtoa_r+0x92a>
 800a7ae:	f1c0 0320 	rsb	r3, r0, #32
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	f340 808a 	ble.w	800a8cc <_dtoa_r+0x924>
 800a7b8:	f1c0 001c 	rsb	r0, r0, #28
 800a7bc:	9b06      	ldr	r3, [sp, #24]
 800a7be:	4403      	add	r3, r0
 800a7c0:	9306      	str	r3, [sp, #24]
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	4403      	add	r3, r0
 800a7c6:	4407      	add	r7, r0
 800a7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ca:	9b06      	ldr	r3, [sp, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dd05      	ble.n	800a7dc <_dtoa_r+0x834>
 800a7d0:	4651      	mov	r1, sl
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 fe65 	bl	800b4a4 <__lshift>
 800a7da:	4682      	mov	sl, r0
 800a7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dd05      	ble.n	800a7ee <_dtoa_r+0x846>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 fe5c 	bl	800b4a4 <__lshift>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d070      	beq.n	800a8d6 <_dtoa_r+0x92e>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f000 fec0 	bl	800b57c <__mcmp>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	da6a      	bge.n	800a8d6 <_dtoa_r+0x92e>
 800a800:	2300      	movs	r3, #0
 800a802:	4651      	mov	r1, sl
 800a804:	220a      	movs	r2, #10
 800a806:	4628      	mov	r0, r5
 800a808:	f000 fc9e 	bl	800b148 <__multadd>
 800a80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a80e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a812:	4682      	mov	sl, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 8193 	beq.w	800ab40 <_dtoa_r+0xb98>
 800a81a:	4631      	mov	r1, r6
 800a81c:	2300      	movs	r3, #0
 800a81e:	220a      	movs	r2, #10
 800a820:	4628      	mov	r0, r5
 800a822:	f000 fc91 	bl	800b148 <__multadd>
 800a826:	f1bb 0f00 	cmp.w	fp, #0
 800a82a:	4606      	mov	r6, r0
 800a82c:	f300 8093 	bgt.w	800a956 <_dtoa_r+0x9ae>
 800a830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a832:	2b02      	cmp	r3, #2
 800a834:	dc57      	bgt.n	800a8e6 <_dtoa_r+0x93e>
 800a836:	e08e      	b.n	800a956 <_dtoa_r+0x9ae>
 800a838:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a83a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a83e:	e756      	b.n	800a6ee <_dtoa_r+0x746>
 800a840:	9b02      	ldr	r3, [sp, #8]
 800a842:	1e5c      	subs	r4, r3, #1
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	42a3      	cmp	r3, r4
 800a848:	bfbf      	itttt	lt
 800a84a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a84c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a84e:	1ae2      	sublt	r2, r4, r3
 800a850:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a852:	bfb6      	itet	lt
 800a854:	189b      	addlt	r3, r3, r2
 800a856:	1b1c      	subge	r4, r3, r4
 800a858:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	bfb8      	it	lt
 800a85e:	2400      	movlt	r4, #0
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfb9      	ittee	lt
 800a864:	9b06      	ldrlt	r3, [sp, #24]
 800a866:	9a02      	ldrlt	r2, [sp, #8]
 800a868:	9f06      	ldrge	r7, [sp, #24]
 800a86a:	9b02      	ldrge	r3, [sp, #8]
 800a86c:	bfbc      	itt	lt
 800a86e:	1a9f      	sublt	r7, r3, r2
 800a870:	2300      	movlt	r3, #0
 800a872:	e73e      	b.n	800a6f2 <_dtoa_r+0x74a>
 800a874:	3fe00000 	.word	0x3fe00000
 800a878:	40240000 	.word	0x40240000
 800a87c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a87e:	9f06      	ldr	r7, [sp, #24]
 800a880:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a882:	e741      	b.n	800a708 <_dtoa_r+0x760>
 800a884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a886:	e76a      	b.n	800a75e <_dtoa_r+0x7b6>
 800a888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	dc19      	bgt.n	800a8c2 <_dtoa_r+0x91a>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	b9bb      	cbnz	r3, 800a8c2 <_dtoa_r+0x91a>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a898:	b99b      	cbnz	r3, 800a8c2 <_dtoa_r+0x91a>
 800a89a:	9b05      	ldr	r3, [sp, #20]
 800a89c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a0:	0d1b      	lsrs	r3, r3, #20
 800a8a2:	051b      	lsls	r3, r3, #20
 800a8a4:	b183      	cbz	r3, 800a8c8 <_dtoa_r+0x920>
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	9306      	str	r3, [sp, #24]
 800a8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b2:	f04f 0801 	mov.w	r8, #1
 800a8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f47f af6a 	bne.w	800a792 <_dtoa_r+0x7ea>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e76f      	b.n	800a7a2 <_dtoa_r+0x7fa>
 800a8c2:	f04f 0800 	mov.w	r8, #0
 800a8c6:	e7f6      	b.n	800a8b6 <_dtoa_r+0x90e>
 800a8c8:	4698      	mov	r8, r3
 800a8ca:	e7f4      	b.n	800a8b6 <_dtoa_r+0x90e>
 800a8cc:	f43f af7d 	beq.w	800a7ca <_dtoa_r+0x822>
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	301c      	adds	r0, #28
 800a8d4:	e772      	b.n	800a7bc <_dtoa_r+0x814>
 800a8d6:	9b02      	ldr	r3, [sp, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc36      	bgt.n	800a94a <_dtoa_r+0x9a2>
 800a8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	dd33      	ble.n	800a94a <_dtoa_r+0x9a2>
 800a8e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a8e6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ea:	d10d      	bne.n	800a908 <_dtoa_r+0x960>
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	465b      	mov	r3, fp
 800a8f0:	2205      	movs	r2, #5
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 fc28 	bl	800b148 <__multadd>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	f000 fe3d 	bl	800b57c <__mcmp>
 800a902:	2800      	cmp	r0, #0
 800a904:	f73f adb6 	bgt.w	800a474 <_dtoa_r+0x4cc>
 800a908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a90a:	9f08      	ldr	r7, [sp, #32]
 800a90c:	ea6f 0903 	mvn.w	r9, r3
 800a910:	f04f 0800 	mov.w	r8, #0
 800a914:	4621      	mov	r1, r4
 800a916:	4628      	mov	r0, r5
 800a918:	f000 fbf4 	bl	800b104 <_Bfree>
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	f43f aea4 	beq.w	800a66a <_dtoa_r+0x6c2>
 800a922:	f1b8 0f00 	cmp.w	r8, #0
 800a926:	d005      	beq.n	800a934 <_dtoa_r+0x98c>
 800a928:	45b0      	cmp	r8, r6
 800a92a:	d003      	beq.n	800a934 <_dtoa_r+0x98c>
 800a92c:	4641      	mov	r1, r8
 800a92e:	4628      	mov	r0, r5
 800a930:	f000 fbe8 	bl	800b104 <_Bfree>
 800a934:	4631      	mov	r1, r6
 800a936:	4628      	mov	r0, r5
 800a938:	f000 fbe4 	bl	800b104 <_Bfree>
 800a93c:	e695      	b.n	800a66a <_dtoa_r+0x6c2>
 800a93e:	2400      	movs	r4, #0
 800a940:	4626      	mov	r6, r4
 800a942:	e7e1      	b.n	800a908 <_dtoa_r+0x960>
 800a944:	46c1      	mov	r9, r8
 800a946:	4626      	mov	r6, r4
 800a948:	e594      	b.n	800a474 <_dtoa_r+0x4cc>
 800a94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a94c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 80fc 	beq.w	800ab4e <_dtoa_r+0xba6>
 800a956:	2f00      	cmp	r7, #0
 800a958:	dd05      	ble.n	800a966 <_dtoa_r+0x9be>
 800a95a:	4631      	mov	r1, r6
 800a95c:	463a      	mov	r2, r7
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 fda0 	bl	800b4a4 <__lshift>
 800a964:	4606      	mov	r6, r0
 800a966:	f1b8 0f00 	cmp.w	r8, #0
 800a96a:	d05c      	beq.n	800aa26 <_dtoa_r+0xa7e>
 800a96c:	6871      	ldr	r1, [r6, #4]
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 fb88 	bl	800b084 <_Balloc>
 800a974:	4607      	mov	r7, r0
 800a976:	b928      	cbnz	r0, 800a984 <_dtoa_r+0x9dc>
 800a978:	4b7f      	ldr	r3, [pc, #508]	; (800ab78 <_dtoa_r+0xbd0>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a980:	f7ff bb26 	b.w	8009fd0 <_dtoa_r+0x28>
 800a984:	6932      	ldr	r2, [r6, #16]
 800a986:	3202      	adds	r2, #2
 800a988:	0092      	lsls	r2, r2, #2
 800a98a:	f106 010c 	add.w	r1, r6, #12
 800a98e:	300c      	adds	r0, #12
 800a990:	f7fe f96a 	bl	8008c68 <memcpy>
 800a994:	2201      	movs	r2, #1
 800a996:	4639      	mov	r1, r7
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 fd83 	bl	800b4a4 <__lshift>
 800a99e:	9b08      	ldr	r3, [sp, #32]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	9302      	str	r3, [sp, #8]
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	445b      	add	r3, fp
 800a9a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	46b0      	mov	r8, r6
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	9b02      	ldr	r3, [sp, #8]
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9c0:	f7ff fa66 	bl	8009e90 <quorem>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	3330      	adds	r3, #48	; 0x30
 800a9c8:	9004      	str	r0, [sp, #16]
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d0:	f000 fdd4 	bl	800b57c <__mcmp>
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	9006      	str	r0, [sp, #24]
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 fdea 	bl	800b5b4 <__mdiff>
 800a9e0:	68c2      	ldr	r2, [r0, #12]
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	bb02      	cbnz	r2, 800aa2a <_dtoa_r+0xa82>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f000 fdc6 	bl	800b57c <__mcmp>
 800a9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a9fc:	f000 fb82 	bl	800b104 <_Bfree>
 800aa00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa04:	9f02      	ldr	r7, [sp, #8]
 800aa06:	ea43 0102 	orr.w	r1, r3, r2
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	430b      	orrs	r3, r1
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa10:	d10d      	bne.n	800aa2e <_dtoa_r+0xa86>
 800aa12:	2b39      	cmp	r3, #57	; 0x39
 800aa14:	d027      	beq.n	800aa66 <_dtoa_r+0xabe>
 800aa16:	9a06      	ldr	r2, [sp, #24]
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	dd01      	ble.n	800aa20 <_dtoa_r+0xa78>
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	3331      	adds	r3, #49	; 0x31
 800aa20:	f88b 3000 	strb.w	r3, [fp]
 800aa24:	e776      	b.n	800a914 <_dtoa_r+0x96c>
 800aa26:	4630      	mov	r0, r6
 800aa28:	e7b9      	b.n	800a99e <_dtoa_r+0x9f6>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	e7e2      	b.n	800a9f4 <_dtoa_r+0xa4c>
 800aa2e:	9906      	ldr	r1, [sp, #24]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	db04      	blt.n	800aa3e <_dtoa_r+0xa96>
 800aa34:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aa36:	4301      	orrs	r1, r0
 800aa38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa3a:	4301      	orrs	r1, r0
 800aa3c:	d120      	bne.n	800aa80 <_dtoa_r+0xad8>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	ddee      	ble.n	800aa20 <_dtoa_r+0xa78>
 800aa42:	4651      	mov	r1, sl
 800aa44:	2201      	movs	r2, #1
 800aa46:	4628      	mov	r0, r5
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	f000 fd2b 	bl	800b4a4 <__lshift>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	4682      	mov	sl, r0
 800aa52:	f000 fd93 	bl	800b57c <__mcmp>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	dc02      	bgt.n	800aa62 <_dtoa_r+0xaba>
 800aa5c:	d1e0      	bne.n	800aa20 <_dtoa_r+0xa78>
 800aa5e:	07da      	lsls	r2, r3, #31
 800aa60:	d5de      	bpl.n	800aa20 <_dtoa_r+0xa78>
 800aa62:	2b39      	cmp	r3, #57	; 0x39
 800aa64:	d1da      	bne.n	800aa1c <_dtoa_r+0xa74>
 800aa66:	2339      	movs	r3, #57	; 0x39
 800aa68:	f88b 3000 	strb.w	r3, [fp]
 800aa6c:	463b      	mov	r3, r7
 800aa6e:	461f      	mov	r7, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa76:	2a39      	cmp	r2, #57	; 0x39
 800aa78:	d050      	beq.n	800ab1c <_dtoa_r+0xb74>
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e749      	b.n	800a914 <_dtoa_r+0x96c>
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	dd03      	ble.n	800aa8c <_dtoa_r+0xae4>
 800aa84:	2b39      	cmp	r3, #57	; 0x39
 800aa86:	d0ee      	beq.n	800aa66 <_dtoa_r+0xabe>
 800aa88:	3301      	adds	r3, #1
 800aa8a:	e7c9      	b.n	800aa20 <_dtoa_r+0xa78>
 800aa8c:	9a02      	ldr	r2, [sp, #8]
 800aa8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa90:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa94:	428a      	cmp	r2, r1
 800aa96:	d02a      	beq.n	800aaee <_dtoa_r+0xb46>
 800aa98:	4651      	mov	r1, sl
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	220a      	movs	r2, #10
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 fb52 	bl	800b148 <__multadd>
 800aaa4:	45b0      	cmp	r8, r6
 800aaa6:	4682      	mov	sl, r0
 800aaa8:	f04f 0300 	mov.w	r3, #0
 800aaac:	f04f 020a 	mov.w	r2, #10
 800aab0:	4641      	mov	r1, r8
 800aab2:	4628      	mov	r0, r5
 800aab4:	d107      	bne.n	800aac6 <_dtoa_r+0xb1e>
 800aab6:	f000 fb47 	bl	800b148 <__multadd>
 800aaba:	4680      	mov	r8, r0
 800aabc:	4606      	mov	r6, r0
 800aabe:	9b02      	ldr	r3, [sp, #8]
 800aac0:	3301      	adds	r3, #1
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	e777      	b.n	800a9b6 <_dtoa_r+0xa0e>
 800aac6:	f000 fb3f 	bl	800b148 <__multadd>
 800aaca:	4631      	mov	r1, r6
 800aacc:	4680      	mov	r8, r0
 800aace:	2300      	movs	r3, #0
 800aad0:	220a      	movs	r2, #10
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 fb38 	bl	800b148 <__multadd>
 800aad8:	4606      	mov	r6, r0
 800aada:	e7f0      	b.n	800aabe <_dtoa_r+0xb16>
 800aadc:	f1bb 0f00 	cmp.w	fp, #0
 800aae0:	9a08      	ldr	r2, [sp, #32]
 800aae2:	bfcc      	ite	gt
 800aae4:	465f      	movgt	r7, fp
 800aae6:	2701      	movle	r7, #1
 800aae8:	4417      	add	r7, r2
 800aaea:	f04f 0800 	mov.w	r8, #0
 800aaee:	4651      	mov	r1, sl
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	9302      	str	r3, [sp, #8]
 800aaf6:	f000 fcd5 	bl	800b4a4 <__lshift>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4682      	mov	sl, r0
 800aafe:	f000 fd3d 	bl	800b57c <__mcmp>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	dcb2      	bgt.n	800aa6c <_dtoa_r+0xac4>
 800ab06:	d102      	bne.n	800ab0e <_dtoa_r+0xb66>
 800ab08:	9b02      	ldr	r3, [sp, #8]
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d4ae      	bmi.n	800aa6c <_dtoa_r+0xac4>
 800ab0e:	463b      	mov	r3, r7
 800ab10:	461f      	mov	r7, r3
 800ab12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab16:	2a30      	cmp	r2, #48	; 0x30
 800ab18:	d0fa      	beq.n	800ab10 <_dtoa_r+0xb68>
 800ab1a:	e6fb      	b.n	800a914 <_dtoa_r+0x96c>
 800ab1c:	9a08      	ldr	r2, [sp, #32]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d1a5      	bne.n	800aa6e <_dtoa_r+0xac6>
 800ab22:	2331      	movs	r3, #49	; 0x31
 800ab24:	f109 0901 	add.w	r9, r9, #1
 800ab28:	7013      	strb	r3, [r2, #0]
 800ab2a:	e6f3      	b.n	800a914 <_dtoa_r+0x96c>
 800ab2c:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <_dtoa_r+0xbd4>)
 800ab2e:	f7ff baa6 	b.w	800a07e <_dtoa_r+0xd6>
 800ab32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f aa7f 	bne.w	800a038 <_dtoa_r+0x90>
 800ab3a:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <_dtoa_r+0xbd8>)
 800ab3c:	f7ff ba9f 	b.w	800a07e <_dtoa_r+0xd6>
 800ab40:	f1bb 0f00 	cmp.w	fp, #0
 800ab44:	dc03      	bgt.n	800ab4e <_dtoa_r+0xba6>
 800ab46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	f73f aecc 	bgt.w	800a8e6 <_dtoa_r+0x93e>
 800ab4e:	9f08      	ldr	r7, [sp, #32]
 800ab50:	4621      	mov	r1, r4
 800ab52:	4650      	mov	r0, sl
 800ab54:	f7ff f99c 	bl	8009e90 <quorem>
 800ab58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab5c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab60:	9a08      	ldr	r2, [sp, #32]
 800ab62:	1aba      	subs	r2, r7, r2
 800ab64:	4593      	cmp	fp, r2
 800ab66:	ddb9      	ble.n	800aadc <_dtoa_r+0xb34>
 800ab68:	4651      	mov	r1, sl
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	220a      	movs	r2, #10
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 faea 	bl	800b148 <__multadd>
 800ab74:	4682      	mov	sl, r0
 800ab76:	e7eb      	b.n	800ab50 <_dtoa_r+0xba8>
 800ab78:	0800cab5 	.word	0x0800cab5
 800ab7c:	0800c378 	.word	0x0800c378
 800ab80:	0800ca32 	.word	0x0800ca32

0800ab84 <__sflush_r>:
 800ab84:	898a      	ldrh	r2, [r1, #12]
 800ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	0710      	lsls	r0, r2, #28
 800ab8e:	460c      	mov	r4, r1
 800ab90:	d458      	bmi.n	800ac44 <__sflush_r+0xc0>
 800ab92:	684b      	ldr	r3, [r1, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dc05      	bgt.n	800aba4 <__sflush_r+0x20>
 800ab98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	dc02      	bgt.n	800aba4 <__sflush_r+0x20>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	d0f9      	beq.n	800ab9e <__sflush_r+0x1a>
 800abaa:	2300      	movs	r3, #0
 800abac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abb0:	682f      	ldr	r7, [r5, #0]
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	d032      	beq.n	800ac1c <__sflush_r+0x98>
 800abb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	075a      	lsls	r2, r3, #29
 800abbc:	d505      	bpl.n	800abca <__sflush_r+0x46>
 800abbe:	6863      	ldr	r3, [r4, #4]
 800abc0:	1ac0      	subs	r0, r0, r3
 800abc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abc4:	b10b      	cbz	r3, 800abca <__sflush_r+0x46>
 800abc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abc8:	1ac0      	subs	r0, r0, r3
 800abca:	2300      	movs	r3, #0
 800abcc:	4602      	mov	r2, r0
 800abce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abd0:	6a21      	ldr	r1, [r4, #32]
 800abd2:	4628      	mov	r0, r5
 800abd4:	47b0      	blx	r6
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	d106      	bne.n	800abea <__sflush_r+0x66>
 800abdc:	6829      	ldr	r1, [r5, #0]
 800abde:	291d      	cmp	r1, #29
 800abe0:	d82c      	bhi.n	800ac3c <__sflush_r+0xb8>
 800abe2:	4a2a      	ldr	r2, [pc, #168]	; (800ac8c <__sflush_r+0x108>)
 800abe4:	40ca      	lsrs	r2, r1
 800abe6:	07d6      	lsls	r6, r2, #31
 800abe8:	d528      	bpl.n	800ac3c <__sflush_r+0xb8>
 800abea:	2200      	movs	r2, #0
 800abec:	6062      	str	r2, [r4, #4]
 800abee:	04d9      	lsls	r1, r3, #19
 800abf0:	6922      	ldr	r2, [r4, #16]
 800abf2:	6022      	str	r2, [r4, #0]
 800abf4:	d504      	bpl.n	800ac00 <__sflush_r+0x7c>
 800abf6:	1c42      	adds	r2, r0, #1
 800abf8:	d101      	bne.n	800abfe <__sflush_r+0x7a>
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	b903      	cbnz	r3, 800ac00 <__sflush_r+0x7c>
 800abfe:	6560      	str	r0, [r4, #84]	; 0x54
 800ac00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac02:	602f      	str	r7, [r5, #0]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	d0ca      	beq.n	800ab9e <__sflush_r+0x1a>
 800ac08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	d002      	beq.n	800ac16 <__sflush_r+0x92>
 800ac10:	4628      	mov	r0, r5
 800ac12:	f7fe f83f 	bl	8008c94 <_free_r>
 800ac16:	2000      	movs	r0, #0
 800ac18:	6360      	str	r0, [r4, #52]	; 0x34
 800ac1a:	e7c1      	b.n	800aba0 <__sflush_r+0x1c>
 800ac1c:	6a21      	ldr	r1, [r4, #32]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b0      	blx	r6
 800ac24:	1c41      	adds	r1, r0, #1
 800ac26:	d1c7      	bne.n	800abb8 <__sflush_r+0x34>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0c4      	beq.n	800abb8 <__sflush_r+0x34>
 800ac2e:	2b1d      	cmp	r3, #29
 800ac30:	d001      	beq.n	800ac36 <__sflush_r+0xb2>
 800ac32:	2b16      	cmp	r3, #22
 800ac34:	d101      	bne.n	800ac3a <__sflush_r+0xb6>
 800ac36:	602f      	str	r7, [r5, #0]
 800ac38:	e7b1      	b.n	800ab9e <__sflush_r+0x1a>
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac40:	81a3      	strh	r3, [r4, #12]
 800ac42:	e7ad      	b.n	800aba0 <__sflush_r+0x1c>
 800ac44:	690f      	ldr	r7, [r1, #16]
 800ac46:	2f00      	cmp	r7, #0
 800ac48:	d0a9      	beq.n	800ab9e <__sflush_r+0x1a>
 800ac4a:	0793      	lsls	r3, r2, #30
 800ac4c:	680e      	ldr	r6, [r1, #0]
 800ac4e:	bf08      	it	eq
 800ac50:	694b      	ldreq	r3, [r1, #20]
 800ac52:	600f      	str	r7, [r1, #0]
 800ac54:	bf18      	it	ne
 800ac56:	2300      	movne	r3, #0
 800ac58:	eba6 0807 	sub.w	r8, r6, r7
 800ac5c:	608b      	str	r3, [r1, #8]
 800ac5e:	f1b8 0f00 	cmp.w	r8, #0
 800ac62:	dd9c      	ble.n	800ab9e <__sflush_r+0x1a>
 800ac64:	6a21      	ldr	r1, [r4, #32]
 800ac66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac68:	4643      	mov	r3, r8
 800ac6a:	463a      	mov	r2, r7
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	47b0      	blx	r6
 800ac70:	2800      	cmp	r0, #0
 800ac72:	dc06      	bgt.n	800ac82 <__sflush_r+0xfe>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	e78e      	b.n	800aba0 <__sflush_r+0x1c>
 800ac82:	4407      	add	r7, r0
 800ac84:	eba8 0800 	sub.w	r8, r8, r0
 800ac88:	e7e9      	b.n	800ac5e <__sflush_r+0xda>
 800ac8a:	bf00      	nop
 800ac8c:	20400001 	.word	0x20400001

0800ac90 <_fflush_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	690b      	ldr	r3, [r1, #16]
 800ac94:	4605      	mov	r5, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	b913      	cbnz	r3, 800aca0 <_fflush_r+0x10>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	b118      	cbz	r0, 800acaa <_fflush_r+0x1a>
 800aca2:	6983      	ldr	r3, [r0, #24]
 800aca4:	b90b      	cbnz	r3, 800acaa <_fflush_r+0x1a>
 800aca6:	f000 f8c5 	bl	800ae34 <__sinit>
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <_fflush_r+0x6c>)
 800acac:	429c      	cmp	r4, r3
 800acae:	d11b      	bne.n	800ace8 <_fflush_r+0x58>
 800acb0:	686c      	ldr	r4, [r5, #4]
 800acb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0ef      	beq.n	800ac9a <_fflush_r+0xa>
 800acba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acbc:	07d0      	lsls	r0, r2, #31
 800acbe:	d404      	bmi.n	800acca <_fflush_r+0x3a>
 800acc0:	0599      	lsls	r1, r3, #22
 800acc2:	d402      	bmi.n	800acca <_fflush_r+0x3a>
 800acc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acc6:	f000 f958 	bl	800af7a <__retarget_lock_acquire_recursive>
 800acca:	4628      	mov	r0, r5
 800accc:	4621      	mov	r1, r4
 800acce:	f7ff ff59 	bl	800ab84 <__sflush_r>
 800acd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd4:	07da      	lsls	r2, r3, #31
 800acd6:	4605      	mov	r5, r0
 800acd8:	d4e0      	bmi.n	800ac9c <_fflush_r+0xc>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	059b      	lsls	r3, r3, #22
 800acde:	d4dd      	bmi.n	800ac9c <_fflush_r+0xc>
 800ace0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ace2:	f000 f94b 	bl	800af7c <__retarget_lock_release_recursive>
 800ace6:	e7d9      	b.n	800ac9c <_fflush_r+0xc>
 800ace8:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <_fflush_r+0x70>)
 800acea:	429c      	cmp	r4, r3
 800acec:	d101      	bne.n	800acf2 <_fflush_r+0x62>
 800acee:	68ac      	ldr	r4, [r5, #8]
 800acf0:	e7df      	b.n	800acb2 <_fflush_r+0x22>
 800acf2:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <_fflush_r+0x74>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	bf08      	it	eq
 800acf8:	68ec      	ldreq	r4, [r5, #12]
 800acfa:	e7da      	b.n	800acb2 <_fflush_r+0x22>
 800acfc:	0800cae8 	.word	0x0800cae8
 800ad00:	0800cb08 	.word	0x0800cb08
 800ad04:	0800cac8 	.word	0x0800cac8

0800ad08 <fileno>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4e1a      	ldr	r6, [pc, #104]	; (800ad74 <fileno+0x6c>)
 800ad0c:	6835      	ldr	r5, [r6, #0]
 800ad0e:	4604      	mov	r4, r0
 800ad10:	b125      	cbz	r5, 800ad1c <fileno+0x14>
 800ad12:	69ab      	ldr	r3, [r5, #24]
 800ad14:	b913      	cbnz	r3, 800ad1c <fileno+0x14>
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 f88c 	bl	800ae34 <__sinit>
 800ad1c:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <fileno+0x70>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	d118      	bne.n	800ad54 <fileno+0x4c>
 800ad22:	686c      	ldr	r4, [r5, #4]
 800ad24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad26:	07d8      	lsls	r0, r3, #31
 800ad28:	d405      	bmi.n	800ad36 <fileno+0x2e>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	0599      	lsls	r1, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <fileno+0x2e>
 800ad30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad32:	f000 f922 	bl	800af7a <__retarget_lock_acquire_recursive>
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	b1ab      	cbz	r3, 800ad68 <fileno+0x60>
 800ad3c:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800ad40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad42:	07d2      	lsls	r2, r2, #31
 800ad44:	d404      	bmi.n	800ad50 <fileno+0x48>
 800ad46:	059b      	lsls	r3, r3, #22
 800ad48:	d402      	bmi.n	800ad50 <fileno+0x48>
 800ad4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4c:	f000 f916 	bl	800af7c <__retarget_lock_release_recursive>
 800ad50:	4628      	mov	r0, r5
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <fileno+0x74>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d101      	bne.n	800ad5e <fileno+0x56>
 800ad5a:	68ac      	ldr	r4, [r5, #8]
 800ad5c:	e7e2      	b.n	800ad24 <fileno+0x1c>
 800ad5e:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <fileno+0x78>)
 800ad60:	429c      	cmp	r4, r3
 800ad62:	bf08      	it	eq
 800ad64:	68ec      	ldreq	r4, [r5, #12]
 800ad66:	e7dd      	b.n	800ad24 <fileno+0x1c>
 800ad68:	6832      	ldr	r2, [r6, #0]
 800ad6a:	2109      	movs	r1, #9
 800ad6c:	6011      	str	r1, [r2, #0]
 800ad6e:	f04f 35ff 	mov.w	r5, #4294967295
 800ad72:	e7e5      	b.n	800ad40 <fileno+0x38>
 800ad74:	2000000c 	.word	0x2000000c
 800ad78:	0800cae8 	.word	0x0800cae8
 800ad7c:	0800cb08 	.word	0x0800cb08
 800ad80:	0800cac8 	.word	0x0800cac8

0800ad84 <std>:
 800ad84:	2300      	movs	r3, #0
 800ad86:	b510      	push	{r4, lr}
 800ad88:	4604      	mov	r4, r0
 800ad8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad92:	6083      	str	r3, [r0, #8]
 800ad94:	8181      	strh	r1, [r0, #12]
 800ad96:	6643      	str	r3, [r0, #100]	; 0x64
 800ad98:	81c2      	strh	r2, [r0, #14]
 800ad9a:	6183      	str	r3, [r0, #24]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	2208      	movs	r2, #8
 800ada0:	305c      	adds	r0, #92	; 0x5c
 800ada2:	f7fd ff6f 	bl	8008c84 <memset>
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <std+0x38>)
 800ada8:	6263      	str	r3, [r4, #36]	; 0x24
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <std+0x3c>)
 800adac:	62a3      	str	r3, [r4, #40]	; 0x28
 800adae:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <std+0x40>)
 800adb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <std+0x44>)
 800adb4:	6224      	str	r4, [r4, #32]
 800adb6:	6323      	str	r3, [r4, #48]	; 0x30
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	bf00      	nop
 800adbc:	0800ba4d 	.word	0x0800ba4d
 800adc0:	0800ba6f 	.word	0x0800ba6f
 800adc4:	0800baa7 	.word	0x0800baa7
 800adc8:	0800bacb 	.word	0x0800bacb

0800adcc <_cleanup_r>:
 800adcc:	4901      	ldr	r1, [pc, #4]	; (800add4 <_cleanup_r+0x8>)
 800adce:	f000 b8af 	b.w	800af30 <_fwalk_reent>
 800add2:	bf00      	nop
 800add4:	0800ac91 	.word	0x0800ac91

0800add8 <__sfmoreglue>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	1e4a      	subs	r2, r1, #1
 800addc:	2568      	movs	r5, #104	; 0x68
 800adde:	4355      	muls	r5, r2
 800ade0:	460e      	mov	r6, r1
 800ade2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ade6:	f7fd ffa3 	bl	8008d30 <_malloc_r>
 800adea:	4604      	mov	r4, r0
 800adec:	b140      	cbz	r0, 800ae00 <__sfmoreglue+0x28>
 800adee:	2100      	movs	r1, #0
 800adf0:	e9c0 1600 	strd	r1, r6, [r0]
 800adf4:	300c      	adds	r0, #12
 800adf6:	60a0      	str	r0, [r4, #8]
 800adf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adfc:	f7fd ff42 	bl	8008c84 <memset>
 800ae00:	4620      	mov	r0, r4
 800ae02:	bd70      	pop	{r4, r5, r6, pc}

0800ae04 <__sfp_lock_acquire>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sfp_lock_acquire+0x8>)
 800ae06:	f000 b8b8 	b.w	800af7a <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	200005fc 	.word	0x200005fc

0800ae10 <__sfp_lock_release>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sfp_lock_release+0x8>)
 800ae12:	f000 b8b3 	b.w	800af7c <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	200005fc 	.word	0x200005fc

0800ae1c <__sinit_lock_acquire>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sinit_lock_acquire+0x8>)
 800ae1e:	f000 b8ac 	b.w	800af7a <__retarget_lock_acquire_recursive>
 800ae22:	bf00      	nop
 800ae24:	200005f7 	.word	0x200005f7

0800ae28 <__sinit_lock_release>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sinit_lock_release+0x8>)
 800ae2a:	f000 b8a7 	b.w	800af7c <__retarget_lock_release_recursive>
 800ae2e:	bf00      	nop
 800ae30:	200005f7 	.word	0x200005f7

0800ae34 <__sinit>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	4604      	mov	r4, r0
 800ae38:	f7ff fff0 	bl	800ae1c <__sinit_lock_acquire>
 800ae3c:	69a3      	ldr	r3, [r4, #24]
 800ae3e:	b11b      	cbz	r3, 800ae48 <__sinit+0x14>
 800ae40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae44:	f7ff bff0 	b.w	800ae28 <__sinit_lock_release>
 800ae48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ae4e:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <__sinit+0x68>)
 800ae50:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <__sinit+0x6c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	bf04      	itt	eq
 800ae5a:	2301      	moveq	r3, #1
 800ae5c:	61a3      	streq	r3, [r4, #24]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 f820 	bl	800aea4 <__sfp>
 800ae64:	6060      	str	r0, [r4, #4]
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 f81c 	bl	800aea4 <__sfp>
 800ae6c:	60a0      	str	r0, [r4, #8]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 f818 	bl	800aea4 <__sfp>
 800ae74:	2200      	movs	r2, #0
 800ae76:	60e0      	str	r0, [r4, #12]
 800ae78:	2104      	movs	r1, #4
 800ae7a:	6860      	ldr	r0, [r4, #4]
 800ae7c:	f7ff ff82 	bl	800ad84 <std>
 800ae80:	68a0      	ldr	r0, [r4, #8]
 800ae82:	2201      	movs	r2, #1
 800ae84:	2109      	movs	r1, #9
 800ae86:	f7ff ff7d 	bl	800ad84 <std>
 800ae8a:	68e0      	ldr	r0, [r4, #12]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	2112      	movs	r1, #18
 800ae90:	f7ff ff78 	bl	800ad84 <std>
 800ae94:	2301      	movs	r3, #1
 800ae96:	61a3      	str	r3, [r4, #24]
 800ae98:	e7d2      	b.n	800ae40 <__sinit+0xc>
 800ae9a:	bf00      	nop
 800ae9c:	0800c364 	.word	0x0800c364
 800aea0:	0800adcd 	.word	0x0800adcd

0800aea4 <__sfp>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	4607      	mov	r7, r0
 800aea8:	f7ff ffac 	bl	800ae04 <__sfp_lock_acquire>
 800aeac:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <__sfp+0x84>)
 800aeae:	681e      	ldr	r6, [r3, #0]
 800aeb0:	69b3      	ldr	r3, [r6, #24]
 800aeb2:	b913      	cbnz	r3, 800aeba <__sfp+0x16>
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffbd 	bl	800ae34 <__sinit>
 800aeba:	3648      	adds	r6, #72	; 0x48
 800aebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	d503      	bpl.n	800aecc <__sfp+0x28>
 800aec4:	6833      	ldr	r3, [r6, #0]
 800aec6:	b30b      	cbz	r3, 800af0c <__sfp+0x68>
 800aec8:	6836      	ldr	r6, [r6, #0]
 800aeca:	e7f7      	b.n	800aebc <__sfp+0x18>
 800aecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aed0:	b9d5      	cbnz	r5, 800af08 <__sfp+0x64>
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <__sfp+0x88>)
 800aed4:	60e3      	str	r3, [r4, #12]
 800aed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeda:	6665      	str	r5, [r4, #100]	; 0x64
 800aedc:	f000 f84c 	bl	800af78 <__retarget_lock_init_recursive>
 800aee0:	f7ff ff96 	bl	800ae10 <__sfp_lock_release>
 800aee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aeec:	6025      	str	r5, [r4, #0]
 800aeee:	61a5      	str	r5, [r4, #24]
 800aef0:	2208      	movs	r2, #8
 800aef2:	4629      	mov	r1, r5
 800aef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aef8:	f7fd fec4 	bl	8008c84 <memset>
 800aefc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af04:	4620      	mov	r0, r4
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af08:	3468      	adds	r4, #104	; 0x68
 800af0a:	e7d9      	b.n	800aec0 <__sfp+0x1c>
 800af0c:	2104      	movs	r1, #4
 800af0e:	4638      	mov	r0, r7
 800af10:	f7ff ff62 	bl	800add8 <__sfmoreglue>
 800af14:	4604      	mov	r4, r0
 800af16:	6030      	str	r0, [r6, #0]
 800af18:	2800      	cmp	r0, #0
 800af1a:	d1d5      	bne.n	800aec8 <__sfp+0x24>
 800af1c:	f7ff ff78 	bl	800ae10 <__sfp_lock_release>
 800af20:	230c      	movs	r3, #12
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	e7ee      	b.n	800af04 <__sfp+0x60>
 800af26:	bf00      	nop
 800af28:	0800c364 	.word	0x0800c364
 800af2c:	ffff0001 	.word	0xffff0001

0800af30 <_fwalk_reent>:
 800af30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af34:	4606      	mov	r6, r0
 800af36:	4688      	mov	r8, r1
 800af38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af3c:	2700      	movs	r7, #0
 800af3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af42:	f1b9 0901 	subs.w	r9, r9, #1
 800af46:	d505      	bpl.n	800af54 <_fwalk_reent+0x24>
 800af48:	6824      	ldr	r4, [r4, #0]
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	d1f7      	bne.n	800af3e <_fwalk_reent+0xe>
 800af4e:	4638      	mov	r0, r7
 800af50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af54:	89ab      	ldrh	r3, [r5, #12]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d907      	bls.n	800af6a <_fwalk_reent+0x3a>
 800af5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af5e:	3301      	adds	r3, #1
 800af60:	d003      	beq.n	800af6a <_fwalk_reent+0x3a>
 800af62:	4629      	mov	r1, r5
 800af64:	4630      	mov	r0, r6
 800af66:	47c0      	blx	r8
 800af68:	4307      	orrs	r7, r0
 800af6a:	3568      	adds	r5, #104	; 0x68
 800af6c:	e7e9      	b.n	800af42 <_fwalk_reent+0x12>
	...

0800af70 <_localeconv_r>:
 800af70:	4800      	ldr	r0, [pc, #0]	; (800af74 <_localeconv_r+0x4>)
 800af72:	4770      	bx	lr
 800af74:	20000160 	.word	0x20000160

0800af78 <__retarget_lock_init_recursive>:
 800af78:	4770      	bx	lr

0800af7a <__retarget_lock_acquire_recursive>:
 800af7a:	4770      	bx	lr

0800af7c <__retarget_lock_release_recursive>:
 800af7c:	4770      	bx	lr

0800af7e <__swhatbuf_r>:
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	460e      	mov	r6, r1
 800af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af86:	2900      	cmp	r1, #0
 800af88:	b096      	sub	sp, #88	; 0x58
 800af8a:	4614      	mov	r4, r2
 800af8c:	461d      	mov	r5, r3
 800af8e:	da07      	bge.n	800afa0 <__swhatbuf_r+0x22>
 800af90:	2300      	movs	r3, #0
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	89b3      	ldrh	r3, [r6, #12]
 800af96:	061a      	lsls	r2, r3, #24
 800af98:	d410      	bmi.n	800afbc <__swhatbuf_r+0x3e>
 800af9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9e:	e00e      	b.n	800afbe <__swhatbuf_r+0x40>
 800afa0:	466a      	mov	r2, sp
 800afa2:	f000 fde3 	bl	800bb6c <_fstat_r>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	dbf2      	blt.n	800af90 <__swhatbuf_r+0x12>
 800afaa:	9a01      	ldr	r2, [sp, #4]
 800afac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afb4:	425a      	negs	r2, r3
 800afb6:	415a      	adcs	r2, r3
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	e7ee      	b.n	800af9a <__swhatbuf_r+0x1c>
 800afbc:	2340      	movs	r3, #64	; 0x40
 800afbe:	2000      	movs	r0, #0
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	b016      	add	sp, #88	; 0x58
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afc8 <__smakebuf_r>:
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afcc:	079d      	lsls	r5, r3, #30
 800afce:	4606      	mov	r6, r0
 800afd0:	460c      	mov	r4, r1
 800afd2:	d507      	bpl.n	800afe4 <__smakebuf_r+0x1c>
 800afd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	2301      	movs	r3, #1
 800afde:	6163      	str	r3, [r4, #20]
 800afe0:	b002      	add	sp, #8
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	ab01      	add	r3, sp, #4
 800afe6:	466a      	mov	r2, sp
 800afe8:	f7ff ffc9 	bl	800af7e <__swhatbuf_r>
 800afec:	9900      	ldr	r1, [sp, #0]
 800afee:	4605      	mov	r5, r0
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7fd fe9d 	bl	8008d30 <_malloc_r>
 800aff6:	b948      	cbnz	r0, 800b00c <__smakebuf_r+0x44>
 800aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d4ef      	bmi.n	800afe0 <__smakebuf_r+0x18>
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	f043 0302 	orr.w	r3, r3, #2
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7e3      	b.n	800afd4 <__smakebuf_r+0xc>
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <__smakebuf_r+0x7c>)
 800b00e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	6163      	str	r3, [r4, #20]
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	6120      	str	r0, [r4, #16]
 800b022:	b15b      	cbz	r3, 800b03c <__smakebuf_r+0x74>
 800b024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b028:	4630      	mov	r0, r6
 800b02a:	f000 fdb1 	bl	800bb90 <_isatty_r>
 800b02e:	b128      	cbz	r0, 800b03c <__smakebuf_r+0x74>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	89a0      	ldrh	r0, [r4, #12]
 800b03e:	4305      	orrs	r5, r0
 800b040:	81a5      	strh	r5, [r4, #12]
 800b042:	e7cd      	b.n	800afe0 <__smakebuf_r+0x18>
 800b044:	0800adcd 	.word	0x0800adcd

0800b048 <__ascii_mbtowc>:
 800b048:	b082      	sub	sp, #8
 800b04a:	b901      	cbnz	r1, 800b04e <__ascii_mbtowc+0x6>
 800b04c:	a901      	add	r1, sp, #4
 800b04e:	b142      	cbz	r2, 800b062 <__ascii_mbtowc+0x1a>
 800b050:	b14b      	cbz	r3, 800b066 <__ascii_mbtowc+0x1e>
 800b052:	7813      	ldrb	r3, [r2, #0]
 800b054:	600b      	str	r3, [r1, #0]
 800b056:	7812      	ldrb	r2, [r2, #0]
 800b058:	1e10      	subs	r0, r2, #0
 800b05a:	bf18      	it	ne
 800b05c:	2001      	movne	r0, #1
 800b05e:	b002      	add	sp, #8
 800b060:	4770      	bx	lr
 800b062:	4610      	mov	r0, r2
 800b064:	e7fb      	b.n	800b05e <__ascii_mbtowc+0x16>
 800b066:	f06f 0001 	mvn.w	r0, #1
 800b06a:	e7f8      	b.n	800b05e <__ascii_mbtowc+0x16>

0800b06c <__malloc_lock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__malloc_lock+0x8>)
 800b06e:	f7ff bf84 	b.w	800af7a <__retarget_lock_acquire_recursive>
 800b072:	bf00      	nop
 800b074:	200005f8 	.word	0x200005f8

0800b078 <__malloc_unlock>:
 800b078:	4801      	ldr	r0, [pc, #4]	; (800b080 <__malloc_unlock+0x8>)
 800b07a:	f7ff bf7f 	b.w	800af7c <__retarget_lock_release_recursive>
 800b07e:	bf00      	nop
 800b080:	200005f8 	.word	0x200005f8

0800b084 <_Balloc>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b088:	4604      	mov	r4, r0
 800b08a:	460d      	mov	r5, r1
 800b08c:	b976      	cbnz	r6, 800b0ac <_Balloc+0x28>
 800b08e:	2010      	movs	r0, #16
 800b090:	f7fd fdcc 	bl	8008c2c <malloc>
 800b094:	4602      	mov	r2, r0
 800b096:	6260      	str	r0, [r4, #36]	; 0x24
 800b098:	b920      	cbnz	r0, 800b0a4 <_Balloc+0x20>
 800b09a:	4b18      	ldr	r3, [pc, #96]	; (800b0fc <_Balloc+0x78>)
 800b09c:	4818      	ldr	r0, [pc, #96]	; (800b100 <_Balloc+0x7c>)
 800b09e:	2166      	movs	r1, #102	; 0x66
 800b0a0:	f000 fd24 	bl	800baec <__assert_func>
 800b0a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0a8:	6006      	str	r6, [r0, #0]
 800b0aa:	60c6      	str	r6, [r0, #12]
 800b0ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0ae:	68f3      	ldr	r3, [r6, #12]
 800b0b0:	b183      	cbz	r3, 800b0d4 <_Balloc+0x50>
 800b0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0ba:	b9b8      	cbnz	r0, 800b0ec <_Balloc+0x68>
 800b0bc:	2101      	movs	r1, #1
 800b0be:	fa01 f605 	lsl.w	r6, r1, r5
 800b0c2:	1d72      	adds	r2, r6, #5
 800b0c4:	0092      	lsls	r2, r2, #2
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 fb5a 	bl	800b780 <_calloc_r>
 800b0cc:	b160      	cbz	r0, 800b0e8 <_Balloc+0x64>
 800b0ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0d2:	e00e      	b.n	800b0f2 <_Balloc+0x6e>
 800b0d4:	2221      	movs	r2, #33	; 0x21
 800b0d6:	2104      	movs	r1, #4
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fb51 	bl	800b780 <_calloc_r>
 800b0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0e0:	60f0      	str	r0, [r6, #12]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e4      	bne.n	800b0b2 <_Balloc+0x2e>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	6802      	ldr	r2, [r0, #0]
 800b0ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0f8:	e7f7      	b.n	800b0ea <_Balloc+0x66>
 800b0fa:	bf00      	nop
 800b0fc:	0800ca3f 	.word	0x0800ca3f
 800b100:	0800cb32 	.word	0x0800cb32

0800b104 <_Bfree>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b108:	4605      	mov	r5, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	b976      	cbnz	r6, 800b12c <_Bfree+0x28>
 800b10e:	2010      	movs	r0, #16
 800b110:	f7fd fd8c 	bl	8008c2c <malloc>
 800b114:	4602      	mov	r2, r0
 800b116:	6268      	str	r0, [r5, #36]	; 0x24
 800b118:	b920      	cbnz	r0, 800b124 <_Bfree+0x20>
 800b11a:	4b09      	ldr	r3, [pc, #36]	; (800b140 <_Bfree+0x3c>)
 800b11c:	4809      	ldr	r0, [pc, #36]	; (800b144 <_Bfree+0x40>)
 800b11e:	218a      	movs	r1, #138	; 0x8a
 800b120:	f000 fce4 	bl	800baec <__assert_func>
 800b124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b128:	6006      	str	r6, [r0, #0]
 800b12a:	60c6      	str	r6, [r0, #12]
 800b12c:	b13c      	cbz	r4, 800b13e <_Bfree+0x3a>
 800b12e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b130:	6862      	ldr	r2, [r4, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b138:	6021      	str	r1, [r4, #0]
 800b13a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	0800ca3f 	.word	0x0800ca3f
 800b144:	0800cb32 	.word	0x0800cb32

0800b148 <__multadd>:
 800b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14c:	690e      	ldr	r6, [r1, #16]
 800b14e:	4607      	mov	r7, r0
 800b150:	4698      	mov	r8, r3
 800b152:	460c      	mov	r4, r1
 800b154:	f101 0014 	add.w	r0, r1, #20
 800b158:	2300      	movs	r3, #0
 800b15a:	6805      	ldr	r5, [r0, #0]
 800b15c:	b2a9      	uxth	r1, r5
 800b15e:	fb02 8101 	mla	r1, r2, r1, r8
 800b162:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b166:	0c2d      	lsrs	r5, r5, #16
 800b168:	fb02 c505 	mla	r5, r2, r5, ip
 800b16c:	b289      	uxth	r1, r1
 800b16e:	3301      	adds	r3, #1
 800b170:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b174:	429e      	cmp	r6, r3
 800b176:	f840 1b04 	str.w	r1, [r0], #4
 800b17a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b17e:	dcec      	bgt.n	800b15a <__multadd+0x12>
 800b180:	f1b8 0f00 	cmp.w	r8, #0
 800b184:	d022      	beq.n	800b1cc <__multadd+0x84>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	42b3      	cmp	r3, r6
 800b18a:	dc19      	bgt.n	800b1c0 <__multadd+0x78>
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4638      	mov	r0, r7
 800b190:	3101      	adds	r1, #1
 800b192:	f7ff ff77 	bl	800b084 <_Balloc>
 800b196:	4605      	mov	r5, r0
 800b198:	b928      	cbnz	r0, 800b1a6 <__multadd+0x5e>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <__multadd+0x8c>)
 800b19e:	480e      	ldr	r0, [pc, #56]	; (800b1d8 <__multadd+0x90>)
 800b1a0:	21b5      	movs	r1, #181	; 0xb5
 800b1a2:	f000 fca3 	bl	800baec <__assert_func>
 800b1a6:	6922      	ldr	r2, [r4, #16]
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	f104 010c 	add.w	r1, r4, #12
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f7fd fd59 	bl	8008c68 <memcpy>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff ffa3 	bl	800b104 <_Bfree>
 800b1be:	462c      	mov	r4, r5
 800b1c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b1c4:	3601      	adds	r6, #1
 800b1c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b1ca:	6126      	str	r6, [r4, #16]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800cab5 	.word	0x0800cab5
 800b1d8:	0800cb32 	.word	0x0800cb32

0800b1dc <__hi0bits>:
 800b1dc:	0c02      	lsrs	r2, r0, #16
 800b1de:	0412      	lsls	r2, r2, #16
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	b9ca      	cbnz	r2, 800b218 <__hi0bits+0x3c>
 800b1e4:	0403      	lsls	r3, r0, #16
 800b1e6:	2010      	movs	r0, #16
 800b1e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b1ec:	bf04      	itt	eq
 800b1ee:	021b      	lsleq	r3, r3, #8
 800b1f0:	3008      	addeq	r0, #8
 800b1f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b1f6:	bf04      	itt	eq
 800b1f8:	011b      	lsleq	r3, r3, #4
 800b1fa:	3004      	addeq	r0, #4
 800b1fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b200:	bf04      	itt	eq
 800b202:	009b      	lsleq	r3, r3, #2
 800b204:	3002      	addeq	r0, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	db05      	blt.n	800b216 <__hi0bits+0x3a>
 800b20a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b20e:	f100 0001 	add.w	r0, r0, #1
 800b212:	bf08      	it	eq
 800b214:	2020      	moveq	r0, #32
 800b216:	4770      	bx	lr
 800b218:	2000      	movs	r0, #0
 800b21a:	e7e5      	b.n	800b1e8 <__hi0bits+0xc>

0800b21c <__lo0bits>:
 800b21c:	6803      	ldr	r3, [r0, #0]
 800b21e:	4602      	mov	r2, r0
 800b220:	f013 0007 	ands.w	r0, r3, #7
 800b224:	d00b      	beq.n	800b23e <__lo0bits+0x22>
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d422      	bmi.n	800b270 <__lo0bits+0x54>
 800b22a:	0798      	lsls	r0, r3, #30
 800b22c:	bf49      	itett	mi
 800b22e:	085b      	lsrmi	r3, r3, #1
 800b230:	089b      	lsrpl	r3, r3, #2
 800b232:	2001      	movmi	r0, #1
 800b234:	6013      	strmi	r3, [r2, #0]
 800b236:	bf5c      	itt	pl
 800b238:	6013      	strpl	r3, [r2, #0]
 800b23a:	2002      	movpl	r0, #2
 800b23c:	4770      	bx	lr
 800b23e:	b299      	uxth	r1, r3
 800b240:	b909      	cbnz	r1, 800b246 <__lo0bits+0x2a>
 800b242:	0c1b      	lsrs	r3, r3, #16
 800b244:	2010      	movs	r0, #16
 800b246:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b24a:	bf04      	itt	eq
 800b24c:	0a1b      	lsreq	r3, r3, #8
 800b24e:	3008      	addeq	r0, #8
 800b250:	0719      	lsls	r1, r3, #28
 800b252:	bf04      	itt	eq
 800b254:	091b      	lsreq	r3, r3, #4
 800b256:	3004      	addeq	r0, #4
 800b258:	0799      	lsls	r1, r3, #30
 800b25a:	bf04      	itt	eq
 800b25c:	089b      	lsreq	r3, r3, #2
 800b25e:	3002      	addeq	r0, #2
 800b260:	07d9      	lsls	r1, r3, #31
 800b262:	d403      	bmi.n	800b26c <__lo0bits+0x50>
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	f100 0001 	add.w	r0, r0, #1
 800b26a:	d003      	beq.n	800b274 <__lo0bits+0x58>
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	4770      	bx	lr
 800b270:	2000      	movs	r0, #0
 800b272:	4770      	bx	lr
 800b274:	2020      	movs	r0, #32
 800b276:	4770      	bx	lr

0800b278 <__i2b>:
 800b278:	b510      	push	{r4, lr}
 800b27a:	460c      	mov	r4, r1
 800b27c:	2101      	movs	r1, #1
 800b27e:	f7ff ff01 	bl	800b084 <_Balloc>
 800b282:	4602      	mov	r2, r0
 800b284:	b928      	cbnz	r0, 800b292 <__i2b+0x1a>
 800b286:	4b05      	ldr	r3, [pc, #20]	; (800b29c <__i2b+0x24>)
 800b288:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <__i2b+0x28>)
 800b28a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b28e:	f000 fc2d 	bl	800baec <__assert_func>
 800b292:	2301      	movs	r3, #1
 800b294:	6144      	str	r4, [r0, #20]
 800b296:	6103      	str	r3, [r0, #16]
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	0800cab5 	.word	0x0800cab5
 800b2a0:	0800cb32 	.word	0x0800cb32

0800b2a4 <__multiply>:
 800b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	690a      	ldr	r2, [r1, #16]
 800b2ac:	6923      	ldr	r3, [r4, #16]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	bfb8      	it	lt
 800b2b2:	460b      	movlt	r3, r1
 800b2b4:	460d      	mov	r5, r1
 800b2b6:	bfbc      	itt	lt
 800b2b8:	4625      	movlt	r5, r4
 800b2ba:	461c      	movlt	r4, r3
 800b2bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b2c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2c4:	68ab      	ldr	r3, [r5, #8]
 800b2c6:	6869      	ldr	r1, [r5, #4]
 800b2c8:	eb0a 0709 	add.w	r7, sl, r9
 800b2cc:	42bb      	cmp	r3, r7
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	bfb8      	it	lt
 800b2d2:	3101      	addlt	r1, #1
 800b2d4:	f7ff fed6 	bl	800b084 <_Balloc>
 800b2d8:	b930      	cbnz	r0, 800b2e8 <__multiply+0x44>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4b42      	ldr	r3, [pc, #264]	; (800b3e8 <__multiply+0x144>)
 800b2de:	4843      	ldr	r0, [pc, #268]	; (800b3ec <__multiply+0x148>)
 800b2e0:	f240 115d 	movw	r1, #349	; 0x15d
 800b2e4:	f000 fc02 	bl	800baec <__assert_func>
 800b2e8:	f100 0614 	add.w	r6, r0, #20
 800b2ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4543      	cmp	r3, r8
 800b2f6:	d31e      	bcc.n	800b336 <__multiply+0x92>
 800b2f8:	f105 0c14 	add.w	ip, r5, #20
 800b2fc:	f104 0314 	add.w	r3, r4, #20
 800b300:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b304:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b308:	9202      	str	r2, [sp, #8]
 800b30a:	ebac 0205 	sub.w	r2, ip, r5
 800b30e:	3a15      	subs	r2, #21
 800b310:	f022 0203 	bic.w	r2, r2, #3
 800b314:	3204      	adds	r2, #4
 800b316:	f105 0115 	add.w	r1, r5, #21
 800b31a:	458c      	cmp	ip, r1
 800b31c:	bf38      	it	cc
 800b31e:	2204      	movcc	r2, #4
 800b320:	9201      	str	r2, [sp, #4]
 800b322:	9a02      	ldr	r2, [sp, #8]
 800b324:	9303      	str	r3, [sp, #12]
 800b326:	429a      	cmp	r2, r3
 800b328:	d808      	bhi.n	800b33c <__multiply+0x98>
 800b32a:	2f00      	cmp	r7, #0
 800b32c:	dc55      	bgt.n	800b3da <__multiply+0x136>
 800b32e:	6107      	str	r7, [r0, #16]
 800b330:	b005      	add	sp, #20
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	f843 2b04 	str.w	r2, [r3], #4
 800b33a:	e7db      	b.n	800b2f4 <__multiply+0x50>
 800b33c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b340:	f1ba 0f00 	cmp.w	sl, #0
 800b344:	d020      	beq.n	800b388 <__multiply+0xe4>
 800b346:	f105 0e14 	add.w	lr, r5, #20
 800b34a:	46b1      	mov	r9, r6
 800b34c:	2200      	movs	r2, #0
 800b34e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b352:	f8d9 b000 	ldr.w	fp, [r9]
 800b356:	b2a1      	uxth	r1, r4
 800b358:	fa1f fb8b 	uxth.w	fp, fp
 800b35c:	fb0a b101 	mla	r1, sl, r1, fp
 800b360:	4411      	add	r1, r2
 800b362:	f8d9 2000 	ldr.w	r2, [r9]
 800b366:	0c24      	lsrs	r4, r4, #16
 800b368:	0c12      	lsrs	r2, r2, #16
 800b36a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b36e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b372:	b289      	uxth	r1, r1
 800b374:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b378:	45f4      	cmp	ip, lr
 800b37a:	f849 1b04 	str.w	r1, [r9], #4
 800b37e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b382:	d8e4      	bhi.n	800b34e <__multiply+0xaa>
 800b384:	9901      	ldr	r1, [sp, #4]
 800b386:	5072      	str	r2, [r6, r1]
 800b388:	9a03      	ldr	r2, [sp, #12]
 800b38a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b38e:	3304      	adds	r3, #4
 800b390:	f1b9 0f00 	cmp.w	r9, #0
 800b394:	d01f      	beq.n	800b3d6 <__multiply+0x132>
 800b396:	6834      	ldr	r4, [r6, #0]
 800b398:	f105 0114 	add.w	r1, r5, #20
 800b39c:	46b6      	mov	lr, r6
 800b39e:	f04f 0a00 	mov.w	sl, #0
 800b3a2:	880a      	ldrh	r2, [r1, #0]
 800b3a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b3a8:	fb09 b202 	mla	r2, r9, r2, fp
 800b3ac:	4492      	add	sl, r2
 800b3ae:	b2a4      	uxth	r4, r4
 800b3b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b3b4:	f84e 4b04 	str.w	r4, [lr], #4
 800b3b8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b3bc:	f8be 2000 	ldrh.w	r2, [lr]
 800b3c0:	0c24      	lsrs	r4, r4, #16
 800b3c2:	fb09 2404 	mla	r4, r9, r4, r2
 800b3c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b3ca:	458c      	cmp	ip, r1
 800b3cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3d0:	d8e7      	bhi.n	800b3a2 <__multiply+0xfe>
 800b3d2:	9a01      	ldr	r2, [sp, #4]
 800b3d4:	50b4      	str	r4, [r6, r2]
 800b3d6:	3604      	adds	r6, #4
 800b3d8:	e7a3      	b.n	800b322 <__multiply+0x7e>
 800b3da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1a5      	bne.n	800b32e <__multiply+0x8a>
 800b3e2:	3f01      	subs	r7, #1
 800b3e4:	e7a1      	b.n	800b32a <__multiply+0x86>
 800b3e6:	bf00      	nop
 800b3e8:	0800cab5 	.word	0x0800cab5
 800b3ec:	0800cb32 	.word	0x0800cb32

0800b3f0 <__pow5mult>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	f012 0203 	ands.w	r2, r2, #3
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	d007      	beq.n	800b410 <__pow5mult+0x20>
 800b400:	4c25      	ldr	r4, [pc, #148]	; (800b498 <__pow5mult+0xa8>)
 800b402:	3a01      	subs	r2, #1
 800b404:	2300      	movs	r3, #0
 800b406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b40a:	f7ff fe9d 	bl	800b148 <__multadd>
 800b40e:	4607      	mov	r7, r0
 800b410:	10ad      	asrs	r5, r5, #2
 800b412:	d03d      	beq.n	800b490 <__pow5mult+0xa0>
 800b414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b416:	b97c      	cbnz	r4, 800b438 <__pow5mult+0x48>
 800b418:	2010      	movs	r0, #16
 800b41a:	f7fd fc07 	bl	8008c2c <malloc>
 800b41e:	4602      	mov	r2, r0
 800b420:	6270      	str	r0, [r6, #36]	; 0x24
 800b422:	b928      	cbnz	r0, 800b430 <__pow5mult+0x40>
 800b424:	4b1d      	ldr	r3, [pc, #116]	; (800b49c <__pow5mult+0xac>)
 800b426:	481e      	ldr	r0, [pc, #120]	; (800b4a0 <__pow5mult+0xb0>)
 800b428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b42c:	f000 fb5e 	bl	800baec <__assert_func>
 800b430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b434:	6004      	str	r4, [r0, #0]
 800b436:	60c4      	str	r4, [r0, #12]
 800b438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b440:	b94c      	cbnz	r4, 800b456 <__pow5mult+0x66>
 800b442:	f240 2171 	movw	r1, #625	; 0x271
 800b446:	4630      	mov	r0, r6
 800b448:	f7ff ff16 	bl	800b278 <__i2b>
 800b44c:	2300      	movs	r3, #0
 800b44e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b452:	4604      	mov	r4, r0
 800b454:	6003      	str	r3, [r0, #0]
 800b456:	f04f 0900 	mov.w	r9, #0
 800b45a:	07eb      	lsls	r3, r5, #31
 800b45c:	d50a      	bpl.n	800b474 <__pow5mult+0x84>
 800b45e:	4639      	mov	r1, r7
 800b460:	4622      	mov	r2, r4
 800b462:	4630      	mov	r0, r6
 800b464:	f7ff ff1e 	bl	800b2a4 <__multiply>
 800b468:	4639      	mov	r1, r7
 800b46a:	4680      	mov	r8, r0
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff fe49 	bl	800b104 <_Bfree>
 800b472:	4647      	mov	r7, r8
 800b474:	106d      	asrs	r5, r5, #1
 800b476:	d00b      	beq.n	800b490 <__pow5mult+0xa0>
 800b478:	6820      	ldr	r0, [r4, #0]
 800b47a:	b938      	cbnz	r0, 800b48c <__pow5mult+0x9c>
 800b47c:	4622      	mov	r2, r4
 800b47e:	4621      	mov	r1, r4
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff ff0f 	bl	800b2a4 <__multiply>
 800b486:	6020      	str	r0, [r4, #0]
 800b488:	f8c0 9000 	str.w	r9, [r0]
 800b48c:	4604      	mov	r4, r0
 800b48e:	e7e4      	b.n	800b45a <__pow5mult+0x6a>
 800b490:	4638      	mov	r0, r7
 800b492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b496:	bf00      	nop
 800b498:	0800cc88 	.word	0x0800cc88
 800b49c:	0800ca3f 	.word	0x0800ca3f
 800b4a0:	0800cb32 	.word	0x0800cb32

0800b4a4 <__lshift>:
 800b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	6849      	ldr	r1, [r1, #4]
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	4691      	mov	r9, r2
 800b4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4bc:	f108 0601 	add.w	r6, r8, #1
 800b4c0:	42b3      	cmp	r3, r6
 800b4c2:	db0b      	blt.n	800b4dc <__lshift+0x38>
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7ff fddd 	bl	800b084 <_Balloc>
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	b948      	cbnz	r0, 800b4e2 <__lshift+0x3e>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	4b28      	ldr	r3, [pc, #160]	; (800b574 <__lshift+0xd0>)
 800b4d2:	4829      	ldr	r0, [pc, #164]	; (800b578 <__lshift+0xd4>)
 800b4d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4d8:	f000 fb08 	bl	800baec <__assert_func>
 800b4dc:	3101      	adds	r1, #1
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	e7ee      	b.n	800b4c0 <__lshift+0x1c>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f100 0114 	add.w	r1, r0, #20
 800b4e8:	f100 0210 	add.w	r2, r0, #16
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	4553      	cmp	r3, sl
 800b4f0:	db33      	blt.n	800b55a <__lshift+0xb6>
 800b4f2:	6920      	ldr	r0, [r4, #16]
 800b4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4f8:	f104 0314 	add.w	r3, r4, #20
 800b4fc:	f019 091f 	ands.w	r9, r9, #31
 800b500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b508:	d02b      	beq.n	800b562 <__lshift+0xbe>
 800b50a:	f1c9 0e20 	rsb	lr, r9, #32
 800b50e:	468a      	mov	sl, r1
 800b510:	2200      	movs	r2, #0
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	fa00 f009 	lsl.w	r0, r0, r9
 800b518:	4302      	orrs	r2, r0
 800b51a:	f84a 2b04 	str.w	r2, [sl], #4
 800b51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b522:	459c      	cmp	ip, r3
 800b524:	fa22 f20e 	lsr.w	r2, r2, lr
 800b528:	d8f3      	bhi.n	800b512 <__lshift+0x6e>
 800b52a:	ebac 0304 	sub.w	r3, ip, r4
 800b52e:	3b15      	subs	r3, #21
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	3304      	adds	r3, #4
 800b536:	f104 0015 	add.w	r0, r4, #21
 800b53a:	4584      	cmp	ip, r0
 800b53c:	bf38      	it	cc
 800b53e:	2304      	movcc	r3, #4
 800b540:	50ca      	str	r2, [r1, r3]
 800b542:	b10a      	cbz	r2, 800b548 <__lshift+0xa4>
 800b544:	f108 0602 	add.w	r6, r8, #2
 800b548:	3e01      	subs	r6, #1
 800b54a:	4638      	mov	r0, r7
 800b54c:	612e      	str	r6, [r5, #16]
 800b54e:	4621      	mov	r1, r4
 800b550:	f7ff fdd8 	bl	800b104 <_Bfree>
 800b554:	4628      	mov	r0, r5
 800b556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b55e:	3301      	adds	r3, #1
 800b560:	e7c5      	b.n	800b4ee <__lshift+0x4a>
 800b562:	3904      	subs	r1, #4
 800b564:	f853 2b04 	ldr.w	r2, [r3], #4
 800b568:	f841 2f04 	str.w	r2, [r1, #4]!
 800b56c:	459c      	cmp	ip, r3
 800b56e:	d8f9      	bhi.n	800b564 <__lshift+0xc0>
 800b570:	e7ea      	b.n	800b548 <__lshift+0xa4>
 800b572:	bf00      	nop
 800b574:	0800cab5 	.word	0x0800cab5
 800b578:	0800cb32 	.word	0x0800cb32

0800b57c <__mcmp>:
 800b57c:	690a      	ldr	r2, [r1, #16]
 800b57e:	4603      	mov	r3, r0
 800b580:	6900      	ldr	r0, [r0, #16]
 800b582:	1a80      	subs	r0, r0, r2
 800b584:	b530      	push	{r4, r5, lr}
 800b586:	d10d      	bne.n	800b5a4 <__mcmp+0x28>
 800b588:	3314      	adds	r3, #20
 800b58a:	3114      	adds	r1, #20
 800b58c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b59c:	4295      	cmp	r5, r2
 800b59e:	d002      	beq.n	800b5a6 <__mcmp+0x2a>
 800b5a0:	d304      	bcc.n	800b5ac <__mcmp+0x30>
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	bd30      	pop	{r4, r5, pc}
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	d3f4      	bcc.n	800b594 <__mcmp+0x18>
 800b5aa:	e7fb      	b.n	800b5a4 <__mcmp+0x28>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e7f8      	b.n	800b5a4 <__mcmp+0x28>
	...

0800b5b4 <__mdiff>:
 800b5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4617      	mov	r7, r2
 800b5c2:	f7ff ffdb 	bl	800b57c <__mcmp>
 800b5c6:	1e05      	subs	r5, r0, #0
 800b5c8:	d111      	bne.n	800b5ee <__mdiff+0x3a>
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff fd59 	bl	800b084 <_Balloc>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	b928      	cbnz	r0, 800b5e2 <__mdiff+0x2e>
 800b5d6:	4b3a      	ldr	r3, [pc, #232]	; (800b6c0 <__mdiff+0x10c>)
 800b5d8:	f240 2132 	movw	r1, #562	; 0x232
 800b5dc:	4839      	ldr	r0, [pc, #228]	; (800b6c4 <__mdiff+0x110>)
 800b5de:	f000 fa85 	bl	800baec <__assert_func>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	bfa4      	itt	ge
 800b5f0:	463b      	movge	r3, r7
 800b5f2:	4627      	movge	r7, r4
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	bfa6      	itte	ge
 800b5fa:	461c      	movge	r4, r3
 800b5fc:	2500      	movge	r5, #0
 800b5fe:	2501      	movlt	r5, #1
 800b600:	f7ff fd40 	bl	800b084 <_Balloc>
 800b604:	4602      	mov	r2, r0
 800b606:	b918      	cbnz	r0, 800b610 <__mdiff+0x5c>
 800b608:	4b2d      	ldr	r3, [pc, #180]	; (800b6c0 <__mdiff+0x10c>)
 800b60a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b60e:	e7e5      	b.n	800b5dc <__mdiff+0x28>
 800b610:	693e      	ldr	r6, [r7, #16]
 800b612:	60c5      	str	r5, [r0, #12]
 800b614:	6925      	ldr	r5, [r4, #16]
 800b616:	f107 0114 	add.w	r1, r7, #20
 800b61a:	f100 0e14 	add.w	lr, r0, #20
 800b61e:	f104 0914 	add.w	r9, r4, #20
 800b622:	f107 0010 	add.w	r0, r7, #16
 800b626:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b62a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b62e:	46f2      	mov	sl, lr
 800b630:	2700      	movs	r7, #0
 800b632:	f859 3b04 	ldr.w	r3, [r9], #4
 800b636:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b63a:	fa1f f883 	uxth.w	r8, r3
 800b63e:	fa17 f78b 	uxtah	r7, r7, fp
 800b642:	0c1b      	lsrs	r3, r3, #16
 800b644:	eba7 0808 	sub.w	r8, r7, r8
 800b648:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b64c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b650:	fa1f f888 	uxth.w	r8, r8
 800b654:	141f      	asrs	r7, r3, #16
 800b656:	454d      	cmp	r5, r9
 800b658:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b65c:	f84a 3b04 	str.w	r3, [sl], #4
 800b660:	d8e7      	bhi.n	800b632 <__mdiff+0x7e>
 800b662:	1b2b      	subs	r3, r5, r4
 800b664:	3b15      	subs	r3, #21
 800b666:	f023 0303 	bic.w	r3, r3, #3
 800b66a:	3304      	adds	r3, #4
 800b66c:	3415      	adds	r4, #21
 800b66e:	42a5      	cmp	r5, r4
 800b670:	bf38      	it	cc
 800b672:	2304      	movcc	r3, #4
 800b674:	4419      	add	r1, r3
 800b676:	4473      	add	r3, lr
 800b678:	469e      	mov	lr, r3
 800b67a:	460d      	mov	r5, r1
 800b67c:	4565      	cmp	r5, ip
 800b67e:	d30e      	bcc.n	800b69e <__mdiff+0xea>
 800b680:	f10c 0003 	add.w	r0, ip, #3
 800b684:	1a40      	subs	r0, r0, r1
 800b686:	f020 0003 	bic.w	r0, r0, #3
 800b68a:	3903      	subs	r1, #3
 800b68c:	458c      	cmp	ip, r1
 800b68e:	bf38      	it	cc
 800b690:	2000      	movcc	r0, #0
 800b692:	4418      	add	r0, r3
 800b694:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b698:	b17b      	cbz	r3, 800b6ba <__mdiff+0x106>
 800b69a:	6116      	str	r6, [r2, #16]
 800b69c:	e7a4      	b.n	800b5e8 <__mdiff+0x34>
 800b69e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b6a2:	fa17 f488 	uxtah	r4, r7, r8
 800b6a6:	1420      	asrs	r0, r4, #16
 800b6a8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b6ac:	b2a4      	uxth	r4, r4
 800b6ae:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800b6b2:	f84e 4b04 	str.w	r4, [lr], #4
 800b6b6:	1407      	asrs	r7, r0, #16
 800b6b8:	e7e0      	b.n	800b67c <__mdiff+0xc8>
 800b6ba:	3e01      	subs	r6, #1
 800b6bc:	e7ea      	b.n	800b694 <__mdiff+0xe0>
 800b6be:	bf00      	nop
 800b6c0:	0800cab5 	.word	0x0800cab5
 800b6c4:	0800cb32 	.word	0x0800cb32

0800b6c8 <__d2b>:
 800b6c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b6d2:	4690      	mov	r8, r2
 800b6d4:	461d      	mov	r5, r3
 800b6d6:	f7ff fcd5 	bl	800b084 <_Balloc>
 800b6da:	4604      	mov	r4, r0
 800b6dc:	b930      	cbnz	r0, 800b6ec <__d2b+0x24>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	4b25      	ldr	r3, [pc, #148]	; (800b778 <__d2b+0xb0>)
 800b6e2:	4826      	ldr	r0, [pc, #152]	; (800b77c <__d2b+0xb4>)
 800b6e4:	f240 310a 	movw	r1, #778	; 0x30a
 800b6e8:	f000 fa00 	bl	800baec <__assert_func>
 800b6ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b6f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b6f4:	bb2d      	cbnz	r5, 800b742 <__d2b+0x7a>
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b6fc:	d026      	beq.n	800b74c <__d2b+0x84>
 800b6fe:	4668      	mov	r0, sp
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	f7ff fd8b 	bl	800b21c <__lo0bits>
 800b706:	9900      	ldr	r1, [sp, #0]
 800b708:	b1f0      	cbz	r0, 800b748 <__d2b+0x80>
 800b70a:	9a01      	ldr	r2, [sp, #4]
 800b70c:	f1c0 0320 	rsb	r3, r0, #32
 800b710:	fa02 f303 	lsl.w	r3, r2, r3
 800b714:	430b      	orrs	r3, r1
 800b716:	40c2      	lsrs	r2, r0
 800b718:	6163      	str	r3, [r4, #20]
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	61a3      	str	r3, [r4, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bf14      	ite	ne
 800b724:	2102      	movne	r1, #2
 800b726:	2101      	moveq	r1, #1
 800b728:	6121      	str	r1, [r4, #16]
 800b72a:	b1c5      	cbz	r5, 800b75e <__d2b+0x96>
 800b72c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b730:	4405      	add	r5, r0
 800b732:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b736:	603d      	str	r5, [r7, #0]
 800b738:	6030      	str	r0, [r6, #0]
 800b73a:	4620      	mov	r0, r4
 800b73c:	b002      	add	sp, #8
 800b73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b746:	e7d6      	b.n	800b6f6 <__d2b+0x2e>
 800b748:	6161      	str	r1, [r4, #20]
 800b74a:	e7e7      	b.n	800b71c <__d2b+0x54>
 800b74c:	a801      	add	r0, sp, #4
 800b74e:	f7ff fd65 	bl	800b21c <__lo0bits>
 800b752:	9b01      	ldr	r3, [sp, #4]
 800b754:	6163      	str	r3, [r4, #20]
 800b756:	2101      	movs	r1, #1
 800b758:	6121      	str	r1, [r4, #16]
 800b75a:	3020      	adds	r0, #32
 800b75c:	e7e5      	b.n	800b72a <__d2b+0x62>
 800b75e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b762:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b766:	6038      	str	r0, [r7, #0]
 800b768:	6918      	ldr	r0, [r3, #16]
 800b76a:	f7ff fd37 	bl	800b1dc <__hi0bits>
 800b76e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b772:	6031      	str	r1, [r6, #0]
 800b774:	e7e1      	b.n	800b73a <__d2b+0x72>
 800b776:	bf00      	nop
 800b778:	0800cab5 	.word	0x0800cab5
 800b77c:	0800cb32 	.word	0x0800cb32

0800b780 <_calloc_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	fb02 f501 	mul.w	r5, r2, r1
 800b786:	4629      	mov	r1, r5
 800b788:	f7fd fad2 	bl	8008d30 <_malloc_r>
 800b78c:	4604      	mov	r4, r0
 800b78e:	b118      	cbz	r0, 800b798 <_calloc_r+0x18>
 800b790:	462a      	mov	r2, r5
 800b792:	2100      	movs	r1, #0
 800b794:	f7fd fa76 	bl	8008c84 <memset>
 800b798:	4620      	mov	r0, r4
 800b79a:	bd38      	pop	{r3, r4, r5, pc}

0800b79c <__sfputc_r>:
 800b79c:	6893      	ldr	r3, [r2, #8]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	b410      	push	{r4}
 800b7a4:	6093      	str	r3, [r2, #8]
 800b7a6:	da07      	bge.n	800b7b8 <__sfputc_r+0x1c>
 800b7a8:	6994      	ldr	r4, [r2, #24]
 800b7aa:	42a3      	cmp	r3, r4
 800b7ac:	db01      	blt.n	800b7b2 <__sfputc_r+0x16>
 800b7ae:	290a      	cmp	r1, #10
 800b7b0:	d102      	bne.n	800b7b8 <__sfputc_r+0x1c>
 800b7b2:	bc10      	pop	{r4}
 800b7b4:	f7fe ba9a 	b.w	8009cec <__swbuf_r>
 800b7b8:	6813      	ldr	r3, [r2, #0]
 800b7ba:	1c58      	adds	r0, r3, #1
 800b7bc:	6010      	str	r0, [r2, #0]
 800b7be:	7019      	strb	r1, [r3, #0]
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	bc10      	pop	{r4}
 800b7c4:	4770      	bx	lr

0800b7c6 <__sfputs_r>:
 800b7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	18d5      	adds	r5, r2, r3
 800b7d0:	42ac      	cmp	r4, r5
 800b7d2:	d101      	bne.n	800b7d8 <__sfputs_r+0x12>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e007      	b.n	800b7e8 <__sfputs_r+0x22>
 800b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7dc:	463a      	mov	r2, r7
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ffdc 	bl	800b79c <__sfputc_r>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d1f3      	bne.n	800b7d0 <__sfputs_r+0xa>
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7ec <_vfiprintf_r>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	b09d      	sub	sp, #116	; 0x74
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	4698      	mov	r8, r3
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	b118      	cbz	r0, 800b804 <_vfiprintf_r+0x18>
 800b7fc:	6983      	ldr	r3, [r0, #24]
 800b7fe:	b90b      	cbnz	r3, 800b804 <_vfiprintf_r+0x18>
 800b800:	f7ff fb18 	bl	800ae34 <__sinit>
 800b804:	4b89      	ldr	r3, [pc, #548]	; (800ba2c <_vfiprintf_r+0x240>)
 800b806:	429d      	cmp	r5, r3
 800b808:	d11b      	bne.n	800b842 <_vfiprintf_r+0x56>
 800b80a:	6875      	ldr	r5, [r6, #4]
 800b80c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b80e:	07d9      	lsls	r1, r3, #31
 800b810:	d405      	bmi.n	800b81e <_vfiprintf_r+0x32>
 800b812:	89ab      	ldrh	r3, [r5, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d402      	bmi.n	800b81e <_vfiprintf_r+0x32>
 800b818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b81a:	f7ff fbae 	bl	800af7a <__retarget_lock_acquire_recursive>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	071b      	lsls	r3, r3, #28
 800b822:	d501      	bpl.n	800b828 <_vfiprintf_r+0x3c>
 800b824:	692b      	ldr	r3, [r5, #16]
 800b826:	b9eb      	cbnz	r3, 800b864 <_vfiprintf_r+0x78>
 800b828:	4629      	mov	r1, r5
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7fe fac2 	bl	8009db4 <__swsetup_r>
 800b830:	b1c0      	cbz	r0, 800b864 <_vfiprintf_r+0x78>
 800b832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b834:	07dc      	lsls	r4, r3, #31
 800b836:	d50e      	bpl.n	800b856 <_vfiprintf_r+0x6a>
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	b01d      	add	sp, #116	; 0x74
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	4b7b      	ldr	r3, [pc, #492]	; (800ba30 <_vfiprintf_r+0x244>)
 800b844:	429d      	cmp	r5, r3
 800b846:	d101      	bne.n	800b84c <_vfiprintf_r+0x60>
 800b848:	68b5      	ldr	r5, [r6, #8]
 800b84a:	e7df      	b.n	800b80c <_vfiprintf_r+0x20>
 800b84c:	4b79      	ldr	r3, [pc, #484]	; (800ba34 <_vfiprintf_r+0x248>)
 800b84e:	429d      	cmp	r5, r3
 800b850:	bf08      	it	eq
 800b852:	68f5      	ldreq	r5, [r6, #12]
 800b854:	e7da      	b.n	800b80c <_vfiprintf_r+0x20>
 800b856:	89ab      	ldrh	r3, [r5, #12]
 800b858:	0598      	lsls	r0, r3, #22
 800b85a:	d4ed      	bmi.n	800b838 <_vfiprintf_r+0x4c>
 800b85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b85e:	f7ff fb8d 	bl	800af7c <__retarget_lock_release_recursive>
 800b862:	e7e9      	b.n	800b838 <_vfiprintf_r+0x4c>
 800b864:	2300      	movs	r3, #0
 800b866:	9309      	str	r3, [sp, #36]	; 0x24
 800b868:	2320      	movs	r3, #32
 800b86a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b872:	2330      	movs	r3, #48	; 0x30
 800b874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba38 <_vfiprintf_r+0x24c>
 800b878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b87c:	f04f 0901 	mov.w	r9, #1
 800b880:	4623      	mov	r3, r4
 800b882:	469a      	mov	sl, r3
 800b884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b888:	b10a      	cbz	r2, 800b88e <_vfiprintf_r+0xa2>
 800b88a:	2a25      	cmp	r2, #37	; 0x25
 800b88c:	d1f9      	bne.n	800b882 <_vfiprintf_r+0x96>
 800b88e:	ebba 0b04 	subs.w	fp, sl, r4
 800b892:	d00b      	beq.n	800b8ac <_vfiprintf_r+0xc0>
 800b894:	465b      	mov	r3, fp
 800b896:	4622      	mov	r2, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff ff93 	bl	800b7c6 <__sfputs_r>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	f000 80aa 	beq.w	800b9fa <_vfiprintf_r+0x20e>
 800b8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a8:	445a      	add	r2, fp
 800b8aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80a2 	beq.w	800b9fa <_vfiprintf_r+0x20e>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8c0:	f10a 0a01 	add.w	sl, sl, #1
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	9307      	str	r3, [sp, #28]
 800b8c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b8ce:	4654      	mov	r4, sl
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d6:	4858      	ldr	r0, [pc, #352]	; (800ba38 <_vfiprintf_r+0x24c>)
 800b8d8:	f7f4 fc6a 	bl	80001b0 <memchr>
 800b8dc:	9a04      	ldr	r2, [sp, #16]
 800b8de:	b9d8      	cbnz	r0, 800b918 <_vfiprintf_r+0x12c>
 800b8e0:	06d1      	lsls	r1, r2, #27
 800b8e2:	bf44      	itt	mi
 800b8e4:	2320      	movmi	r3, #32
 800b8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ea:	0713      	lsls	r3, r2, #28
 800b8ec:	bf44      	itt	mi
 800b8ee:	232b      	movmi	r3, #43	; 0x2b
 800b8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8fa:	d015      	beq.n	800b928 <_vfiprintf_r+0x13c>
 800b8fc:	9a07      	ldr	r2, [sp, #28]
 800b8fe:	4654      	mov	r4, sl
 800b900:	2000      	movs	r0, #0
 800b902:	f04f 0c0a 	mov.w	ip, #10
 800b906:	4621      	mov	r1, r4
 800b908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b90c:	3b30      	subs	r3, #48	; 0x30
 800b90e:	2b09      	cmp	r3, #9
 800b910:	d94e      	bls.n	800b9b0 <_vfiprintf_r+0x1c4>
 800b912:	b1b0      	cbz	r0, 800b942 <_vfiprintf_r+0x156>
 800b914:	9207      	str	r2, [sp, #28]
 800b916:	e014      	b.n	800b942 <_vfiprintf_r+0x156>
 800b918:	eba0 0308 	sub.w	r3, r0, r8
 800b91c:	fa09 f303 	lsl.w	r3, r9, r3
 800b920:	4313      	orrs	r3, r2
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	46a2      	mov	sl, r4
 800b926:	e7d2      	b.n	800b8ce <_vfiprintf_r+0xe2>
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	1d19      	adds	r1, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	9103      	str	r1, [sp, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	bfbb      	ittet	lt
 800b934:	425b      	neglt	r3, r3
 800b936:	f042 0202 	orrlt.w	r2, r2, #2
 800b93a:	9307      	strge	r3, [sp, #28]
 800b93c:	9307      	strlt	r3, [sp, #28]
 800b93e:	bfb8      	it	lt
 800b940:	9204      	strlt	r2, [sp, #16]
 800b942:	7823      	ldrb	r3, [r4, #0]
 800b944:	2b2e      	cmp	r3, #46	; 0x2e
 800b946:	d10c      	bne.n	800b962 <_vfiprintf_r+0x176>
 800b948:	7863      	ldrb	r3, [r4, #1]
 800b94a:	2b2a      	cmp	r3, #42	; 0x2a
 800b94c:	d135      	bne.n	800b9ba <_vfiprintf_r+0x1ce>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	1d1a      	adds	r2, r3, #4
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	9203      	str	r2, [sp, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfb8      	it	lt
 800b95a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b95e:	3402      	adds	r4, #2
 800b960:	9305      	str	r3, [sp, #20]
 800b962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba48 <_vfiprintf_r+0x25c>
 800b966:	7821      	ldrb	r1, [r4, #0]
 800b968:	2203      	movs	r2, #3
 800b96a:	4650      	mov	r0, sl
 800b96c:	f7f4 fc20 	bl	80001b0 <memchr>
 800b970:	b140      	cbz	r0, 800b984 <_vfiprintf_r+0x198>
 800b972:	2340      	movs	r3, #64	; 0x40
 800b974:	eba0 000a 	sub.w	r0, r0, sl
 800b978:	fa03 f000 	lsl.w	r0, r3, r0
 800b97c:	9b04      	ldr	r3, [sp, #16]
 800b97e:	4303      	orrs	r3, r0
 800b980:	3401      	adds	r4, #1
 800b982:	9304      	str	r3, [sp, #16]
 800b984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b988:	482c      	ldr	r0, [pc, #176]	; (800ba3c <_vfiprintf_r+0x250>)
 800b98a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b98e:	2206      	movs	r2, #6
 800b990:	f7f4 fc0e 	bl	80001b0 <memchr>
 800b994:	2800      	cmp	r0, #0
 800b996:	d03f      	beq.n	800ba18 <_vfiprintf_r+0x22c>
 800b998:	4b29      	ldr	r3, [pc, #164]	; (800ba40 <_vfiprintf_r+0x254>)
 800b99a:	bb1b      	cbnz	r3, 800b9e4 <_vfiprintf_r+0x1f8>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	3307      	adds	r3, #7
 800b9a0:	f023 0307 	bic.w	r3, r3, #7
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	443b      	add	r3, r7
 800b9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ae:	e767      	b.n	800b880 <_vfiprintf_r+0x94>
 800b9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	2001      	movs	r0, #1
 800b9b8:	e7a5      	b.n	800b906 <_vfiprintf_r+0x11a>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	3401      	adds	r4, #1
 800b9be:	9305      	str	r3, [sp, #20]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f04f 0c0a 	mov.w	ip, #10
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9cc:	3a30      	subs	r2, #48	; 0x30
 800b9ce:	2a09      	cmp	r2, #9
 800b9d0:	d903      	bls.n	800b9da <_vfiprintf_r+0x1ee>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0c5      	beq.n	800b962 <_vfiprintf_r+0x176>
 800b9d6:	9105      	str	r1, [sp, #20]
 800b9d8:	e7c3      	b.n	800b962 <_vfiprintf_r+0x176>
 800b9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9de:	4604      	mov	r4, r0
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e7f0      	b.n	800b9c6 <_vfiprintf_r+0x1da>
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <_vfiprintf_r+0x258>)
 800b9ec:	a904      	add	r1, sp, #16
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7fd fa96 	bl	8008f20 <_printf_float>
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	1c78      	adds	r0, r7, #1
 800b9f8:	d1d6      	bne.n	800b9a8 <_vfiprintf_r+0x1bc>
 800b9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9fc:	07d9      	lsls	r1, r3, #31
 800b9fe:	d405      	bmi.n	800ba0c <_vfiprintf_r+0x220>
 800ba00:	89ab      	ldrh	r3, [r5, #12]
 800ba02:	059a      	lsls	r2, r3, #22
 800ba04:	d402      	bmi.n	800ba0c <_vfiprintf_r+0x220>
 800ba06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba08:	f7ff fab8 	bl	800af7c <__retarget_lock_release_recursive>
 800ba0c:	89ab      	ldrh	r3, [r5, #12]
 800ba0e:	065b      	lsls	r3, r3, #25
 800ba10:	f53f af12 	bmi.w	800b838 <_vfiprintf_r+0x4c>
 800ba14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba16:	e711      	b.n	800b83c <_vfiprintf_r+0x50>
 800ba18:	ab03      	add	r3, sp, #12
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <_vfiprintf_r+0x258>)
 800ba20:	a904      	add	r1, sp, #16
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7fd fd14 	bl	8009450 <_printf_i>
 800ba28:	e7e4      	b.n	800b9f4 <_vfiprintf_r+0x208>
 800ba2a:	bf00      	nop
 800ba2c:	0800cae8 	.word	0x0800cae8
 800ba30:	0800cb08 	.word	0x0800cb08
 800ba34:	0800cac8 	.word	0x0800cac8
 800ba38:	0800cc94 	.word	0x0800cc94
 800ba3c:	0800cc9e 	.word	0x0800cc9e
 800ba40:	08008f21 	.word	0x08008f21
 800ba44:	0800b7c7 	.word	0x0800b7c7
 800ba48:	0800cc9a 	.word	0x0800cc9a

0800ba4c <__sread>:
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba54:	f000 f8be 	bl	800bbd4 <_read_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	bfab      	itete	ge
 800ba5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba60:	181b      	addge	r3, r3, r0
 800ba62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba66:	bfac      	ite	ge
 800ba68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba6a:	81a3      	strhlt	r3, [r4, #12]
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <__swrite>:
 800ba6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	461f      	mov	r7, r3
 800ba74:	898b      	ldrh	r3, [r1, #12]
 800ba76:	05db      	lsls	r3, r3, #23
 800ba78:	4605      	mov	r5, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	d505      	bpl.n	800ba8c <__swrite+0x1e>
 800ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba84:	2302      	movs	r3, #2
 800ba86:	2200      	movs	r2, #0
 800ba88:	f000 f892 	bl	800bbb0 <_lseek_r>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	4632      	mov	r2, r6
 800ba9a:	463b      	mov	r3, r7
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa2:	f7fe b975 	b.w	8009d90 <_write_r>

0800baa6 <__sseek>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baae:	f000 f87f 	bl	800bbb0 <_lseek_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	bf15      	itete	ne
 800bab8:	6560      	strne	r0, [r4, #84]	; 0x54
 800baba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800babe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bac2:	81a3      	strheq	r3, [r4, #12]
 800bac4:	bf18      	it	ne
 800bac6:	81a3      	strhne	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__sclose>:
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 b82b 	b.w	800bb28 <_close_r>

0800bad2 <__ascii_wctomb>:
 800bad2:	4603      	mov	r3, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	b141      	cbz	r1, 800baea <__ascii_wctomb+0x18>
 800bad8:	2aff      	cmp	r2, #255	; 0xff
 800bada:	d904      	bls.n	800bae6 <__ascii_wctomb+0x14>
 800badc:	228a      	movs	r2, #138	; 0x8a
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	4770      	bx	lr
 800bae6:	700a      	strb	r2, [r1, #0]
 800bae8:	2001      	movs	r0, #1
 800baea:	4770      	bx	lr

0800baec <__assert_func>:
 800baec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baee:	4614      	mov	r4, r2
 800baf0:	461a      	mov	r2, r3
 800baf2:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <__assert_func+0x2c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4605      	mov	r5, r0
 800baf8:	68d8      	ldr	r0, [r3, #12]
 800bafa:	b14c      	cbz	r4, 800bb10 <__assert_func+0x24>
 800bafc:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <__assert_func+0x30>)
 800bafe:	9100      	str	r1, [sp, #0]
 800bb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <__assert_func+0x34>)
 800bb06:	462b      	mov	r3, r5
 800bb08:	f000 f81e 	bl	800bb48 <fiprintf>
 800bb0c:	f000 f874 	bl	800bbf8 <abort>
 800bb10:	4b04      	ldr	r3, [pc, #16]	; (800bb24 <__assert_func+0x38>)
 800bb12:	461c      	mov	r4, r3
 800bb14:	e7f3      	b.n	800bafe <__assert_func+0x12>
 800bb16:	bf00      	nop
 800bb18:	2000000c 	.word	0x2000000c
 800bb1c:	0800cca5 	.word	0x0800cca5
 800bb20:	0800ccb2 	.word	0x0800ccb2
 800bb24:	0800cce0 	.word	0x0800cce0

0800bb28 <_close_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d06      	ldr	r5, [pc, #24]	; (800bb44 <_close_r+0x1c>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	4608      	mov	r0, r1
 800bb32:	602b      	str	r3, [r5, #0]
 800bb34:	f7f5 fe72 	bl	800181c <_close>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_close_r+0x1a>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_close_r+0x1a>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	20000600 	.word	0x20000600

0800bb48 <fiprintf>:
 800bb48:	b40e      	push	{r1, r2, r3}
 800bb4a:	b503      	push	{r0, r1, lr}
 800bb4c:	4601      	mov	r1, r0
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	4805      	ldr	r0, [pc, #20]	; (800bb68 <fiprintf+0x20>)
 800bb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb56:	6800      	ldr	r0, [r0, #0]
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	f7ff fe47 	bl	800b7ec <_vfiprintf_r>
 800bb5e:	b002      	add	sp, #8
 800bb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb64:	b003      	add	sp, #12
 800bb66:	4770      	bx	lr
 800bb68:	2000000c 	.word	0x2000000c

0800bb6c <_fstat_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4d07      	ldr	r5, [pc, #28]	; (800bb8c <_fstat_r+0x20>)
 800bb70:	2300      	movs	r3, #0
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f5 fe5a 	bl	8001832 <_fstat>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d102      	bne.n	800bb88 <_fstat_r+0x1c>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b103      	cbz	r3, 800bb88 <_fstat_r+0x1c>
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000600 	.word	0x20000600

0800bb90 <_isatty_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_isatty_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f5 fe58 	bl	8001850 <_isatty>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_isatty_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_isatty_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20000600 	.word	0x20000600

0800bbb0 <_lseek_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	4d07      	ldr	r5, [pc, #28]	; (800bbd0 <_lseek_r+0x20>)
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	4608      	mov	r0, r1
 800bbb8:	4611      	mov	r1, r2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f7f5 fe50 	bl	8001864 <_lseek>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_lseek_r+0x1e>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_lseek_r+0x1e>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20000600 	.word	0x20000600

0800bbd4 <_read_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	; (800bbf4 <_read_r+0x20>)
 800bbd8:	4604      	mov	r4, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f5 fde1 	bl	80017aa <_read>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_read_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_read_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20000600 	.word	0x20000600

0800bbf8 <abort>:
 800bbf8:	b508      	push	{r3, lr}
 800bbfa:	2006      	movs	r0, #6
 800bbfc:	f000 f82c 	bl	800bc58 <raise>
 800bc00:	2001      	movs	r0, #1
 800bc02:	f7f5 fdc8 	bl	8001796 <_exit>

0800bc06 <_raise_r>:
 800bc06:	291f      	cmp	r1, #31
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	d904      	bls.n	800bc1a <_raise_r+0x14>
 800bc10:	2316      	movs	r3, #22
 800bc12:	6003      	str	r3, [r0, #0]
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
 800bc1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc1c:	b112      	cbz	r2, 800bc24 <_raise_r+0x1e>
 800bc1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc22:	b94b      	cbnz	r3, 800bc38 <_raise_r+0x32>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 f831 	bl	800bc8c <_getpid_r>
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	4601      	mov	r1, r0
 800bc2e:	4620      	mov	r0, r4
 800bc30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc34:	f000 b818 	b.w	800bc68 <_kill_r>
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d00a      	beq.n	800bc52 <_raise_r+0x4c>
 800bc3c:	1c59      	adds	r1, r3, #1
 800bc3e:	d103      	bne.n	800bc48 <_raise_r+0x42>
 800bc40:	2316      	movs	r3, #22
 800bc42:	6003      	str	r3, [r0, #0]
 800bc44:	2001      	movs	r0, #1
 800bc46:	e7e7      	b.n	800bc18 <_raise_r+0x12>
 800bc48:	2400      	movs	r4, #0
 800bc4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	4798      	blx	r3
 800bc52:	2000      	movs	r0, #0
 800bc54:	e7e0      	b.n	800bc18 <_raise_r+0x12>
	...

0800bc58 <raise>:
 800bc58:	4b02      	ldr	r3, [pc, #8]	; (800bc64 <raise+0xc>)
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	f7ff bfd2 	b.w	800bc06 <_raise_r>
 800bc62:	bf00      	nop
 800bc64:	2000000c 	.word	0x2000000c

0800bc68 <_kill_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d07      	ldr	r5, [pc, #28]	; (800bc88 <_kill_r+0x20>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	4611      	mov	r1, r2
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	f7f5 fd7e 	bl	8001776 <_kill>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d102      	bne.n	800bc84 <_kill_r+0x1c>
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	b103      	cbz	r3, 800bc84 <_kill_r+0x1c>
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	bd38      	pop	{r3, r4, r5, pc}
 800bc86:	bf00      	nop
 800bc88:	20000600 	.word	0x20000600

0800bc8c <_getpid_r>:
 800bc8c:	f7f5 bd6c 	b.w	8001768 <_getpid>

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
