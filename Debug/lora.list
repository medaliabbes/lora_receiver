
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd88  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001254  0800bec8  0800bec8  0001bec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d11c  0800d11c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d124  0800d124  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d124  0800d124  0001d124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d128  0800d128  0001d128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001dc  0800d308  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800d308  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a27  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a6c  00000000  00000000  00044c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000496a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0004b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1f3  00000000  00000000  0004c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019be3  00000000  00000000  0006a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6faa  00000000  00000000  00084596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000790c  00000000  00000000  0012b594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800beb0 	.word	0x0800beb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	0800beb0 	.word	0x0800beb0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96c 	b.w	8000e68 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8082 	bne.w	8000cbe <__udivmoddi4+0x116>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	d946      	bls.n	8000c4e <__udivmoddi4+0xa6>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x32>
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa05 f302 	lsl.w	r3, r5, r2
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbe fcf8 	udiv	ip, lr, r8
 8000be4:	b2b9      	uxth	r1, r7
 8000be6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bee:	fb0c f001 	mul.w	r0, ip, r1
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000bfc:	f080 8116 	bcs.w	8000e2c <__udivmoddi4+0x284>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f240 8113 	bls.w	8000e2c <__udivmoddi4+0x284>
 8000c06:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f101 	mul.w	r1, r0, r1
 8000c20:	42a1      	cmp	r1, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8101 	bcs.w	8000e30 <__udivmoddi4+0x288>
 8000c2e:	42a1      	cmp	r1, r4
 8000c30:	f240 80fe 	bls.w	8000e30 <__udivmoddi4+0x288>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	1a64      	subs	r4, r4, r1
 8000c3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40d4      	lsrs	r4, r2
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xaa>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d14f      	bne.n	8000cfa <__udivmoddi4+0x152>
 8000c5a:	1bcb      	subs	r3, r1, r7
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f f887 	uxth.w	r8, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6a:	0c25      	lsrs	r5, r4, #16
 8000c6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c74:	fb08 f30c 	mul.w	r3, r8, ip
 8000c78:	42ab      	cmp	r3, r5
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0xe4>
 8000c7c:	197d      	adds	r5, r7, r5
 8000c7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0xe2>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	f200 80e7 	bhi.w	8000e58 <__udivmoddi4+0x2b0>
 8000c8a:	4684      	mov	ip, r0
 8000c8c:	1aed      	subs	r5, r5, r3
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c9c:	fb08 f800 	mul.w	r8, r8, r0
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x10c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x10a>
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	f200 80d7 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	eba4 0408 	sub.w	r4, r4, r8
 8000cb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbc:	e7c0      	b.n	8000c40 <__udivmoddi4+0x98>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80af 	beq.w	8000e26 <__udivmoddi4+0x27e>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d14b      	bne.n	8000d74 <__udivmoddi4+0x1cc>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0x13e>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80b7 	bhi.w	8000e54 <__udivmoddi4+0x2ac>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0303 	sbc.w	r3, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	469e      	mov	lr, r3
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0aa      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cf8:	e7a7      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000cfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	4097      	lsls	r7, r2
 8000d04:	fa20 f00c 	lsr.w	r0, r0, ip
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000d10:	4318      	orrs	r0, r3
 8000d12:	fbbc f1fe 	udiv	r1, ip, lr
 8000d16:	0c05      	lsrs	r5, r0, #16
 8000d18:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d24:	fb01 f308 	mul.w	r3, r1, r8
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x19c>
 8000d30:	197d      	adds	r5, r7, r5
 8000d32:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d36:	f080 808b 	bcs.w	8000e50 <__udivmoddi4+0x2a8>
 8000d3a:	42ab      	cmp	r3, r5
 8000d3c:	f240 8088 	bls.w	8000e50 <__udivmoddi4+0x2a8>
 8000d40:	3902      	subs	r1, #2
 8000d42:	443d      	add	r5, r7
 8000d44:	1aeb      	subs	r3, r5, r3
 8000d46:	b285      	uxth	r5, r0
 8000d48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d54:	fb00 f308 	mul.w	r3, r0, r8
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	197d      	adds	r5, r7, r5
 8000d5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d62:	d271      	bcs.n	8000e48 <__udivmoddi4+0x2a0>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d96f      	bls.n	8000e48 <__udivmoddi4+0x2a0>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443d      	add	r5, r7
 8000d6c:	1aeb      	subs	r3, r5, r3
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	e778      	b.n	8000c66 <__udivmoddi4+0xbe>
 8000d74:	f1c1 0c20 	rsb	ip, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d84:	fa05 f301 	lsl.w	r3, r5, r1
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	0c23      	lsrs	r3, r4, #16
 8000d94:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000da0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000da4:	fb09 fa08 	mul.w	sl, r9, r8
 8000da8:	45aa      	cmp	sl, r5
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	fa00 f301 	lsl.w	r3, r0, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x21e>
 8000db4:	197d      	adds	r5, r7, r5
 8000db6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dba:	d247      	bcs.n	8000e4c <__udivmoddi4+0x2a4>
 8000dbc:	45aa      	cmp	sl, r5
 8000dbe:	d945      	bls.n	8000e4c <__udivmoddi4+0x2a4>
 8000dc0:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	eba5 050a 	sub.w	r5, r5, sl
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000dd0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000dd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd8:	fb00 f808 	mul.w	r8, r0, r8
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x248>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de6:	d22d      	bcs.n	8000e44 <__udivmoddi4+0x29c>
 8000de8:	45a0      	cmp	r8, r4
 8000dea:	d92b      	bls.n	8000e44 <__udivmoddi4+0x29c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfc:	454c      	cmp	r4, r9
 8000dfe:	46c6      	mov	lr, r8
 8000e00:	464d      	mov	r5, r9
 8000e02:	d319      	bcc.n	8000e38 <__udivmoddi4+0x290>
 8000e04:	d016      	beq.n	8000e34 <__udivmoddi4+0x28c>
 8000e06:	b15e      	cbz	r6, 8000e20 <__udivmoddi4+0x278>
 8000e08:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0c:	eb64 0405 	sbc.w	r4, r4, r5
 8000e10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e14:	40ca      	lsrs	r2, r1
 8000e16:	ea4c 0202 	orr.w	r2, ip, r2
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c6 2400 	strd	r2, r4, [r6]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e70e      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e2c:	46ac      	mov	ip, r5
 8000e2e:	e6ed      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e701      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e34:	4543      	cmp	r3, r8
 8000e36:	d2e6      	bcs.n	8000e06 <__udivmoddi4+0x25e>
 8000e38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3c:	eb69 0507 	sbc.w	r5, r9, r7
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7e0      	b.n	8000e06 <__udivmoddi4+0x25e>
 8000e44:	4628      	mov	r0, r5
 8000e46:	e7d3      	b.n	8000df0 <__udivmoddi4+0x248>
 8000e48:	4660      	mov	r0, ip
 8000e4a:	e78f      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e7ba      	b.n	8000dc6 <__udivmoddi4+0x21e>
 8000e50:	4661      	mov	r1, ip
 8000e52:	e777      	b.n	8000d44 <__udivmoddi4+0x19c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e74b      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	443d      	add	r5, r7
 8000e5e:	e715      	b.n	8000c8c <__udivmoddi4+0xe4>
 8000e60:	3802      	subs	r0, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	e726      	b.n	8000cb4 <__udivmoddi4+0x10c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 8000e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e74:	f001 f850 	bl	8001f18 <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 8000e78:	f001 f82c 	bl	8001ed4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <config_init+0x1c>)
 8000e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e82:	611a      	str	r2, [r3, #16]
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58004000 	.word	0x58004000

08000e8c <config_load>:
	  }

}

void config_load(config_t * param)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8000e94:	2008      	movs	r0, #8
 8000e96:	f007 ff7b 	bl	8008d90 <malloc>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <config_load+0x54>)
 8000ea0:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e00b      	b.n	8000ec0 <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	440b      	add	r3, r1
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	d9f0      	bls.n	8000ea8 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f007 ff7e 	bl	8008dcc <memcpy>

	free(p_mydata) ;
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f007 ff65 	bl	8008da0 <free>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	0803f800 	.word	0x0803f800

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <__NVIC_EnableIRQ+0x34>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f80:	f023 0218 	bic.w	r2, r3, #24
 8000f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <sys_delay>:
#define STATE_PASS_ACCEPTED		0x02
#define STATE_GET_CONFIG		0x03
#define STATE_SAVE	    		0x04

extern void sys_delay(u32 x)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fe4e 	bl	8001c74 <HAL_Delay>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <sys_get_tick>:

extern u32 sys_get_tick()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 8000fe4:	f000 fe3c 	bl	8001c60 <HAL_GetTick>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <sys_random>:

u8  sys_random() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 8000ff4:	f000 fae4 	bl	80015c0 <get_random>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <sys_random+0x20>)
 8000ffc:	fba3 2301 	umull	r2, r3, r3, r1
 8001000:	09da      	lsrs	r2, r3, #7
 8001002:	4613      	mov	r3, r2
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	1aca      	subs	r2, r1, r3
 800100a:	b2d3      	uxtb	r3, r2
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	80808081 	.word	0x80808081

08001014 <main>:

config_t config_param ;
config_t config_param_copy ; // this should be loaded from the flash

int main(void)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af02      	add	r7, sp, #8

  HAL_Init();
 800101a:	f000 fdb5 	bl	8001b88 <HAL_Init>

  SystemClock_Config();
 800101e:	f000 f885 	bl	800112c <SystemClock_Config>

  MX_GPIO_Init();
 8001022:	f000 f931 	bl	8001288 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001026:	f000 f8db 	bl	80011e0 <MX_USART1_UART_Init>
  SubghzApp_Init();
 800102a:	f000 fad3 	bl	80015d4 <SubghzApp_Init>

  //Rx pin should not be floating
  //uart_driver_init() ;

  printf("Yes we did 'it!!\n");
 800102e:	4835      	ldr	r0, [pc, #212]	; (8001104 <main+0xf0>)
 8001030:	f008 fd22 	bl	8009a78 <puts>
  printf("enter your config\n");
 8001034:	4834      	ldr	r0, [pc, #208]	; (8001108 <main+0xf4>)
 8001036:	f008 fd1f 	bl	8009a78 <puts>

  /************load configuration from flash and print it ************/
  config_init();
 800103a:	f7ff ff17 	bl	8000e6c <config_init>

  config_load(&config_param) ;
 800103e:	4833      	ldr	r0, [pc, #204]	; (800110c <main+0xf8>)
 8001040:	f7ff ff24 	bl	8000e8c <config_load>

  memcpy(&config_param_copy , &config_param , sizeof(config_t));
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <main+0xfc>)
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <main+0xf8>)
 8001048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104c:	e883 0003 	stmia.w	r3, {r0, r1}

  printf("param seuil %f , debit %f\n",config_param.seuil , config_param.debit) ;
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <main+0xf8>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa5f 	bl	8000518 <__aeabi_f2d>
 800105a:	4604      	mov	r4, r0
 800105c:	460d      	mov	r5, r1
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <main+0xf8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa58 	bl	8000518 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9cd 2300 	strd	r2, r3, [sp]
 8001070:	4622      	mov	r2, r4
 8001072:	462b      	mov	r3, r5
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <main+0x100>)
 8001076:	f008 fc65 	bl	8009944 <iprintf>

  /********************************************************************/
#ifdef RECEIVER
  //Radio.Rx(1000);

  ll_init(77) ;
 800107a:	204d      	movs	r0, #77	; 0x4d
 800107c:	f007 f926 	bl	80082cc <ll_init>

  printf("Node receiver \n");
 8001080:	4825      	ldr	r0, [pc, #148]	; (8001118 <main+0x104>)
 8001082:	f008 fcf9 	bl	8009a78 <puts>

  //ll_send_to(77 , (u8*)"abbes" , 5);

#endif

  Radio.Rx(1000);
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <main+0x108>)
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108e:	4798      	blx	r3
  uint32_t tmr = HAL_GetTick();
 8001090:	f000 fde6 	bl	8001c60 <HAL_GetTick>
 8001094:	61f8      	str	r0, [r7, #28]
	  /* USER CODE END WHILE */

	  //PingPong_Process() ;

	  //HAL_Delay(1000);
	  ll_process_received();
 8001096:	f007 faef 	bl	8008678 <ll_process_received>
	  if(HAL_GetTick() - tmr > 1000)
 800109a:	f000 fde1 	bl	8001c60 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a8:	d909      	bls.n	80010be <main+0xaa>
	  {
		  ll_transmit() ;
 80010aa:	f007 f9bf 	bl	800842c <ll_transmit>
		  Radio.Rx(1000);
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <main+0x108>)
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	4798      	blx	r3
		  tmr = HAL_GetTick() ;
 80010b8:	f000 fdd2 	bl	8001c60 <HAL_GetTick>
 80010bc:	61f8      	str	r0, [r7, #28]
	  }


#ifdef RECEIVER

	  int len = ll_get_recv_from( 52,recv) ;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	2034      	movs	r0, #52	; 0x34
 80010c4:	f007 fbd2 	bl	800886c <ll_get_recv_from>
 80010c8:	61b8      	str	r0, [r7, #24]

	  if(len>0)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dde2      	ble.n	8001096 <main+0x82>
	  {
		  recv[len] = 0 ;
 80010d0:	1d3a      	adds	r2, r7, #4
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4413      	add	r3, r2
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
		  printf("data from %d :   %s\n" , 52 ,recv) ;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	461a      	mov	r2, r3
 80010de:	2134      	movs	r1, #52	; 0x34
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <main+0x10c>)
 80010e2:	f008 fc2f 	bl	8009944 <iprintf>

		  if(memcmp(recv,"medali" , 6) == 0 )
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2206      	movs	r2, #6
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <main+0x110>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f007 fe5f 	bl	8008db0 <memcmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ce      	bne.n	8001096 <main+0x82>
			  {
				  ll_send_to(52 , (u8*)"abbes" , 5);
 80010f8:	2205      	movs	r2, #5
 80010fa:	490b      	ldr	r1, [pc, #44]	; (8001128 <main+0x114>)
 80010fc:	2034      	movs	r0, #52	; 0x34
 80010fe:	f007 f97b 	bl	80083f8 <ll_send_to>
  {
 8001102:	e7c8      	b.n	8001096 <main+0x82>
 8001104:	0800bec8 	.word	0x0800bec8
 8001108:	0800bedc 	.word	0x0800bedc
 800110c:	20000464 	.word	0x20000464
 8001110:	200004fc 	.word	0x200004fc
 8001114:	0800bef0 	.word	0x0800bef0
 8001118:	0800bf0c 	.word	0x0800bf0c
 800111c:	0800c568 	.word	0x0800c568
 8001120:	0800bf1c 	.word	0x0800bf1c
 8001124:	0800bf34 	.word	0x0800bf34
 8001128:	0800bf3c 	.word	0x0800bf3c

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09a      	sub	sp, #104	; 0x68
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2248      	movs	r2, #72	; 0x48
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f007 fe54 	bl	8008de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001152:	f001 f8bb 	bl	80022cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ff0a 	bl	8000f70 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <SystemClock_Config+0xb0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <SystemClock_Config+0xb0>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <SystemClock_Config+0xb0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001178:	2324      	movs	r3, #36	; 0x24
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800117c:	2381      	movs	r3, #129	; 0x81
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001188:	23b0      	movs	r3, #176	; 0xb0
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fb43 	bl	8002820 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011a0:	f000 f879 	bl	8001296 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80011a4:	234f      	movs	r3, #79	; 0x4f
 80011a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fec6 	bl	8002f54 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011ce:	f000 f862 	bl	8001296 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3768      	adds	r7, #104	; 0x68
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	58000400 	.word	0x58000400

080011e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 80011e6:	4a27      	ldr	r2, [pc, #156]	; (8001284 <MX_USART1_UART_Init+0xa4>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001228:	4815      	ldr	r0, [pc, #84]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800122a:	f003 f82e 	bl	800428a <HAL_UART_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001234:	f000 f82f 	bl	8001296 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800123c:	f003 fe1a 	bl	8004e74 <HAL_UARTEx_SetTxFifoThreshold>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001246:	f000 f826 	bl	8001296 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800124e:	f003 fe4f 	bl	8004ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001258:	f000 f81d 	bl	8001296 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0xa0>)
 800125e:	f003 fdd1 	bl	8004e04 <HAL_UARTEx_DisableFifoMode>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001268:	f000 f815 	bl	8001296 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 800126c:	2024      	movs	r0, #36	; 0x24
 800126e:	f7ff fe39 	bl	8000ee4 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 8001272:	2101      	movs	r1, #1
 8001274:	2024      	movs	r0, #36	; 0x24
 8001276:	f7ff fe51 	bl	8000f1c <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000046c 	.word	0x2000046c
 8001284:	40013800 	.word	0x40013800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fe84 	bl	8000f9a <LL_AHB2_GRP1_EnableClock>

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}

08001296 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129a:	b672      	cpsid	i
}
 800129c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129e:	e7fe      	b.n	800129e <Error_Handler+0x8>

080012a0 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 80012a6:	1d39      	adds	r1, r7, #4
 80012a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ac:	2201      	movs	r2, #1
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <__io_getchar+0x20>)
 80012b0:	f003 f8d1 	bl	8004456 <HAL_UART_Receive>
	return ch ;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000046c 	.word	0x2000046c

080012c4 <__io_putchar>:

int __io_putchar(int ch)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	230a      	movs	r3, #10
 80012d0:	2201      	movs	r2, #1
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <__io_putchar+0x20>)
 80012d4:	f003 f829 	bl	800432a <HAL_UART_Transmit>
	return ch ;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000046c 	.word	0x2000046c

080012e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80012ec:	f000 fb9c 	bl	8001a28 <BSP_RADIO_Init>
 80012f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fbce 	bl	8001aa4 <BSP_RADIO_ConfigRFSwitch>
 8001308:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001316:	f000 fc21 	bl	8001b5c <BSP_RADIO_GetTxConfig>
 800131a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}

08001320 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001324:	f000 fc21 	bl	8001b6a <BSP_RADIO_IsTCXO>
 8001328:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}

0800132e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001332:	f000 fc21 	bl	8001b78 <BSP_RADIO_IsDCDC>
 8001336:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}

0800133c <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	78fa      	ldrb	r2, [r7, #3]
 800134e:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	d302      	bcc.n	8001364 <ring_pushOver+0x28>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	e002      	b.n	800136a <ring_pushOver+0x2e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	3301      	adds	r3, #1
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d110      	bne.n	800139c <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	d302      	bcc.n	800138e <ring_pushOver+0x52>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e002      	b.n	8001394 <ring_pushOver+0x58>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	60d3      	str	r3, [r2, #12]
        return 1;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <ring_pushOver+0x62>
    }
    
    return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <LL_AHB2_GRP1_EnableClock>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2238      	movs	r2, #56	; 0x38
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fcd7 	bl	8008de8 <memset>
  if(huart->Instance==USART1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0x94>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d12d      	bne.n	80014a0 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001448:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800144c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4618      	mov	r0, r3
 8001454:	f002 f924 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800145e:	f7ff ff1a 	bl	8001296 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001466:	f7ff ffb7 	bl	80013d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff ff9c 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001480:	2307      	movs	r3, #7
 8001482:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001488:	4619      	mov	r1, r3
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <HAL_UART_MspInit+0x98>)
 800148c:	f000 fda6 	bl	8001fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2024      	movs	r0, #36	; 0x24
 8001496:	f000 fce8 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149a:	2024      	movs	r0, #36	; 0x24
 800149c:	f000 fcff 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3758      	adds	r7, #88	; 0x58
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013800 	.word	0x40013800
 80014ac:	48000400 	.word	0x48000400

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 fba1 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <USART1_IRQHandler+0x2c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <USART1_IRQHandler+0x2c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fa2a 	bl	8001978 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000046c 	.word	0x2000046c

08001530 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001536:	f002 fce3 	bl	8003f00 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000504 	.word	0x20000504

08001544 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4313      	orrs	r3, r2
 800155a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001568:	68fb      	ldr	r3, [r7, #12]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_SUBGHZ_Init+0x20>)
 800157a:	2208      	movs	r2, #8
 800157c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_SUBGHZ_Init+0x20>)
 8001580:	f002 fa42 	bl	8003a08 <HAL_SUBGHZ_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800158a:	f7ff fe84 	bl	8001296 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000504 	.word	0x20000504

08001598 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ffcf 	bl	8001544 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f000 fc5d 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f000 fc74 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <get_random+0x10>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4798      	blx	r3
 80015ca:	4603      	mov	r3, r0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	0800c568 	.word	0x0800c568

080015d4 <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b08b      	sub	sp, #44	; 0x2c
 80015d8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  printf( "\n\rPING PONG\n\r");
 80015da:	4843      	ldr	r0, [pc, #268]	; (80016e8 <SubghzApp_Init+0x114>)
 80015dc:	f008 f9b2 	bl	8009944 <iprintf>
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 80015e0:	2300      	movs	r3, #0
 80015e2:	2201      	movs	r2, #1
 80015e4:	2101      	movs	r1, #1
 80015e6:	4841      	ldr	r0, [pc, #260]	; (80016ec <SubghzApp_Init+0x118>)
 80015e8:	f008 f9ac 	bl	8009944 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <SubghzApp_Init+0x11c>)
 80015ee:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <SubghzApp_Init+0x120>)
 80015f0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <SubghzApp_Init+0x11c>)
 80015f4:	4a40      	ldr	r2, [pc, #256]	; (80016f8 <SubghzApp_Init+0x124>)
 80015f6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80015f8:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <SubghzApp_Init+0x11c>)
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <SubghzApp_Init+0x128>)
 80015fc:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <SubghzApp_Init+0x11c>)
 8001600:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <SubghzApp_Init+0x12c>)
 8001602:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8001604:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <SubghzApp_Init+0x11c>)
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <SubghzApp_Init+0x130>)
 8001608:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <SubghzApp_Init+0x134>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4838      	ldr	r0, [pc, #224]	; (80016f0 <SubghzApp_Init+0x11c>)
 8001610:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <SubghzApp_Init+0x134>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	483d      	ldr	r0, [pc, #244]	; (800170c <SubghzApp_Init+0x138>)
 8001618:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 800161a:	483d      	ldr	r0, [pc, #244]	; (8001710 <SubghzApp_Init+0x13c>)
 800161c:	f008 f992 	bl	8009944 <iprintf>
  printf("LORA_MODULATION\n\r");
 8001620:	483c      	ldr	r0, [pc, #240]	; (8001714 <SubghzApp_Init+0x140>)
 8001622:	f008 f98f 	bl	8009944 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001626:	217d      	movs	r1, #125	; 0x7d
 8001628:	483b      	ldr	r0, [pc, #236]	; (8001718 <SubghzApp_Init+0x144>)
 800162a:	f008 f98b 	bl	8009944 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800162e:	2107      	movs	r1, #7
 8001630:	483a      	ldr	r0, [pc, #232]	; (800171c <SubghzApp_Init+0x148>)
 8001632:	f008 f987 	bl	8009944 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <SubghzApp_Init+0x134>)
 8001638:	69dc      	ldr	r4, [r3, #28]
 800163a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800163e:	9308      	str	r3, [sp, #32]
 8001640:	2300      	movs	r3, #0
 8001642:	9307      	str	r3, [sp, #28]
 8001644:	2300      	movs	r3, #0
 8001646:	9306      	str	r3, [sp, #24]
 8001648:	2300      	movs	r3, #0
 800164a:	9305      	str	r3, [sp, #20]
 800164c:	2301      	movs	r3, #1
 800164e:	9304      	str	r3, [sp, #16]
 8001650:	2300      	movs	r3, #0
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	2308      	movs	r3, #8
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2301      	movs	r3, #1
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2307      	movs	r3, #7
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	2200      	movs	r2, #0
 8001664:	2114      	movs	r1, #20
 8001666:	2001      	movs	r0, #1
 8001668:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <SubghzApp_Init+0x134>)
 800166c:	699c      	ldr	r4, [r3, #24]
 800166e:	2301      	movs	r3, #1
 8001670:	9309      	str	r3, [sp, #36]	; 0x24
 8001672:	2300      	movs	r3, #0
 8001674:	9308      	str	r3, [sp, #32]
 8001676:	2300      	movs	r3, #0
 8001678:	9307      	str	r3, [sp, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	2301      	movs	r3, #1
 8001680:	9305      	str	r3, [sp, #20]
 8001682:	2300      	movs	r3, #0
 8001684:	9304      	str	r3, [sp, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	9303      	str	r3, [sp, #12]
 800168a:	2305      	movs	r3, #5
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	2308      	movs	r3, #8
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2300      	movs	r3, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	2207      	movs	r2, #7
 800169a:	2100      	movs	r1, #0
 800169c:	2001      	movs	r0, #1
 800169e:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <SubghzApp_Init+0x134>)
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	21ff      	movs	r1, #255	; 0xff
 80016a6:	2001      	movs	r0, #1
 80016a8:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <SubghzApp_Init+0x134>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4798      	blx	r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	0d9b      	lsrs	r3, r3, #22
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <SubghzApp_Init+0x14c>)
 80016b8:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	2100      	movs	r1, #0
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <SubghzApp_Init+0x150>)
 80016c0:	f007 fb92 	bl	8008de8 <memset>

  printf( "rand=%ld\n\r", random_delay);
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <SubghzApp_Init+0x14c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4817      	ldr	r0, [pc, #92]	; (8001728 <SubghzApp_Init+0x154>)
 80016cc:	f008 f93a 	bl	8009944 <iprintf>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <SubghzApp_Init+0x134>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <SubghzApp_Init+0x14c>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 80016dc:	4610      	mov	r0, r2
 80016de:	4798      	blx	r3

}
 80016e0:	bf00      	nop
 80016e2:	3704      	adds	r7, #4
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	0800bfc0 	.word	0x0800bfc0
 80016ec:	0800bfd0 	.word	0x0800bfd0
 80016f0:	200001f8 	.word	0x200001f8
 80016f4:	0800172d 	.word	0x0800172d
 80016f8:	08001749 	.word	0x08001749
 80016fc:	08001781 	.word	0x08001781
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017b9 	.word	0x080017b9
 8001708:	0800c568 	.word	0x0800c568
 800170c:	33bca100 	.word	0x33bca100
 8001710:	0800bfec 	.word	0x0800bfec
 8001714:	0800c000 	.word	0x0800c000
 8001718:	0800c014 	.word	0x0800c014
 800171c:	0800c028 	.word	0x0800c028
 8001720:	20000318 	.word	0x20000318
 8001724:	20000218 	.word	0x20000218
 8001728:	0800c038 	.word	0x0800c038

0800172c <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  printf( "OnTxDone\n\r");
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <OnTxDone+0x14>)
 8001732:	f008 f907 	bl	8009944 <iprintf>
  /* Update the State of the FSM*/
  State = TX;
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <OnTxDone+0x18>)
 8001738:	2203      	movs	r2, #3
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800c044 	.word	0x0800c044
 8001744:	20000214 	.word	0x20000214

08001748 <OnRxDone>:

#include "ll.h"

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	460b      	mov	r3, r1
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
	printf("RxDone\n");
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <OnRxDone+0x34>)
 8001764:	f008 f988 	bl	8009a78 <puts>
	ll_receive(payload , size) ;
 8001768:	897b      	ldrh	r3, [r7, #10]
 800176a:	4619      	mov	r1, r3
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f006 ff09 	bl	8008584 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800c050 	.word	0x0800c050

08001780 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <OnTxTimeout+0x14>)
 8001786:	f008 f8dd 	bl	8009944 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <OnTxTimeout+0x18>)
 800178c:	2204      	movs	r2, #4
 800178e:	701a      	strb	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	0800c058 	.word	0x0800c058
 8001798:	20000214 	.word	0x20000214

0800179c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <OnRxTimeout+0x14>)
 80017a2:	f008 f8cf 	bl	8009944 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <OnRxTimeout+0x18>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800c068 	.word	0x0800c068
 80017b4:	20000214 	.word	0x20000214

080017b8 <OnRxError>:

static void OnRxError(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 80017bc:	4803      	ldr	r0, [pc, #12]	; (80017cc <OnRxError+0x14>)
 80017be:	f008 f8c1 	bl	8009944 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 80017c2:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <OnRxError+0x18>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800c078 	.word	0x0800c078
 80017d0:	20000214 	.word	0x20000214

080017d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <_kill>:

int _kill(int pid, int sig)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ec:	f007 faa6 	bl	8008d3c <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2216      	movs	r2, #22
 80017f4:	601a      	str	r2, [r3, #0]
	return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_exit>:

void _exit (int status)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800180a:	f04f 31ff 	mov.w	r1, #4294967295
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffe7 	bl	80017e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001814:	e7fe      	b.n	8001814 <_exit+0x12>

08001816 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001828:	f7ff fd3a 	bl	80012a0 <__io_getchar>
 800182c:	4601      	mov	r1, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf0      	blt.n	8001828 <_read+0x12>
	}

return len;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e009      	b.n	8001876 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fd2a 	bl	80012c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbf1      	blt.n	8001862 <_write+0x12>
	}
	return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_close>:

int _close(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ae:	605a      	str	r2, [r3, #4]
	return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_isatty>:

int _isatty(int file)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <_sbrk+0x5c>)
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <_sbrk+0x60>)
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <_sbrk+0x64>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <_sbrk+0x68>)
 8001908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d207      	bcs.n	8001928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001918:	f007 fa10 	bl	8008d3c <__errno>
 800191c:	4603      	mov	r3, r0
 800191e:	220c      	movs	r2, #12
 8001920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	e009      	b.n	800193c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <_sbrk+0x64>)
 8001938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20008000 	.word	0x20008000
 8001948:	00000400 	.word	0x00000400
 800194c:	2000031c 	.word	0x2000031c
 8001950:	20000600 	.word	0x20000600

08001954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <set_NL_detection+0x14>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000320 	.word	0x20000320

08001978 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b0a      	cmp	r3, #10
 8001986:	d101      	bne.n	800198c <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001988:	f7ff ffea 	bl	8001960 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4619      	mov	r1, r3
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <uart_RX_interrupt_hanlder+0x28>)
 8001992:	f7ff fcd3 	bl	800133c <ring_pushOver>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000510 	.word	0x20000510

080019a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a8:	f7ff ffd4 	bl	8001954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	; (80019e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	; (80019f0 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019d2:	f007 f9b9 	bl	8008d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fb1d 	bl	8001014 <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   r0, =_estack
 80019dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019e8:	0800d12c 	.word	0x0800d12c
  ldr r2, =_sbss
 80019ec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019f0:	200005fc 	.word	0x200005fc

080019f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>

080019f6 <LL_AHB2_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001a3c:	2004      	movs	r0, #4
 8001a3e:	f7ff ffda 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001a42:	2310      	movs	r3, #16
 8001a44:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a58:	f000 fac0 	bl	8001fdc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a66:	f000 fab9 	bl	8001fdc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a74:	f000 fab2 	bl	8001fdc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a7e:	f000 fc0d 	bl	800229c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001a82:	2200      	movs	r2, #0
 8001a84:	2110      	movs	r1, #16
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a88:	f000 fc08 	bl	800229c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <BSP_RADIO_Init+0x78>)
 8001a92:	f000 fc03 	bl	800229c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	48000800 	.word	0x48000800

08001aa4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d84b      	bhi.n	8001b4c <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001ab4:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001aed 	.word	0x08001aed
 8001ac4:	08001b0d 	.word	0x08001b0d
 8001ac8:	08001b2d 	.word	0x08001b2d
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4821      	ldr	r0, [pc, #132]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ad2:	f000 fbe3 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2110      	movs	r1, #16
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001adc:	f000 fbde 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	481c      	ldr	r0, [pc, #112]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ae6:	f000 fbd9 	bl	800229c <HAL_GPIO_WritePin>
      break;      
 8001aea:	e030      	b.n	8001b4e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2108      	movs	r1, #8
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001af2:	f000 fbd3 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001af6:	2201      	movs	r2, #1
 8001af8:	2110      	movs	r1, #16
 8001afa:	4817      	ldr	r0, [pc, #92]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001afc:	f000 fbce 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001b00:	2200      	movs	r2, #0
 8001b02:	2120      	movs	r1, #32
 8001b04:	4814      	ldr	r0, [pc, #80]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b06:	f000 fbc9 	bl	800229c <HAL_GPIO_WritePin>
      break;
 8001b0a:	e020      	b.n	8001b4e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2108      	movs	r1, #8
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b12:	f000 fbc3 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001b16:	2201      	movs	r2, #1
 8001b18:	2110      	movs	r1, #16
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b1c:	f000 fbbe 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b20:	2201      	movs	r2, #1
 8001b22:	2120      	movs	r1, #32
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b26:	f000 fbb9 	bl	800229c <HAL_GPIO_WritePin>
      break;
 8001b2a:	e010      	b.n	8001b4e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2108      	movs	r1, #8
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b32:	f000 fbb3 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001b36:	2200      	movs	r2, #0
 8001b38:	2110      	movs	r1, #16
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b3c:	f000 fbae 	bl	800229c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b40:	2201      	movs	r2, #1
 8001b42:	2120      	movs	r1, #32
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b46:	f000 fba9 	bl	800229c <HAL_GPIO_WritePin>
      break;
 8001b4a:	e000      	b.n	8001b4e <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001b4c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	48000800 	.word	0x48000800

08001b5c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f95e 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b98:	f001 fba0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_Init+0x3c>)
 8001ba0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f000 f810 	bl	8001bc8 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fc28 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_InitTick+0x6c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d024      	beq.n	8001c26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bdc:	f001 fb7e 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_InitTick+0x6c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f960 	bl	8001eba <HAL_SYSTICK_Config>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10f      	bne.n	8001c20 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	d809      	bhi.n	8001c1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c06:	2200      	movs	r2, #0
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	f000 f92c 	bl	8001e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_InitTick+0x70>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e004      	b.n	8001c2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000584 	.word	0x20000584

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000584 	.word	0x20000584

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffe0 	bl	8001c60 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff44 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff92 	bl	8001dac <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff61 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff37 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa4 	bl	8001e10 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_FLASH_Unlock+0x38>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0b      	bge.n	8001efe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_FLASH_Unlock+0x38>)
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_FLASH_Unlock+0x3c>)
 8001eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_FLASH_Unlock+0x38>)
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_FLASH_Unlock+0x40>)
 8001ef0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_FLASH_Unlock+0x38>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da01      	bge.n	8001efe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001efe:	79fb      	ldrb	r3, [r7, #7]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	58004000 	.word	0x58004000
 8001f10:	45670123 	.word	0x45670123
 8001f14:	cdef89ab 	.word	0xcdef89ab

08001f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fe9e 	bl	8001c60 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f26:	e009      	b.n	8001f3c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001f28:	f7ff fe9a 	bl	8001c60 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d801      	bhi.n	8001f3c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e047      	b.n	8001fcc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d0ee      	beq.n	8001f28 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001f66:	4013      	ands	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <FLASH_WaitForLastOperation+0x6c>
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001f7e:	4915      	ldr	r1, [pc, #84]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	618b      	str	r3, [r1, #24]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <FLASH_WaitForLastOperation+0x80>
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001f96:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00e      	beq.n	8001fbc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <FLASH_WaitForLastOperation+0xc0>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e011      	b.n	8001fcc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001fa8:	f7ff fe5a 	bl	8001c60 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d801      	bhi.n	8001fbc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e007      	b.n	8001fcc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <FLASH_WaitForLastOperation+0xbc>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fc8:	d0ee      	beq.n	8001fa8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	58004000 	.word	0x58004000
 8001fd8:	20000324 	.word	0x20000324

08001fdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e140      	b.n	800226e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8132 	beq.w	8002268 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d005      	beq.n	800201c <HAL_GPIO_Init+0x40>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d130      	bne.n	800207e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002052:	2201      	movs	r2, #1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 0201 	and.w	r2, r3, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b03      	cmp	r3, #3
 8002088:	d017      	beq.n	80020ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d123      	bne.n	800210e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	6939      	ldr	r1, [r7, #16]
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0203 	and.w	r2, r3, #3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 808c 	beq.w	8002268 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_GPIO_Init+0x2b0>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1bc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a44      	ldr	r2, [pc, #272]	; (8002290 <HAL_GPIO_Init+0x2b4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1b8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1b4>
 800218c:	2302      	movs	r3, #2
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1be>
 8002190:	2307      	movs	r3, #7
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1be>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1be>
 8002198:	2300      	movs	r3, #0
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021aa:	4938      	ldr	r1, [pc, #224]	; (800228c <HAL_GPIO_Init+0x2b0>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021be:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80021de:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ec:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f aeb7 	bne.w	8001fec <HAL_GPIO_Init+0x10>
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	58000800 	.word	0x58000800

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	58000400 	.word	0x58000400

080022e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_PWREx_GetVoltageRange+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	58000400 	.word	0x58000400

08002300 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d101      	bne.n	8002316 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	58000400 	.word	0x58000400

08002324 <LL_RCC_HSE_EnableTcxo>:
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <LL_RCC_HSE_DisableTcxo>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236e:	d101      	bne.n	8002374 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <LL_RCC_HSE_Enable>:
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_HSE_Disable>:
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <LL_RCC_HSE_IsReady>:
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c8:	d101      	bne.n	80023ce <LL_RCC_HSE_IsReady+0x18>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_RCC_HSE_IsReady+0x1a>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <LL_RCC_HSI_Enable>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_HSI_Disable>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_RCC_HSI_IsReady>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d101      	bne.n	8002428 <LL_RCC_HSI_IsReady+0x18>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_RCC_HSI_IsReady+0x1a>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d101      	bne.n	8002472 <LL_RCC_LSE_IsReady+0x18>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_RCC_LSE_IsReady+0x1a>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d101      	bne.n	80024d4 <LL_RCC_LSI_IsReady+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_RCC_LSI_IsReady+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6013      	str	r3, [r2, #0]
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b02      	cmp	r3, #2
 8002526:	d101      	bne.n	800252c <LL_RCC_MSI_IsReady+0x16>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_RCC_MSI_IsReady+0x18>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d101      	bne.n	800254c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800261e:	f023 020f 	bic.w	r2, r3, #15
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800264c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f4:	6013      	str	r3, [r2, #0]
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272c:	d101      	bne.n	8002732 <LL_RCC_PLL_IsReady+0x18>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_RCC_PLL_IsReady+0x1a>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d101      	bne.n	80027ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d101      	bne.n	80027d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ee:	d101      	bne.n	80027f4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002810:	d101      	bne.n	8002816 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e38a      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002832:	f7ff fece 	bl	80025d2 <LL_RCC_GetSysClkSource>
 8002836:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002838:	f7ff ffa2 	bl	8002780 <LL_RCC_PLL_GetMainSource>
 800283c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80c9 	beq.w	80029de <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x3e>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d17b      	bne.n	8002950 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d178      	bne.n	8002950 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800285e:	f7ff fe5a 	bl	8002516 <LL_RCC_MSI_IsReady>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x54>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e369      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x72>
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002890:	e006      	b.n	80028a0 <HAL_RCC_OscConfig+0x80>
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d222      	bcs.n	80028ea <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fd4f 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e347      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fe4e 	bl	8002584 <LL_RCC_MSI_SetCalibTrimming>
 80028e8:	e021      	b.n	800292e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fe35 	bl	8002584 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd14 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e30c      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800292e:	f000 fcd5 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8002932:	4603      	mov	r3, r0
 8002934:	4ab4      	ldr	r2, [pc, #720]	; (8002c08 <HAL_RCC_OscConfig+0x3e8>)
 8002936:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002938:	4bb4      	ldr	r3, [pc, #720]	; (8002c0c <HAL_RCC_OscConfig+0x3ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f943 	bl	8001bc8 <HAL_InitTick>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d047      	beq.n	80029dc <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	e2fb      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002958:	f7ff fdc1 	bl	80024de <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800295c:	f7ff f980 	bl	8001c60 <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002964:	f7ff f97c 	bl	8001c60 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e2e8      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002976:	f7ff fdce 	bl	8002516 <LL_RCC_MSI_IsReady>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f1      	beq.n	8002964 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fdea 	bl	8002584 <LL_RCC_MSI_SetCalibTrimming>
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029b2:	f7ff fda2 	bl	80024fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029b6:	f7ff f953 	bl	8001c60 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029be:	f7ff f94f 	bl	8001c60 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2bb      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80029d0:	f7ff fda1 	bl	8002516 <LL_RCC_MSI_IsReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f1      	bne.n	80029be <HAL_RCC_OscConfig+0x19e>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d05f      	beq.n	8002aaa <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_OscConfig+0x1dc>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d10d      	bne.n	8002a12 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	f7ff fcdb 	bl	80023b6 <LL_RCC_HSE_IsReady>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d050      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x288>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d14c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e29a      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x218>
 8002a32:	f7ff fca4 	bl	800237e <LL_RCC_HSE_Enable>
 8002a36:	e00d      	b.n	8002a54 <HAL_RCC_OscConfig+0x234>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002a40:	d104      	bne.n	8002a4c <HAL_RCC_OscConfig+0x22c>
 8002a42:	f7ff fc6f 	bl	8002324 <LL_RCC_HSE_EnableTcxo>
 8002a46:	f7ff fc9a 	bl	800237e <LL_RCC_HSE_Enable>
 8002a4a:	e003      	b.n	8002a54 <HAL_RCC_OscConfig+0x234>
 8002a4c:	f7ff fca5 	bl	800239a <LL_RCC_HSE_Disable>
 8002a50:	f7ff fc76 	bl	8002340 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f900 	bl	8001c60 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff f8fc 	bl	8001c60 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e268      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a76:	f7ff fc9e 	bl	80023b6 <LL_RCC_HSE_IsReady>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f1      	beq.n	8002a64 <HAL_RCC_OscConfig+0x244>
 8002a80:	e013      	b.n	8002aaa <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff f8ed 	bl	8001c60 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8a:	f7ff f8e9 	bl	8001c60 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e255      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a9c:	f7ff fc8b 	bl	80023b6 <LL_RCC_HSE_IsReady>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <HAL_RCC_OscConfig+0x26a>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2a8>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d113      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d110      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac8:	f7ff fca2 	bl	8002410 <LL_RCC_HSI_IsReady>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x2be>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e234      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fca5 	bl	8002432 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	e031      	b.n	8002b4e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d019      	beq.n	8002b26 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af2:	f7ff fc71 	bl	80023d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7ff f8b3 	bl	8001c60 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff f8af 	bl	8001c60 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e21b      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b10:	f7ff fc7e 	bl	8002410 <LL_RCC_HSI_IsReady>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f1      	beq.n	8002afe <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc87 	bl	8002432 <LL_RCC_HSI_SetCalibTrimming>
 8002b24:	e013      	b.n	8002b4e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	f7ff fc65 	bl	80023f4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f899 	bl	8001c60 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff f895 	bl	8001c60 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e201      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b44:	f7ff fc64 	bl	8002410 <LL_RCC_HSI_IsReady>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f1      	bne.n	8002b32 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d06e      	beq.n	8002c38 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d056      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d031      	beq.n	8002bde <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1da      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002b9c:	f7ff fc7e 	bl	800249c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba0:	f7ff f85e 	bl	8001c60 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f85a 	bl	8001c60 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1c6      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002bba:	f7ff fc7f 	bl	80024bc <LL_RCC_LSI_IsReady>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f1      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	f023 0210 	bic.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	f7ff fc4d 	bl	800247c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7ff f83d 	bl	8001c60 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7ff f839 	bl	8001c60 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b11      	cmp	r3, #17
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1a5      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002bfc:	f7ff fc5e 	bl	80024bc <LL_RCC_LSI_IsReady>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f1      	beq.n	8002bea <HAL_RCC_OscConfig+0x3ca>
 8002c06:	e017      	b.n	8002c38 <HAL_RCC_OscConfig+0x418>
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	f7ff fc44 	bl	800249c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7ff f824 	bl	8001c60 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7ff f820 	bl	8001c60 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e18c      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002c2e:	f7ff fc45 	bl	80024bc <LL_RCC_LSI_IsReady>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f1      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80d8 	beq.w	8002df6 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002c46:	f7ff fb5b 	bl	8002300 <LL_PWR_IsEnabledBkUpAccess>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d113      	bne.n	8002c78 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c50:	f7ff fb3c 	bl	80022cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c54:	f7ff f804 	bl	8001c60 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7ff f800 	bl	8001c60 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e16c      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002c6e:	f7ff fb47 	bl	8002300 <LL_PWR_IsEnabledBkUpAccess>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f1      	beq.n	8002c5c <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d07b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b85      	cmp	r3, #133	; 0x85
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d109      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe ffdc 	bl	8001c60 <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe ffce 	bl	8001c60 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e138      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002cd6:	f7ff fbc0 	bl	800245a <LL_RCC_LSE_IsReady>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ef      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b81      	cmp	r3, #129	; 0x81
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b85      	cmp	r3, #133	; 0x85
 8002cee:	d121      	bne.n	8002d34 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe ffb6 	bl	8001c60 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe ffa8 	bl	8001c60 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e112      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002d32:	e060      	b.n	8002df6 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe ff94 	bl	8001c60 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe ff86 	bl	8001c60 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0f0      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ec      	bne.n	8002d50 <HAL_RCC_OscConfig+0x530>
 8002d76:	e03e      	b.n	8002df6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe ff72 	bl	8001c60 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe ff64 	bl	8001c60 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0ce      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ec      	bne.n	8002d94 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe ff51 	bl	8001c60 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe ff43 	bl	8001c60 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0ad      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002dec:	f7ff fb35 	bl	800245a <LL_RCC_LSE_IsReady>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ef      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a3 	beq.w	8002f46 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d076      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d14b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	f7ff fc76 	bl	80026fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff25 	bl	8001c60 <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe ff21 	bl	8001c60 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e08d      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002e2c:	f7ff fc75 	bl	800271a <LL_RCC_PLL_IsReady>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f1      	bne.n	8002e1a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x730>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e4e:	0212      	lsls	r2, r2, #8
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e62:	430a      	orrs	r2, r1
 8002e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	f7ff fc39 	bl	80026e2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe feee 	bl	8001c60 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe feea 	bl	8001c60 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e056      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002e9a:	f7ff fc3e 	bl	800271a <LL_RCC_PLL_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x668>
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	f7ff fc2a 	bl	80026fe <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fec7 	bl	8001c60 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fec3 	bl	8001c60 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b0a      	cmp	r3, #10
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e02f      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ee8:	f7ff fc17 	bl	800271a <LL_RCC_PLL_IsReady>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f1      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x6b6>
 8002ef2:	e028      	b.n	8002f46 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e023      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10e      	bne.n	8002f42 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	11c1808c 	.word	0x11c1808c

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e10f      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b89      	ldr	r3, [pc, #548]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d91b      	bls.n	8002fae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b86      	ldr	r3, [pc, #536]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4984      	ldr	r1, [pc, #528]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f86:	f7fe fe6b 	bl	8001c60 <HAL_GetTick>
 8002f8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f8e:	f7fe fe67 	bl	8001c60 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0f3      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa0:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d1ef      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fb12 	bl	80025e8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fe4c 	bl	8001c60 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fcc:	f7fe fe48 	bl	8001c60 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0d4      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002fde:	f7ff fbda 	bl	8002796 <LL_RCC_IsActiveFlag_HPRE>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f1      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fb08 	bl	800260e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ffe:	f7fe fe2f 	bl	8001c60 <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003006:	f7fe fe2b 	bl	8001c60 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0b7      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003018:	f7ff fbce 	bl	80027b8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f1      	beq.n	8003006 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fb01 	bl	800263a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003038:	f7fe fe12 	bl	8001c60 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003040:	f7fe fe0e 	bl	8001c60 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e09a      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003052:	f7ff fbc3 	bl	80027dc <LL_RCC_IsActiveFlag_PPRE1>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f1      	beq.n	8003040 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d017      	beq.n	8003098 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff faf6 	bl	8002660 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003074:	f7fe fdf4 	bl	8001c60 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800307c:	f7fe fdf0 	bl	8001c60 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e07c      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800308e:	f7ff fbb6 	bl	80027fe <LL_RCC_IsActiveFlag_PPRE2>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d043      	beq.n	800312c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80030ac:	f7ff f983 	bl	80023b6 <LL_RCC_HSE_IsReady>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11e      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e066      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80030c2:	f7ff fb2a 	bl	800271a <LL_RCC_PLL_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d113      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e05b      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80030d8:	f7ff fa1d 	bl	8002516 <LL_RCC_MSI_IsReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e050      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80030e6:	f7ff f993 	bl	8002410 <LL_RCC_HSI_IsReady>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e049      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fa57 	bl	80025ac <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fe:	f7fe fdaf 	bl	8001c60 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	e00a      	b.n	800311c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003106:	f7fe fdab 	bl	8001c60 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e035      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	f7ff fa59 	bl	80025d2 <LL_RCC_GetSysClkSource>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d1ec      	bne.n	8003106 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d21b      	bcs.n	8003172 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 0207 	bic.w	r2, r3, #7
 8003142:	4913      	ldr	r1, [pc, #76]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314a:	f7fe fd89 	bl	8001c60 <HAL_GetTick>
 800314e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003150:	e008      	b.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003152:	f7fe fd85 	bl	8001c60 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e011      	b.n	8003188 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x23c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d1ef      	bne.n	8003152 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003172:	f000 f8b3 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003176:	4603      	mov	r3, r0
 8003178:	4a06      	ldr	r2, [pc, #24]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fd21 	bl	8001bc8 <HAL_InitTick>
 8003186:	4603      	mov	r3, r0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58004000 	.word	0x58004000
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031aa:	f7ff fa12 	bl	80025d2 <LL_RCC_GetSysClkSource>
 80031ae:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b0:	f7ff fae6 	bl	8002780 <LL_RCC_PLL_GetMainSource>
 80031b4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x2c>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d139      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d136      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80031c8:	f7ff f9b5 	bl	8002536 <LL_RCC_MSI_IsEnabledRangeSelect>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x62>
 80031d2:	f7ff f9b0 	bl	8002536 <LL_RCC_MSI_IsEnabledRangeSelect>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x4e>
 80031dc:	f7ff f9bb 	bl	8002556 <LL_RCC_MSI_GetRange>
 80031e0:	4603      	mov	r3, r0
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	e005      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x5a>
 80031ea:	f7ff f9bf 	bl	800256c <LL_RCC_MSI_GetRangeAfterStandby>
 80031ee:	4603      	mov	r3, r0
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x134>)
 80031f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fc:	e014      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x8c>
 80031fe:	f7ff f99a 	bl	8002536 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_GetSysClockFreq+0x7a>
 8003208:	f7ff f9a5 	bl	8002556 <LL_RCC_MSI_GetRange>
 800320c:	4603      	mov	r3, r0
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	e005      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x86>
 8003216:	f7ff f9a9 	bl	800256c <LL_RCC_MSI_GetRangeAfterStandby>
 800321a:	4603      	mov	r3, r0
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d115      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003234:	e012      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e00c      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d109      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003248:	f7ff f888 	bl	800235c <LL_RCC_HSE_IsEnabledDiv2>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e001      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800325a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325c:	f7ff f9b9 	bl	80025d2 <LL_RCC_GetSysClkSource>
 8003260:	4603      	mov	r3, r0
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d12f      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003266:	f7ff fa8b 	bl	8002780 <LL_RCC_PLL_GetMainSource>
 800326a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0xde>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d003      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0xe4>
 8003278:	e00d      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e00d      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003280:	f7ff f86c 	bl	800235c <LL_RCC_HSE_IsEnabledDiv2>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800328c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003292:	60fb      	str	r3, [r7, #12]
        break;
 8003294:	e002      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800329c:	f7ff fa4e 	bl	800273c <LL_RCC_PLL_GetN>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	fb03 f402 	mul.w	r4, r3, r2
 80032a8:	f7ff fa5f 	bl	800276a <LL_RCC_PLL_GetDivider>
 80032ac:	4603      	mov	r3, r0
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	3301      	adds	r3, #1
 80032b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80032b6:	f7ff fa4d 	bl	8002754 <LL_RCC_PLL_GetR>
 80032ba:	4603      	mov	r3, r0
 80032bc:	0f5b      	lsrs	r3, r3, #29
 80032be:	3301      	adds	r3, #1
 80032c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80032c4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80032c6:	697b      	ldr	r3, [r7, #20]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	0800c500 	.word	0x0800c500
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	01e84800 	.word	0x01e84800

080032dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b598      	push	{r3, r4, r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80032e0:	f7ff ff5c 	bl	800319c <HAL_RCC_GetSysClockFreq>
 80032e4:	4604      	mov	r4, r0
 80032e6:	f7ff f9ce 	bl	8002686 <LL_RCC_GetAHBPrescaler>
 80032ea:	4603      	mov	r3, r0
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_RCC_GetHCLKFreq+0x24>)
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd98      	pop	{r3, r4, r7, pc}
 8003300:	0800c4a0 	.word	0x0800c4a0

08003304 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003304:	b598      	push	{r3, r4, r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003308:	f7ff ffe8 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 800330c:	4604      	mov	r4, r0
 800330e:	f7ff f9d2 	bl	80026b6 <LL_RCC_GetAPB1Prescaler>
 8003312:	4603      	mov	r3, r0
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	4a03      	ldr	r2, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd98      	pop	{r3, r4, r7, pc}
 8003324:	0800c4e0 	.word	0x0800c4e0

08003328 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b598      	push	{r3, r4, r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800332c:	f7ff ffd6 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003330:	4604      	mov	r4, r0
 8003332:	f7ff f9cb 	bl	80026cc <LL_RCC_GetAPB2Prescaler>
 8003336:	4603      	mov	r3, r0
 8003338:	0adb      	lsrs	r3, r3, #11
 800333a:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd98      	pop	{r3, r4, r7, pc}
 8003348:	0800c4e0 	.word	0x0800c4e0

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003364:	f7ff f99a 	bl	800269c <LL_RCC_GetAHB3Prescaler>
 8003368:	4603      	mov	r3, r0
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0c9c      	lsrs	r4, r3, #18
 8003388:	f7fe ffae 	bl	80022e8 <HAL_PWREx_GetVoltageRange>
 800338c:	4603      	mov	r3, r0
 800338e:	4619      	mov	r1, r3
 8003390:	4620      	mov	r0, r4
 8003392:	f000 f80b 	bl	80033ac <RCC_SetFlashLatency>
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	0800c500 	.word	0x0800c500
 80033a4:	0800c4a0 	.word	0x0800c4a0
 80033a8:	431bde83 	.word	0x431bde83

080033ac <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80033b6:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <RCC_SetFlashLatency+0xfc>)
 80033b8:	f107 0320 	add.w	r3, r7, #32
 80033bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033c0:	6018      	str	r0, [r3, #0]
 80033c2:	3304      	adds	r3, #4
 80033c4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <RCC_SetFlashLatency+0x100>)
 80033c8:	f107 0318 	add.w	r3, r7, #24
 80033cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d0:	6018      	str	r0, [r3, #0]
 80033d2:	3304      	adds	r3, #4
 80033d4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80033d6:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <RCC_SetFlashLatency+0x104>)
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80033de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d11d      	bne.n	800342a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
 80033f2:	e016      	b.n	8003422 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033fc:	4413      	add	r3, r2
 80033fe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4293      	cmp	r3, r2
 8003408:	d808      	bhi.n	800341c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003412:	4413      	add	r3, r2
 8003414:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800341a:	e023      	b.n	8003464 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	3301      	adds	r3, #1
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	2b02      	cmp	r3, #2
 8003426:	d9e5      	bls.n	80033f4 <RCC_SetFlashLatency+0x48>
 8003428:	e01c      	b.n	8003464 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	e016      	b.n	800345e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003438:	4413      	add	r3, r2
 800343a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4293      	cmp	r3, r2
 8003444:	d808      	bhi.n	8003458 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800344e:	4413      	add	r3, r2
 8003450:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003456:	e005      	b.n	8003464 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	3301      	adds	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	2b02      	cmp	r3, #2
 8003462:	d9e5      	bls.n	8003430 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <RCC_SetFlashLatency+0x108>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 0207 	bic.w	r2, r3, #7
 800346c:	4911      	ldr	r1, [pc, #68]	; (80034b4 <RCC_SetFlashLatency+0x108>)
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003474:	f7fe fbf4 	bl	8001c60 <HAL_GetTick>
 8003478:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800347a:	e008      	b.n	800348e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800347c:	f7fe fbf0 	bl	8001c60 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e007      	b.n	800349e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <RCC_SetFlashLatency+0x108>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003498:	429a      	cmp	r2, r3
 800349a:	d1ef      	bne.n	800347c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3738      	adds	r7, #56	; 0x38
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	0800c0b8 	.word	0x0800c0b8
 80034ac:	0800c0c0 	.word	0x0800c0c0
 80034b0:	0800c0c8 	.word	0x0800c0c8
 80034b4:	58004000 	.word	0x58004000

080034b8 <LL_RCC_LSE_IsReady>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d101      	bne.n	80034d0 <LL_RCC_LSE_IsReady+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_RCC_LSE_IsReady+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <LL_RCC_SetUSARTClockSource>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	43db      	mvns	r3, r3
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <LL_RCC_SetI2SClockSource>:
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <LL_RCC_SetLPUARTClockSource>:
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <LL_RCC_SetI2CClockSource>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003576:	43db      	mvns	r3, r3
 8003578:	401a      	ands	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <LL_RCC_SetLPTIMClockSource>:
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	43db      	mvns	r3, r3
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <LL_RCC_SetRNGClockSource>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80035dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_SetADCClockSource>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <LL_RCC_SetRTCClockSource>:
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <LL_RCC_GetRTCClockSource>:
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <LL_RCC_ForceBackupDomainReset>:
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003676:	bf00      	nop
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <LL_RCC_ReleaseBackupDomainReset>:
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80036ac:	2300      	movs	r3, #0
 80036ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d058      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80036c0:	f7fe fe04 	bl	80022cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c4:	f7fe facc 	bl	8001c60 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fe fac8 	bl	8001c60 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
        break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80036e0:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ec:	d1ee      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13c      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80036f4:	f7ff ffa7 	bl	8003646 <LL_RCC_GetRTCClockSource>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	429a      	cmp	r2, r3
 8003700:	d00f      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003710:	f7ff ffa5 	bl	800365e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003714:	f7ff ffb3 	bl	800367e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d014      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe fa98 	bl	8001c60 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003732:	e00b      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe fa94 	bl	8001c60 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d902      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	74fb      	strb	r3, [r7, #19]
            break;
 800374a:	e004      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800374c:	f7ff feb4 	bl	80034b8 <LL_RCC_LSE_IsReady>
 8003750:	4603      	mov	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d1ee      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff5b 	bl	800361c <LL_RCC_SetRTCClockSource>
 8003766:	e004      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	74bb      	strb	r3, [r7, #18]
 800376c:	e001      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fea9 	bl	80034da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe9e 	bl	80034da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fec0 	bl	8003534 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fee6 	bl	8003596 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fedb 	bl	8003596 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fed0 	bl	8003596 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fea9 	bl	800355e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fe9e 	bl	800355e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fe93 	bl	800355e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d011      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe5e 	bl	800350a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d107      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fea5 	bl	80035c8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003894:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fea3 	bl	80035f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b4:	d107      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80038c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58000400 	.word	0x58000400

080038d4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038e4:	4904      	ldr	r1, [pc, #16]	; (80038f8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	58000400 	.word	0x58000400

080038fc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	58000400 	.word	0x58000400

0800391c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	4a04      	ldr	r2, [pc, #16]	; (8003938 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800392c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	58000400 	.word	0x58000400

0800393c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003946:	619a      	str	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	58000400 	.word	0x58000400

08003954 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d101      	bne.n	8003968 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	58000400 	.word	0x58000400

08003978 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d101      	bne.n	800398c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	58000400 	.word	0x58000400

0800399c <LL_RCC_RF_DisableReset>:
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_IsRFUnderReset>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d0:	d101      	bne.n	80039d6 <LL_RCC_IsRFUnderReset+0x1a>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <LL_RCC_IsRFUnderReset+0x1c>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <LL_EXTI_EnableIT_32_63+0x24>)
 80039ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80039ee:	4905      	ldr	r1, [pc, #20]	; (8003a04 <LL_EXTI_EnableIT_32_63+0x24>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	58000800 	.word	0x58000800

08003a08 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
    return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	e04b      	b.n	8003ab6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	799b      	ldrb	r3, [r3, #6]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fdb0 	bl	8001598 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003a3e:	f7ff ffad 	bl	800399c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <HAL_SUBGHZ_Init+0xb8>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	0cdb      	lsrs	r3, r3, #19
 8003a50:	2264      	movs	r2, #100	; 0x64
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	609a      	str	r2, [r3, #8]
      break;
 8003a68:	e007      	b.n	8003a7a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003a70:	f7ff ffa4 	bl	80039bc <LL_RCC_IsRFUnderReset>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ee      	bne.n	8003a58 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a7a:	f7ff ff3f 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003a7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a82:	f7ff ffad 	bl	80039e0 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003a86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a8a:	f7ff ff23 	bl	80038d4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003a8e:	f7ff ff55 	bl	800393c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fab3 	bl	8004008 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	719a      	strb	r2, [r3, #6]

  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	817b      	strh	r3, [r7, #10]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	799b      	ldrb	r3, [r3, #6]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d14a      	bne.n	8003b78 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	795b      	ldrb	r3, [r3, #5]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e045      	b.n	8003b7a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fb52 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b00:	f7ff ff0c 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003b04:	210d      	movs	r1, #13
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa9e 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003b0c:	897b      	ldrh	r3, [r7, #10]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa96 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fa90 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	82bb      	strh	r3, [r7, #20]
 8003b2c:	e00a      	b.n	8003b44 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003b2e:	8abb      	ldrh	r3, [r7, #20]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fa85 	bl	8004048 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003b3e:	8abb      	ldrh	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	82bb      	strh	r3, [r7, #20]
 8003b44:	8aba      	ldrh	r2, [r7, #20]
 8003b46:	893b      	ldrh	r3, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3f0      	bcc.n	8003b2e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b4c:	f7ff fed6 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fb4b 	bl	80041ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
 8003b62:	e001      	b.n	8003b68 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	715a      	strb	r2, [r3, #5]

    return status;
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	e000      	b.n	8003b7a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	460b      	mov	r3, r1
 8003b90:	817b      	strh	r3, [r7, #10]
 8003b92:	4613      	mov	r3, r2
 8003b94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d14a      	bne.n	8003c3a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	795b      	ldrb	r3, [r3, #5]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e045      	b.n	8003c3c <HAL_SUBGHZ_ReadRegisters+0xba>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 faf4 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bbc:	f7ff feae 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003bc0:	211d      	movs	r1, #29
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fa40 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa38 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003bd8:	897b      	ldrh	r3, [r7, #10]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fa32 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003be4:	2100      	movs	r1, #0
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fa2e 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	82fb      	strh	r3, [r7, #22]
 8003bf0:	e009      	b.n	8003c06 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fa7d 	bl	80040f4 <SUBGHZSPI_Receive>
      pData++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c00:	8afb      	ldrh	r3, [r7, #22]
 8003c02:	3301      	adds	r3, #1
 8003c04:	82fb      	strh	r3, [r7, #22]
 8003c06:	8afa      	ldrh	r2, [r7, #22]
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3f1      	bcc.n	8003bf2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c0e:	f7ff fe75 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 faea 	bl	80041ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e001      	b.n	8003c2a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	715a      	strb	r2, [r3, #5]

    return status;
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	e000      	b.n	8003c3c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	72fb      	strb	r3, [r7, #11]
 8003c54:	4613      	mov	r3, r2
 8003c56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	799b      	ldrb	r3, [r3, #6]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d14a      	bne.n	8003cf8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	795b      	ldrb	r3, [r3, #5]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e045      	b.n	8003cfa <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa95 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	2b84      	cmp	r3, #132	; 0x84
 8003c7e:	d002      	beq.n	8003c86 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	2b94      	cmp	r3, #148	; 0x94
 8003c84:	d103      	bne.n	8003c8e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	711a      	strb	r2, [r3, #4]
 8003c8c:	e002      	b.n	8003c94 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c94:	f7ff fe42 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f9d3 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	82bb      	strh	r3, [r7, #20]
 8003ca6:	e00a      	b.n	8003cbe <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ca8:	8abb      	ldrh	r3, [r7, #20]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f9c8 	bl	8004048 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cb8:	8abb      	ldrh	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	82bb      	strh	r3, [r7, #20]
 8003cbe:	8aba      	ldrh	r2, [r7, #20]
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3f0      	bcc.n	8003ca8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003cc6:	f7ff fe19 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	2b84      	cmp	r3, #132	; 0x84
 8003cce:	d002      	beq.n	8003cd6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fa8b 	bl	80041ec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
 8003ce2:	e001      	b.n	8003ce8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	715a      	strb	r2, [r3, #5]

    return status;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	e000      	b.n	8003cfa <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b088      	sub	sp, #32
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	460b      	mov	r3, r1
 8003d10:	72fb      	strb	r3, [r7, #11]
 8003d12:	4613      	mov	r3, r2
 8003d14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	799b      	ldrb	r3, [r3, #6]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d13d      	bne.n	8003da0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	795b      	ldrb	r3, [r3, #5]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e038      	b.n	8003da2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2201      	movs	r2, #1
 8003d34:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa34 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d3c:	f7ff fdee 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003d40:	7afb      	ldrb	r3, [r7, #11]
 8003d42:	4619      	mov	r1, r3
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f97f 	bl	8004048 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f97b 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	82fb      	strh	r3, [r7, #22]
 8003d56:	e009      	b.n	8003d6c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003d58:	69b9      	ldr	r1, [r7, #24]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f9ca 	bl	80040f4 <SUBGHZSPI_Receive>
      pData++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	82fb      	strh	r3, [r7, #22]
 8003d6c:	8afa      	ldrh	r2, [r7, #22]
 8003d6e:	893b      	ldrh	r3, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3f1      	bcc.n	8003d58 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d74:	f7ff fdc2 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fa37 	bl	80041ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e001      	b.n	8003d90 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]

    return status;
 8003d9c:	7ffb      	ldrb	r3, [r7, #31]
 8003d9e:	e000      	b.n	8003da2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	461a      	mov	r2, r3
 8003db6:	460b      	mov	r3, r1
 8003db8:	72fb      	strb	r3, [r7, #11]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	799b      	ldrb	r3, [r3, #6]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d13e      	bne.n	8003e46 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	795b      	ldrb	r3, [r3, #5]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e039      	b.n	8003e48 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9e2 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003de0:	f7ff fd9c 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003de4:	210e      	movs	r1, #14
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f92e 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	4619      	mov	r1, r3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f929 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	82bb      	strh	r3, [r7, #20]
 8003dfa:	e00a      	b.n	8003e12 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003dfc:	8abb      	ldrh	r3, [r7, #20]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f91e 	bl	8004048 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e0c:	8abb      	ldrh	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	82bb      	strh	r3, [r7, #20]
 8003e12:	8aba      	ldrh	r2, [r7, #20]
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3f0      	bcc.n	8003dfc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e1a:	f7ff fd6f 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f9e4 	bl	80041ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
 8003e30:	e001      	b.n	8003e36 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	715a      	strb	r2, [r3, #5]

    return status;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	e000      	b.n	8003e48 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	72fb      	strb	r3, [r7, #11]
 8003e60:	4613      	mov	r3, r2
 8003e62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	799b      	ldrb	r3, [r3, #6]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d141      	bne.n	8003ef6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	795b      	ldrb	r3, [r3, #5]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e03c      	b.n	8003ef8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f98d 	bl	80041a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e8a:	f7ff fd47 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003e8e:	211e      	movs	r1, #30
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f8d9 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8d4 	bl	8004048 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f8d0 	bl	8004048 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	82fb      	strh	r3, [r7, #22]
 8003eac:	e009      	b.n	8003ec2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f91f 	bl	80040f4 <SUBGHZSPI_Receive>
      pData++;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003ebc:	8afb      	ldrh	r3, [r7, #22]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	82fb      	strh	r3, [r7, #22]
 8003ec2:	8afa      	ldrh	r2, [r7, #22]
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3f1      	bcc.n	8003eae <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003eca:	f7ff fd17 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f98c 	bl	80041ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e001      	b.n	8003ee6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	715a      	strb	r2, [r3, #5]

    return status;
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	e000      	b.n	8003ef8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8003f08:	2300      	movs	r3, #0
 8003f0a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8003f0c:	f107 020c 	add.w	r2, r7, #12
 8003f10:	2302      	movs	r3, #2
 8003f12:	2112      	movs	r1, #18
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fef4 	bl	8003d02 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8003f1a:	7b3b      	ldrb	r3, [r7, #12]
 8003f1c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	7b7b      	ldrb	r3, [r7, #13]
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003f2e:	89fb      	ldrh	r3, [r7, #14]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f003 fdd9 	bl	8007af0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003f3e:	89fb      	ldrh	r3, [r7, #14]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_SUBGHZ_IRQHandler+0x56>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    printf("rx callback\n\r");
 8003f4a:	482e      	ldr	r0, [pc, #184]	; (8004004 <HAL_SUBGHZ_IRQHandler+0x104>)
 8003f4c:	f005 fcfa 	bl	8009944 <iprintf>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f003 fddb 	bl	8007b0c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003f56:	89fb      	ldrh	r3, [r7, #14]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_SUBGHZ_IRQHandler+0x68>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f003 fe2a 	bl	8007bbc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_SUBGHZ_IRQHandler+0x7a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f003 fe2f 	bl	8007bd8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f003 fe34 	bl	8007bf4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f003 fe01 	bl	8007ba0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003f9e:	89fb      	ldrh	r3, [r7, #14]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SUBGHZ_IRQHandler+0xb0>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f003 fdbc 	bl	8007b28 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003fb0:	89fb      	ldrh	r3, [r7, #14]
 8003fb2:	09db      	lsrs	r3, r3, #7
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_SUBGHZ_IRQHandler+0xda>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003fbc:	89fb      	ldrh	r3, [r7, #14]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003fc8:	2101      	movs	r1, #1
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f003 fdba 	bl	8007b44 <HAL_SUBGHZ_CADStatusCallback>
 8003fd0:	e003      	b.n	8003fda <HAL_SUBGHZ_IRQHandler+0xda>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f003 fdb5 	bl	8007b44 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f003 fdca 	bl	8007b80 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003fec:	f107 020c 	add.w	r2, r7, #12
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fe25 	bl	8003c44 <HAL_SUBGHZ_ExecSetCmd>
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	0800c0d4 	.word	0x0800c0d4

08004008 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 8004016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800401a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800401c:	4a09      	ldr	r2, [pc, #36]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004024:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 8004028:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800402c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <SUBGHZSPI_Init+0x3c>)
 8004034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	58010000 	.word	0x58010000

08004048 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <SUBGHZSPI_Transmit+0xa0>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	0cdb      	lsrs	r3, r3, #19
 8004066:	2264      	movs	r2, #100	; 0x64
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	609a      	str	r2, [r3, #8]
      break;
 800407e:	e008      	b.n	8004092 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <SUBGHZSPI_Transmit+0xa4>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d1ed      	bne.n	800406e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004092:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <SUBGHZSPI_Transmit+0xa8>)
 8004094:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <SUBGHZSPI_Transmit+0xa0>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	0cdb      	lsrs	r3, r3, #19
 80040aa:	2264      	movs	r2, #100	; 0x64
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e008      	b.n	80040d6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <SUBGHZSPI_Transmit+0xa4>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d1ed      	bne.n	80040b2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <SUBGHZSPI_Transmit+0xa4>)
 80040d8:	68db      	ldr	r3, [r3, #12]

  return status;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000000 	.word	0x20000000
 80040ec:	58010000 	.word	0x58010000
 80040f0:	5801000c 	.word	0x5801000c

080040f4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <SUBGHZSPI_Receive+0xa4>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	0cdb      	lsrs	r3, r3, #19
 8004110:	2264      	movs	r2, #100	; 0x64
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	609a      	str	r2, [r3, #8]
      break;
 8004128:	e008      	b.n	800413c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <SUBGHZSPI_Receive+0xa8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d1ed      	bne.n	8004118 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800413c:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <SUBGHZSPI_Receive+0xac>)
 800413e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	22ff      	movs	r2, #255	; 0xff
 8004144:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <SUBGHZSPI_Receive+0xa4>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	0cdb      	lsrs	r3, r3, #19
 8004154:	2264      	movs	r2, #100	; 0x64
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	609a      	str	r2, [r3, #8]
      break;
 800416c:	e008      	b.n	8004180 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b01      	subs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <SUBGHZSPI_Receive+0xa8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d1ed      	bne.n	800415c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <SUBGHZSPI_Receive+0xa8>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	701a      	strb	r2, [r3, #0]

  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000000 	.word	0x20000000
 800419c:	58010000 	.word	0x58010000
 80041a0:	5801000c 	.word	0x5801000c

080041a4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d111      	bne.n	80041d8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <SUBGHZ_CheckDeviceReady+0x44>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80041c4:	f7ff fbaa 	bl	800391c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f9      	bne.n	80041c8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041d4:	f7ff fb92 	bl	80038fc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f807 	bl	80041ec <SUBGHZ_WaitOnBusy>
 80041de:	4603      	mov	r3, r0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000000 	.word	0x20000000

080041ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <SUBGHZ_WaitOnBusy+0x58>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	2264      	movs	r2, #100	; 0x64
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800420e:	f7ff fbb3 	bl	8003978 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004212:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e009      	b.n	800423a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800422c:	f7ff fb92 	bl	8003954 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	2b01      	cmp	r3, #1
 8004238:	d0e9      	beq.n	800420e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800423a:	7dfb      	ldrb	r3, [r7, #23]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000000 	.word	0x20000000

08004248 <LL_RCC_GetUSARTClockSource>:
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004254:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	401a      	ands	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	4313      	orrs	r3, r2
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <LL_RCC_GetLPUARTClockSource>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4013      	ands	r3, r2
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e042      	b.n	8004322 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f8b0 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f995 	bl	80045fc <UART_SetConfig>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e022      	b.n	8004322 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fbd9 	bl	8004a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc5f 	bl	8004bde <UART_CheckIdleState>
 8004320:	4603      	mov	r3, r0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af02      	add	r7, sp, #8
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004340:	2b20      	cmp	r3, #32
 8004342:	f040 8083 	bne.w	800444c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_UART_Transmit+0x28>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07b      	b.n	800444e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Transmit+0x3a>
 8004360:	2302      	movs	r3, #2
 8004362:	e074      	b.n	800444e <HAL_UART_Transmit+0x124>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2221      	movs	r2, #33	; 0x21
 8004378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437c:	f7fd fc70 	bl	8001c60 <HAL_GetTick>
 8004380:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439a:	d108      	bne.n	80043ae <HAL_UART_Transmit+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e003      	b.n	80043b6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043be:	e02c      	b.n	800441a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fc52 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e039      	b.n	800444e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	3302      	adds	r3, #2
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e007      	b.n	8004408 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1cc      	bne.n	80043c0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2140      	movs	r1, #64	; 0x40
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fc1f 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08a      	sub	sp, #40	; 0x28
 800445a:	af02      	add	r7, sp, #8
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	2b20      	cmp	r3, #32
 800446e:	f040 80c0 	bne.w	80045f2 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_UART_Receive+0x28>
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e0b8      	b.n	80045f4 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_UART_Receive+0x3a>
 800448c:	2302      	movs	r3, #2
 800448e:	e0b1      	b.n	80045f4 <HAL_UART_Receive+0x19e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2222      	movs	r2, #34	; 0x22
 80044a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ae:	f7fd fbd7 	bl	8001c60 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044cc:	d10e      	bne.n	80044ec <HAL_UART_Receive+0x96>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <HAL_UART_Receive+0x8c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044e0:	e02d      	b.n	800453e <HAL_UART_Receive+0xe8>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80044ea:	e028      	b.n	800453e <HAL_UART_Receive+0xe8>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10d      	bne.n	8004510 <HAL_UART_Receive+0xba>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <HAL_UART_Receive+0xb0>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004504:	e01b      	b.n	800453e <HAL_UART_Receive+0xe8>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	227f      	movs	r2, #127	; 0x7f
 800450a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800450e:	e016      	b.n	800453e <HAL_UART_Receive+0xe8>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004518:	d10d      	bne.n	8004536 <HAL_UART_Receive+0xe0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d104      	bne.n	800452c <HAL_UART_Receive+0xd6>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	227f      	movs	r2, #127	; 0x7f
 8004526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800452a:	e008      	b.n	800453e <HAL_UART_Receive+0xe8>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	223f      	movs	r2, #63	; 0x3f
 8004530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004534:	e003      	b.n	800453e <HAL_UART_Receive+0xe8>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004544:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d108      	bne.n	8004562 <HAL_UART_Receive+0x10c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	e003      	b.n	800456a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004572:	e032      	b.n	80045da <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	2120      	movs	r1, #32
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb78 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e032      	b.n	80045f4 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	b29a      	uxth	r2, r3
 800459c:	8a7b      	ldrh	r3, [r7, #18]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3302      	adds	r3, #2
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e00c      	b.n	80045c8 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	8a7b      	ldrh	r3, [r7, #18]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4013      	ands	r3, r2
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1c6      	bne.n	8004574 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b5b0      	push	{r4, r5, r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4bab      	ldr	r3, [pc, #684]	; (80048d4 <UART_SetConfig+0x2d8>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	69f9      	ldr	r1, [r7, #28]
 8004630:	430b      	orrs	r3, r1
 8004632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4aa0      	ldr	r2, [pc, #640]	; (80048d8 <UART_SetConfig+0x2dc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	4313      	orrs	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800466e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	69f9      	ldr	r1, [r7, #28]
 8004678:	430b      	orrs	r3, r1
 800467a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f023 010f 	bic.w	r1, r3, #15
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a91      	ldr	r2, [pc, #580]	; (80048dc <UART_SetConfig+0x2e0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d122      	bne.n	80046e2 <UART_SetConfig+0xe6>
 800469c:	2003      	movs	r0, #3
 800469e:	f7ff fdd3 	bl	8004248 <LL_RCC_GetUSARTClockSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d817      	bhi.n	80046dc <UART_SetConfig+0xe0>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0xb8>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046c5 	.word	0x080046c5
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046cb 	.word	0x080046cb
 80046c0:	080046d7 	.word	0x080046d7
 80046c4:	2301      	movs	r3, #1
 80046c6:	76fb      	strb	r3, [r7, #27]
 80046c8:	e072      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80046ca:	2302      	movs	r3, #2
 80046cc:	76fb      	strb	r3, [r7, #27]
 80046ce:	e06f      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80046d0:	2304      	movs	r3, #4
 80046d2:	76fb      	strb	r3, [r7, #27]
 80046d4:	e06c      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80046d6:	2308      	movs	r3, #8
 80046d8:	76fb      	strb	r3, [r7, #27]
 80046da:	e069      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80046dc:	2310      	movs	r3, #16
 80046de:	76fb      	strb	r3, [r7, #27]
 80046e0:	e066      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7e      	ldr	r2, [pc, #504]	; (80048e0 <UART_SetConfig+0x2e4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d134      	bne.n	8004756 <UART_SetConfig+0x15a>
 80046ec:	200c      	movs	r0, #12
 80046ee:	f7ff fdab 	bl	8004248 <LL_RCC_GetUSARTClockSource>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d829      	bhi.n	8004750 <UART_SetConfig+0x154>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <UART_SetConfig+0x108>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004739 	.word	0x08004739
 8004708:	08004751 	.word	0x08004751
 800470c:	08004751 	.word	0x08004751
 8004710:	08004751 	.word	0x08004751
 8004714:	08004745 	.word	0x08004745
 8004718:	08004751 	.word	0x08004751
 800471c:	08004751 	.word	0x08004751
 8004720:	08004751 	.word	0x08004751
 8004724:	0800473f 	.word	0x0800473f
 8004728:	08004751 	.word	0x08004751
 800472c:	08004751 	.word	0x08004751
 8004730:	08004751 	.word	0x08004751
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2300      	movs	r3, #0
 800473a:	76fb      	strb	r3, [r7, #27]
 800473c:	e038      	b.n	80047b0 <UART_SetConfig+0x1b4>
 800473e:	2302      	movs	r3, #2
 8004740:	76fb      	strb	r3, [r7, #27]
 8004742:	e035      	b.n	80047b0 <UART_SetConfig+0x1b4>
 8004744:	2304      	movs	r3, #4
 8004746:	76fb      	strb	r3, [r7, #27]
 8004748:	e032      	b.n	80047b0 <UART_SetConfig+0x1b4>
 800474a:	2308      	movs	r3, #8
 800474c:	76fb      	strb	r3, [r7, #27]
 800474e:	e02f      	b.n	80047b0 <UART_SetConfig+0x1b4>
 8004750:	2310      	movs	r3, #16
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e02c      	b.n	80047b0 <UART_SetConfig+0x1b4>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5f      	ldr	r2, [pc, #380]	; (80048d8 <UART_SetConfig+0x2dc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d125      	bne.n	80047ac <UART_SetConfig+0x1b0>
 8004760:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004764:	f7ff fd82 	bl	800426c <LL_RCC_GetLPUARTClockSource>
 8004768:	4603      	mov	r3, r0
 800476a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476e:	d017      	beq.n	80047a0 <UART_SetConfig+0x1a4>
 8004770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004774:	d817      	bhi.n	80047a6 <UART_SetConfig+0x1aa>
 8004776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477a:	d00b      	beq.n	8004794 <UART_SetConfig+0x198>
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004780:	d811      	bhi.n	80047a6 <UART_SetConfig+0x1aa>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <UART_SetConfig+0x192>
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	d006      	beq.n	800479a <UART_SetConfig+0x19e>
 800478c:	e00b      	b.n	80047a6 <UART_SetConfig+0x1aa>
 800478e:	2300      	movs	r3, #0
 8004790:	76fb      	strb	r3, [r7, #27]
 8004792:	e00d      	b.n	80047b0 <UART_SetConfig+0x1b4>
 8004794:	2302      	movs	r3, #2
 8004796:	76fb      	strb	r3, [r7, #27]
 8004798:	e00a      	b.n	80047b0 <UART_SetConfig+0x1b4>
 800479a:	2304      	movs	r3, #4
 800479c:	76fb      	strb	r3, [r7, #27]
 800479e:	e007      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80047a0:	2308      	movs	r3, #8
 80047a2:	76fb      	strb	r3, [r7, #27]
 80047a4:	e004      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80047a6:	2310      	movs	r3, #16
 80047a8:	76fb      	strb	r3, [r7, #27]
 80047aa:	e001      	b.n	80047b0 <UART_SetConfig+0x1b4>
 80047ac:	2310      	movs	r3, #16
 80047ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <UART_SetConfig+0x2dc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f040 8098 	bne.w	80048ec <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047bc:	7efb      	ldrb	r3, [r7, #27]
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d823      	bhi.n	800480a <UART_SetConfig+0x20e>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x1cc>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	0800480b 	.word	0x0800480b
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	080047fb 	.word	0x080047fb
 80047dc:	0800480b 	.word	0x0800480b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800480b 	.word	0x0800480b
 80047e8:	08004803 	.word	0x08004803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7fe fd8a 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 80047f0:	6178      	str	r0, [r7, #20]
        break;
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <UART_SetConfig+0x2e8>)
 80047f6:	617b      	str	r3, [r7, #20]
        break;
 80047f8:	e00c      	b.n	8004814 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fa:	f7fe fccf 	bl	800319c <HAL_RCC_GetSysClockFreq>
 80047fe:	6178      	str	r0, [r7, #20]
        break;
 8004800:	e008      	b.n	8004814 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	617b      	str	r3, [r7, #20]
        break;
 8004808:	e004      	b.n	8004814 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	76bb      	strb	r3, [r7, #26]
        break;
 8004812:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8128 	beq.w	8004a6c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	4a31      	ldr	r2, [pc, #196]	; (80048e8 <UART_SetConfig+0x2ec>)
 8004822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004826:	461a      	mov	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fbb3 f3f2 	udiv	r3, r3, r2
 800482e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d305      	bcc.n	800484c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d902      	bls.n	8004852 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	76bb      	strb	r3, [r7, #26]
 8004850:	e10c      	b.n	8004a6c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4618      	mov	r0, r3
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <UART_SetConfig+0x2ec>)
 8004860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004864:	b29a      	uxth	r2, r3
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f7fc f985 	bl	8000b78 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	020b      	lsls	r3, r1, #8
 8004880:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004884:	0202      	lsls	r2, r0, #8
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	6849      	ldr	r1, [r1, #4]
 800488a:	0849      	lsrs	r1, r1, #1
 800488c:	4608      	mov	r0, r1
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	1814      	adds	r4, r2, r0
 8004894:	eb43 0501 	adc.w	r5, r3, r1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	461a      	mov	r2, r3
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	4620      	mov	r0, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fc f967 	bl	8000b78 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4613      	mov	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b8:	d308      	bcc.n	80048cc <UART_SetConfig+0x2d0>
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c0:	d204      	bcs.n	80048cc <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e0cf      	b.n	8004a6c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	76bb      	strb	r3, [r7, #26]
 80048d0:	e0cc      	b.n	8004a6c <UART_SetConfig+0x470>
 80048d2:	bf00      	nop
 80048d4:	cfff69f3 	.word	0xcfff69f3
 80048d8:	40008000 	.word	0x40008000
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40004400 	.word	0x40004400
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	0800c540 	.word	0x0800c540
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f4:	d165      	bne.n	80049c2 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80048f6:	7efb      	ldrb	r3, [r7, #27]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d828      	bhi.n	800494e <UART_SetConfig+0x352>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x308>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	0800494f 	.word	0x0800494f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800494f 	.word	0x0800494f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe fcec 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 800492c:	6178      	str	r0, [r7, #20]
        break;
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004930:	f7fe fcfa 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8004934:	6178      	str	r0, [r7, #20]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <UART_SetConfig+0x498>)
 800493a:	617b      	str	r3, [r7, #20]
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe fc2d 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8004942:	6178      	str	r0, [r7, #20]
        break;
 8004944:	e008      	b.n	8004958 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494a:	617b      	str	r3, [r7, #20]
        break;
 800494c:	e004      	b.n	8004958 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	76bb      	strb	r3, [r7, #26]
        break;
 8004956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8086 	beq.w	8004a6c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	4a4c      	ldr	r2, [pc, #304]	; (8004a98 <UART_SetConfig+0x49c>)
 8004966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496a:	461a      	mov	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004972:	005a      	lsls	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	441a      	add	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	b29b      	uxth	r3, r3
 8004986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d916      	bls.n	80049bc <UART_SetConfig+0x3c0>
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d212      	bcs.n	80049bc <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	b29b      	uxth	r3, r3
 800499a:	f023 030f 	bic.w	r3, r3, #15
 800499e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	89fa      	ldrh	r2, [r7, #14]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	e057      	b.n	8004a6c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	76bb      	strb	r3, [r7, #26]
 80049c0:	e054      	b.n	8004a6c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c2:	7efb      	ldrb	r3, [r7, #27]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d828      	bhi.n	8004a1a <UART_SetConfig+0x41e>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x3d4>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a0b 	.word	0x08004a0b
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe fc86 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 80049f8:	6178      	str	r0, [r7, #20]
        break;
 80049fa:	e013      	b.n	8004a24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fe fc94 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 8004a00:	6178      	str	r0, [r7, #20]
        break;
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <UART_SetConfig+0x498>)
 8004a06:	617b      	str	r3, [r7, #20]
        break;
 8004a08:	e00c      	b.n	8004a24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fe fbc7 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8004a0e:	6178      	str	r0, [r7, #20]
        break;
 8004a10:	e008      	b.n	8004a24 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	617b      	str	r3, [r7, #20]
        break;
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	76bb      	strb	r3, [r7, #26]
        break;
 8004a22:	bf00      	nop
    }

    if (pclk != 0U)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	4a1a      	ldr	r2, [pc, #104]	; (8004a98 <UART_SetConfig+0x49c>)
 8004a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a34:	461a      	mov	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	441a      	add	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	d908      	bls.n	8004a68 <UART_SetConfig+0x46c>
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d204      	bcs.n	8004a68 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	e001      	b.n	8004a6c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a88:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bdb0      	pop	{r4, r5, r7, pc}
 8004a92:	bf00      	nop
 8004a94:	00f42400 	.word	0x00f42400
 8004a98:	0800c540 	.word	0x0800c540

08004a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9a:	d10a      	bne.n	8004bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bee:	f7fd f837 	bl	8001c60 <HAL_GetTick>
 8004bf2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d10e      	bne.n	8004c20 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f82f 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e025      	b.n	8004c6c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d10e      	bne.n	8004c4c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f819 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e00f      	b.n	8004c6c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b09c      	sub	sp, #112	; 0x70
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c84:	e0a9      	b.n	8004dda <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	f000 80a5 	beq.w	8004dda <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fc ffe6 	bl	8001c60 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d140      	bne.n	8004d28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cba:	667b      	str	r3, [r7, #100]	; 0x64
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e069      	b.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d051      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d44:	d149      	bne.n	8004dda <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e6      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	613b      	str	r3, [r7, #16]
   return(result);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004da2:	623a      	str	r2, [r7, #32]
 8004da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	69f9      	ldr	r1, [r7, #28]
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e5      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e010      	b.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	f43f af46 	beq.w	8004c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3770      	adds	r7, #112	; 0x70
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e027      	b.n	8004e6a <HAL_UARTEx_DisableFifoMode+0x66>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2224      	movs	r2, #36	; 0x24
 8004e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e02d      	b.n	8004ee8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f84f 	bl	8004f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e02d      	b.n	8004f64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	; 0x24
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f811 	bl	8004f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f8c:	e031      	b.n	8004ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f8e:	2308      	movs	r3, #8
 8004f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f92:	2308      	movs	r3, #8
 8004f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	0e5b      	lsrs	r3, r3, #25
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	0f5b      	lsrs	r3, r3, #29
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	7b3a      	ldrb	r2, [r7, #12]
 8004fba:	4910      	ldr	r1, [pc, #64]	; (8004ffc <UARTEx_SetNbDataToProcess+0x90>)
 8004fbc:	5c8a      	ldrb	r2, [r1, r2]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fc2:	7b3a      	ldrb	r2, [r7, #12]
 8004fc4:	490e      	ldr	r1, [pc, #56]	; (8005000 <UARTEx_SetNbDataToProcess+0x94>)
 8004fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	7b7a      	ldrb	r2, [r7, #13]
 8004fd8:	4908      	ldr	r1, [pc, #32]	; (8004ffc <UARTEx_SetNbDataToProcess+0x90>)
 8004fda:	5c8a      	ldrb	r2, [r1, r2]
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fe0:	7b7a      	ldrb	r2, [r7, #13]
 8004fe2:	4907      	ldr	r1, [pc, #28]	; (8005000 <UARTEx_SetNbDataToProcess+0x94>)
 8004fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	0800c558 	.word	0x0800c558
 8005000:	0800c560 	.word	0x0800c560

08005004 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <RadioInit+0x60>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <RadioInit+0x64>)
 8005014:	2200      	movs	r2, #0
 8005016:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <RadioInit+0x64>)
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <RadioInit+0x64>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005024:	4811      	ldr	r0, [pc, #68]	; (800506c <RadioInit+0x68>)
 8005026:	f001 fdc1 	bl	8006bac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800502a:	2000      	movs	r0, #0
 800502c:	f000 ffb0 	bl	8005f90 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8005030:	f002 f852 	bl	80070d8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005034:	2100      	movs	r1, #0
 8005036:	2000      	movs	r0, #0
 8005038:	f002 fba8 	bl	800778c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800503c:	2204      	movs	r2, #4
 800503e:	2100      	movs	r1, #0
 8005040:	2001      	movs	r0, #1
 8005042:	f002 f9d3 	bl	80073ec <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005046:	2300      	movs	r3, #0
 8005048:	2200      	movs	r2, #0
 800504a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800504e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005052:	f002 f907 	bl	8007264 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005056:	f000 fe4f 	bl	8005cf8 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2000043c 	.word	0x2000043c
 8005068:	20000588 	.word	0x20000588
 800506c:	08005ffd 	.word	0x08005ffd

08005070 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005074:	f001 fddc 	bl	8006c30 <SUBGRF_GetOperatingMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b07      	cmp	r3, #7
 800507c:	d00a      	beq.n	8005094 <RadioGetStatus+0x24>
 800507e:	2b07      	cmp	r3, #7
 8005080:	dc0a      	bgt.n	8005098 <RadioGetStatus+0x28>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d002      	beq.n	800508c <RadioGetStatus+0x1c>
 8005086:	2b05      	cmp	r3, #5
 8005088:	d002      	beq.n	8005090 <RadioGetStatus+0x20>
 800508a:	e005      	b.n	8005098 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800508c:	2302      	movs	r3, #2
 800508e:	e004      	b.n	800509a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005090:	2301      	movs	r3, #1
 8005092:	e002      	b.n	800509a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005094:	2303      	movs	r3, #3
 8005096:	e000      	b.n	800509a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005098:	2300      	movs	r3, #0
    }
}
 800509a:	4618      	mov	r0, r3
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80050aa:	4a25      	ldr	r2, [pc, #148]	; (8005140 <RadioSetModem+0xa0>)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 fedf 	bl	8007e76 <RFW_SetRadioModem>
    switch( modem )
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d80b      	bhi.n	80050d8 <RadioSetModem+0x38>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <RadioSetModem+0x28>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050e7 	.word	0x080050e7
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800511b 	.word	0x0800511b
 80050d4:	08005129 	.word	0x08005129
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80050d8:	2000      	movs	r0, #0
 80050da:	f002 f961 	bl	80073a0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <RadioSetModem+0xa0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	735a      	strb	r2, [r3, #13]
        break;
 80050e4:	e028      	b.n	8005138 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80050e6:	2001      	movs	r0, #1
 80050e8:	f002 f95a 	bl	80073a0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <RadioSetModem+0xa0>)
 80050ee:	7b5a      	ldrb	r2, [r3, #13]
 80050f0:	4b13      	ldr	r3, [pc, #76]	; (8005140 <RadioSetModem+0xa0>)
 80050f2:	7b1b      	ldrb	r3, [r3, #12]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d01e      	beq.n	8005136 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <RadioSetModem+0xa0>)
 80050fa:	7b1a      	ldrb	r2, [r3, #12]
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <RadioSetModem+0xa0>)
 80050fe:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <RadioSetModem+0xa0>)
 8005102:	7b5b      	ldrb	r3, [r3, #13]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 ff43 	bl	8005f90 <RadioSetPublicNetwork>
        }
        break;
 800510a:	e014      	b.n	8005136 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800510c:	2002      	movs	r0, #2
 800510e:	f002 f947 	bl	80073a0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <RadioSetModem+0xa0>)
 8005114:	2200      	movs	r2, #0
 8005116:	735a      	strb	r2, [r3, #13]
        break;
 8005118:	e00e      	b.n	8005138 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800511a:	2002      	movs	r0, #2
 800511c:	f002 f940 	bl	80073a0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <RadioSetModem+0xa0>)
 8005122:	2200      	movs	r2, #0
 8005124:	735a      	strb	r2, [r3, #13]
        break;
 8005126:	e007      	b.n	8005138 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005128:	2000      	movs	r0, #0
 800512a:	f002 f939 	bl	80073a0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <RadioSetModem+0xa0>)
 8005130:	2200      	movs	r2, #0
 8005132:	735a      	strb	r2, [r3, #13]
        break;
 8005134:	e000      	b.n	8005138 <RadioSetModem+0x98>
        break;
 8005136:	bf00      	nop
    }
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000588 	.word	0x20000588

08005144 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f8e5 	bl	800731c <SUBGRF_SetRfFrequency>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b090      	sub	sp, #64	; 0x40
 800515e:	af0a      	add	r7, sp, #40	; 0x28
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005176:	f000 fdd2 	bl	8005d1e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800517a:	2000      	movs	r0, #0
 800517c:	f7ff ff90 	bl	80050a0 <RadioSetModem>

    RadioSetChannel( freq );
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ffdf 	bl	8005144 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005186:	2301      	movs	r3, #1
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
 800518a:	2300      	movs	r3, #0
 800518c:	9308      	str	r3, [sp, #32]
 800518e:	2300      	movs	r3, #0
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	2300      	movs	r3, #0
 8005194:	9306      	str	r3, [sp, #24]
 8005196:	2300      	movs	r3, #0
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	2300      	movs	r3, #0
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	2300      	movs	r3, #0
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	2303      	movs	r3, #3
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	2000      	movs	r0, #0
 80051b8:	f000 f826 	bl	8005208 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80051bc:	2000      	movs	r0, #0
 80051be:	f000 fdb5 	bl	8005d2c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80051c2:	f000 ff13 	bl	8005fec <RadioGetWakeupTime>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fc fd53 	bl	8001c74 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80051ce:	f000 fda6 	bl	8005d1e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80051e6:	2001      	movs	r0, #1
 80051e8:	f7ff ff5a 	bl	80050a0 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80051ec:	2300      	movs	r3, #0
 80051ee:	2200      	movs	r2, #0
 80051f0:	2100      	movs	r1, #0
 80051f2:	2000      	movs	r0, #0
 80051f4:	f002 f836 	bl	8007264 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80051f8:	f001 fdeb 	bl	8006dd2 <SUBGRF_GetRandom>
 80051fc:	6078      	str	r0, [r7, #4]

    return rnd;
 80051fe:	687b      	ldr	r3, [r7, #4]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	461a      	mov	r2, r3
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
 8005218:	4613      	mov	r3, r2
 800521a:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800521c:	4abd      	ldr	r2, [pc, #756]	; (8005514 <RadioSetRxConfig+0x30c>)
 800521e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005222:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005224:	f002 fde5 	bl	8007df2 <RFW_DeInit>
    if( rxContinuous == true )
 8005228:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005234:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800523c:	4ab6      	ldr	r2, [pc, #728]	; (8005518 <RadioSetRxConfig+0x310>)
 800523e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005242:	7013      	strb	r3, [r2, #0]
 8005244:	e002      	b.n	800524c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005246:	4bb4      	ldr	r3, [pc, #720]	; (8005518 <RadioSetRxConfig+0x310>)
 8005248:	22ff      	movs	r2, #255	; 0xff
 800524a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d009      	beq.n	8005266 <RadioSetRxConfig+0x5e>
 8005252:	2b04      	cmp	r3, #4
 8005254:	f300 81da 	bgt.w	800560c <RadioSetRxConfig+0x404>
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80bf 	beq.w	80053dc <RadioSetRxConfig+0x1d4>
 800525e:	2b01      	cmp	r3, #1
 8005260:	f000 812c 	beq.w	80054bc <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005264:	e1d2      	b.n	800560c <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005266:	2001      	movs	r0, #1
 8005268:	f001 fef8 	bl	800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800526c:	4ba9      	ldr	r3, [pc, #676]	; (8005514 <RadioSetRxConfig+0x30c>)
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005274:	4aa7      	ldr	r2, [pc, #668]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800527a:	4ba6      	ldr	r3, [pc, #664]	; (8005514 <RadioSetRxConfig+0x30c>)
 800527c:	2209      	movs	r2, #9
 800527e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005282:	4ba4      	ldr	r3, [pc, #656]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005284:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800528a:	68b8      	ldr	r0, [r7, #8]
 800528c:	f002 fce2 	bl	8007c54 <SUBGRF_GetFskBandwidthRegValue>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	4b9f      	ldr	r3, [pc, #636]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800529a:	4b9e      	ldr	r3, [pc, #632]	; (8005514 <RadioSetRxConfig+0x30c>)
 800529c:	2200      	movs	r2, #0
 800529e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80052a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	4b9b      	ldr	r3, [pc, #620]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80052aa:	4b9a      	ldr	r3, [pc, #616]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80052b0:	4b98      	ldr	r3, [pc, #608]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052b2:	2210      	movs	r2, #16
 80052b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80052b6:	4b97      	ldr	r3, [pc, #604]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80052bc:	4b95      	ldr	r3, [pc, #596]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80052c2:	4b95      	ldr	r3, [pc, #596]	; (8005518 <RadioSetRxConfig+0x310>)
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	4b93      	ldr	r3, [pc, #588]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052c8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80052ca:	4b92      	ldr	r3, [pc, #584]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80052d0:	4b90      	ldr	r3, [pc, #576]	; (8005514 <RadioSetRxConfig+0x30c>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80052d6:	2004      	movs	r0, #4
 80052d8:	f7ff fee2 	bl	80050a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80052dc:	488f      	ldr	r0, [pc, #572]	; (800551c <RadioSetRxConfig+0x314>)
 80052de:	f002 f8eb 	bl	80074b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80052e2:	488f      	ldr	r0, [pc, #572]	; (8005520 <RadioSetRxConfig+0x318>)
 80052e4:	f002 f9b4 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80052e8:	4a8e      	ldr	r2, [pc, #568]	; (8005524 <RadioSetRxConfig+0x31c>)
 80052ea:	f107 031c 	add.w	r3, r7, #28
 80052ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80052f6:	f107 031c 	add.w	r3, r7, #28
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fce7 	bl	8006cce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005300:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005304:	f001 fd32 	bl	8006d6c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005308:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800530c:	f000 fdde 	bl	8005ecc <RadioRead>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8005316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8005322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005326:	4619      	mov	r1, r3
 8005328:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800532c:	f000 fdbc 	bl	8005ea8 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8005330:	2104      	movs	r1, #4
 8005332:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005336:	f000 fdb7 	bl	8005ea8 <RadioWrite>
            modReg= RadioRead(0x89b);
 800533a:	f640 009b 	movw	r0, #2203	; 0x89b
 800533e:	f000 fdc5 	bl	8005ecc <RadioRead>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800534c:	f023 031c 	bic.w	r3, r3, #28
 8005350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005358:	f043 0308 	orr.w	r3, r3, #8
 800535c:	b2db      	uxtb	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	f640 009b 	movw	r0, #2203	; 0x89b
 8005364:	f000 fda0 	bl	8005ea8 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005368:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800536c:	f000 fdae 	bl	8005ecc <RadioRead>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800537a:	f023 0318 	bic.w	r3, r3, #24
 800537e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8005382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005386:	f043 0318 	orr.w	r3, r3, #24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005392:	f000 fd89 	bl	8005ea8 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005396:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800539a:	f000 fd97 	bl	8005ecc <RadioRead>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80053a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80053b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053b4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	4619      	mov	r1, r3
 80053bc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80053c0:	f000 fd72 	bl	8005ea8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80053c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	4a4f      	ldr	r2, [pc, #316]	; (8005514 <RadioSetRxConfig+0x30c>)
 80053d8:	6093      	str	r3, [r2, #8]
            break;
 80053da:	e118      	b.n	800560e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80053dc:	2000      	movs	r0, #0
 80053de:	f001 fe3d 	bl	800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80053e2:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <RadioSetRxConfig+0x30c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80053ea:	4a4a      	ldr	r2, [pc, #296]	; (8005514 <RadioSetRxConfig+0x30c>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80053f0:	4b48      	ldr	r3, [pc, #288]	; (8005514 <RadioSetRxConfig+0x30c>)
 80053f2:	220b      	movs	r2, #11
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80053f8:	68b8      	ldr	r0, [r7, #8]
 80053fa:	f002 fc2b 	bl	8007c54 <SUBGRF_GetFskBandwidthRegValue>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	4b44      	ldr	r3, [pc, #272]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <RadioSetRxConfig+0x30c>)
 800540a:	2200      	movs	r2, #0
 800540c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800540e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	b29a      	uxth	r2, r3
 8005414:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005416:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005418:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <RadioSetRxConfig+0x30c>)
 800541a:	2204      	movs	r2, #4
 800541c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005420:	2218      	movs	r2, #24
 8005422:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005424:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005426:	2200      	movs	r2, #0
 8005428:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800542a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800542e:	f083 0301 	eor.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005438:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800543a:	4b37      	ldr	r3, [pc, #220]	; (8005518 <RadioSetRxConfig+0x310>)
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	4b35      	ldr	r3, [pc, #212]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005440:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8005442:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800544a:	4b32      	ldr	r3, [pc, #200]	; (8005514 <RadioSetRxConfig+0x30c>)
 800544c:	22f2      	movs	r2, #242	; 0xf2
 800544e:	75da      	strb	r2, [r3, #23]
 8005450:	e002      	b.n	8005458 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005452:	4b30      	ldr	r3, [pc, #192]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005454:	2201      	movs	r2, #1
 8005456:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005458:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <RadioSetRxConfig+0x30c>)
 800545a:	2201      	movs	r2, #1
 800545c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800545e:	f000 fc5e 	bl	8005d1e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005462:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <RadioSetRxConfig+0x30c>)
 8005464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fe14 	bl	80050a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005478:	4828      	ldr	r0, [pc, #160]	; (800551c <RadioSetRxConfig+0x314>)
 800547a:	f002 f81d 	bl	80074b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800547e:	4828      	ldr	r0, [pc, #160]	; (8005520 <RadioSetRxConfig+0x318>)
 8005480:	f002 f8e6 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005484:	4a28      	ldr	r2, [pc, #160]	; (8005528 <RadioSetRxConfig+0x320>)
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800548e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005492:	f107 0314 	add.w	r3, r7, #20
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fc19 	bl	8006cce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800549c:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054a0:	f001 fc64 	bl	8006d6c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80054a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <RadioSetRxConfig+0x30c>)
 80054b8:	6093      	str	r3, [r2, #8]
            break;
 80054ba:	e0a8      	b.n	800560e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80054bc:	2000      	movs	r0, #0
 80054be:	f001 fdcd 	bl	800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <RadioSetRxConfig+0x30c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	4b11      	ldr	r3, [pc, #68]	; (8005514 <RadioSetRxConfig+0x30c>)
 80054d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80054d4:	4a15      	ldr	r2, [pc, #84]	; (800552c <RadioSetRxConfig+0x324>)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <RadioSetRxConfig+0x30c>)
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80054e2:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <RadioSetRxConfig+0x30c>)
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <RadioSetRxConfig+0x2f4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b0b      	cmp	r3, #11
 80054f4:	d008      	beq.n	8005508 <RadioSetRxConfig+0x300>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d005      	beq.n	8005508 <RadioSetRxConfig+0x300>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d116      	bne.n	8005530 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	d113      	bne.n	8005530 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <RadioSetRxConfig+0x30c>)
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005510:	e012      	b.n	8005538 <RadioSetRxConfig+0x330>
 8005512:	bf00      	nop
 8005514:	20000588 	.word	0x20000588
 8005518:	20000009 	.word	0x20000009
 800551c:	200005c0 	.word	0x200005c0
 8005520:	20000596 	.word	0x20000596
 8005524:	0800c0e4 	.word	0x0800c0e4
 8005528:	0800c0ec 	.word	0x0800c0ec
 800552c:	0800c5ec 	.word	0x0800c5ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005530:	4b39      	ldr	r3, [pc, #228]	; (8005618 <RadioSetRxConfig+0x410>)
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005538:	4b37      	ldr	r3, [pc, #220]	; (8005618 <RadioSetRxConfig+0x410>)
 800553a:	2201      	movs	r2, #1
 800553c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <RadioSetRxConfig+0x410>)
 8005540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005544:	2b05      	cmp	r3, #5
 8005546:	d004      	beq.n	8005552 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005548:	4b33      	ldr	r3, [pc, #204]	; (8005618 <RadioSetRxConfig+0x410>)
 800554a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800554e:	2b06      	cmp	r3, #6
 8005550:	d10a      	bne.n	8005568 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005554:	2b0b      	cmp	r3, #11
 8005556:	d803      	bhi.n	8005560 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <RadioSetRxConfig+0x410>)
 800555a:	220c      	movs	r2, #12
 800555c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800555e:	e006      	b.n	800556e <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005560:	4a2d      	ldr	r2, [pc, #180]	; (8005618 <RadioSetRxConfig+0x410>)
 8005562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005564:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005566:	e002      	b.n	800556e <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <RadioSetRxConfig+0x410>)
 800556a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800556c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800556e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <RadioSetRxConfig+0x410>)
 8005574:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <RadioSetRxConfig+0x414>)
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	4b27      	ldr	r3, [pc, #156]	; (8005618 <RadioSetRxConfig+0x410>)
 800557c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800557e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <RadioSetRxConfig+0x410>)
 8005584:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005588:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800558c:	4b22      	ldr	r3, [pc, #136]	; (8005618 <RadioSetRxConfig+0x410>)
 800558e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005592:	f000 fbc4 	bl	8005d1e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <RadioSetRxConfig+0x410>)
 8005598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fd7a 	bl	80050a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80055ac:	481c      	ldr	r0, [pc, #112]	; (8005620 <RadioSetRxConfig+0x418>)
 80055ae:	f001 ff83 	bl	80074b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80055b2:	481c      	ldr	r0, [pc, #112]	; (8005624 <RadioSetRxConfig+0x41c>)
 80055b4:	f002 f84c 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80055b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fd5c 	bl	800707a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <RadioSetRxConfig+0x410>)
 80055c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10d      	bne.n	80055e8 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80055cc:	f240 7036 	movw	r0, #1846	; 0x736
 80055d0:	f002 f99a 	bl	8007908 <SUBGRF_ReadRegister>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	f240 7036 	movw	r0, #1846	; 0x736
 80055e2:	f002 f97d 	bl	80078e0 <SUBGRF_WriteRegister>
 80055e6:	e00c      	b.n	8005602 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80055e8:	f240 7036 	movw	r0, #1846	; 0x736
 80055ec:	f002 f98c 	bl	8007908 <SUBGRF_ReadRegister>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f043 0304 	orr.w	r3, r3, #4
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	4619      	mov	r1, r3
 80055fa:	f240 7036 	movw	r0, #1846	; 0x736
 80055fe:	f002 f96f 	bl	80078e0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <RadioSetRxConfig+0x410>)
 8005604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005608:	609a      	str	r2, [r3, #8]
            break;
 800560a:	e000      	b.n	800560e <RadioSetRxConfig+0x406>
            break;
 800560c:	bf00      	nop
    }
}
 800560e:	bf00      	nop
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000588 	.word	0x20000588
 800561c:	20000009 	.word	0x20000009
 8005620:	200005c0 	.word	0x200005c0
 8005624:	20000596 	.word	0x20000596

08005628 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60ba      	str	r2, [r7, #8]
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	460b      	mov	r3, r1
 8005638:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800563a:	f002 fbda 	bl	8007df2 <RFW_DeInit>
    switch( modem )
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b03      	cmp	r3, #3
 8005642:	f000 80d7 	beq.w	80057f4 <RadioSetTxConfig+0x1cc>
 8005646:	2b03      	cmp	r3, #3
 8005648:	f300 80e6 	bgt.w	8005818 <RadioSetTxConfig+0x1f0>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <RadioSetTxConfig+0x2e>
 8005650:	2b01      	cmp	r3, #1
 8005652:	d061      	beq.n	8005718 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005654:	e0e0      	b.n	8005818 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005656:	4b7c      	ldr	r3, [pc, #496]	; (8005848 <RadioSetTxConfig+0x220>)
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800565e:	4a7a      	ldr	r2, [pc, #488]	; (8005848 <RadioSetTxConfig+0x220>)
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005664:	4b78      	ldr	r3, [pc, #480]	; (8005848 <RadioSetTxConfig+0x220>)
 8005666:	220b      	movs	r2, #11
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f002 faf1 	bl	8007c54 <SUBGRF_GetFskBandwidthRegValue>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	4b74      	ldr	r3, [pc, #464]	; (8005848 <RadioSetTxConfig+0x220>)
 8005678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800567c:	4a72      	ldr	r2, [pc, #456]	; (8005848 <RadioSetTxConfig+0x220>)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005682:	4b71      	ldr	r3, [pc, #452]	; (8005848 <RadioSetTxConfig+0x220>)
 8005684:	2200      	movs	r2, #0
 8005686:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	b29a      	uxth	r2, r3
 800568e:	4b6e      	ldr	r3, [pc, #440]	; (8005848 <RadioSetTxConfig+0x220>)
 8005690:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005692:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <RadioSetTxConfig+0x220>)
 8005694:	2204      	movs	r2, #4
 8005696:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005698:	4b6b      	ldr	r3, [pc, #428]	; (8005848 <RadioSetTxConfig+0x220>)
 800569a:	2218      	movs	r2, #24
 800569c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800569e:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <RadioSetTxConfig+0x220>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80056a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056a8:	f083 0301 	eor.w	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b65      	ldr	r3, [pc, #404]	; (8005848 <RadioSetTxConfig+0x220>)
 80056b2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80056b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80056bc:	4b62      	ldr	r3, [pc, #392]	; (8005848 <RadioSetTxConfig+0x220>)
 80056be:	22f2      	movs	r2, #242	; 0xf2
 80056c0:	75da      	strb	r2, [r3, #23]
 80056c2:	e002      	b.n	80056ca <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <RadioSetTxConfig+0x220>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80056ca:	4b5f      	ldr	r3, [pc, #380]	; (8005848 <RadioSetTxConfig+0x220>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80056d0:	f000 fb25 	bl	8005d1e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80056d4:	4b5c      	ldr	r3, [pc, #368]	; (8005848 <RadioSetTxConfig+0x220>)
 80056d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fcdb 	bl	80050a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80056ea:	4858      	ldr	r0, [pc, #352]	; (800584c <RadioSetTxConfig+0x224>)
 80056ec:	f001 fee4 	bl	80074b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056f0:	4857      	ldr	r0, [pc, #348]	; (8005850 <RadioSetTxConfig+0x228>)
 80056f2:	f001 ffad 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80056f6:	4a57      	ldr	r2, [pc, #348]	; (8005854 <RadioSetTxConfig+0x22c>)
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005700:	e883 0003 	stmia.w	r3, {r0, r1}
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fae0 	bl	8006cce <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800570e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005712:	f001 fb2b 	bl	8006d6c <SUBGRF_SetWhiteningSeed>
            break;
 8005716:	e080      	b.n	800581a <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005718:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <RadioSetTxConfig+0x220>)
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	4b48      	ldr	r3, [pc, #288]	; (8005848 <RadioSetTxConfig+0x220>)
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800572a:	4a4b      	ldr	r2, [pc, #300]	; (8005858 <RadioSetTxConfig+0x230>)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	4b45      	ldr	r3, [pc, #276]	; (8005848 <RadioSetTxConfig+0x220>)
 8005734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005738:	4a43      	ldr	r2, [pc, #268]	; (8005848 <RadioSetTxConfig+0x220>)
 800573a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800573e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <RadioSetTxConfig+0x12c>
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b0b      	cmp	r3, #11
 800574c:	d008      	beq.n	8005760 <RadioSetTxConfig+0x138>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d005      	beq.n	8005760 <RadioSetTxConfig+0x138>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d107      	bne.n	800576a <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d104      	bne.n	800576a <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <RadioSetTxConfig+0x220>)
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005768:	e003      	b.n	8005772 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <RadioSetTxConfig+0x220>)
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005772:	4b35      	ldr	r3, [pc, #212]	; (8005848 <RadioSetTxConfig+0x220>)
 8005774:	2201      	movs	r2, #1
 8005776:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005778:	4b33      	ldr	r3, [pc, #204]	; (8005848 <RadioSetTxConfig+0x220>)
 800577a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577e:	2b05      	cmp	r3, #5
 8005780:	d004      	beq.n	800578c <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <RadioSetTxConfig+0x220>)
 8005784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005788:	2b06      	cmp	r3, #6
 800578a:	d10a      	bne.n	80057a2 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800578c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800578e:	2b0b      	cmp	r3, #11
 8005790:	d803      	bhi.n	800579a <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005792:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <RadioSetTxConfig+0x220>)
 8005794:	220c      	movs	r2, #12
 8005796:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005798:	e006      	b.n	80057a8 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800579a:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <RadioSetTxConfig+0x220>)
 800579c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800579e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80057a0:	e002      	b.n	80057a8 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80057a2:	4a29      	ldr	r2, [pc, #164]	; (8005848 <RadioSetTxConfig+0x220>)
 80057a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057a6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80057a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80057ac:	4b26      	ldr	r3, [pc, #152]	; (8005848 <RadioSetTxConfig+0x220>)
 80057ae:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80057b0:	4b2a      	ldr	r3, [pc, #168]	; (800585c <RadioSetTxConfig+0x234>)
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <RadioSetTxConfig+0x220>)
 80057b6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80057b8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80057bc:	4b22      	ldr	r3, [pc, #136]	; (8005848 <RadioSetTxConfig+0x220>)
 80057be:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80057c2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80057c6:	4b20      	ldr	r3, [pc, #128]	; (8005848 <RadioSetTxConfig+0x220>)
 80057c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80057cc:	f000 faa7 	bl	8005d1e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <RadioSetTxConfig+0x220>)
 80057d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fc5d 	bl	80050a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057e6:	4819      	ldr	r0, [pc, #100]	; (800584c <RadioSetTxConfig+0x224>)
 80057e8:	f001 fe66 	bl	80074b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057ec:	4818      	ldr	r0, [pc, #96]	; (8005850 <RadioSetTxConfig+0x228>)
 80057ee:	f001 ff2f 	bl	8007650 <SUBGRF_SetPacketParams>
            break;
 80057f2:	e012      	b.n	800581a <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80057f4:	2003      	movs	r0, #3
 80057f6:	f7ff fc53 	bl	80050a0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <RadioSetTxConfig+0x220>)
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005802:	4a11      	ldr	r2, [pc, #68]	; (8005848 <RadioSetTxConfig+0x220>)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005808:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <RadioSetTxConfig+0x220>)
 800580a:	2216      	movs	r2, #22
 800580c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005810:	480e      	ldr	r0, [pc, #56]	; (800584c <RadioSetTxConfig+0x224>)
 8005812:	f001 fe51 	bl	80074b8 <SUBGRF_SetModulationParams>
            break;
 8005816:	e000      	b.n	800581a <RadioSetTxConfig+0x1f2>
            break;
 8005818:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800581a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800581e:	4618      	mov	r0, r3
 8005820:	f002 f92a 	bl	8007a78 <SUBGRF_SetRfTxPower>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	4b07      	ldr	r3, [pc, #28]	; (8005848 <RadioSetTxConfig+0x220>)
 800582a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <RadioSetTxConfig+0x220>)
 8005830:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005834:	4618      	mov	r0, r3
 8005836:	f002 faf0 	bl	8007e1a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800583a:	4a03      	ldr	r2, [pc, #12]	; (8005848 <RadioSetTxConfig+0x220>)
 800583c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583e:	6053      	str	r3, [r2, #4]
}
 8005840:	bf00      	nop
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000588 	.word	0x20000588
 800584c:	200005c0 	.word	0x200005c0
 8005850:	20000596 	.word	0x20000596
 8005854:	0800c0ec 	.word	0x0800c0ec
 8005858:	0800c5ec 	.word	0x0800c5ec
 800585c:	20000009 	.word	0x20000009

08005860 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    return true;
 8005868:	2301      	movs	r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	2b0a      	cmp	r3, #10
 8005886:	d83e      	bhi.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <RadioGetLoRaBandwidthInHz+0x1c>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058cd 	.word	0x080058cd
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058ed 	.word	0x080058ed
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058fb 	.word	0x080058fb
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005907 	.word	0x08005907
 80058b0:	080058c5 	.word	0x080058c5
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058e5 	.word	0x080058e5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80058bc:	f641 6384 	movw	r3, #7812	; 0x1e84
 80058c0:	60fb      	str	r3, [r7, #12]
        break;
 80058c2:	e020      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80058c4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80058c8:	60fb      	str	r3, [r7, #12]
        break;
 80058ca:	e01c      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80058cc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80058d0:	60fb      	str	r3, [r7, #12]
        break;
 80058d2:	e018      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80058d4:	f245 1361 	movw	r3, #20833	; 0x5161
 80058d8:	60fb      	str	r3, [r7, #12]
        break;
 80058da:	e014      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80058dc:	f647 2312 	movw	r3, #31250	; 0x7a12
 80058e0:	60fb      	str	r3, [r7, #12]
        break;
 80058e2:	e010      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80058e4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80058e8:	60fb      	str	r3, [r7, #12]
        break;
 80058ea:	e00c      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80058ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058f0:	60fb      	str	r3, [r7, #12]
        break;
 80058f2:	e008      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <RadioGetLoRaBandwidthInHz+0xa0>)
 80058f6:	60fb      	str	r3, [r7, #12]
        break;
 80058f8:	e005      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <RadioGetLoRaBandwidthInHz+0xa4>)
 80058fc:	60fb      	str	r3, [r7, #12]
        break;
 80058fe:	e002      	b.n	8005906 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <RadioGetLoRaBandwidthInHz+0xa8>)
 8005902:	60fb      	str	r3, [r7, #12]
        break;
 8005904:	bf00      	nop
    }

    return bandwidthInHz;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	0001e848 	.word	0x0001e848
 8005918:	0003d090 	.word	0x0003d090
 800591c:	0007a120 	.word	0x0007a120

08005920 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	4608      	mov	r0, r1
 800592a:	4611      	mov	r1, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4603      	mov	r3, r0
 8005930:	70fb      	strb	r3, [r7, #3]
 8005932:	460b      	mov	r3, r1
 8005934:	803b      	strh	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800593a:	883b      	ldrh	r3, [r7, #0]
 800593c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800593e:	78ba      	ldrb	r2, [r7, #2]
 8005940:	f082 0201 	eor.w	r2, r2, #1
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	2a00      	cmp	r2, #0
 8005948:	d001      	beq.n	800594e <RadioGetGfskTimeOnAirNumerator+0x2e>
 800594a:	2208      	movs	r2, #8
 800594c:	e000      	b.n	8005950 <RadioGetGfskTimeOnAirNumerator+0x30>
 800594e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005950:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005952:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005956:	7c3b      	ldrb	r3, [r7, #16]
 8005958:	7d39      	ldrb	r1, [r7, #20]
 800595a:	2900      	cmp	r1, #0
 800595c:	d001      	beq.n	8005962 <RadioGetGfskTimeOnAirNumerator+0x42>
 800595e:	2102      	movs	r1, #2
 8005960:	e000      	b.n	8005964 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005962:	2100      	movs	r1, #0
 8005964:	440b      	add	r3, r1
 8005966:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005968:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005974:	b480      	push	{r7}
 8005976:	b08b      	sub	sp, #44	; 0x2c
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	71fb      	strb	r3, [r7, #7]
 8005986:	4613      	mov	r3, r2
 8005988:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	3304      	adds	r3, #4
 800598e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b05      	cmp	r3, #5
 800599a:	d002      	beq.n	80059a2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d104      	bne.n	80059ac <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80059a2:	88bb      	ldrh	r3, [r7, #4]
 80059a4:	2b0b      	cmp	r3, #11
 80059a6:	d801      	bhi.n	80059ac <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80059a8:	230c      	movs	r3, #12
 80059aa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d105      	bne.n	80059be <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b0b      	cmp	r3, #11
 80059b6:	d008      	beq.n	80059ca <RadioGetLoRaTimeOnAirNumerator+0x56>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d005      	beq.n	80059ca <RadioGetLoRaTimeOnAirNumerator+0x56>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b0c      	cmp	r3, #12
 80059c8:	d102      	bne.n	80059d0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80059d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80059d4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80059d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d001      	beq.n	80059e2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80059de:	2210      	movs	r2, #16
 80059e0:	e000      	b.n	80059e4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80059e2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80059e4:	4413      	add	r3, r2
 80059e6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80059ec:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80059ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	d001      	beq.n	80059fa <RadioGetLoRaTimeOnAirNumerator+0x86>
 80059f6:	2200      	movs	r2, #0
 80059f8:	e000      	b.n	80059fc <RadioGetLoRaTimeOnAirNumerator+0x88>
 80059fa:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80059fc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80059fe:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d803      	bhi.n	8005a0e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	623b      	str	r3, [r7, #32]
 8005a0c:	e00e      	b.n	8005a2c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3308      	adds	r3, #8
 8005a12:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3b02      	subs	r3, #2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	e002      	b.n	8005a2c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da01      	bge.n	8005a36 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	fb02 f203 	mul.w	r2, r2, r3
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
    int32_t intermediate =
 8005a4e:	330c      	adds	r3, #12
 8005a50:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b06      	cmp	r3, #6
 8005a56:	d802      	bhi.n	8005a5e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	3b02      	subs	r3, #2
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	372c      	adds	r7, #44	; 0x2c
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr
	...

08005a78 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	461a      	mov	r2, r3
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <RadioTimeOnAir+0x28>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d017      	beq.n	8005ace <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005a9e:	e035      	b.n	8005b0c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005aa0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005aa4:	8c3a      	ldrh	r2, [r7, #32]
 8005aa6:	7bb9      	ldrb	r1, [r7, #14]
 8005aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff ff32 	bl	8005920 <RadioGetGfskTimeOnAirNumerator>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	613b      	str	r3, [r7, #16]
        break;
 8005acc:	e01e      	b.n	8005b0c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005ace:	8c39      	ldrh	r1, [r7, #32]
 8005ad0:	7bba      	ldrb	r2, [r7, #14]
 8005ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	68b8      	ldr	r0, [r7, #8]
 8005aea:	f7ff ff43 	bl	8005974 <RadioGetLoRaTimeOnAirNumerator>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <RadioTimeOnAir+0xac>)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff feb6 	bl	8005874 <RadioGetLoRaBandwidthInHz>
 8005b08:	6138      	str	r0, [r7, #16]
        break;
 8005b0a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	1e5a      	subs	r2, r3, #1
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0800c5ec 	.word	0x0800c5ec

08005b28 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	f240 2101 	movw	r1, #513	; 0x201
 8005b3c:	f240 2001 	movw	r0, #513	; 0x201
 8005b40:	f001 fb90 	bl	8007264 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005b44:	4b69      	ldr	r3, [pc, #420]	; (8005cec <RadioSend+0x1c4>)
 8005b46:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 ff6b 	bl	8007a28 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005b52:	4b66      	ldr	r3, [pc, #408]	; (8005cec <RadioSend+0x1c4>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d112      	bne.n	8005b80 <RadioSend+0x58>
 8005b5a:	4b64      	ldr	r3, [pc, #400]	; (8005cec <RadioSend+0x1c4>)
 8005b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d10d      	bne.n	8005b80 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005b64:	f640 0089 	movw	r0, #2185	; 0x889
 8005b68:	f001 fece 	bl	8007908 <SUBGRF_ReadRegister>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f023 0304 	bic.w	r3, r3, #4
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	f640 0089 	movw	r0, #2185	; 0x889
 8005b7a:	f001 feb1 	bl	80078e0 <SUBGRF_WriteRegister>
 8005b7e:	e00c      	b.n	8005b9a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005b80:	f640 0089 	movw	r0, #2185	; 0x889
 8005b84:	f001 fec0 	bl	8007908 <SUBGRF_ReadRegister>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f043 0304 	orr.w	r3, r3, #4
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	f640 0089 	movw	r0, #2185	; 0x889
 8005b96:	f001 fea3 	bl	80078e0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <RadioSend+0x1c4>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	f200 809e 	bhi.w	8005ce0 <RadioSend+0x1b8>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <RadioSend+0x84>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005bbd 	.word	0x08005bbd
 8005bb4:	08005c29 	.word	0x08005c29
 8005bb8:	08005c49 	.word	0x08005c49
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005bbc:	4a4b      	ldr	r2, [pc, #300]	; (8005cec <RadioSend+0x1c4>)
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005bc2:	484b      	ldr	r0, [pc, #300]	; (8005cf0 <RadioSend+0x1c8>)
 8005bc4:	f001 fd44 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f86a 	bl	8006ca8 <SUBGRF_SendPayload>
            break;
 8005bd4:	e087      	b.n	8005ce6 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005bd6:	f002 f912 	bl	8007dfe <RFW_Is_Init>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d116      	bne.n	8005c0e <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005be0:	f107 020d 	add.w	r2, r7, #13
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 f920 	bl	8007e2e <RFW_TransmitInit>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d177      	bne.n	8005ce4 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005bf4:	7b7a      	ldrb	r2, [r7, #13]
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <RadioSend+0x1c4>)
 8005bf8:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005bfa:	483d      	ldr	r0, [pc, #244]	; (8005cf0 <RadioSend+0x1c8>)
 8005bfc:	f001 fd28 	bl	8007650 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005c00:	7b7b      	ldrb	r3, [r7, #13]
 8005c02:	2200      	movs	r2, #0
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f84e 	bl	8006ca8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005c0c:	e06b      	b.n	8005ce6 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005c0e:	4a37      	ldr	r2, [pc, #220]	; (8005cec <RadioSend+0x1c4>)
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c14:	4836      	ldr	r0, [pc, #216]	; (8005cf0 <RadioSend+0x1c8>)
 8005c16:	f001 fd1b 	bl	8007650 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f841 	bl	8006ca8 <SUBGRF_SendPayload>
            break;
 8005c26:	e05e      	b.n	8005ce6 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005c28:	4b30      	ldr	r3, [pc, #192]	; (8005cec <RadioSend+0x1c4>)
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005c2e:	4a2f      	ldr	r2, [pc, #188]	; (8005cec <RadioSend+0x1c4>)
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c34:	482e      	ldr	r0, [pc, #184]	; (8005cf0 <RadioSend+0x1c8>)
 8005c36:	f001 fd0b 	bl	8007650 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f831 	bl	8006ca8 <SUBGRF_SendPayload>
            break;
 8005c46:	e04e      	b.n	8005ce6 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4829      	ldr	r0, [pc, #164]	; (8005cf4 <RadioSend+0x1cc>)
 8005c50:	f000 fbb1 	bl	80063b6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <RadioSend+0x1c4>)
 8005c56:	2202      	movs	r2, #2
 8005c58:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	4b22      	ldr	r3, [pc, #136]	; (8005cec <RadioSend+0x1c4>)
 8005c62:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c64:	4822      	ldr	r0, [pc, #136]	; (8005cf0 <RadioSend+0x1c8>)
 8005c66:	f001 fcf3 	bl	8007650 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	20f1      	movs	r0, #241	; 0xf1
 8005c6e:	f000 f91b 	bl	8005ea8 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005c72:	2100      	movs	r1, #0
 8005c74:	20f0      	movs	r0, #240	; 0xf0
 8005c76:	f000 f917 	bl	8005ea8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005c7a:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <RadioSend+0x1c4>)
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d108      	bne.n	8005c94 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005c82:	2170      	movs	r1, #112	; 0x70
 8005c84:	20f3      	movs	r0, #243	; 0xf3
 8005c86:	f000 f90f 	bl	8005ea8 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8005c8a:	211d      	movs	r1, #29
 8005c8c:	20f2      	movs	r0, #242	; 0xf2
 8005c8e:	f000 f90b 	bl	8005ea8 <RadioWrite>
 8005c92:	e007      	b.n	8005ca4 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8005c94:	21e1      	movs	r1, #225	; 0xe1
 8005c96:	20f3      	movs	r0, #243	; 0xf3
 8005c98:	f000 f906 	bl	8005ea8 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8005c9c:	2104      	movs	r1, #4
 8005c9e:	20f2      	movs	r0, #242	; 0xf2
 8005ca0:	f000 f902 	bl	8005ea8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3302      	adds	r3, #2
 8005cae:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4619      	mov	r1, r3
 8005cba:	20f4      	movs	r0, #244	; 0xf4
 8005cbc:	f000 f8f4 	bl	8005ea8 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	20f5      	movs	r0, #245	; 0xf5
 8005cc8:	f000 f8ee 	bl	8005ea8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4806      	ldr	r0, [pc, #24]	; (8005cf4 <RadioSend+0x1cc>)
 8005cda:	f000 ffe5 	bl	8006ca8 <SUBGRF_SendPayload>
            break;
 8005cde:	e002      	b.n	8005ce6 <RadioSend+0x1be>
        }
        default:
            break;
 8005ce0:	bf00      	nop
 8005ce2:	e000      	b.n	8005ce6 <RadioSend+0x1be>
                return;
 8005ce4:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000588 	.word	0x20000588
 8005cf0:	20000596 	.word	0x20000596
 8005cf4:	2000033c 	.word	0x2000033c

08005cf8 <RadioSleep>:

static void RadioSleep( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005cfe:	2300      	movs	r3, #0
 8005d00:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005d02:	793b      	ldrb	r3, [r7, #4]
 8005d04:	f043 0304 	orr.w	r3, r3, #4
 8005d08:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005d0a:	7938      	ldrb	r0, [r7, #4]
 8005d0c:	f001 f8a8 	bl	8006e60 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7fb ffaf 	bl	8001c74 <HAL_Delay>
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <RadioStandby>:

static void RadioStandby( void )
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005d22:	2000      	movs	r0, #0
 8005d24:	f001 f8ce 	bl	8006ec4 <SUBGRF_SetStandby>
}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005d34:	f002 f863 	bl	8007dfe <RFW_Is_Init>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d102      	bne.n	8005d44 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005d3e:	f002 f886 	bl	8007e4e <RFW_ReceiveInit>
 8005d42:	e007      	b.n	8005d54 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005d44:	2300      	movs	r3, #0
 8005d46:	2200      	movs	r2, #0
 8005d48:	f240 2162 	movw	r1, #610	; 0x262
 8005d4c:	f240 2062 	movw	r0, #610	; 0x262
 8005d50:	f001 fa88 	bl	8007264 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <RadioRx+0x5c>)
 8005d56:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fe63 	bl	8007a28 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <RadioRx+0x5c>)
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005d6a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005d6e:	f001 f8e5 	bl	8006f3c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005d72:	e005      	b.n	8005d80 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <RadioRx+0x5c>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	019b      	lsls	r3, r3, #6
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f8de 	bl	8006f3c <SUBGRF_SetRx>
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000588 	.word	0x20000588

08005d8c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8005d94:	f002 f833 	bl	8007dfe <RFW_Is_Init>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d102      	bne.n	8005da4 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8005d9e:	f002 f856 	bl	8007e4e <RFW_ReceiveInit>
 8005da2:	e007      	b.n	8005db4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005da4:	2300      	movs	r3, #0
 8005da6:	2200      	movs	r2, #0
 8005da8:	f240 2162 	movw	r1, #610	; 0x262
 8005dac:	f240 2062 	movw	r0, #610	; 0x262
 8005db0:	f001 fa58 	bl	8007264 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <RadioRxBoosted+0x5c>)
 8005db6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 fe33 	bl	8007a28 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <RadioRxBoosted+0x5c>)
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005dca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005dce:	f001 f8d5 	bl	8006f7c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005dd2:	e005      	b.n	8005de0 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <RadioRxBoosted+0x5c>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f8ce 	bl	8006f7c <SUBGRF_SetRxBoosted>
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000588 	.word	0x20000588

08005dec <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <RadioSetRxDutyCycle+0x28>)
 8005df8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 fe12 	bl	8007a28 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 f8dc 	bl	8006fc4 <SUBGRF_SetRxDutyCycle>
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000588 	.word	0x20000588

08005e18 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <RadioStartCad+0x2c>)
 8005e1e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fdff 	bl	8007a28 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005e32:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005e36:	f001 fa15 	bl	8007264 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005e3a:	f001 f8ef 	bl	800701c <SUBGRF_SetCad>
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000588 	.word	0x20000588

08005e48 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
 8005e54:	4613      	mov	r3, r2
 8005e56:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8005e58:	883b      	ldrh	r3, [r7, #0]
 8005e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 fa59 	bl	800731c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fe02 	bl	8007a78 <SUBGRF_SetRfTxPower>
 8005e74:	4603      	mov	r3, r0
 8005e76:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fdd3 	bl	8007a28 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005e82:	f001 f8d9 	bl	8007038 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	4603      	mov	r3, r0
 8005e96:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005e98:	f001 fc8f 	bl	80077ba <SUBGRF_GetRssiInst>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	b21b      	sxth	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	80fb      	strh	r3, [r7, #6]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8005eb8:	797a      	ldrb	r2, [r7, #5]
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fd0e 	bl	80078e0 <SUBGRF_WriteRegister>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 fd15 	bl	8007908 <SUBGRF_ReadRegister>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	80fb      	strh	r3, [r7, #6]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005ef8:	797b      	ldrb	r3, [r7, #5]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 fd15 	bl	8007930 <SUBGRF_WriteRegisters>
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	4603      	mov	r3, r0
 8005f16:	6039      	str	r1, [r7, #0]
 8005f18:	80fb      	strh	r3, [r7, #6]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005f1e:	797b      	ldrb	r3, [r7, #5]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fd16 	bl	8007958 <SUBGRF_ReadRegisters>
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	71fb      	strb	r3, [r7, #7]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d10a      	bne.n	8005f60 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005f4a:	4a0e      	ldr	r2, [pc, #56]	; (8005f84 <RadioSetMaxPayloadLength+0x50>)
 8005f4c:	79bb      	ldrb	r3, [r7, #6]
 8005f4e:	7013      	strb	r3, [r2, #0]
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <RadioSetMaxPayloadLength+0x50>)
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <RadioSetMaxPayloadLength+0x54>)
 8005f56:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <RadioSetMaxPayloadLength+0x58>)
 8005f5a:	f001 fb79 	bl	8007650 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8005f5e:	e00d      	b.n	8005f7c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <RadioSetMaxPayloadLength+0x54>)
 8005f62:	7d5b      	ldrb	r3, [r3, #21]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d109      	bne.n	8005f7c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005f68:	4a06      	ldr	r2, [pc, #24]	; (8005f84 <RadioSetMaxPayloadLength+0x50>)
 8005f6a:	79bb      	ldrb	r3, [r7, #6]
 8005f6c:	7013      	strb	r3, [r2, #0]
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <RadioSetMaxPayloadLength+0x50>)
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <RadioSetMaxPayloadLength+0x54>)
 8005f74:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005f76:	4805      	ldr	r0, [pc, #20]	; (8005f8c <RadioSetMaxPayloadLength+0x58>)
 8005f78:	f001 fb6a 	bl	8007650 <SUBGRF_SetPacketParams>
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000009 	.word	0x20000009
 8005f88:	20000588 	.word	0x20000588
 8005f8c:	20000596 	.word	0x20000596

08005f90 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <RadioSetPublicNetwork+0x58>)
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	7313      	strb	r3, [r2, #12]
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <RadioSetPublicNetwork+0x58>)
 8005fa2:	7b1a      	ldrb	r2, [r3, #12]
 8005fa4:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <RadioSetPublicNetwork+0x58>)
 8005fa6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8005fa8:	2001      	movs	r0, #1
 8005faa:	f7ff f879 	bl	80050a0 <RadioSetModem>
    if( enable == true )
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005fb4:	2134      	movs	r1, #52	; 0x34
 8005fb6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005fba:	f001 fc91 	bl	80078e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005fbe:	2144      	movs	r1, #68	; 0x44
 8005fc0:	f240 7041 	movw	r0, #1857	; 0x741
 8005fc4:	f001 fc8c 	bl	80078e0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8005fc8:	e009      	b.n	8005fde <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8005fca:	2114      	movs	r1, #20
 8005fcc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005fd0:	f001 fc86 	bl	80078e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005fd4:	2124      	movs	r1, #36	; 0x24
 8005fd6:	f240 7041 	movw	r0, #1857	; 0x741
 8005fda:	f001 fc81 	bl	80078e0 <SUBGRF_WriteRegister>
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000588 	.word	0x20000588

08005fec <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005ff0:	f001 fd76 	bl	8007ae0 <SUBGRF_GetRadioWakeUpTime>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	3303      	adds	r3, #3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8006006:	4a05      	ldr	r2, [pc, #20]	; (800601c <RadioOnDioIrq+0x20>)
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800600e:	f000 f807 	bl	8006020 <RadioIrqProcess>
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000588 	.word	0x20000588

08006020 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800602e:	4bab      	ldr	r3, [pc, #684]	; (80062dc <RadioIrqProcess+0x2bc>)
 8006030:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006038:	f000 8104 	beq.w	8006244 <RadioIrqProcess+0x224>
 800603c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006040:	f300 816e 	bgt.w	8006320 <RadioIrqProcess+0x300>
 8006044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006048:	f000 80ea 	beq.w	8006220 <RadioIrqProcess+0x200>
 800604c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006050:	f300 8166 	bgt.w	8006320 <RadioIrqProcess+0x300>
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	f000 80cf 	beq.w	80061f8 <RadioIrqProcess+0x1d8>
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	f300 8160 	bgt.w	8006320 <RadioIrqProcess+0x300>
 8006060:	2b20      	cmp	r3, #32
 8006062:	dc49      	bgt.n	80060f8 <RadioIrqProcess+0xd8>
 8006064:	2b00      	cmp	r3, #0
 8006066:	f340 815b 	ble.w	8006320 <RadioIrqProcess+0x300>
 800606a:	3b01      	subs	r3, #1
 800606c:	2b1f      	cmp	r3, #31
 800606e:	f200 8157 	bhi.w	8006320 <RadioIrqProcess+0x300>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <RadioIrqProcess+0x58>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006101 	.word	0x08006101
 800607c:	08006135 	.word	0x08006135
 8006080:	08006321 	.word	0x08006321
 8006084:	08006321 	.word	0x08006321
 8006088:	08006321 	.word	0x08006321
 800608c:	08006321 	.word	0x08006321
 8006090:	08006321 	.word	0x08006321
 8006094:	0800629d 	.word	0x0800629d
 8006098:	08006321 	.word	0x08006321
 800609c:	08006321 	.word	0x08006321
 80060a0:	08006321 	.word	0x08006321
 80060a4:	08006321 	.word	0x08006321
 80060a8:	08006321 	.word	0x08006321
 80060ac:	08006321 	.word	0x08006321
 80060b0:	08006321 	.word	0x08006321
 80060b4:	08006321 	.word	0x08006321
 80060b8:	08006321 	.word	0x08006321
 80060bc:	08006321 	.word	0x08006321
 80060c0:	08006321 	.word	0x08006321
 80060c4:	08006321 	.word	0x08006321
 80060c8:	08006321 	.word	0x08006321
 80060cc:	08006321 	.word	0x08006321
 80060d0:	08006321 	.word	0x08006321
 80060d4:	08006321 	.word	0x08006321
 80060d8:	08006321 	.word	0x08006321
 80060dc:	08006321 	.word	0x08006321
 80060e0:	08006321 	.word	0x08006321
 80060e4:	08006321 	.word	0x08006321
 80060e8:	08006321 	.word	0x08006321
 80060ec:	08006321 	.word	0x08006321
 80060f0:	08006321 	.word	0x08006321
 80060f4:	080062ad 	.word	0x080062ad
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	f000 80f9 	beq.w	80062f0 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80060fe:	e10f      	b.n	8006320 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 8006100:	2000      	movs	r0, #0
 8006102:	f000 fedf 	bl	8006ec4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8006106:	f001 fe81 	bl	8007e0c <RFW_Is_LongPacketModeEnabled>
 800610a:	4603      	mov	r3, r0
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8006110:	f001 fea5 	bl	8007e5e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006114:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8103 	beq.w	8006324 <RadioIrqProcess+0x304>
 800611e:	4b70      	ldr	r3, [pc, #448]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80fd 	beq.w	8006324 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 800612a:	4b6d      	ldr	r3, [pc, #436]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4798      	blx	r3
        break;
 8006132:	e0f7      	b.n	8006324 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8006134:	4b69      	ldr	r3, [pc, #420]	; (80062dc <RadioIrqProcess+0x2bc>)
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	f083 0301 	eor.w	r3, r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 8006142:	2000      	movs	r0, #0
 8006144:	f000 febe 	bl	8006ec4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006148:	2100      	movs	r1, #0
 800614a:	f640 1002 	movw	r0, #2306	; 0x902
 800614e:	f001 fbc7 	bl	80078e0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8006152:	f640 1044 	movw	r0, #2372	; 0x944
 8006156:	f001 fbd7 	bl	8007908 <SUBGRF_ReadRegister>
 800615a:	4603      	mov	r3, r0
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	b2db      	uxtb	r3, r3
 8006162:	4619      	mov	r1, r3
 8006164:	f640 1044 	movw	r0, #2372	; 0x944
 8006168:	f001 fbba 	bl	80078e0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	22ff      	movs	r2, #255	; 0xff
 8006170:	4619      	mov	r1, r3
 8006172:	485c      	ldr	r0, [pc, #368]	; (80062e4 <RadioIrqProcess+0x2c4>)
 8006174:	f000 fd76 	bl	8006c64 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006178:	485b      	ldr	r0, [pc, #364]	; (80062e8 <RadioIrqProcess+0x2c8>)
 800617a:	f001 fb5f 	bl	800783c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800617e:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d036      	beq.n	80061f4 <RadioIrqProcess+0x1d4>
 8006186:	4b56      	ldr	r3, [pc, #344]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d031      	beq.n	80061f4 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 8006190:	4b52      	ldr	r3, [pc, #328]	; (80062dc <RadioIrqProcess+0x2bc>)
 8006192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10e      	bne.n	80061b8 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800619a:	4b51      	ldr	r3, [pc, #324]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689c      	ldr	r4, [r3, #8]
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	b299      	uxth	r1, r3
 80061a4:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <RadioIrqProcess+0x2bc>)
 80061a6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80061aa:	b21a      	sxth	r2, r3
 80061ac:	4b4b      	ldr	r3, [pc, #300]	; (80062dc <RadioIrqProcess+0x2bc>)
 80061ae:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80061b2:	484c      	ldr	r0, [pc, #304]	; (80062e4 <RadioIrqProcess+0x2c4>)
 80061b4:	47a0      	blx	r4
                break;
 80061b6:	e01e      	b.n	80061f6 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80061b8:	4b48      	ldr	r3, [pc, #288]	; (80062dc <RadioIrqProcess+0x2bc>)
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	463a      	mov	r2, r7
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fd6f 	bl	8007ca4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80061c6:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <RadioIrqProcess+0x2c0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689c      	ldr	r4, [r3, #8]
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	b299      	uxth	r1, r3
 80061d0:	4b42      	ldr	r3, [pc, #264]	; (80062dc <RadioIrqProcess+0x2bc>)
 80061d2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80061d6:	b218      	sxth	r0, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80061de:	4a43      	ldr	r2, [pc, #268]	; (80062ec <RadioIrqProcess+0x2cc>)
 80061e0:	fb82 c203 	smull	ip, r2, r2, r3
 80061e4:	1192      	asrs	r2, r2, #6
 80061e6:	17db      	asrs	r3, r3, #31
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	4602      	mov	r2, r0
 80061ee:	483d      	ldr	r0, [pc, #244]	; (80062e4 <RadioIrqProcess+0x2c4>)
 80061f0:	47a0      	blx	r4
                break;
 80061f2:	e000      	b.n	80061f6 <RadioIrqProcess+0x1d6>
        }
 80061f4:	bf00      	nop
        break;
 80061f6:	e0a2      	b.n	800633e <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 80061f8:	2000      	movs	r0, #0
 80061fa:	f000 fe63 	bl	8006ec4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80061fe:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8090 	beq.w	8006328 <RadioIrqProcess+0x308>
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 808a 	beq.w	8006328 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8006214:	4b32      	ldr	r3, [pc, #200]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	2000      	movs	r0, #0
 800621c:	4798      	blx	r3
        break;
 800621e:	e083      	b.n	8006328 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 8006220:	2000      	movs	r0, #0
 8006222:	f000 fe4f 	bl	8006ec4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006226:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d07e      	beq.n	800632c <RadioIrqProcess+0x30c>
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d079      	beq.n	800632c <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006238:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2001      	movs	r0, #1
 8006240:	4798      	blx	r3
        break;
 8006242:	e073      	b.n	800632c <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006244:	f000 fcf4 	bl	8006c30 <SUBGRF_GetOperatingMode>
 8006248:	4603      	mov	r3, r0
 800624a:	2b04      	cmp	r3, #4
 800624c:	d110      	bne.n	8006270 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 800624e:	2000      	movs	r0, #0
 8006250:	f000 fe38 	bl	8006ec4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006254:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d069      	beq.n	8006330 <RadioIrqProcess+0x310>
 800625c:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d064      	beq.n	8006330 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4798      	blx	r3
        break;
 800626e:	e05f      	b.n	8006330 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006270:	f000 fcde 	bl	8006c30 <SUBGRF_GetOperatingMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b05      	cmp	r3, #5
 8006278:	d15a      	bne.n	8006330 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 800627a:	2000      	movs	r0, #0
 800627c:	f000 fe22 	bl	8006ec4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d053      	beq.n	8006330 <RadioIrqProcess+0x310>
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <RadioIrqProcess+0x2c0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d04e      	beq.n	8006330 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <RadioIrqProcess+0x2c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4798      	blx	r3
        break;
 800629a:	e049      	b.n	8006330 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 800629c:	f001 fdaf 	bl	8007dfe <RFW_Is_Init>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d146      	bne.n	8006334 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 80062a6:	f001 fde0 	bl	8007e6a <RFW_ReceivePayload>
        break;
 80062aa:	e043      	b.n	8006334 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <RadioIrqProcess+0x2bc>)
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	f083 0301 	eor.w	r3, r3, #1
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 80062ba:	2000      	movs	r0, #0
 80062bc:	f000 fe02 	bl	8006ec4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <RadioIrqProcess+0x2c0>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d037      	beq.n	8006338 <RadioIrqProcess+0x318>
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <RadioIrqProcess+0x2c0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d032      	beq.n	8006338 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <RadioIrqProcess+0x2c0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4798      	blx	r3
        break;
 80062da:	e02d      	b.n	8006338 <RadioIrqProcess+0x318>
 80062dc:	20000588 	.word	0x20000588
 80062e0:	2000043c 	.word	0x2000043c
 80062e4:	2000033c 	.word	0x2000033c
 80062e8:	200005ac 	.word	0x200005ac
 80062ec:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 80062f0:	4b15      	ldr	r3, [pc, #84]	; (8006348 <RadioIrqProcess+0x328>)
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	f083 0301 	eor.w	r3, r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 80062fe:	2000      	movs	r0, #0
 8006300:	f000 fde0 	bl	8006ec4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <RadioIrqProcess+0x32c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <RadioIrqProcess+0x31c>
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <RadioIrqProcess+0x32c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <RadioIrqProcess+0x32c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	4798      	blx	r3
        break;
 800631e:	e00d      	b.n	800633c <RadioIrqProcess+0x31c>
        break;
 8006320:	bf00      	nop
 8006322:	e00c      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 8006324:	bf00      	nop
 8006326:	e00a      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 8006328:	bf00      	nop
 800632a:	e008      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 800632c:	bf00      	nop
 800632e:	e006      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 8006330:	bf00      	nop
 8006332:	e004      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <RadioIrqProcess+0x31e>
        break;
 800633c:	bf00      	nop
  }
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	20000588 	.word	0x20000588
 800634c:	2000043c 	.word	0x2000043c

08006350 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <RadioTxPrbs+0x2c>)
 8006356:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800635a:	2101      	movs	r1, #1
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fb63 	bl	8007a28 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <RadioTxPrbs+0x30>)
 8006364:	212d      	movs	r1, #45	; 0x2d
 8006366:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800636a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800636c:	f000 fe6d 	bl	800704a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8006370:	4804      	ldr	r0, [pc, #16]	; (8006384 <RadioTxPrbs+0x34>)
 8006372:	f000 fdc3 	bl	8006efc <SUBGRF_SetTx>
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000588 	.word	0x20000588
 8006380:	08005ea9 	.word	0x08005ea9
 8006384:	000fffff 	.word	0x000fffff

08006388 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fb6e 	bl	8007a78 <SUBGRF_SetRfTxPower>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fb3f 	bl	8007a28 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80063aa:	f000 fe45 	bl	8007038 <SUBGRF_SetTxContinuousWave>
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80063b6:	b480      	push	{r7}
 80063b8:	b089      	sub	sp, #36	; 0x24
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e011      	b.n	80063f6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	4413      	add	r3, r2
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	440b      	add	r3, r1
 80063e0:	43d2      	mvns	r2, r2
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	dbe9      	blt.n	80063d2 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e049      	b.n	8006498 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	425a      	negs	r2, r3
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	f002 0207 	and.w	r2, r2, #7
 8006410:	bf58      	it	pl
 8006412:	4253      	negpl	r3, r2
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f1c3 0307 	rsb	r3, r3, #7
 800641a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da00      	bge.n	8006424 <payload_integration+0x6e>
 8006422:	3307      	adds	r3, #7
 8006424:	10db      	asrs	r3, r3, #3
 8006426:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	3301      	adds	r3, #1
 800642c:	425a      	negs	r2, r3
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	f002 0207 	and.w	r2, r2, #7
 8006436:	bf58      	it	pl
 8006438:	4253      	negpl	r3, r2
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f1c3 0307 	rsb	r3, r3, #7
 8006440:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3301      	adds	r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	da00      	bge.n	800644c <payload_integration+0x96>
 800644a:	3307      	adds	r3, #7
 800644c:	10db      	asrs	r3, r3, #3
 800644e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8006450:	7dbb      	ldrb	r3, [r7, #22]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	fa42 f303 	asr.w	r3, r2, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006468:	7ffa      	ldrb	r2, [r7, #31]
 800646a:	7cfb      	ldrb	r3, [r7, #19]
 800646c:	4053      	eors	r3, r2
 800646e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8006470:	7d3b      	ldrb	r3, [r7, #20]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	b25a      	sxtb	r2, r3
 800647a:	7ff9      	ldrb	r1, [r7, #31]
 800647c:	7d7b      	ldrb	r3, [r7, #21]
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	b25b      	sxtb	r3, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	b259      	sxtb	r1, r3
 8006488:	7d3b      	ldrb	r3, [r7, #20]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	b2ca      	uxtb	r2, r1
 8006490:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	3301      	adds	r3, #1
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	429a      	cmp	r2, r3
 80064a0:	dbb0      	blt.n	8006404 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80064a2:	7ffb      	ldrb	r3, [r7, #31]
 80064a4:	01db      	lsls	r3, r3, #7
 80064a6:	b25a      	sxtb	r2, r3
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	019b      	lsls	r3, r3, #6
 80064ac:	b25b      	sxtb	r3, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	7ffa      	ldrb	r2, [r7, #31]
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d101      	bne.n	80064bc <payload_integration+0x106>
 80064b8:	2220      	movs	r2, #32
 80064ba:	e000      	b.n	80064be <payload_integration+0x108>
 80064bc:	2200      	movs	r2, #0
 80064be:	4313      	orrs	r3, r2
 80064c0:	b259      	sxtb	r1, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	b2ca      	uxtb	r2, r1
 80064ca:	701a      	strb	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	3724      	adds	r7, #36	; 0x24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
	...

080064d8 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08c      	sub	sp, #48	; 0x30
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	2300      	movs	r3, #0
 80064f2:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80064f4:	f001 fc7d 	bl	8007df2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4ba9      	ldr	r3, [pc, #676]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006510:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <RadioSetRxGenericConfig+0x48>
 8006518:	2b01      	cmp	r3, #1
 800651a:	f000 80e8 	beq.w	80066ee <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800651e:	e1a0      	b.n	8006862 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <RadioSetRxGenericConfig+0x58>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	e196      	b.n	8006864 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	7d5b      	ldrb	r3, [r3, #21]
 800653a:	2b08      	cmp	r3, #8
 800653c:	d902      	bls.n	8006544 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
 8006542:	e18f      	b.n	8006864 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006544:	2300      	movs	r3, #0
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
 8006548:	e00d      	b.n	8006566 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	4413      	add	r3, r2
 8006552:	7819      	ldrb	r1, [r3, #0]
 8006554:	f107 021c 	add.w	r2, r7, #28
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	4413      	add	r3, r2
 800655c:	460a      	mov	r2, r1
 800655e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	3301      	adds	r3, #1
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	7d5b      	ldrb	r3, [r3, #21]
 800656a:	461a      	mov	r2, r3
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	4293      	cmp	r3, r2
 8006570:	dbeb      	blt.n	800654a <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf14      	ite	ne
 800657a:	2301      	movne	r3, #1
 800657c:	2300      	moveq	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fd6b 	bl	800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006586:	4b8b      	ldr	r3, [pc, #556]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4a88      	ldr	r2, [pc, #544]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006594:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	791a      	ldrb	r2, [r3, #4]
 800659a:	4b86      	ldr	r3, [pc, #536]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fb55 	bl	8007c54 <SUBGRF_GetFskBandwidthRegValue>
 80065aa:	4603      	mov	r3, r0
 80065ac:	461a      	mov	r2, r3
 80065ae:	4b81      	ldr	r3, [pc, #516]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80065b4:	4b7f      	ldr	r3, [pc, #508]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	4b7b      	ldr	r3, [pc, #492]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065c6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7d1a      	ldrb	r2, [r3, #20]
 80065cc:	4b79      	ldr	r3, [pc, #484]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065ce:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	7d5b      	ldrb	r3, [r3, #21]
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	4b76      	ldr	r3, [pc, #472]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065da:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80065e2:	4b74      	ldr	r3, [pc, #464]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065e4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b6f      	ldr	r3, [pc, #444]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80065f8:	759a      	strb	r2, [r3, #22]
 80065fa:	e00b      	b.n	8006614 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006602:	2b02      	cmp	r3, #2
 8006604:	d103      	bne.n	800660e <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006606:	4b6b      	ldr	r3, [pc, #428]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006608:	22ff      	movs	r2, #255	; 0xff
 800660a:	759a      	strb	r2, [r3, #22]
 800660c:	e002      	b.n	8006614 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800660e:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800661a:	2b02      	cmp	r3, #2
 800661c:	d004      	beq.n	8006628 <RadioSetRxGenericConfig+0x150>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006624:	2b02      	cmp	r3, #2
 8006626:	d12d      	bne.n	8006684 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800662e:	2bf1      	cmp	r3, #241	; 0xf1
 8006630:	d00c      	beq.n	800664c <RadioSetRxGenericConfig+0x174>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006638:	2bf2      	cmp	r3, #242	; 0xf2
 800663a:	d007      	beq.n	800664c <RadioSetRxGenericConfig+0x174>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006642:	2b01      	cmp	r3, #1
 8006644:	d002      	beq.n	800664c <RadioSetRxGenericConfig+0x174>
            return -1;
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	e10b      	b.n	8006864 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800664c:	2300      	movs	r3, #0
 800664e:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006654:	4b58      	ldr	r3, [pc, #352]	; (80067b8 <RadioSetRxGenericConfig+0x2e0>)
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	4a57      	ldr	r2, [pc, #348]	; (80067bc <RadioSetRxGenericConfig+0x2e4>)
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fbba 	bl	8007dd8 <RFW_Init>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <RadioSetRxGenericConfig+0x198>
            return -1;
 800666a:	f04f 33ff 	mov.w	r3, #4294967295
 800666e:	e0f9      	b.n	8006864 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006670:	4b50      	ldr	r3, [pc, #320]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006672:	2200      	movs	r2, #0
 8006674:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006676:	4b4f      	ldr	r3, [pc, #316]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006678:	2201      	movs	r2, #1
 800667a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800667c:	4b4d      	ldr	r3, [pc, #308]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 800667e:	2200      	movs	r2, #0
 8006680:	755a      	strb	r2, [r3, #21]
        {
 8006682:	e00e      	b.n	80066a2 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800668a:	4b4a      	ldr	r3, [pc, #296]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 800668c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006694:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006696:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800669e:	4b45      	ldr	r3, [pc, #276]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80066a0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80066a2:	f7ff fb3c 	bl	8005d1e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80066a6:	2000      	movs	r0, #0
 80066a8:	f7fe fcfa 	bl	80050a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80066ac:	4844      	ldr	r0, [pc, #272]	; (80067c0 <RadioSetRxGenericConfig+0x2e8>)
 80066ae:	f000 ff03 	bl	80074b8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066b2:	4844      	ldr	r0, [pc, #272]	; (80067c4 <RadioSetRxGenericConfig+0x2ec>)
 80066b4:	f000 ffcc 	bl	8007650 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80066b8:	f107 031c 	add.w	r3, r7, #28
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fb06 	bl	8006cce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	8c1b      	ldrh	r3, [r3, #32]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb50 	bl	8006d6c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fb2b 	bl	8006d2c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80066dc:	fb02 f203 	mul.w	r2, r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	4a32      	ldr	r2, [pc, #200]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80066ea:	6093      	str	r3, [r2, #8]
        break;
 80066ec:	e0b9      	b.n	8006862 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <RadioSetRxGenericConfig+0x224>
            return -1;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295
 80066fa:	e0b3      	b.n	8006864 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006702:	2b01      	cmp	r3, #1
 8006704:	d104      	bne.n	8006710 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800670e:	e002      	b.n	8006716 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006710:	23ff      	movs	r3, #255	; 0xff
 8006712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fc99 	bl	800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fca3 	bl	800707a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006734:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800675a:	4b16      	ldr	r3, [pc, #88]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 800675c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006766:	2b02      	cmp	r3, #2
 8006768:	d010      	beq.n	800678c <RadioSetRxGenericConfig+0x2b4>
 800676a:	2b02      	cmp	r3, #2
 800676c:	dc2c      	bgt.n	80067c8 <RadioSetRxGenericConfig+0x2f0>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <RadioSetRxGenericConfig+0x2a0>
 8006772:	2b01      	cmp	r3, #1
 8006774:	d005      	beq.n	8006782 <RadioSetRxGenericConfig+0x2aa>
            break;
 8006776:	e027      	b.n	80067c8 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006778:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006780:	e023      	b.n	80067ca <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006782:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800678a:	e01e      	b.n	80067ca <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006792:	2b0b      	cmp	r3, #11
 8006794:	d004      	beq.n	80067a0 <RadioSetRxGenericConfig+0x2c8>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d104      	bne.n	80067aa <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80067a8:	e00f      	b.n	80067ca <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80067aa:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <RadioSetRxGenericConfig+0x2dc>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80067b2:	e00a      	b.n	80067ca <RadioSetRxGenericConfig+0x2f2>
 80067b4:	20000588 	.word	0x20000588
 80067b8:	2000043c 	.word	0x2000043c
 80067bc:	200005e1 	.word	0x200005e1
 80067c0:	200005c0 	.word	0x200005c0
 80067c4:	20000596 	.word	0x20000596
            break;
 80067c8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80067ca:	4b28      	ldr	r3, [pc, #160]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067d6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80067de:	4b23      	ldr	r3, [pc, #140]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067e0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80067e2:	4a22      	ldr	r2, [pc, #136]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80067f0:	4b1e      	ldr	r3, [pc, #120]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067f2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <RadioSetRxGenericConfig+0x394>)
 80067fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006802:	f7ff fa8c 	bl	8005d1e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006806:	2001      	movs	r0, #1
 8006808:	f7fe fc4a 	bl	80050a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800680c:	4818      	ldr	r0, [pc, #96]	; (8006870 <RadioSetRxGenericConfig+0x398>)
 800680e:	f000 fe53 	bl	80074b8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006812:	4818      	ldr	r0, [pc, #96]	; (8006874 <RadioSetRxGenericConfig+0x39c>)
 8006814:	f000 ff1c 	bl	8007650 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <RadioSetRxGenericConfig+0x394>)
 800681a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10d      	bne.n	800683e <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006822:	f240 7036 	movw	r0, #1846	; 0x736
 8006826:	f001 f86f 	bl	8007908 <SUBGRF_ReadRegister>
 800682a:	4603      	mov	r3, r0
 800682c:	f023 0304 	bic.w	r3, r3, #4
 8006830:	b2db      	uxtb	r3, r3
 8006832:	4619      	mov	r1, r3
 8006834:	f240 7036 	movw	r0, #1846	; 0x736
 8006838:	f001 f852 	bl	80078e0 <SUBGRF_WriteRegister>
 800683c:	e00c      	b.n	8006858 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800683e:	f240 7036 	movw	r0, #1846	; 0x736
 8006842:	f001 f861 	bl	8007908 <SUBGRF_ReadRegister>
 8006846:	4603      	mov	r3, r0
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4619      	mov	r1, r3
 8006850:	f240 7036 	movw	r0, #1846	; 0x736
 8006854:	f001 f844 	bl	80078e0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <RadioSetRxGenericConfig+0x394>)
 800685a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800685e:	609a      	str	r2, [r3, #8]
        break;
 8006860:	bf00      	nop
    }
    return status;
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006864:	4618      	mov	r0, r3
 8006866:	3730      	adds	r7, #48	; 0x30
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000588 	.word	0x20000588
 8006870:	200005c0 	.word	0x200005c0
 8006874:	20000596 	.word	0x20000596

08006878 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	4613      	mov	r3, r2
 8006888:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006892:	f001 faae 	bl	8007df2 <RFW_DeInit>
    switch( modem )
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b02      	cmp	r3, #2
 800689a:	f000 8144 	beq.w	8006b26 <RadioSetTxGenericConfig+0x2ae>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	f300 8160 	bgt.w	8006b64 <RadioSetTxGenericConfig+0x2ec>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <RadioSetTxGenericConfig+0x38>
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	f000 80b7 	beq.w	8006a1c <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80068ae:	e159      	b.n	8006b64 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <RadioSetTxGenericConfig+0x48>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <RadioSetTxGenericConfig+0x4e>
            return -1;
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
 80068c4:	e163      	b.n	8006b8e <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	7d1b      	ldrb	r3, [r3, #20]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d902      	bls.n	80068d4 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
 80068d2:	e15c      	b.n	8006b8e <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	e00d      	b.n	80068f6 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	4413      	add	r3, r2
 80068e2:	7819      	ldrb	r1, [r3, #0]
 80068e4:	f107 021c 	add.w	r2, r7, #28
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	4413      	add	r3, r2
 80068ec:	460a      	mov	r2, r1
 80068ee:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3301      	adds	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	7d1b      	ldrb	r3, [r3, #20]
 80068fa:	461a      	mov	r2, r3
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	4293      	cmp	r3, r2
 8006900:	dbeb      	blt.n	80068da <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006902:	4ba5      	ldr	r3, [pc, #660]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4aa2      	ldr	r2, [pc, #648]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006910:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	4ba0      	ldr	r3, [pc, #640]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	f001 f997 	bl	8007c54 <SUBGRF_GetFskBandwidthRegValue>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	4b9b      	ldr	r3, [pc, #620]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a98      	ldr	r2, [pc, #608]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006936:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006938:	4b97      	ldr	r3, [pc, #604]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 800693a:	2200      	movs	r2, #0
 800693c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	b29b      	uxth	r3, r3
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	b29a      	uxth	r2, r3
 8006948:	4b93      	ldr	r3, [pc, #588]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 800694a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800694c:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 800694e:	2204      	movs	r2, #4
 8006950:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	7d1b      	ldrb	r3, [r3, #20]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	b2da      	uxtb	r2, r3
 800695a:	4b8f      	ldr	r3, [pc, #572]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 800695c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800695e:	4b8e      	ldr	r3, [pc, #568]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006960:	2200      	movs	r2, #0
 8006962:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800696a:	2b02      	cmp	r3, #2
 800696c:	d003      	beq.n	8006976 <RadioSetTxGenericConfig+0xfe>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	7f9b      	ldrb	r3, [r3, #30]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d12a      	bne.n	80069cc <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	7fdb      	ldrb	r3, [r3, #31]
 800697a:	2bf1      	cmp	r3, #241	; 0xf1
 800697c:	d00a      	beq.n	8006994 <RadioSetTxGenericConfig+0x11c>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	7fdb      	ldrb	r3, [r3, #31]
 8006982:	2bf2      	cmp	r3, #242	; 0xf2
 8006984:	d006      	beq.n	8006994 <RadioSetTxGenericConfig+0x11c>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7fdb      	ldrb	r3, [r3, #31]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d002      	beq.n	8006994 <RadioSetTxGenericConfig+0x11c>
                return -1;
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	e0fc      	b.n	8006b8e <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8006994:	2301      	movs	r3, #1
 8006996:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800699c:	4b7f      	ldr	r3, [pc, #508]	; (8006b9c <RadioSetTxGenericConfig+0x324>)
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	f107 0310 	add.w	r3, r7, #16
 80069a4:	4a7e      	ldr	r2, [pc, #504]	; (8006ba0 <RadioSetTxGenericConfig+0x328>)
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fa16 	bl	8007dd8 <RFW_Init>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <RadioSetTxGenericConfig+0x140>
              return -1;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295
 80069b6:	e0ea      	b.n	8006b8e <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80069b8:	4b77      	ldr	r3, [pc, #476]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80069be:	4b76      	ldr	r3, [pc, #472]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80069c4:	4b74      	ldr	r3, [pc, #464]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	755a      	strb	r2, [r3, #21]
        {
 80069ca:	e00c      	b.n	80069e6 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	7fda      	ldrb	r2, [r3, #31]
 80069d0:	4b71      	ldr	r3, [pc, #452]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069d2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80069da:	4b6f      	ldr	r3, [pc, #444]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069dc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	7f9a      	ldrb	r2, [r3, #30]
 80069e2:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 80069e4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80069e6:	f7ff f99a 	bl	8005d1e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80069ea:	2000      	movs	r0, #0
 80069ec:	f7fe fb58 	bl	80050a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80069f0:	486c      	ldr	r0, [pc, #432]	; (8006ba4 <RadioSetTxGenericConfig+0x32c>)
 80069f2:	f000 fd61 	bl	80074b8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069f6:	486c      	ldr	r0, [pc, #432]	; (8006ba8 <RadioSetTxGenericConfig+0x330>)
 80069f8:	f000 fe2a 	bl	8007650 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80069fc:	f107 031c 	add.w	r3, r7, #28
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f964 	bl	8006cce <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	8b9b      	ldrh	r3, [r3, #28]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f9ae 	bl	8006d6c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	8c1b      	ldrh	r3, [r3, #32]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 f989 	bl	8006d2c <SUBGRF_SetCrcPolynomial>
        break;
 8006a1a:	e0a4      	b.n	8006b66 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006a1c:	4b5e      	ldr	r3, [pc, #376]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006a2a:	4b5b      	ldr	r3, [pc, #364]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006a36:	4b58      	ldr	r3, [pc, #352]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006a42:	4b55      	ldr	r3, [pc, #340]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d010      	beq.n	8006a74 <RadioSetTxGenericConfig+0x1fc>
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	dc22      	bgt.n	8006a9c <RadioSetTxGenericConfig+0x224>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <RadioSetTxGenericConfig+0x1e8>
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d005      	beq.n	8006a6a <RadioSetTxGenericConfig+0x1f2>
            break;
 8006a5e:	e01d      	b.n	8006a9c <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a60:	4b4d      	ldr	r3, [pc, #308]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a68:	e019      	b.n	8006a9e <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a6a:	4b4b      	ldr	r3, [pc, #300]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a72:	e014      	b.n	8006a9e <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7a:	2b0b      	cmp	r3, #11
 8006a7c:	d004      	beq.n	8006a88 <RadioSetTxGenericConfig+0x210>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d104      	bne.n	8006a92 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a88:	4b43      	ldr	r3, [pc, #268]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a90:	e005      	b.n	8006a9e <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a92:	4b41      	ldr	r3, [pc, #260]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a9a:	e000      	b.n	8006a9e <RadioSetTxGenericConfig+0x226>
            break;
 8006a9c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a9e:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006aaa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006ab2:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006ab4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006abc:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006abe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006ac8:	4b33      	ldr	r3, [pc, #204]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006ace:	f7ff f926 	bl	8005d1e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f7fe fae4 	bl	80050a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ad8:	4832      	ldr	r0, [pc, #200]	; (8006ba4 <RadioSetTxGenericConfig+0x32c>)
 8006ada:	f000 fced 	bl	80074b8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ade:	4832      	ldr	r0, [pc, #200]	; (8006ba8 <RadioSetTxGenericConfig+0x330>)
 8006ae0:	f000 fdb6 	bl	8007650 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006ae4:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d10d      	bne.n	8006b0a <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006aee:	f640 0089 	movw	r0, #2185	; 0x889
 8006af2:	f000 ff09 	bl	8007908 <SUBGRF_ReadRegister>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f023 0304 	bic.w	r3, r3, #4
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	f640 0089 	movw	r0, #2185	; 0x889
 8006b04:	f000 feec 	bl	80078e0 <SUBGRF_WriteRegister>
        break;
 8006b08:	e02d      	b.n	8006b66 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006b0a:	f640 0089 	movw	r0, #2185	; 0x889
 8006b0e:	f000 fefb 	bl	8007908 <SUBGRF_ReadRegister>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f043 0304 	orr.w	r3, r3, #4
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	f640 0089 	movw	r0, #2185	; 0x889
 8006b20:	f000 fede 	bl	80078e0 <SUBGRF_WriteRegister>
        break;
 8006b24:	e01f      	b.n	8006b66 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <RadioSetTxGenericConfig+0x2c0>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b36:	d902      	bls.n	8006b3e <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	e027      	b.n	8006b8e <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006b3e:	2002      	movs	r0, #2
 8006b40:	f7fe faae 	bl	80050a0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006b44:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	4a11      	ldr	r2, [pc, #68]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b52:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b56:	2216      	movs	r2, #22
 8006b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006b5c:	4811      	ldr	r0, [pc, #68]	; (8006ba4 <RadioSetTxGenericConfig+0x32c>)
 8006b5e:	f000 fcab 	bl	80074b8 <SUBGRF_SetModulationParams>
        break;
 8006b62:	e000      	b.n	8006b66 <RadioSetTxGenericConfig+0x2ee>
        break;
 8006b64:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 ff84 	bl	8007a78 <SUBGRF_SetRfTxPower>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b76:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b7c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f94a 	bl	8007e1a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <RadioSetTxGenericConfig+0x320>)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6053      	str	r3, [r2, #4]
    return 0;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3728      	adds	r7, #40	; 0x28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000588 	.word	0x20000588
 8006b9c:	2000043c 	.word	0x2000043c
 8006ba0:	200005e0 	.word	0x200005e0
 8006ba4:	200005c0 	.word	0x200005c0
 8006ba8:	20000596 	.word	0x20000596

08006bac <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <SUBGRF_Init+0x78>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006bc0:	f7fa fcd8 	bl	8001574 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006bc4:	2002      	movs	r0, #2
 8006bc6:	f001 f823 	bl	8007c10 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <SUBGRF_Init+0x7c>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f000 f977 	bl	8006ec4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006bd6:	f7fa fba3 	bl	8001320 <RBI_IsTCXO>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10e      	bne.n	8006bfe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	2001      	movs	r0, #1
 8006be4:	f000 fb78 	bl	80072d8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006be8:	2100      	movs	r1, #0
 8006bea:	f640 1011 	movw	r0, #2321	; 0x911
 8006bee:	f000 fe77 	bl	80078e0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006bf2:	237f      	movs	r3, #127	; 0x7f
 8006bf4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006bf6:	7b38      	ldrb	r0, [r7, #12]
 8006bf8:	f000 fa85 	bl	8007106 <SUBGRF_Calibrate>
 8006bfc:	e009      	b.n	8006c12 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006bfe:	2120      	movs	r1, #32
 8006c00:	f640 1011 	movw	r0, #2321	; 0x911
 8006c04:	f000 fe6c 	bl	80078e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006c08:	2120      	movs	r1, #32
 8006c0a:	f640 1012 	movw	r0, #2322	; 0x912
 8006c0e:	f000 fe67 	bl	80078e0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006c12:	f7fa fb69 	bl	80012e8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <SUBGRF_Init+0x80>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000044c 	.word	0x2000044c
 8006c28:	20000448 	.word	0x20000448
 8006c2c:	20000440 	.word	0x20000440

08006c30 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <SUBGRF_GetOperatingMode+0x10>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	20000440 	.word	0x20000440

08006c44 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	461a      	mov	r2, r3
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	2000      	movs	r0, #0
 8006c58:	f000 fe92 	bl	8007980 <SUBGRF_WriteBuffer>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8006c76:	f107 0317 	add.w	r3, r7, #23
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68b8      	ldr	r0, [r7, #8]
 8006c7e:	f000 fdb1 	bl	80077e4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	79fa      	ldrb	r2, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d201      	bcs.n	8006c90 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e007      	b.n	8006ca0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006c90:	7df8      	ldrb	r0, [r7, #23]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	f000 fe87 	bl	80079ac <SUBGRF_ReadBuffer>

    return 0;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff ffc2 	bl	8006c44 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f91b 	bl	8006efc <SUBGRF_SetTx>
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006cd6:	2208      	movs	r2, #8
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006cde:	f000 fe27 	bl	8007930 <SUBGRF_WriteRegisters>
    return 0;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006d06:	f000 fb67 	bl	80073d8 <SUBGRF_GetPacketType>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d108      	bne.n	8006d22 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006d10:	f107 030c 	add.w	r3, r7, #12
 8006d14:	2202      	movs	r2, #2
 8006d16:	4619      	mov	r1, r3
 8006d18:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006d1c:	f000 fe08 	bl	8007930 <SUBGRF_WriteRegisters>
            break;
 8006d20:	e000      	b.n	8006d24 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006d22:	bf00      	nop
    }
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006d46:	f000 fb47 	bl	80073d8 <SUBGRF_GetPacketType>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d108      	bne.n	8006d62 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006d50:	f107 030c 	add.w	r3, r7, #12
 8006d54:	2202      	movs	r2, #2
 8006d56:	4619      	mov	r1, r3
 8006d58:	f240 60be 	movw	r0, #1726	; 0x6be
 8006d5c:	f000 fde8 	bl	8007930 <SUBGRF_WriteRegisters>
            break;
 8006d60:	e000      	b.n	8006d64 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006d62:	bf00      	nop
    }
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8006d7a:	f000 fb2d 	bl	80073d8 <SUBGRF_GetPacketType>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006d84:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006d88:	f000 fdbe 	bl	8007908 <SUBGRF_ReadRegister>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	b25a      	sxtb	r2, r3
 8006da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4619      	mov	r1, r3
 8006db0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006db4:	f000 fd94 	bl	80078e0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8006dc2:	f000 fd8d 	bl	80078e0 <SUBGRF_WriteRegister>
            break;
 8006dc6:	e000      	b.n	8006dca <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8006dc8:	bf00      	nop
    }
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006de4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006de8:	f000 fd8e 	bl	8007908 <SUBGRF_ReadRegister>
 8006dec:	4603      	mov	r3, r0
 8006dee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006dfe:	f000 fd6f 	bl	80078e0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006e02:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e06:	f000 fd7f 	bl	8007908 <SUBGRF_ReadRegister>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006e0e:	79bb      	ldrb	r3, [r7, #6]
 8006e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	4619      	mov	r1, r3
 8006e18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e1c:	f000 fd60 	bl	80078e0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006e20:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e24:	f000 f88a 	bl	8006f3c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006e28:	463b      	mov	r3, r7
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f640 0019 	movw	r0, #2073	; 0x819
 8006e32:	f000 fd91 	bl	8007958 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8006e36:	2000      	movs	r0, #0
 8006e38:	f000 f844 	bl	8006ec4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006e44:	f000 fd4c 	bl	80078e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006e48:	79bb      	ldrb	r3, [r7, #6]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e50:	f000 fd46 	bl	80078e0 <SUBGRF_WriteRegister>

    return number;
 8006e54:	683b      	ldr	r3, [r7, #0]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f7fa fa44 	bl	80012f6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006e6e:	2002      	movs	r0, #2
 8006e70:	f000 fece 	bl	8007c10 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006e74:	793b      	ldrb	r3, [r7, #4]
 8006e76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006e80:	793b      	ldrb	r3, [r7, #4]
 8006e82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006e90:	793b      	ldrb	r3, [r7, #4]
 8006e92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006ea0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006ea2:	f107 030f 	add.w	r3, r7, #15
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	2084      	movs	r0, #132	; 0x84
 8006eac:	f000 fd94 	bl	80079d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <SUBGRF_SetSleep+0x60>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000440 	.word	0x20000440

08006ec4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006ece:	1dfb      	adds	r3, r7, #7
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	2080      	movs	r0, #128	; 0x80
 8006ed6:	f000 fd7f 	bl	80079d8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d103      	bne.n	8006ee8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <SUBGRF_SetStandby+0x34>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006ee6:	e002      	b.n	8006eee <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <SUBGRF_SetStandby+0x34>)
 8006eea:	2202      	movs	r2, #2
 8006eec:	701a      	strb	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000440 	.word	0x20000440

08006efc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <SUBGRF_SetTx+0x3c>)
 8006f06:	2204      	movs	r2, #4
 8006f08:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	0c1b      	lsrs	r3, r3, #16
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	2203      	movs	r2, #3
 8006f26:	4619      	mov	r1, r3
 8006f28:	2083      	movs	r0, #131	; 0x83
 8006f2a:	f000 fd55 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000440 	.word	0x20000440

08006f3c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <SUBGRF_SetRx+0x3c>)
 8006f46:	2205      	movs	r2, #5
 8006f48:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	2203      	movs	r2, #3
 8006f66:	4619      	mov	r1, r3
 8006f68:	2082      	movs	r0, #130	; 0x82
 8006f6a:	f000 fd35 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000440 	.word	0x20000440

08006f7c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <SUBGRF_SetRxBoosted+0x44>)
 8006f86:	2205      	movs	r2, #5
 8006f88:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006f8a:	2197      	movs	r1, #151	; 0x97
 8006f8c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006f90:	f000 fca6 	bl	80078e0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	0c1b      	lsrs	r3, r3, #16
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006faa:	f107 030c 	add.w	r3, r7, #12
 8006fae:	2203      	movs	r2, #3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	2082      	movs	r0, #130	; 0x82
 8006fb4:	f000 fd10 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000440 	.word	0x20000440

08006fc4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	0c1b      	lsrs	r3, r3, #16
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	2206      	movs	r2, #6
 8007000:	4619      	mov	r1, r3
 8007002:	2094      	movs	r0, #148	; 0x94
 8007004:	f000 fce8 	bl	80079d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <SUBGRF_SetRxDutyCycle+0x54>)
 800700a:	2206      	movs	r2, #6
 800700c:	701a      	strb	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000440 	.word	0x20000440

0800701c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	20c5      	movs	r0, #197	; 0xc5
 8007026:	f000 fcd7 	bl	80079d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800702a:	4b02      	ldr	r3, [pc, #8]	; (8007034 <SUBGRF_SetCad+0x18>)
 800702c:	2207      	movs	r2, #7
 800702e:	701a      	strb	r2, [r3, #0]
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000440 	.word	0x20000440

08007038 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800703c:	2200      	movs	r2, #0
 800703e:	2100      	movs	r1, #0
 8007040:	20d1      	movs	r0, #209	; 0xd1
 8007042:	f000 fcc9 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}

0800704a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800704e:	2200      	movs	r2, #0
 8007050:	2100      	movs	r1, #0
 8007052:	20d2      	movs	r0, #210	; 0xd2
 8007054:	f000 fcc0 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007058:	bf00      	nop
 800705a:	bd80      	pop	{r7, pc}

0800705c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007066:	1dfb      	adds	r3, r7, #7
 8007068:	2201      	movs	r2, #1
 800706a:	4619      	mov	r1, r3
 800706c:	209f      	movs	r0, #159	; 0x9f
 800706e:	f000 fcb3 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	4603      	mov	r3, r0
 8007082:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007084:	1dfb      	adds	r3, r7, #7
 8007086:	2201      	movs	r2, #1
 8007088:	4619      	mov	r1, r3
 800708a:	20a0      	movs	r0, #160	; 0xa0
 800708c:	f000 fca4 	bl	80079d8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	2b3f      	cmp	r3, #63	; 0x3f
 8007094:	d91c      	bls.n	80070d0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80070a4:	e005      	b.n	80070b2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	73fb      	strb	r3, [r7, #15]
            exp++;
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	3301      	adds	r3, #1
 80070b0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b1f      	cmp	r3, #31
 80070b6:	d8f6      	bhi.n	80070a6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	4413      	add	r3, r2
 80070c2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80070c4:	7b7b      	ldrb	r3, [r7, #13]
 80070c6:	4619      	mov	r1, r3
 80070c8:	f240 7006 	movw	r0, #1798	; 0x706
 80070cc:	f000 fc08 	bl	80078e0 <SUBGRF_WriteRegister>
    }
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80070de:	f7fa f926 	bl	800132e <RBI_IsDCDC>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d102      	bne.n	80070ee <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80070e8:	2301      	movs	r3, #1
 80070ea:	71fb      	strb	r3, [r7, #7]
 80070ec:	e001      	b.n	80070f2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80070ee:	2300      	movs	r3, #0
 80070f0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80070f2:	1dfb      	adds	r3, r7, #7
 80070f4:	2201      	movs	r2, #1
 80070f6:	4619      	mov	r1, r3
 80070f8:	2096      	movs	r0, #150	; 0x96
 80070fa:	f000 fc6d 	bl	80079d8 <SUBGRF_WriteCommand>
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800710e:	793b      	ldrb	r3, [r7, #4]
 8007110:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	019b      	lsls	r3, r3, #6
 8007118:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800711a:	793b      	ldrb	r3, [r7, #4]
 800711c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007124:	b25b      	sxtb	r3, r3
 8007126:	4313      	orrs	r3, r2
 8007128:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800712a:	793b      	ldrb	r3, [r7, #4]
 800712c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007130:	b2db      	uxtb	r3, r3
 8007132:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007134:	b25b      	sxtb	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800713a:	793b      	ldrb	r3, [r7, #4]
 800713c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007144:	b25b      	sxtb	r3, r3
 8007146:	4313      	orrs	r3, r2
 8007148:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800714a:	793b      	ldrb	r3, [r7, #4]
 800714c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007154:	b25b      	sxtb	r3, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800715a:	793b      	ldrb	r3, [r7, #4]
 800715c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007164:	b25b      	sxtb	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800716a:	793b      	ldrb	r3, [r7, #4]
 800716c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007174:	4313      	orrs	r3, r2
 8007176:	b25b      	sxtb	r3, r3
 8007178:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800717a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800717c:	f107 030f 	add.w	r3, r7, #15
 8007180:	2201      	movs	r2, #1
 8007182:	4619      	mov	r1, r3
 8007184:	2089      	movs	r0, #137	; 0x89
 8007186:	f000 fc27 	bl	80079d8 <SUBGRF_WriteCommand>
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a1b      	ldr	r2, [pc, #108]	; (800720c <SUBGRF_CalibrateImage+0x78>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d904      	bls.n	80071ae <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80071a4:	23e1      	movs	r3, #225	; 0xe1
 80071a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80071a8:	23e9      	movs	r3, #233	; 0xe9
 80071aa:	737b      	strb	r3, [r7, #13]
 80071ac:	e022      	b.n	80071f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a17      	ldr	r2, [pc, #92]	; (8007210 <SUBGRF_CalibrateImage+0x7c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d904      	bls.n	80071c0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80071b6:	23d7      	movs	r3, #215	; 0xd7
 80071b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80071ba:	23db      	movs	r3, #219	; 0xdb
 80071bc:	737b      	strb	r3, [r7, #13]
 80071be:	e019      	b.n	80071f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a14      	ldr	r2, [pc, #80]	; (8007214 <SUBGRF_CalibrateImage+0x80>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d904      	bls.n	80071d2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80071c8:	23c1      	movs	r3, #193	; 0xc1
 80071ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80071cc:	23c5      	movs	r3, #197	; 0xc5
 80071ce:	737b      	strb	r3, [r7, #13]
 80071d0:	e010      	b.n	80071f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a10      	ldr	r2, [pc, #64]	; (8007218 <SUBGRF_CalibrateImage+0x84>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d904      	bls.n	80071e4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80071da:	2375      	movs	r3, #117	; 0x75
 80071dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80071de:	2381      	movs	r3, #129	; 0x81
 80071e0:	737b      	strb	r3, [r7, #13]
 80071e2:	e007      	b.n	80071f4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a0d      	ldr	r2, [pc, #52]	; (800721c <SUBGRF_CalibrateImage+0x88>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d903      	bls.n	80071f4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80071ec:	236b      	movs	r3, #107	; 0x6b
 80071ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80071f0:	236f      	movs	r3, #111	; 0x6f
 80071f2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	2202      	movs	r2, #2
 80071fa:	4619      	mov	r1, r3
 80071fc:	2098      	movs	r0, #152	; 0x98
 80071fe:	f000 fbeb 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	35a4e900 	.word	0x35a4e900
 8007210:	32a9f880 	.word	0x32a9f880
 8007214:	2de54480 	.word	0x2de54480
 8007218:	1b6b0b00 	.word	0x1b6b0b00
 800721c:	1954fc40 	.word	0x1954fc40

08007220 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	4603      	mov	r3, r0
 8007234:	71bb      	strb	r3, [r7, #6]
 8007236:	460b      	mov	r3, r1
 8007238:	717b      	strb	r3, [r7, #5]
 800723a:	4613      	mov	r3, r2
 800723c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8007242:	79bb      	ldrb	r3, [r7, #6]
 8007244:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007246:	797b      	ldrb	r3, [r7, #5]
 8007248:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800724a:	793b      	ldrb	r3, [r7, #4]
 800724c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	2204      	movs	r2, #4
 8007254:	4619      	mov	r1, r3
 8007256:	2095      	movs	r0, #149	; 0x95
 8007258:	f000 fbbe 	bl	80079d8 <SUBGRF_WriteCommand>
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}

08007264 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	4623      	mov	r3, r4
 8007274:	80fb      	strh	r3, [r7, #6]
 8007276:	4603      	mov	r3, r0
 8007278:	80bb      	strh	r3, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	807b      	strh	r3, [r7, #2]
 800727e:	4613      	mov	r3, r2
 8007280:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	b29b      	uxth	r3, r3
 8007288:	b2db      	uxtb	r3, r3
 800728a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007292:	88bb      	ldrh	r3, [r7, #4]
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	b2db      	uxtb	r3, r3
 800729a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800729c:	88bb      	ldrh	r3, [r7, #4]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80072a2:	887b      	ldrh	r3, [r7, #2]
 80072a4:	0a1b      	lsrs	r3, r3, #8
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80072ac:	887b      	ldrh	r3, [r7, #2]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80072b2:	883b      	ldrh	r3, [r7, #0]
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80072bc:	883b      	ldrh	r3, [r7, #0]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	2208      	movs	r2, #8
 80072c8:	4619      	mov	r1, r3
 80072ca:	2008      	movs	r0, #8
 80072cc:	f000 fb84 	bl	80079d8 <SUBGRF_WriteCommand>
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}

080072d8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	6039      	str	r1, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	0c1b      	lsrs	r3, r3, #16
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	2204      	movs	r2, #4
 800730a:	4619      	mov	r1, r3
 800730c:	2097      	movs	r0, #151	; 0x97
 800730e:	f000 fb63 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007328:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <SUBGRF_SetRfFrequency+0x7c>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f083 0301 	eor.w	r3, r3, #1
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff ff2c 	bl	8007194 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800733c:	4b16      	ldr	r3, [pc, #88]	; (8007398 <SUBGRF_SetRfFrequency+0x7c>)
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	461a      	mov	r2, r3
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	09d5      	lsrs	r5, r2, #7
 800734c:	0654      	lsls	r4, r2, #25
 800734e:	4a13      	ldr	r2, [pc, #76]	; (800739c <SUBGRF_SetRfFrequency+0x80>)
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f9 fc0e 	bl	8000b78 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4613      	mov	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	b2db      	uxtb	r3, r3
 800736a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	b2db      	uxtb	r3, r3
 8007372:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	b2db      	uxtb	r3, r3
 800737a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	2204      	movs	r2, #4
 8007388:	4619      	mov	r1, r3
 800738a:	2086      	movs	r0, #134	; 0x86
 800738c:	f000 fb24 	bl	80079d8 <SUBGRF_WriteCommand>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bdb0      	pop	{r4, r5, r7, pc}
 8007398:	20000448 	.word	0x20000448
 800739c:	01e84800 	.word	0x01e84800

080073a0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80073aa:	79fa      	ldrb	r2, [r7, #7]
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <SUBGRF_SetPacketType+0x34>)
 80073ae:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80073b6:	2100      	movs	r1, #0
 80073b8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80073bc:	f000 fa90 	bl	80078e0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	2201      	movs	r2, #1
 80073c4:	4619      	mov	r1, r3
 80073c6:	208a      	movs	r0, #138	; 0x8a
 80073c8:	f000 fb06 	bl	80079d8 <SUBGRF_WriteCommand>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000441 	.word	0x20000441

080073d8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
    return PacketType;
 80073dc:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <SUBGRF_GetPacketType+0x10>)
 80073de:	781b      	ldrb	r3, [r3, #0]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	20000441 	.word	0x20000441

080073ec <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
 80073f6:	460b      	mov	r3, r1
 80073f8:	71bb      	strb	r3, [r7, #6]
 80073fa:	4613      	mov	r3, r2
 80073fc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d124      	bne.n	800744e <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8007404:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007408:	2b0f      	cmp	r3, #15
 800740a:	d106      	bne.n	800741a <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800740c:	2301      	movs	r3, #1
 800740e:	2201      	movs	r2, #1
 8007410:	2100      	movs	r1, #0
 8007412:	2006      	movs	r0, #6
 8007414:	f7ff ff04 	bl	8007220 <SUBGRF_SetPaConfig>
 8007418:	e005      	b.n	8007426 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800741a:	2301      	movs	r3, #1
 800741c:	2201      	movs	r2, #1
 800741e:	2100      	movs	r1, #0
 8007420:	2004      	movs	r0, #4
 8007422:	f7ff fefd 	bl	8007220 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007426:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800742a:	2b0d      	cmp	r3, #13
 800742c:	dd02      	ble.n	8007434 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800742e:	230e      	movs	r3, #14
 8007430:	71bb      	strb	r3, [r7, #6]
 8007432:	e006      	b.n	8007442 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007434:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007438:	f113 0f11 	cmn.w	r3, #17
 800743c:	da01      	bge.n	8007442 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800743e:	23ef      	movs	r3, #239	; 0xef
 8007440:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8007442:	2118      	movs	r1, #24
 8007444:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007448:	f000 fa4a 	bl	80078e0 <SUBGRF_WriteRegister>
 800744c:	e025      	b.n	800749a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800744e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007452:	f000 fa59 	bl	8007908 <SUBGRF_ReadRegister>
 8007456:	4603      	mov	r3, r0
 8007458:	f043 031e 	orr.w	r3, r3, #30
 800745c:	b2db      	uxtb	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007464:	f000 fa3c 	bl	80078e0 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007468:	2301      	movs	r3, #1
 800746a:	2200      	movs	r2, #0
 800746c:	2107      	movs	r1, #7
 800746e:	2004      	movs	r0, #4
 8007470:	f7ff fed6 	bl	8007220 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007474:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007478:	2b16      	cmp	r3, #22
 800747a:	dd02      	ble.n	8007482 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800747c:	2316      	movs	r3, #22
 800747e:	71bb      	strb	r3, [r7, #6]
 8007480:	e006      	b.n	8007490 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8007482:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007486:	f113 0f09 	cmn.w	r3, #9
 800748a:	da01      	bge.n	8007490 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800748c:	23f7      	movs	r3, #247	; 0xf7
 800748e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8007490:	2138      	movs	r1, #56	; 0x38
 8007492:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007496:	f000 fa23 	bl	80078e0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800749a:	79bb      	ldrb	r3, [r7, #6]
 800749c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800749e:	797b      	ldrb	r3, [r7, #5]
 80074a0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	2202      	movs	r2, #2
 80074a8:	4619      	mov	r1, r3
 80074aa:	208e      	movs	r0, #142	; 0x8e
 80074ac:	f000 fa94 	bl	80079d8 <SUBGRF_WriteCommand>
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80074c4:	4a5e      	ldr	r2, [pc, #376]	; (8007640 <SUBGRF_SetModulationParams+0x188>)
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074ce:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <SUBGRF_SetModulationParams+0x18c>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d004      	beq.n	80074e8 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff ff5c 	bl	80073a0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	f200 80a2 	bhi.w	8007636 <SUBGRF_SetModulationParams+0x17e>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <SUBGRF_SetModulationParams+0x40>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007509 	.word	0x08007509
 80074fc:	080075c5 	.word	0x080075c5
 8007500:	08007587 	.word	0x08007587
 8007504:	080075f3 	.word	0x080075f3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007508:	2308      	movs	r3, #8
 800750a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	4a4d      	ldr	r2, [pc, #308]	; (8007648 <SUBGRF_SetModulationParams+0x190>)
 8007512:	fbb2 f3f3 	udiv	r3, r2, r3
 8007516:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	0c1b      	lsrs	r3, r3, #16
 800751c:	b2db      	uxtb	r3, r3
 800751e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	b2db      	uxtb	r3, r3
 8007526:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7b1b      	ldrb	r3, [r3, #12]
 8007532:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7b5b      	ldrb	r3, [r3, #13]
 8007538:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	461a      	mov	r2, r3
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	09d5      	lsrs	r5, r2, #7
 8007546:	0654      	lsls	r4, r2, #25
 8007548:	4a40      	ldr	r2, [pc, #256]	; (800764c <SUBGRF_SetModulationParams+0x194>)
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fb11 	bl	8000b78 <__aeabi_uldivmod>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4613      	mov	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	b2db      	uxtb	r3, r3
 8007564:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	b2db      	uxtb	r3, r3
 800756c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	b29a      	uxth	r2, r3
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	4619      	mov	r1, r3
 800757e:	208b      	movs	r0, #139	; 0x8b
 8007580:	f000 fa2a 	bl	80079d8 <SUBGRF_WriteCommand>
        break;
 8007584:	e058      	b.n	8007638 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007586:	2304      	movs	r3, #4
 8007588:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	4a2e      	ldr	r2, [pc, #184]	; (8007648 <SUBGRF_SetModulationParams+0x190>)
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	b2db      	uxtb	r3, r3
 800759c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7d1b      	ldrb	r3, [r3, #20]
 80075b0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4619      	mov	r1, r3
 80075bc:	208b      	movs	r0, #139	; 0x8b
 80075be:	f000 fa0b 	bl	80079d8 <SUBGRF_WriteCommand>
        break;
 80075c2:	e039      	b.n	8007638 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 80075c4:	2304      	movs	r3, #4
 80075c6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e1b      	ldrb	r3, [r3, #24]
 80075cc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	7e5b      	ldrb	r3, [r3, #25]
 80075d2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7e9b      	ldrb	r3, [r3, #26]
 80075d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7edb      	ldrb	r3, [r3, #27]
 80075de:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80075e0:	7cfb      	ldrb	r3, [r7, #19]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	4619      	mov	r1, r3
 80075ea:	208b      	movs	r0, #139	; 0x8b
 80075ec:	f000 f9f4 	bl	80079d8 <SUBGRF_WriteCommand>

        break;
 80075f0:	e022      	b.n	8007638 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80075f2:	2305      	movs	r3, #5
 80075f4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4a13      	ldr	r2, [pc, #76]	; (8007648 <SUBGRF_SetModulationParams+0x190>)
 80075fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	0c1b      	lsrs	r3, r3, #16
 8007606:	b2db      	uxtb	r3, r3
 8007608:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	b2db      	uxtb	r3, r3
 8007610:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7b1b      	ldrb	r3, [r3, #12]
 800761c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7b5b      	ldrb	r3, [r3, #13]
 8007622:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007624:	7cfb      	ldrb	r3, [r7, #19]
 8007626:	b29a      	uxth	r2, r3
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	4619      	mov	r1, r3
 800762e:	208b      	movs	r0, #139	; 0x8b
 8007630:	f000 f9d2 	bl	80079d8 <SUBGRF_WriteCommand>
        break;
 8007634:	e000      	b.n	8007638 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007636:	bf00      	nop
    }
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bdb0      	pop	{r4, r5, r7, pc}
 8007640:	0800c0f4 	.word	0x0800c0f4
 8007644:	20000441 	.word	0x20000441
 8007648:	3d090000 	.word	0x3d090000
 800764c:	01e84800 	.word	0x01e84800

08007650 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800765c:	4a48      	ldr	r2, [pc, #288]	; (8007780 <SUBGRF_SetPacketParams+0x130>)
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	ca07      	ldmia	r2, {r0, r1, r2}
 8007664:	c303      	stmia	r3!, {r0, r1}
 8007666:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	4b45      	ldr	r3, [pc, #276]	; (8007784 <SUBGRF_SetPacketParams+0x134>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d004      	beq.n	800767e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fe91 	bl	80073a0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b03      	cmp	r3, #3
 8007684:	d878      	bhi.n	8007778 <SUBGRF_SetPacketParams+0x128>
 8007686:	a201      	add	r2, pc, #4	; (adr r2, 800768c <SUBGRF_SetPacketParams+0x3c>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	0800769d 	.word	0x0800769d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	08007721 	.word	0x08007721
 8007698:	0800769d 	.word	0x0800769d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7a5b      	ldrb	r3, [r3, #9]
 80076a0:	2bf1      	cmp	r3, #241	; 0xf1
 80076a2:	d10a      	bne.n	80076ba <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80076a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076a8:	f7ff fb20 	bl	8006cec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80076ac:	f248 0005 	movw	r0, #32773	; 0x8005
 80076b0:	f7ff fb3c 	bl	8006d2c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80076b4:	2302      	movs	r3, #2
 80076b6:	75bb      	strb	r3, [r7, #22]
 80076b8:	e011      	b.n	80076de <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7a5b      	ldrb	r3, [r3, #9]
 80076be:	2bf2      	cmp	r3, #242	; 0xf2
 80076c0:	d10a      	bne.n	80076d8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80076c2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80076c6:	f7ff fb11 	bl	8006cec <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80076ca:	f241 0021 	movw	r0, #4129	; 0x1021
 80076ce:	f7ff fb2d 	bl	8006d2c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80076d2:	2306      	movs	r3, #6
 80076d4:	75bb      	strb	r3, [r7, #22]
 80076d6:	e002      	b.n	80076de <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7a5b      	ldrb	r3, [r3, #9]
 80076dc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80076de:	2309      	movs	r3, #9
 80076e0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	885b      	ldrh	r3, [r3, #2]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	795b      	ldrb	r3, [r3, #5]
 8007700:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	799b      	ldrb	r3, [r3, #6]
 8007706:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	79db      	ldrb	r3, [r3, #7]
 800770c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7a1b      	ldrb	r3, [r3, #8]
 8007712:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007714:	7dbb      	ldrb	r3, [r7, #22]
 8007716:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7a9b      	ldrb	r3, [r3, #10]
 800771c:	753b      	strb	r3, [r7, #20]
        break;
 800771e:	e022      	b.n	8007766 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	733b      	strb	r3, [r7, #12]
        break;
 800772a:	e01c      	b.n	8007766 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800772c:	2306      	movs	r3, #6
 800772e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	89db      	ldrh	r3, [r3, #14]
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	b29b      	uxth	r3, r3
 8007738:	b2db      	uxtb	r3, r3
 800773a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	89db      	ldrh	r3, [r3, #14]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	7c1a      	ldrb	r2, [r3, #16]
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <SUBGRF_SetPacketParams+0x138>)
 800774a:	4611      	mov	r1, r2
 800774c:	7019      	strb	r1, [r3, #0]
 800774e:	4613      	mov	r3, r2
 8007750:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7c5b      	ldrb	r3, [r3, #17]
 8007756:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	7c9b      	ldrb	r3, [r3, #18]
 800775c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7cdb      	ldrb	r3, [r3, #19]
 8007762:	747b      	strb	r3, [r7, #17]
        break;
 8007764:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	b29a      	uxth	r2, r3
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4619      	mov	r1, r3
 8007770:	208c      	movs	r0, #140	; 0x8c
 8007772:	f000 f931 	bl	80079d8 <SUBGRF_WriteCommand>
 8007776:	e000      	b.n	800777a <SUBGRF_SetPacketParams+0x12a>
        return;
 8007778:	bf00      	nop
}
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	0800c0fc 	.word	0x0800c0fc
 8007784:	20000441 	.word	0x20000441
 8007788:	20000442 	.word	0x20000442

0800778c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	460a      	mov	r2, r1
 8007796:	71fb      	strb	r3, [r7, #7]
 8007798:	4613      	mov	r3, r2
 800779a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80077a0:	79bb      	ldrb	r3, [r7, #6]
 80077a2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	2202      	movs	r2, #2
 80077aa:	4619      	mov	r1, r3
 80077ac:	208f      	movs	r0, #143	; 0x8f
 80077ae:	f000 f913 	bl	80079d8 <SUBGRF_WriteCommand>
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80077c4:	1d3b      	adds	r3, r7, #4
 80077c6:	2201      	movs	r2, #1
 80077c8:	4619      	mov	r1, r3
 80077ca:	2015      	movs	r0, #21
 80077cc:	f000 f918 	bl	8007a00 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80077d0:	793b      	ldrb	r3, [r7, #4]
 80077d2:	425b      	negs	r3, r3
 80077d4:	105b      	asrs	r3, r3, #1
 80077d6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80077d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80077ee:	f107 030c 	add.w	r3, r7, #12
 80077f2:	2202      	movs	r2, #2
 80077f4:	4619      	mov	r1, r3
 80077f6:	2013      	movs	r0, #19
 80077f8:	f000 f902 	bl	8007a00 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80077fc:	f7ff fdec 	bl	80073d8 <SUBGRF_GetPacketType>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10d      	bne.n	8007822 <SUBGRF_GetRxBufferStatus+0x3e>
 8007806:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <SUBGRF_GetRxBufferStatus+0x54>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	d108      	bne.n	8007822 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007810:	f240 7002 	movw	r0, #1794	; 0x702
 8007814:	f000 f878 	bl	8007908 <SUBGRF_ReadRegister>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e002      	b.n	8007828 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007822:	7b3a      	ldrb	r2, [r7, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007828:	7b7a      	ldrb	r2, [r7, #13]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	701a      	strb	r2, [r3, #0]
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000442 	.word	0x20000442

0800783c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	2203      	movs	r2, #3
 800784a:	4619      	mov	r1, r3
 800784c:	2014      	movs	r0, #20
 800784e:	f000 f8d7 	bl	8007a00 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007852:	f7ff fdc1 	bl	80073d8 <SUBGRF_GetPacketType>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <SUBGRF_GetPacketStatus+0x30>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d013      	beq.n	8007892 <SUBGRF_GetPacketStatus+0x56>
 800786a:	e02a      	b.n	80078c2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800786c:	7b3a      	ldrb	r2, [r7, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007872:	7b7b      	ldrb	r3, [r7, #13]
 8007874:	425b      	negs	r3, r3
 8007876:	105b      	asrs	r3, r3, #1
 8007878:	b25a      	sxtb	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	425b      	negs	r3, r3
 8007882:	105b      	asrs	r3, r3, #1
 8007884:	b25a      	sxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	609a      	str	r2, [r3, #8]
            break;
 8007890:	e020      	b.n	80078d4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007892:	7b3b      	ldrb	r3, [r7, #12]
 8007894:	425b      	negs	r3, r3
 8007896:	105b      	asrs	r3, r3, #1
 8007898:	b25a      	sxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800789e:	7b7b      	ldrb	r3, [r7, #13]
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	3302      	adds	r3, #2
 80078a4:	109b      	asrs	r3, r3, #2
 80078a6:	b25a      	sxtb	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	425b      	negs	r3, r3
 80078b0:	105b      	asrs	r3, r3, #1
 80078b2:	b25a      	sxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <SUBGRF_GetPacketStatus+0xa0>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	611a      	str	r2, [r3, #16]
            break;
 80078c0:	e008      	b.n	80078d4 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80078c2:	2214      	movs	r2, #20
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fa8e 	bl	8008de8 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	220f      	movs	r2, #15
 80078d0:	701a      	strb	r2, [r3, #0]
            break;
 80078d2:	bf00      	nop
    }
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000444 	.word	0x20000444

080078e0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	460a      	mov	r2, r1
 80078ea:	80fb      	strh	r3, [r7, #6]
 80078ec:	4613      	mov	r3, r2
 80078ee:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80078f0:	1d7a      	adds	r2, r7, #5
 80078f2:	88f9      	ldrh	r1, [r7, #6]
 80078f4:	2301      	movs	r3, #1
 80078f6:	4803      	ldr	r0, [pc, #12]	; (8007904 <SUBGRF_WriteRegister+0x24>)
 80078f8:	f7fc f8e4 	bl	8003ac4 <HAL_SUBGHZ_WriteRegisters>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000504 	.word	0x20000504

08007908 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007912:	f107 020f 	add.w	r2, r7, #15
 8007916:	88f9      	ldrh	r1, [r7, #6]
 8007918:	2301      	movs	r3, #1
 800791a:	4804      	ldr	r0, [pc, #16]	; (800792c <SUBGRF_ReadRegister+0x24>)
 800791c:	f7fc f931 	bl	8003b82 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000504 	.word	0x20000504

08007930 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	80fb      	strh	r3, [r7, #6]
 800793c:	4613      	mov	r3, r2
 800793e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007940:	88bb      	ldrh	r3, [r7, #4]
 8007942:	88f9      	ldrh	r1, [r7, #6]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	4803      	ldr	r0, [pc, #12]	; (8007954 <SUBGRF_WriteRegisters+0x24>)
 8007948:	f7fc f8bc 	bl	8003ac4 <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000504 	.word	0x20000504

08007958 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	80fb      	strh	r3, [r7, #6]
 8007964:	4613      	mov	r3, r2
 8007966:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007968:	88bb      	ldrh	r3, [r7, #4]
 800796a:	88f9      	ldrh	r1, [r7, #6]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	4803      	ldr	r0, [pc, #12]	; (800797c <SUBGRF_ReadRegisters+0x24>)
 8007970:	f7fc f907 	bl	8003b82 <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000504 	.word	0x20000504

08007980 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
 800798c:	4613      	mov	r3, r2
 800798e:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007990:	79bb      	ldrb	r3, [r7, #6]
 8007992:	b29b      	uxth	r3, r3
 8007994:	79f9      	ldrb	r1, [r7, #7]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4803      	ldr	r0, [pc, #12]	; (80079a8 <SUBGRF_WriteBuffer+0x28>)
 800799a:	f7fc fa06 	bl	8003daa <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000504 	.word	0x20000504

080079ac <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
 80079b8:	4613      	mov	r3, r2
 80079ba:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80079bc:	79bb      	ldrb	r3, [r7, #6]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	79f9      	ldrb	r1, [r7, #7]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4803      	ldr	r0, [pc, #12]	; (80079d4 <SUBGRF_ReadBuffer+0x28>)
 80079c6:	f7fc fa43 	bl	8003e50 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000504 	.word	0x20000504

080079d8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	71fb      	strb	r3, [r7, #7]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80079e8:	88bb      	ldrh	r3, [r7, #4]
 80079ea:	79f9      	ldrb	r1, [r7, #7]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	4803      	ldr	r0, [pc, #12]	; (80079fc <SUBGRF_WriteCommand+0x24>)
 80079f0:	f7fc f928 	bl	8003c44 <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000504 	.word	0x20000504

08007a00 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007a10:	88bb      	ldrh	r3, [r7, #4]
 8007a12:	79f9      	ldrb	r1, [r7, #7]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	4803      	ldr	r0, [pc, #12]	; (8007a24 <SUBGRF_ReadCommand+0x24>)
 8007a18:	f7fc f973 	bl	8003d02 <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000504 	.word	0x20000504

08007a28 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460a      	mov	r2, r1
 8007a32:	71fb      	strb	r3, [r7, #7]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007a3c:	79bb      	ldrb	r3, [r7, #6]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d10d      	bne.n	8007a5e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d104      	bne.n	8007a52 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007a4c:	2004      	movs	r0, #4
 8007a4e:	f000 f8df 	bl	8007c10 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d107      	bne.n	8007a68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e004      	b.n	8007a68 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007a5e:	79bb      	ldrb	r3, [r7, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 fc43 	bl	80012f6 <RBI_ConfigRFSwitch>
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007a82:	2301      	movs	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007a86:	f7f9 fc44 	bl	8001312 <RBI_GetTxConfig>
 8007a8a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d016      	beq.n	8007ac0 <SUBGRF_SetRfTxPower+0x48>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	dc16      	bgt.n	8007ac6 <SUBGRF_SetRfTxPower+0x4e>
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <SUBGRF_SetRfTxPower+0x2e>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d00a      	beq.n	8007aba <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007aa4:	e00f      	b.n	8007ac6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	dd02      	ble.n	8007ab4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	73fb      	strb	r3, [r7, #15]
            break;
 8007ab2:	e009      	b.n	8007ac8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
            break;
 8007ab8:	e006      	b.n	8007ac8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
            break;
 8007abe:	e003      	b.n	8007ac8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	73fb      	strb	r3, [r7, #15]
            break;
 8007ac4:	e000      	b.n	8007ac8 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007ac6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007ac8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fc8b 	bl	80073ec <SUBGRF_SetTxParams>

    return paSelect;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007ae4:	2301      	movs	r3, #1
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr
	...

08007af0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2001      	movs	r0, #1
 8007afe:	4798      	blx	r3
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000044c 	.word	0x2000044c

08007b0c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007b14:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2002      	movs	r0, #2
 8007b1a:	4798      	blx	r3
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	2000044c 	.word	0x2000044c

08007b28 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2040      	movs	r0, #64	; 0x40
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000044c 	.word	0x2000044c

08007b44 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d005      	beq.n	8007b66 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007b5a:	e00a      	b.n	8007b72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007b5c:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2080      	movs	r0, #128	; 0x80
 8007b62:	4798      	blx	r3
            break;
 8007b64:	e005      	b.n	8007b72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b6e:	4798      	blx	r3
            break;
 8007b70:	bf00      	nop
    }
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000044c 	.word	0x2000044c

08007b80 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b90:	4798      	blx	r3
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	2000044c 	.word	0x2000044c

08007ba0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2020      	movs	r0, #32
 8007bae:	4798      	blx	r3
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	2000044c 	.word	0x2000044c

08007bbc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007bc4:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2004      	movs	r0, #4
 8007bca:	4798      	blx	r3
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	2000044c 	.word	0x2000044c

08007bd8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007be0:	4b03      	ldr	r3, [pc, #12]	; (8007bf0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2008      	movs	r0, #8
 8007be6:	4798      	blx	r3
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	2000044c 	.word	0x2000044c

08007bf4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2010      	movs	r0, #16
 8007c02:	4798      	blx	r3
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	2000044c 	.word	0x2000044c

08007c10 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007c1a:	f7f9 fb88 	bl	800132e <RBI_IsDCDC>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d112      	bne.n	8007c4a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007c24:	f640 1023 	movw	r0, #2339	; 0x923
 8007c28:	f7ff fe6e 	bl	8007908 <SUBGRF_ReadRegister>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	f023 0306 	bic.w	r3, r3, #6
 8007c36:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007c38:	7bfa      	ldrb	r2, [r7, #15]
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	f640 1023 	movw	r0, #2339	; 0x923
 8007c46:	f7ff fe4b 	bl	80078e0 <SUBGRF_WriteRegister>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007c62:	231f      	movs	r3, #31
 8007c64:	e016      	b.n	8007c94 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	e00f      	b.n	8007c8c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007c70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d205      	bcs.n	8007c86 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4413      	add	r3, r2
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	e006      	b.n	8007c94 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b15      	cmp	r3, #21
 8007c90:	d9ec      	bls.n	8007c6c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8007c92:	e7fe      	b.n	8007c92 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	0800c5f0 	.word	0x0800c5f0

08007ca4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007cae:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <SUBGRF_GetCFO+0xe4>)
 8007cb0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8007cb2:	f640 0007 	movw	r0, #2055	; 0x807
 8007cb6:	f7ff fe27 	bl	8007908 <SUBGRF_ReadRegister>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007cbe:	7ffb      	ldrb	r3, [r7, #31]
 8007cc0:	08db      	lsrs	r3, r3, #3
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ccc:	4413      	add	r3, r2
 8007cce:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007cd2:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007cd4:	7ffb      	ldrb	r3, [r7, #31]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007cdc:	7fba      	ldrb	r2, [r7, #30]
 8007cde:	7f7b      	ldrb	r3, [r7, #29]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b28      	ldr	r3, [pc, #160]	; (8007d8c <SUBGRF_GetCFO+0xe8>)
 8007cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	2b07      	cmp	r3, #7
 8007d0c:	d802      	bhi.n	8007d14 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d802      	bhi.n	8007d28 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007d22:	2304      	movs	r3, #4
 8007d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007d28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007d34:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007d38:	f7ff fde6 	bl	8007908 <SUBGRF_ReadRegister>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d44:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8007d46:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007d4a:	f7ff fddd 	bl	8007908 <SUBGRF_ReadRegister>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8007d68:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007d6c:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	6a3a      	ldr	r2, [r7, #32]
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	11da      	asrs	r2, r3, #7
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	0c0a0804 	.word	0x0c0a0804
 8007d8c:	01e84800 	.word	0x01e84800

08007d90 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8007da2:	f04f 33ff 	mov.w	r3, #4294967295
 8007da6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007da8:	697b      	ldr	r3, [r7, #20]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8007dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dca:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8007e02:	2300      	movs	r3, #0
#endif
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8007e10:	2300      	movs	r3, #0
#endif
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	4603      	mov	r3, r0
 8007e22:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	460b      	mov	r3, r1
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8007e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e40:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8007e42:	697b      	ldr	r3, [r7, #20]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8007e4e:	b480      	push	{r7}
 8007e50:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8007e62:	bf00      	nop
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8007e6e:	bf00      	nop
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr

08007e76 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
	...

08007e8c <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8007e96:	2010      	movs	r0, #16
 8007e98:	f000 ff7a 	bl	8008d90 <malloc>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <list_new+0x24>
		perror("list_new()");
 8007ea6:	4818      	ldr	r0, [pc, #96]	; (8007f08 <list_new+0x7c>)
 8007ea8:	f001 fd44 	bl	8009934 <perror>
		return NULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e027      	b.n	8007f00 <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f000 f958 	bl	8008168 <list_node_new>
 8007eb8:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <list_new+0x3e>
		free(l);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 ff6d 	bl	8008da0 <free>
		return NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e01a      	b.n	8007f00 <list_new+0x74>
	}

	l->sentinel = sentinel;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	601a      	str	r2, [r3, #0]
	l->size = 0;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <list_new+0x66>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	e000      	b.n	8007ef4 <list_new+0x68>
 8007ef2:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <list_new+0x80>)
	l->compare = (compare == NULL)
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	60da      	str	r2, [r3, #12]

	return l;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	0800c108 	.word	0x0800c108
 8007f0c:	08008141 	.word	0x08008141

08007f10 <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 8007f22:	480e      	ldr	r0, [pc, #56]	; (8007f5c <list_insert+0x4c>)
 8007f24:	f000 f99b 	bl	800825e <list_debug>
		return NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e012      	b.n	8007f52 <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f89c 	bl	800806c <list_index>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f945 	bl	80081c8 <list_node_link>
 8007f3e:	6078      	str	r0, [r7, #4]
	if (n)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <list_insert+0x40>
		++self->size;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	605a      	str	r2, [r3, #4]
	return n;
 8007f50:	687b      	ldr	r3, [r7, #4]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800c114 	.word	0x0800c114

08007f60 <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f856 	bl	800801c <list_head>
 8007f70:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 8007f72:	e00e      	b.n	8007f92 <list_search+0x32>
		
		if (self->compare(data, n->data))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	68d2      	ldr	r2, [r2, #12]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	6838      	ldr	r0, [r7, #0]
 8007f80:	4798      	blx	r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <list_search+0x2c>
			return n;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	e00c      	b.n	8007fa6 <list_search+0x46>
		n = n->next;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f8c0 	bl	8008118 <list_end>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f083 0301 	eor.w	r3, r3, #1
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e7      	bne.n	8007f74 <list_search+0x14>
	}
	return NULL;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d103      	bne.n	8007fc8 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 8007fc0:	480b      	ldr	r0, [pc, #44]	; (8007ff0 <list_remove+0x40>)
 8007fc2:	f001 fcbf 	bl	8009944 <iprintf>
		return ;
 8007fc6:	e010      	b.n	8007fea <list_remove+0x3a>
	}

	if(node == NULL)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00c      	beq.n	8007fe8 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 8007fce:	6838      	ldr	r0, [r7, #0]
 8007fd0:	f000 f928 	bl	8008224 <list_node_unlink>
 8007fd4:	60f8      	str	r0, [r7, #12]
	if (n)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <list_remove+0x3a>
	{
		--self->size;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	1e5a      	subs	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]
 8007fe6:	e000      	b.n	8007fea <list_remove+0x3a>
		return ;
 8007fe8:	bf00      	nop
	
	}

}
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	0800c134 	.word	0x0800c134

08007ff4 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f876 	bl	80080f0 <list_size>
 8008004:	4603      	mov	r3, r0
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff ff80 	bl	8007f10 <list_insert>
 8008010:	4603      	mov	r3, r0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 800802a:	480e      	ldr	r0, [pc, #56]	; (8008064 <list_head+0x48>)
 800802c:	f000 f917 	bl	800825e <list_debug>
		return NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	e012      	b.n	800805a <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f86d 	bl	8008118 <list_end>
 800803e:	4603      	mov	r3, r0
 8008040:	f083 0301 	eor.w	r3, r3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 800804a:	4807      	ldr	r0, [pc, #28]	; (8008068 <list_head+0x4c>)
 800804c:	f000 f907 	bl	800825e <list_debug>
		return NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	e002      	b.n	800805a <list_head+0x3e>
	}

	return self->sentinel->next;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	0800c154 	.word	0x0800c154
 8008068:	0800c170 	.word	0x0800c170

0800806c <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f83a 	bl	80080f0 <list_size>
 800807c:	4603      	mov	r3, r0
 800807e:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	da03      	bge.n	800808e <list_index+0x22>
		pos += s;
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4413      	add	r3, r2
 800808c:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	0fda      	lsrs	r2, r3, #31
 8008096:	4413      	add	r3, r2
 8008098:	105b      	asrs	r3, r3, #1
 800809a:	461a      	mov	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	4293      	cmp	r3, r2
 80080a0:	dc11      	bgt.n	80080c6 <list_index+0x5a>
		n = list_head(self);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff ffba 	bl	800801c <list_head>
 80080a8:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	e005      	b.n	80080bc <list_index+0x50>
			n = n->next;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3301      	adds	r3, #1
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	dbf5      	blt.n	80080b0 <list_index+0x44>
 80080c4:	e00f      	b.n	80080e6 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e005      	b.n	80080de <list_index+0x72>
			n = n->prev;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3b01      	subs	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	dcf5      	bgt.n	80080d2 <list_index+0x66>
	}

	return n;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d104      	bne.n	8008108 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 80080fe:	4805      	ldr	r0, [pc, #20]	; (8008114 <list_size+0x24>)
 8008100:	f000 f8ad 	bl	800825e <list_debug>
		return 0;
 8008104:	2300      	movs	r3, #0
 8008106:	e001      	b.n	800810c <list_size+0x1c>
	}

	return self->size;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	0800c1d4 	.word	0x0800c1d4

08008118 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <list_end+0x18>
		list_debug("list_end(): n was NULL");
 8008126:	4805      	ldr	r0, [pc, #20]	; (800813c <list_end+0x24>)
 8008128:	f000 f899 	bl	800825e <list_debug>
		return false;
 800812c:	2300      	movs	r3, #0
 800812e:	e001      	b.n	8008134 <list_end+0x1c>
	}

	return n->sentinel;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7a1b      	ldrb	r3, [r3, #8]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	0800c1f0 	.word	0x0800c1f0

08008140 <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7f8 f817 	bl	8000180 <strcmp>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 8008172:	2010      	movs	r0, #16
 8008174:	f000 fe0c 	bl	8008d90 <malloc>
 8008178:	4603      	mov	r3, r0
 800817a:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <list_node_new+0x24>
		perror("list_node_new()");
 8008182:	4810      	ldr	r0, [pc, #64]	; (80081c4 <list_node_new+0x5c>)
 8008184:	f001 fbd6 	bl	8009934 <perror>
		return NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	e017      	b.n	80081bc <list_node_new+0x54>
	}

	n->sentinel = false;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 800819e:	6838      	ldr	r0, [r7, #0]
 80081a0:	f000 fdf6 	bl	8008d90 <malloc>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fe09 	bl	8008dcc <memcpy>
	return n;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	0800c27c 	.word	0x0800c27c

080081c8 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 80081d8:	4810      	ldr	r0, [pc, #64]	; (800821c <list_node_link+0x54>)
 80081da:	f000 f840 	bl	800825e <list_debug>
		return NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	e017      	b.n	8008212 <list_node_link+0x4a>
	}

	if (c == NULL) {
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 80081e8:	480d      	ldr	r0, [pc, #52]	; (8008220 <list_node_link+0x58>)
 80081ea:	f000 f838 	bl	800825e <list_debug>
		return NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e00f      	b.n	8008212 <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]

	a->next = b;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
	b->prev = a;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	605a      	str	r2, [r3, #4]
	b->next = c;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	601a      	str	r2, [r3, #0]
	c->prev = b;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]

	return b;
 8008210:	687b      	ldr	r3, [r7, #4]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	0800c28c 	.word	0x0800c28c
 8008220:	0800c2ac 	.word	0x0800c2ac

08008224 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ff73 	bl	8008118 <list_end>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <list_node_unlink+0x18>
		return NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	e00c      	b.n	8008256 <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60bb      	str	r3, [r7, #8]

	a->next = c;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	601a      	str	r2, [r3, #0]
	c->prev = a;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	605a      	str	r2, [r3, #4]

	return b;
 8008254:	687b      	ldr	r3, [r7, #4]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <list_debug>:

static void list_debug(const char *format, ...)
{
 800825e:	b40f      	push	{r0, r1, r2, r3}
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	b004      	add	sp, #16
 800826e:	4770      	bx	lr

08008270 <find_packet_by_Id>:

u8  device_address         = 0xFF ;


bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	789b      	ldrb	r3, [r3, #2]
 8008286:	461a      	mov	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <find_packet_by_Id+0x22>
    {
        return true ;
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 8008292:	2300      	movs	r3, #0
    }
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	789b      	ldrb	r3, [r3, #2]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d101      	bne.n	80082c0 <rx_find_by_id+0x22>
	{
		return true ;
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <rx_find_by_id+0x24>
	}
	else{
		return false ;
 80082c0:	2300      	movs	r3, #0
	}
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <ll_init>:

int ll_init(u8 addr)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 80082d6:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <ll_init+0x38>)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 80082dc:	490a      	ldr	r1, [pc, #40]	; (8008308 <ll_init+0x3c>)
 80082de:	480b      	ldr	r0, [pc, #44]	; (800830c <ll_init+0x40>)
 80082e0:	f7ff fdd4 	bl	8007e8c <list_new>
 80082e4:	4603      	mov	r3, r0
 80082e6:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <ll_init+0x44>)
 80082e8:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 80082ea:	4907      	ldr	r1, [pc, #28]	; (8008308 <ll_init+0x3c>)
 80082ec:	4809      	ldr	r0, [pc, #36]	; (8008314 <ll_init+0x48>)
 80082ee:	f7ff fdcd 	bl	8007e8c <list_new>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4a08      	ldr	r2, [pc, #32]	; (8008318 <ll_init+0x4c>)
 80082f6:	6013      	str	r3, [r2, #0]

	return 0 ;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	2000000a 	.word	0x2000000a
 8008308:	08008da1 	.word	0x08008da1
 800830c:	08008271 	.word	0x08008271
 8008310:	200005e8 	.word	0x200005e8
 8008314:	0800829f 	.word	0x0800829f
 8008318:	200005e4 	.word	0x200005e4

0800831c <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b091      	sub	sp, #68	; 0x44
 8008320:	af04      	add	r7, sp, #16
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	4603      	mov	r3, r0
 8008326:	71fb      	strb	r3, [r7, #7]
 8008328:	460b      	mov	r3, r1
 800832a:	71bb      	strb	r3, [r7, #6]
 800832c:	4613      	mov	r3, r2
 800832e:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <ll_send_packet+0x80>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff fedb 	bl	80080f0 <list_size>
 800833a:	4603      	mov	r3, r0
 800833c:	2b09      	cmp	r3, #9
 800833e:	d902      	bls.n	8008346 <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 8008340:	f06f 0309 	mvn.w	r3, #9
 8008344:	e026      	b.n	8008394 <ll_send_packet+0x78>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 8008346:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <ll_send_packet+0x84>)
 8008348:	7819      	ldrb	r1, [r3, #0]
 800834a:	79bc      	ldrb	r4, [r7, #6]
 800834c:	79fa      	ldrb	r2, [r7, #7]
 800834e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008352:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	797b      	ldrb	r3, [r7, #5]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4623      	mov	r3, r4
 8008362:	f000 faed 	bl	8008940 <packet>
	
	tmp_holder.packet = tmp ;
 8008366:	f107 030c 	add.w	r3, r7, #12
 800836a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800836e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008370:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008374:	2300      	movs	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 8008378:	4b08      	ldr	r3, [pc, #32]	; (800839c <ll_send_packet+0x80>)
 800837a:	681c      	ldr	r4, [r3, #0]
 800837c:	f107 030c 	add.w	r3, r7, #12
 8008380:	2118      	movs	r1, #24
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fef0 	bl	8008168 <list_node_new>
 8008388:	4603      	mov	r3, r0
 800838a:	4619      	mov	r1, r3
 800838c:	4620      	mov	r0, r4
 800838e:	f7ff fe31 	bl	8007ff4 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3734      	adds	r7, #52	; 0x34
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}
 800839c:	200005e8 	.word	0x200005e8
 80083a0:	2000000a 	.word	0x2000000a

080083a4 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	4603      	mov	r3, r0
 80083ac:	460a      	mov	r2, r1
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	4613      	mov	r3, r2
 80083b2:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0);
 80083b4:	79ba      	ldrb	r2, [r7, #6]
 80083b6:	79f8      	ldrb	r0, [r7, #7]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	2300      	movs	r3, #0
 80083be:	2102      	movs	r1, #2
 80083c0:	f7ff ffac 	bl	800831c <ll_send_packet>
 80083c4:	4603      	mov	r3, r0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af02      	add	r7, sp, #8
 80083d4:	4603      	mov	r3, r0
 80083d6:	460a      	mov	r2, r1
 80083d8:	71fb      	strb	r3, [r7, #7]
 80083da:	4613      	mov	r3, r2
 80083dc:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0);
 80083de:	79ba      	ldrb	r2, [r7, #6]
 80083e0:	79f8      	ldrb	r0, [r7, #7]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2300      	movs	r3, #0
 80083e8:	2103      	movs	r1, #3
 80083ea:	f7ff ff97 	bl	800831c <ll_send_packet>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len) 
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	4603      	mov	r3, r0
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 8008406:	f7f8 fdf3 	bl	8000ff0 <sys_random>
 800840a:	4603      	mov	r3, r0
 800840c:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	7dfa      	ldrb	r2, [r7, #23]
 8008414:	7bf8      	ldrb	r0, [r7, #15]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2101      	movs	r1, #1
 800841c:	f7ff ff7e 	bl	800831c <ll_send_packet>
 8008420:	4603      	mov	r3, r0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <ll_transmit>:
{
	return list_size(Tx_packet_list)  ;
}

void ll_transmit(void) 
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 8008432:	4b4e      	ldr	r3, [pc, #312]	; (800856c <ll_transmit+0x140>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fe5a 	bl	80080f0 <list_size>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 808f 	beq.w	8008562 <ll_transmit+0x136>
		return ;
	// in case there is  data 

	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
 8008444:	4b49      	ldr	r3, [pc, #292]	; (800856c <ll_transmit+0x140>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fe51 	bl	80080f0 <list_size>
 800844e:	4603      	mov	r3, r0
 8008450:	4619      	mov	r1, r3
 8008452:	4847      	ldr	r0, [pc, #284]	; (8008570 <ll_transmit+0x144>)
 8008454:	f001 fa76 	bl	8009944 <iprintf>
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 8008458:	e068      	b.n	800852c <ll_transmit+0x100>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 800845a:	4b44      	ldr	r3, [pc, #272]	; (800856c <ll_transmit+0x140>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a45      	ldr	r2, [pc, #276]	; (8008574 <ll_transmit+0x148>)
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fe01 	bl	800806c <list_index>
 800846a:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	60fb      	str	r3, [r7, #12]
		debug_packet(pack) ;
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 faec 	bl	8008a54 <debug_packet>

		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fc50 	bl	8008d22 <packet_get_size>
 8008482:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fc82 	bl	8008d90 <malloc>
 800848c:	4603      	mov	r3, r0
 800848e:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fb4a 	bl	8008b2c <packet_serialize>

		//send to network
		Radio.Send(buff , packet_size) ;
 8008498:	4b37      	ldr	r3, [pc, #220]	; (8008578 <ll_transmit+0x14c>)
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	4611      	mov	r1, r2
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3

		//increment number of transmition

		holder->number_of_transmition++ ;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	615a      	str	r2, [r3, #20]

		free(buff) ;
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc75 	bl	8008da0 <free>
		
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */

		if(pack->type == PACK_TYPE_NANK)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	78db      	ldrb	r3, [r3, #3]
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d113      	bne.n	80084e6 <ll_transmit+0xba>
		{
			list_remove(Tx_packet_list ,node) ;
 80084be:	4b2b      	ldr	r3, [pc, #172]	; (800856c <ll_transmit+0x140>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fd73 	bl	8007fb0 <list_remove>
			free(pack->payload) ;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fc66 	bl	8008da0 <free>
			free(pack) ;
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fc63 	bl	8008da0 <free>
			free(holder);
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 fc60 	bl	8008da0 <free>
			free(node) ;
 80084e0:	6978      	ldr	r0, [r7, #20]
 80084e2:	f000 fc5d 	bl	8008da0 <free>
		}


		network_transmit_index++;
 80084e6:	4b23      	ldr	r3, [pc, #140]	; (8008574 <ll_transmit+0x148>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	4a21      	ldr	r2, [pc, #132]	; (8008574 <ll_transmit+0x148>)
 80084ee:	6013      	str	r3, [r2, #0]
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// small delay or wait for TxDone interrupt
		sys_delay(100) ;
 80084f0:	2064      	movs	r0, #100	; 0x64
 80084f2:	f7f8 fd6a 	bl	8000fca <sys_delay>

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	dd16      	ble.n	800852c <ll_transmit+0x100>
		{
			//free memory
			list_remove(Tx_packet_list , node) ;
 80084fe:	4b1b      	ldr	r3, [pc, #108]	; (800856c <ll_transmit+0x140>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fd53 	bl	8007fb0 <list_remove>
			free(pack->payload) ;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fc46 	bl	8008da0 <free>
			free(pack) ;
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fc43 	bl	8008da0 <free>
			free(holder);
 800851a:	6938      	ldr	r0, [r7, #16]
 800851c:	f000 fc40 	bl	8008da0 <free>
			free(node);
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f000 fc3d 	bl	8008da0 <free>
			printf("packet removed \ndeallocating memory\n");
 8008526:	4815      	ldr	r0, [pc, #84]	; (800857c <ll_transmit+0x150>)
 8008528:	f001 faa6 	bl	8009a78 <puts>
	while(network_transmit_index < list_size(Tx_packet_list))
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <ll_transmit+0x140>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fddd 	bl	80080f0 <list_size>
 8008536:	4602      	mov	r2, r0
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <ll_transmit+0x148>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d88c      	bhi.n	800845a <ll_transmit+0x2e>
		}
	}
	printf("\nNetwork Transmit Done\n");
 8008540:	480f      	ldr	r0, [pc, #60]	; (8008580 <ll_transmit+0x154>)
 8008542:	f001 fa99 	bl	8009a78 <puts>

	if(network_transmit_index >= list_size(Tx_packet_list))
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <ll_transmit+0x140>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff fdd0 	bl	80080f0 <list_size>
 8008550:	4602      	mov	r2, r0
 8008552:	4b08      	ldr	r3, [pc, #32]	; (8008574 <ll_transmit+0x148>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d804      	bhi.n	8008564 <ll_transmit+0x138>
	{
		network_transmit_index = 0 ;	
 800855a:	4b06      	ldr	r3, [pc, #24]	; (8008574 <ll_transmit+0x148>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e000      	b.n	8008564 <ll_transmit+0x138>
		return ;
 8008562:	bf00      	nop
	}
}
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200005e8 	.word	0x200005e8
 8008570:	0800c2cc 	.word	0x0800c2cc
 8008574:	20000450 	.word	0x20000450
 8008578:	0800c568 	.word	0x0800c568
 800857c:	0800c2f4 	.word	0x0800c2f4
 8008580:	0800c318 	.word	0x0800c318

08008584 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b08f      	sub	sp, #60	; 0x3c
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 800858e:	f107 0320 	add.w	r3, r7, #32
 8008592:	461a      	mov	r2, r3
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fb24 	bl	8008be4 <packet_desirialize>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d155      	bne.n	800864e <ll_receive+0xca>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 80085a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80085a6:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <ll_receive+0xe0>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d152      	bne.n	8008654 <ll_receive+0xd0>
 80085ae:	4b2e      	ldr	r3, [pc, #184]	; (8008668 <ll_receive+0xe4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fd9c 	bl	80080f0 <list_size>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b09      	cmp	r3, #9
 80085bc:	d84a      	bhi.n	8008654 <ll_receive+0xd0>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 80085be:	4b2a      	ldr	r3, [pc, #168]	; (8008668 <ll_receive+0xe4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd94 	bl	80080f0 <list_size>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d024      	beq.n	8008618 <ll_receive+0x94>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 80085ce:	4b26      	ldr	r3, [pc, #152]	; (8008668 <ll_receive+0xe4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fcc1 	bl	8007f60 <list_search>
 80085de:	6378      	str	r0, [r7, #52]	; 0x34
				if(n != NULL )
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d018      	beq.n	8008618 <ll_receive+0x94>
				{
					packet_holder_t * holder = n->data ;
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
					packet_t * pack = (packet_t*) &(holder)->packet ;
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	78da      	ldrb	r2, [r3, #3]
 80085f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d10d      	bne.n	8008618 <ll_receive+0x94>
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	791a      	ldrb	r2, [r3, #4]
 8008600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008604:	429a      	cmp	r2, r3
 8008606:	d107      	bne.n	8008618 <ll_receive+0x94>
					{
						//duplication
						printf("duplication \n");
 8008608:	4818      	ldr	r0, [pc, #96]	; (800866c <ll_receive+0xe8>)
 800860a:	f001 fa35 	bl	8009a78 <puts>
						free(p.payload);
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fbc5 	bl	8008da0 <free>
 8008616:	e022      	b.n	800865e <ll_receive+0xda>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 8008618:	f107 0308 	add.w	r3, r7, #8
 800861c:	f107 0220 	add.w	r2, r7, #32
 8008620:	ca07      	ldmia	r2, {r0, r1, r2}
 8008622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 8008626:	f7f8 fcdb 	bl	8000fe0 <sys_get_tick>
 800862a:	4603      	mov	r3, r0
 800862c:	61bb      	str	r3, [r7, #24]
			packet_holder.number_of_transmition = 0 ;
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <ll_receive+0xe4>)
 8008634:	681c      	ldr	r4, [r3, #0]
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	2118      	movs	r1, #24
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd93 	bl	8008168 <list_node_new>
 8008642:	4603      	mov	r3, r0
 8008644:	4619      	mov	r1, r3
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff fcd4 	bl	8007ff4 <list_push_back>
 800864c:	e002      	b.n	8008654 <ll_receive+0xd0>
		}
	}

	else
	{
		printf("packet corrupt\n");
 800864e:	4808      	ldr	r0, [pc, #32]	; (8008670 <ll_receive+0xec>)
 8008650:	f001 fa12 	bl	8009a78 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <ll_receive+0xf0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a06      	ldr	r2, [pc, #24]	; (8008674 <ll_receive+0xf0>)
 800865c:	6013      	str	r3, [r2, #0]

}
 800865e:	373c      	adds	r7, #60	; 0x3c
 8008660:	46bd      	mov	sp, r7
 8008662:	bd90      	pop	{r4, r7, pc}
 8008664:	2000000a 	.word	0x2000000a
 8008668:	200005e4 	.word	0x200005e4
 800866c:	0800c330 	.word	0x0800c330
 8008670:	0800c340 	.word	0x0800c340
 8008674:	20000458 	.word	0x20000458

08008678 <ll_process_received>:

void ll_process_received()
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 800867e:	e0c4      	b.n	800880a <ll_process_received+0x192>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8008680:	4b70      	ldr	r3, [pc, #448]	; (8008844 <ll_process_received+0x1cc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a70      	ldr	r2, [pc, #448]	; (8008848 <ll_process_received+0x1d0>)
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fcee 	bl	800806c <list_index>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	61fb      	str	r3, [r7, #28]

		//debug_packet(packet) ;


		if(packet->type == PACK_TYPE_DATA)
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	78db      	ldrb	r3, [r3, #3]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d119      	bne.n	80086d8 <ll_process_received+0x60>
		{
			// ASK packet should be sent ,the data will be read later
			// by recv_from function ,also packet should be removed after certain time
			printf("data packet\n");
 80086a4:	4869      	ldr	r0, [pc, #420]	; (800884c <ll_process_received+0x1d4>)
 80086a6:	f001 f9e7 	bl	8009a78 <puts>

			//number_of_transmition used to assure that a ASK has been send to confirm data recv
			//data packet will be removed by ll_get_recv_from
			if( holder->number_of_transmition == 0)
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f040 809c 	bne.w	80087ec <ll_process_received+0x174>
			{
				printf("ASK has been send for id = %d\n" , packet->id);
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	789b      	ldrb	r3, [r3, #2]
 80086b8:	4619      	mov	r1, r3
 80086ba:	4865      	ldr	r0, [pc, #404]	; (8008850 <ll_process_received+0x1d8>)
 80086bc:	f001 f942 	bl	8009944 <iprintf>
				ll_send_ASK(packet->src , packet->id) ;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	781a      	ldrb	r2, [r3, #0]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	789b      	ldrb	r3, [r3, #2]
 80086c8:	4619      	mov	r1, r3
 80086ca:	4610      	mov	r0, r2
 80086cc:	f7ff fe6a 	bl	80083a4 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2201      	movs	r2, #1
 80086d4:	615a      	str	r2, [r3, #20]
 80086d6:	e089      	b.n	80087ec <ll_process_received+0x174>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	78db      	ldrb	r3, [r3, #3]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d148      	bne.n	8008772 <ll_process_received+0xfa>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 80086e0:	4b5c      	ldr	r3, [pc, #368]	; (8008854 <ll_process_received+0x1dc>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	789b      	ldrb	r3, [r3, #2]
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7ff fc38 	bl	8007f60 <list_search>
 80086f0:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d117      	bne.n	8008728 <ll_process_received+0xb0>
			{
				printf("\nDROP ASK PACKET\n");
 80086f8:	4857      	ldr	r0, [pc, #348]	; (8008858 <ll_process_received+0x1e0>)
 80086fa:	f001 f9bd 	bl	8009a78 <puts>
				//drop the ASK packet from Rx list
				list_remove(Rx_packet_list , n);
 80086fe:	4b51      	ldr	r3, [pc, #324]	; (8008844 <ll_process_received+0x1cc>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fc53 	bl	8007fb0 <list_remove>

				//free memory
				free(packet->payload) ;
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fb46 	bl	8008da0 <free>
				free(packet) ;
 8008714:	69f8      	ldr	r0, [r7, #28]
 8008716:	f000 fb43 	bl	8008da0 <free>
				free(holder) ;
 800871a:	6a38      	ldr	r0, [r7, #32]
 800871c:	f000 fb40 	bl	8008da0 <free>
				free(n);
 8008720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008722:	f000 fb3d 	bl	8008da0 <free>
 8008726:	e061      	b.n	80087ec <ll_process_received+0x174>
			}

			//in case of match in tx list ,send a NANK and remove the data packet from tx list
			else
			{
				printf("ASK match data\n");
 8008728:	484c      	ldr	r0, [pc, #304]	; (800885c <ll_process_received+0x1e4>)
 800872a:	f001 f9a5 	bl	8009a78 <puts>
				//send NANK
				ll_send_NANK(packet->src , packet->id) ;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	781a      	ldrb	r2, [r3, #0]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	789b      	ldrb	r3, [r3, #2]
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7ff fe48 	bl	80083ce <ll_send_NANK>
				//remove data from Tx list to do not get send again

				list_remove( Tx_packet_list ,tx_data_node) ;
 800873e:	4b45      	ldr	r3, [pc, #276]	; (8008854 <ll_process_received+0x1dc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68f9      	ldr	r1, [r7, #12]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fc33 	bl	8007fb0 <list_remove>

				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	607b      	str	r3, [r7, #4]
				//free memory
				free(pack_p->payload) ;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fb21 	bl	8008da0 <free>
				free(pack_p) ;
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb1e 	bl	8008da0 <free>
				free(h);
 8008764:	68b8      	ldr	r0, [r7, #8]
 8008766:	f000 fb1b 	bl	8008da0 <free>
				free(tx_data_node) ;
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fb18 	bl	8008da0 <free>
 8008770:	e03c      	b.n	80087ec <ll_process_received+0x174>
			}


		}

		else if(packet->type == PACK_TYPE_NANK)
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	78db      	ldrb	r3, [r3, #3]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d138      	bne.n	80087ec <ll_process_received+0x174>
		{
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
			printf("\nNANK RECV\n");
 800877a:	4839      	ldr	r0, [pc, #228]	; (8008860 <ll_process_received+0x1e8>)
 800877c:	f001 f97c 	bl	8009a78 <puts>

			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008780:	4b34      	ldr	r3, [pc, #208]	; (8008854 <ll_process_received+0x1dc>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	789b      	ldrb	r3, [r3, #2]
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f7ff fbe8 	bl	8007f60 <list_search>
 8008790:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01a      	beq.n	80087ce <ll_process_received+0x156>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d111      	bne.n	80087ce <ll_process_received+0x156>
				{
					//remove the ask packet from
					printf("transmition end\n");
 80087aa:	482e      	ldr	r0, [pc, #184]	; (8008864 <ll_process_received+0x1ec>)
 80087ac:	f001 f964 	bl	8009a78 <puts>

					list_remove(Tx_packet_list , tx_ask_node) ;
 80087b0:	4b28      	ldr	r3, [pc, #160]	; (8008854 <ll_process_received+0x1dc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69b9      	ldr	r1, [r7, #24]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fbfa 	bl	8007fb0 <list_remove>

					//release memory

					free(ask_packet);
 80087bc:	6938      	ldr	r0, [r7, #16]
 80087be:	f000 faef 	bl	8008da0 <free>
					free(p_holder) ;
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f000 faec 	bl	8008da0 <free>
					free(tx_ask_node) ;
 80087c8:	69b8      	ldr	r0, [r7, #24]
 80087ca:	f000 fae9 	bl	8008da0 <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 80087ce:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <ll_process_received+0x1cc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fbeb 	bl	8007fb0 <list_remove>
			free(packet);
 80087da:	69f8      	ldr	r0, [r7, #28]
 80087dc:	f000 fae0 	bl	8008da0 <free>
			free(holder);
 80087e0:	6a38      	ldr	r0, [r7, #32]
 80087e2:	f000 fadd 	bl	8008da0 <free>
			free(n);
 80087e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087e8:	f000 fada 	bl	8008da0 <free>
		}

		rx_packet_index++;
 80087ec:	4b16      	ldr	r3, [pc, #88]	; (8008848 <ll_process_received+0x1d0>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4a15      	ldr	r2, [pc, #84]	; (8008848 <ll_process_received+0x1d0>)
 80087f4:	6013      	str	r3, [r2, #0]

		printf("rx list size %d\n",list_size(Rx_packet_list)) ;
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <ll_process_received+0x1cc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fc78 	bl	80080f0 <list_size>
 8008800:	4603      	mov	r3, r0
 8008802:	4619      	mov	r1, r3
 8008804:	4818      	ldr	r0, [pc, #96]	; (8008868 <ll_process_received+0x1f0>)
 8008806:	f001 f89d 	bl	8009944 <iprintf>
	while(list_size(Rx_packet_list) > rx_packet_index)
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <ll_process_received+0x1cc>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff fc6e 	bl	80080f0 <list_size>
 8008814:	4602      	mov	r2, r0
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <ll_process_received+0x1d0>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	f63f af30 	bhi.w	8008680 <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index > list_size(Rx_packet_list))
 8008820:	4b08      	ldr	r3, [pc, #32]	; (8008844 <ll_process_received+0x1cc>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fc63 	bl	80080f0 <list_size>
 800882a:	4602      	mov	r2, r0
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <ll_process_received+0x1d0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d202      	bcs.n	800883a <ll_process_received+0x1c2>
	{
		rx_packet_index = 0;
 8008834:	4b04      	ldr	r3, [pc, #16]	; (8008848 <ll_process_received+0x1d0>)
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
	}

}
 800883a:	bf00      	nop
 800883c:	3728      	adds	r7, #40	; 0x28
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200005e4 	.word	0x200005e4
 8008848:	20000454 	.word	0x20000454
 800884c:	0800c350 	.word	0x0800c350
 8008850:	0800c35c 	.word	0x0800c35c
 8008854:	200005e8 	.word	0x200005e8
 8008858:	0800c37c 	.word	0x0800c37c
 800885c:	0800c390 	.word	0x0800c390
 8008860:	0800c3a0 	.word	0x0800c3a0
 8008864:	0800c3ac 	.word	0x0800c3ac
 8008868:	0800c3bc 	.word	0x0800c3bc

0800886c <ll_get_recv_from>:

int  ll_get_recv_from(u8 src ,u8 *data )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	71fb      	strb	r3, [r7, #7]


	int rx_list_size = list_size(Rx_packet_list) ;
 8008878:	4b2f      	ldr	r3, [pc, #188]	; (8008938 <ll_get_recv_from+0xcc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fc37 	bl	80080f0 <list_size>
 8008882:	4603      	mov	r3, r0
 8008884:	61bb      	str	r3, [r7, #24]



	if(rx_list_size == 0)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <ll_get_recv_from+0x24>
		return 0 ;
 800888c:	2300      	movs	r3, #0
 800888e:	e04e      	b.n	800892e <ll_get_recv_from+0xc2>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e046      	b.n	8008924 <ll_get_recv_from+0xb8>
	{
		node = list_index(Rx_packet_list , i) ;
 8008896:	4b28      	ldr	r3, [pc, #160]	; (8008938 <ll_get_recv_from+0xcc>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69f9      	ldr	r1, [r7, #28]
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fbe5 	bl	800806c <list_index>
 80088a2:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	60fb      	str	r3, [r7, #12]

		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	78db      	ldrb	r3, [r3, #3]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d133      	bne.n	800891e <ll_get_recv_from+0xb2>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	79fa      	ldrb	r2, [r7, #7]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d12e      	bne.n	800891e <ll_get_recv_from+0xb2>
		{
			int data_length =  pack->payload_length ;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	791b      	ldrb	r3, [r3, #4]
 80088c4:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f000 fa7c 	bl	8008dcc <memcpy>

			if( holder->number_of_transmition == 0)
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <ll_get_recv_from+0x86>
			{
				printf("ASK send From ll_get_recv_from\n");
 80088dc:	4817      	ldr	r0, [pc, #92]	; (800893c <ll_get_recv_from+0xd0>)
 80088de:	f001 f8cb 	bl	8009a78 <puts>
				ll_send_ASK(pack->src , pack->id) ;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	789b      	ldrb	r3, [r3, #2]
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7ff fd59 	bl	80083a4 <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <ll_get_recv_from+0xcc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fb59 	bl	8007fb0 <list_remove>
			free(pack->payload) ;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fa4c 	bl	8008da0 <free>
			free(pack) ;
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fa49 	bl	8008da0 <free>
			free(holder) ;
 800890e:	6938      	ldr	r0, [r7, #16]
 8008910:	f000 fa46 	bl	8008da0 <free>
			free(node) ;
 8008914:	6978      	ldr	r0, [r7, #20]
 8008916:	f000 fa43 	bl	8008da0 <free>
			return data_length ;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	e007      	b.n	800892e <ll_get_recv_from+0xc2>
	for(int i = 0 ; i < rx_list_size ; i++)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	3301      	adds	r3, #1
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	429a      	cmp	r2, r3
 800892a:	dbb4      	blt.n	8008896 <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200005e4 	.word	0x200005e4
 800893c:	0800c3d0 	.word	0x0800c3d0

08008940 <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4603      	mov	r3, r0
 8008950:	70fb      	strb	r3, [r7, #3]
 8008952:	460b      	mov	r3, r1
 8008954:	70bb      	strb	r3, [r7, #2]
 8008956:	4613      	mov	r3, r2
 8008958:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f819 	bl	8008996 <packet_set_src>
	packet_set_dest(pack  , dest) ;
 8008964:	78bb      	ldrb	r3, [r7, #2]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f822 	bl	80089b2 <packet_set_dest>
	packet_set_type(pack , type );
 800896e:	787b      	ldrb	r3, [r7, #1]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f82b 	bl	80089ce <packet_set_type>
	packet_set_id(pack ,id) ;
 8008978:	7c3b      	ldrb	r3, [r7, #16]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f85a 	bl	8008a36 <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 8008982:	7e3b      	ldrb	r3, [r7, #24]
 8008984:	461a      	mov	r2, r3
 8008986:	6979      	ldr	r1, [r7, #20]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f82e 	bl	80089ea <packet_set_payload>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	701a      	strb	r2, [r3, #0]
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr

080089b2 <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	705a      	strb	r2, [r3, #1]
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	70da      	strb	r2, [r3, #3]
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr

080089ea <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d016      	beq.n	8008a2a <packet_set_payload+0x40>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d013      	beq.n	8008a2a <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 f9c3 	bl	8008d90 <malloc>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f9d6 	bl	8008dcc <memcpy>
		pack->payload_length = len ;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	711a      	strb	r2, [r3, #4]
		return ;
 8008a28:	e002      	b.n	8008a30 <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	711a      	strb	r2, [r3, #4]
	
}
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	709a      	strb	r2, [r3, #2]
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr
	...

08008a54 <debug_packet>:

void debug_packet(packet_t * pack)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	printf("PAcket :\n");
 8008a5c:	4829      	ldr	r0, [pc, #164]	; (8008b04 <debug_packet+0xb0>)
 8008a5e:	f001 f80b 	bl	8009a78 <puts>
	printf("src  ->%d\n" , pack->src);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	4619      	mov	r1, r3
 8008a68:	4827      	ldr	r0, [pc, #156]	; (8008b08 <debug_packet+0xb4>)
 8008a6a:	f000 ff6b 	bl	8009944 <iprintf>
	printf("dest ->%d\n" , pack->dest);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	785b      	ldrb	r3, [r3, #1]
 8008a72:	4619      	mov	r1, r3
 8008a74:	4825      	ldr	r0, [pc, #148]	; (8008b0c <debug_packet+0xb8>)
 8008a76:	f000 ff65 	bl	8009944 <iprintf>
	printf("id   ->%d\n" , pack->id) ;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	789b      	ldrb	r3, [r3, #2]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4823      	ldr	r0, [pc, #140]	; (8008b10 <debug_packet+0xbc>)
 8008a82:	f000 ff5f 	bl	8009944 <iprintf>
	if(pack->type == PACK_TYPE_DATA)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	78db      	ldrb	r3, [r3, #3]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d103      	bne.n	8008a96 <debug_packet+0x42>
	{
		printf("packet type data\n") ;
 8008a8e:	4821      	ldr	r0, [pc, #132]	; (8008b14 <debug_packet+0xc0>)
 8008a90:	f000 fff2 	bl	8009a78 <puts>
 8008a94:	e012      	b.n	8008abc <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_ASK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	78db      	ldrb	r3, [r3, #3]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d103      	bne.n	8008aa6 <debug_packet+0x52>
	{
		printf("packet type ask\n") ;
 8008a9e:	481e      	ldr	r0, [pc, #120]	; (8008b18 <debug_packet+0xc4>)
 8008aa0:	f000 ffea 	bl	8009a78 <puts>
 8008aa4:	e00a      	b.n	8008abc <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_NANK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	78db      	ldrb	r3, [r3, #3]
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d103      	bne.n	8008ab6 <debug_packet+0x62>
	{
		printf("packet type nank\n") ;
 8008aae:	481b      	ldr	r0, [pc, #108]	; (8008b1c <debug_packet+0xc8>)
 8008ab0:	f000 ffe2 	bl	8009a78 <puts>
 8008ab4:	e002      	b.n	8008abc <debug_packet+0x68>
	}
	else{
		printf("packet type not defined\n") ;
 8008ab6:	481a      	ldr	r0, [pc, #104]	; (8008b20 <debug_packet+0xcc>)
 8008ab8:	f000 ffde 	bl	8009a78 <puts>
	}
	
	
	printf("packet length :%d\n" , pack->payload_length );
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4818      	ldr	r0, [pc, #96]	; (8008b24 <debug_packet+0xd0>)
 8008ac4:	f000 ff3e 	bl	8009944 <iprintf>
	printf("payload :");
 8008ac8:	4817      	ldr	r0, [pc, #92]	; (8008b28 <debug_packet+0xd4>)
 8008aca:	f000 ff3b 	bl	8009944 <iprintf>
	for(int i = 0 ; i<pack->payload_length ;i++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	e00a      	b.n	8008aea <debug_packet+0x96>
	{
		printf("%c" , pack->payload[i]);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 ff48 	bl	8009974 <putchar>
	for(int i = 0 ; i<pack->payload_length ;i++)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	791b      	ldrb	r3, [r3, #4]
 8008aee:	461a      	mov	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4293      	cmp	r3, r2
 8008af4:	dbee      	blt.n	8008ad4 <debug_packet+0x80>
	}
	printf("\n");
 8008af6:	200a      	movs	r0, #10
 8008af8:	f000 ff3c 	bl	8009974 <putchar>
	
}
 8008afc:	bf00      	nop
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	0800c3f0 	.word	0x0800c3f0
 8008b08:	0800c3fc 	.word	0x0800c3fc
 8008b0c:	0800c408 	.word	0x0800c408
 8008b10:	0800c414 	.word	0x0800c414
 8008b14:	0800c420 	.word	0x0800c420
 8008b18:	0800c434 	.word	0x0800c434
 8008b1c:	0800c444 	.word	0x0800c444
 8008b20:	0800c458 	.word	0x0800c458
 8008b24:	0800c470 	.word	0x0800c470
 8008b28:	0800c484 	.word	0x0800c484

08008b2c <packet_serialize>:

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	791b      	ldrb	r3, [r3, #4]
 8008b3a:	3307      	adds	r3, #7
 8008b3c:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d04a      	beq.n	8008bda <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	785a      	ldrb	r2, [r3, #1]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	3301      	adds	r3, #1
 8008b54:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	3301      	adds	r3, #1
 8008b62:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	789a      	ldrb	r2, [r3, #2]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	78da      	ldrb	r2, [r3, #3]
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	791a      	ldrb	r2, [r3, #4]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6899      	ldr	r1, [r3, #8]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	791b      	ldrb	r3, [r3, #4]
 8008b96:	461a      	mov	r2, r3
 8008b98:	6938      	ldr	r0, [r7, #16]
 8008b9a:	f000 f917 	bl	8008dcc <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	3305      	adds	r3, #5
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6838      	ldr	r0, [r7, #0]
 8008ba8:	f000 f872 	bl	8008c90 <check_sum>
 8008bac:	4603      	mov	r3, r0
 8008bae:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	791b      	ldrb	r3, [r3, #4]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	4413      	add	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 8008bbc:	89fb      	ldrh	r3, [r7, #14]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 8008bce:	89fb      	ldrh	r3, [r7, #14]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	e000      	b.n	8008bdc <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 8008bda:	2300      	movs	r3, #0
	}
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3b02      	subs	r3, #2
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	3b02      	subs	r3, #2
 8008c14:	4619      	mov	r1, r3
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f83a 	bl	8008c90 <check_sum>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 8008c20:	8aba      	ldrh	r2, [r7, #20]
 8008c22:	8afb      	ldrh	r3, [r7, #22]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d005      	beq.n	8008c34 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 8008c28:	4818      	ldr	r0, [pc, #96]	; (8008c8c <packet_desirialize+0xa8>)
 8008c2a:	f000 ff25 	bl	8009a78 <puts>
		return PACK_CHECKSUM_ERROR ;
 8008c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c32:	e026      	b.n	8008c82 <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	785a      	ldrb	r2, [r3, #1]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	781a      	ldrb	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	78da      	ldrb	r2, [r3, #3]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	789a      	ldrb	r2, [r3, #2]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	791a      	ldrb	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	791b      	ldrb	r3, [r3, #4]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f895 	bl	8008d90 <malloc>
 8008c66:	4603      	mov	r3, r0
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6898      	ldr	r0, [r3, #8]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1d59      	adds	r1, r3, #5
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	791b      	ldrb	r3, [r3, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f000 f8a6 	bl	8008dcc <memcpy>
	
	return PACK_OK ;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0800c490 	.word	0x0800c490

08008c90 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8008ca2:	e017      	b.n	8008cd4 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	3b02      	subs	r3, #2
 8008ccc:	603b      	str	r3, [r7, #0]
		i += 2;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	617b      	str	r3, [r7, #20]
	while(len>1)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	dce4      	bgt.n	8008ca4 <check_sum+0x14>
	}
	
	if(len >0)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd13      	ble.n	8008d08 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4413      	add	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 8008cf2:	e009      	b.n	8008d08 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 8008d00:	89fb      	ldrh	r3, [r7, #14]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4413      	add	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0e:	daf1      	bge.n	8008cf4 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	b29b      	uxth	r3, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr

08008d22 <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	3307      	adds	r3, #7
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr
	...

08008d3c <__errno>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <__errno+0x8>)
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	2000000c 	.word	0x2000000c

08008d48 <__libc_init_array>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	4d0d      	ldr	r5, [pc, #52]	; (8008d80 <__libc_init_array+0x38>)
 8008d4c:	4c0d      	ldr	r4, [pc, #52]	; (8008d84 <__libc_init_array+0x3c>)
 8008d4e:	1b64      	subs	r4, r4, r5
 8008d50:	10a4      	asrs	r4, r4, #2
 8008d52:	2600      	movs	r6, #0
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	d109      	bne.n	8008d6c <__libc_init_array+0x24>
 8008d58:	4d0b      	ldr	r5, [pc, #44]	; (8008d88 <__libc_init_array+0x40>)
 8008d5a:	4c0c      	ldr	r4, [pc, #48]	; (8008d8c <__libc_init_array+0x44>)
 8008d5c:	f003 f8a8 	bl	800beb0 <_init>
 8008d60:	1b64      	subs	r4, r4, r5
 8008d62:	10a4      	asrs	r4, r4, #2
 8008d64:	2600      	movs	r6, #0
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	d105      	bne.n	8008d76 <__libc_init_array+0x2e>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d70:	4798      	blx	r3
 8008d72:	3601      	adds	r6, #1
 8008d74:	e7ee      	b.n	8008d54 <__libc_init_array+0xc>
 8008d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7a:	4798      	blx	r3
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	e7f2      	b.n	8008d66 <__libc_init_array+0x1e>
 8008d80:	0800d124 	.word	0x0800d124
 8008d84:	0800d124 	.word	0x0800d124
 8008d88:	0800d124 	.word	0x0800d124
 8008d8c:	0800d128 	.word	0x0800d128

08008d90 <malloc>:
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <malloc+0xc>)
 8008d92:	4601      	mov	r1, r0
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	f000 b87d 	b.w	8008e94 <_malloc_r>
 8008d9a:	bf00      	nop
 8008d9c:	2000000c 	.word	0x2000000c

08008da0 <free>:
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <free+0xc>)
 8008da2:	4601      	mov	r1, r0
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	f000 b827 	b.w	8008df8 <_free_r>
 8008daa:	bf00      	nop
 8008dac:	2000000c 	.word	0x2000000c

08008db0 <memcmp>:
 8008db0:	b530      	push	{r4, r5, lr}
 8008db2:	3901      	subs	r1, #1
 8008db4:	2400      	movs	r4, #0
 8008db6:	42a2      	cmp	r2, r4
 8008db8:	d101      	bne.n	8008dbe <memcmp+0xe>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e005      	b.n	8008dca <memcmp+0x1a>
 8008dbe:	5d03      	ldrb	r3, [r0, r4]
 8008dc0:	3401      	adds	r4, #1
 8008dc2:	5d0d      	ldrb	r5, [r1, r4]
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	d0f6      	beq.n	8008db6 <memcmp+0x6>
 8008dc8:	1b58      	subs	r0, r3, r5
 8008dca:	bd30      	pop	{r4, r5, pc}

08008dcc <memcpy>:
 8008dcc:	440a      	add	r2, r1
 8008dce:	4291      	cmp	r1, r2
 8008dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dd4:	d100      	bne.n	8008dd8 <memcpy+0xc>
 8008dd6:	4770      	bx	lr
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008de2:	4291      	cmp	r1, r2
 8008de4:	d1f9      	bne.n	8008dda <memcpy+0xe>
 8008de6:	bd10      	pop	{r4, pc}

08008de8 <memset>:
 8008de8:	4402      	add	r2, r0
 8008dea:	4603      	mov	r3, r0
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d100      	bne.n	8008df2 <memset+0xa>
 8008df0:	4770      	bx	lr
 8008df2:	f803 1b01 	strb.w	r1, [r3], #1
 8008df6:	e7f9      	b.n	8008dec <memset+0x4>

08008df8 <_free_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d045      	beq.n	8008e8c <_free_r+0x94>
 8008e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e04:	1f0c      	subs	r4, r1, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bfb8      	it	lt
 8008e0a:	18e4      	addlt	r4, r4, r3
 8008e0c:	f002 f9f6 	bl	800b1fc <__malloc_lock>
 8008e10:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <_free_r+0x98>)
 8008e12:	6813      	ldr	r3, [r2, #0]
 8008e14:	4610      	mov	r0, r2
 8008e16:	b933      	cbnz	r3, 8008e26 <_free_r+0x2e>
 8008e18:	6063      	str	r3, [r4, #4]
 8008e1a:	6014      	str	r4, [r2, #0]
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e22:	f002 b9f1 	b.w	800b208 <__malloc_unlock>
 8008e26:	42a3      	cmp	r3, r4
 8008e28:	d90b      	bls.n	8008e42 <_free_r+0x4a>
 8008e2a:	6821      	ldr	r1, [r4, #0]
 8008e2c:	1862      	adds	r2, r4, r1
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	bf04      	itt	eq
 8008e32:	681a      	ldreq	r2, [r3, #0]
 8008e34:	685b      	ldreq	r3, [r3, #4]
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	bf04      	itt	eq
 8008e3a:	1852      	addeq	r2, r2, r1
 8008e3c:	6022      	streq	r2, [r4, #0]
 8008e3e:	6004      	str	r4, [r0, #0]
 8008e40:	e7ec      	b.n	8008e1c <_free_r+0x24>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x54>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x4a>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1850      	adds	r0, r2, r1
 8008e50:	42a0      	cmp	r0, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x74>
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	4401      	add	r1, r0
 8008e58:	1850      	adds	r0, r2, r1
 8008e5a:	4283      	cmp	r3, r0
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1dd      	bne.n	8008e1c <_free_r+0x24>
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	4401      	add	r1, r0
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	e7d7      	b.n	8008e1c <_free_r+0x24>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x7c>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	e7d3      	b.n	8008e1c <_free_r+0x24>
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	1821      	adds	r1, r4, r0
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1809      	addeq	r1, r1, r0
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7c7      	b.n	8008e1c <_free_r+0x24>
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	bf00      	nop
 8008e90:	2000045c 	.word	0x2000045c

08008e94 <_malloc_r>:
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e96:	1ccd      	adds	r5, r1, #3
 8008e98:	f025 0503 	bic.w	r5, r5, #3
 8008e9c:	3508      	adds	r5, #8
 8008e9e:	2d0c      	cmp	r5, #12
 8008ea0:	bf38      	it	cc
 8008ea2:	250c      	movcc	r5, #12
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	db01      	blt.n	8008eae <_malloc_r+0x1a>
 8008eaa:	42a9      	cmp	r1, r5
 8008eac:	d903      	bls.n	8008eb6 <_malloc_r+0x22>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	6033      	str	r3, [r6, #0]
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb6:	f002 f9a1 	bl	800b1fc <__malloc_lock>
 8008eba:	4921      	ldr	r1, [pc, #132]	; (8008f40 <_malloc_r+0xac>)
 8008ebc:	680a      	ldr	r2, [r1, #0]
 8008ebe:	4614      	mov	r4, r2
 8008ec0:	b99c      	cbnz	r4, 8008eea <_malloc_r+0x56>
 8008ec2:	4f20      	ldr	r7, [pc, #128]	; (8008f44 <_malloc_r+0xb0>)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	b923      	cbnz	r3, 8008ed2 <_malloc_r+0x3e>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f000 fddc 	bl	8009a88 <_sbrk_r>
 8008ed0:	6038      	str	r0, [r7, #0]
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f000 fdd7 	bl	8009a88 <_sbrk_r>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d123      	bne.n	8008f26 <_malloc_r+0x92>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f002 f990 	bl	800b208 <__malloc_unlock>
 8008ee8:	e7e3      	b.n	8008eb2 <_malloc_r+0x1e>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	1b5b      	subs	r3, r3, r5
 8008eee:	d417      	bmi.n	8008f20 <_malloc_r+0x8c>
 8008ef0:	2b0b      	cmp	r3, #11
 8008ef2:	d903      	bls.n	8008efc <_malloc_r+0x68>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	441c      	add	r4, r3
 8008ef8:	6025      	str	r5, [r4, #0]
 8008efa:	e004      	b.n	8008f06 <_malloc_r+0x72>
 8008efc:	6863      	ldr	r3, [r4, #4]
 8008efe:	42a2      	cmp	r2, r4
 8008f00:	bf0c      	ite	eq
 8008f02:	600b      	streq	r3, [r1, #0]
 8008f04:	6053      	strne	r3, [r2, #4]
 8008f06:	4630      	mov	r0, r6
 8008f08:	f002 f97e 	bl	800b208 <__malloc_unlock>
 8008f0c:	f104 000b 	add.w	r0, r4, #11
 8008f10:	1d23      	adds	r3, r4, #4
 8008f12:	f020 0007 	bic.w	r0, r0, #7
 8008f16:	1ac2      	subs	r2, r0, r3
 8008f18:	d0cc      	beq.n	8008eb4 <_malloc_r+0x20>
 8008f1a:	1a1b      	subs	r3, r3, r0
 8008f1c:	50a3      	str	r3, [r4, r2]
 8008f1e:	e7c9      	b.n	8008eb4 <_malloc_r+0x20>
 8008f20:	4622      	mov	r2, r4
 8008f22:	6864      	ldr	r4, [r4, #4]
 8008f24:	e7cc      	b.n	8008ec0 <_malloc_r+0x2c>
 8008f26:	1cc4      	adds	r4, r0, #3
 8008f28:	f024 0403 	bic.w	r4, r4, #3
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d0e3      	beq.n	8008ef8 <_malloc_r+0x64>
 8008f30:	1a21      	subs	r1, r4, r0
 8008f32:	4630      	mov	r0, r6
 8008f34:	f000 fda8 	bl	8009a88 <_sbrk_r>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d1dd      	bne.n	8008ef8 <_malloc_r+0x64>
 8008f3c:	e7cf      	b.n	8008ede <_malloc_r+0x4a>
 8008f3e:	bf00      	nop
 8008f40:	2000045c 	.word	0x2000045c
 8008f44:	20000460 	.word	0x20000460

08008f48 <__cvt>:
 8008f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	461f      	mov	r7, r3
 8008f52:	4614      	mov	r4, r2
 8008f54:	bfb8      	it	lt
 8008f56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008f5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f5e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f62:	bfb6      	itet	lt
 8008f64:	461f      	movlt	r7, r3
 8008f66:	2300      	movge	r3, #0
 8008f68:	232d      	movlt	r3, #45	; 0x2d
 8008f6a:	7013      	strb	r3, [r2, #0]
 8008f6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f6e:	f023 0820 	bic.w	r8, r3, #32
 8008f72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f76:	d005      	beq.n	8008f84 <__cvt+0x3c>
 8008f78:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f7c:	d100      	bne.n	8008f80 <__cvt+0x38>
 8008f7e:	3501      	adds	r5, #1
 8008f80:	2302      	movs	r3, #2
 8008f82:	e000      	b.n	8008f86 <__cvt+0x3e>
 8008f84:	2303      	movs	r3, #3
 8008f86:	aa07      	add	r2, sp, #28
 8008f88:	9204      	str	r2, [sp, #16]
 8008f8a:	aa06      	add	r2, sp, #24
 8008f8c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f90:	e9cd 3500 	strd	r3, r5, [sp]
 8008f94:	4622      	mov	r2, r4
 8008f96:	463b      	mov	r3, r7
 8008f98:	f001 f8ce 	bl	800a138 <_dtoa_r>
 8008f9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	d102      	bne.n	8008faa <__cvt+0x62>
 8008fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d522      	bpl.n	8008ff0 <__cvt+0xa8>
 8008faa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fae:	eb06 0905 	add.w	r9, r6, r5
 8008fb2:	d110      	bne.n	8008fd6 <__cvt+0x8e>
 8008fb4:	7833      	ldrb	r3, [r6, #0]
 8008fb6:	2b30      	cmp	r3, #48	; 0x30
 8008fb8:	d10a      	bne.n	8008fd0 <__cvt+0x88>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fd69 	bl	8000a98 <__aeabi_dcmpeq>
 8008fc6:	b918      	cbnz	r0, 8008fd0 <__cvt+0x88>
 8008fc8:	f1c5 0501 	rsb	r5, r5, #1
 8008fcc:	f8ca 5000 	str.w	r5, [sl]
 8008fd0:	f8da 3000 	ldr.w	r3, [sl]
 8008fd4:	4499      	add	r9, r3
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 fd5b 	bl	8000a98 <__aeabi_dcmpeq>
 8008fe2:	b108      	cbz	r0, 8008fe8 <__cvt+0xa0>
 8008fe4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fe8:	2230      	movs	r2, #48	; 0x30
 8008fea:	9b07      	ldr	r3, [sp, #28]
 8008fec:	454b      	cmp	r3, r9
 8008fee:	d307      	bcc.n	8009000 <__cvt+0xb8>
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ff4:	1b9b      	subs	r3, r3, r6
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	b008      	add	sp, #32
 8008ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009000:	1c59      	adds	r1, r3, #1
 8009002:	9107      	str	r1, [sp, #28]
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e7f0      	b.n	8008fea <__cvt+0xa2>

08009008 <__exponent>:
 8009008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900a:	4603      	mov	r3, r0
 800900c:	2900      	cmp	r1, #0
 800900e:	bfb8      	it	lt
 8009010:	4249      	neglt	r1, r1
 8009012:	f803 2b02 	strb.w	r2, [r3], #2
 8009016:	bfb4      	ite	lt
 8009018:	222d      	movlt	r2, #45	; 0x2d
 800901a:	222b      	movge	r2, #43	; 0x2b
 800901c:	2909      	cmp	r1, #9
 800901e:	7042      	strb	r2, [r0, #1]
 8009020:	dd2a      	ble.n	8009078 <__exponent+0x70>
 8009022:	f10d 0407 	add.w	r4, sp, #7
 8009026:	46a4      	mov	ip, r4
 8009028:	270a      	movs	r7, #10
 800902a:	46a6      	mov	lr, r4
 800902c:	460a      	mov	r2, r1
 800902e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009032:	fb07 1516 	mls	r5, r7, r6, r1
 8009036:	3530      	adds	r5, #48	; 0x30
 8009038:	2a63      	cmp	r2, #99	; 0x63
 800903a:	f104 34ff 	add.w	r4, r4, #4294967295
 800903e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009042:	4631      	mov	r1, r6
 8009044:	dcf1      	bgt.n	800902a <__exponent+0x22>
 8009046:	3130      	adds	r1, #48	; 0x30
 8009048:	f1ae 0502 	sub.w	r5, lr, #2
 800904c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009050:	1c44      	adds	r4, r0, #1
 8009052:	4629      	mov	r1, r5
 8009054:	4561      	cmp	r1, ip
 8009056:	d30a      	bcc.n	800906e <__exponent+0x66>
 8009058:	f10d 0209 	add.w	r2, sp, #9
 800905c:	eba2 020e 	sub.w	r2, r2, lr
 8009060:	4565      	cmp	r5, ip
 8009062:	bf88      	it	hi
 8009064:	2200      	movhi	r2, #0
 8009066:	4413      	add	r3, r2
 8009068:	1a18      	subs	r0, r3, r0
 800906a:	b003      	add	sp, #12
 800906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009072:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009076:	e7ed      	b.n	8009054 <__exponent+0x4c>
 8009078:	2330      	movs	r3, #48	; 0x30
 800907a:	3130      	adds	r1, #48	; 0x30
 800907c:	7083      	strb	r3, [r0, #2]
 800907e:	70c1      	strb	r1, [r0, #3]
 8009080:	1d03      	adds	r3, r0, #4
 8009082:	e7f1      	b.n	8009068 <__exponent+0x60>

08009084 <_printf_float>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	b091      	sub	sp, #68	; 0x44
 800908a:	460c      	mov	r4, r1
 800908c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009090:	4616      	mov	r6, r2
 8009092:	461f      	mov	r7, r3
 8009094:	4605      	mov	r5, r0
 8009096:	f002 f833 	bl	800b100 <_localeconv_r>
 800909a:	6803      	ldr	r3, [r0, #0]
 800909c:	9309      	str	r3, [sp, #36]	; 0x24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7f7 f878 	bl	8000194 <strlen>
 80090a4:	2300      	movs	r3, #0
 80090a6:	930e      	str	r3, [sp, #56]	; 0x38
 80090a8:	f8d8 3000 	ldr.w	r3, [r8]
 80090ac:	900a      	str	r0, [sp, #40]	; 0x28
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	f103 0208 	add.w	r2, r3, #8
 80090b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80090bc:	f8d4 b000 	ldr.w	fp, [r4]
 80090c0:	f8c8 2000 	str.w	r2, [r8]
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80090d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80090d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80090d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090d8:	4b9c      	ldr	r3, [pc, #624]	; (800934c <_printf_float+0x2c8>)
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	4640      	mov	r0, r8
 80090e0:	f7f7 fd0c 	bl	8000afc <__aeabi_dcmpun>
 80090e4:	bb70      	cbnz	r0, 8009144 <_printf_float+0xc0>
 80090e6:	4b99      	ldr	r3, [pc, #612]	; (800934c <_printf_float+0x2c8>)
 80090e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ea:	f04f 32ff 	mov.w	r2, #4294967295
 80090ee:	4640      	mov	r0, r8
 80090f0:	f7f7 fce6 	bl	8000ac0 <__aeabi_dcmple>
 80090f4:	bb30      	cbnz	r0, 8009144 <_printf_float+0xc0>
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	4640      	mov	r0, r8
 80090fc:	4651      	mov	r1, sl
 80090fe:	f7f7 fcd5 	bl	8000aac <__aeabi_dcmplt>
 8009102:	b110      	cbz	r0, 800910a <_printf_float+0x86>
 8009104:	232d      	movs	r3, #45	; 0x2d
 8009106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910a:	4b91      	ldr	r3, [pc, #580]	; (8009350 <_printf_float+0x2cc>)
 800910c:	4891      	ldr	r0, [pc, #580]	; (8009354 <_printf_float+0x2d0>)
 800910e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009112:	bf94      	ite	ls
 8009114:	4698      	movls	r8, r3
 8009116:	4680      	movhi	r8, r0
 8009118:	2303      	movs	r3, #3
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	f02b 0304 	bic.w	r3, fp, #4
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	f04f 0a00 	mov.w	sl, #0
 8009126:	9700      	str	r7, [sp, #0]
 8009128:	4633      	mov	r3, r6
 800912a:	aa0f      	add	r2, sp, #60	; 0x3c
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f9d2 	bl	80094d8 <_printf_common>
 8009134:	3001      	adds	r0, #1
 8009136:	f040 808f 	bne.w	8009258 <_printf_float+0x1d4>
 800913a:	f04f 30ff 	mov.w	r0, #4294967295
 800913e:	b011      	add	sp, #68	; 0x44
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	4642      	mov	r2, r8
 8009146:	4653      	mov	r3, sl
 8009148:	4640      	mov	r0, r8
 800914a:	4651      	mov	r1, sl
 800914c:	f7f7 fcd6 	bl	8000afc <__aeabi_dcmpun>
 8009150:	b140      	cbz	r0, 8009164 <_printf_float+0xe0>
 8009152:	f1ba 0f00 	cmp.w	sl, #0
 8009156:	bfbc      	itt	lt
 8009158:	232d      	movlt	r3, #45	; 0x2d
 800915a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800915e:	487e      	ldr	r0, [pc, #504]	; (8009358 <_printf_float+0x2d4>)
 8009160:	4b7e      	ldr	r3, [pc, #504]	; (800935c <_printf_float+0x2d8>)
 8009162:	e7d4      	b.n	800910e <_printf_float+0x8a>
 8009164:	6863      	ldr	r3, [r4, #4]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800916c:	d142      	bne.n	80091f4 <_printf_float+0x170>
 800916e:	2306      	movs	r3, #6
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	9206      	str	r2, [sp, #24]
 8009176:	aa0e      	add	r2, sp, #56	; 0x38
 8009178:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800917c:	aa0d      	add	r2, sp, #52	; 0x34
 800917e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009182:	9203      	str	r2, [sp, #12]
 8009184:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009188:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4642      	mov	r2, r8
 8009194:	4653      	mov	r3, sl
 8009196:	4628      	mov	r0, r5
 8009198:	910b      	str	r1, [sp, #44]	; 0x2c
 800919a:	f7ff fed5 	bl	8008f48 <__cvt>
 800919e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091a0:	2947      	cmp	r1, #71	; 0x47
 80091a2:	4680      	mov	r8, r0
 80091a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091a6:	d108      	bne.n	80091ba <_printf_float+0x136>
 80091a8:	1cc8      	adds	r0, r1, #3
 80091aa:	db02      	blt.n	80091b2 <_printf_float+0x12e>
 80091ac:	6863      	ldr	r3, [r4, #4]
 80091ae:	4299      	cmp	r1, r3
 80091b0:	dd40      	ble.n	8009234 <_printf_float+0x1b0>
 80091b2:	f1a9 0902 	sub.w	r9, r9, #2
 80091b6:	fa5f f989 	uxtb.w	r9, r9
 80091ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091be:	d81f      	bhi.n	8009200 <_printf_float+0x17c>
 80091c0:	3901      	subs	r1, #1
 80091c2:	464a      	mov	r2, r9
 80091c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091c8:	910d      	str	r1, [sp, #52]	; 0x34
 80091ca:	f7ff ff1d 	bl	8009008 <__exponent>
 80091ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d0:	1813      	adds	r3, r2, r0
 80091d2:	2a01      	cmp	r2, #1
 80091d4:	4682      	mov	sl, r0
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	dc02      	bgt.n	80091e0 <_printf_float+0x15c>
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	07d2      	lsls	r2, r2, #31
 80091de:	d501      	bpl.n	80091e4 <_printf_float+0x160>
 80091e0:	3301      	adds	r3, #1
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d09c      	beq.n	8009126 <_printf_float+0xa2>
 80091ec:	232d      	movs	r3, #45	; 0x2d
 80091ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f2:	e798      	b.n	8009126 <_printf_float+0xa2>
 80091f4:	2947      	cmp	r1, #71	; 0x47
 80091f6:	d1bc      	bne.n	8009172 <_printf_float+0xee>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1ba      	bne.n	8009172 <_printf_float+0xee>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e7b7      	b.n	8009170 <_printf_float+0xec>
 8009200:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009204:	d118      	bne.n	8009238 <_printf_float+0x1b4>
 8009206:	2900      	cmp	r1, #0
 8009208:	6863      	ldr	r3, [r4, #4]
 800920a:	dd0b      	ble.n	8009224 <_printf_float+0x1a0>
 800920c:	6121      	str	r1, [r4, #16]
 800920e:	b913      	cbnz	r3, 8009216 <_printf_float+0x192>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	07d0      	lsls	r0, r2, #31
 8009214:	d502      	bpl.n	800921c <_printf_float+0x198>
 8009216:	3301      	adds	r3, #1
 8009218:	440b      	add	r3, r1
 800921a:	6123      	str	r3, [r4, #16]
 800921c:	65a1      	str	r1, [r4, #88]	; 0x58
 800921e:	f04f 0a00 	mov.w	sl, #0
 8009222:	e7df      	b.n	80091e4 <_printf_float+0x160>
 8009224:	b913      	cbnz	r3, 800922c <_printf_float+0x1a8>
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	07d2      	lsls	r2, r2, #31
 800922a:	d501      	bpl.n	8009230 <_printf_float+0x1ac>
 800922c:	3302      	adds	r3, #2
 800922e:	e7f4      	b.n	800921a <_printf_float+0x196>
 8009230:	2301      	movs	r3, #1
 8009232:	e7f2      	b.n	800921a <_printf_float+0x196>
 8009234:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923a:	4299      	cmp	r1, r3
 800923c:	db05      	blt.n	800924a <_printf_float+0x1c6>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6121      	str	r1, [r4, #16]
 8009242:	07d8      	lsls	r0, r3, #31
 8009244:	d5ea      	bpl.n	800921c <_printf_float+0x198>
 8009246:	1c4b      	adds	r3, r1, #1
 8009248:	e7e7      	b.n	800921a <_printf_float+0x196>
 800924a:	2900      	cmp	r1, #0
 800924c:	bfd4      	ite	le
 800924e:	f1c1 0202 	rsble	r2, r1, #2
 8009252:	2201      	movgt	r2, #1
 8009254:	4413      	add	r3, r2
 8009256:	e7e0      	b.n	800921a <_printf_float+0x196>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	055a      	lsls	r2, r3, #21
 800925c:	d407      	bmi.n	800926e <_printf_float+0x1ea>
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	4642      	mov	r2, r8
 8009262:	4631      	mov	r1, r6
 8009264:	4628      	mov	r0, r5
 8009266:	47b8      	blx	r7
 8009268:	3001      	adds	r0, #1
 800926a:	d12b      	bne.n	80092c4 <_printf_float+0x240>
 800926c:	e765      	b.n	800913a <_printf_float+0xb6>
 800926e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009272:	f240 80dc 	bls.w	800942e <_printf_float+0x3aa>
 8009276:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800927a:	2200      	movs	r2, #0
 800927c:	2300      	movs	r3, #0
 800927e:	f7f7 fc0b 	bl	8000a98 <__aeabi_dcmpeq>
 8009282:	2800      	cmp	r0, #0
 8009284:	d033      	beq.n	80092ee <_printf_float+0x26a>
 8009286:	4a36      	ldr	r2, [pc, #216]	; (8009360 <_printf_float+0x2dc>)
 8009288:	2301      	movs	r3, #1
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f af52 	beq.w	800913a <_printf_float+0xb6>
 8009296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800929a:	429a      	cmp	r2, r3
 800929c:	db02      	blt.n	80092a4 <_printf_float+0x220>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	07d8      	lsls	r0, r3, #31
 80092a2:	d50f      	bpl.n	80092c4 <_printf_float+0x240>
 80092a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af43 	beq.w	800913a <_printf_float+0xb6>
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	f104 091a 	add.w	r9, r4, #26
 80092bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092be:	3b01      	subs	r3, #1
 80092c0:	4543      	cmp	r3, r8
 80092c2:	dc09      	bgt.n	80092d8 <_printf_float+0x254>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	079b      	lsls	r3, r3, #30
 80092c8:	f100 8101 	bmi.w	80094ce <_printf_float+0x44a>
 80092cc:	68e0      	ldr	r0, [r4, #12]
 80092ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092d0:	4298      	cmp	r0, r3
 80092d2:	bfb8      	it	lt
 80092d4:	4618      	movlt	r0, r3
 80092d6:	e732      	b.n	800913e <_printf_float+0xba>
 80092d8:	2301      	movs	r3, #1
 80092da:	464a      	mov	r2, r9
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af29 	beq.w	800913a <_printf_float+0xb6>
 80092e8:	f108 0801 	add.w	r8, r8, #1
 80092ec:	e7e6      	b.n	80092bc <_printf_float+0x238>
 80092ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc37      	bgt.n	8009364 <_printf_float+0x2e0>
 80092f4:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <_printf_float+0x2dc>)
 80092f6:	2301      	movs	r3, #1
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f af1b 	beq.w	800913a <_printf_float+0xb6>
 8009304:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009308:	4313      	orrs	r3, r2
 800930a:	d102      	bne.n	8009312 <_printf_float+0x28e>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d5d8      	bpl.n	80092c4 <_printf_float+0x240>
 8009312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f af0c 	beq.w	800913a <_printf_float+0xb6>
 8009322:	f04f 0900 	mov.w	r9, #0
 8009326:	f104 0a1a 	add.w	sl, r4, #26
 800932a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932c:	425b      	negs	r3, r3
 800932e:	454b      	cmp	r3, r9
 8009330:	dc01      	bgt.n	8009336 <_printf_float+0x2b2>
 8009332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009334:	e794      	b.n	8009260 <_printf_float+0x1dc>
 8009336:	2301      	movs	r3, #1
 8009338:	4652      	mov	r2, sl
 800933a:	4631      	mov	r1, r6
 800933c:	4628      	mov	r0, r5
 800933e:	47b8      	blx	r7
 8009340:	3001      	adds	r0, #1
 8009342:	f43f aefa 	beq.w	800913a <_printf_float+0xb6>
 8009346:	f109 0901 	add.w	r9, r9, #1
 800934a:	e7ee      	b.n	800932a <_printf_float+0x2a6>
 800934c:	7fefffff 	.word	0x7fefffff
 8009350:	0800c6a4 	.word	0x0800c6a4
 8009354:	0800c6a8 	.word	0x0800c6a8
 8009358:	0800c6b0 	.word	0x0800c6b0
 800935c:	0800c6ac 	.word	0x0800c6ac
 8009360:	0800c6b4 	.word	0x0800c6b4
 8009364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009368:	429a      	cmp	r2, r3
 800936a:	bfa8      	it	ge
 800936c:	461a      	movge	r2, r3
 800936e:	2a00      	cmp	r2, #0
 8009370:	4691      	mov	r9, r2
 8009372:	dc37      	bgt.n	80093e4 <_printf_float+0x360>
 8009374:	f04f 0b00 	mov.w	fp, #0
 8009378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937c:	f104 021a 	add.w	r2, r4, #26
 8009380:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009384:	ebaa 0309 	sub.w	r3, sl, r9
 8009388:	455b      	cmp	r3, fp
 800938a:	dc33      	bgt.n	80093f4 <_printf_float+0x370>
 800938c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009390:	429a      	cmp	r2, r3
 8009392:	db3b      	blt.n	800940c <_printf_float+0x388>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07da      	lsls	r2, r3, #31
 8009398:	d438      	bmi.n	800940c <_printf_float+0x388>
 800939a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800939e:	eba2 030a 	sub.w	r3, r2, sl
 80093a2:	eba2 0901 	sub.w	r9, r2, r1
 80093a6:	4599      	cmp	r9, r3
 80093a8:	bfa8      	it	ge
 80093aa:	4699      	movge	r9, r3
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	dc34      	bgt.n	800941c <_printf_float+0x398>
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093ba:	f104 0a1a 	add.w	sl, r4, #26
 80093be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80093c2:	1a9b      	subs	r3, r3, r2
 80093c4:	eba3 0309 	sub.w	r3, r3, r9
 80093c8:	4543      	cmp	r3, r8
 80093ca:	f77f af7b 	ble.w	80092c4 <_printf_float+0x240>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4652      	mov	r2, sl
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f aeae 	beq.w	800913a <_printf_float+0xb6>
 80093de:	f108 0801 	add.w	r8, r8, #1
 80093e2:	e7ec      	b.n	80093be <_printf_float+0x33a>
 80093e4:	4613      	mov	r3, r2
 80093e6:	4631      	mov	r1, r6
 80093e8:	4642      	mov	r2, r8
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	d1c0      	bne.n	8009374 <_printf_float+0x2f0>
 80093f2:	e6a2      	b.n	800913a <_printf_float+0xb6>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	f43f ae9b 	beq.w	800913a <_printf_float+0xb6>
 8009404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009406:	f10b 0b01 	add.w	fp, fp, #1
 800940a:	e7b9      	b.n	8009380 <_printf_float+0x2fc>
 800940c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	d1bf      	bne.n	800939a <_printf_float+0x316>
 800941a:	e68e      	b.n	800913a <_printf_float+0xb6>
 800941c:	464b      	mov	r3, r9
 800941e:	eb08 020a 	add.w	r2, r8, sl
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	d1c2      	bne.n	80093b2 <_printf_float+0x32e>
 800942c:	e685      	b.n	800913a <_printf_float+0xb6>
 800942e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009430:	2a01      	cmp	r2, #1
 8009432:	dc01      	bgt.n	8009438 <_printf_float+0x3b4>
 8009434:	07db      	lsls	r3, r3, #31
 8009436:	d537      	bpl.n	80094a8 <_printf_float+0x424>
 8009438:	2301      	movs	r3, #1
 800943a:	4642      	mov	r2, r8
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	f43f ae79 	beq.w	800913a <_printf_float+0xb6>
 8009448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	f43f ae71 	beq.w	800913a <_printf_float+0xb6>
 8009458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	f7f7 fb1a 	bl	8000a98 <__aeabi_dcmpeq>
 8009464:	b9d8      	cbnz	r0, 800949e <_printf_float+0x41a>
 8009466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009468:	f108 0201 	add.w	r2, r8, #1
 800946c:	3b01      	subs	r3, #1
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	d10e      	bne.n	8009496 <_printf_float+0x412>
 8009478:	e65f      	b.n	800913a <_printf_float+0xb6>
 800947a:	2301      	movs	r3, #1
 800947c:	464a      	mov	r2, r9
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae58 	beq.w	800913a <_printf_float+0xb6>
 800948a:	f108 0801 	add.w	r8, r8, #1
 800948e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009490:	3b01      	subs	r3, #1
 8009492:	4543      	cmp	r3, r8
 8009494:	dcf1      	bgt.n	800947a <_printf_float+0x3f6>
 8009496:	4653      	mov	r3, sl
 8009498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800949c:	e6e1      	b.n	8009262 <_printf_float+0x1de>
 800949e:	f04f 0800 	mov.w	r8, #0
 80094a2:	f104 091a 	add.w	r9, r4, #26
 80094a6:	e7f2      	b.n	800948e <_printf_float+0x40a>
 80094a8:	2301      	movs	r3, #1
 80094aa:	4642      	mov	r2, r8
 80094ac:	e7df      	b.n	800946e <_printf_float+0x3ea>
 80094ae:	2301      	movs	r3, #1
 80094b0:	464a      	mov	r2, r9
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f ae3e 	beq.w	800913a <_printf_float+0xb6>
 80094be:	f108 0801 	add.w	r8, r8, #1
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094c6:	1a5b      	subs	r3, r3, r1
 80094c8:	4543      	cmp	r3, r8
 80094ca:	dcf0      	bgt.n	80094ae <_printf_float+0x42a>
 80094cc:	e6fe      	b.n	80092cc <_printf_float+0x248>
 80094ce:	f04f 0800 	mov.w	r8, #0
 80094d2:	f104 0919 	add.w	r9, r4, #25
 80094d6:	e7f4      	b.n	80094c2 <_printf_float+0x43e>

080094d8 <_printf_common>:
 80094d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	4616      	mov	r6, r2
 80094de:	4699      	mov	r9, r3
 80094e0:	688a      	ldr	r2, [r1, #8]
 80094e2:	690b      	ldr	r3, [r1, #16]
 80094e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e8:	4293      	cmp	r3, r2
 80094ea:	bfb8      	it	lt
 80094ec:	4613      	movlt	r3, r2
 80094ee:	6033      	str	r3, [r6, #0]
 80094f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094f4:	4607      	mov	r7, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	b10a      	cbz	r2, 80094fe <_printf_common+0x26>
 80094fa:	3301      	adds	r3, #1
 80094fc:	6033      	str	r3, [r6, #0]
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	0699      	lsls	r1, r3, #26
 8009502:	bf42      	ittt	mi
 8009504:	6833      	ldrmi	r3, [r6, #0]
 8009506:	3302      	addmi	r3, #2
 8009508:	6033      	strmi	r3, [r6, #0]
 800950a:	6825      	ldr	r5, [r4, #0]
 800950c:	f015 0506 	ands.w	r5, r5, #6
 8009510:	d106      	bne.n	8009520 <_printf_common+0x48>
 8009512:	f104 0a19 	add.w	sl, r4, #25
 8009516:	68e3      	ldr	r3, [r4, #12]
 8009518:	6832      	ldr	r2, [r6, #0]
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	42ab      	cmp	r3, r5
 800951e:	dc26      	bgt.n	800956e <_printf_common+0x96>
 8009520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009524:	1e13      	subs	r3, r2, #0
 8009526:	6822      	ldr	r2, [r4, #0]
 8009528:	bf18      	it	ne
 800952a:	2301      	movne	r3, #1
 800952c:	0692      	lsls	r2, r2, #26
 800952e:	d42b      	bmi.n	8009588 <_printf_common+0xb0>
 8009530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009534:	4649      	mov	r1, r9
 8009536:	4638      	mov	r0, r7
 8009538:	47c0      	blx	r8
 800953a:	3001      	adds	r0, #1
 800953c:	d01e      	beq.n	800957c <_printf_common+0xa4>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	68e5      	ldr	r5, [r4, #12]
 8009542:	6832      	ldr	r2, [r6, #0]
 8009544:	f003 0306 	and.w	r3, r3, #6
 8009548:	2b04      	cmp	r3, #4
 800954a:	bf08      	it	eq
 800954c:	1aad      	subeq	r5, r5, r2
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	6922      	ldr	r2, [r4, #16]
 8009552:	bf0c      	ite	eq
 8009554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009558:	2500      	movne	r5, #0
 800955a:	4293      	cmp	r3, r2
 800955c:	bfc4      	itt	gt
 800955e:	1a9b      	subgt	r3, r3, r2
 8009560:	18ed      	addgt	r5, r5, r3
 8009562:	2600      	movs	r6, #0
 8009564:	341a      	adds	r4, #26
 8009566:	42b5      	cmp	r5, r6
 8009568:	d11a      	bne.n	80095a0 <_printf_common+0xc8>
 800956a:	2000      	movs	r0, #0
 800956c:	e008      	b.n	8009580 <_printf_common+0xa8>
 800956e:	2301      	movs	r3, #1
 8009570:	4652      	mov	r2, sl
 8009572:	4649      	mov	r1, r9
 8009574:	4638      	mov	r0, r7
 8009576:	47c0      	blx	r8
 8009578:	3001      	adds	r0, #1
 800957a:	d103      	bne.n	8009584 <_printf_common+0xac>
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	3501      	adds	r5, #1
 8009586:	e7c6      	b.n	8009516 <_printf_common+0x3e>
 8009588:	18e1      	adds	r1, r4, r3
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	2030      	movs	r0, #48	; 0x30
 800958e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009592:	4422      	add	r2, r4
 8009594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800959c:	3302      	adds	r3, #2
 800959e:	e7c7      	b.n	8009530 <_printf_common+0x58>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4622      	mov	r2, r4
 80095a4:	4649      	mov	r1, r9
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c0      	blx	r8
 80095aa:	3001      	adds	r0, #1
 80095ac:	d0e6      	beq.n	800957c <_printf_common+0xa4>
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7d9      	b.n	8009566 <_printf_common+0x8e>
	...

080095b4 <_printf_i>:
 80095b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	460c      	mov	r4, r1
 80095ba:	4691      	mov	r9, r2
 80095bc:	7e27      	ldrb	r7, [r4, #24]
 80095be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095c0:	2f78      	cmp	r7, #120	; 0x78
 80095c2:	4680      	mov	r8, r0
 80095c4:	469a      	mov	sl, r3
 80095c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ca:	d807      	bhi.n	80095dc <_printf_i+0x28>
 80095cc:	2f62      	cmp	r7, #98	; 0x62
 80095ce:	d80a      	bhi.n	80095e6 <_printf_i+0x32>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80d8 	beq.w	8009786 <_printf_i+0x1d2>
 80095d6:	2f58      	cmp	r7, #88	; 0x58
 80095d8:	f000 80a3 	beq.w	8009722 <_printf_i+0x16e>
 80095dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095e4:	e03a      	b.n	800965c <_printf_i+0xa8>
 80095e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ea:	2b15      	cmp	r3, #21
 80095ec:	d8f6      	bhi.n	80095dc <_printf_i+0x28>
 80095ee:	a001      	add	r0, pc, #4	; (adr r0, 80095f4 <_printf_i+0x40>)
 80095f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080095dd 	.word	0x080095dd
 8009600:	080095dd 	.word	0x080095dd
 8009604:	080095dd 	.word	0x080095dd
 8009608:	080095dd 	.word	0x080095dd
 800960c:	08009661 	.word	0x08009661
 8009610:	080095dd 	.word	0x080095dd
 8009614:	080095dd 	.word	0x080095dd
 8009618:	080095dd 	.word	0x080095dd
 800961c:	080095dd 	.word	0x080095dd
 8009620:	0800976d 	.word	0x0800976d
 8009624:	08009691 	.word	0x08009691
 8009628:	0800974f 	.word	0x0800974f
 800962c:	080095dd 	.word	0x080095dd
 8009630:	080095dd 	.word	0x080095dd
 8009634:	0800978f 	.word	0x0800978f
 8009638:	080095dd 	.word	0x080095dd
 800963c:	08009691 	.word	0x08009691
 8009640:	080095dd 	.word	0x080095dd
 8009644:	080095dd 	.word	0x080095dd
 8009648:	08009757 	.word	0x08009757
 800964c:	680b      	ldr	r3, [r1, #0]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	600a      	str	r2, [r1, #0]
 8009654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800965c:	2301      	movs	r3, #1
 800965e:	e0a3      	b.n	80097a8 <_printf_i+0x1f4>
 8009660:	6825      	ldr	r5, [r4, #0]
 8009662:	6808      	ldr	r0, [r1, #0]
 8009664:	062e      	lsls	r6, r5, #24
 8009666:	f100 0304 	add.w	r3, r0, #4
 800966a:	d50a      	bpl.n	8009682 <_printf_i+0xce>
 800966c:	6805      	ldr	r5, [r0, #0]
 800966e:	600b      	str	r3, [r1, #0]
 8009670:	2d00      	cmp	r5, #0
 8009672:	da03      	bge.n	800967c <_printf_i+0xc8>
 8009674:	232d      	movs	r3, #45	; 0x2d
 8009676:	426d      	negs	r5, r5
 8009678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800967c:	485e      	ldr	r0, [pc, #376]	; (80097f8 <_printf_i+0x244>)
 800967e:	230a      	movs	r3, #10
 8009680:	e019      	b.n	80096b6 <_printf_i+0x102>
 8009682:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009686:	6805      	ldr	r5, [r0, #0]
 8009688:	600b      	str	r3, [r1, #0]
 800968a:	bf18      	it	ne
 800968c:	b22d      	sxthne	r5, r5
 800968e:	e7ef      	b.n	8009670 <_printf_i+0xbc>
 8009690:	680b      	ldr	r3, [r1, #0]
 8009692:	6825      	ldr	r5, [r4, #0]
 8009694:	1d18      	adds	r0, r3, #4
 8009696:	6008      	str	r0, [r1, #0]
 8009698:	0628      	lsls	r0, r5, #24
 800969a:	d501      	bpl.n	80096a0 <_printf_i+0xec>
 800969c:	681d      	ldr	r5, [r3, #0]
 800969e:	e002      	b.n	80096a6 <_printf_i+0xf2>
 80096a0:	0669      	lsls	r1, r5, #25
 80096a2:	d5fb      	bpl.n	800969c <_printf_i+0xe8>
 80096a4:	881d      	ldrh	r5, [r3, #0]
 80096a6:	4854      	ldr	r0, [pc, #336]	; (80097f8 <_printf_i+0x244>)
 80096a8:	2f6f      	cmp	r7, #111	; 0x6f
 80096aa:	bf0c      	ite	eq
 80096ac:	2308      	moveq	r3, #8
 80096ae:	230a      	movne	r3, #10
 80096b0:	2100      	movs	r1, #0
 80096b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096b6:	6866      	ldr	r6, [r4, #4]
 80096b8:	60a6      	str	r6, [r4, #8]
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	bfa2      	ittt	ge
 80096be:	6821      	ldrge	r1, [r4, #0]
 80096c0:	f021 0104 	bicge.w	r1, r1, #4
 80096c4:	6021      	strge	r1, [r4, #0]
 80096c6:	b90d      	cbnz	r5, 80096cc <_printf_i+0x118>
 80096c8:	2e00      	cmp	r6, #0
 80096ca:	d04d      	beq.n	8009768 <_printf_i+0x1b4>
 80096cc:	4616      	mov	r6, r2
 80096ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80096d2:	fb03 5711 	mls	r7, r3, r1, r5
 80096d6:	5dc7      	ldrb	r7, [r0, r7]
 80096d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096dc:	462f      	mov	r7, r5
 80096de:	42bb      	cmp	r3, r7
 80096e0:	460d      	mov	r5, r1
 80096e2:	d9f4      	bls.n	80096ce <_printf_i+0x11a>
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d10b      	bne.n	8009700 <_printf_i+0x14c>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	07df      	lsls	r7, r3, #31
 80096ec:	d508      	bpl.n	8009700 <_printf_i+0x14c>
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	4299      	cmp	r1, r3
 80096f4:	bfde      	ittt	le
 80096f6:	2330      	movle	r3, #48	; 0x30
 80096f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009700:	1b92      	subs	r2, r2, r6
 8009702:	6122      	str	r2, [r4, #16]
 8009704:	f8cd a000 	str.w	sl, [sp]
 8009708:	464b      	mov	r3, r9
 800970a:	aa03      	add	r2, sp, #12
 800970c:	4621      	mov	r1, r4
 800970e:	4640      	mov	r0, r8
 8009710:	f7ff fee2 	bl	80094d8 <_printf_common>
 8009714:	3001      	adds	r0, #1
 8009716:	d14c      	bne.n	80097b2 <_printf_i+0x1fe>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	b004      	add	sp, #16
 800971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009722:	4835      	ldr	r0, [pc, #212]	; (80097f8 <_printf_i+0x244>)
 8009724:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	680e      	ldr	r6, [r1, #0]
 800972c:	061f      	lsls	r7, r3, #24
 800972e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009732:	600e      	str	r6, [r1, #0]
 8009734:	d514      	bpl.n	8009760 <_printf_i+0x1ac>
 8009736:	07d9      	lsls	r1, r3, #31
 8009738:	bf44      	itt	mi
 800973a:	f043 0320 	orrmi.w	r3, r3, #32
 800973e:	6023      	strmi	r3, [r4, #0]
 8009740:	b91d      	cbnz	r5, 800974a <_printf_i+0x196>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	f023 0320 	bic.w	r3, r3, #32
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	2310      	movs	r3, #16
 800974c:	e7b0      	b.n	80096b0 <_printf_i+0xfc>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f043 0320 	orr.w	r3, r3, #32
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	2378      	movs	r3, #120	; 0x78
 8009758:	4828      	ldr	r0, [pc, #160]	; (80097fc <_printf_i+0x248>)
 800975a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800975e:	e7e3      	b.n	8009728 <_printf_i+0x174>
 8009760:	065e      	lsls	r6, r3, #25
 8009762:	bf48      	it	mi
 8009764:	b2ad      	uxthmi	r5, r5
 8009766:	e7e6      	b.n	8009736 <_printf_i+0x182>
 8009768:	4616      	mov	r6, r2
 800976a:	e7bb      	b.n	80096e4 <_printf_i+0x130>
 800976c:	680b      	ldr	r3, [r1, #0]
 800976e:	6826      	ldr	r6, [r4, #0]
 8009770:	6960      	ldr	r0, [r4, #20]
 8009772:	1d1d      	adds	r5, r3, #4
 8009774:	600d      	str	r5, [r1, #0]
 8009776:	0635      	lsls	r5, r6, #24
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	d501      	bpl.n	8009780 <_printf_i+0x1cc>
 800977c:	6018      	str	r0, [r3, #0]
 800977e:	e002      	b.n	8009786 <_printf_i+0x1d2>
 8009780:	0671      	lsls	r1, r6, #25
 8009782:	d5fb      	bpl.n	800977c <_printf_i+0x1c8>
 8009784:	8018      	strh	r0, [r3, #0]
 8009786:	2300      	movs	r3, #0
 8009788:	6123      	str	r3, [r4, #16]
 800978a:	4616      	mov	r6, r2
 800978c:	e7ba      	b.n	8009704 <_printf_i+0x150>
 800978e:	680b      	ldr	r3, [r1, #0]
 8009790:	1d1a      	adds	r2, r3, #4
 8009792:	600a      	str	r2, [r1, #0]
 8009794:	681e      	ldr	r6, [r3, #0]
 8009796:	6862      	ldr	r2, [r4, #4]
 8009798:	2100      	movs	r1, #0
 800979a:	4630      	mov	r0, r6
 800979c:	f7f6 fd08 	bl	80001b0 <memchr>
 80097a0:	b108      	cbz	r0, 80097a6 <_printf_i+0x1f2>
 80097a2:	1b80      	subs	r0, r0, r6
 80097a4:	6060      	str	r0, [r4, #4]
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	2300      	movs	r3, #0
 80097ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b0:	e7a8      	b.n	8009704 <_printf_i+0x150>
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	4632      	mov	r2, r6
 80097b6:	4649      	mov	r1, r9
 80097b8:	4640      	mov	r0, r8
 80097ba:	47d0      	blx	sl
 80097bc:	3001      	adds	r0, #1
 80097be:	d0ab      	beq.n	8009718 <_printf_i+0x164>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	079b      	lsls	r3, r3, #30
 80097c4:	d413      	bmi.n	80097ee <_printf_i+0x23a>
 80097c6:	68e0      	ldr	r0, [r4, #12]
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	4298      	cmp	r0, r3
 80097cc:	bfb8      	it	lt
 80097ce:	4618      	movlt	r0, r3
 80097d0:	e7a4      	b.n	800971c <_printf_i+0x168>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4632      	mov	r2, r6
 80097d6:	4649      	mov	r1, r9
 80097d8:	4640      	mov	r0, r8
 80097da:	47d0      	blx	sl
 80097dc:	3001      	adds	r0, #1
 80097de:	d09b      	beq.n	8009718 <_printf_i+0x164>
 80097e0:	3501      	adds	r5, #1
 80097e2:	68e3      	ldr	r3, [r4, #12]
 80097e4:	9903      	ldr	r1, [sp, #12]
 80097e6:	1a5b      	subs	r3, r3, r1
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	dcf2      	bgt.n	80097d2 <_printf_i+0x21e>
 80097ec:	e7eb      	b.n	80097c6 <_printf_i+0x212>
 80097ee:	2500      	movs	r5, #0
 80097f0:	f104 0619 	add.w	r6, r4, #25
 80097f4:	e7f5      	b.n	80097e2 <_printf_i+0x22e>
 80097f6:	bf00      	nop
 80097f8:	0800c6b6 	.word	0x0800c6b6
 80097fc:	0800c6c7 	.word	0x0800c6c7

08009800 <_perror_r>:
 8009800:	6983      	ldr	r3, [r0, #24]
 8009802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009804:	68c4      	ldr	r4, [r0, #12]
 8009806:	4605      	mov	r5, r0
 8009808:	460e      	mov	r6, r1
 800980a:	b90b      	cbnz	r3, 8009810 <_perror_r+0x10>
 800980c:	f001 fbda 	bl	800afc4 <__sinit>
 8009810:	4b43      	ldr	r3, [pc, #268]	; (8009920 <_perror_r+0x120>)
 8009812:	429c      	cmp	r4, r3
 8009814:	d132      	bne.n	800987c <_perror_r+0x7c>
 8009816:	686c      	ldr	r4, [r5, #4]
 8009818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800981a:	07d8      	lsls	r0, r3, #31
 800981c:	d405      	bmi.n	800982a <_perror_r+0x2a>
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	0599      	lsls	r1, r3, #22
 8009822:	d402      	bmi.n	800982a <_perror_r+0x2a>
 8009824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009826:	f001 fc70 	bl	800b10a <__retarget_lock_acquire_recursive>
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f001 faf7 	bl	800ae20 <_fflush_r>
 8009832:	bb6e      	cbnz	r6, 8009890 <_perror_r+0x90>
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	ab01      	add	r3, sp, #4
 8009838:	2201      	movs	r2, #1
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f934 	bl	8009aa8 <_strerror_r>
 8009840:	4607      	mov	r7, r0
 8009842:	2800      	cmp	r0, #0
 8009844:	d14f      	bne.n	80098e6 <_perror_r+0xe6>
 8009846:	4837      	ldr	r0, [pc, #220]	; (8009924 <_perror_r+0x124>)
 8009848:	4f36      	ldr	r7, [pc, #216]	; (8009924 <_perror_r+0x124>)
 800984a:	f7f6 fca3 	bl	8000194 <strlen>
 800984e:	4606      	mov	r6, r0
 8009850:	b156      	cbz	r6, 8009868 <_perror_r+0x68>
 8009852:	4620      	mov	r0, r4
 8009854:	f001 fb20 	bl	800ae98 <fileno>
 8009858:	4633      	mov	r3, r6
 800985a:	4601      	mov	r1, r0
 800985c:	463a      	mov	r2, r7
 800985e:	4628      	mov	r0, r5
 8009860:	f000 fb5c 	bl	8009f1c <_write_r>
 8009864:	2800      	cmp	r0, #0
 8009866:	da51      	bge.n	800990c <_perror_r+0x10c>
 8009868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800986e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009872:	07d2      	lsls	r2, r2, #31
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	d54c      	bpl.n	8009912 <_perror_r+0x112>
 8009878:	b003      	add	sp, #12
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987c:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <_perror_r+0x128>)
 800987e:	429c      	cmp	r4, r3
 8009880:	d101      	bne.n	8009886 <_perror_r+0x86>
 8009882:	68ac      	ldr	r4, [r5, #8]
 8009884:	e7c8      	b.n	8009818 <_perror_r+0x18>
 8009886:	4b29      	ldr	r3, [pc, #164]	; (800992c <_perror_r+0x12c>)
 8009888:	429c      	cmp	r4, r3
 800988a:	bf08      	it	eq
 800988c:	68ec      	ldreq	r4, [r5, #12]
 800988e:	e7c3      	b.n	8009818 <_perror_r+0x18>
 8009890:	7833      	ldrb	r3, [r6, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ce      	beq.n	8009834 <_perror_r+0x34>
 8009896:	4630      	mov	r0, r6
 8009898:	f7f6 fc7c 	bl	8000194 <strlen>
 800989c:	4607      	mov	r7, r0
 800989e:	b157      	cbz	r7, 80098b6 <_perror_r+0xb6>
 80098a0:	4620      	mov	r0, r4
 80098a2:	f001 faf9 	bl	800ae98 <fileno>
 80098a6:	463b      	mov	r3, r7
 80098a8:	4601      	mov	r1, r0
 80098aa:	4632      	mov	r2, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 fb35 	bl	8009f1c <_write_r>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	da14      	bge.n	80098e0 <_perror_r+0xe0>
 80098b6:	481e      	ldr	r0, [pc, #120]	; (8009930 <_perror_r+0x130>)
 80098b8:	4f1d      	ldr	r7, [pc, #116]	; (8009930 <_perror_r+0x130>)
 80098ba:	f7f6 fc6b 	bl	8000194 <strlen>
 80098be:	4606      	mov	r6, r0
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	d0b7      	beq.n	8009834 <_perror_r+0x34>
 80098c4:	4620      	mov	r0, r4
 80098c6:	f001 fae7 	bl	800ae98 <fileno>
 80098ca:	4633      	mov	r3, r6
 80098cc:	4601      	mov	r1, r0
 80098ce:	463a      	mov	r2, r7
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 fb23 	bl	8009f1c <_write_r>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	dbac      	blt.n	8009834 <_perror_r+0x34>
 80098da:	1a36      	subs	r6, r6, r0
 80098dc:	4407      	add	r7, r0
 80098de:	e7ef      	b.n	80098c0 <_perror_r+0xc0>
 80098e0:	1a3f      	subs	r7, r7, r0
 80098e2:	4406      	add	r6, r0
 80098e4:	e7db      	b.n	800989e <_perror_r+0x9e>
 80098e6:	f7f6 fc55 	bl	8000194 <strlen>
 80098ea:	4606      	mov	r6, r0
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	d0aa      	beq.n	8009846 <_perror_r+0x46>
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 fad1 	bl	800ae98 <fileno>
 80098f6:	4633      	mov	r3, r6
 80098f8:	4601      	mov	r1, r0
 80098fa:	463a      	mov	r2, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 fb0d 	bl	8009f1c <_write_r>
 8009902:	2800      	cmp	r0, #0
 8009904:	db9f      	blt.n	8009846 <_perror_r+0x46>
 8009906:	1a36      	subs	r6, r6, r0
 8009908:	4407      	add	r7, r0
 800990a:	e7ef      	b.n	80098ec <_perror_r+0xec>
 800990c:	1a36      	subs	r6, r6, r0
 800990e:	4407      	add	r7, r0
 8009910:	e79e      	b.n	8009850 <_perror_r+0x50>
 8009912:	059b      	lsls	r3, r3, #22
 8009914:	d4b0      	bmi.n	8009878 <_perror_r+0x78>
 8009916:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009918:	f001 fbf8 	bl	800b10c <__retarget_lock_release_recursive>
 800991c:	e7ac      	b.n	8009878 <_perror_r+0x78>
 800991e:	bf00      	nop
 8009920:	0800ce24 	.word	0x0800ce24
 8009924:	0800d017 	.word	0x0800d017
 8009928:	0800ce44 	.word	0x0800ce44
 800992c:	0800ce04 	.word	0x0800ce04
 8009930:	0800cfe7 	.word	0x0800cfe7

08009934 <perror>:
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <perror+0xc>)
 8009936:	4601      	mov	r1, r0
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	f7ff bf61 	b.w	8009800 <_perror_r>
 800993e:	bf00      	nop
 8009940:	2000000c 	.word	0x2000000c

08009944 <iprintf>:
 8009944:	b40f      	push	{r0, r1, r2, r3}
 8009946:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <iprintf+0x2c>)
 8009948:	b513      	push	{r0, r1, r4, lr}
 800994a:	681c      	ldr	r4, [r3, #0]
 800994c:	b124      	cbz	r4, 8009958 <iprintf+0x14>
 800994e:	69a3      	ldr	r3, [r4, #24]
 8009950:	b913      	cbnz	r3, 8009958 <iprintf+0x14>
 8009952:	4620      	mov	r0, r4
 8009954:	f001 fb36 	bl	800afc4 <__sinit>
 8009958:	ab05      	add	r3, sp, #20
 800995a:	9a04      	ldr	r2, [sp, #16]
 800995c:	68a1      	ldr	r1, [r4, #8]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	4620      	mov	r0, r4
 8009962:	f002 f80b 	bl	800b97c <_vfiprintf_r>
 8009966:	b002      	add	sp, #8
 8009968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996c:	b004      	add	sp, #16
 800996e:	4770      	bx	lr
 8009970:	2000000c 	.word	0x2000000c

08009974 <putchar>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4b08      	ldr	r3, [pc, #32]	; (8009998 <putchar+0x24>)
 8009978:	681c      	ldr	r4, [r3, #0]
 800997a:	4605      	mov	r5, r0
 800997c:	b124      	cbz	r4, 8009988 <putchar+0x14>
 800997e:	69a3      	ldr	r3, [r4, #24]
 8009980:	b913      	cbnz	r3, 8009988 <putchar+0x14>
 8009982:	4620      	mov	r0, r4
 8009984:	f001 fb1e 	bl	800afc4 <__sinit>
 8009988:	68a2      	ldr	r2, [r4, #8]
 800998a:	4629      	mov	r1, r5
 800998c:	4620      	mov	r0, r4
 800998e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009992:	f002 b923 	b.w	800bbdc <_putc_r>
 8009996:	bf00      	nop
 8009998:	2000000c 	.word	0x2000000c

0800999c <_puts_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4605      	mov	r5, r0
 80099a2:	b118      	cbz	r0, 80099ac <_puts_r+0x10>
 80099a4:	6983      	ldr	r3, [r0, #24]
 80099a6:	b90b      	cbnz	r3, 80099ac <_puts_r+0x10>
 80099a8:	f001 fb0c 	bl	800afc4 <__sinit>
 80099ac:	69ab      	ldr	r3, [r5, #24]
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	b913      	cbnz	r3, 80099b8 <_puts_r+0x1c>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f001 fb06 	bl	800afc4 <__sinit>
 80099b8:	4b2c      	ldr	r3, [pc, #176]	; (8009a6c <_puts_r+0xd0>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d120      	bne.n	8009a00 <_puts_r+0x64>
 80099be:	686c      	ldr	r4, [r5, #4]
 80099c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c2:	07db      	lsls	r3, r3, #31
 80099c4:	d405      	bmi.n	80099d2 <_puts_r+0x36>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0598      	lsls	r0, r3, #22
 80099ca:	d402      	bmi.n	80099d2 <_puts_r+0x36>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f001 fb9c 	bl	800b10a <__retarget_lock_acquire_recursive>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0719      	lsls	r1, r3, #28
 80099d6:	d51d      	bpl.n	8009a14 <_puts_r+0x78>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b1db      	cbz	r3, 8009a14 <_puts_r+0x78>
 80099dc:	3e01      	subs	r6, #1
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099e4:	3b01      	subs	r3, #1
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	bb39      	cbnz	r1, 8009a3a <_puts_r+0x9e>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da38      	bge.n	8009a60 <_puts_r+0xc4>
 80099ee:	4622      	mov	r2, r4
 80099f0:	210a      	movs	r1, #10
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 fa40 	bl	8009e78 <__swbuf_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d011      	beq.n	8009a20 <_puts_r+0x84>
 80099fc:	250a      	movs	r5, #10
 80099fe:	e011      	b.n	8009a24 <_puts_r+0x88>
 8009a00:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <_puts_r+0xd4>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d101      	bne.n	8009a0a <_puts_r+0x6e>
 8009a06:	68ac      	ldr	r4, [r5, #8]
 8009a08:	e7da      	b.n	80099c0 <_puts_r+0x24>
 8009a0a:	4b1a      	ldr	r3, [pc, #104]	; (8009a74 <_puts_r+0xd8>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bf08      	it	eq
 8009a10:	68ec      	ldreq	r4, [r5, #12]
 8009a12:	e7d5      	b.n	80099c0 <_puts_r+0x24>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 fa92 	bl	8009f40 <__swsetup_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d0dd      	beq.n	80099dc <_puts_r+0x40>
 8009a20:	f04f 35ff 	mov.w	r5, #4294967295
 8009a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f001 fb6b 	bl	800b10c <__retarget_lock_release_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da04      	bge.n	8009a48 <_puts_r+0xac>
 8009a3e:	69a2      	ldr	r2, [r4, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	dc06      	bgt.n	8009a52 <_puts_r+0xb6>
 8009a44:	290a      	cmp	r1, #10
 8009a46:	d004      	beq.n	8009a52 <_puts_r+0xb6>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	e7c5      	b.n	80099de <_puts_r+0x42>
 8009a52:	4622      	mov	r2, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 fa0f 	bl	8009e78 <__swbuf_r>
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d1bf      	bne.n	80099de <_puts_r+0x42>
 8009a5e:	e7df      	b.n	8009a20 <_puts_r+0x84>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	250a      	movs	r5, #10
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	701d      	strb	r5, [r3, #0]
 8009a6a:	e7db      	b.n	8009a24 <_puts_r+0x88>
 8009a6c:	0800ce24 	.word	0x0800ce24
 8009a70:	0800ce44 	.word	0x0800ce44
 8009a74:	0800ce04 	.word	0x0800ce04

08009a78 <puts>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <puts+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f7ff bf8d 	b.w	800999c <_puts_r>
 8009a82:	bf00      	nop
 8009a84:	2000000c 	.word	0x2000000c

08009a88 <_sbrk_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d06      	ldr	r5, [pc, #24]	; (8009aa4 <_sbrk_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f7f7 ff28 	bl	80018e8 <_sbrk>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_sbrk_r+0x1a>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_sbrk_r+0x1a>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	200005f8 	.word	0x200005f8

08009aa8 <_strerror_r>:
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	4611      	mov	r1, r2
 8009ab0:	288e      	cmp	r0, #142	; 0x8e
 8009ab2:	f200 812f 	bhi.w	8009d14 <_strerror_r+0x26c>
 8009ab6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009aba:	0138      	.short	0x0138
 8009abc:	0091008f 	.word	0x0091008f
 8009ac0:	00950093 	.word	0x00950093
 8009ac4:	00990097 	.word	0x00990097
 8009ac8:	009d009b 	.word	0x009d009b
 8009acc:	00a300a1 	.word	0x00a300a1
 8009ad0:	00a900a7 	.word	0x00a900a7
 8009ad4:	00ad00ab 	.word	0x00ad00ab
 8009ad8:	00af012d 	.word	0x00af012d
 8009adc:	00b300b1 	.word	0x00b300b1
 8009ae0:	00b700b5 	.word	0x00b700b5
 8009ae4:	00bf00bd 	.word	0x00bf00bd
 8009ae8:	00c700c5 	.word	0x00c700c5
 8009aec:	00cb00c9 	.word	0x00cb00c9
 8009af0:	00d100cd 	.word	0x00d100cd
 8009af4:	00d700d5 	.word	0x00d700d5
 8009af8:	00db00d9 	.word	0x00db00d9
 8009afc:	00df00dd 	.word	0x00df00dd
 8009b00:	00e300e1 	.word	0x00e300e1
 8009b04:	012d012d 	.word	0x012d012d
 8009b08:	012d012d 	.word	0x012d012d
 8009b0c:	012d012d 	.word	0x012d012d
 8009b10:	012d012d 	.word	0x012d012d
 8009b14:	00eb00e7 	.word	0x00eb00e7
 8009b18:	012d012d 	.word	0x012d012d
 8009b1c:	012d012d 	.word	0x012d012d
 8009b20:	012d012d 	.word	0x012d012d
 8009b24:	012d012d 	.word	0x012d012d
 8009b28:	012d012d 	.word	0x012d012d
 8009b2c:	012d012d 	.word	0x012d012d
 8009b30:	00ed012d 	.word	0x00ed012d
 8009b34:	00ef0107 	.word	0x00ef0107
 8009b38:	012d00f1 	.word	0x012d00f1
 8009b3c:	012d012d 	.word	0x012d012d
 8009b40:	012d00f3 	.word	0x012d00f3
 8009b44:	012d012d 	.word	0x012d012d
 8009b48:	012d00f5 	.word	0x012d00f5
 8009b4c:	00f9012d 	.word	0x00f9012d
 8009b50:	012d012d 	.word	0x012d012d
 8009b54:	012d00fb 	.word	0x012d00fb
 8009b58:	012d012d 	.word	0x012d012d
 8009b5c:	012d012d 	.word	0x012d012d
 8009b60:	012d012d 	.word	0x012d012d
 8009b64:	012d012d 	.word	0x012d012d
 8009b68:	00fd012d 	.word	0x00fd012d
 8009b6c:	00ff012d 	.word	0x00ff012d
 8009b70:	01030101 	.word	0x01030101
 8009b74:	012d012d 	.word	0x012d012d
 8009b78:	012d0125 	.word	0x012d0125
 8009b7c:	012d012d 	.word	0x012d012d
 8009b80:	012d012d 	.word	0x012d012d
 8009b84:	012d012d 	.word	0x012d012d
 8009b88:	0113012d 	.word	0x0113012d
 8009b8c:	01090105 	.word	0x01090105
 8009b90:	010d010b 	.word	0x010d010b
 8009b94:	012d010f 	.word	0x012d010f
 8009b98:	01150111 	.word	0x01150111
 8009b9c:	00e90119 	.word	0x00e90119
 8009ba0:	012b00c1 	.word	0x012b00c1
 8009ba4:	00cf00b9 	.word	0x00cf00b9
 8009ba8:	009f00bb 	.word	0x009f00bb
 8009bac:	012900a5 	.word	0x012900a5
 8009bb0:	012d00f7 	.word	0x012d00f7
 8009bb4:	00c30117 	.word	0x00c30117
 8009bb8:	011b011d 	.word	0x011b011d
 8009bbc:	012d012d 	.word	0x012d012d
 8009bc0:	012d012d 	.word	0x012d012d
 8009bc4:	00d3012d 	.word	0x00d3012d
 8009bc8:	012d012d 	.word	0x012d012d
 8009bcc:	00e5012d 	.word	0x00e5012d
 8009bd0:	011f0127 	.word	0x011f0127
 8009bd4:	01230121 	.word	0x01230121
 8009bd8:	4855      	ldr	r0, [pc, #340]	; (8009d30 <_strerror_r+0x288>)
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	4855      	ldr	r0, [pc, #340]	; (8009d34 <_strerror_r+0x28c>)
 8009bde:	e7fc      	b.n	8009bda <_strerror_r+0x132>
 8009be0:	4855      	ldr	r0, [pc, #340]	; (8009d38 <_strerror_r+0x290>)
 8009be2:	e7fa      	b.n	8009bda <_strerror_r+0x132>
 8009be4:	4855      	ldr	r0, [pc, #340]	; (8009d3c <_strerror_r+0x294>)
 8009be6:	e7f8      	b.n	8009bda <_strerror_r+0x132>
 8009be8:	4855      	ldr	r0, [pc, #340]	; (8009d40 <_strerror_r+0x298>)
 8009bea:	e7f6      	b.n	8009bda <_strerror_r+0x132>
 8009bec:	4855      	ldr	r0, [pc, #340]	; (8009d44 <_strerror_r+0x29c>)
 8009bee:	e7f4      	b.n	8009bda <_strerror_r+0x132>
 8009bf0:	4855      	ldr	r0, [pc, #340]	; (8009d48 <_strerror_r+0x2a0>)
 8009bf2:	e7f2      	b.n	8009bda <_strerror_r+0x132>
 8009bf4:	4855      	ldr	r0, [pc, #340]	; (8009d4c <_strerror_r+0x2a4>)
 8009bf6:	e7f0      	b.n	8009bda <_strerror_r+0x132>
 8009bf8:	4855      	ldr	r0, [pc, #340]	; (8009d50 <_strerror_r+0x2a8>)
 8009bfa:	e7ee      	b.n	8009bda <_strerror_r+0x132>
 8009bfc:	4855      	ldr	r0, [pc, #340]	; (8009d54 <_strerror_r+0x2ac>)
 8009bfe:	e7ec      	b.n	8009bda <_strerror_r+0x132>
 8009c00:	4855      	ldr	r0, [pc, #340]	; (8009d58 <_strerror_r+0x2b0>)
 8009c02:	e7ea      	b.n	8009bda <_strerror_r+0x132>
 8009c04:	4855      	ldr	r0, [pc, #340]	; (8009d5c <_strerror_r+0x2b4>)
 8009c06:	e7e8      	b.n	8009bda <_strerror_r+0x132>
 8009c08:	4855      	ldr	r0, [pc, #340]	; (8009d60 <_strerror_r+0x2b8>)
 8009c0a:	e7e6      	b.n	8009bda <_strerror_r+0x132>
 8009c0c:	4855      	ldr	r0, [pc, #340]	; (8009d64 <_strerror_r+0x2bc>)
 8009c0e:	e7e4      	b.n	8009bda <_strerror_r+0x132>
 8009c10:	4855      	ldr	r0, [pc, #340]	; (8009d68 <_strerror_r+0x2c0>)
 8009c12:	e7e2      	b.n	8009bda <_strerror_r+0x132>
 8009c14:	4855      	ldr	r0, [pc, #340]	; (8009d6c <_strerror_r+0x2c4>)
 8009c16:	e7e0      	b.n	8009bda <_strerror_r+0x132>
 8009c18:	4855      	ldr	r0, [pc, #340]	; (8009d70 <_strerror_r+0x2c8>)
 8009c1a:	e7de      	b.n	8009bda <_strerror_r+0x132>
 8009c1c:	4855      	ldr	r0, [pc, #340]	; (8009d74 <_strerror_r+0x2cc>)
 8009c1e:	e7dc      	b.n	8009bda <_strerror_r+0x132>
 8009c20:	4855      	ldr	r0, [pc, #340]	; (8009d78 <_strerror_r+0x2d0>)
 8009c22:	e7da      	b.n	8009bda <_strerror_r+0x132>
 8009c24:	4855      	ldr	r0, [pc, #340]	; (8009d7c <_strerror_r+0x2d4>)
 8009c26:	e7d8      	b.n	8009bda <_strerror_r+0x132>
 8009c28:	4855      	ldr	r0, [pc, #340]	; (8009d80 <_strerror_r+0x2d8>)
 8009c2a:	e7d6      	b.n	8009bda <_strerror_r+0x132>
 8009c2c:	4855      	ldr	r0, [pc, #340]	; (8009d84 <_strerror_r+0x2dc>)
 8009c2e:	e7d4      	b.n	8009bda <_strerror_r+0x132>
 8009c30:	4855      	ldr	r0, [pc, #340]	; (8009d88 <_strerror_r+0x2e0>)
 8009c32:	e7d2      	b.n	8009bda <_strerror_r+0x132>
 8009c34:	4855      	ldr	r0, [pc, #340]	; (8009d8c <_strerror_r+0x2e4>)
 8009c36:	e7d0      	b.n	8009bda <_strerror_r+0x132>
 8009c38:	4855      	ldr	r0, [pc, #340]	; (8009d90 <_strerror_r+0x2e8>)
 8009c3a:	e7ce      	b.n	8009bda <_strerror_r+0x132>
 8009c3c:	4855      	ldr	r0, [pc, #340]	; (8009d94 <_strerror_r+0x2ec>)
 8009c3e:	e7cc      	b.n	8009bda <_strerror_r+0x132>
 8009c40:	4855      	ldr	r0, [pc, #340]	; (8009d98 <_strerror_r+0x2f0>)
 8009c42:	e7ca      	b.n	8009bda <_strerror_r+0x132>
 8009c44:	4855      	ldr	r0, [pc, #340]	; (8009d9c <_strerror_r+0x2f4>)
 8009c46:	e7c8      	b.n	8009bda <_strerror_r+0x132>
 8009c48:	4855      	ldr	r0, [pc, #340]	; (8009da0 <_strerror_r+0x2f8>)
 8009c4a:	e7c6      	b.n	8009bda <_strerror_r+0x132>
 8009c4c:	4855      	ldr	r0, [pc, #340]	; (8009da4 <_strerror_r+0x2fc>)
 8009c4e:	e7c4      	b.n	8009bda <_strerror_r+0x132>
 8009c50:	4855      	ldr	r0, [pc, #340]	; (8009da8 <_strerror_r+0x300>)
 8009c52:	e7c2      	b.n	8009bda <_strerror_r+0x132>
 8009c54:	4855      	ldr	r0, [pc, #340]	; (8009dac <_strerror_r+0x304>)
 8009c56:	e7c0      	b.n	8009bda <_strerror_r+0x132>
 8009c58:	4855      	ldr	r0, [pc, #340]	; (8009db0 <_strerror_r+0x308>)
 8009c5a:	e7be      	b.n	8009bda <_strerror_r+0x132>
 8009c5c:	4855      	ldr	r0, [pc, #340]	; (8009db4 <_strerror_r+0x30c>)
 8009c5e:	e7bc      	b.n	8009bda <_strerror_r+0x132>
 8009c60:	4855      	ldr	r0, [pc, #340]	; (8009db8 <_strerror_r+0x310>)
 8009c62:	e7ba      	b.n	8009bda <_strerror_r+0x132>
 8009c64:	4855      	ldr	r0, [pc, #340]	; (8009dbc <_strerror_r+0x314>)
 8009c66:	e7b8      	b.n	8009bda <_strerror_r+0x132>
 8009c68:	4855      	ldr	r0, [pc, #340]	; (8009dc0 <_strerror_r+0x318>)
 8009c6a:	e7b6      	b.n	8009bda <_strerror_r+0x132>
 8009c6c:	4855      	ldr	r0, [pc, #340]	; (8009dc4 <_strerror_r+0x31c>)
 8009c6e:	e7b4      	b.n	8009bda <_strerror_r+0x132>
 8009c70:	4855      	ldr	r0, [pc, #340]	; (8009dc8 <_strerror_r+0x320>)
 8009c72:	e7b2      	b.n	8009bda <_strerror_r+0x132>
 8009c74:	4855      	ldr	r0, [pc, #340]	; (8009dcc <_strerror_r+0x324>)
 8009c76:	e7b0      	b.n	8009bda <_strerror_r+0x132>
 8009c78:	4855      	ldr	r0, [pc, #340]	; (8009dd0 <_strerror_r+0x328>)
 8009c7a:	e7ae      	b.n	8009bda <_strerror_r+0x132>
 8009c7c:	4855      	ldr	r0, [pc, #340]	; (8009dd4 <_strerror_r+0x32c>)
 8009c7e:	e7ac      	b.n	8009bda <_strerror_r+0x132>
 8009c80:	4855      	ldr	r0, [pc, #340]	; (8009dd8 <_strerror_r+0x330>)
 8009c82:	e7aa      	b.n	8009bda <_strerror_r+0x132>
 8009c84:	4855      	ldr	r0, [pc, #340]	; (8009ddc <_strerror_r+0x334>)
 8009c86:	e7a8      	b.n	8009bda <_strerror_r+0x132>
 8009c88:	4855      	ldr	r0, [pc, #340]	; (8009de0 <_strerror_r+0x338>)
 8009c8a:	e7a6      	b.n	8009bda <_strerror_r+0x132>
 8009c8c:	4855      	ldr	r0, [pc, #340]	; (8009de4 <_strerror_r+0x33c>)
 8009c8e:	e7a4      	b.n	8009bda <_strerror_r+0x132>
 8009c90:	4855      	ldr	r0, [pc, #340]	; (8009de8 <_strerror_r+0x340>)
 8009c92:	e7a2      	b.n	8009bda <_strerror_r+0x132>
 8009c94:	4855      	ldr	r0, [pc, #340]	; (8009dec <_strerror_r+0x344>)
 8009c96:	e7a0      	b.n	8009bda <_strerror_r+0x132>
 8009c98:	4855      	ldr	r0, [pc, #340]	; (8009df0 <_strerror_r+0x348>)
 8009c9a:	e79e      	b.n	8009bda <_strerror_r+0x132>
 8009c9c:	4855      	ldr	r0, [pc, #340]	; (8009df4 <_strerror_r+0x34c>)
 8009c9e:	e79c      	b.n	8009bda <_strerror_r+0x132>
 8009ca0:	4855      	ldr	r0, [pc, #340]	; (8009df8 <_strerror_r+0x350>)
 8009ca2:	e79a      	b.n	8009bda <_strerror_r+0x132>
 8009ca4:	4855      	ldr	r0, [pc, #340]	; (8009dfc <_strerror_r+0x354>)
 8009ca6:	e798      	b.n	8009bda <_strerror_r+0x132>
 8009ca8:	4855      	ldr	r0, [pc, #340]	; (8009e00 <_strerror_r+0x358>)
 8009caa:	e796      	b.n	8009bda <_strerror_r+0x132>
 8009cac:	4855      	ldr	r0, [pc, #340]	; (8009e04 <_strerror_r+0x35c>)
 8009cae:	e794      	b.n	8009bda <_strerror_r+0x132>
 8009cb0:	4855      	ldr	r0, [pc, #340]	; (8009e08 <_strerror_r+0x360>)
 8009cb2:	e792      	b.n	8009bda <_strerror_r+0x132>
 8009cb4:	4855      	ldr	r0, [pc, #340]	; (8009e0c <_strerror_r+0x364>)
 8009cb6:	e790      	b.n	8009bda <_strerror_r+0x132>
 8009cb8:	4855      	ldr	r0, [pc, #340]	; (8009e10 <_strerror_r+0x368>)
 8009cba:	e78e      	b.n	8009bda <_strerror_r+0x132>
 8009cbc:	4855      	ldr	r0, [pc, #340]	; (8009e14 <_strerror_r+0x36c>)
 8009cbe:	e78c      	b.n	8009bda <_strerror_r+0x132>
 8009cc0:	4855      	ldr	r0, [pc, #340]	; (8009e18 <_strerror_r+0x370>)
 8009cc2:	e78a      	b.n	8009bda <_strerror_r+0x132>
 8009cc4:	4855      	ldr	r0, [pc, #340]	; (8009e1c <_strerror_r+0x374>)
 8009cc6:	e788      	b.n	8009bda <_strerror_r+0x132>
 8009cc8:	4855      	ldr	r0, [pc, #340]	; (8009e20 <_strerror_r+0x378>)
 8009cca:	e786      	b.n	8009bda <_strerror_r+0x132>
 8009ccc:	4855      	ldr	r0, [pc, #340]	; (8009e24 <_strerror_r+0x37c>)
 8009cce:	e784      	b.n	8009bda <_strerror_r+0x132>
 8009cd0:	4855      	ldr	r0, [pc, #340]	; (8009e28 <_strerror_r+0x380>)
 8009cd2:	e782      	b.n	8009bda <_strerror_r+0x132>
 8009cd4:	4855      	ldr	r0, [pc, #340]	; (8009e2c <_strerror_r+0x384>)
 8009cd6:	e780      	b.n	8009bda <_strerror_r+0x132>
 8009cd8:	4855      	ldr	r0, [pc, #340]	; (8009e30 <_strerror_r+0x388>)
 8009cda:	e77e      	b.n	8009bda <_strerror_r+0x132>
 8009cdc:	4855      	ldr	r0, [pc, #340]	; (8009e34 <_strerror_r+0x38c>)
 8009cde:	e77c      	b.n	8009bda <_strerror_r+0x132>
 8009ce0:	4855      	ldr	r0, [pc, #340]	; (8009e38 <_strerror_r+0x390>)
 8009ce2:	e77a      	b.n	8009bda <_strerror_r+0x132>
 8009ce4:	4855      	ldr	r0, [pc, #340]	; (8009e3c <_strerror_r+0x394>)
 8009ce6:	e778      	b.n	8009bda <_strerror_r+0x132>
 8009ce8:	4855      	ldr	r0, [pc, #340]	; (8009e40 <_strerror_r+0x398>)
 8009cea:	e776      	b.n	8009bda <_strerror_r+0x132>
 8009cec:	4855      	ldr	r0, [pc, #340]	; (8009e44 <_strerror_r+0x39c>)
 8009cee:	e774      	b.n	8009bda <_strerror_r+0x132>
 8009cf0:	4855      	ldr	r0, [pc, #340]	; (8009e48 <_strerror_r+0x3a0>)
 8009cf2:	e772      	b.n	8009bda <_strerror_r+0x132>
 8009cf4:	4855      	ldr	r0, [pc, #340]	; (8009e4c <_strerror_r+0x3a4>)
 8009cf6:	e770      	b.n	8009bda <_strerror_r+0x132>
 8009cf8:	4855      	ldr	r0, [pc, #340]	; (8009e50 <_strerror_r+0x3a8>)
 8009cfa:	e76e      	b.n	8009bda <_strerror_r+0x132>
 8009cfc:	4855      	ldr	r0, [pc, #340]	; (8009e54 <_strerror_r+0x3ac>)
 8009cfe:	e76c      	b.n	8009bda <_strerror_r+0x132>
 8009d00:	4855      	ldr	r0, [pc, #340]	; (8009e58 <_strerror_r+0x3b0>)
 8009d02:	e76a      	b.n	8009bda <_strerror_r+0x132>
 8009d04:	4855      	ldr	r0, [pc, #340]	; (8009e5c <_strerror_r+0x3b4>)
 8009d06:	e768      	b.n	8009bda <_strerror_r+0x132>
 8009d08:	4855      	ldr	r0, [pc, #340]	; (8009e60 <_strerror_r+0x3b8>)
 8009d0a:	e766      	b.n	8009bda <_strerror_r+0x132>
 8009d0c:	4855      	ldr	r0, [pc, #340]	; (8009e64 <_strerror_r+0x3bc>)
 8009d0e:	e764      	b.n	8009bda <_strerror_r+0x132>
 8009d10:	4855      	ldr	r0, [pc, #340]	; (8009e68 <_strerror_r+0x3c0>)
 8009d12:	e762      	b.n	8009bda <_strerror_r+0x132>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bf14      	ite	ne
 8009d18:	461a      	movne	r2, r3
 8009d1a:	4622      	moveq	r2, r4
 8009d1c:	f000 f8aa 	bl	8009e74 <_user_strerror>
 8009d20:	4b52      	ldr	r3, [pc, #328]	; (8009e6c <_strerror_r+0x3c4>)
 8009d22:	2800      	cmp	r0, #0
 8009d24:	bf08      	it	eq
 8009d26:	4618      	moveq	r0, r3
 8009d28:	e757      	b.n	8009bda <_strerror_r+0x132>
 8009d2a:	4851      	ldr	r0, [pc, #324]	; (8009e70 <_strerror_r+0x3c8>)
 8009d2c:	e755      	b.n	8009bda <_strerror_r+0x132>
 8009d2e:	bf00      	nop
 8009d30:	0800c6d8 	.word	0x0800c6d8
 8009d34:	0800c6e2 	.word	0x0800c6e2
 8009d38:	0800c6fc 	.word	0x0800c6fc
 8009d3c:	0800c70c 	.word	0x0800c70c
 8009d40:	0800c724 	.word	0x0800c724
 8009d44:	0800c72e 	.word	0x0800c72e
 8009d48:	0800c748 	.word	0x0800c748
 8009d4c:	0800c75a 	.word	0x0800c75a
 8009d50:	0800c76c 	.word	0x0800c76c
 8009d54:	0800c785 	.word	0x0800c785
 8009d58:	0800c795 	.word	0x0800c795
 8009d5c:	0800c7a1 	.word	0x0800c7a1
 8009d60:	0800c7be 	.word	0x0800c7be
 8009d64:	0800c7d0 	.word	0x0800c7d0
 8009d68:	0800c7e1 	.word	0x0800c7e1
 8009d6c:	0800c7f3 	.word	0x0800c7f3
 8009d70:	0800c7ff 	.word	0x0800c7ff
 8009d74:	0800c817 	.word	0x0800c817
 8009d78:	0800c823 	.word	0x0800c823
 8009d7c:	0800c835 	.word	0x0800c835
 8009d80:	0800c844 	.word	0x0800c844
 8009d84:	0800c854 	.word	0x0800c854
 8009d88:	0800c861 	.word	0x0800c861
 8009d8c:	0800c880 	.word	0x0800c880
 8009d90:	0800c88f 	.word	0x0800c88f
 8009d94:	0800c8a0 	.word	0x0800c8a0
 8009d98:	0800c8c4 	.word	0x0800c8c4
 8009d9c:	0800c8e2 	.word	0x0800c8e2
 8009da0:	0800c900 	.word	0x0800c900
 8009da4:	0800c920 	.word	0x0800c920
 8009da8:	0800c937 	.word	0x0800c937
 8009dac:	0800c946 	.word	0x0800c946
 8009db0:	0800c955 	.word	0x0800c955
 8009db4:	0800c969 	.word	0x0800c969
 8009db8:	0800c981 	.word	0x0800c981
 8009dbc:	0800c98f 	.word	0x0800c98f
 8009dc0:	0800c99c 	.word	0x0800c99c
 8009dc4:	0800c9b2 	.word	0x0800c9b2
 8009dc8:	0800c9c1 	.word	0x0800c9c1
 8009dcc:	0800c9cd 	.word	0x0800c9cd
 8009dd0:	0800c9fc 	.word	0x0800c9fc
 8009dd4:	0800ca0d 	.word	0x0800ca0d
 8009dd8:	0800ca28 	.word	0x0800ca28
 8009ddc:	0800ca3b 	.word	0x0800ca3b
 8009de0:	0800ca51 	.word	0x0800ca51
 8009de4:	0800ca5a 	.word	0x0800ca5a
 8009de8:	0800ca71 	.word	0x0800ca71
 8009dec:	0800ca79 	.word	0x0800ca79
 8009df0:	0800ca86 	.word	0x0800ca86
 8009df4:	0800ca9b 	.word	0x0800ca9b
 8009df8:	0800caaf 	.word	0x0800caaf
 8009dfc:	0800cac7 	.word	0x0800cac7
 8009e00:	0800cad6 	.word	0x0800cad6
 8009e04:	0800cae7 	.word	0x0800cae7
 8009e08:	0800cafa 	.word	0x0800cafa
 8009e0c:	0800cb06 	.word	0x0800cb06
 8009e10:	0800cb1f 	.word	0x0800cb1f
 8009e14:	0800cb33 	.word	0x0800cb33
 8009e18:	0800cb4e 	.word	0x0800cb4e
 8009e1c:	0800cb66 	.word	0x0800cb66
 8009e20:	0800cb80 	.word	0x0800cb80
 8009e24:	0800cb88 	.word	0x0800cb88
 8009e28:	0800cbb8 	.word	0x0800cbb8
 8009e2c:	0800cbd7 	.word	0x0800cbd7
 8009e30:	0800cbf6 	.word	0x0800cbf6
 8009e34:	0800cc0d 	.word	0x0800cc0d
 8009e38:	0800cc20 	.word	0x0800cc20
 8009e3c:	0800cc39 	.word	0x0800cc39
 8009e40:	0800cc50 	.word	0x0800cc50
 8009e44:	0800cc66 	.word	0x0800cc66
 8009e48:	0800cc87 	.word	0x0800cc87
 8009e4c:	0800cc9f 	.word	0x0800cc9f
 8009e50:	0800ccbb 	.word	0x0800ccbb
 8009e54:	0800ccce 	.word	0x0800ccce
 8009e58:	0800cce4 	.word	0x0800cce4
 8009e5c:	0800ccf8 	.word	0x0800ccf8
 8009e60:	0800cd1a 	.word	0x0800cd1a
 8009e64:	0800cd40 	.word	0x0800cd40
 8009e68:	0800cd51 	.word	0x0800cd51
 8009e6c:	0800d018 	.word	0x0800d018
 8009e70:	0800cd66 	.word	0x0800cd66

08009e74 <_user_strerror>:
 8009e74:	2000      	movs	r0, #0
 8009e76:	4770      	bx	lr

08009e78 <__swbuf_r>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	4605      	mov	r5, r0
 8009e80:	b118      	cbz	r0, 8009e8a <__swbuf_r+0x12>
 8009e82:	6983      	ldr	r3, [r0, #24]
 8009e84:	b90b      	cbnz	r3, 8009e8a <__swbuf_r+0x12>
 8009e86:	f001 f89d 	bl	800afc4 <__sinit>
 8009e8a:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <__swbuf_r+0x98>)
 8009e8c:	429c      	cmp	r4, r3
 8009e8e:	d12b      	bne.n	8009ee8 <__swbuf_r+0x70>
 8009e90:	686c      	ldr	r4, [r5, #4]
 8009e92:	69a3      	ldr	r3, [r4, #24]
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	071a      	lsls	r2, r3, #28
 8009e9a:	d52f      	bpl.n	8009efc <__swbuf_r+0x84>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b36b      	cbz	r3, 8009efc <__swbuf_r+0x84>
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	6820      	ldr	r0, [r4, #0]
 8009ea4:	1ac0      	subs	r0, r0, r3
 8009ea6:	6963      	ldr	r3, [r4, #20]
 8009ea8:	b2f6      	uxtb	r6, r6
 8009eaa:	4283      	cmp	r3, r0
 8009eac:	4637      	mov	r7, r6
 8009eae:	dc04      	bgt.n	8009eba <__swbuf_r+0x42>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 ffb4 	bl	800ae20 <_fflush_r>
 8009eb8:	bb30      	cbnz	r0, 8009f08 <__swbuf_r+0x90>
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	701e      	strb	r6, [r3, #0]
 8009ec8:	6963      	ldr	r3, [r4, #20]
 8009eca:	3001      	adds	r0, #1
 8009ecc:	4283      	cmp	r3, r0
 8009ece:	d004      	beq.n	8009eda <__swbuf_r+0x62>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	07db      	lsls	r3, r3, #31
 8009ed4:	d506      	bpl.n	8009ee4 <__swbuf_r+0x6c>
 8009ed6:	2e0a      	cmp	r6, #10
 8009ed8:	d104      	bne.n	8009ee4 <__swbuf_r+0x6c>
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 ff9f 	bl	800ae20 <_fflush_r>
 8009ee2:	b988      	cbnz	r0, 8009f08 <__swbuf_r+0x90>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <__swbuf_r+0x9c>)
 8009eea:	429c      	cmp	r4, r3
 8009eec:	d101      	bne.n	8009ef2 <__swbuf_r+0x7a>
 8009eee:	68ac      	ldr	r4, [r5, #8]
 8009ef0:	e7cf      	b.n	8009e92 <__swbuf_r+0x1a>
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <__swbuf_r+0xa0>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	bf08      	it	eq
 8009ef8:	68ec      	ldreq	r4, [r5, #12]
 8009efa:	e7ca      	b.n	8009e92 <__swbuf_r+0x1a>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f81e 	bl	8009f40 <__swsetup_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d0cb      	beq.n	8009ea0 <__swbuf_r+0x28>
 8009f08:	f04f 37ff 	mov.w	r7, #4294967295
 8009f0c:	e7ea      	b.n	8009ee4 <__swbuf_r+0x6c>
 8009f0e:	bf00      	nop
 8009f10:	0800ce24 	.word	0x0800ce24
 8009f14:	0800ce44 	.word	0x0800ce44
 8009f18:	0800ce04 	.word	0x0800ce04

08009f1c <_write_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_write_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f7 fc90 	bl	8001850 <_write>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_write_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_write_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	200005f8 	.word	0x200005f8

08009f40 <__swsetup_r>:
 8009f40:	4b32      	ldr	r3, [pc, #200]	; (800a00c <__swsetup_r+0xcc>)
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	681d      	ldr	r5, [r3, #0]
 8009f46:	4606      	mov	r6, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	b125      	cbz	r5, 8009f56 <__swsetup_r+0x16>
 8009f4c:	69ab      	ldr	r3, [r5, #24]
 8009f4e:	b913      	cbnz	r3, 8009f56 <__swsetup_r+0x16>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f001 f837 	bl	800afc4 <__sinit>
 8009f56:	4b2e      	ldr	r3, [pc, #184]	; (800a010 <__swsetup_r+0xd0>)
 8009f58:	429c      	cmp	r4, r3
 8009f5a:	d10f      	bne.n	8009f7c <__swsetup_r+0x3c>
 8009f5c:	686c      	ldr	r4, [r5, #4]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f64:	0719      	lsls	r1, r3, #28
 8009f66:	d42c      	bmi.n	8009fc2 <__swsetup_r+0x82>
 8009f68:	06dd      	lsls	r5, r3, #27
 8009f6a:	d411      	bmi.n	8009f90 <__swsetup_r+0x50>
 8009f6c:	2309      	movs	r3, #9
 8009f6e:	6033      	str	r3, [r6, #0]
 8009f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7a:	e03e      	b.n	8009ffa <__swsetup_r+0xba>
 8009f7c:	4b25      	ldr	r3, [pc, #148]	; (800a014 <__swsetup_r+0xd4>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <__swsetup_r+0x46>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7eb      	b.n	8009f5e <__swsetup_r+0x1e>
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <__swsetup_r+0xd8>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7e6      	b.n	8009f5e <__swsetup_r+0x1e>
 8009f90:	0758      	lsls	r0, r3, #29
 8009f92:	d512      	bpl.n	8009fba <__swsetup_r+0x7a>
 8009f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f96:	b141      	cbz	r1, 8009faa <__swsetup_r+0x6a>
 8009f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	d002      	beq.n	8009fa6 <__swsetup_r+0x66>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7fe ff29 	bl	8008df8 <_free_r>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6063      	str	r3, [r4, #4]
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f043 0308 	orr.w	r3, r3, #8
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	b94b      	cbnz	r3, 8009fda <__swsetup_r+0x9a>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd0:	d003      	beq.n	8009fda <__swsetup_r+0x9a>
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f001 f8bf 	bl	800b158 <__smakebuf_r>
 8009fda:	89a0      	ldrh	r0, [r4, #12]
 8009fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe0:	f010 0301 	ands.w	r3, r0, #1
 8009fe4:	d00a      	beq.n	8009ffc <__swsetup_r+0xbc>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	425b      	negs	r3, r3
 8009fee:	61a3      	str	r3, [r4, #24]
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b943      	cbnz	r3, 800a006 <__swsetup_r+0xc6>
 8009ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ff8:	d1ba      	bne.n	8009f70 <__swsetup_r+0x30>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	0781      	lsls	r1, r0, #30
 8009ffe:	bf58      	it	pl
 800a000:	6963      	ldrpl	r3, [r4, #20]
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	e7f4      	b.n	8009ff0 <__swsetup_r+0xb0>
 800a006:	2000      	movs	r0, #0
 800a008:	e7f7      	b.n	8009ffa <__swsetup_r+0xba>
 800a00a:	bf00      	nop
 800a00c:	2000000c 	.word	0x2000000c
 800a010:	0800ce24 	.word	0x0800ce24
 800a014:	0800ce44 	.word	0x0800ce44
 800a018:	0800ce04 	.word	0x0800ce04

0800a01c <quorem>:
 800a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	6903      	ldr	r3, [r0, #16]
 800a022:	690c      	ldr	r4, [r1, #16]
 800a024:	42a3      	cmp	r3, r4
 800a026:	4607      	mov	r7, r0
 800a028:	f2c0 8081 	blt.w	800a12e <quorem+0x112>
 800a02c:	3c01      	subs	r4, #1
 800a02e:	f101 0814 	add.w	r8, r1, #20
 800a032:	f100 0514 	add.w	r5, r0, #20
 800a036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a044:	3301      	adds	r3, #1
 800a046:	429a      	cmp	r2, r3
 800a048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a04c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a050:	fbb2 f6f3 	udiv	r6, r2, r3
 800a054:	d331      	bcc.n	800a0ba <quorem+0x9e>
 800a056:	f04f 0e00 	mov.w	lr, #0
 800a05a:	4640      	mov	r0, r8
 800a05c:	46ac      	mov	ip, r5
 800a05e:	46f2      	mov	sl, lr
 800a060:	f850 2b04 	ldr.w	r2, [r0], #4
 800a064:	b293      	uxth	r3, r2
 800a066:	fb06 e303 	mla	r3, r6, r3, lr
 800a06a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a06e:	b29b      	uxth	r3, r3
 800a070:	ebaa 0303 	sub.w	r3, sl, r3
 800a074:	0c12      	lsrs	r2, r2, #16
 800a076:	f8dc a000 	ldr.w	sl, [ip]
 800a07a:	fb06 e202 	mla	r2, r6, r2, lr
 800a07e:	fa13 f38a 	uxtah	r3, r3, sl
 800a082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a086:	fa1f fa82 	uxth.w	sl, r2
 800a08a:	f8dc 2000 	ldr.w	r2, [ip]
 800a08e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a096:	b29b      	uxth	r3, r3
 800a098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a09c:	4581      	cmp	r9, r0
 800a09e:	f84c 3b04 	str.w	r3, [ip], #4
 800a0a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0a6:	d2db      	bcs.n	800a060 <quorem+0x44>
 800a0a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0ac:	b92b      	cbnz	r3, 800a0ba <quorem+0x9e>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	d32e      	bcc.n	800a116 <quorem+0xfa>
 800a0b8:	613c      	str	r4, [r7, #16]
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f001 fb26 	bl	800b70c <__mcmp>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	db24      	blt.n	800a10e <quorem+0xf2>
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f04f 0c00 	mov.w	ip, #0
 800a0cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0d0:	f8d0 e000 	ldr.w	lr, [r0]
 800a0d4:	b293      	uxth	r3, r2
 800a0d6:	ebac 0303 	sub.w	r3, ip, r3
 800a0da:	0c12      	lsrs	r2, r2, #16
 800a0dc:	fa13 f38e 	uxtah	r3, r3, lr
 800a0e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0ee:	45c1      	cmp	r9, r8
 800a0f0:	f840 3b04 	str.w	r3, [r0], #4
 800a0f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0f8:	d2e8      	bcs.n	800a0cc <quorem+0xb0>
 800a0fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a102:	b922      	cbnz	r2, 800a10e <quorem+0xf2>
 800a104:	3b04      	subs	r3, #4
 800a106:	429d      	cmp	r5, r3
 800a108:	461a      	mov	r2, r3
 800a10a:	d30a      	bcc.n	800a122 <quorem+0x106>
 800a10c:	613c      	str	r4, [r7, #16]
 800a10e:	4630      	mov	r0, r6
 800a110:	b003      	add	sp, #12
 800a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	3b04      	subs	r3, #4
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d1cc      	bne.n	800a0b8 <quorem+0x9c>
 800a11e:	3c01      	subs	r4, #1
 800a120:	e7c7      	b.n	800a0b2 <quorem+0x96>
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	3b04      	subs	r3, #4
 800a126:	2a00      	cmp	r2, #0
 800a128:	d1f0      	bne.n	800a10c <quorem+0xf0>
 800a12a:	3c01      	subs	r4, #1
 800a12c:	e7eb      	b.n	800a106 <quorem+0xea>
 800a12e:	2000      	movs	r0, #0
 800a130:	e7ee      	b.n	800a110 <quorem+0xf4>
 800a132:	0000      	movs	r0, r0
 800a134:	0000      	movs	r0, r0
	...

0800a138 <_dtoa_r>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a13e:	b099      	sub	sp, #100	; 0x64
 800a140:	4616      	mov	r6, r2
 800a142:	461f      	mov	r7, r3
 800a144:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a148:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a14c:	4605      	mov	r5, r0
 800a14e:	b974      	cbnz	r4, 800a16e <_dtoa_r+0x36>
 800a150:	2010      	movs	r0, #16
 800a152:	f7fe fe1d 	bl	8008d90 <malloc>
 800a156:	4602      	mov	r2, r0
 800a158:	6268      	str	r0, [r5, #36]	; 0x24
 800a15a:	b920      	cbnz	r0, 800a166 <_dtoa_r+0x2e>
 800a15c:	4ba8      	ldr	r3, [pc, #672]	; (800a400 <_dtoa_r+0x2c8>)
 800a15e:	21ea      	movs	r1, #234	; 0xea
 800a160:	48a8      	ldr	r0, [pc, #672]	; (800a404 <_dtoa_r+0x2cc>)
 800a162:	f001 fdd3 	bl	800bd0c <__assert_func>
 800a166:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a16a:	6004      	str	r4, [r0, #0]
 800a16c:	60c4      	str	r4, [r0, #12]
 800a16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a170:	6819      	ldr	r1, [r3, #0]
 800a172:	b151      	cbz	r1, 800a18a <_dtoa_r+0x52>
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	604a      	str	r2, [r1, #4]
 800a178:	2301      	movs	r3, #1
 800a17a:	4093      	lsls	r3, r2
 800a17c:	608b      	str	r3, [r1, #8]
 800a17e:	4628      	mov	r0, r5
 800a180:	f001 f888 	bl	800b294 <_Bfree>
 800a184:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	1e3b      	subs	r3, r7, #0
 800a18c:	bfb9      	ittee	lt
 800a18e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a192:	9305      	strlt	r3, [sp, #20]
 800a194:	2300      	movge	r3, #0
 800a196:	f8c8 3000 	strge.w	r3, [r8]
 800a19a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a19e:	4b9a      	ldr	r3, [pc, #616]	; (800a408 <_dtoa_r+0x2d0>)
 800a1a0:	bfbc      	itt	lt
 800a1a2:	2201      	movlt	r2, #1
 800a1a4:	f8c8 2000 	strlt.w	r2, [r8]
 800a1a8:	ea33 0309 	bics.w	r3, r3, r9
 800a1ac:	d119      	bne.n	800a1e2 <_dtoa_r+0xaa>
 800a1ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1ba:	4333      	orrs	r3, r6
 800a1bc:	f000 8581 	beq.w	800acc2 <_dtoa_r+0xb8a>
 800a1c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1c2:	b953      	cbnz	r3, 800a1da <_dtoa_r+0xa2>
 800a1c4:	4b91      	ldr	r3, [pc, #580]	; (800a40c <_dtoa_r+0x2d4>)
 800a1c6:	e022      	b.n	800a20e <_dtoa_r+0xd6>
 800a1c8:	4b91      	ldr	r3, [pc, #580]	; (800a410 <_dtoa_r+0x2d8>)
 800a1ca:	9308      	str	r3, [sp, #32]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	9808      	ldr	r0, [sp, #32]
 800a1d4:	b019      	add	sp, #100	; 0x64
 800a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1da:	4b8c      	ldr	r3, [pc, #560]	; (800a40c <_dtoa_r+0x2d4>)
 800a1dc:	9308      	str	r3, [sp, #32]
 800a1de:	3303      	adds	r3, #3
 800a1e0:	e7f5      	b.n	800a1ce <_dtoa_r+0x96>
 800a1e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1e6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a1ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f7f6 fc51 	bl	8000a98 <__aeabi_dcmpeq>
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	b158      	cbz	r0, 800a212 <_dtoa_r+0xda>
 800a1fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 855a 	beq.w	800acbc <_dtoa_r+0xb84>
 800a208:	4882      	ldr	r0, [pc, #520]	; (800a414 <_dtoa_r+0x2dc>)
 800a20a:	6018      	str	r0, [r3, #0]
 800a20c:	1e43      	subs	r3, r0, #1
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	e7df      	b.n	800a1d2 <_dtoa_r+0x9a>
 800a212:	ab16      	add	r3, sp, #88	; 0x58
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	ab17      	add	r3, sp, #92	; 0x5c
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	4628      	mov	r0, r5
 800a21c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a220:	f001 fb1a 	bl	800b858 <__d2b>
 800a224:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a228:	4682      	mov	sl, r0
 800a22a:	2c00      	cmp	r4, #0
 800a22c:	d07e      	beq.n	800a32c <_dtoa_r+0x1f4>
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a23c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a240:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a244:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a248:	4b73      	ldr	r3, [pc, #460]	; (800a418 <_dtoa_r+0x2e0>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f804 	bl	8000258 <__aeabi_dsub>
 800a250:	a365      	add	r3, pc, #404	; (adr r3, 800a3e8 <_dtoa_r+0x2b0>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f6 f9b7 	bl	80005c8 <__aeabi_dmul>
 800a25a:	a365      	add	r3, pc, #404	; (adr r3, 800a3f0 <_dtoa_r+0x2b8>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f5 fffc 	bl	800025c <__adddf3>
 800a264:	4606      	mov	r6, r0
 800a266:	4620      	mov	r0, r4
 800a268:	460f      	mov	r7, r1
 800a26a:	f7f6 f943 	bl	80004f4 <__aeabi_i2d>
 800a26e:	a362      	add	r3, pc, #392	; (adr r3, 800a3f8 <_dtoa_r+0x2c0>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 f9a8 	bl	80005c8 <__aeabi_dmul>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f5 ffec 	bl	800025c <__adddf3>
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	f7f6 fc4e 	bl	8000b28 <__aeabi_d2iz>
 800a28c:	2200      	movs	r2, #0
 800a28e:	4681      	mov	r9, r0
 800a290:	2300      	movs	r3, #0
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f6 fc09 	bl	8000aac <__aeabi_dcmplt>
 800a29a:	b148      	cbz	r0, 800a2b0 <_dtoa_r+0x178>
 800a29c:	4648      	mov	r0, r9
 800a29e:	f7f6 f929 	bl	80004f4 <__aeabi_i2d>
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	f7f6 fbf7 	bl	8000a98 <__aeabi_dcmpeq>
 800a2aa:	b908      	cbnz	r0, 800a2b0 <_dtoa_r+0x178>
 800a2ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2b0:	f1b9 0f16 	cmp.w	r9, #22
 800a2b4:	d857      	bhi.n	800a366 <_dtoa_r+0x22e>
 800a2b6:	4b59      	ldr	r3, [pc, #356]	; (800a41c <_dtoa_r+0x2e4>)
 800a2b8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2c4:	f7f6 fbf2 	bl	8000aac <__aeabi_dcmplt>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d04e      	beq.n	800a36a <_dtoa_r+0x232>
 800a2cc:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2d6:	1b1c      	subs	r4, r3, r4
 800a2d8:	1e63      	subs	r3, r4, #1
 800a2da:	9309      	str	r3, [sp, #36]	; 0x24
 800a2dc:	bf45      	ittet	mi
 800a2de:	f1c4 0301 	rsbmi	r3, r4, #1
 800a2e2:	9306      	strmi	r3, [sp, #24]
 800a2e4:	2300      	movpl	r3, #0
 800a2e6:	2300      	movmi	r3, #0
 800a2e8:	bf4c      	ite	mi
 800a2ea:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a2ec:	9306      	strpl	r3, [sp, #24]
 800a2ee:	f1b9 0f00 	cmp.w	r9, #0
 800a2f2:	db3c      	blt.n	800a36e <_dtoa_r+0x236>
 800a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2fa:	444b      	add	r3, r9
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fe:	2300      	movs	r3, #0
 800a300:	930a      	str	r3, [sp, #40]	; 0x28
 800a302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a304:	2b09      	cmp	r3, #9
 800a306:	f200 808d 	bhi.w	800a424 <_dtoa_r+0x2ec>
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	bfc4      	itt	gt
 800a30e:	3b04      	subgt	r3, #4
 800a310:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a314:	f1a3 0302 	sub.w	r3, r3, #2
 800a318:	bfcc      	ite	gt
 800a31a:	2400      	movgt	r4, #0
 800a31c:	2401      	movle	r4, #1
 800a31e:	2b03      	cmp	r3, #3
 800a320:	f200 808c 	bhi.w	800a43c <_dtoa_r+0x304>
 800a324:	e8df f003 	tbb	[pc, r3]
 800a328:	5b4d4f2d 	.word	0x5b4d4f2d
 800a32c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a330:	441c      	add	r4, r3
 800a332:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a336:	2b20      	cmp	r3, #32
 800a338:	bfc3      	ittte	gt
 800a33a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a33e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a342:	fa09 f303 	lslgt.w	r3, r9, r3
 800a346:	f1c3 0320 	rsble	r3, r3, #32
 800a34a:	bfc6      	itte	gt
 800a34c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a350:	4318      	orrgt	r0, r3
 800a352:	fa06 f003 	lslle.w	r0, r6, r3
 800a356:	f7f6 f8bd 	bl	80004d4 <__aeabi_ui2d>
 800a35a:	2301      	movs	r3, #1
 800a35c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a360:	3c01      	subs	r4, #1
 800a362:	9313      	str	r3, [sp, #76]	; 0x4c
 800a364:	e770      	b.n	800a248 <_dtoa_r+0x110>
 800a366:	2301      	movs	r3, #1
 800a368:	e7b3      	b.n	800a2d2 <_dtoa_r+0x19a>
 800a36a:	900f      	str	r0, [sp, #60]	; 0x3c
 800a36c:	e7b2      	b.n	800a2d4 <_dtoa_r+0x19c>
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	eba3 0309 	sub.w	r3, r3, r9
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	f1c9 0300 	rsb	r3, r9, #0
 800a37a:	930a      	str	r3, [sp, #40]	; 0x28
 800a37c:	2300      	movs	r3, #0
 800a37e:	930e      	str	r3, [sp, #56]	; 0x38
 800a380:	e7bf      	b.n	800a302 <_dtoa_r+0x1ca>
 800a382:	2300      	movs	r3, #0
 800a384:	930b      	str	r3, [sp, #44]	; 0x2c
 800a386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	dc5a      	bgt.n	800a442 <_dtoa_r+0x30a>
 800a38c:	f04f 0b01 	mov.w	fp, #1
 800a390:	f8cd b008 	str.w	fp, [sp, #8]
 800a394:	465b      	mov	r3, fp
 800a396:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a39a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a39c:	2200      	movs	r2, #0
 800a39e:	6042      	str	r2, [r0, #4]
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	f102 0614 	add.w	r6, r2, #20
 800a3a6:	429e      	cmp	r6, r3
 800a3a8:	6841      	ldr	r1, [r0, #4]
 800a3aa:	d950      	bls.n	800a44e <_dtoa_r+0x316>
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 ff31 	bl	800b214 <_Balloc>
 800a3b2:	9008      	str	r0, [sp, #32]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d14e      	bne.n	800a456 <_dtoa_r+0x31e>
 800a3b8:	4b19      	ldr	r3, [pc, #100]	; (800a420 <_dtoa_r+0x2e8>)
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3c0:	e6ce      	b.n	800a160 <_dtoa_r+0x28>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7de      	b.n	800a384 <_dtoa_r+0x24c>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3cc:	eb09 0b03 	add.w	fp, r9, r3
 800a3d0:	f10b 0301 	add.w	r3, fp, #1
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	bfb8      	it	lt
 800a3da:	2301      	movlt	r3, #1
 800a3dc:	e7dd      	b.n	800a39a <_dtoa_r+0x262>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7f2      	b.n	800a3c8 <_dtoa_r+0x290>
 800a3e2:	bf00      	nop
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	636f4361 	.word	0x636f4361
 800a3ec:	3fd287a7 	.word	0x3fd287a7
 800a3f0:	8b60c8b3 	.word	0x8b60c8b3
 800a3f4:	3fc68a28 	.word	0x3fc68a28
 800a3f8:	509f79fb 	.word	0x509f79fb
 800a3fc:	3fd34413 	.word	0x3fd34413
 800a400:	0800cd7b 	.word	0x0800cd7b
 800a404:	0800cd92 	.word	0x0800cd92
 800a408:	7ff00000 	.word	0x7ff00000
 800a40c:	0800cd77 	.word	0x0800cd77
 800a410:	0800cd6e 	.word	0x0800cd6e
 800a414:	0800c6b5 	.word	0x0800c6b5
 800a418:	3ff80000 	.word	0x3ff80000
 800a41c:	0800cef8 	.word	0x0800cef8
 800a420:	0800cdf1 	.word	0x0800cdf1
 800a424:	2401      	movs	r4, #1
 800a426:	2300      	movs	r3, #0
 800a428:	9322      	str	r3, [sp, #136]	; 0x88
 800a42a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a42c:	f04f 3bff 	mov.w	fp, #4294967295
 800a430:	2200      	movs	r2, #0
 800a432:	f8cd b008 	str.w	fp, [sp, #8]
 800a436:	2312      	movs	r3, #18
 800a438:	9223      	str	r2, [sp, #140]	; 0x8c
 800a43a:	e7ae      	b.n	800a39a <_dtoa_r+0x262>
 800a43c:	2301      	movs	r3, #1
 800a43e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a440:	e7f4      	b.n	800a42c <_dtoa_r+0x2f4>
 800a442:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a446:	f8cd b008 	str.w	fp, [sp, #8]
 800a44a:	465b      	mov	r3, fp
 800a44c:	e7a5      	b.n	800a39a <_dtoa_r+0x262>
 800a44e:	3101      	adds	r1, #1
 800a450:	6041      	str	r1, [r0, #4]
 800a452:	0052      	lsls	r2, r2, #1
 800a454:	e7a5      	b.n	800a3a2 <_dtoa_r+0x26a>
 800a456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a458:	9a08      	ldr	r2, [sp, #32]
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	2b0e      	cmp	r3, #14
 800a460:	f200 80a8 	bhi.w	800a5b4 <_dtoa_r+0x47c>
 800a464:	2c00      	cmp	r4, #0
 800a466:	f000 80a5 	beq.w	800a5b4 <_dtoa_r+0x47c>
 800a46a:	f1b9 0f00 	cmp.w	r9, #0
 800a46e:	dd34      	ble.n	800a4da <_dtoa_r+0x3a2>
 800a470:	4a9a      	ldr	r2, [pc, #616]	; (800a6dc <_dtoa_r+0x5a4>)
 800a472:	f009 030f 	and.w	r3, r9, #15
 800a476:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a47a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a47e:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a482:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a486:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a48a:	d016      	beq.n	800a4ba <_dtoa_r+0x382>
 800a48c:	4b94      	ldr	r3, [pc, #592]	; (800a6e0 <_dtoa_r+0x5a8>)
 800a48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a492:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a496:	f7f6 f9c1 	bl	800081c <__aeabi_ddiv>
 800a49a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a49e:	f004 040f 	and.w	r4, r4, #15
 800a4a2:	2703      	movs	r7, #3
 800a4a4:	4e8e      	ldr	r6, [pc, #568]	; (800a6e0 <_dtoa_r+0x5a8>)
 800a4a6:	b954      	cbnz	r4, 800a4be <_dtoa_r+0x386>
 800a4a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b0:	f7f6 f9b4 	bl	800081c <__aeabi_ddiv>
 800a4b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4b8:	e029      	b.n	800a50e <_dtoa_r+0x3d6>
 800a4ba:	2702      	movs	r7, #2
 800a4bc:	e7f2      	b.n	800a4a4 <_dtoa_r+0x36c>
 800a4be:	07e1      	lsls	r1, r4, #31
 800a4c0:	d508      	bpl.n	800a4d4 <_dtoa_r+0x39c>
 800a4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4ca:	f7f6 f87d 	bl	80005c8 <__aeabi_dmul>
 800a4ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4d2:	3701      	adds	r7, #1
 800a4d4:	1064      	asrs	r4, r4, #1
 800a4d6:	3608      	adds	r6, #8
 800a4d8:	e7e5      	b.n	800a4a6 <_dtoa_r+0x36e>
 800a4da:	f000 80a5 	beq.w	800a628 <_dtoa_r+0x4f0>
 800a4de:	f1c9 0400 	rsb	r4, r9, #0
 800a4e2:	4b7e      	ldr	r3, [pc, #504]	; (800a6dc <_dtoa_r+0x5a4>)
 800a4e4:	4e7e      	ldr	r6, [pc, #504]	; (800a6e0 <_dtoa_r+0x5a8>)
 800a4e6:	f004 020f 	and.w	r2, r4, #15
 800a4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4f6:	f7f6 f867 	bl	80005c8 <__aeabi_dmul>
 800a4fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fe:	1124      	asrs	r4, r4, #4
 800a500:	2300      	movs	r3, #0
 800a502:	2702      	movs	r7, #2
 800a504:	2c00      	cmp	r4, #0
 800a506:	f040 8084 	bne.w	800a612 <_dtoa_r+0x4da>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1d2      	bne.n	800a4b4 <_dtoa_r+0x37c>
 800a50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 808b 	beq.w	800a62c <_dtoa_r+0x4f4>
 800a516:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a51a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a51e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a522:	4b70      	ldr	r3, [pc, #448]	; (800a6e4 <_dtoa_r+0x5ac>)
 800a524:	2200      	movs	r2, #0
 800a526:	f7f6 fac1 	bl	8000aac <__aeabi_dcmplt>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d07e      	beq.n	800a62c <_dtoa_r+0x4f4>
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d07b      	beq.n	800a62c <_dtoa_r+0x4f4>
 800a534:	f1bb 0f00 	cmp.w	fp, #0
 800a538:	dd38      	ble.n	800a5ac <_dtoa_r+0x474>
 800a53a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a53e:	4b6a      	ldr	r3, [pc, #424]	; (800a6e8 <_dtoa_r+0x5b0>)
 800a540:	2200      	movs	r2, #0
 800a542:	f7f6 f841 	bl	80005c8 <__aeabi_dmul>
 800a546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a54a:	f109 38ff 	add.w	r8, r9, #4294967295
 800a54e:	3701      	adds	r7, #1
 800a550:	465c      	mov	r4, fp
 800a552:	4638      	mov	r0, r7
 800a554:	f7f5 ffce 	bl	80004f4 <__aeabi_i2d>
 800a558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a55c:	f7f6 f834 	bl	80005c8 <__aeabi_dmul>
 800a560:	4b62      	ldr	r3, [pc, #392]	; (800a6ec <_dtoa_r+0x5b4>)
 800a562:	2200      	movs	r2, #0
 800a564:	f7f5 fe7a 	bl	800025c <__adddf3>
 800a568:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a56c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a570:	9611      	str	r6, [sp, #68]	; 0x44
 800a572:	2c00      	cmp	r4, #0
 800a574:	d15d      	bne.n	800a632 <_dtoa_r+0x4fa>
 800a576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57a:	4b5d      	ldr	r3, [pc, #372]	; (800a6f0 <_dtoa_r+0x5b8>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	f7f5 fe6b 	bl	8000258 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a58a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a58c:	4633      	mov	r3, r6
 800a58e:	f7f6 faab 	bl	8000ae8 <__aeabi_dcmpgt>
 800a592:	2800      	cmp	r0, #0
 800a594:	f040 829e 	bne.w	800aad4 <_dtoa_r+0x99c>
 800a598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a59e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5a2:	f7f6 fa83 	bl	8000aac <__aeabi_dcmplt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f040 8292 	bne.w	800aad0 <_dtoa_r+0x998>
 800a5ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a5b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f2c0 8153 	blt.w	800a862 <_dtoa_r+0x72a>
 800a5bc:	f1b9 0f0e 	cmp.w	r9, #14
 800a5c0:	f300 814f 	bgt.w	800a862 <_dtoa_r+0x72a>
 800a5c4:	4b45      	ldr	r3, [pc, #276]	; (800a6dc <_dtoa_r+0x5a4>)
 800a5c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a5d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f280 80db 	bge.w	800a790 <_dtoa_r+0x658>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f300 80d7 	bgt.w	800a790 <_dtoa_r+0x658>
 800a5e2:	f040 8274 	bne.w	800aace <_dtoa_r+0x996>
 800a5e6:	4b42      	ldr	r3, [pc, #264]	; (800a6f0 <_dtoa_r+0x5b8>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ee:	f7f5 ffeb 	bl	80005c8 <__aeabi_dmul>
 800a5f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5f6:	f7f6 fa6d 	bl	8000ad4 <__aeabi_dcmpge>
 800a5fa:	9c02      	ldr	r4, [sp, #8]
 800a5fc:	4626      	mov	r6, r4
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f040 824a 	bne.w	800aa98 <_dtoa_r+0x960>
 800a604:	9f08      	ldr	r7, [sp, #32]
 800a606:	2331      	movs	r3, #49	; 0x31
 800a608:	f807 3b01 	strb.w	r3, [r7], #1
 800a60c:	f109 0901 	add.w	r9, r9, #1
 800a610:	e246      	b.n	800aaa0 <_dtoa_r+0x968>
 800a612:	07e2      	lsls	r2, r4, #31
 800a614:	d505      	bpl.n	800a622 <_dtoa_r+0x4ea>
 800a616:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a61a:	f7f5 ffd5 	bl	80005c8 <__aeabi_dmul>
 800a61e:	3701      	adds	r7, #1
 800a620:	2301      	movs	r3, #1
 800a622:	1064      	asrs	r4, r4, #1
 800a624:	3608      	adds	r6, #8
 800a626:	e76d      	b.n	800a504 <_dtoa_r+0x3cc>
 800a628:	2702      	movs	r7, #2
 800a62a:	e770      	b.n	800a50e <_dtoa_r+0x3d6>
 800a62c:	9c02      	ldr	r4, [sp, #8]
 800a62e:	46c8      	mov	r8, r9
 800a630:	e78f      	b.n	800a552 <_dtoa_r+0x41a>
 800a632:	9908      	ldr	r1, [sp, #32]
 800a634:	4b29      	ldr	r3, [pc, #164]	; (800a6dc <_dtoa_r+0x5a4>)
 800a636:	4421      	add	r1, r4
 800a638:	9112      	str	r1, [sp, #72]	; 0x48
 800a63a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a63c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a640:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a644:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a648:	2900      	cmp	r1, #0
 800a64a:	d055      	beq.n	800a6f8 <_dtoa_r+0x5c0>
 800a64c:	4929      	ldr	r1, [pc, #164]	; (800a6f4 <_dtoa_r+0x5bc>)
 800a64e:	2000      	movs	r0, #0
 800a650:	f7f6 f8e4 	bl	800081c <__aeabi_ddiv>
 800a654:	463b      	mov	r3, r7
 800a656:	4632      	mov	r2, r6
 800a658:	f7f5 fdfe 	bl	8000258 <__aeabi_dsub>
 800a65c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a660:	9f08      	ldr	r7, [sp, #32]
 800a662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a666:	f7f6 fa5f 	bl	8000b28 <__aeabi_d2iz>
 800a66a:	4604      	mov	r4, r0
 800a66c:	f7f5 ff42 	bl	80004f4 <__aeabi_i2d>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a678:	f7f5 fdee 	bl	8000258 <__aeabi_dsub>
 800a67c:	3430      	adds	r4, #48	; 0x30
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a686:	f807 4b01 	strb.w	r4, [r7], #1
 800a68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a68e:	f7f6 fa0d 	bl	8000aac <__aeabi_dcmplt>
 800a692:	2800      	cmp	r0, #0
 800a694:	d174      	bne.n	800a780 <_dtoa_r+0x648>
 800a696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a69a:	4912      	ldr	r1, [pc, #72]	; (800a6e4 <_dtoa_r+0x5ac>)
 800a69c:	2000      	movs	r0, #0
 800a69e:	f7f5 fddb 	bl	8000258 <__aeabi_dsub>
 800a6a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6a6:	f7f6 fa01 	bl	8000aac <__aeabi_dcmplt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f040 80b6 	bne.w	800a81c <_dtoa_r+0x6e4>
 800a6b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6b2:	429f      	cmp	r7, r3
 800a6b4:	f43f af7a 	beq.w	800a5ac <_dtoa_r+0x474>
 800a6b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <_dtoa_r+0x5b0>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f7f5 ff82 	bl	80005c8 <__aeabi_dmul>
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <_dtoa_r+0x5b0>)
 800a6c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6d0:	f7f5 ff7a 	bl	80005c8 <__aeabi_dmul>
 800a6d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6d8:	e7c3      	b.n	800a662 <_dtoa_r+0x52a>
 800a6da:	bf00      	nop
 800a6dc:	0800cef8 	.word	0x0800cef8
 800a6e0:	0800ced0 	.word	0x0800ced0
 800a6e4:	3ff00000 	.word	0x3ff00000
 800a6e8:	40240000 	.word	0x40240000
 800a6ec:	401c0000 	.word	0x401c0000
 800a6f0:	40140000 	.word	0x40140000
 800a6f4:	3fe00000 	.word	0x3fe00000
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f5 ff64 	bl	80005c8 <__aeabi_dmul>
 800a700:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a706:	9c08      	ldr	r4, [sp, #32]
 800a708:	9314      	str	r3, [sp, #80]	; 0x50
 800a70a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a70e:	f7f6 fa0b 	bl	8000b28 <__aeabi_d2iz>
 800a712:	9015      	str	r0, [sp, #84]	; 0x54
 800a714:	f7f5 feee 	bl	80004f4 <__aeabi_i2d>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a720:	f7f5 fd9a 	bl	8000258 <__aeabi_dsub>
 800a724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a726:	3330      	adds	r3, #48	; 0x30
 800a728:	f804 3b01 	strb.w	r3, [r4], #1
 800a72c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a72e:	429c      	cmp	r4, r3
 800a730:	4606      	mov	r6, r0
 800a732:	460f      	mov	r7, r1
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	d124      	bne.n	800a784 <_dtoa_r+0x64c>
 800a73a:	4bb2      	ldr	r3, [pc, #712]	; (800aa04 <_dtoa_r+0x8cc>)
 800a73c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a740:	f7f5 fd8c 	bl	800025c <__adddf3>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f9cc 	bl	8000ae8 <__aeabi_dcmpgt>
 800a750:	2800      	cmp	r0, #0
 800a752:	d162      	bne.n	800a81a <_dtoa_r+0x6e2>
 800a754:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a758:	49aa      	ldr	r1, [pc, #680]	; (800aa04 <_dtoa_r+0x8cc>)
 800a75a:	2000      	movs	r0, #0
 800a75c:	f7f5 fd7c 	bl	8000258 <__aeabi_dsub>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f6 f9a0 	bl	8000aac <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f43f af1d 	beq.w	800a5ac <_dtoa_r+0x474>
 800a772:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a774:	1e7b      	subs	r3, r7, #1
 800a776:	9314      	str	r3, [sp, #80]	; 0x50
 800a778:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a77c:	2b30      	cmp	r3, #48	; 0x30
 800a77e:	d0f8      	beq.n	800a772 <_dtoa_r+0x63a>
 800a780:	46c1      	mov	r9, r8
 800a782:	e03a      	b.n	800a7fa <_dtoa_r+0x6c2>
 800a784:	4ba0      	ldr	r3, [pc, #640]	; (800aa08 <_dtoa_r+0x8d0>)
 800a786:	f7f5 ff1f 	bl	80005c8 <__aeabi_dmul>
 800a78a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a78e:	e7bc      	b.n	800a70a <_dtoa_r+0x5d2>
 800a790:	9f08      	ldr	r7, [sp, #32]
 800a792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a79a:	f7f6 f83f 	bl	800081c <__aeabi_ddiv>
 800a79e:	f7f6 f9c3 	bl	8000b28 <__aeabi_d2iz>
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f7f5 fea6 	bl	80004f4 <__aeabi_i2d>
 800a7a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ac:	f7f5 ff0c 	bl	80005c8 <__aeabi_dmul>
 800a7b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7bc:	f7f5 fd4c 	bl	8000258 <__aeabi_dsub>
 800a7c0:	f807 6b01 	strb.w	r6, [r7], #1
 800a7c4:	9e08      	ldr	r6, [sp, #32]
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	1bbe      	subs	r6, r7, r6
 800a7ca:	42b3      	cmp	r3, r6
 800a7cc:	d13a      	bne.n	800a844 <_dtoa_r+0x70c>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	f7f5 fd43 	bl	800025c <__adddf3>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e2:	f7f6 f981 	bl	8000ae8 <__aeabi_dcmpgt>
 800a7e6:	bb58      	cbnz	r0, 800a840 <_dtoa_r+0x708>
 800a7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f0:	f7f6 f952 	bl	8000a98 <__aeabi_dcmpeq>
 800a7f4:	b108      	cbz	r0, 800a7fa <_dtoa_r+0x6c2>
 800a7f6:	07e1      	lsls	r1, r4, #31
 800a7f8:	d422      	bmi.n	800a840 <_dtoa_r+0x708>
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	4651      	mov	r1, sl
 800a7fe:	f000 fd49 	bl	800b294 <_Bfree>
 800a802:	2300      	movs	r3, #0
 800a804:	703b      	strb	r3, [r7, #0]
 800a806:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a808:	f109 0001 	add.w	r0, r9, #1
 800a80c:	6018      	str	r0, [r3, #0]
 800a80e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a810:	2b00      	cmp	r3, #0
 800a812:	f43f acde 	beq.w	800a1d2 <_dtoa_r+0x9a>
 800a816:	601f      	str	r7, [r3, #0]
 800a818:	e4db      	b.n	800a1d2 <_dtoa_r+0x9a>
 800a81a:	4627      	mov	r7, r4
 800a81c:	463b      	mov	r3, r7
 800a81e:	461f      	mov	r7, r3
 800a820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a824:	2a39      	cmp	r2, #57	; 0x39
 800a826:	d107      	bne.n	800a838 <_dtoa_r+0x700>
 800a828:	9a08      	ldr	r2, [sp, #32]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d1f7      	bne.n	800a81e <_dtoa_r+0x6e6>
 800a82e:	9908      	ldr	r1, [sp, #32]
 800a830:	2230      	movs	r2, #48	; 0x30
 800a832:	f108 0801 	add.w	r8, r8, #1
 800a836:	700a      	strb	r2, [r1, #0]
 800a838:	781a      	ldrb	r2, [r3, #0]
 800a83a:	3201      	adds	r2, #1
 800a83c:	701a      	strb	r2, [r3, #0]
 800a83e:	e79f      	b.n	800a780 <_dtoa_r+0x648>
 800a840:	46c8      	mov	r8, r9
 800a842:	e7eb      	b.n	800a81c <_dtoa_r+0x6e4>
 800a844:	4b70      	ldr	r3, [pc, #448]	; (800aa08 <_dtoa_r+0x8d0>)
 800a846:	2200      	movs	r2, #0
 800a848:	f7f5 febe 	bl	80005c8 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a854:	2200      	movs	r2, #0
 800a856:	2300      	movs	r3, #0
 800a858:	f7f6 f91e 	bl	8000a98 <__aeabi_dcmpeq>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d098      	beq.n	800a792 <_dtoa_r+0x65a>
 800a860:	e7cb      	b.n	800a7fa <_dtoa_r+0x6c2>
 800a862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a864:	2a00      	cmp	r2, #0
 800a866:	f000 80d1 	beq.w	800aa0c <_dtoa_r+0x8d4>
 800a86a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a86c:	2a01      	cmp	r2, #1
 800a86e:	f300 80af 	bgt.w	800a9d0 <_dtoa_r+0x898>
 800a872:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a874:	2a00      	cmp	r2, #0
 800a876:	f000 80a7 	beq.w	800a9c8 <_dtoa_r+0x890>
 800a87a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a87e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a880:	9f06      	ldr	r7, [sp, #24]
 800a882:	9a06      	ldr	r2, [sp, #24]
 800a884:	441a      	add	r2, r3
 800a886:	9206      	str	r2, [sp, #24]
 800a888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a88a:	2101      	movs	r1, #1
 800a88c:	441a      	add	r2, r3
 800a88e:	4628      	mov	r0, r5
 800a890:	9209      	str	r2, [sp, #36]	; 0x24
 800a892:	f000 fdb9 	bl	800b408 <__i2b>
 800a896:	4606      	mov	r6, r0
 800a898:	2f00      	cmp	r7, #0
 800a89a:	dd0c      	ble.n	800a8b6 <_dtoa_r+0x77e>
 800a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dd09      	ble.n	800a8b6 <_dtoa_r+0x77e>
 800a8a2:	42bb      	cmp	r3, r7
 800a8a4:	9a06      	ldr	r2, [sp, #24]
 800a8a6:	bfa8      	it	ge
 800a8a8:	463b      	movge	r3, r7
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	9206      	str	r2, [sp, #24]
 800a8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b0:	1aff      	subs	r7, r7, r3
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b8:	b1f3      	cbz	r3, 800a8f8 <_dtoa_r+0x7c0>
 800a8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 80a9 	beq.w	800aa14 <_dtoa_r+0x8dc>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	dd10      	ble.n	800a8e8 <_dtoa_r+0x7b0>
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 fe58 	bl	800b580 <__pow5mult>
 800a8d0:	4652      	mov	r2, sl
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 fdac 	bl	800b434 <__multiply>
 800a8dc:	4651      	mov	r1, sl
 800a8de:	4680      	mov	r8, r0
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 fcd7 	bl	800b294 <_Bfree>
 800a8e6:	46c2      	mov	sl, r8
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ea:	1b1a      	subs	r2, r3, r4
 800a8ec:	d004      	beq.n	800a8f8 <_dtoa_r+0x7c0>
 800a8ee:	4651      	mov	r1, sl
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 fe45 	bl	800b580 <__pow5mult>
 800a8f6:	4682      	mov	sl, r0
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 fd84 	bl	800b408 <__i2b>
 800a900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a902:	2b00      	cmp	r3, #0
 800a904:	4604      	mov	r4, r0
 800a906:	f340 8087 	ble.w	800aa18 <_dtoa_r+0x8e0>
 800a90a:	461a      	mov	r2, r3
 800a90c:	4601      	mov	r1, r0
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 fe36 	bl	800b580 <__pow5mult>
 800a914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a916:	2b01      	cmp	r3, #1
 800a918:	4604      	mov	r4, r0
 800a91a:	f340 8080 	ble.w	800aa1e <_dtoa_r+0x8e6>
 800a91e:	f04f 0800 	mov.w	r8, #0
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a928:	6918      	ldr	r0, [r3, #16]
 800a92a:	f000 fd1f 	bl	800b36c <__hi0bits>
 800a92e:	f1c0 0020 	rsb	r0, r0, #32
 800a932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a934:	4418      	add	r0, r3
 800a936:	f010 001f 	ands.w	r0, r0, #31
 800a93a:	f000 8092 	beq.w	800aa62 <_dtoa_r+0x92a>
 800a93e:	f1c0 0320 	rsb	r3, r0, #32
 800a942:	2b04      	cmp	r3, #4
 800a944:	f340 808a 	ble.w	800aa5c <_dtoa_r+0x924>
 800a948:	f1c0 001c 	rsb	r0, r0, #28
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	4403      	add	r3, r0
 800a950:	9306      	str	r3, [sp, #24]
 800a952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a954:	4403      	add	r3, r0
 800a956:	4407      	add	r7, r0
 800a958:	9309      	str	r3, [sp, #36]	; 0x24
 800a95a:	9b06      	ldr	r3, [sp, #24]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd05      	ble.n	800a96c <_dtoa_r+0x834>
 800a960:	4651      	mov	r1, sl
 800a962:	461a      	mov	r2, r3
 800a964:	4628      	mov	r0, r5
 800a966:	f000 fe65 	bl	800b634 <__lshift>
 800a96a:	4682      	mov	sl, r0
 800a96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd05      	ble.n	800a97e <_dtoa_r+0x846>
 800a972:	4621      	mov	r1, r4
 800a974:	461a      	mov	r2, r3
 800a976:	4628      	mov	r0, r5
 800a978:	f000 fe5c 	bl	800b634 <__lshift>
 800a97c:	4604      	mov	r4, r0
 800a97e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d070      	beq.n	800aa66 <_dtoa_r+0x92e>
 800a984:	4621      	mov	r1, r4
 800a986:	4650      	mov	r0, sl
 800a988:	f000 fec0 	bl	800b70c <__mcmp>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	da6a      	bge.n	800aa66 <_dtoa_r+0x92e>
 800a990:	2300      	movs	r3, #0
 800a992:	4651      	mov	r1, sl
 800a994:	220a      	movs	r2, #10
 800a996:	4628      	mov	r0, r5
 800a998:	f000 fc9e 	bl	800b2d8 <__multadd>
 800a99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a99e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8193 	beq.w	800acd0 <_dtoa_r+0xb98>
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	220a      	movs	r2, #10
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 fc91 	bl	800b2d8 <__multadd>
 800a9b6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	f300 8093 	bgt.w	800aae6 <_dtoa_r+0x9ae>
 800a9c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	dc57      	bgt.n	800aa76 <_dtoa_r+0x93e>
 800a9c6:	e08e      	b.n	800aae6 <_dtoa_r+0x9ae>
 800a9c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9ce:	e756      	b.n	800a87e <_dtoa_r+0x746>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	1e5c      	subs	r4, r3, #1
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	bfbf      	itttt	lt
 800a9da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9dc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a9de:	1ae2      	sublt	r2, r4, r3
 800a9e0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9e2:	bfb6      	itet	lt
 800a9e4:	189b      	addlt	r3, r3, r2
 800a9e6:	1b1c      	subge	r4, r3, r4
 800a9e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9ea:	9b02      	ldr	r3, [sp, #8]
 800a9ec:	bfb8      	it	lt
 800a9ee:	2400      	movlt	r4, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bfb9      	ittee	lt
 800a9f4:	9b06      	ldrlt	r3, [sp, #24]
 800a9f6:	9a02      	ldrlt	r2, [sp, #8]
 800a9f8:	9f06      	ldrge	r7, [sp, #24]
 800a9fa:	9b02      	ldrge	r3, [sp, #8]
 800a9fc:	bfbc      	itt	lt
 800a9fe:	1a9f      	sublt	r7, r3, r2
 800aa00:	2300      	movlt	r3, #0
 800aa02:	e73e      	b.n	800a882 <_dtoa_r+0x74a>
 800aa04:	3fe00000 	.word	0x3fe00000
 800aa08:	40240000 	.word	0x40240000
 800aa0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa0e:	9f06      	ldr	r7, [sp, #24]
 800aa10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa12:	e741      	b.n	800a898 <_dtoa_r+0x760>
 800aa14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa16:	e76a      	b.n	800a8ee <_dtoa_r+0x7b6>
 800aa18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	dc19      	bgt.n	800aa52 <_dtoa_r+0x91a>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	b9bb      	cbnz	r3, 800aa52 <_dtoa_r+0x91a>
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa28:	b99b      	cbnz	r3, 800aa52 <_dtoa_r+0x91a>
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa30:	0d1b      	lsrs	r3, r3, #20
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	b183      	cbz	r3, 800aa58 <_dtoa_r+0x920>
 800aa36:	9b06      	ldr	r3, [sp, #24]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	9306      	str	r3, [sp, #24]
 800aa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3e:	3301      	adds	r3, #1
 800aa40:	9309      	str	r3, [sp, #36]	; 0x24
 800aa42:	f04f 0801 	mov.w	r8, #1
 800aa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f47f af6a 	bne.w	800a922 <_dtoa_r+0x7ea>
 800aa4e:	2001      	movs	r0, #1
 800aa50:	e76f      	b.n	800a932 <_dtoa_r+0x7fa>
 800aa52:	f04f 0800 	mov.w	r8, #0
 800aa56:	e7f6      	b.n	800aa46 <_dtoa_r+0x90e>
 800aa58:	4698      	mov	r8, r3
 800aa5a:	e7f4      	b.n	800aa46 <_dtoa_r+0x90e>
 800aa5c:	f43f af7d 	beq.w	800a95a <_dtoa_r+0x822>
 800aa60:	4618      	mov	r0, r3
 800aa62:	301c      	adds	r0, #28
 800aa64:	e772      	b.n	800a94c <_dtoa_r+0x814>
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc36      	bgt.n	800aada <_dtoa_r+0x9a2>
 800aa6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	dd33      	ble.n	800aada <_dtoa_r+0x9a2>
 800aa72:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aa76:	f1bb 0f00 	cmp.w	fp, #0
 800aa7a:	d10d      	bne.n	800aa98 <_dtoa_r+0x960>
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	465b      	mov	r3, fp
 800aa80:	2205      	movs	r2, #5
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 fc28 	bl	800b2d8 <__multadd>
 800aa88:	4601      	mov	r1, r0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	f000 fe3d 	bl	800b70c <__mcmp>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f73f adb6 	bgt.w	800a604 <_dtoa_r+0x4cc>
 800aa98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa9a:	9f08      	ldr	r7, [sp, #32]
 800aa9c:	ea6f 0903 	mvn.w	r9, r3
 800aaa0:	f04f 0800 	mov.w	r8, #0
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 fbf4 	bl	800b294 <_Bfree>
 800aaac:	2e00      	cmp	r6, #0
 800aaae:	f43f aea4 	beq.w	800a7fa <_dtoa_r+0x6c2>
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	d005      	beq.n	800aac4 <_dtoa_r+0x98c>
 800aab8:	45b0      	cmp	r8, r6
 800aaba:	d003      	beq.n	800aac4 <_dtoa_r+0x98c>
 800aabc:	4641      	mov	r1, r8
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 fbe8 	bl	800b294 <_Bfree>
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 fbe4 	bl	800b294 <_Bfree>
 800aacc:	e695      	b.n	800a7fa <_dtoa_r+0x6c2>
 800aace:	2400      	movs	r4, #0
 800aad0:	4626      	mov	r6, r4
 800aad2:	e7e1      	b.n	800aa98 <_dtoa_r+0x960>
 800aad4:	46c1      	mov	r9, r8
 800aad6:	4626      	mov	r6, r4
 800aad8:	e594      	b.n	800a604 <_dtoa_r+0x4cc>
 800aada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aadc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80fc 	beq.w	800acde <_dtoa_r+0xba6>
 800aae6:	2f00      	cmp	r7, #0
 800aae8:	dd05      	ble.n	800aaf6 <_dtoa_r+0x9be>
 800aaea:	4631      	mov	r1, r6
 800aaec:	463a      	mov	r2, r7
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 fda0 	bl	800b634 <__lshift>
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	d05c      	beq.n	800abb6 <_dtoa_r+0xa7e>
 800aafc:	6871      	ldr	r1, [r6, #4]
 800aafe:	4628      	mov	r0, r5
 800ab00:	f000 fb88 	bl	800b214 <_Balloc>
 800ab04:	4607      	mov	r7, r0
 800ab06:	b928      	cbnz	r0, 800ab14 <_dtoa_r+0x9dc>
 800ab08:	4b7f      	ldr	r3, [pc, #508]	; (800ad08 <_dtoa_r+0xbd0>)
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab10:	f7ff bb26 	b.w	800a160 <_dtoa_r+0x28>
 800ab14:	6932      	ldr	r2, [r6, #16]
 800ab16:	3202      	adds	r2, #2
 800ab18:	0092      	lsls	r2, r2, #2
 800ab1a:	f106 010c 	add.w	r1, r6, #12
 800ab1e:	300c      	adds	r0, #12
 800ab20:	f7fe f954 	bl	8008dcc <memcpy>
 800ab24:	2201      	movs	r2, #1
 800ab26:	4639      	mov	r1, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f000 fd83 	bl	800b634 <__lshift>
 800ab2e:	9b08      	ldr	r3, [sp, #32]
 800ab30:	3301      	adds	r3, #1
 800ab32:	9302      	str	r3, [sp, #8]
 800ab34:	9b08      	ldr	r3, [sp, #32]
 800ab36:	445b      	add	r3, fp
 800ab38:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	46b0      	mov	r8, r6
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	4606      	mov	r6, r0
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab50:	f7ff fa64 	bl	800a01c <quorem>
 800ab54:	4603      	mov	r3, r0
 800ab56:	3330      	adds	r3, #48	; 0x30
 800ab58:	9004      	str	r0, [sp, #16]
 800ab5a:	4641      	mov	r1, r8
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab60:	f000 fdd4 	bl	800b70c <__mcmp>
 800ab64:	4632      	mov	r2, r6
 800ab66:	9006      	str	r0, [sp, #24]
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f000 fdea 	bl	800b744 <__mdiff>
 800ab70:	68c2      	ldr	r2, [r0, #12]
 800ab72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab74:	4607      	mov	r7, r0
 800ab76:	bb02      	cbnz	r2, 800abba <_dtoa_r+0xa82>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	f000 fdc6 	bl	800b70c <__mcmp>
 800ab80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab82:	4602      	mov	r2, r0
 800ab84:	4639      	mov	r1, r7
 800ab86:	4628      	mov	r0, r5
 800ab88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ab8c:	f000 fb82 	bl	800b294 <_Bfree>
 800ab90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab94:	9f02      	ldr	r7, [sp, #8]
 800ab96:	ea43 0102 	orr.w	r1, r3, r2
 800ab9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba0:	d10d      	bne.n	800abbe <_dtoa_r+0xa86>
 800aba2:	2b39      	cmp	r3, #57	; 0x39
 800aba4:	d027      	beq.n	800abf6 <_dtoa_r+0xabe>
 800aba6:	9a06      	ldr	r2, [sp, #24]
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	dd01      	ble.n	800abb0 <_dtoa_r+0xa78>
 800abac:	9b04      	ldr	r3, [sp, #16]
 800abae:	3331      	adds	r3, #49	; 0x31
 800abb0:	f88b 3000 	strb.w	r3, [fp]
 800abb4:	e776      	b.n	800aaa4 <_dtoa_r+0x96c>
 800abb6:	4630      	mov	r0, r6
 800abb8:	e7b9      	b.n	800ab2e <_dtoa_r+0x9f6>
 800abba:	2201      	movs	r2, #1
 800abbc:	e7e2      	b.n	800ab84 <_dtoa_r+0xa4c>
 800abbe:	9906      	ldr	r1, [sp, #24]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	db04      	blt.n	800abce <_dtoa_r+0xa96>
 800abc4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800abc6:	4301      	orrs	r1, r0
 800abc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abca:	4301      	orrs	r1, r0
 800abcc:	d120      	bne.n	800ac10 <_dtoa_r+0xad8>
 800abce:	2a00      	cmp	r2, #0
 800abd0:	ddee      	ble.n	800abb0 <_dtoa_r+0xa78>
 800abd2:	4651      	mov	r1, sl
 800abd4:	2201      	movs	r2, #1
 800abd6:	4628      	mov	r0, r5
 800abd8:	9302      	str	r3, [sp, #8]
 800abda:	f000 fd2b 	bl	800b634 <__lshift>
 800abde:	4621      	mov	r1, r4
 800abe0:	4682      	mov	sl, r0
 800abe2:	f000 fd93 	bl	800b70c <__mcmp>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	9b02      	ldr	r3, [sp, #8]
 800abea:	dc02      	bgt.n	800abf2 <_dtoa_r+0xaba>
 800abec:	d1e0      	bne.n	800abb0 <_dtoa_r+0xa78>
 800abee:	07da      	lsls	r2, r3, #31
 800abf0:	d5de      	bpl.n	800abb0 <_dtoa_r+0xa78>
 800abf2:	2b39      	cmp	r3, #57	; 0x39
 800abf4:	d1da      	bne.n	800abac <_dtoa_r+0xa74>
 800abf6:	2339      	movs	r3, #57	; 0x39
 800abf8:	f88b 3000 	strb.w	r3, [fp]
 800abfc:	463b      	mov	r3, r7
 800abfe:	461f      	mov	r7, r3
 800ac00:	3b01      	subs	r3, #1
 800ac02:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ac06:	2a39      	cmp	r2, #57	; 0x39
 800ac08:	d050      	beq.n	800acac <_dtoa_r+0xb74>
 800ac0a:	3201      	adds	r2, #1
 800ac0c:	701a      	strb	r2, [r3, #0]
 800ac0e:	e749      	b.n	800aaa4 <_dtoa_r+0x96c>
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	dd03      	ble.n	800ac1c <_dtoa_r+0xae4>
 800ac14:	2b39      	cmp	r3, #57	; 0x39
 800ac16:	d0ee      	beq.n	800abf6 <_dtoa_r+0xabe>
 800ac18:	3301      	adds	r3, #1
 800ac1a:	e7c9      	b.n	800abb0 <_dtoa_r+0xa78>
 800ac1c:	9a02      	ldr	r2, [sp, #8]
 800ac1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac24:	428a      	cmp	r2, r1
 800ac26:	d02a      	beq.n	800ac7e <_dtoa_r+0xb46>
 800ac28:	4651      	mov	r1, sl
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 fb52 	bl	800b2d8 <__multadd>
 800ac34:	45b0      	cmp	r8, r6
 800ac36:	4682      	mov	sl, r0
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 020a 	mov.w	r2, #10
 800ac40:	4641      	mov	r1, r8
 800ac42:	4628      	mov	r0, r5
 800ac44:	d107      	bne.n	800ac56 <_dtoa_r+0xb1e>
 800ac46:	f000 fb47 	bl	800b2d8 <__multadd>
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	3301      	adds	r3, #1
 800ac52:	9302      	str	r3, [sp, #8]
 800ac54:	e777      	b.n	800ab46 <_dtoa_r+0xa0e>
 800ac56:	f000 fb3f 	bl	800b2d8 <__multadd>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	220a      	movs	r2, #10
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 fb38 	bl	800b2d8 <__multadd>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	e7f0      	b.n	800ac4e <_dtoa_r+0xb16>
 800ac6c:	f1bb 0f00 	cmp.w	fp, #0
 800ac70:	9a08      	ldr	r2, [sp, #32]
 800ac72:	bfcc      	ite	gt
 800ac74:	465f      	movgt	r7, fp
 800ac76:	2701      	movle	r7, #1
 800ac78:	4417      	add	r7, r2
 800ac7a:	f04f 0800 	mov.w	r8, #0
 800ac7e:	4651      	mov	r1, sl
 800ac80:	2201      	movs	r2, #1
 800ac82:	4628      	mov	r0, r5
 800ac84:	9302      	str	r3, [sp, #8]
 800ac86:	f000 fcd5 	bl	800b634 <__lshift>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	f000 fd3d 	bl	800b70c <__mcmp>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	dcb2      	bgt.n	800abfc <_dtoa_r+0xac4>
 800ac96:	d102      	bne.n	800ac9e <_dtoa_r+0xb66>
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d4ae      	bmi.n	800abfc <_dtoa_r+0xac4>
 800ac9e:	463b      	mov	r3, r7
 800aca0:	461f      	mov	r7, r3
 800aca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aca6:	2a30      	cmp	r2, #48	; 0x30
 800aca8:	d0fa      	beq.n	800aca0 <_dtoa_r+0xb68>
 800acaa:	e6fb      	b.n	800aaa4 <_dtoa_r+0x96c>
 800acac:	9a08      	ldr	r2, [sp, #32]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d1a5      	bne.n	800abfe <_dtoa_r+0xac6>
 800acb2:	2331      	movs	r3, #49	; 0x31
 800acb4:	f109 0901 	add.w	r9, r9, #1
 800acb8:	7013      	strb	r3, [r2, #0]
 800acba:	e6f3      	b.n	800aaa4 <_dtoa_r+0x96c>
 800acbc:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <_dtoa_r+0xbd4>)
 800acbe:	f7ff baa6 	b.w	800a20e <_dtoa_r+0xd6>
 800acc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f47f aa7f 	bne.w	800a1c8 <_dtoa_r+0x90>
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <_dtoa_r+0xbd8>)
 800accc:	f7ff ba9f 	b.w	800a20e <_dtoa_r+0xd6>
 800acd0:	f1bb 0f00 	cmp.w	fp, #0
 800acd4:	dc03      	bgt.n	800acde <_dtoa_r+0xba6>
 800acd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acd8:	2b02      	cmp	r3, #2
 800acda:	f73f aecc 	bgt.w	800aa76 <_dtoa_r+0x93e>
 800acde:	9f08      	ldr	r7, [sp, #32]
 800ace0:	4621      	mov	r1, r4
 800ace2:	4650      	mov	r0, sl
 800ace4:	f7ff f99a 	bl	800a01c <quorem>
 800ace8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acec:	f807 3b01 	strb.w	r3, [r7], #1
 800acf0:	9a08      	ldr	r2, [sp, #32]
 800acf2:	1aba      	subs	r2, r7, r2
 800acf4:	4593      	cmp	fp, r2
 800acf6:	ddb9      	ble.n	800ac6c <_dtoa_r+0xb34>
 800acf8:	4651      	mov	r1, sl
 800acfa:	2300      	movs	r3, #0
 800acfc:	220a      	movs	r2, #10
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 faea 	bl	800b2d8 <__multadd>
 800ad04:	4682      	mov	sl, r0
 800ad06:	e7eb      	b.n	800ace0 <_dtoa_r+0xba8>
 800ad08:	0800cdf1 	.word	0x0800cdf1
 800ad0c:	0800c6b4 	.word	0x0800c6b4
 800ad10:	0800cd6e 	.word	0x0800cd6e

0800ad14 <__sflush_r>:
 800ad14:	898a      	ldrh	r2, [r1, #12]
 800ad16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	0710      	lsls	r0, r2, #28
 800ad1e:	460c      	mov	r4, r1
 800ad20:	d458      	bmi.n	800add4 <__sflush_r+0xc0>
 800ad22:	684b      	ldr	r3, [r1, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dc05      	bgt.n	800ad34 <__sflush_r+0x20>
 800ad28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	dc02      	bgt.n	800ad34 <__sflush_r+0x20>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad36:	2e00      	cmp	r6, #0
 800ad38:	d0f9      	beq.n	800ad2e <__sflush_r+0x1a>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad40:	682f      	ldr	r7, [r5, #0]
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	d032      	beq.n	800adac <__sflush_r+0x98>
 800ad46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	075a      	lsls	r2, r3, #29
 800ad4c:	d505      	bpl.n	800ad5a <__sflush_r+0x46>
 800ad4e:	6863      	ldr	r3, [r4, #4]
 800ad50:	1ac0      	subs	r0, r0, r3
 800ad52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad54:	b10b      	cbz	r3, 800ad5a <__sflush_r+0x46>
 800ad56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad58:	1ac0      	subs	r0, r0, r3
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad60:	6a21      	ldr	r1, [r4, #32]
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b0      	blx	r6
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	d106      	bne.n	800ad7a <__sflush_r+0x66>
 800ad6c:	6829      	ldr	r1, [r5, #0]
 800ad6e:	291d      	cmp	r1, #29
 800ad70:	d82c      	bhi.n	800adcc <__sflush_r+0xb8>
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <__sflush_r+0x108>)
 800ad74:	40ca      	lsrs	r2, r1
 800ad76:	07d6      	lsls	r6, r2, #31
 800ad78:	d528      	bpl.n	800adcc <__sflush_r+0xb8>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6062      	str	r2, [r4, #4]
 800ad7e:	04d9      	lsls	r1, r3, #19
 800ad80:	6922      	ldr	r2, [r4, #16]
 800ad82:	6022      	str	r2, [r4, #0]
 800ad84:	d504      	bpl.n	800ad90 <__sflush_r+0x7c>
 800ad86:	1c42      	adds	r2, r0, #1
 800ad88:	d101      	bne.n	800ad8e <__sflush_r+0x7a>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	b903      	cbnz	r3, 800ad90 <__sflush_r+0x7c>
 800ad8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad92:	602f      	str	r7, [r5, #0]
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d0ca      	beq.n	800ad2e <__sflush_r+0x1a>
 800ad98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad9c:	4299      	cmp	r1, r3
 800ad9e:	d002      	beq.n	800ada6 <__sflush_r+0x92>
 800ada0:	4628      	mov	r0, r5
 800ada2:	f7fe f829 	bl	8008df8 <_free_r>
 800ada6:	2000      	movs	r0, #0
 800ada8:	6360      	str	r0, [r4, #52]	; 0x34
 800adaa:	e7c1      	b.n	800ad30 <__sflush_r+0x1c>
 800adac:	6a21      	ldr	r1, [r4, #32]
 800adae:	2301      	movs	r3, #1
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b0      	blx	r6
 800adb4:	1c41      	adds	r1, r0, #1
 800adb6:	d1c7      	bne.n	800ad48 <__sflush_r+0x34>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0c4      	beq.n	800ad48 <__sflush_r+0x34>
 800adbe:	2b1d      	cmp	r3, #29
 800adc0:	d001      	beq.n	800adc6 <__sflush_r+0xb2>
 800adc2:	2b16      	cmp	r3, #22
 800adc4:	d101      	bne.n	800adca <__sflush_r+0xb6>
 800adc6:	602f      	str	r7, [r5, #0]
 800adc8:	e7b1      	b.n	800ad2e <__sflush_r+0x1a>
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	e7ad      	b.n	800ad30 <__sflush_r+0x1c>
 800add4:	690f      	ldr	r7, [r1, #16]
 800add6:	2f00      	cmp	r7, #0
 800add8:	d0a9      	beq.n	800ad2e <__sflush_r+0x1a>
 800adda:	0793      	lsls	r3, r2, #30
 800addc:	680e      	ldr	r6, [r1, #0]
 800adde:	bf08      	it	eq
 800ade0:	694b      	ldreq	r3, [r1, #20]
 800ade2:	600f      	str	r7, [r1, #0]
 800ade4:	bf18      	it	ne
 800ade6:	2300      	movne	r3, #0
 800ade8:	eba6 0807 	sub.w	r8, r6, r7
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	f1b8 0f00 	cmp.w	r8, #0
 800adf2:	dd9c      	ble.n	800ad2e <__sflush_r+0x1a>
 800adf4:	6a21      	ldr	r1, [r4, #32]
 800adf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adf8:	4643      	mov	r3, r8
 800adfa:	463a      	mov	r2, r7
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b0      	blx	r6
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dc06      	bgt.n	800ae12 <__sflush_r+0xfe>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e78e      	b.n	800ad30 <__sflush_r+0x1c>
 800ae12:	4407      	add	r7, r0
 800ae14:	eba8 0800 	sub.w	r8, r8, r0
 800ae18:	e7e9      	b.n	800adee <__sflush_r+0xda>
 800ae1a:	bf00      	nop
 800ae1c:	20400001 	.word	0x20400001

0800ae20 <_fflush_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	690b      	ldr	r3, [r1, #16]
 800ae24:	4605      	mov	r5, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b913      	cbnz	r3, 800ae30 <_fflush_r+0x10>
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	b118      	cbz	r0, 800ae3a <_fflush_r+0x1a>
 800ae32:	6983      	ldr	r3, [r0, #24]
 800ae34:	b90b      	cbnz	r3, 800ae3a <_fflush_r+0x1a>
 800ae36:	f000 f8c5 	bl	800afc4 <__sinit>
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <_fflush_r+0x6c>)
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d11b      	bne.n	800ae78 <_fflush_r+0x58>
 800ae40:	686c      	ldr	r4, [r5, #4]
 800ae42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ef      	beq.n	800ae2a <_fflush_r+0xa>
 800ae4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae4c:	07d0      	lsls	r0, r2, #31
 800ae4e:	d404      	bmi.n	800ae5a <_fflush_r+0x3a>
 800ae50:	0599      	lsls	r1, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_fflush_r+0x3a>
 800ae54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae56:	f000 f958 	bl	800b10a <__retarget_lock_acquire_recursive>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f7ff ff59 	bl	800ad14 <__sflush_r>
 800ae62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae64:	07da      	lsls	r2, r3, #31
 800ae66:	4605      	mov	r5, r0
 800ae68:	d4e0      	bmi.n	800ae2c <_fflush_r+0xc>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	059b      	lsls	r3, r3, #22
 800ae6e:	d4dd      	bmi.n	800ae2c <_fflush_r+0xc>
 800ae70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae72:	f000 f94b 	bl	800b10c <__retarget_lock_release_recursive>
 800ae76:	e7d9      	b.n	800ae2c <_fflush_r+0xc>
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <_fflush_r+0x70>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d101      	bne.n	800ae82 <_fflush_r+0x62>
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	e7df      	b.n	800ae42 <_fflush_r+0x22>
 800ae82:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <_fflush_r+0x74>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	bf08      	it	eq
 800ae88:	68ec      	ldreq	r4, [r5, #12]
 800ae8a:	e7da      	b.n	800ae42 <_fflush_r+0x22>
 800ae8c:	0800ce24 	.word	0x0800ce24
 800ae90:	0800ce44 	.word	0x0800ce44
 800ae94:	0800ce04 	.word	0x0800ce04

0800ae98 <fileno>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4e1a      	ldr	r6, [pc, #104]	; (800af04 <fileno+0x6c>)
 800ae9c:	6835      	ldr	r5, [r6, #0]
 800ae9e:	4604      	mov	r4, r0
 800aea0:	b125      	cbz	r5, 800aeac <fileno+0x14>
 800aea2:	69ab      	ldr	r3, [r5, #24]
 800aea4:	b913      	cbnz	r3, 800aeac <fileno+0x14>
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 f88c 	bl	800afc4 <__sinit>
 800aeac:	4b16      	ldr	r3, [pc, #88]	; (800af08 <fileno+0x70>)
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d118      	bne.n	800aee4 <fileno+0x4c>
 800aeb2:	686c      	ldr	r4, [r5, #4]
 800aeb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeb6:	07d8      	lsls	r0, r3, #31
 800aeb8:	d405      	bmi.n	800aec6 <fileno+0x2e>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	0599      	lsls	r1, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <fileno+0x2e>
 800aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec2:	f000 f922 	bl	800b10a <__retarget_lock_acquire_recursive>
 800aec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeca:	b1ab      	cbz	r3, 800aef8 <fileno+0x60>
 800aecc:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800aed0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aed2:	07d2      	lsls	r2, r2, #31
 800aed4:	d404      	bmi.n	800aee0 <fileno+0x48>
 800aed6:	059b      	lsls	r3, r3, #22
 800aed8:	d402      	bmi.n	800aee0 <fileno+0x48>
 800aeda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aedc:	f000 f916 	bl	800b10c <__retarget_lock_release_recursive>
 800aee0:	4628      	mov	r0, r5
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	4b09      	ldr	r3, [pc, #36]	; (800af0c <fileno+0x74>)
 800aee6:	429c      	cmp	r4, r3
 800aee8:	d101      	bne.n	800aeee <fileno+0x56>
 800aeea:	68ac      	ldr	r4, [r5, #8]
 800aeec:	e7e2      	b.n	800aeb4 <fileno+0x1c>
 800aeee:	4b08      	ldr	r3, [pc, #32]	; (800af10 <fileno+0x78>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	bf08      	it	eq
 800aef4:	68ec      	ldreq	r4, [r5, #12]
 800aef6:	e7dd      	b.n	800aeb4 <fileno+0x1c>
 800aef8:	6832      	ldr	r2, [r6, #0]
 800aefa:	2109      	movs	r1, #9
 800aefc:	6011      	str	r1, [r2, #0]
 800aefe:	f04f 35ff 	mov.w	r5, #4294967295
 800af02:	e7e5      	b.n	800aed0 <fileno+0x38>
 800af04:	2000000c 	.word	0x2000000c
 800af08:	0800ce24 	.word	0x0800ce24
 800af0c:	0800ce44 	.word	0x0800ce44
 800af10:	0800ce04 	.word	0x0800ce04

0800af14 <std>:
 800af14:	2300      	movs	r3, #0
 800af16:	b510      	push	{r4, lr}
 800af18:	4604      	mov	r4, r0
 800af1a:	e9c0 3300 	strd	r3, r3, [r0]
 800af1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af22:	6083      	str	r3, [r0, #8]
 800af24:	8181      	strh	r1, [r0, #12]
 800af26:	6643      	str	r3, [r0, #100]	; 0x64
 800af28:	81c2      	strh	r2, [r0, #14]
 800af2a:	6183      	str	r3, [r0, #24]
 800af2c:	4619      	mov	r1, r3
 800af2e:	2208      	movs	r2, #8
 800af30:	305c      	adds	r0, #92	; 0x5c
 800af32:	f7fd ff59 	bl	8008de8 <memset>
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x38>)
 800af38:	6263      	str	r3, [r4, #36]	; 0x24
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x3c>)
 800af3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <std+0x40>)
 800af40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <std+0x44>)
 800af44:	6224      	str	r4, [r4, #32]
 800af46:	6323      	str	r3, [r4, #48]	; 0x30
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	0800bc6d 	.word	0x0800bc6d
 800af50:	0800bc8f 	.word	0x0800bc8f
 800af54:	0800bcc7 	.word	0x0800bcc7
 800af58:	0800bceb 	.word	0x0800bceb

0800af5c <_cleanup_r>:
 800af5c:	4901      	ldr	r1, [pc, #4]	; (800af64 <_cleanup_r+0x8>)
 800af5e:	f000 b8af 	b.w	800b0c0 <_fwalk_reent>
 800af62:	bf00      	nop
 800af64:	0800ae21 	.word	0x0800ae21

0800af68 <__sfmoreglue>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	1e4a      	subs	r2, r1, #1
 800af6c:	2568      	movs	r5, #104	; 0x68
 800af6e:	4355      	muls	r5, r2
 800af70:	460e      	mov	r6, r1
 800af72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af76:	f7fd ff8d 	bl	8008e94 <_malloc_r>
 800af7a:	4604      	mov	r4, r0
 800af7c:	b140      	cbz	r0, 800af90 <__sfmoreglue+0x28>
 800af7e:	2100      	movs	r1, #0
 800af80:	e9c0 1600 	strd	r1, r6, [r0]
 800af84:	300c      	adds	r0, #12
 800af86:	60a0      	str	r0, [r4, #8]
 800af88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af8c:	f7fd ff2c 	bl	8008de8 <memset>
 800af90:	4620      	mov	r0, r4
 800af92:	bd70      	pop	{r4, r5, r6, pc}

0800af94 <__sfp_lock_acquire>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__sfp_lock_acquire+0x8>)
 800af96:	f000 b8b8 	b.w	800b10a <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	200005f4 	.word	0x200005f4

0800afa0 <__sfp_lock_release>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sfp_lock_release+0x8>)
 800afa2:	f000 b8b3 	b.w	800b10c <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	200005f4 	.word	0x200005f4

0800afac <__sinit_lock_acquire>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__sinit_lock_acquire+0x8>)
 800afae:	f000 b8ac 	b.w	800b10a <__retarget_lock_acquire_recursive>
 800afb2:	bf00      	nop
 800afb4:	200005ef 	.word	0x200005ef

0800afb8 <__sinit_lock_release>:
 800afb8:	4801      	ldr	r0, [pc, #4]	; (800afc0 <__sinit_lock_release+0x8>)
 800afba:	f000 b8a7 	b.w	800b10c <__retarget_lock_release_recursive>
 800afbe:	bf00      	nop
 800afc0:	200005ef 	.word	0x200005ef

0800afc4 <__sinit>:
 800afc4:	b510      	push	{r4, lr}
 800afc6:	4604      	mov	r4, r0
 800afc8:	f7ff fff0 	bl	800afac <__sinit_lock_acquire>
 800afcc:	69a3      	ldr	r3, [r4, #24]
 800afce:	b11b      	cbz	r3, 800afd8 <__sinit+0x14>
 800afd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd4:	f7ff bff0 	b.w	800afb8 <__sinit_lock_release>
 800afd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afdc:	6523      	str	r3, [r4, #80]	; 0x50
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <__sinit+0x68>)
 800afe0:	4a13      	ldr	r2, [pc, #76]	; (800b030 <__sinit+0x6c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	bf04      	itt	eq
 800afea:	2301      	moveq	r3, #1
 800afec:	61a3      	streq	r3, [r4, #24]
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f820 	bl	800b034 <__sfp>
 800aff4:	6060      	str	r0, [r4, #4]
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 f81c 	bl	800b034 <__sfp>
 800affc:	60a0      	str	r0, [r4, #8]
 800affe:	4620      	mov	r0, r4
 800b000:	f000 f818 	bl	800b034 <__sfp>
 800b004:	2200      	movs	r2, #0
 800b006:	60e0      	str	r0, [r4, #12]
 800b008:	2104      	movs	r1, #4
 800b00a:	6860      	ldr	r0, [r4, #4]
 800b00c:	f7ff ff82 	bl	800af14 <std>
 800b010:	68a0      	ldr	r0, [r4, #8]
 800b012:	2201      	movs	r2, #1
 800b014:	2109      	movs	r1, #9
 800b016:	f7ff ff7d 	bl	800af14 <std>
 800b01a:	68e0      	ldr	r0, [r4, #12]
 800b01c:	2202      	movs	r2, #2
 800b01e:	2112      	movs	r1, #18
 800b020:	f7ff ff78 	bl	800af14 <std>
 800b024:	2301      	movs	r3, #1
 800b026:	61a3      	str	r3, [r4, #24]
 800b028:	e7d2      	b.n	800afd0 <__sinit+0xc>
 800b02a:	bf00      	nop
 800b02c:	0800c6a0 	.word	0x0800c6a0
 800b030:	0800af5d 	.word	0x0800af5d

0800b034 <__sfp>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	4607      	mov	r7, r0
 800b038:	f7ff ffac 	bl	800af94 <__sfp_lock_acquire>
 800b03c:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <__sfp+0x84>)
 800b03e:	681e      	ldr	r6, [r3, #0]
 800b040:	69b3      	ldr	r3, [r6, #24]
 800b042:	b913      	cbnz	r3, 800b04a <__sfp+0x16>
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff ffbd 	bl	800afc4 <__sinit>
 800b04a:	3648      	adds	r6, #72	; 0x48
 800b04c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b050:	3b01      	subs	r3, #1
 800b052:	d503      	bpl.n	800b05c <__sfp+0x28>
 800b054:	6833      	ldr	r3, [r6, #0]
 800b056:	b30b      	cbz	r3, 800b09c <__sfp+0x68>
 800b058:	6836      	ldr	r6, [r6, #0]
 800b05a:	e7f7      	b.n	800b04c <__sfp+0x18>
 800b05c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b060:	b9d5      	cbnz	r5, 800b098 <__sfp+0x64>
 800b062:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <__sfp+0x88>)
 800b064:	60e3      	str	r3, [r4, #12]
 800b066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b06a:	6665      	str	r5, [r4, #100]	; 0x64
 800b06c:	f000 f84c 	bl	800b108 <__retarget_lock_init_recursive>
 800b070:	f7ff ff96 	bl	800afa0 <__sfp_lock_release>
 800b074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b07c:	6025      	str	r5, [r4, #0]
 800b07e:	61a5      	str	r5, [r4, #24]
 800b080:	2208      	movs	r2, #8
 800b082:	4629      	mov	r1, r5
 800b084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b088:	f7fd feae 	bl	8008de8 <memset>
 800b08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b094:	4620      	mov	r0, r4
 800b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b098:	3468      	adds	r4, #104	; 0x68
 800b09a:	e7d9      	b.n	800b050 <__sfp+0x1c>
 800b09c:	2104      	movs	r1, #4
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f7ff ff62 	bl	800af68 <__sfmoreglue>
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	6030      	str	r0, [r6, #0]
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d1d5      	bne.n	800b058 <__sfp+0x24>
 800b0ac:	f7ff ff78 	bl	800afa0 <__sfp_lock_release>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	e7ee      	b.n	800b094 <__sfp+0x60>
 800b0b6:	bf00      	nop
 800b0b8:	0800c6a0 	.word	0x0800c6a0
 800b0bc:	ffff0001 	.word	0xffff0001

0800b0c0 <_fwalk_reent>:
 800b0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	4688      	mov	r8, r1
 800b0c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0cc:	2700      	movs	r7, #0
 800b0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d6:	d505      	bpl.n	800b0e4 <_fwalk_reent+0x24>
 800b0d8:	6824      	ldr	r4, [r4, #0]
 800b0da:	2c00      	cmp	r4, #0
 800b0dc:	d1f7      	bne.n	800b0ce <_fwalk_reent+0xe>
 800b0de:	4638      	mov	r0, r7
 800b0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e4:	89ab      	ldrh	r3, [r5, #12]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d907      	bls.n	800b0fa <_fwalk_reent+0x3a>
 800b0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	d003      	beq.n	800b0fa <_fwalk_reent+0x3a>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	47c0      	blx	r8
 800b0f8:	4307      	orrs	r7, r0
 800b0fa:	3568      	adds	r5, #104	; 0x68
 800b0fc:	e7e9      	b.n	800b0d2 <_fwalk_reent+0x12>
	...

0800b100 <_localeconv_r>:
 800b100:	4800      	ldr	r0, [pc, #0]	; (800b104 <_localeconv_r+0x4>)
 800b102:	4770      	bx	lr
 800b104:	20000160 	.word	0x20000160

0800b108 <__retarget_lock_init_recursive>:
 800b108:	4770      	bx	lr

0800b10a <__retarget_lock_acquire_recursive>:
 800b10a:	4770      	bx	lr

0800b10c <__retarget_lock_release_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__swhatbuf_r>:
 800b10e:	b570      	push	{r4, r5, r6, lr}
 800b110:	460e      	mov	r6, r1
 800b112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b116:	2900      	cmp	r1, #0
 800b118:	b096      	sub	sp, #88	; 0x58
 800b11a:	4614      	mov	r4, r2
 800b11c:	461d      	mov	r5, r3
 800b11e:	da07      	bge.n	800b130 <__swhatbuf_r+0x22>
 800b120:	2300      	movs	r3, #0
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	89b3      	ldrh	r3, [r6, #12]
 800b126:	061a      	lsls	r2, r3, #24
 800b128:	d410      	bmi.n	800b14c <__swhatbuf_r+0x3e>
 800b12a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b12e:	e00e      	b.n	800b14e <__swhatbuf_r+0x40>
 800b130:	466a      	mov	r2, sp
 800b132:	f000 fe2b 	bl	800bd8c <_fstat_r>
 800b136:	2800      	cmp	r0, #0
 800b138:	dbf2      	blt.n	800b120 <__swhatbuf_r+0x12>
 800b13a:	9a01      	ldr	r2, [sp, #4]
 800b13c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b144:	425a      	negs	r2, r3
 800b146:	415a      	adcs	r2, r3
 800b148:	602a      	str	r2, [r5, #0]
 800b14a:	e7ee      	b.n	800b12a <__swhatbuf_r+0x1c>
 800b14c:	2340      	movs	r3, #64	; 0x40
 800b14e:	2000      	movs	r0, #0
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	b016      	add	sp, #88	; 0x58
 800b154:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b158 <__smakebuf_r>:
 800b158:	898b      	ldrh	r3, [r1, #12]
 800b15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b15c:	079d      	lsls	r5, r3, #30
 800b15e:	4606      	mov	r6, r0
 800b160:	460c      	mov	r4, r1
 800b162:	d507      	bpl.n	800b174 <__smakebuf_r+0x1c>
 800b164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	2301      	movs	r3, #1
 800b16e:	6163      	str	r3, [r4, #20]
 800b170:	b002      	add	sp, #8
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	ab01      	add	r3, sp, #4
 800b176:	466a      	mov	r2, sp
 800b178:	f7ff ffc9 	bl	800b10e <__swhatbuf_r>
 800b17c:	9900      	ldr	r1, [sp, #0]
 800b17e:	4605      	mov	r5, r0
 800b180:	4630      	mov	r0, r6
 800b182:	f7fd fe87 	bl	8008e94 <_malloc_r>
 800b186:	b948      	cbnz	r0, 800b19c <__smakebuf_r+0x44>
 800b188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d4ef      	bmi.n	800b170 <__smakebuf_r+0x18>
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	f043 0302 	orr.w	r3, r3, #2
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	e7e3      	b.n	800b164 <__smakebuf_r+0xc>
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <__smakebuf_r+0x7c>)
 800b19e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	6020      	str	r0, [r4, #0]
 800b1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a8:	81a3      	strh	r3, [r4, #12]
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	6163      	str	r3, [r4, #20]
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	6120      	str	r0, [r4, #16]
 800b1b2:	b15b      	cbz	r3, 800b1cc <__smakebuf_r+0x74>
 800b1b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f000 fdf9 	bl	800bdb0 <_isatty_r>
 800b1be:	b128      	cbz	r0, 800b1cc <__smakebuf_r+0x74>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f023 0303 	bic.w	r3, r3, #3
 800b1c6:	f043 0301 	orr.w	r3, r3, #1
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	89a0      	ldrh	r0, [r4, #12]
 800b1ce:	4305      	orrs	r5, r0
 800b1d0:	81a5      	strh	r5, [r4, #12]
 800b1d2:	e7cd      	b.n	800b170 <__smakebuf_r+0x18>
 800b1d4:	0800af5d 	.word	0x0800af5d

0800b1d8 <__ascii_mbtowc>:
 800b1d8:	b082      	sub	sp, #8
 800b1da:	b901      	cbnz	r1, 800b1de <__ascii_mbtowc+0x6>
 800b1dc:	a901      	add	r1, sp, #4
 800b1de:	b142      	cbz	r2, 800b1f2 <__ascii_mbtowc+0x1a>
 800b1e0:	b14b      	cbz	r3, 800b1f6 <__ascii_mbtowc+0x1e>
 800b1e2:	7813      	ldrb	r3, [r2, #0]
 800b1e4:	600b      	str	r3, [r1, #0]
 800b1e6:	7812      	ldrb	r2, [r2, #0]
 800b1e8:	1e10      	subs	r0, r2, #0
 800b1ea:	bf18      	it	ne
 800b1ec:	2001      	movne	r0, #1
 800b1ee:	b002      	add	sp, #8
 800b1f0:	4770      	bx	lr
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	e7fb      	b.n	800b1ee <__ascii_mbtowc+0x16>
 800b1f6:	f06f 0001 	mvn.w	r0, #1
 800b1fa:	e7f8      	b.n	800b1ee <__ascii_mbtowc+0x16>

0800b1fc <__malloc_lock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__malloc_lock+0x8>)
 800b1fe:	f7ff bf84 	b.w	800b10a <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	200005f0 	.word	0x200005f0

0800b208 <__malloc_unlock>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__malloc_unlock+0x8>)
 800b20a:	f7ff bf7f 	b.w	800b10c <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	200005f0 	.word	0x200005f0

0800b214 <_Balloc>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	b976      	cbnz	r6, 800b23c <_Balloc+0x28>
 800b21e:	2010      	movs	r0, #16
 800b220:	f7fd fdb6 	bl	8008d90 <malloc>
 800b224:	4602      	mov	r2, r0
 800b226:	6260      	str	r0, [r4, #36]	; 0x24
 800b228:	b920      	cbnz	r0, 800b234 <_Balloc+0x20>
 800b22a:	4b18      	ldr	r3, [pc, #96]	; (800b28c <_Balloc+0x78>)
 800b22c:	4818      	ldr	r0, [pc, #96]	; (800b290 <_Balloc+0x7c>)
 800b22e:	2166      	movs	r1, #102	; 0x66
 800b230:	f000 fd6c 	bl	800bd0c <__assert_func>
 800b234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b238:	6006      	str	r6, [r0, #0]
 800b23a:	60c6      	str	r6, [r0, #12]
 800b23c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b23e:	68f3      	ldr	r3, [r6, #12]
 800b240:	b183      	cbz	r3, 800b264 <_Balloc+0x50>
 800b242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b24a:	b9b8      	cbnz	r0, 800b27c <_Balloc+0x68>
 800b24c:	2101      	movs	r1, #1
 800b24e:	fa01 f605 	lsl.w	r6, r1, r5
 800b252:	1d72      	adds	r2, r6, #5
 800b254:	0092      	lsls	r2, r2, #2
 800b256:	4620      	mov	r0, r4
 800b258:	f000 fb5a 	bl	800b910 <_calloc_r>
 800b25c:	b160      	cbz	r0, 800b278 <_Balloc+0x64>
 800b25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b262:	e00e      	b.n	800b282 <_Balloc+0x6e>
 800b264:	2221      	movs	r2, #33	; 0x21
 800b266:	2104      	movs	r1, #4
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fb51 	bl	800b910 <_calloc_r>
 800b26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b270:	60f0      	str	r0, [r6, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e4      	bne.n	800b242 <_Balloc+0x2e>
 800b278:	2000      	movs	r0, #0
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	6802      	ldr	r2, [r0, #0]
 800b27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b282:	2300      	movs	r3, #0
 800b284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b288:	e7f7      	b.n	800b27a <_Balloc+0x66>
 800b28a:	bf00      	nop
 800b28c:	0800cd7b 	.word	0x0800cd7b
 800b290:	0800ce6e 	.word	0x0800ce6e

0800b294 <_Bfree>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b976      	cbnz	r6, 800b2bc <_Bfree+0x28>
 800b29e:	2010      	movs	r0, #16
 800b2a0:	f7fd fd76 	bl	8008d90 <malloc>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b2a8:	b920      	cbnz	r0, 800b2b4 <_Bfree+0x20>
 800b2aa:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <_Bfree+0x3c>)
 800b2ac:	4809      	ldr	r0, [pc, #36]	; (800b2d4 <_Bfree+0x40>)
 800b2ae:	218a      	movs	r1, #138	; 0x8a
 800b2b0:	f000 fd2c 	bl	800bd0c <__assert_func>
 800b2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b8:	6006      	str	r6, [r0, #0]
 800b2ba:	60c6      	str	r6, [r0, #12]
 800b2bc:	b13c      	cbz	r4, 800b2ce <_Bfree+0x3a>
 800b2be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2c0:	6862      	ldr	r2, [r4, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2c8:	6021      	str	r1, [r4, #0]
 800b2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	0800cd7b 	.word	0x0800cd7b
 800b2d4:	0800ce6e 	.word	0x0800ce6e

0800b2d8 <__multadd>:
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	690e      	ldr	r6, [r1, #16]
 800b2de:	4607      	mov	r7, r0
 800b2e0:	4698      	mov	r8, r3
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	f101 0014 	add.w	r0, r1, #20
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6805      	ldr	r5, [r0, #0]
 800b2ec:	b2a9      	uxth	r1, r5
 800b2ee:	fb02 8101 	mla	r1, r2, r1, r8
 800b2f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b2f6:	0c2d      	lsrs	r5, r5, #16
 800b2f8:	fb02 c505 	mla	r5, r2, r5, ip
 800b2fc:	b289      	uxth	r1, r1
 800b2fe:	3301      	adds	r3, #1
 800b300:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b304:	429e      	cmp	r6, r3
 800b306:	f840 1b04 	str.w	r1, [r0], #4
 800b30a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b30e:	dcec      	bgt.n	800b2ea <__multadd+0x12>
 800b310:	f1b8 0f00 	cmp.w	r8, #0
 800b314:	d022      	beq.n	800b35c <__multadd+0x84>
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	42b3      	cmp	r3, r6
 800b31a:	dc19      	bgt.n	800b350 <__multadd+0x78>
 800b31c:	6861      	ldr	r1, [r4, #4]
 800b31e:	4638      	mov	r0, r7
 800b320:	3101      	adds	r1, #1
 800b322:	f7ff ff77 	bl	800b214 <_Balloc>
 800b326:	4605      	mov	r5, r0
 800b328:	b928      	cbnz	r0, 800b336 <__multadd+0x5e>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <__multadd+0x8c>)
 800b32e:	480e      	ldr	r0, [pc, #56]	; (800b368 <__multadd+0x90>)
 800b330:	21b5      	movs	r1, #181	; 0xb5
 800b332:	f000 fceb 	bl	800bd0c <__assert_func>
 800b336:	6922      	ldr	r2, [r4, #16]
 800b338:	3202      	adds	r2, #2
 800b33a:	f104 010c 	add.w	r1, r4, #12
 800b33e:	0092      	lsls	r2, r2, #2
 800b340:	300c      	adds	r0, #12
 800b342:	f7fd fd43 	bl	8008dcc <memcpy>
 800b346:	4621      	mov	r1, r4
 800b348:	4638      	mov	r0, r7
 800b34a:	f7ff ffa3 	bl	800b294 <_Bfree>
 800b34e:	462c      	mov	r4, r5
 800b350:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b354:	3601      	adds	r6, #1
 800b356:	f8c3 8014 	str.w	r8, [r3, #20]
 800b35a:	6126      	str	r6, [r4, #16]
 800b35c:	4620      	mov	r0, r4
 800b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b362:	bf00      	nop
 800b364:	0800cdf1 	.word	0x0800cdf1
 800b368:	0800ce6e 	.word	0x0800ce6e

0800b36c <__hi0bits>:
 800b36c:	0c02      	lsrs	r2, r0, #16
 800b36e:	0412      	lsls	r2, r2, #16
 800b370:	4603      	mov	r3, r0
 800b372:	b9ca      	cbnz	r2, 800b3a8 <__hi0bits+0x3c>
 800b374:	0403      	lsls	r3, r0, #16
 800b376:	2010      	movs	r0, #16
 800b378:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b37c:	bf04      	itt	eq
 800b37e:	021b      	lsleq	r3, r3, #8
 800b380:	3008      	addeq	r0, #8
 800b382:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b386:	bf04      	itt	eq
 800b388:	011b      	lsleq	r3, r3, #4
 800b38a:	3004      	addeq	r0, #4
 800b38c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b390:	bf04      	itt	eq
 800b392:	009b      	lsleq	r3, r3, #2
 800b394:	3002      	addeq	r0, #2
 800b396:	2b00      	cmp	r3, #0
 800b398:	db05      	blt.n	800b3a6 <__hi0bits+0x3a>
 800b39a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b39e:	f100 0001 	add.w	r0, r0, #1
 800b3a2:	bf08      	it	eq
 800b3a4:	2020      	moveq	r0, #32
 800b3a6:	4770      	bx	lr
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e7e5      	b.n	800b378 <__hi0bits+0xc>

0800b3ac <__lo0bits>:
 800b3ac:	6803      	ldr	r3, [r0, #0]
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	f013 0007 	ands.w	r0, r3, #7
 800b3b4:	d00b      	beq.n	800b3ce <__lo0bits+0x22>
 800b3b6:	07d9      	lsls	r1, r3, #31
 800b3b8:	d422      	bmi.n	800b400 <__lo0bits+0x54>
 800b3ba:	0798      	lsls	r0, r3, #30
 800b3bc:	bf49      	itett	mi
 800b3be:	085b      	lsrmi	r3, r3, #1
 800b3c0:	089b      	lsrpl	r3, r3, #2
 800b3c2:	2001      	movmi	r0, #1
 800b3c4:	6013      	strmi	r3, [r2, #0]
 800b3c6:	bf5c      	itt	pl
 800b3c8:	6013      	strpl	r3, [r2, #0]
 800b3ca:	2002      	movpl	r0, #2
 800b3cc:	4770      	bx	lr
 800b3ce:	b299      	uxth	r1, r3
 800b3d0:	b909      	cbnz	r1, 800b3d6 <__lo0bits+0x2a>
 800b3d2:	0c1b      	lsrs	r3, r3, #16
 800b3d4:	2010      	movs	r0, #16
 800b3d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3da:	bf04      	itt	eq
 800b3dc:	0a1b      	lsreq	r3, r3, #8
 800b3de:	3008      	addeq	r0, #8
 800b3e0:	0719      	lsls	r1, r3, #28
 800b3e2:	bf04      	itt	eq
 800b3e4:	091b      	lsreq	r3, r3, #4
 800b3e6:	3004      	addeq	r0, #4
 800b3e8:	0799      	lsls	r1, r3, #30
 800b3ea:	bf04      	itt	eq
 800b3ec:	089b      	lsreq	r3, r3, #2
 800b3ee:	3002      	addeq	r0, #2
 800b3f0:	07d9      	lsls	r1, r3, #31
 800b3f2:	d403      	bmi.n	800b3fc <__lo0bits+0x50>
 800b3f4:	085b      	lsrs	r3, r3, #1
 800b3f6:	f100 0001 	add.w	r0, r0, #1
 800b3fa:	d003      	beq.n	800b404 <__lo0bits+0x58>
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4770      	bx	lr
 800b400:	2000      	movs	r0, #0
 800b402:	4770      	bx	lr
 800b404:	2020      	movs	r0, #32
 800b406:	4770      	bx	lr

0800b408 <__i2b>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	2101      	movs	r1, #1
 800b40e:	f7ff ff01 	bl	800b214 <_Balloc>
 800b412:	4602      	mov	r2, r0
 800b414:	b928      	cbnz	r0, 800b422 <__i2b+0x1a>
 800b416:	4b05      	ldr	r3, [pc, #20]	; (800b42c <__i2b+0x24>)
 800b418:	4805      	ldr	r0, [pc, #20]	; (800b430 <__i2b+0x28>)
 800b41a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b41e:	f000 fc75 	bl	800bd0c <__assert_func>
 800b422:	2301      	movs	r3, #1
 800b424:	6144      	str	r4, [r0, #20]
 800b426:	6103      	str	r3, [r0, #16]
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	bf00      	nop
 800b42c:	0800cdf1 	.word	0x0800cdf1
 800b430:	0800ce6e 	.word	0x0800ce6e

0800b434 <__multiply>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	4614      	mov	r4, r2
 800b43a:	690a      	ldr	r2, [r1, #16]
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	429a      	cmp	r2, r3
 800b440:	bfb8      	it	lt
 800b442:	460b      	movlt	r3, r1
 800b444:	460d      	mov	r5, r1
 800b446:	bfbc      	itt	lt
 800b448:	4625      	movlt	r5, r4
 800b44a:	461c      	movlt	r4, r3
 800b44c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b450:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b454:	68ab      	ldr	r3, [r5, #8]
 800b456:	6869      	ldr	r1, [r5, #4]
 800b458:	eb0a 0709 	add.w	r7, sl, r9
 800b45c:	42bb      	cmp	r3, r7
 800b45e:	b085      	sub	sp, #20
 800b460:	bfb8      	it	lt
 800b462:	3101      	addlt	r1, #1
 800b464:	f7ff fed6 	bl	800b214 <_Balloc>
 800b468:	b930      	cbnz	r0, 800b478 <__multiply+0x44>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4b42      	ldr	r3, [pc, #264]	; (800b578 <__multiply+0x144>)
 800b46e:	4843      	ldr	r0, [pc, #268]	; (800b57c <__multiply+0x148>)
 800b470:	f240 115d 	movw	r1, #349	; 0x15d
 800b474:	f000 fc4a 	bl	800bd0c <__assert_func>
 800b478:	f100 0614 	add.w	r6, r0, #20
 800b47c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b480:	4633      	mov	r3, r6
 800b482:	2200      	movs	r2, #0
 800b484:	4543      	cmp	r3, r8
 800b486:	d31e      	bcc.n	800b4c6 <__multiply+0x92>
 800b488:	f105 0c14 	add.w	ip, r5, #20
 800b48c:	f104 0314 	add.w	r3, r4, #20
 800b490:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b494:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b498:	9202      	str	r2, [sp, #8]
 800b49a:	ebac 0205 	sub.w	r2, ip, r5
 800b49e:	3a15      	subs	r2, #21
 800b4a0:	f022 0203 	bic.w	r2, r2, #3
 800b4a4:	3204      	adds	r2, #4
 800b4a6:	f105 0115 	add.w	r1, r5, #21
 800b4aa:	458c      	cmp	ip, r1
 800b4ac:	bf38      	it	cc
 800b4ae:	2204      	movcc	r2, #4
 800b4b0:	9201      	str	r2, [sp, #4]
 800b4b2:	9a02      	ldr	r2, [sp, #8]
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d808      	bhi.n	800b4cc <__multiply+0x98>
 800b4ba:	2f00      	cmp	r7, #0
 800b4bc:	dc55      	bgt.n	800b56a <__multiply+0x136>
 800b4be:	6107      	str	r7, [r0, #16]
 800b4c0:	b005      	add	sp, #20
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	f843 2b04 	str.w	r2, [r3], #4
 800b4ca:	e7db      	b.n	800b484 <__multiply+0x50>
 800b4cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4d0:	f1ba 0f00 	cmp.w	sl, #0
 800b4d4:	d020      	beq.n	800b518 <__multiply+0xe4>
 800b4d6:	f105 0e14 	add.w	lr, r5, #20
 800b4da:	46b1      	mov	r9, r6
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b4e2:	f8d9 b000 	ldr.w	fp, [r9]
 800b4e6:	b2a1      	uxth	r1, r4
 800b4e8:	fa1f fb8b 	uxth.w	fp, fp
 800b4ec:	fb0a b101 	mla	r1, sl, r1, fp
 800b4f0:	4411      	add	r1, r2
 800b4f2:	f8d9 2000 	ldr.w	r2, [r9]
 800b4f6:	0c24      	lsrs	r4, r4, #16
 800b4f8:	0c12      	lsrs	r2, r2, #16
 800b4fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b4fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b502:	b289      	uxth	r1, r1
 800b504:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b508:	45f4      	cmp	ip, lr
 800b50a:	f849 1b04 	str.w	r1, [r9], #4
 800b50e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b512:	d8e4      	bhi.n	800b4de <__multiply+0xaa>
 800b514:	9901      	ldr	r1, [sp, #4]
 800b516:	5072      	str	r2, [r6, r1]
 800b518:	9a03      	ldr	r2, [sp, #12]
 800b51a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b51e:	3304      	adds	r3, #4
 800b520:	f1b9 0f00 	cmp.w	r9, #0
 800b524:	d01f      	beq.n	800b566 <__multiply+0x132>
 800b526:	6834      	ldr	r4, [r6, #0]
 800b528:	f105 0114 	add.w	r1, r5, #20
 800b52c:	46b6      	mov	lr, r6
 800b52e:	f04f 0a00 	mov.w	sl, #0
 800b532:	880a      	ldrh	r2, [r1, #0]
 800b534:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b538:	fb09 b202 	mla	r2, r9, r2, fp
 800b53c:	4492      	add	sl, r2
 800b53e:	b2a4      	uxth	r4, r4
 800b540:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b544:	f84e 4b04 	str.w	r4, [lr], #4
 800b548:	f851 4b04 	ldr.w	r4, [r1], #4
 800b54c:	f8be 2000 	ldrh.w	r2, [lr]
 800b550:	0c24      	lsrs	r4, r4, #16
 800b552:	fb09 2404 	mla	r4, r9, r4, r2
 800b556:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b55a:	458c      	cmp	ip, r1
 800b55c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b560:	d8e7      	bhi.n	800b532 <__multiply+0xfe>
 800b562:	9a01      	ldr	r2, [sp, #4]
 800b564:	50b4      	str	r4, [r6, r2]
 800b566:	3604      	adds	r6, #4
 800b568:	e7a3      	b.n	800b4b2 <__multiply+0x7e>
 800b56a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1a5      	bne.n	800b4be <__multiply+0x8a>
 800b572:	3f01      	subs	r7, #1
 800b574:	e7a1      	b.n	800b4ba <__multiply+0x86>
 800b576:	bf00      	nop
 800b578:	0800cdf1 	.word	0x0800cdf1
 800b57c:	0800ce6e 	.word	0x0800ce6e

0800b580 <__pow5mult>:
 800b580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b584:	4615      	mov	r5, r2
 800b586:	f012 0203 	ands.w	r2, r2, #3
 800b58a:	4606      	mov	r6, r0
 800b58c:	460f      	mov	r7, r1
 800b58e:	d007      	beq.n	800b5a0 <__pow5mult+0x20>
 800b590:	4c25      	ldr	r4, [pc, #148]	; (800b628 <__pow5mult+0xa8>)
 800b592:	3a01      	subs	r2, #1
 800b594:	2300      	movs	r3, #0
 800b596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b59a:	f7ff fe9d 	bl	800b2d8 <__multadd>
 800b59e:	4607      	mov	r7, r0
 800b5a0:	10ad      	asrs	r5, r5, #2
 800b5a2:	d03d      	beq.n	800b620 <__pow5mult+0xa0>
 800b5a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5a6:	b97c      	cbnz	r4, 800b5c8 <__pow5mult+0x48>
 800b5a8:	2010      	movs	r0, #16
 800b5aa:	f7fd fbf1 	bl	8008d90 <malloc>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5b2:	b928      	cbnz	r0, 800b5c0 <__pow5mult+0x40>
 800b5b4:	4b1d      	ldr	r3, [pc, #116]	; (800b62c <__pow5mult+0xac>)
 800b5b6:	481e      	ldr	r0, [pc, #120]	; (800b630 <__pow5mult+0xb0>)
 800b5b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5bc:	f000 fba6 	bl	800bd0c <__assert_func>
 800b5c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5c4:	6004      	str	r4, [r0, #0]
 800b5c6:	60c4      	str	r4, [r0, #12]
 800b5c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5d0:	b94c      	cbnz	r4, 800b5e6 <__pow5mult+0x66>
 800b5d2:	f240 2171 	movw	r1, #625	; 0x271
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7ff ff16 	bl	800b408 <__i2b>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	6003      	str	r3, [r0, #0]
 800b5e6:	f04f 0900 	mov.w	r9, #0
 800b5ea:	07eb      	lsls	r3, r5, #31
 800b5ec:	d50a      	bpl.n	800b604 <__pow5mult+0x84>
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	4622      	mov	r2, r4
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7ff ff1e 	bl	800b434 <__multiply>
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff fe49 	bl	800b294 <_Bfree>
 800b602:	4647      	mov	r7, r8
 800b604:	106d      	asrs	r5, r5, #1
 800b606:	d00b      	beq.n	800b620 <__pow5mult+0xa0>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	b938      	cbnz	r0, 800b61c <__pow5mult+0x9c>
 800b60c:	4622      	mov	r2, r4
 800b60e:	4621      	mov	r1, r4
 800b610:	4630      	mov	r0, r6
 800b612:	f7ff ff0f 	bl	800b434 <__multiply>
 800b616:	6020      	str	r0, [r4, #0]
 800b618:	f8c0 9000 	str.w	r9, [r0]
 800b61c:	4604      	mov	r4, r0
 800b61e:	e7e4      	b.n	800b5ea <__pow5mult+0x6a>
 800b620:	4638      	mov	r0, r7
 800b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b626:	bf00      	nop
 800b628:	0800cfc0 	.word	0x0800cfc0
 800b62c:	0800cd7b 	.word	0x0800cd7b
 800b630:	0800ce6e 	.word	0x0800ce6e

0800b634 <__lshift>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	460c      	mov	r4, r1
 800b63a:	6849      	ldr	r1, [r1, #4]
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b642:	68a3      	ldr	r3, [r4, #8]
 800b644:	4607      	mov	r7, r0
 800b646:	4691      	mov	r9, r2
 800b648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b64c:	f108 0601 	add.w	r6, r8, #1
 800b650:	42b3      	cmp	r3, r6
 800b652:	db0b      	blt.n	800b66c <__lshift+0x38>
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff fddd 	bl	800b214 <_Balloc>
 800b65a:	4605      	mov	r5, r0
 800b65c:	b948      	cbnz	r0, 800b672 <__lshift+0x3e>
 800b65e:	4602      	mov	r2, r0
 800b660:	4b28      	ldr	r3, [pc, #160]	; (800b704 <__lshift+0xd0>)
 800b662:	4829      	ldr	r0, [pc, #164]	; (800b708 <__lshift+0xd4>)
 800b664:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b668:	f000 fb50 	bl	800bd0c <__assert_func>
 800b66c:	3101      	adds	r1, #1
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	e7ee      	b.n	800b650 <__lshift+0x1c>
 800b672:	2300      	movs	r3, #0
 800b674:	f100 0114 	add.w	r1, r0, #20
 800b678:	f100 0210 	add.w	r2, r0, #16
 800b67c:	4618      	mov	r0, r3
 800b67e:	4553      	cmp	r3, sl
 800b680:	db33      	blt.n	800b6ea <__lshift+0xb6>
 800b682:	6920      	ldr	r0, [r4, #16]
 800b684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b688:	f104 0314 	add.w	r3, r4, #20
 800b68c:	f019 091f 	ands.w	r9, r9, #31
 800b690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b694:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b698:	d02b      	beq.n	800b6f2 <__lshift+0xbe>
 800b69a:	f1c9 0e20 	rsb	lr, r9, #32
 800b69e:	468a      	mov	sl, r1
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b6a8:	4302      	orrs	r2, r0
 800b6aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b2:	459c      	cmp	ip, r3
 800b6b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6b8:	d8f3      	bhi.n	800b6a2 <__lshift+0x6e>
 800b6ba:	ebac 0304 	sub.w	r3, ip, r4
 800b6be:	3b15      	subs	r3, #21
 800b6c0:	f023 0303 	bic.w	r3, r3, #3
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	f104 0015 	add.w	r0, r4, #21
 800b6ca:	4584      	cmp	ip, r0
 800b6cc:	bf38      	it	cc
 800b6ce:	2304      	movcc	r3, #4
 800b6d0:	50ca      	str	r2, [r1, r3]
 800b6d2:	b10a      	cbz	r2, 800b6d8 <__lshift+0xa4>
 800b6d4:	f108 0602 	add.w	r6, r8, #2
 800b6d8:	3e01      	subs	r6, #1
 800b6da:	4638      	mov	r0, r7
 800b6dc:	612e      	str	r6, [r5, #16]
 800b6de:	4621      	mov	r1, r4
 800b6e0:	f7ff fdd8 	bl	800b294 <_Bfree>
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	e7c5      	b.n	800b67e <__lshift+0x4a>
 800b6f2:	3904      	subs	r1, #4
 800b6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6fc:	459c      	cmp	ip, r3
 800b6fe:	d8f9      	bhi.n	800b6f4 <__lshift+0xc0>
 800b700:	e7ea      	b.n	800b6d8 <__lshift+0xa4>
 800b702:	bf00      	nop
 800b704:	0800cdf1 	.word	0x0800cdf1
 800b708:	0800ce6e 	.word	0x0800ce6e

0800b70c <__mcmp>:
 800b70c:	690a      	ldr	r2, [r1, #16]
 800b70e:	4603      	mov	r3, r0
 800b710:	6900      	ldr	r0, [r0, #16]
 800b712:	1a80      	subs	r0, r0, r2
 800b714:	b530      	push	{r4, r5, lr}
 800b716:	d10d      	bne.n	800b734 <__mcmp+0x28>
 800b718:	3314      	adds	r3, #20
 800b71a:	3114      	adds	r1, #20
 800b71c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b720:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b72c:	4295      	cmp	r5, r2
 800b72e:	d002      	beq.n	800b736 <__mcmp+0x2a>
 800b730:	d304      	bcc.n	800b73c <__mcmp+0x30>
 800b732:	2001      	movs	r0, #1
 800b734:	bd30      	pop	{r4, r5, pc}
 800b736:	42a3      	cmp	r3, r4
 800b738:	d3f4      	bcc.n	800b724 <__mcmp+0x18>
 800b73a:	e7fb      	b.n	800b734 <__mcmp+0x28>
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e7f8      	b.n	800b734 <__mcmp+0x28>
	...

0800b744 <__mdiff>:
 800b744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	4606      	mov	r6, r0
 800b74c:	4611      	mov	r1, r2
 800b74e:	4620      	mov	r0, r4
 800b750:	4617      	mov	r7, r2
 800b752:	f7ff ffdb 	bl	800b70c <__mcmp>
 800b756:	1e05      	subs	r5, r0, #0
 800b758:	d111      	bne.n	800b77e <__mdiff+0x3a>
 800b75a:	4629      	mov	r1, r5
 800b75c:	4630      	mov	r0, r6
 800b75e:	f7ff fd59 	bl	800b214 <_Balloc>
 800b762:	4602      	mov	r2, r0
 800b764:	b928      	cbnz	r0, 800b772 <__mdiff+0x2e>
 800b766:	4b3a      	ldr	r3, [pc, #232]	; (800b850 <__mdiff+0x10c>)
 800b768:	f240 2132 	movw	r1, #562	; 0x232
 800b76c:	4839      	ldr	r0, [pc, #228]	; (800b854 <__mdiff+0x110>)
 800b76e:	f000 facd 	bl	800bd0c <__assert_func>
 800b772:	2301      	movs	r3, #1
 800b774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b778:	4610      	mov	r0, r2
 800b77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77e:	bfa4      	itt	ge
 800b780:	463b      	movge	r3, r7
 800b782:	4627      	movge	r7, r4
 800b784:	4630      	mov	r0, r6
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	bfa6      	itte	ge
 800b78a:	461c      	movge	r4, r3
 800b78c:	2500      	movge	r5, #0
 800b78e:	2501      	movlt	r5, #1
 800b790:	f7ff fd40 	bl	800b214 <_Balloc>
 800b794:	4602      	mov	r2, r0
 800b796:	b918      	cbnz	r0, 800b7a0 <__mdiff+0x5c>
 800b798:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <__mdiff+0x10c>)
 800b79a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b79e:	e7e5      	b.n	800b76c <__mdiff+0x28>
 800b7a0:	693e      	ldr	r6, [r7, #16]
 800b7a2:	60c5      	str	r5, [r0, #12]
 800b7a4:	6925      	ldr	r5, [r4, #16]
 800b7a6:	f107 0114 	add.w	r1, r7, #20
 800b7aa:	f100 0e14 	add.w	lr, r0, #20
 800b7ae:	f104 0914 	add.w	r9, r4, #20
 800b7b2:	f107 0010 	add.w	r0, r7, #16
 800b7b6:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b7ba:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b7be:	46f2      	mov	sl, lr
 800b7c0:	2700      	movs	r7, #0
 800b7c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7c6:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b7ca:	fa1f f883 	uxth.w	r8, r3
 800b7ce:	fa17 f78b 	uxtah	r7, r7, fp
 800b7d2:	0c1b      	lsrs	r3, r3, #16
 800b7d4:	eba7 0808 	sub.w	r8, r7, r8
 800b7d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7e0:	fa1f f888 	uxth.w	r8, r8
 800b7e4:	141f      	asrs	r7, r3, #16
 800b7e6:	454d      	cmp	r5, r9
 800b7e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7ec:	f84a 3b04 	str.w	r3, [sl], #4
 800b7f0:	d8e7      	bhi.n	800b7c2 <__mdiff+0x7e>
 800b7f2:	1b2b      	subs	r3, r5, r4
 800b7f4:	3b15      	subs	r3, #21
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	3415      	adds	r4, #21
 800b7fe:	42a5      	cmp	r5, r4
 800b800:	bf38      	it	cc
 800b802:	2304      	movcc	r3, #4
 800b804:	4419      	add	r1, r3
 800b806:	4473      	add	r3, lr
 800b808:	469e      	mov	lr, r3
 800b80a:	460d      	mov	r5, r1
 800b80c:	4565      	cmp	r5, ip
 800b80e:	d30e      	bcc.n	800b82e <__mdiff+0xea>
 800b810:	f10c 0003 	add.w	r0, ip, #3
 800b814:	1a40      	subs	r0, r0, r1
 800b816:	f020 0003 	bic.w	r0, r0, #3
 800b81a:	3903      	subs	r1, #3
 800b81c:	458c      	cmp	ip, r1
 800b81e:	bf38      	it	cc
 800b820:	2000      	movcc	r0, #0
 800b822:	4418      	add	r0, r3
 800b824:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b828:	b17b      	cbz	r3, 800b84a <__mdiff+0x106>
 800b82a:	6116      	str	r6, [r2, #16]
 800b82c:	e7a4      	b.n	800b778 <__mdiff+0x34>
 800b82e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b832:	fa17 f488 	uxtah	r4, r7, r8
 800b836:	1420      	asrs	r0, r4, #16
 800b838:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b83c:	b2a4      	uxth	r4, r4
 800b83e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800b842:	f84e 4b04 	str.w	r4, [lr], #4
 800b846:	1407      	asrs	r7, r0, #16
 800b848:	e7e0      	b.n	800b80c <__mdiff+0xc8>
 800b84a:	3e01      	subs	r6, #1
 800b84c:	e7ea      	b.n	800b824 <__mdiff+0xe0>
 800b84e:	bf00      	nop
 800b850:	0800cdf1 	.word	0x0800cdf1
 800b854:	0800ce6e 	.word	0x0800ce6e

0800b858 <__d2b>:
 800b858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b85c:	2101      	movs	r1, #1
 800b85e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b862:	4690      	mov	r8, r2
 800b864:	461d      	mov	r5, r3
 800b866:	f7ff fcd5 	bl	800b214 <_Balloc>
 800b86a:	4604      	mov	r4, r0
 800b86c:	b930      	cbnz	r0, 800b87c <__d2b+0x24>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b25      	ldr	r3, [pc, #148]	; (800b908 <__d2b+0xb0>)
 800b872:	4826      	ldr	r0, [pc, #152]	; (800b90c <__d2b+0xb4>)
 800b874:	f240 310a 	movw	r1, #778	; 0x30a
 800b878:	f000 fa48 	bl	800bd0c <__assert_func>
 800b87c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b880:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b884:	bb2d      	cbnz	r5, 800b8d2 <__d2b+0x7a>
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	f1b8 0300 	subs.w	r3, r8, #0
 800b88c:	d026      	beq.n	800b8dc <__d2b+0x84>
 800b88e:	4668      	mov	r0, sp
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	f7ff fd8b 	bl	800b3ac <__lo0bits>
 800b896:	9900      	ldr	r1, [sp, #0]
 800b898:	b1f0      	cbz	r0, 800b8d8 <__d2b+0x80>
 800b89a:	9a01      	ldr	r2, [sp, #4]
 800b89c:	f1c0 0320 	rsb	r3, r0, #32
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	40c2      	lsrs	r2, r0
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	9201      	str	r2, [sp, #4]
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	61a3      	str	r3, [r4, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bf14      	ite	ne
 800b8b4:	2102      	movne	r1, #2
 800b8b6:	2101      	moveq	r1, #1
 800b8b8:	6121      	str	r1, [r4, #16]
 800b8ba:	b1c5      	cbz	r5, 800b8ee <__d2b+0x96>
 800b8bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8c0:	4405      	add	r5, r0
 800b8c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8c6:	603d      	str	r5, [r7, #0]
 800b8c8:	6030      	str	r0, [r6, #0]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	b002      	add	sp, #8
 800b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8d6:	e7d6      	b.n	800b886 <__d2b+0x2e>
 800b8d8:	6161      	str	r1, [r4, #20]
 800b8da:	e7e7      	b.n	800b8ac <__d2b+0x54>
 800b8dc:	a801      	add	r0, sp, #4
 800b8de:	f7ff fd65 	bl	800b3ac <__lo0bits>
 800b8e2:	9b01      	ldr	r3, [sp, #4]
 800b8e4:	6163      	str	r3, [r4, #20]
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	6121      	str	r1, [r4, #16]
 800b8ea:	3020      	adds	r0, #32
 800b8ec:	e7e5      	b.n	800b8ba <__d2b+0x62>
 800b8ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b8f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8f6:	6038      	str	r0, [r7, #0]
 800b8f8:	6918      	ldr	r0, [r3, #16]
 800b8fa:	f7ff fd37 	bl	800b36c <__hi0bits>
 800b8fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	e7e1      	b.n	800b8ca <__d2b+0x72>
 800b906:	bf00      	nop
 800b908:	0800cdf1 	.word	0x0800cdf1
 800b90c:	0800ce6e 	.word	0x0800ce6e

0800b910 <_calloc_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	fb02 f501 	mul.w	r5, r2, r1
 800b916:	4629      	mov	r1, r5
 800b918:	f7fd fabc 	bl	8008e94 <_malloc_r>
 800b91c:	4604      	mov	r4, r0
 800b91e:	b118      	cbz	r0, 800b928 <_calloc_r+0x18>
 800b920:	462a      	mov	r2, r5
 800b922:	2100      	movs	r1, #0
 800b924:	f7fd fa60 	bl	8008de8 <memset>
 800b928:	4620      	mov	r0, r4
 800b92a:	bd38      	pop	{r3, r4, r5, pc}

0800b92c <__sfputc_r>:
 800b92c:	6893      	ldr	r3, [r2, #8]
 800b92e:	3b01      	subs	r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	b410      	push	{r4}
 800b934:	6093      	str	r3, [r2, #8]
 800b936:	da07      	bge.n	800b948 <__sfputc_r+0x1c>
 800b938:	6994      	ldr	r4, [r2, #24]
 800b93a:	42a3      	cmp	r3, r4
 800b93c:	db01      	blt.n	800b942 <__sfputc_r+0x16>
 800b93e:	290a      	cmp	r1, #10
 800b940:	d102      	bne.n	800b948 <__sfputc_r+0x1c>
 800b942:	bc10      	pop	{r4}
 800b944:	f7fe ba98 	b.w	8009e78 <__swbuf_r>
 800b948:	6813      	ldr	r3, [r2, #0]
 800b94a:	1c58      	adds	r0, r3, #1
 800b94c:	6010      	str	r0, [r2, #0]
 800b94e:	7019      	strb	r1, [r3, #0]
 800b950:	4608      	mov	r0, r1
 800b952:	bc10      	pop	{r4}
 800b954:	4770      	bx	lr

0800b956 <__sfputs_r>:
 800b956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b958:	4606      	mov	r6, r0
 800b95a:	460f      	mov	r7, r1
 800b95c:	4614      	mov	r4, r2
 800b95e:	18d5      	adds	r5, r2, r3
 800b960:	42ac      	cmp	r4, r5
 800b962:	d101      	bne.n	800b968 <__sfputs_r+0x12>
 800b964:	2000      	movs	r0, #0
 800b966:	e007      	b.n	800b978 <__sfputs_r+0x22>
 800b968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96c:	463a      	mov	r2, r7
 800b96e:	4630      	mov	r0, r6
 800b970:	f7ff ffdc 	bl	800b92c <__sfputc_r>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d1f3      	bne.n	800b960 <__sfputs_r+0xa>
 800b978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b97c <_vfiprintf_r>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	460d      	mov	r5, r1
 800b982:	b09d      	sub	sp, #116	; 0x74
 800b984:	4614      	mov	r4, r2
 800b986:	4698      	mov	r8, r3
 800b988:	4606      	mov	r6, r0
 800b98a:	b118      	cbz	r0, 800b994 <_vfiprintf_r+0x18>
 800b98c:	6983      	ldr	r3, [r0, #24]
 800b98e:	b90b      	cbnz	r3, 800b994 <_vfiprintf_r+0x18>
 800b990:	f7ff fb18 	bl	800afc4 <__sinit>
 800b994:	4b89      	ldr	r3, [pc, #548]	; (800bbbc <_vfiprintf_r+0x240>)
 800b996:	429d      	cmp	r5, r3
 800b998:	d11b      	bne.n	800b9d2 <_vfiprintf_r+0x56>
 800b99a:	6875      	ldr	r5, [r6, #4]
 800b99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b99e:	07d9      	lsls	r1, r3, #31
 800b9a0:	d405      	bmi.n	800b9ae <_vfiprintf_r+0x32>
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	059a      	lsls	r2, r3, #22
 800b9a6:	d402      	bmi.n	800b9ae <_vfiprintf_r+0x32>
 800b9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9aa:	f7ff fbae 	bl	800b10a <__retarget_lock_acquire_recursive>
 800b9ae:	89ab      	ldrh	r3, [r5, #12]
 800b9b0:	071b      	lsls	r3, r3, #28
 800b9b2:	d501      	bpl.n	800b9b8 <_vfiprintf_r+0x3c>
 800b9b4:	692b      	ldr	r3, [r5, #16]
 800b9b6:	b9eb      	cbnz	r3, 800b9f4 <_vfiprintf_r+0x78>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7fe fac0 	bl	8009f40 <__swsetup_r>
 800b9c0:	b1c0      	cbz	r0, 800b9f4 <_vfiprintf_r+0x78>
 800b9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c4:	07dc      	lsls	r4, r3, #31
 800b9c6:	d50e      	bpl.n	800b9e6 <_vfiprintf_r+0x6a>
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	b01d      	add	sp, #116	; 0x74
 800b9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d2:	4b7b      	ldr	r3, [pc, #492]	; (800bbc0 <_vfiprintf_r+0x244>)
 800b9d4:	429d      	cmp	r5, r3
 800b9d6:	d101      	bne.n	800b9dc <_vfiprintf_r+0x60>
 800b9d8:	68b5      	ldr	r5, [r6, #8]
 800b9da:	e7df      	b.n	800b99c <_vfiprintf_r+0x20>
 800b9dc:	4b79      	ldr	r3, [pc, #484]	; (800bbc4 <_vfiprintf_r+0x248>)
 800b9de:	429d      	cmp	r5, r3
 800b9e0:	bf08      	it	eq
 800b9e2:	68f5      	ldreq	r5, [r6, #12]
 800b9e4:	e7da      	b.n	800b99c <_vfiprintf_r+0x20>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	0598      	lsls	r0, r3, #22
 800b9ea:	d4ed      	bmi.n	800b9c8 <_vfiprintf_r+0x4c>
 800b9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ee:	f7ff fb8d 	bl	800b10c <__retarget_lock_release_recursive>
 800b9f2:	e7e9      	b.n	800b9c8 <_vfiprintf_r+0x4c>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f8:	2320      	movs	r3, #32
 800b9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba02:	2330      	movs	r3, #48	; 0x30
 800ba04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbc8 <_vfiprintf_r+0x24c>
 800ba08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba0c:	f04f 0901 	mov.w	r9, #1
 800ba10:	4623      	mov	r3, r4
 800ba12:	469a      	mov	sl, r3
 800ba14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba18:	b10a      	cbz	r2, 800ba1e <_vfiprintf_r+0xa2>
 800ba1a:	2a25      	cmp	r2, #37	; 0x25
 800ba1c:	d1f9      	bne.n	800ba12 <_vfiprintf_r+0x96>
 800ba1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba22:	d00b      	beq.n	800ba3c <_vfiprintf_r+0xc0>
 800ba24:	465b      	mov	r3, fp
 800ba26:	4622      	mov	r2, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ff93 	bl	800b956 <__sfputs_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	f000 80aa 	beq.w	800bb8a <_vfiprintf_r+0x20e>
 800ba36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba38:	445a      	add	r2, fp
 800ba3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 80a2 	beq.w	800bb8a <_vfiprintf_r+0x20e>
 800ba46:	2300      	movs	r3, #0
 800ba48:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba50:	f10a 0a01 	add.w	sl, sl, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	9307      	str	r3, [sp, #28]
 800ba58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2205      	movs	r2, #5
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	4858      	ldr	r0, [pc, #352]	; (800bbc8 <_vfiprintf_r+0x24c>)
 800ba68:	f7f4 fba2 	bl	80001b0 <memchr>
 800ba6c:	9a04      	ldr	r2, [sp, #16]
 800ba6e:	b9d8      	cbnz	r0, 800baa8 <_vfiprintf_r+0x12c>
 800ba70:	06d1      	lsls	r1, r2, #27
 800ba72:	bf44      	itt	mi
 800ba74:	2320      	movmi	r3, #32
 800ba76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba7a:	0713      	lsls	r3, r2, #28
 800ba7c:	bf44      	itt	mi
 800ba7e:	232b      	movmi	r3, #43	; 0x2b
 800ba80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba84:	f89a 3000 	ldrb.w	r3, [sl]
 800ba88:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8a:	d015      	beq.n	800bab8 <_vfiprintf_r+0x13c>
 800ba8c:	9a07      	ldr	r2, [sp, #28]
 800ba8e:	4654      	mov	r4, sl
 800ba90:	2000      	movs	r0, #0
 800ba92:	f04f 0c0a 	mov.w	ip, #10
 800ba96:	4621      	mov	r1, r4
 800ba98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9c:	3b30      	subs	r3, #48	; 0x30
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d94e      	bls.n	800bb40 <_vfiprintf_r+0x1c4>
 800baa2:	b1b0      	cbz	r0, 800bad2 <_vfiprintf_r+0x156>
 800baa4:	9207      	str	r2, [sp, #28]
 800baa6:	e014      	b.n	800bad2 <_vfiprintf_r+0x156>
 800baa8:	eba0 0308 	sub.w	r3, r0, r8
 800baac:	fa09 f303 	lsl.w	r3, r9, r3
 800bab0:	4313      	orrs	r3, r2
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	46a2      	mov	sl, r4
 800bab6:	e7d2      	b.n	800ba5e <_vfiprintf_r+0xe2>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	1d19      	adds	r1, r3, #4
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	9103      	str	r1, [sp, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bfbb      	ittet	lt
 800bac4:	425b      	neglt	r3, r3
 800bac6:	f042 0202 	orrlt.w	r2, r2, #2
 800baca:	9307      	strge	r3, [sp, #28]
 800bacc:	9307      	strlt	r3, [sp, #28]
 800bace:	bfb8      	it	lt
 800bad0:	9204      	strlt	r2, [sp, #16]
 800bad2:	7823      	ldrb	r3, [r4, #0]
 800bad4:	2b2e      	cmp	r3, #46	; 0x2e
 800bad6:	d10c      	bne.n	800baf2 <_vfiprintf_r+0x176>
 800bad8:	7863      	ldrb	r3, [r4, #1]
 800bada:	2b2a      	cmp	r3, #42	; 0x2a
 800badc:	d135      	bne.n	800bb4a <_vfiprintf_r+0x1ce>
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	1d1a      	adds	r2, r3, #4
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	9203      	str	r2, [sp, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bfb8      	it	lt
 800baea:	f04f 33ff 	movlt.w	r3, #4294967295
 800baee:	3402      	adds	r4, #2
 800baf0:	9305      	str	r3, [sp, #20]
 800baf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbd8 <_vfiprintf_r+0x25c>
 800baf6:	7821      	ldrb	r1, [r4, #0]
 800baf8:	2203      	movs	r2, #3
 800bafa:	4650      	mov	r0, sl
 800bafc:	f7f4 fb58 	bl	80001b0 <memchr>
 800bb00:	b140      	cbz	r0, 800bb14 <_vfiprintf_r+0x198>
 800bb02:	2340      	movs	r3, #64	; 0x40
 800bb04:	eba0 000a 	sub.w	r0, r0, sl
 800bb08:	fa03 f000 	lsl.w	r0, r3, r0
 800bb0c:	9b04      	ldr	r3, [sp, #16]
 800bb0e:	4303      	orrs	r3, r0
 800bb10:	3401      	adds	r4, #1
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb18:	482c      	ldr	r0, [pc, #176]	; (800bbcc <_vfiprintf_r+0x250>)
 800bb1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb1e:	2206      	movs	r2, #6
 800bb20:	f7f4 fb46 	bl	80001b0 <memchr>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d03f      	beq.n	800bba8 <_vfiprintf_r+0x22c>
 800bb28:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <_vfiprintf_r+0x254>)
 800bb2a:	bb1b      	cbnz	r3, 800bb74 <_vfiprintf_r+0x1f8>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	3307      	adds	r3, #7
 800bb30:	f023 0307 	bic.w	r3, r3, #7
 800bb34:	3308      	adds	r3, #8
 800bb36:	9303      	str	r3, [sp, #12]
 800bb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3a:	443b      	add	r3, r7
 800bb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3e:	e767      	b.n	800ba10 <_vfiprintf_r+0x94>
 800bb40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb44:	460c      	mov	r4, r1
 800bb46:	2001      	movs	r0, #1
 800bb48:	e7a5      	b.n	800ba96 <_vfiprintf_r+0x11a>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	3401      	adds	r4, #1
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	4619      	mov	r1, r3
 800bb52:	f04f 0c0a 	mov.w	ip, #10
 800bb56:	4620      	mov	r0, r4
 800bb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb5c:	3a30      	subs	r2, #48	; 0x30
 800bb5e:	2a09      	cmp	r2, #9
 800bb60:	d903      	bls.n	800bb6a <_vfiprintf_r+0x1ee>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0c5      	beq.n	800baf2 <_vfiprintf_r+0x176>
 800bb66:	9105      	str	r1, [sp, #20]
 800bb68:	e7c3      	b.n	800baf2 <_vfiprintf_r+0x176>
 800bb6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb6e:	4604      	mov	r4, r0
 800bb70:	2301      	movs	r3, #1
 800bb72:	e7f0      	b.n	800bb56 <_vfiprintf_r+0x1da>
 800bb74:	ab03      	add	r3, sp, #12
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	462a      	mov	r2, r5
 800bb7a:	4b16      	ldr	r3, [pc, #88]	; (800bbd4 <_vfiprintf_r+0x258>)
 800bb7c:	a904      	add	r1, sp, #16
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7fd fa80 	bl	8009084 <_printf_float>
 800bb84:	4607      	mov	r7, r0
 800bb86:	1c78      	adds	r0, r7, #1
 800bb88:	d1d6      	bne.n	800bb38 <_vfiprintf_r+0x1bc>
 800bb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb8c:	07d9      	lsls	r1, r3, #31
 800bb8e:	d405      	bmi.n	800bb9c <_vfiprintf_r+0x220>
 800bb90:	89ab      	ldrh	r3, [r5, #12]
 800bb92:	059a      	lsls	r2, r3, #22
 800bb94:	d402      	bmi.n	800bb9c <_vfiprintf_r+0x220>
 800bb96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb98:	f7ff fab8 	bl	800b10c <__retarget_lock_release_recursive>
 800bb9c:	89ab      	ldrh	r3, [r5, #12]
 800bb9e:	065b      	lsls	r3, r3, #25
 800bba0:	f53f af12 	bmi.w	800b9c8 <_vfiprintf_r+0x4c>
 800bba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bba6:	e711      	b.n	800b9cc <_vfiprintf_r+0x50>
 800bba8:	ab03      	add	r3, sp, #12
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	462a      	mov	r2, r5
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <_vfiprintf_r+0x258>)
 800bbb0:	a904      	add	r1, sp, #16
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7fd fcfe 	bl	80095b4 <_printf_i>
 800bbb8:	e7e4      	b.n	800bb84 <_vfiprintf_r+0x208>
 800bbba:	bf00      	nop
 800bbbc:	0800ce24 	.word	0x0800ce24
 800bbc0:	0800ce44 	.word	0x0800ce44
 800bbc4:	0800ce04 	.word	0x0800ce04
 800bbc8:	0800cfcc 	.word	0x0800cfcc
 800bbcc:	0800cfd6 	.word	0x0800cfd6
 800bbd0:	08009085 	.word	0x08009085
 800bbd4:	0800b957 	.word	0x0800b957
 800bbd8:	0800cfd2 	.word	0x0800cfd2

0800bbdc <_putc_r>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	460d      	mov	r5, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	b118      	cbz	r0, 800bbee <_putc_r+0x12>
 800bbe6:	6983      	ldr	r3, [r0, #24]
 800bbe8:	b90b      	cbnz	r3, 800bbee <_putc_r+0x12>
 800bbea:	f7ff f9eb 	bl	800afc4 <__sinit>
 800bbee:	4b1c      	ldr	r3, [pc, #112]	; (800bc60 <_putc_r+0x84>)
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	d124      	bne.n	800bc3e <_putc_r+0x62>
 800bbf4:	6874      	ldr	r4, [r6, #4]
 800bbf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbf8:	07d8      	lsls	r0, r3, #31
 800bbfa:	d405      	bmi.n	800bc08 <_putc_r+0x2c>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	0599      	lsls	r1, r3, #22
 800bc00:	d402      	bmi.n	800bc08 <_putc_r+0x2c>
 800bc02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc04:	f7ff fa81 	bl	800b10a <__retarget_lock_acquire_recursive>
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	60a3      	str	r3, [r4, #8]
 800bc10:	da05      	bge.n	800bc1e <_putc_r+0x42>
 800bc12:	69a2      	ldr	r2, [r4, #24]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	db1c      	blt.n	800bc52 <_putc_r+0x76>
 800bc18:	b2eb      	uxtb	r3, r5
 800bc1a:	2b0a      	cmp	r3, #10
 800bc1c:	d019      	beq.n	800bc52 <_putc_r+0x76>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	6022      	str	r2, [r4, #0]
 800bc24:	701d      	strb	r5, [r3, #0]
 800bc26:	b2ed      	uxtb	r5, r5
 800bc28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc2a:	07da      	lsls	r2, r3, #31
 800bc2c:	d405      	bmi.n	800bc3a <_putc_r+0x5e>
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	059b      	lsls	r3, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_putc_r+0x5e>
 800bc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc36:	f7ff fa69 	bl	800b10c <__retarget_lock_release_recursive>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <_putc_r+0x88>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d101      	bne.n	800bc48 <_putc_r+0x6c>
 800bc44:	68b4      	ldr	r4, [r6, #8]
 800bc46:	e7d6      	b.n	800bbf6 <_putc_r+0x1a>
 800bc48:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <_putc_r+0x8c>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	bf08      	it	eq
 800bc4e:	68f4      	ldreq	r4, [r6, #12]
 800bc50:	e7d1      	b.n	800bbf6 <_putc_r+0x1a>
 800bc52:	4629      	mov	r1, r5
 800bc54:	4622      	mov	r2, r4
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7fe f90e 	bl	8009e78 <__swbuf_r>
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	e7e3      	b.n	800bc28 <_putc_r+0x4c>
 800bc60:	0800ce24 	.word	0x0800ce24
 800bc64:	0800ce44 	.word	0x0800ce44
 800bc68:	0800ce04 	.word	0x0800ce04

0800bc6c <__sread>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc74:	f000 f8be 	bl	800bdf4 <_read_r>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	bfab      	itete	ge
 800bc7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc7e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc80:	181b      	addge	r3, r3, r0
 800bc82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc86:	bfac      	ite	ge
 800bc88:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc8a:	81a3      	strhlt	r3, [r4, #12]
 800bc8c:	bd10      	pop	{r4, pc}

0800bc8e <__swrite>:
 800bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc92:	461f      	mov	r7, r3
 800bc94:	898b      	ldrh	r3, [r1, #12]
 800bc96:	05db      	lsls	r3, r3, #23
 800bc98:	4605      	mov	r5, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	d505      	bpl.n	800bcac <__swrite+0x1e>
 800bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca4:	2302      	movs	r3, #2
 800bca6:	2200      	movs	r2, #0
 800bca8:	f000 f892 	bl	800bdd0 <_lseek_r>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	4632      	mov	r2, r6
 800bcba:	463b      	mov	r3, r7
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	f7fe b92b 	b.w	8009f1c <_write_r>

0800bcc6 <__sseek>:
 800bcc6:	b510      	push	{r4, lr}
 800bcc8:	460c      	mov	r4, r1
 800bcca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcce:	f000 f87f 	bl	800bdd0 <_lseek_r>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	bf15      	itete	ne
 800bcd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bce2:	81a3      	strheq	r3, [r4, #12]
 800bce4:	bf18      	it	ne
 800bce6:	81a3      	strhne	r3, [r4, #12]
 800bce8:	bd10      	pop	{r4, pc}

0800bcea <__sclose>:
 800bcea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcee:	f000 b82b 	b.w	800bd48 <_close_r>

0800bcf2 <__ascii_wctomb>:
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	b141      	cbz	r1, 800bd0a <__ascii_wctomb+0x18>
 800bcf8:	2aff      	cmp	r2, #255	; 0xff
 800bcfa:	d904      	bls.n	800bd06 <__ascii_wctomb+0x14>
 800bcfc:	228a      	movs	r2, #138	; 0x8a
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	4770      	bx	lr
 800bd06:	700a      	strb	r2, [r1, #0]
 800bd08:	2001      	movs	r0, #1
 800bd0a:	4770      	bx	lr

0800bd0c <__assert_func>:
 800bd0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd0e:	4614      	mov	r4, r2
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <__assert_func+0x2c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4605      	mov	r5, r0
 800bd18:	68d8      	ldr	r0, [r3, #12]
 800bd1a:	b14c      	cbz	r4, 800bd30 <__assert_func+0x24>
 800bd1c:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <__assert_func+0x30>)
 800bd1e:	9100      	str	r1, [sp, #0]
 800bd20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd24:	4906      	ldr	r1, [pc, #24]	; (800bd40 <__assert_func+0x34>)
 800bd26:	462b      	mov	r3, r5
 800bd28:	f000 f81e 	bl	800bd68 <fiprintf>
 800bd2c:	f000 f874 	bl	800be18 <abort>
 800bd30:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <__assert_func+0x38>)
 800bd32:	461c      	mov	r4, r3
 800bd34:	e7f3      	b.n	800bd1e <__assert_func+0x12>
 800bd36:	bf00      	nop
 800bd38:	2000000c 	.word	0x2000000c
 800bd3c:	0800cfdd 	.word	0x0800cfdd
 800bd40:	0800cfea 	.word	0x0800cfea
 800bd44:	0800d018 	.word	0x0800d018

0800bd48 <_close_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d06      	ldr	r5, [pc, #24]	; (800bd64 <_close_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f5 fd98 	bl	8001888 <_close>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_close_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_close_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	200005f8 	.word	0x200005f8

0800bd68 <fiprintf>:
 800bd68:	b40e      	push	{r1, r2, r3}
 800bd6a:	b503      	push	{r0, r1, lr}
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	ab03      	add	r3, sp, #12
 800bd70:	4805      	ldr	r0, [pc, #20]	; (800bd88 <fiprintf+0x20>)
 800bd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd76:	6800      	ldr	r0, [r0, #0]
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	f7ff fdff 	bl	800b97c <_vfiprintf_r>
 800bd7e:	b002      	add	sp, #8
 800bd80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd84:	b003      	add	sp, #12
 800bd86:	4770      	bx	lr
 800bd88:	2000000c 	.word	0x2000000c

0800bd8c <_fstat_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_fstat_r+0x20>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	602b      	str	r3, [r5, #0]
 800bd9a:	f7f5 fd80 	bl	800189e <_fstat>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d102      	bne.n	800bda8 <_fstat_r+0x1c>
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	b103      	cbz	r3, 800bda8 <_fstat_r+0x1c>
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	bd38      	pop	{r3, r4, r5, pc}
 800bdaa:	bf00      	nop
 800bdac:	200005f8 	.word	0x200005f8

0800bdb0 <_isatty_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_isatty_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f5 fd7e 	bl	80018bc <_isatty>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_isatty_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_isatty_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	200005f8 	.word	0x200005f8

0800bdd0 <_lseek_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_lseek_r+0x20>)
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	4611      	mov	r1, r2
 800bdda:	2200      	movs	r2, #0
 800bddc:	602a      	str	r2, [r5, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	f7f5 fd76 	bl	80018d0 <_lseek>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_lseek_r+0x1e>
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_lseek_r+0x1e>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	200005f8 	.word	0x200005f8

0800bdf4 <_read_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_read_r+0x20>)
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	2200      	movs	r2, #0
 800be00:	602a      	str	r2, [r5, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	f7f5 fd07 	bl	8001816 <_read>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_read_r+0x1e>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_read_r+0x1e>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	200005f8 	.word	0x200005f8

0800be18 <abort>:
 800be18:	b508      	push	{r3, lr}
 800be1a:	2006      	movs	r0, #6
 800be1c:	f000 f82c 	bl	800be78 <raise>
 800be20:	2001      	movs	r0, #1
 800be22:	f7f5 fcee 	bl	8001802 <_exit>

0800be26 <_raise_r>:
 800be26:	291f      	cmp	r1, #31
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	460d      	mov	r5, r1
 800be2e:	d904      	bls.n	800be3a <_raise_r+0x14>
 800be30:	2316      	movs	r3, #22
 800be32:	6003      	str	r3, [r0, #0]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be3c:	b112      	cbz	r2, 800be44 <_raise_r+0x1e>
 800be3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be42:	b94b      	cbnz	r3, 800be58 <_raise_r+0x32>
 800be44:	4620      	mov	r0, r4
 800be46:	f000 f831 	bl	800beac <_getpid_r>
 800be4a:	462a      	mov	r2, r5
 800be4c:	4601      	mov	r1, r0
 800be4e:	4620      	mov	r0, r4
 800be50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be54:	f000 b818 	b.w	800be88 <_kill_r>
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d00a      	beq.n	800be72 <_raise_r+0x4c>
 800be5c:	1c59      	adds	r1, r3, #1
 800be5e:	d103      	bne.n	800be68 <_raise_r+0x42>
 800be60:	2316      	movs	r3, #22
 800be62:	6003      	str	r3, [r0, #0]
 800be64:	2001      	movs	r0, #1
 800be66:	e7e7      	b.n	800be38 <_raise_r+0x12>
 800be68:	2400      	movs	r4, #0
 800be6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be6e:	4628      	mov	r0, r5
 800be70:	4798      	blx	r3
 800be72:	2000      	movs	r0, #0
 800be74:	e7e0      	b.n	800be38 <_raise_r+0x12>
	...

0800be78 <raise>:
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <raise+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f7ff bfd2 	b.w	800be26 <_raise_r>
 800be82:	bf00      	nop
 800be84:	2000000c 	.word	0x2000000c

0800be88 <_kill_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	; (800bea8 <_kill_r+0x20>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	4611      	mov	r1, r2
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	f7f5 fca4 	bl	80017e2 <_kill>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d102      	bne.n	800bea4 <_kill_r+0x1c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	b103      	cbz	r3, 800bea4 <_kill_r+0x1c>
 800bea2:	6023      	str	r3, [r4, #0]
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	200005f8 	.word	0x200005f8

0800beac <_getpid_r>:
 800beac:	f7f5 bc92 	b.w	80017d4 <_getpid>

0800beb0 <_init>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	bf00      	nop
 800beb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb6:	bc08      	pop	{r3}
 800beb8:	469e      	mov	lr, r3
 800beba:	4770      	bx	lr

0800bebc <_fini>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr
