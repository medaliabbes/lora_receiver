
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d37c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d4  0800d4c0  0800d4c0  0001d4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e694  0800e694  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e694  0800e694  0001e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e69c  0800e69c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e69c  0800e69c  0001e69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001e0  0800e884  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800e884  00020608  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024284  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a42  00000000  00000000  0004448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00048ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  0004a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0a8  00000000  00000000  0004c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a7c  00000000  00000000  0006a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a704b  00000000  00000000  00083b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ab8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c70  00000000  00000000  0012abe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d4a4 	.word	0x0800d4a4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800d4a4 	.word	0x0800d4a4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a4 	b.w	8000fb8 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83e 	bl	8000cf8 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	4628      	mov	r0, r5
 8000c90:	4621      	mov	r1, r4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2300      	movs	r3, #0
 8000c96:	f7ff ff09 	bl	8000aac <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x20>
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fc7f 	bl	80005c8 <__aeabi_dmul>
 8000cca:	f7ff ff55 	bl	8000b78 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc00 	bl	80004d4 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc76 	bl	80005c8 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fab8 	bl	8000258 <__aeabi_dsub>
 8000ce8:	f7ff ff46 	bl	8000b78 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	468e      	mov	lr, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8082 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	4617      	mov	r7, r2
 8000d0e:	d946      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	b14a      	cbz	r2, 8000d2a <__udivmoddi4+0x32>
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa05 f302 	lsl.w	r3, r5, r2
 8000d1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d22:	4097      	lsls	r7, r2
 8000d24:	ea41 0e03 	orr.w	lr, r1, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fbbe fcf8 	udiv	ip, lr, r8
 8000d34:	b2b9      	uxth	r1, r7
 8000d36:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000d3a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d3e:	fb0c f001 	mul.w	r0, ip, r1
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000d4c:	f080 8116 	bcs.w	8000f7c <__udivmoddi4+0x284>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f240 8113 	bls.w	8000f7c <__udivmoddi4+0x284>
 8000d56:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a1b      	subs	r3, r3, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f101 	mul.w	r1, r0, r1
 8000d70:	42a1      	cmp	r1, r4
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	f080 8101 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d7e:	42a1      	cmp	r1, r4
 8000d80:	f240 80fe 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	1a64      	subs	r4, r4, r1
 8000d8a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40d4      	lsrs	r4, r2
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d14f      	bne.n	8000e4a <__udivmoddi4+0x152>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c25      	lsrs	r5, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	42ab      	cmp	r3, r5
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	197d      	adds	r5, r7, r5
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	42ab      	cmp	r3, r5
 8000dd6:	f200 80e7 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1aed      	subs	r5, r5, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000de4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000de8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d7 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7c0      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	f000 80af 	beq.w	8000f76 <__udivmoddi4+0x27e>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	fab3 f183 	clz	r1, r3
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d14b      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	d302      	bcc.n	8000e36 <__udivmoddi4+0x13e>
 8000e30:	4282      	cmp	r2, r0
 8000e32:	f200 80b7 	bhi.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e36:	1a84      	subs	r4, r0, r2
 8000e38:	eb65 0303 	sbc.w	r3, r5, r3
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	469e      	mov	lr, r3
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d0aa      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000e44:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e48:	e7a7      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000e4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e52:	4097      	lsls	r7, r2
 8000e54:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000e60:	4318      	orrs	r0, r3
 8000e62:	fbbc f1fe 	udiv	r1, ip, lr
 8000e66:	0c05      	lsrs	r5, r0, #16
 8000e68:	fb0e cc11 	mls	ip, lr, r1, ip
 8000e6c:	fa1f f887 	uxth.w	r8, r7
 8000e70:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e74:	fb01 f308 	mul.w	r3, r1, r8
 8000e78:	42ab      	cmp	r3, r5
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	197d      	adds	r5, r7, r5
 8000e82:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e86:	f080 808b 	bcs.w	8000fa0 <__udivmoddi4+0x2a8>
 8000e8a:	42ab      	cmp	r3, r5
 8000e8c:	f240 8088 	bls.w	8000fa0 <__udivmoddi4+0x2a8>
 8000e90:	3902      	subs	r1, #2
 8000e92:	443d      	add	r5, r7
 8000e94:	1aeb      	subs	r3, r5, r3
 8000e96:	b285      	uxth	r5, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	197d      	adds	r5, r7, r5
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d271      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000eb4:	42ab      	cmp	r3, r5
 8000eb6:	d96f      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443d      	add	r5, r7
 8000ebc:	1aeb      	subs	r3, r5, r3
 8000ebe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c1 0c20 	rsb	ip, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f70c 	lsr.w	r7, r2, ip
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 f40c 	lsr.w	r4, r0, ip
 8000ed4:	fa05 f301 	lsl.w	r3, r5, r1
 8000ed8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000edc:	fa25 f50c 	lsr.w	r5, r5, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c23      	lsrs	r3, r4, #16
 8000ee4:	fbb5 f9fe 	udiv	r9, r5, lr
 8000ee8:	fa1f f887 	uxth.w	r8, r7
 8000eec:	fb0e 5519 	mls	r5, lr, r9, r5
 8000ef0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000ef4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ef8:	45aa      	cmp	sl, r5
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	fa00 f301 	lsl.w	r3, r0, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x21e>
 8000f04:	197d      	adds	r5, r7, r5
 8000f06:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0a:	d247      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000f0c:	45aa      	cmp	sl, r5
 8000f0e:	d945      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000f10:	f1a9 0902 	sub.w	r9, r9, #2
 8000f14:	443d      	add	r5, r7
 8000f16:	eba5 050a 	sub.w	r5, r5, sl
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f20:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f28:	fb00 f808 	mul.w	r8, r0, r8
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x248>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f36:	d22d      	bcs.n	8000f94 <__udivmoddi4+0x29c>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	d92b      	bls.n	8000f94 <__udivmoddi4+0x29c>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	443c      	add	r4, r7
 8000f40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f44:	eba4 0408 	sub.w	r4, r4, r8
 8000f48:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4c:	454c      	cmp	r4, r9
 8000f4e:	46c6      	mov	lr, r8
 8000f50:	464d      	mov	r5, r9
 8000f52:	d319      	bcc.n	8000f88 <__udivmoddi4+0x290>
 8000f54:	d016      	beq.n	8000f84 <__udivmoddi4+0x28c>
 8000f56:	b15e      	cbz	r6, 8000f70 <__udivmoddi4+0x278>
 8000f58:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5c:	eb64 0405 	sbc.w	r4, r4, r5
 8000f60:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f64:	40ca      	lsrs	r2, r1
 8000f66:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6a:	40cc      	lsrs	r4, r1
 8000f6c:	e9c6 2400 	strd	r2, r4, [r6]
 8000f70:	2100      	movs	r1, #0
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	4631      	mov	r1, r6
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e70e      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f7c:	46ac      	mov	ip, r5
 8000f7e:	e6ed      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e701      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f84:	4543      	cmp	r3, r8
 8000f86:	d2e6      	bcs.n	8000f56 <__udivmoddi4+0x25e>
 8000f88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f8c:	eb69 0507 	sbc.w	r5, r9, r7
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7e0      	b.n	8000f56 <__udivmoddi4+0x25e>
 8000f94:	4628      	mov	r0, r5
 8000f96:	e7d3      	b.n	8000f40 <__udivmoddi4+0x248>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	e78f      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000f9c:	4681      	mov	r9, r0
 8000f9e:	e7ba      	b.n	8000f16 <__udivmoddi4+0x21e>
 8000fa0:	4661      	mov	r1, ip
 8000fa2:	e777      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e74b      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fac:	443d      	add	r5, r7
 8000fae:	e715      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	e726      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 8000fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc4:	f001 f826 	bl	8002014 <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 8000fc8:	f001 f802 	bl	8001fd0 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <config_init+0x1c>)
 8000fce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58004000 	.word	0x58004000

08000fdc <config_load>:
	  }

}

void config_load(config_t * param)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f007 fec1 	bl	8008d6c <malloc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <config_load+0x54>)
 8000ff0:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e00b      	b.n	8001010 <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	68f9      	ldr	r1, [r7, #12]
 8000ffe:	440b      	add	r3, r1
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b07      	cmp	r3, #7
 8001014:	d9f0      	bls.n	8000ff8 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8001016:	2208      	movs	r2, #8
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f007 feb6 	bl	8008d8c <memcpy>

	free(p_mydata) ;
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f007 feab 	bl	8008d7c <free>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	0803f800 	.word	0x0803f800

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4906      	ldr	r1, [pc, #24]	; (8001068 <__NVIC_EnableIRQ+0x34>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d0:	f023 0218 	bic.w	r2, r3, #24
 80010d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4313      	orrs	r3, r2
 80010dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32 sys_get_tick()
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 800111e:	f000 fe1d 	bl	8001d5c <HAL_GetTick>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <main>:

config_t config_param ;
config_t config_param_copy ; // this should be loaded from the flash

int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	; 0x48
 800112c:	af02      	add	r7, sp, #8

  HAL_Init();
 800112e:	f000 fda9 	bl	8001c84 <HAL_Init>

  SystemClock_Config();
 8001132:	f000 f89d 	bl	8001270 <SystemClock_Config>

  MX_GPIO_Init();
 8001136:	f000 f949 	bl	80013cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800113a:	f000 f8f3 	bl	8001324 <MX_USART1_UART_Init>
  SubghzApp_Init();
 800113e:	f000 fae1 	bl	8001704 <SubghzApp_Init>
  //printf("param seuil %f , debit %f\n",config_param.seuil , config_param.debit) ;

  /********************************************************************/
#ifdef RECEIVER

  ll_init(RECEIVER_ADDRESS) ;
 8001142:	204d      	movs	r0, #77	; 0x4d
 8001144:	f007 f93a 	bl	80083bc <ll_init>
  config_init();
 8001148:	f7ff ff38 	bl	8000fbc <config_init>

  config_load(&config_param) ;
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <main+0x88>)
 800114e:	f7ff ff45 	bl	8000fdc <config_load>
  printf("Node receiver \n");
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <main+0x8c>)
 8001154:	f008 fc5c 	bl	8009a10 <puts>



#ifdef RECEIVER

	  int len = ll_get_recv_from( TRANSMITTER_ADDRESS , recv) ;
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	2034      	movs	r0, #52	; 0x34
 8001160:	f007 fbb2 	bl	80088c8 <ll_get_recv_from>
 8001164:	63f8      	str	r0, [r7, #60]	; 0x3c

	  if(len>0)
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd1e      	ble.n	80011aa <main+0x82>
	  {
		  recv[len] = 0 ;
 800116c:	f107 0208 	add.w	r2, r7, #8
 8001170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001172:	4413      	add	r3, r2
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		  printf("data from %d: %s$\n" , 52 ,recv) ;
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	461a      	mov	r2, r3
 800117e:	2134      	movs	r1, #52	; 0x34
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <main+0x90>)
 8001182:	f008 fbbf 	bl	8009904 <iprintf>
		  float seuil ;
		  int periode ;
		  parse_transmetter_data((char*)recv , len ,&seuil,&periode ) ;
 8001186:	463b      	mov	r3, r7
 8001188:	1d3a      	adds	r2, r7, #4
 800118a:	f107 0008 	add.w	r0, r7, #8
 800118e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001190:	f000 f816 	bl	80011c0 <parse_transmetter_data>
		  printf("config seuil :%0.2f, per :%d\n",seuil , periode);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9be 	bl	8000518 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	9100      	str	r1, [sp, #0]
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <main+0x94>)
 80011a6:	f008 fbad 	bl	8009904 <iprintf>
	  		  }

	  	  }
#endif

	  ll_process() ;
 80011aa:	f007 fbf1 	bl	8008990 <ll_process>
  {
 80011ae:	e7d3      	b.n	8001158 <main+0x30>
 80011b0:	20000470 	.word	0x20000470
 80011b4:	0800d4c0 	.word	0x0800d4c0
 80011b8:	0800d4d0 	.word	0x0800d4d0
 80011bc:	0800d4e4 	.word	0x0800d4e4

080011c0 <parse_transmetter_data>:
	(void) tmp ;
	return 0 ;
}
#else
int parse_transmetter_data(char * t_data , int len , float *seuil , int *periode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
	char tmp[6] ;

	//seuil :%0.2f , periode : %d
	char * per = strstr(t_data , ", periode :");
 80011ce:	4926      	ldr	r1, [pc, #152]	; (8001268 <parse_transmetter_data+0xa8>)
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f008 fe2d 	bl	8009e30 <strstr>
 80011d6:	61f8      	str	r0, [r7, #28]

	if(per == NULL)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <parse_transmetter_data+0x24>
	{
		return -1 ;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e03c      	b.n	800125e <parse_transmetter_data+0x9e>
	}

	char * se = strstr(t_data , "seuil :");
 80011e4:	4921      	ldr	r1, [pc, #132]	; (800126c <parse_transmetter_data+0xac>)
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f008 fe22 	bl	8009e30 <strstr>
 80011ec:	61b8      	str	r0, [r7, #24]

	if(se == NULL)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <parse_transmetter_data+0x3a>
	{
		return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e031      	b.n	800125e <parse_transmetter_data+0x9e>
	}

	se += 7 ;
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	3307      	adds	r3, #7
 80011fe:	61bb      	str	r3, [r7, #24]
	memcpy(tmp , se, per - se);
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	461a      	mov	r2, r3
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	4618      	mov	r0, r3
 8001210:	f007 fdbc 	bl	8008d8c <memcpy>
	*seuil = atof(tmp) ;
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4618      	mov	r0, r3
 800121a:	f007 fd76 	bl	8008d0a <atof>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcc7 	bl	8000bb8 <__aeabi_d2f>
 800122a:	4602      	mov	r2, r0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]

	//printf("seuil %0.2f\n" , *seuil);

	per += 12;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	330c      	adds	r3, #12
 8001234:	61fb      	str	r3, [r7, #28]
	memcpy(tmp , per ,(t_data+len - 1) - per) ;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	441a      	add	r2, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	461a      	mov	r2, r3
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	69f9      	ldr	r1, [r7, #28]
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fd9e 	bl	8008d8c <memcpy>

	*periode = atoi(per) ;
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f007 fd5d 	bl	8008d10 <atoi>
 8001256:	4602      	mov	r2, r0
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	601a      	str	r2, [r3, #0]
	//printf("periode %d \n" , *periode );
	//printf("per :%s$\n" , per);

	return 0 ;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	0800d504 	.word	0x0800d504
 800126c:	0800d510 	.word	0x0800d510

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09a      	sub	sp, #104	; 0x68
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2248      	movs	r2, #72	; 0x48
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fd92 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001296:	f001 f897 	bl	80023c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff ff10 	bl	80010c0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <SystemClock_Config+0xb0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <SystemClock_Config+0xb0>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <SystemClock_Config+0xb0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012bc:	2324      	movs	r3, #36	; 0x24
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c0:	2381      	movs	r3, #129	; 0x81
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80012cc:	23b0      	movs	r3, #176	; 0xb0
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fb1f 	bl	800291c <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012e4:	f000 f879 	bl	80013da <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012e8:	234f      	movs	r3, #79	; 0x4f
 80012ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fea2 	bl	8003050 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001312:	f000 f862 	bl	80013da <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3768      	adds	r7, #104	; 0x68
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	58000400 	.word	0x58000400

08001324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <MX_USART1_UART_Init+0xa4>)
 800132c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 800136e:	f003 f804 	bl	800437a <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 f82f 	bl	80013da <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001380:	f003 fdf0 	bl	8004f64 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 f826 	bl	80013da <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 8001392:	f003 fe25 	bl	8004fe0 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800139c:	f000 f81d 	bl	80013da <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0xa0>)
 80013a2:	f003 fda7 	bl	8004ef4 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f815 	bl	80013da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 80013b0:	2024      	movs	r0, #36	; 0x24
 80013b2:	f7ff fe3f 	bl	8001034 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 80013b6:	2101      	movs	r1, #1
 80013b8:	2024      	movs	r0, #36	; 0x24
 80013ba:	f7ff fe57 	bl	800106c <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000478 	.word	0x20000478
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	2002      	movs	r0, #2
 80013d2:	f7ff fe8a 	bl	80010ea <LL_AHB2_GRP1_EnableClock>

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}

080013da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013de:	b672      	cpsid	i
}
 80013e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <Error_Handler+0x8>

080013e4 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 80013ea:	1d39      	adds	r1, r7, #4
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	2201      	movs	r2, #1
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <__io_getchar+0x20>)
 80013f4:	f003 f8a7 	bl	8004546 <HAL_UART_Receive>
	return ch ;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000478 	.word	0x20000478

08001408 <__io_putchar>:

int __io_putchar(int ch)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 8001410:	1d39      	adds	r1, r7, #4
 8001412:	230a      	movs	r3, #10
 8001414:	2201      	movs	r2, #1
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <__io_putchar+0x20>)
 8001418:	f002 ffff 	bl	800441a <HAL_UART_Transmit>
	return ch ;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000478 	.word	0x20000478

0800142c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001430:	f000 fb78 	bl	8001b24 <BSP_RADIO_Init>
 8001434:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}

0800143a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fbaa 	bl	8001ba0 <BSP_RADIO_ConfigRFSwitch>
 800144c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800145a:	f000 fbfd 	bl	8001c58 <BSP_RADIO_GetTxConfig>
 800145e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}

08001464 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001468:	f000 fbfd 	bl	8001c66 <BSP_RADIO_IsTCXO>
 800146c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}

08001472 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001476:	f000 fbfd 	bl	8001c74 <BSP_RADIO_IsDCDC>
 800147a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}

08001480 <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d302      	bcc.n	80014a8 <ring_pushOver+0x28>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	e002      	b.n	80014ae <ring_pushOver+0x2e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d110      	bne.n	80014e0 <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d302      	bcc.n	80014d2 <ring_pushOver+0x52>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e002      	b.n	80014d8 <ring_pushOver+0x58>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	60d3      	str	r3, [r2, #12]
        return 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <ring_pushOver+0x62>
    }
    
    return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_AHB2_GRP1_EnableClock>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4313      	orrs	r3, r2
 8001502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001510:	68fb      	ldr	r3, [r7, #12]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800152a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001540:	68fb      	ldr	r3, [r7, #12]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b096      	sub	sp, #88	; 0x58
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2238      	movs	r2, #56	; 0x38
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fc15 	bl	8008da8 <memset>
  if(huart->Instance==USART1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x94>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d12d      	bne.n	80015e4 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001588:	2301      	movs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800158c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001590:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f900 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015a2:	f7ff ff1a 	bl	80013da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015aa:	f7ff ffb7 	bl	800151c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2002      	movs	r0, #2
 80015b0:	f7ff ff9c 	bl	80014ec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80015b4:	23c0      	movs	r3, #192	; 0xc0
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015cc:	4619      	mov	r1, r3
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <HAL_UART_MspInit+0x98>)
 80015d0:	f000 fd82 	bl	80020d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2024      	movs	r0, #36	; 0x24
 80015da:	f000 fcc4 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015de:	2024      	movs	r0, #36	; 0x24
 80015e0:	f000 fcdb 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3758      	adds	r7, #88	; 0x58
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40013800 	.word	0x40013800
 80015f0:	48000400 	.word	0x48000400

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 fb7d 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <USART1_IRQHandler+0x2c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <USART1_IRQHandler+0x2c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fa06 	bl	8001a74 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000478 	.word	0x20000478

08001674 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <SUBGHZ_Radio_IRQHandler+0x10>)
 800167a:	f002 fcbf 	bl	8003ffc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000510 	.word	0x20000510

08001688 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4313      	orrs	r3, r2
 800169e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_SUBGHZ_Init+0x20>)
 80016be:	2208      	movs	r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_SUBGHZ_Init+0x20>)
 80016c4:	f002 fa1e 	bl	8003b04 <HAL_SUBGHZ_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80016ce:	f7ff fe84 	bl	80013da <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000510 	.word	0x20000510

080016dc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff ffcf 	bl	8001688 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2032      	movs	r0, #50	; 0x32
 80016f0:	f000 fc39 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80016f4:	2032      	movs	r0, #50	; 0x32
 80016f6:	f000 fc50 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <SubghzApp_Init>:
{
	return Radio.Random() ;
}
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 800170a:	2300      	movs	r3, #0
 800170c:	2201      	movs	r2, #1
 800170e:	2101      	movs	r1, #1
 8001710:	483d      	ldr	r0, [pc, #244]	; (8001808 <SubghzApp_Init+0x104>)
 8001712:	f008 f8f7 	bl	8009904 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <SubghzApp_Init+0x108>)
 8001718:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <SubghzApp_Init+0x10c>)
 800171a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <SubghzApp_Init+0x108>)
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <SubghzApp_Init+0x110>)
 8001720:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <SubghzApp_Init+0x108>)
 8001724:	4a3c      	ldr	r2, [pc, #240]	; (8001818 <SubghzApp_Init+0x114>)
 8001726:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <SubghzApp_Init+0x108>)
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <SubghzApp_Init+0x118>)
 800172c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <SubghzApp_Init+0x108>)
 8001730:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <SubghzApp_Init+0x11c>)
 8001732:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <SubghzApp_Init+0x120>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4834      	ldr	r0, [pc, #208]	; (800180c <SubghzApp_Init+0x108>)
 800173a:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <SubghzApp_Init+0x120>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4839      	ldr	r0, [pc, #228]	; (8001828 <SubghzApp_Init+0x124>)
 8001742:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001744:	4839      	ldr	r0, [pc, #228]	; (800182c <SubghzApp_Init+0x128>)
 8001746:	f008 f8dd 	bl	8009904 <iprintf>
  printf("LORA_MODULATION\n\r");
 800174a:	4839      	ldr	r0, [pc, #228]	; (8001830 <SubghzApp_Init+0x12c>)
 800174c:	f008 f8da 	bl	8009904 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001750:	217d      	movs	r1, #125	; 0x7d
 8001752:	4838      	ldr	r0, [pc, #224]	; (8001834 <SubghzApp_Init+0x130>)
 8001754:	f008 f8d6 	bl	8009904 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001758:	2107      	movs	r1, #7
 800175a:	4837      	ldr	r0, [pc, #220]	; (8001838 <SubghzApp_Init+0x134>)
 800175c:	f008 f8d2 	bl	8009904 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <SubghzApp_Init+0x120>)
 8001762:	69dc      	ldr	r4, [r3, #28]
 8001764:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001768:	9308      	str	r3, [sp, #32]
 800176a:	2300      	movs	r3, #0
 800176c:	9307      	str	r3, [sp, #28]
 800176e:	2300      	movs	r3, #0
 8001770:	9306      	str	r3, [sp, #24]
 8001772:	2300      	movs	r3, #0
 8001774:	9305      	str	r3, [sp, #20]
 8001776:	2301      	movs	r3, #1
 8001778:	9304      	str	r3, [sp, #16]
 800177a:	2300      	movs	r3, #0
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	2308      	movs	r3, #8
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2307      	movs	r3, #7
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	2200      	movs	r2, #0
 800178e:	2114      	movs	r1, #20
 8001790:	2001      	movs	r0, #1
 8001792:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <SubghzApp_Init+0x120>)
 8001796:	699c      	ldr	r4, [r3, #24]
 8001798:	2301      	movs	r3, #1
 800179a:	9309      	str	r3, [sp, #36]	; 0x24
 800179c:	2300      	movs	r3, #0
 800179e:	9308      	str	r3, [sp, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9307      	str	r3, [sp, #28]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9306      	str	r3, [sp, #24]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9305      	str	r3, [sp, #20]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9304      	str	r3, [sp, #16]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9303      	str	r3, [sp, #12]
 80017b4:	2305      	movs	r3, #5
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2308      	movs	r3, #8
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	2207      	movs	r2, #7
 80017c4:	2100      	movs	r1, #0
 80017c6:	2001      	movs	r0, #1
 80017c8:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <SubghzApp_Init+0x120>)
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	21ff      	movs	r1, #255	; 0xff
 80017d0:	2001      	movs	r0, #1
 80017d2:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <SubghzApp_Init+0x120>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	4798      	blx	r3
 80017da:	4603      	mov	r3, r0
 80017dc:	0d9b      	lsrs	r3, r3, #22
 80017de:	461a      	mov	r2, r3
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <SubghzApp_Init+0x138>)
 80017e2:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80017e4:	22ff      	movs	r2, #255	; 0xff
 80017e6:	2100      	movs	r1, #0
 80017e8:	4815      	ldr	r0, [pc, #84]	; (8001840 <SubghzApp_Init+0x13c>)
 80017ea:	f007 fadd 	bl	8008da8 <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <SubghzApp_Init+0x120>)
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <SubghzApp_Init+0x138>)
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 80017fa:	4610      	mov	r0, r2
 80017fc:	4798      	blx	r3

}
 80017fe:	bf00      	nop
 8001800:	3704      	adds	r7, #4
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	0800d5a8 	.word	0x0800d5a8
 800180c:	200001fc 	.word	0x200001fc
 8001810:	08001845 	.word	0x08001845
 8001814:	08001851 	.word	0x08001851
 8001818:	0800187d 	.word	0x0800187d
 800181c:	08001899 	.word	0x08001899
 8001820:	080018b5 	.word	0x080018b5
 8001824:	0800da18 	.word	0x0800da18
 8001828:	33bca100 	.word	0x33bca100
 800182c:	0800d5c4 	.word	0x0800d5c4
 8001830:	0800d5d8 	.word	0x0800d5d8
 8001834:	0800d5ec 	.word	0x0800d5ec
 8001838:	0800d600 	.word	0x0800d600
 800183c:	2000031c 	.word	0x2000031c
 8001840:	2000021c 	.word	0x2000021c

08001844 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001848:	f007 f8c2 	bl	80089d0 <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	817b      	strh	r3, [r7, #10]
 8001862:	460b      	mov	r3, r1
 8001864:	813b      	strh	r3, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	4619      	mov	r1, r3
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f006 fee8 	bl	8008644 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <OnTxTimeout+0x14>)
 8001882:	f008 f83f 	bl	8009904 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <OnTxTimeout+0x18>)
 8001888:	2204      	movs	r2, #4
 800188a:	701a      	strb	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	0800d610 	.word	0x0800d610
 8001894:	20000218 	.word	0x20000218

08001898 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <OnRxTimeout+0x14>)
 800189e:	f008 f831 	bl	8009904 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <OnRxTimeout+0x18>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0800d620 	.word	0x0800d620
 80018b0:	20000218 	.word	0x20000218

080018b4 <OnRxError>:

static void OnRxError(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <OnRxError+0x14>)
 80018ba:	f008 f823 	bl	8009904 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <OnRxError+0x18>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	0800d630 	.word	0x0800d630
 80018cc:	20000218 	.word	0x20000218

080018d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <_kill>:

int _kill(int pid, int sig)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e8:	f007 fa16 	bl	8008d18 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2216      	movs	r2, #22
 80018f0:	601a      	str	r2, [r3, #0]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_exit>:

void _exit (int status)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001906:	f04f 31ff 	mov.w	r1, #4294967295
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffe7 	bl	80018de <_kill>
	while (1) {}		/* Make sure we hang here */
 8001910:	e7fe      	b.n	8001910 <_exit+0x12>

08001912 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e00a      	b.n	800193a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001924:	f7ff fd5e 	bl	80013e4 <__io_getchar>
 8001928:	4601      	mov	r1, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	b2ca      	uxtb	r2, r1
 8001932:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	dbf0      	blt.n	8001924 <_read+0x12>
	}

return len;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e009      	b.n	8001972 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd4e 	bl	8001408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf1      	blt.n	800195e <_write+0x12>
	}
	return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_close>:

int _close(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019aa:	605a      	str	r2, [r3, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_isatty>:

int _isatty(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f007 f980 	bl	8008d18 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20008000 	.word	0x20008000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20000320 	.word	0x20000320
 8001a4c:	20000608 	.word	0x20000608

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <set_NL_detection+0x14>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000324 	.word	0x20000324

08001a74 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b0a      	cmp	r3, #10
 8001a82:	d101      	bne.n	8001a88 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001a84:	f7ff ffea 	bl	8001a5c <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <uart_RX_interrupt_hanlder+0x28>)
 8001a8e:	f7ff fcf7 	bl	8001480 <ring_pushOver>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000051c 	.word	0x2000051c

08001aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa4:	f7ff ffd4 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <LoopForever+0x6>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <LoopForever+0xe>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	; (8001aec <LoopForever+0x16>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ace:	f007 f929 	bl	8008d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad2:	f7ff fb29 	bl	8001128 <main>

08001ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad6:	e7fe      	b.n	8001ad6 <LoopForever>
  ldr   r0, =_estack
 8001ad8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ae4:	0800e6a4 	.word	0x0800e6a4
  ldr r2, =_sbss
 8001ae8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001aec:	20000608 	.word	0x20000608

08001af0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>

08001af2 <LL_AHB2_GRP1_EnableClock>:
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4013      	ands	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
	...

08001b24 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f7ff ffda 	bl	8001af2 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4812      	ldr	r0, [pc, #72]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b54:	f000 fac0 	bl	80020d8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480e      	ldr	r0, [pc, #56]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b62:	f000 fab9 	bl	80020d8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001b66:	2308      	movs	r3, #8
 8001b68:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b70:	f000 fab2 	bl	80020d8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001b74:	2200      	movs	r2, #0
 8001b76:	2120      	movs	r1, #32
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b7a:	f000 fc0d 	bl	8002398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2110      	movs	r1, #16
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b84:	f000 fc08 	bl	8002398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <BSP_RADIO_Init+0x78>)
 8001b8e:	f000 fc03 	bl	8002398 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d84b      	bhi.n	8001c48 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001be9 	.word	0x08001be9
 8001bc0:	08001c09 	.word	0x08001c09
 8001bc4:	08001c29 	.word	0x08001c29
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2108      	movs	r1, #8
 8001bcc:	4821      	ldr	r0, [pc, #132]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001bce:	f000 fbe3 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001bd8:	f000 fbde 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2120      	movs	r1, #32
 8001be0:	481c      	ldr	r0, [pc, #112]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001be2:	f000 fbd9 	bl	8002398 <HAL_GPIO_WritePin>
      break;      
 8001be6:	e030      	b.n	8001c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2108      	movs	r1, #8
 8001bec:	4819      	ldr	r0, [pc, #100]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001bee:	f000 fbd3 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4817      	ldr	r0, [pc, #92]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001bf8:	f000 fbce 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2120      	movs	r1, #32
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c02:	f000 fbc9 	bl	8002398 <HAL_GPIO_WritePin>
      break;
 8001c06:	e020      	b.n	8001c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c0e:	f000 fbc3 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001c12:	2201      	movs	r2, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	480f      	ldr	r0, [pc, #60]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c18:	f000 fbbe 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2120      	movs	r1, #32
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c22:	f000 fbb9 	bl	8002398 <HAL_GPIO_WritePin>
      break;
 8001c26:	e010      	b.n	8001c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c2e:	f000 fbb3 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c38:	f000 fbae 	bl	8002398 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001c42:	f000 fba9 	bl	8002398 <HAL_GPIO_WritePin>
      break;
 8001c46:	e000      	b.n	8001c4a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001c48:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	48000800 	.word	0x48000800

08001c58 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f000 f95e 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c94:	f001 fba0 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_Init+0x3c>)
 8001c9c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9e:	200f      	movs	r0, #15
 8001ca0:	f000 f810 	bl	8001cc4 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	e001      	b.n	8001cb4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb0:	f7ff fc4c 	bl	800154c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_InitTick+0x6c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d024      	beq.n	8001d22 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cd8:	f001 fb7e 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_InitTick+0x6c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f960 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10f      	bne.n	8001d1c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d809      	bhi.n	8001d16 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d02:	2200      	movs	r2, #0
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0a:	f000 f92c 	bl	8001f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_InitTick+0x70>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e007      	b.n	8001d26 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	e004      	b.n	8001d26 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000590 	.word	0x20000590

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20000590 	.word	0x20000590

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffe0 	bl	8001d5c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <__NVIC_SetPriorityGrouping>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <__NVIC_EnableIRQ+0x34>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f7ff ff90 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff2d 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff44 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff92 	bl	8001ea8 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff61 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff37 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa4 	bl	8001f0c <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0b      	bge.n	8001ffa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fe4:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_FLASH_Unlock+0x3c>)
 8001fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_FLASH_Unlock+0x40>)
 8001fec:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_FLASH_Unlock+0x38>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da01      	bge.n	8001ffa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	58004000 	.word	0x58004000
 800200c:	45670123 	.word	0x45670123
 8002010:	cdef89ab 	.word	0xcdef89ab

08002014 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fe9e 	bl	8001d5c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002022:	e009      	b.n	8002038 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002024:	f7ff fe9a 	bl	8001d5c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d801      	bhi.n	8002038 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e047      	b.n	80020c8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d0ee      	beq.n	8002024 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 8002058:	2201      	movs	r2, #1
 800205a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002062:	4013      	ands	r3, r2
 8002064:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <FLASH_WaitForLastOperation+0x6c>
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800207a:	4915      	ldr	r1, [pc, #84]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	618b      	str	r3, [r1, #24]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <FLASH_WaitForLastOperation+0x80>
 800208a:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002092:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00e      	beq.n	80020b8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <FLASH_WaitForLastOperation+0xc0>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e011      	b.n	80020c8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80020a4:	f7ff fe5a 	bl	8001d5c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d801      	bhi.n	80020b8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e007      	b.n	80020c8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <FLASH_WaitForLastOperation+0xbc>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020c4:	d0ee      	beq.n	80020a4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58004000 	.word	0x58004000
 80020d4:	20000328 	.word	0x20000328

080020d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e6:	e140      	b.n	800236a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8132 	beq.w	8002364 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d005      	beq.n	8002118 <HAL_GPIO_Init+0x40>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d130      	bne.n	800217a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214e:	2201      	movs	r2, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 0201 	and.w	r2, r3, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b03      	cmp	r3, #3
 8002184:	d017      	beq.n	80021b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d123      	bne.n	800220a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	6939      	ldr	r1, [r7, #16]
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0203 	and.w	r2, r3, #3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 808c 	beq.w	8002364 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800224c:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002276:	d00d      	beq.n	8002294 <HAL_GPIO_Init+0x1bc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <HAL_GPIO_Init+0x2b4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <HAL_GPIO_Init+0x1b8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a43      	ldr	r2, [pc, #268]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_GPIO_Init+0x1b4>
 8002288:	2302      	movs	r3, #2
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1be>
 800228c:	2307      	movs	r3, #7
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1be>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1be>
 8002294:	2300      	movs	r3, #0
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a6:	4938      	ldr	r1, [pc, #224]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ba:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80022da:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 80022e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f aeb7 	bne.w	80020e8 <HAL_GPIO_Init+0x10>
  }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	48000400 	.word	0x48000400
 8002390:	48000800 	.word	0x48000800
 8002394:	58000800 	.word	0x58000800

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	58000400 	.word	0x58000400

080023e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_PWREx_GetVoltageRange+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d101      	bne.n	8002412 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	58000400 	.word	0x58000400

08002420 <LL_RCC_HSE_EnableTcxo>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <LL_RCC_HSE_DisableTcxo>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246a:	d101      	bne.n	8002470 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <LL_RCC_HSE_Enable>:
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <LL_RCC_HSE_Disable>:
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_HSE_IsReady>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c4:	d101      	bne.n	80024ca <LL_RCC_HSE_IsReady+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_RCC_HSE_IsReady+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <LL_RCC_HSI_Enable>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_HSI_Disable>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <LL_RCC_HSI_IsReady>:
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251e:	d101      	bne.n	8002524 <LL_RCC_HSI_IsReady+0x18>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_RCC_HSI_IsReady+0x1a>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <LL_RCC_HSI_SetCalibTrimming>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d101      	bne.n	800256e <LL_RCC_LSE_IsReady+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_RCC_LSE_IsReady+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d101      	bne.n	80025d0 <LL_RCC_LSI_IsReady+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_RCC_LSI_IsReady+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d101      	bne.n	8002628 <LL_RCC_MSI_IsReady+0x16>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_RCC_MSI_IsReady+0x18>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d101      	bne.n	8002648 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800271a:	f023 020f 	bic.w	r2, r3, #15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f0:	6013      	str	r3, [r2, #0]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002828:	d101      	bne.n	800282e <LL_RCC_PLL_IsReady+0x18>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_RCC_PLL_IsReady+0x1a>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0303 	and.w	r3, r3, #3
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a4:	d101      	bne.n	80028aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d101      	bne.n	80028ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ea:	d101      	bne.n	80028f0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800290c:	d101      	bne.n	8002912 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e38a      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	f7ff fece 	bl	80026ce <LL_RCC_GetSysClkSource>
 8002932:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002934:	f7ff ffa2 	bl	800287c <LL_RCC_PLL_GetMainSource>
 8002938:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80c9 	beq.w	8002ada <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x3e>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b0c      	cmp	r3, #12
 8002952:	d17b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d178      	bne.n	8002a4c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800295a:	f7ff fe5a 	bl	8002612 <LL_RCC_MSI_IsReady>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x54>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e369      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x72>
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298c:	e006      	b.n	800299c <HAL_RCC_OscConfig+0x80>
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	4293      	cmp	r3, r2
 800299e:	d222      	bcs.n	80029e6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fd4f 	bl	8003448 <RCC_SetFlashLatencyFromMSIRange>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e347      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fe4e 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>
 80029e4:	e021      	b.n	8002a2a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe35 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fd14 	bl	8003448 <RCC_SetFlashLatencyFromMSIRange>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e30c      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a2a:	f000 fcd5 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4ab4      	ldr	r2, [pc, #720]	; (8002d04 <HAL_RCC_OscConfig+0x3e8>)
 8002a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a34:	4bb4      	ldr	r3, [pc, #720]	; (8002d08 <HAL_RCC_OscConfig+0x3ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f943 	bl	8001cc4 <HAL_InitTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d047      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	e2fb      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02c      	beq.n	8002aae <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a54:	f7ff fdc1 	bl	80025da <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a58:	f7ff f980 	bl	8001d5c <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a60:	f7ff f97c 	bl	8001d5c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e2e8      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a72:	f7ff fdce 	bl	8002612 <LL_RCC_MSI_IsReady>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f1      	beq.n	8002a60 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fdea 	bl	8002680 <LL_RCC_MSI_SetCalibTrimming>
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aae:	f7ff fda2 	bl	80025f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab2:	f7ff f953 	bl	8001d5c <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aba:	f7ff f94f 	bl	8001d5c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e2bb      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002acc:	f7ff fda1 	bl	8002612 <LL_RCC_MSI_IsReady>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f1      	bne.n	8002aba <HAL_RCC_OscConfig+0x19e>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ad8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d05f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1dc>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d10d      	bne.n	8002b0e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d10a      	bne.n	8002b0e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	f7ff fcdb 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d050      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x288>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d14c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e29a      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x218>
 8002b2e:	f7ff fca4 	bl	800247a <LL_RCC_HSE_Enable>
 8002b32:	e00d      	b.n	8002b50 <HAL_RCC_OscConfig+0x234>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002b3c:	d104      	bne.n	8002b48 <HAL_RCC_OscConfig+0x22c>
 8002b3e:	f7ff fc6f 	bl	8002420 <LL_RCC_HSE_EnableTcxo>
 8002b42:	f7ff fc9a 	bl	800247a <LL_RCC_HSE_Enable>
 8002b46:	e003      	b.n	8002b50 <HAL_RCC_OscConfig+0x234>
 8002b48:	f7ff fca5 	bl	8002496 <LL_RCC_HSE_Disable>
 8002b4c:	f7ff fc76 	bl	800243c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff f900 	bl	8001d5c <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7ff f8fc 	bl	8001d5c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e268      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b72:	f7ff fc9e 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f1      	beq.n	8002b60 <HAL_RCC_OscConfig+0x244>
 8002b7c:	e013      	b.n	8002ba6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7ff f8ed 	bl	8001d5c <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b86:	f7ff f8e9 	bl	8001d5c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e255      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b98:	f7ff fc8b 	bl	80024b2 <LL_RCC_HSE_IsReady>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f1      	bne.n	8002b86 <HAL_RCC_OscConfig+0x26a>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2a8>
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d113      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d110      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc4:	f7ff fca2 	bl	800250c <LL_RCC_HSI_IsReady>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x2be>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e234      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fca5 	bl	800252e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be4:	e031      	b.n	8002c4a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bee:	f7ff fc71 	bl	80024d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f8b3 	bl	8001d5c <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7ff f8af 	bl	8001d5c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e21b      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c0c:	f7ff fc7e 	bl	800250c <LL_RCC_HSI_IsReady>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f1      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fc87 	bl	800252e <LL_RCC_HSI_SetCalibTrimming>
 8002c20:	e013      	b.n	8002c4a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	f7ff fc65 	bl	80024f0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7ff f899 	bl	8001d5c <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7ff f895 	bl	8001d5c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e201      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c40:	f7ff fc64 	bl	800250c <LL_RCC_HSI_IsReady>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f1      	bne.n	8002c2e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d06e      	beq.n	8002d34 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d056      	beq.n	8002d0c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d031      	beq.n	8002cda <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1da      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c98:	f7ff fc7e 	bl	8002598 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c9c:	f7ff f85e 	bl	8001d5c <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7ff f85a 	bl	8001d5c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b11      	cmp	r3, #17
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1c6      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002cb6:	f7ff fc7f 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f1      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc8:	f023 0210 	bic.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	f7ff fc4d 	bl	8002578 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7ff f83d 	bl	8001d5c <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7ff f839 	bl	8001d5c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b11      	cmp	r3, #17
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a5      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002cf8:	f7ff fc5e 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f1      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x3ca>
 8002d02:	e017      	b.n	8002d34 <HAL_RCC_OscConfig+0x418>
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0c:	f7ff fc44 	bl	8002598 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7ff f824 	bl	8001d5c <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7ff f820 	bl	8001d5c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b11      	cmp	r3, #17
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e18c      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002d2a:	f7ff fc45 	bl	80025b8 <LL_RCC_LSI_IsReady>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f1      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80d8 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d42:	f7ff fb5b 	bl	80023fc <LL_PWR_IsEnabledBkUpAccess>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d4c:	f7ff fb3c 	bl	80023c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d50:	f7ff f804 	bl	8001d5c <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7ff f800 	bl	8001d5c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e16c      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002d6a:	f7ff fb47 	bl	80023fc <LL_PWR_IsEnabledBkUpAccess>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f1      	beq.n	8002d58 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d07b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b85      	cmp	r3, #133	; 0x85
 8002d82:	d003      	beq.n	8002d8c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe ffdc 	bl	8001d5c <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe ffce 	bl	8001d5c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e138      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dd2:	f7ff fbc0 	bl	8002556 <LL_RCC_LSE_IsReady>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b81      	cmp	r3, #129	; 0x81
 8002de2:	d003      	beq.n	8002dec <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b85      	cmp	r3, #133	; 0x85
 8002dea:	d121      	bne.n	8002e30 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe ffb6 	bl	8001d5c <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe ffa8 	bl	8001d5c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e112      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ec      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e2e:	e060      	b.n	8002ef2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe ff94 	bl	8001d5c <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe ff86 	bl	8001d5c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0f0      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ec      	bne.n	8002e4c <HAL_RCC_OscConfig+0x530>
 8002e72:	e03e      	b.n	8002ef2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe ff72 	bl	8001d5c <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe ff64 	bl	8001d5c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0ce      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ec      	bne.n	8002e90 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe ff51 	bl	8001d5c <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe ff43 	bl	8001d5c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0ad      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ee8:	f7ff fb35 	bl	8002556 <LL_RCC_LSE_IsReady>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ef      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a3 	beq.w	8003042 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d076      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d14b      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	f7ff fc76 	bl	80027fa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe ff25 	bl	8001d5c <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe ff21 	bl	8001d5c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b0a      	cmp	r3, #10
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e08d      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002f28:	f7ff fc75 	bl	8002816 <LL_RCC_PLL_IsReady>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f1      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_RCC_OscConfig+0x730>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f4a:	0212      	lsls	r2, r2, #8
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	f7ff fc39 	bl	80027de <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe feee 	bl	8001d5c <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe feea 	bl	8001d5c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b0a      	cmp	r3, #10
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e056      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002f96:	f7ff fc3e 	bl	8002816 <LL_RCC_PLL_IsReady>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f1      	beq.n	8002f84 <HAL_RCC_OscConfig+0x668>
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	f7ff fc2a 	bl	80027fa <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	f023 0303 	bic.w	r3, r3, #3
 8002fb4:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe fec7 	bl	8001d5c <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fec3 	bl	8001d5c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b0a      	cmp	r3, #10
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e02f      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fe4:	f7ff fc17 	bl	8002816 <LL_RCC_PLL_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f1      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x6b6>
 8002fee:	e028      	b.n	8003042 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e023      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	429a      	cmp	r2, r3
 8003010:	d115      	bne.n	800303e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	429a      	cmp	r2, r3
 800301e:	d10e      	bne.n	800303e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	429a      	cmp	r2, r3
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	11c1808c 	.word	0x11c1808c

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e10f      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d91b      	bls.n	80030aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b86      	ldr	r3, [pc, #536]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0207 	bic.w	r2, r3, #7
 800307a:	4984      	ldr	r1, [pc, #528]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fe fe6b 	bl	8001d5c <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003088:	e008      	b.n	800309c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800308a:	f7fe fe67 	bl	8001d5c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0f3      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	4b7b      	ldr	r3, [pc, #492]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d1ef      	bne.n	800308a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb12 	bl	80026e4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030c0:	f7fe fe4c 	bl	8001d5c <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030c8:	f7fe fe48 	bl	8001d5c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0d4      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030da:	f7ff fbda 	bl	8002892 <LL_RCC_IsActiveFlag_HPRE>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f1      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fb08 	bl	800270a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fe2f 	bl	8001d5c <HAL_GetTick>
 80030fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003102:	f7fe fe2b 	bl	8001d5c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0b7      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003114:	f7ff fbce 	bl	80028b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f1      	beq.n	8003102 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fb01 	bl	8002736 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003134:	f7fe fe12 	bl	8001d5c <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313c:	f7fe fe0e 	bl	8001d5c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e09a      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800314e:	f7ff fbc3 	bl	80028d8 <LL_RCC_IsActiveFlag_PPRE1>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f1      	beq.n	800313c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff faf6 	bl	800275c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003170:	f7fe fdf4 	bl	8001d5c <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003178:	f7fe fdf0 	bl	8001d5c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e07c      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800318a:	f7ff fbb6 	bl	80028fa <LL_RCC_IsActiveFlag_PPRE2>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f1      	beq.n	8003178 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d043      	beq.n	8003228 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80031a8:	f7ff f983 	bl	80024b2 <LL_RCC_HSE_IsReady>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11e      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e066      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d106      	bne.n	80031cc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80031be:	f7ff fb2a 	bl	8002816 <LL_RCC_PLL_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d113      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e05b      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80031d4:	f7ff fa1d 	bl	8002612 <LL_RCC_MSI_IsReady>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e050      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80031e2:	f7ff f993 	bl	800250c <LL_RCC_HSI_IsReady>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e049      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fa57 	bl	80026a8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fa:	f7fe fdaf 	bl	8001d5c <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	e00a      	b.n	8003218 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fe fdab 	bl	8001d5c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e035      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	f7ff fa59 	bl	80026ce <LL_RCC_GetSysClkSource>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1ec      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d21b      	bcs.n	800326e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4913      	ldr	r1, [pc, #76]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003246:	f7fe fd89 	bl	8001d5c <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	e008      	b.n	8003260 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800324e:	f7fe fd85 	bl	8001d5c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e011      	b.n	8003284 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x23c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d1ef      	bne.n	800324e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800326e:	f000 f8b3 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8003272:	4603      	mov	r3, r0
 8003274:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_RCC_ClockConfig+0x240>)
 8003276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_ClockConfig+0x244>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fd21 	bl	8001cc4 <HAL_InitTick>
 8003282:	4603      	mov	r3, r0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	58004000 	.word	0x58004000
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a6:	f7ff fa12 	bl	80026ce <LL_RCC_GetSysClkSource>
 80032aa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	f7ff fae6 	bl	800287c <LL_RCC_PLL_GetMainSource>
 80032b0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d139      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d136      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80032c4:	f7ff f9b5 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x62>
 80032ce:	f7ff f9b0 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80032d8:	f7ff f9bb 	bl	8002652 <LL_RCC_MSI_GetRange>
 80032dc:	4603      	mov	r3, r0
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	e005      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x5a>
 80032e6:	f7ff f9bf 	bl	8002668 <LL_RCC_MSI_GetRangeAfterStandby>
 80032ea:	4603      	mov	r3, r0
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a36      	ldr	r2, [pc, #216]	; (80033cc <HAL_RCC_GetSysClockFreq+0x134>)
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	e014      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x8c>
 80032fa:	f7ff f99a 	bl	8002632 <LL_RCC_MSI_IsEnabledRangeSelect>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x7a>
 8003304:	f7ff f9a5 	bl	8002652 <LL_RCC_MSI_GetRange>
 8003308:	4603      	mov	r3, r0
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	e005      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x86>
 8003312:	f7ff f9a9 	bl	8002668 <LL_RCC_MSI_GetRangeAfterStandby>
 8003316:	4603      	mov	r3, r0
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_RCC_GetSysClockFreq+0x134>)
 8003320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003324:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d115      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003330:	e012      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d102      	bne.n	800333e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e00c      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d109      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003344:	f7ff f888 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d102      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e001      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003356:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	f7ff f9b9 	bl	80026ce <LL_RCC_GetSysClkSource>
 800335c:	4603      	mov	r3, r0
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d12f      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003362:	f7ff fa8b 	bl	800287c <LL_RCC_PLL_GetMainSource>
 8003366:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0xde>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xe4>
 8003374:	e00d      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003378:	60fb      	str	r3, [r7, #12]
        break;
 800337a:	e00d      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800337c:	f7ff f86c 	bl	8002458 <LL_RCC_HSE_IsEnabledDiv2>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003388:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800338e:	60fb      	str	r3, [r7, #12]
        break;
 8003390:	e002      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	60fb      	str	r3, [r7, #12]
        break;
 8003396:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003398:	f7ff fa4e 	bl	8002838 <LL_RCC_PLL_GetN>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	fb03 f402 	mul.w	r4, r3, r2
 80033a4:	f7ff fa5f 	bl	8002866 <LL_RCC_PLL_GetDivider>
 80033a8:	4603      	mov	r3, r0
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	3301      	adds	r3, #1
 80033ae:	fbb4 f4f3 	udiv	r4, r4, r3
 80033b2:	f7ff fa4d 	bl	8002850 <LL_RCC_PLL_GetR>
 80033b6:	4603      	mov	r3, r0
 80033b8:	0f5b      	lsrs	r3, r3, #29
 80033ba:	3301      	adds	r3, #1
 80033bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80033c0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80033c2:	697b      	ldr	r3, [r7, #20]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	0800d9b0 	.word	0x0800d9b0
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	01e84800 	.word	0x01e84800

080033d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b598      	push	{r3, r4, r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80033dc:	f7ff ff5c 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80033e0:	4604      	mov	r4, r0
 80033e2:	f7ff f9ce 	bl	8002782 <LL_RCC_GetAHBPrescaler>
 80033e6:	4603      	mov	r3, r0
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a03      	ldr	r2, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x24>)
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd98      	pop	{r3, r4, r7, pc}
 80033fc:	0800d950 	.word	0x0800d950

08003400 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b598      	push	{r3, r4, r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003404:	f7ff ffe8 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8003408:	4604      	mov	r4, r0
 800340a:	f7ff f9d2 	bl	80027b2 <LL_RCC_GetAPB1Prescaler>
 800340e:	4603      	mov	r3, r0
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003418:	fa24 f303 	lsr.w	r3, r4, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd98      	pop	{r3, r4, r7, pc}
 8003420:	0800d990 	.word	0x0800d990

08003424 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b598      	push	{r3, r4, r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003428:	f7ff ffd6 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800342c:	4604      	mov	r4, r0
 800342e:	f7ff f9cb 	bl	80027c8 <LL_RCC_GetAPB2Prescaler>
 8003432:	4603      	mov	r3, r0
 8003434:	0adb      	lsrs	r3, r3, #11
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd98      	pop	{r3, r4, r7, pc}
 8003444:	0800d990 	.word	0x0800d990

08003448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	4a10      	ldr	r2, [pc, #64]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003460:	f7ff f99a 	bl	8002798 <LL_RCC_GetAHB3Prescaler>
 8003464:	4603      	mov	r3, r0
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9c      	lsrs	r4, r3, #18
 8003484:	f7fe ffae 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 8003488:	4603      	mov	r3, r0
 800348a:	4619      	mov	r1, r3
 800348c:	4620      	mov	r0, r4
 800348e:	f000 f80b 	bl	80034a8 <RCC_SetFlashLatency>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	0800d9b0 	.word	0x0800d9b0
 80034a0:	0800d950 	.word	0x0800d950
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80034b2:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <RCC_SetFlashLatency+0xfc>)
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034bc:	6018      	str	r0, [r3, #0]
 80034be:	3304      	adds	r3, #4
 80034c0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80034c2:	4a39      	ldr	r2, [pc, #228]	; (80035a8 <RCC_SetFlashLatency+0x100>)
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034cc:	6018      	str	r0, [r3, #0]
 80034ce:	3304      	adds	r3, #4
 80034d0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80034d2:	4a36      	ldr	r2, [pc, #216]	; (80035ac <RCC_SetFlashLatency+0x104>)
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d11d      	bne.n	8003526 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
 80034ee:	e016      	b.n	800351e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034f8:	4413      	add	r3, r2
 80034fa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4293      	cmp	r3, r2
 8003504:	d808      	bhi.n	8003518 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800350e:	4413      	add	r3, r2
 8003510:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003516:	e023      	b.n	8003560 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	3301      	adds	r3, #1
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2b02      	cmp	r3, #2
 8003522:	d9e5      	bls.n	80034f0 <RCC_SetFlashLatency+0x48>
 8003524:	e01c      	b.n	8003560 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	e016      	b.n	800355a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003534:	4413      	add	r3, r2
 8003536:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4293      	cmp	r3, r2
 8003540:	d808      	bhi.n	8003554 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800354a:	4413      	add	r3, r2
 800354c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003552:	e005      	b.n	8003560 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	3301      	adds	r3, #1
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b02      	cmp	r3, #2
 800355e:	d9e5      	bls.n	800352c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003560:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <RCC_SetFlashLatency+0x108>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 0207 	bic.w	r2, r3, #7
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <RCC_SetFlashLatency+0x108>)
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003570:	f7fe fbf4 	bl	8001d5c <HAL_GetTick>
 8003574:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003576:	e008      	b.n	800358a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003578:	f7fe fbf0 	bl	8001d5c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e007      	b.n	800359a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <RCC_SetFlashLatency+0x108>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003594:	429a      	cmp	r2, r3
 8003596:	d1ef      	bne.n	8003578 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3738      	adds	r7, #56	; 0x38
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	0800d670 	.word	0x0800d670
 80035a8:	0800d678 	.word	0x0800d678
 80035ac:	0800d680 	.word	0x0800d680
 80035b0:	58004000 	.word	0x58004000

080035b4 <LL_RCC_LSE_IsReady>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d101      	bne.n	80035cc <LL_RCC_LSE_IsReady+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_RCC_LSE_IsReady+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <LL_RCC_SetUSARTClockSource>:
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	43db      	mvns	r3, r3
 80035ec:	401a      	ands	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <LL_RCC_SetI2SClockSource>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <LL_RCC_SetLPUARTClockSource>:
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <LL_RCC_SetI2CClockSource>:
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003672:	43db      	mvns	r3, r3
 8003674:	401a      	ands	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800367e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <LL_RCC_SetLPTIMClockSource>:
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <LL_RCC_SetRNGClockSource>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <LL_RCC_SetADCClockSource>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <LL_RCC_SetRTCClockSource>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_RCC_GetRTCClockSource>:
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <LL_RCC_ForceBackupDomainReset>:
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <LL_RCC_ReleaseBackupDomainReset>:
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80037a8:	2300      	movs	r3, #0
 80037aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80037ac:	2300      	movs	r3, #0
 80037ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d058      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80037bc:	f7fe fe04 	bl	80023c8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037c0:	f7fe facc 	bl	8001d5c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80037c6:	e009      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fe fac8 	bl	8001d5c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	74fb      	strb	r3, [r7, #19]
        break;
 80037da:	e006      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d13c      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80037f0:	f7ff ffa7 	bl	8003742 <LL_RCC_GetRTCClockSource>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d00f      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800380c:	f7ff ffa5 	bl	800375a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003810:	f7ff ffb3 	bl	800377a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d014      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fa98 	bl	8001d5c <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800382e:	e00b      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe fa94 	bl	8001d5c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d902      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	74fb      	strb	r3, [r7, #19]
            break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003848:	f7ff feb4 	bl	80035b4 <LL_RCC_LSE_IsReady>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d1ee      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5b 	bl	8003718 <LL_RCC_SetRTCClockSource>
 8003862:	e004      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
 8003868:	e001      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fea9 	bl	80035d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fe9e 	bl	80035d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fec0 	bl	8003630 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fee6 	bl	8003692 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fedb 	bl	8003692 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fed0 	bl	8003692 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fea9 	bl	800365a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fe9e 	bl	800365a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fe93 	bl	800365a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d011      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe5e 	bl	8003606 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	d107      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fea5 	bl	80036c4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800398c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003990:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fea3 	bl	80036ee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b0:	d107      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80039c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58000400 	.word	0x58000400

080039d0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e0:	4904      	ldr	r1, [pc, #16]	; (80039f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	58000400 	.word	0x58000400

080039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	58000400 	.word	0x58000400

08003a18 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	58000400 	.word	0x58000400

08003a38 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a42:	619a      	str	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	58000400 	.word	0x58000400

08003a50 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d101      	bne.n	8003a64 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	58000400 	.word	0x58000400

08003a74 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d101      	bne.n	8003a88 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58000400 	.word	0x58000400

08003a98 <LL_RCC_RF_DisableReset>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <LL_RCC_IsRFUnderReset>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003acc:	d101      	bne.n	8003ad2 <LL_RCC_IsRFUnderReset+0x1a>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <LL_RCC_IsRFUnderReset+0x1c>
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <LL_EXTI_EnableIT_32_63+0x24>)
 8003ae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003aea:	4905      	ldr	r1, [pc, #20]	; (8003b00 <LL_EXTI_EnableIT_32_63+0x24>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	58000800 	.word	0x58000800

08003b04 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
    return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	e04b      	b.n	8003bb2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	799b      	ldrb	r3, [r3, #6]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fdd4 	bl	80016dc <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003b3a:	f7ff ffad 	bl	8003a98 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b3e:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <HAL_SUBGHZ_Init+0xb8>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	0cdb      	lsrs	r3, r3, #19
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	609a      	str	r2, [r3, #8]
      break;
 8003b64:	e007      	b.n	8003b76 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003b6c:	f7ff ffa4 	bl	8003ab8 <LL_RCC_IsRFUnderReset>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ee      	bne.n	8003b54 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b76:	f7ff ff3f 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003b7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b7e:	f7ff ffad 	bl	8003adc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003b82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b86:	f7ff ff23 	bl	80039d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003b8a:	f7ff ff55 	bl	8003a38 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 faad 	bl	80040f8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	719a      	strb	r2, [r3, #6]

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000000 	.word	0x20000000

08003bc0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	799b      	ldrb	r3, [r3, #6]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d14a      	bne.n	8003c74 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	795b      	ldrb	r3, [r3, #5]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e045      	b.n	8003c76 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb4c 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bfc:	f7ff ff0c 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003c00:	210d      	movs	r1, #13
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa98 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003c08:	897b      	ldrh	r3, [r7, #10]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa90 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003c18:	897b      	ldrh	r3, [r7, #10]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fa8a 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	82bb      	strh	r3, [r7, #20]
 8003c28:	e00a      	b.n	8003c40 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c2a:	8abb      	ldrh	r3, [r7, #20]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fa7f 	bl	8004138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c3a:	8abb      	ldrh	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	82bb      	strh	r3, [r7, #20]
 8003c40:	8aba      	ldrh	r2, [r7, #20]
 8003c42:	893b      	ldrh	r3, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d3f0      	bcc.n	8003c2a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c48:	f7ff fed6 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fb45 	bl	80042dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	e001      	b.n	8003c64 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	715a      	strb	r2, [r3, #5]

    return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	e000      	b.n	8003c76 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	799b      	ldrb	r3, [r3, #6]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d14a      	bne.n	8003d36 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	795b      	ldrb	r3, [r3, #5]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e045      	b.n	8003d38 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 faee 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cb8:	f7ff feae 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003cbc:	211d      	movs	r1, #29
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa3a 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa32 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fa2c 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fa28 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	82fb      	strh	r3, [r7, #22]
 8003cec:	e009      	b.n	8003d02 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fa77 	bl	80041e4 <SUBGHZSPI_Receive>
      pData++;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003cfc:	8afb      	ldrh	r3, [r7, #22]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	82fb      	strh	r3, [r7, #22]
 8003d02:	8afa      	ldrh	r2, [r7, #22]
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3f1      	bcc.n	8003cee <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d0a:	f7ff fe75 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fae4 	bl	80042dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e001      	b.n	8003d26 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	715a      	strb	r2, [r3, #5]

    return status;
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
 8003d34:	e000      	b.n	8003d38 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	72fb      	strb	r3, [r7, #11]
 8003d50:	4613      	mov	r3, r2
 8003d52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	799b      	ldrb	r3, [r3, #6]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d14a      	bne.n	8003df4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	795b      	ldrb	r3, [r3, #5]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e045      	b.n	8003df6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa8f 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003d76:	7afb      	ldrb	r3, [r7, #11]
 8003d78:	2b84      	cmp	r3, #132	; 0x84
 8003d7a:	d002      	beq.n	8003d82 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	2b94      	cmp	r3, #148	; 0x94
 8003d80:	d103      	bne.n	8003d8a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	711a      	strb	r2, [r3, #4]
 8003d88:	e002      	b.n	8003d90 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d90:	f7ff fe42 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	4619      	mov	r1, r3
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f9cd 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	82bb      	strh	r3, [r7, #20]
 8003da2:	e00a      	b.n	8003dba <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003da4:	8abb      	ldrh	r3, [r7, #20]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f9c2 	bl	8004138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003db4:	8abb      	ldrh	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	82bb      	strh	r3, [r7, #20]
 8003dba:	8aba      	ldrh	r2, [r7, #20]
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3f0      	bcc.n	8003da4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dc2:	f7ff fe19 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	2b84      	cmp	r3, #132	; 0x84
 8003dca:	d002      	beq.n	8003dd2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fa85 	bl	80042dc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
 8003dde:	e001      	b.n	8003de4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	715a      	strb	r2, [r3, #5]

    return status;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	e000      	b.n	8003df6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	72fb      	strb	r3, [r7, #11]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d13d      	bne.n	8003e9c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	795b      	ldrb	r3, [r3, #5]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e038      	b.n	8003e9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fa2e 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e38:	f7ff fdee 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f979 	bl	8004138 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e46:	2100      	movs	r1, #0
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f975 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	82fb      	strh	r3, [r7, #22]
 8003e52:	e009      	b.n	8003e68 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f9c4 	bl	80041e4 <SUBGHZSPI_Receive>
      pData++;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e62:	8afb      	ldrh	r3, [r7, #22]
 8003e64:	3301      	adds	r3, #1
 8003e66:	82fb      	strh	r3, [r7, #22]
 8003e68:	8afa      	ldrh	r2, [r7, #22]
 8003e6a:	893b      	ldrh	r3, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3f1      	bcc.n	8003e54 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e70:	f7ff fdc2 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa31 	bl	80042dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e001      	b.n	8003e8c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	715a      	strb	r2, [r3, #5]

    return status;
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	e000      	b.n	8003e9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	72fb      	strb	r3, [r7, #11]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	799b      	ldrb	r3, [r3, #6]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d13e      	bne.n	8003f42 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	795b      	ldrb	r3, [r3, #5]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e039      	b.n	8003f44 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f9dc 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003edc:	f7ff fd9c 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003ee0:	210e      	movs	r1, #14
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f928 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	4619      	mov	r1, r3
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f923 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	82bb      	strh	r3, [r7, #20]
 8003ef6:	e00a      	b.n	8003f0e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ef8:	8abb      	ldrh	r3, [r7, #20]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f918 	bl	8004138 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f08:	8abb      	ldrh	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	82bb      	strh	r3, [r7, #20]
 8003f0e:	8aba      	ldrh	r2, [r7, #20]
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3f0      	bcc.n	8003ef8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f16:	f7ff fd6f 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9de 	bl	80042dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
 8003f2c:	e001      	b.n	8003f32 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	715a      	strb	r2, [r3, #5]

    return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	e000      	b.n	8003f44 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	460b      	mov	r3, r1
 8003f5a:	72fb      	strb	r3, [r7, #11]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	799b      	ldrb	r3, [r3, #6]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d141      	bne.n	8003ff2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	795b      	ldrb	r3, [r3, #5]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e03c      	b.n	8003ff4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f987 	bl	8004294 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f86:	f7ff fd47 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003f8a:	211e      	movs	r1, #30
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f8d3 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	4619      	mov	r1, r3
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f8ce 	bl	8004138 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8ca 	bl	8004138 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	82fb      	strh	r3, [r7, #22]
 8003fa8:	e009      	b.n	8003fbe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f919 	bl	80041e4 <SUBGHZSPI_Receive>
      pData++;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003fb8:	8afb      	ldrh	r3, [r7, #22]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	82fb      	strh	r3, [r7, #22]
 8003fbe:	8afa      	ldrh	r2, [r7, #22]
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3f1      	bcc.n	8003faa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003fc6:	f7ff fd17 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f986 	bl	80042dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e001      	b.n	8003fe2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	715a      	strb	r2, [r3, #5]

    return status;
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	e000      	b.n	8003ff4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004004:	2300      	movs	r3, #0
 8004006:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004008:	f107 020c 	add.w	r2, r7, #12
 800400c:	2302      	movs	r3, #2
 800400e:	2112      	movs	r1, #18
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fef4 	bl	8003dfe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004016:	7b3b      	ldrb	r3, [r7, #12]
 8004018:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b21a      	sxth	r2, r3
 8004020:	7b7b      	ldrb	r3, [r7, #13]
 8004022:	b21b      	sxth	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b21b      	sxth	r3, r3
 8004028:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800402a:	89fb      	ldrh	r3, [r7, #14]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f003 fdd3 	bl	8007be0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f003 fdd8 	bl	8007bfc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f003 fe27 	bl	8007cac <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f003 fe2c 	bl	8007cc8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f003 fe31 	bl	8007ce4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f003 fdfe 	bl	8007c90 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f003 fdb9 	bl	8007c18 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	09db      	lsrs	r3, r3, #7
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80040b2:	89fb      	ldrh	r3, [r7, #14]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80040be:	2101      	movs	r1, #1
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f003 fdb7 	bl	8007c34 <HAL_SUBGHZ_CADStatusCallback>
 80040c6:	e003      	b.n	80040d0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f003 fdb2 	bl	8007c34 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	0a5b      	lsrs	r3, r3, #9
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f003 fdc7 	bl	8007c70 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80040e2:	f107 020c 	add.w	r2, r7, #12
 80040e6:	2302      	movs	r3, #2
 80040e8:	2102      	movs	r1, #2
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fe28 	bl	8003d40 <HAL_SUBGHZ_ExecSetCmd>
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 8004106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004114:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 8004118:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800411c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <SUBGHZSPI_Init+0x3c>)
 8004124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004128:	6013      	str	r3, [r2, #0]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	58010000 	.word	0x58010000

08004138 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <SUBGHZSPI_Transmit+0xa0>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	0cdb      	lsrs	r3, r3, #19
 8004156:	2264      	movs	r2, #100	; 0x64
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	609a      	str	r2, [r3, #8]
      break;
 800416e:	e008      	b.n	8004182 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3b01      	subs	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <SUBGHZSPI_Transmit+0xa4>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d1ed      	bne.n	800415e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <SUBGHZSPI_Transmit+0xa8>)
 8004184:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <SUBGHZSPI_Transmit+0xa0>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	0cdb      	lsrs	r3, r3, #19
 800419a:	2264      	movs	r2, #100	; 0x64
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	609a      	str	r2, [r3, #8]
      break;
 80041b2:	e008      	b.n	80041c6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <SUBGHZSPI_Transmit+0xa4>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d1ed      	bne.n	80041a2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SUBGHZSPI_Transmit+0xa4>)
 80041c8:	68db      	ldr	r3, [r3, #12]

  return status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000
 80041dc:	58010000 	.word	0x58010000
 80041e0:	5801000c 	.word	0x5801000c

080041e4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80041f2:	4b25      	ldr	r3, [pc, #148]	; (8004288 <SUBGHZSPI_Receive+0xa4>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	0cdb      	lsrs	r3, r3, #19
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	609a      	str	r2, [r3, #8]
      break;
 8004218:	e008      	b.n	800422c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <SUBGHZSPI_Receive+0xa8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d1ed      	bne.n	8004208 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <SUBGHZSPI_Receive+0xac>)
 800422e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <SUBGHZSPI_Receive+0xa4>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	0cdb      	lsrs	r3, r3, #19
 8004244:	2264      	movs	r2, #100	; 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	609a      	str	r2, [r3, #8]
      break;
 800425c:	e008      	b.n	8004270 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b01      	subs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <SUBGHZSPI_Receive+0xa8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d1ed      	bne.n	800424c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <SUBGHZSPI_Receive+0xa8>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	701a      	strb	r2, [r3, #0]

  return status;
 800427a:	7dfb      	ldrb	r3, [r7, #23]
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000000 	.word	0x20000000
 800428c:	58010000 	.word	0x58010000
 8004290:	5801000c 	.word	0x5801000c

08004294 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	791b      	ldrb	r3, [r3, #4]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d111      	bne.n	80042c8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <SUBGHZ_CheckDeviceReady+0x44>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042b4:	f7ff fbb0 	bl	8003a18 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80042c4:	f7ff fb98 	bl	80039f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f807 	bl	80042dc <SUBGHZ_WaitOnBusy>
 80042ce:	4603      	mov	r3, r0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000000 	.word	0x20000000

080042dc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <SUBGHZ_WaitOnBusy+0x58>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	2264      	movs	r2, #100	; 0x64
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80042fe:	f7ff fbb9 	bl	8003a74 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004302:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	609a      	str	r2, [r3, #8]
      break;
 8004314:	e009      	b.n	800432a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800431c:	f7ff fb98 	bl	8003a50 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	2b01      	cmp	r3, #1
 8004328:	d0e9      	beq.n	80042fe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000000 	.word	0x20000000

08004338 <LL_RCC_GetUSARTClockSource>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	4313      	orrs	r3, r2
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <LL_RCC_GetLPUARTClockSource>:
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4013      	ands	r3, r2
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e042      	b.n	8004412 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd f8da 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f995 	bl	80046ec <UART_SetConfig>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e022      	b.n	8004412 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fbd9 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fc5f 	bl	8004cce <UART_CheckIdleState>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	; 0x28
 800441e:	af02      	add	r7, sp, #8
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	2b20      	cmp	r3, #32
 8004432:	f040 8083 	bne.w	800453c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_UART_Transmit+0x28>
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07b      	b.n	800453e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_UART_Transmit+0x3a>
 8004450:	2302      	movs	r3, #2
 8004452:	e074      	b.n	800453e <HAL_UART_Transmit+0x124>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800446c:	f7fd fc76 	bl	8001d5c <HAL_GetTick>
 8004470:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	d108      	bne.n	800449e <HAL_UART_Transmit+0x84>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e003      	b.n	80044a6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80044ae:	e02c      	b.n	800450a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2200      	movs	r2, #0
 80044b8:	2180      	movs	r1, #128	; 0x80
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fc52 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e039      	b.n	800453e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3302      	adds	r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e007      	b.n	80044f8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	781a      	ldrb	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cc      	bne.n	80044b0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2140      	movs	r1, #64	; 0x40
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fc1f 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	; 0x28
 800454a:	af02      	add	r7, sp, #8
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	2b20      	cmp	r3, #32
 800455e:	f040 80c0 	bne.w	80046e2 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_UART_Receive+0x28>
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0b8      	b.n	80046e4 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_UART_Receive+0x3a>
 800457c:	2302      	movs	r3, #2
 800457e:	e0b1      	b.n	80046e4 <HAL_UART_Receive+0x19e>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2222      	movs	r2, #34	; 0x22
 8004594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fd fbdd 	bl	8001d5c <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d10e      	bne.n	80045dc <HAL_UART_Receive+0x96>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_UART_Receive+0x8c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045d0:	e02d      	b.n	800462e <HAL_UART_Receive+0xe8>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045da:	e028      	b.n	800462e <HAL_UART_Receive+0xe8>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <HAL_UART_Receive+0xba>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_UART_Receive+0xb0>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	22ff      	movs	r2, #255	; 0xff
 80045f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045f4:	e01b      	b.n	800462e <HAL_UART_Receive+0xe8>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	227f      	movs	r2, #127	; 0x7f
 80045fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045fe:	e016      	b.n	800462e <HAL_UART_Receive+0xe8>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004608:	d10d      	bne.n	8004626 <HAL_UART_Receive+0xe0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_UART_Receive+0xd6>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	227f      	movs	r2, #127	; 0x7f
 8004616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800461a:	e008      	b.n	800462e <HAL_UART_Receive+0xe8>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	223f      	movs	r2, #63	; 0x3f
 8004620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004624:	e003      	b.n	800462e <HAL_UART_Receive+0xe8>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004634:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d108      	bne.n	8004652 <HAL_UART_Receive+0x10c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e003      	b.n	800465a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004662:	e032      	b.n	80046ca <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2200      	movs	r2, #0
 800466c:	2120      	movs	r1, #32
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fb78 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e032      	b.n	80046e4 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10c      	bne.n	800469e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b29a      	uxth	r2, r3
 800468c:	8a7b      	ldrh	r3, [r7, #18]
 800468e:	4013      	ands	r3, r2
 8004690:	b29a      	uxth	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e00c      	b.n	80046b8 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	8a7b      	ldrh	r3, [r7, #18]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	4013      	ands	r3, r2
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3301      	adds	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1c6      	bne.n	8004664 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b5b0      	push	{r4, r5, r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4313      	orrs	r3, r2
 800470e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4bab      	ldr	r3, [pc, #684]	; (80049c4 <UART_SetConfig+0x2d8>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	430b      	orrs	r3, r1
 8004722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4aa0      	ldr	r2, [pc, #640]	; (80049c8 <UART_SetConfig+0x2dc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	4313      	orrs	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800475e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	430b      	orrs	r3, r1
 800476a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f023 010f 	bic.w	r1, r3, #15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a91      	ldr	r2, [pc, #580]	; (80049cc <UART_SetConfig+0x2e0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d122      	bne.n	80047d2 <UART_SetConfig+0xe6>
 800478c:	2003      	movs	r0, #3
 800478e:	f7ff fdd3 	bl	8004338 <LL_RCC_GetUSARTClockSource>
 8004792:	4603      	mov	r3, r0
 8004794:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004798:	2b03      	cmp	r3, #3
 800479a:	d817      	bhi.n	80047cc <UART_SetConfig+0xe0>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0xb8>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c1 	.word	0x080047c1
 80047ac:	080047bb 	.word	0x080047bb
 80047b0:	080047c7 	.word	0x080047c7
 80047b4:	2301      	movs	r3, #1
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e072      	b.n	80048a0 <UART_SetConfig+0x1b4>
 80047ba:	2302      	movs	r3, #2
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e06f      	b.n	80048a0 <UART_SetConfig+0x1b4>
 80047c0:	2304      	movs	r3, #4
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e06c      	b.n	80048a0 <UART_SetConfig+0x1b4>
 80047c6:	2308      	movs	r3, #8
 80047c8:	76fb      	strb	r3, [r7, #27]
 80047ca:	e069      	b.n	80048a0 <UART_SetConfig+0x1b4>
 80047cc:	2310      	movs	r3, #16
 80047ce:	76fb      	strb	r3, [r7, #27]
 80047d0:	e066      	b.n	80048a0 <UART_SetConfig+0x1b4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7e      	ldr	r2, [pc, #504]	; (80049d0 <UART_SetConfig+0x2e4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d134      	bne.n	8004846 <UART_SetConfig+0x15a>
 80047dc:	200c      	movs	r0, #12
 80047de:	f7ff fdab 	bl	8004338 <LL_RCC_GetUSARTClockSource>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d829      	bhi.n	8004840 <UART_SetConfig+0x154>
 80047ec:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <UART_SetConfig+0x108>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004829 	.word	0x08004829
 80047f8:	08004841 	.word	0x08004841
 80047fc:	08004841 	.word	0x08004841
 8004800:	08004841 	.word	0x08004841
 8004804:	08004835 	.word	0x08004835
 8004808:	08004841 	.word	0x08004841
 800480c:	08004841 	.word	0x08004841
 8004810:	08004841 	.word	0x08004841
 8004814:	0800482f 	.word	0x0800482f
 8004818:	08004841 	.word	0x08004841
 800481c:	08004841 	.word	0x08004841
 8004820:	08004841 	.word	0x08004841
 8004824:	0800483b 	.word	0x0800483b
 8004828:	2300      	movs	r3, #0
 800482a:	76fb      	strb	r3, [r7, #27]
 800482c:	e038      	b.n	80048a0 <UART_SetConfig+0x1b4>
 800482e:	2302      	movs	r3, #2
 8004830:	76fb      	strb	r3, [r7, #27]
 8004832:	e035      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004834:	2304      	movs	r3, #4
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e032      	b.n	80048a0 <UART_SetConfig+0x1b4>
 800483a:	2308      	movs	r3, #8
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e02f      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004840:	2310      	movs	r3, #16
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e02c      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <UART_SetConfig+0x2dc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d125      	bne.n	800489c <UART_SetConfig+0x1b0>
 8004850:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004854:	f7ff fd82 	bl	800435c <LL_RCC_GetLPUARTClockSource>
 8004858:	4603      	mov	r3, r0
 800485a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800485e:	d017      	beq.n	8004890 <UART_SetConfig+0x1a4>
 8004860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004864:	d817      	bhi.n	8004896 <UART_SetConfig+0x1aa>
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486a:	d00b      	beq.n	8004884 <UART_SetConfig+0x198>
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004870:	d811      	bhi.n	8004896 <UART_SetConfig+0x1aa>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <UART_SetConfig+0x192>
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d006      	beq.n	800488a <UART_SetConfig+0x19e>
 800487c:	e00b      	b.n	8004896 <UART_SetConfig+0x1aa>
 800487e:	2300      	movs	r3, #0
 8004880:	76fb      	strb	r3, [r7, #27]
 8004882:	e00d      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004884:	2302      	movs	r3, #2
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e00a      	b.n	80048a0 <UART_SetConfig+0x1b4>
 800488a:	2304      	movs	r3, #4
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e007      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004890:	2308      	movs	r3, #8
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	e004      	b.n	80048a0 <UART_SetConfig+0x1b4>
 8004896:	2310      	movs	r3, #16
 8004898:	76fb      	strb	r3, [r7, #27]
 800489a:	e001      	b.n	80048a0 <UART_SetConfig+0x1b4>
 800489c:	2310      	movs	r3, #16
 800489e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a48      	ldr	r2, [pc, #288]	; (80049c8 <UART_SetConfig+0x2dc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	f040 8098 	bne.w	80049dc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ac:	7efb      	ldrb	r3, [r7, #27]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d823      	bhi.n	80048fa <UART_SetConfig+0x20e>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x1cc>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048eb 	.word	0x080048eb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe fd90 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80048e0:	6178      	str	r0, [r7, #20]
        break;
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <UART_SetConfig+0x2e8>)
 80048e6:	617b      	str	r3, [r7, #20]
        break;
 80048e8:	e00c      	b.n	8004904 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe fcd5 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 80048ee:	6178      	str	r0, [r7, #20]
        break;
 80048f0:	e008      	b.n	8004904 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	617b      	str	r3, [r7, #20]
        break;
 80048f8:	e004      	b.n	8004904 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	76bb      	strb	r3, [r7, #26]
        break;
 8004902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8128 	beq.w	8004b5c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <UART_SetConfig+0x2ec>)
 8004912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004916:	461a      	mov	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fbb3 f3f2 	udiv	r3, r3, r2
 800491e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	d305      	bcc.n	800493c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	d902      	bls.n	8004942 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	76bb      	strb	r3, [r7, #26]
 8004940:	e10c      	b.n	8004b5c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4618      	mov	r0, r3
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <UART_SetConfig+0x2ec>)
 8004950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004954:	b29a      	uxth	r2, r3
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f7fc f97d 	bl	8000c58 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	020b      	lsls	r3, r1, #8
 8004970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004974:	0202      	lsls	r2, r0, #8
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	6849      	ldr	r1, [r1, #4]
 800497a:	0849      	lsrs	r1, r1, #1
 800497c:	4608      	mov	r0, r1
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	1814      	adds	r4, r2, r0
 8004984:	eb43 0501 	adc.w	r5, r3, r1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	461a      	mov	r2, r3
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fc f95f 	bl	8000c58 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4613      	mov	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a8:	d308      	bcc.n	80049bc <UART_SetConfig+0x2d0>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b0:	d204      	bcs.n	80049bc <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	e0cf      	b.n	8004b5c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	76bb      	strb	r3, [r7, #26]
 80049c0:	e0cc      	b.n	8004b5c <UART_SetConfig+0x470>
 80049c2:	bf00      	nop
 80049c4:	cfff69f3 	.word	0xcfff69f3
 80049c8:	40008000 	.word	0x40008000
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40004400 	.word	0x40004400
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	0800d9f0 	.word	0x0800d9f0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e4:	d165      	bne.n	8004ab2 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80049e6:	7efb      	ldrb	r3, [r7, #27]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d828      	bhi.n	8004a3e <UART_SetConfig+0x352>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x308>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe fcf2 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	6178      	str	r0, [r7, #20]
        break;
 8004a1e:	e013      	b.n	8004a48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe fd00 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <UART_SetConfig+0x498>)
 8004a2a:	617b      	str	r3, [r7, #20]
        break;
 8004a2c:	e00c      	b.n	8004a48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fc33 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004a32:	6178      	str	r0, [r7, #20]
        break;
 8004a34:	e008      	b.n	8004a48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	617b      	str	r3, [r7, #20]
        break;
 8004a3c:	e004      	b.n	8004a48 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	76bb      	strb	r3, [r7, #26]
        break;
 8004a46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8086 	beq.w	8004b5c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a4c      	ldr	r2, [pc, #304]	; (8004b88 <UART_SetConfig+0x49c>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a62:	005a      	lsls	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	441a      	add	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d916      	bls.n	8004aac <UART_SetConfig+0x3c0>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d212      	bcs.n	8004aac <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f023 030f 	bic.w	r3, r3, #15
 8004a8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	89fa      	ldrh	r2, [r7, #14]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e057      	b.n	8004b5c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	76bb      	strb	r3, [r7, #26]
 8004ab0:	e054      	b.n	8004b5c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab2:	7efb      	ldrb	r3, [r7, #27]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d828      	bhi.n	8004b0a <UART_SetConfig+0x41e>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x3d4>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004afb 	.word	0x08004afb
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004b0b 	.word	0x08004b0b
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe fc8c 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	6178      	str	r0, [r7, #20]
        break;
 8004aea:	e013      	b.n	8004b14 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe fc9a 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8004af0:	6178      	str	r0, [r7, #20]
        break;
 8004af2:	e00f      	b.n	8004b14 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <UART_SetConfig+0x498>)
 8004af6:	617b      	str	r3, [r7, #20]
        break;
 8004af8:	e00c      	b.n	8004b14 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fbcd 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8004afe:	6178      	str	r0, [r7, #20]
        break;
 8004b00:	e008      	b.n	8004b14 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	617b      	str	r3, [r7, #20]
        break;
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	76bb      	strb	r3, [r7, #26]
        break;
 8004b12:	bf00      	nop
    }

    if (pclk != 0U)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <UART_SetConfig+0x49c>)
 8004b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b24:	461a      	mov	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	441a      	add	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	d908      	bls.n	8004b58 <UART_SetConfig+0x46c>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d204      	bcs.n	8004b58 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	e001      	b.n	8004b5c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b78:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bdb0      	pop	{r4, r5, r7, pc}
 8004b82:	bf00      	nop
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	0800d9f0 	.word	0x0800d9f0

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr

08004cce <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cde:	f7fd f83d 	bl	8001d5c <HAL_GetTick>
 8004ce2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d10e      	bne.n	8004d10 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f82f 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e025      	b.n	8004d5c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d10e      	bne.n	8004d3c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f819 	bl	8004d64 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e00f      	b.n	8004d5c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b09c      	sub	sp, #112	; 0x70
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d74:	e0a9      	b.n	8004eca <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	f000 80a5 	beq.w	8004eca <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d80:	f7fc ffec 	bl	8001d5c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d140      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004daa:	667b      	str	r3, [r7, #100]	; 0x64
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e6      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	663b      	str	r3, [r7, #96]	; 0x60
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004de8:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e069      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d051      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e34:	d149      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3308      	adds	r3, #8
 8004e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	613b      	str	r3, [r7, #16]
   return(result);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e92:	623a      	str	r2, [r7, #32]
 8004e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	69f9      	ldr	r1, [r7, #28]
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e010      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	f43f af46 	beq.w	8004d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3770      	adds	r7, #112	; 0x70
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_UARTEx_DisableFifoMode+0x16>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e027      	b.n	8004f5a <HAL_UARTEx_DisableFifoMode+0x66>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2224      	movs	r2, #36	; 0x24
 8004f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e02d      	b.n	8004fd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f84f 	bl	800505c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e02d      	b.n	8005054 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f811 	bl	800505c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800507c:	e031      	b.n	80050e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800507e:	2308      	movs	r3, #8
 8005080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005082:	2308      	movs	r3, #8
 8005084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	0e5b      	lsrs	r3, r3, #25
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	0f5b      	lsrs	r3, r3, #29
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	7b3a      	ldrb	r2, [r7, #12]
 80050aa:	4910      	ldr	r1, [pc, #64]	; (80050ec <UARTEx_SetNbDataToProcess+0x90>)
 80050ac:	5c8a      	ldrb	r2, [r1, r2]
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050b2:	7b3a      	ldrb	r2, [r7, #12]
 80050b4:	490e      	ldr	r1, [pc, #56]	; (80050f0 <UARTEx_SetNbDataToProcess+0x94>)
 80050b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	7b7a      	ldrb	r2, [r7, #13]
 80050c8:	4908      	ldr	r1, [pc, #32]	; (80050ec <UARTEx_SetNbDataToProcess+0x90>)
 80050ca:	5c8a      	ldrb	r2, [r1, r2]
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050d0:	7b7a      	ldrb	r2, [r7, #13]
 80050d2:	4907      	ldr	r1, [pc, #28]	; (80050f0 <UARTEx_SetNbDataToProcess+0x94>)
 80050d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	0800da08 	.word	0x0800da08
 80050f0:	0800da10 	.word	0x0800da10

080050f4 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <RadioInit+0x60>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <RadioInit+0x64>)
 8005104:	2200      	movs	r2, #0
 8005106:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <RadioInit+0x64>)
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <RadioInit+0x64>)
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005114:	4811      	ldr	r0, [pc, #68]	; (800515c <RadioInit+0x68>)
 8005116:	f001 fdc1 	bl	8006c9c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800511a:	2000      	movs	r0, #0
 800511c:	f000 ffb0 	bl	8006080 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8005120:	f002 f852 	bl	80071c8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005124:	2100      	movs	r1, #0
 8005126:	2000      	movs	r0, #0
 8005128:	f002 fba8 	bl	800787c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800512c:	2204      	movs	r2, #4
 800512e:	2100      	movs	r1, #0
 8005130:	2001      	movs	r0, #1
 8005132:	f002 f9d3 	bl	80074dc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005136:	2300      	movs	r3, #0
 8005138:	2200      	movs	r2, #0
 800513a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800513e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005142:	f002 f907 	bl	8007354 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005146:	f000 fe4f 	bl	8005de8 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000440 	.word	0x20000440
 8005158:	20000594 	.word	0x20000594
 800515c:	080060ed 	.word	0x080060ed

08005160 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005164:	f001 fddc 	bl	8006d20 <SUBGRF_GetOperatingMode>
 8005168:	4603      	mov	r3, r0
 800516a:	2b07      	cmp	r3, #7
 800516c:	d00a      	beq.n	8005184 <RadioGetStatus+0x24>
 800516e:	2b07      	cmp	r3, #7
 8005170:	dc0a      	bgt.n	8005188 <RadioGetStatus+0x28>
 8005172:	2b04      	cmp	r3, #4
 8005174:	d002      	beq.n	800517c <RadioGetStatus+0x1c>
 8005176:	2b05      	cmp	r3, #5
 8005178:	d002      	beq.n	8005180 <RadioGetStatus+0x20>
 800517a:	e005      	b.n	8005188 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800517c:	2302      	movs	r3, #2
 800517e:	e004      	b.n	800518a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005180:	2301      	movs	r3, #1
 8005182:	e002      	b.n	800518a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005184:	2303      	movs	r3, #3
 8005186:	e000      	b.n	800518a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005188:	2300      	movs	r3, #0
    }
}
 800518a:	4618      	mov	r0, r3
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800519a:	4a25      	ldr	r2, [pc, #148]	; (8005230 <RadioSetModem+0xa0>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fedf 	bl	8007f66 <RFW_SetRadioModem>
    switch( modem )
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d80b      	bhi.n	80051c8 <RadioSetModem+0x38>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <RadioSetModem+0x28>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051fd 	.word	0x080051fd
 80051c0:	0800520b 	.word	0x0800520b
 80051c4:	08005219 	.word	0x08005219
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80051c8:	2000      	movs	r0, #0
 80051ca:	f002 f961 	bl	8007490 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <RadioSetModem+0xa0>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	735a      	strb	r2, [r3, #13]
        break;
 80051d4:	e028      	b.n	8005228 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80051d6:	2001      	movs	r0, #1
 80051d8:	f002 f95a 	bl	8007490 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <RadioSetModem+0xa0>)
 80051de:	7b5a      	ldrb	r2, [r3, #13]
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <RadioSetModem+0xa0>)
 80051e2:	7b1b      	ldrb	r3, [r3, #12]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d01e      	beq.n	8005226 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <RadioSetModem+0xa0>)
 80051ea:	7b1a      	ldrb	r2, [r3, #12]
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <RadioSetModem+0xa0>)
 80051ee:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <RadioSetModem+0xa0>)
 80051f2:	7b5b      	ldrb	r3, [r3, #13]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 ff43 	bl	8006080 <RadioSetPublicNetwork>
        }
        break;
 80051fa:	e014      	b.n	8005226 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80051fc:	2002      	movs	r0, #2
 80051fe:	f002 f947 	bl	8007490 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <RadioSetModem+0xa0>)
 8005204:	2200      	movs	r2, #0
 8005206:	735a      	strb	r2, [r3, #13]
        break;
 8005208:	e00e      	b.n	8005228 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800520a:	2002      	movs	r0, #2
 800520c:	f002 f940 	bl	8007490 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <RadioSetModem+0xa0>)
 8005212:	2200      	movs	r2, #0
 8005214:	735a      	strb	r2, [r3, #13]
        break;
 8005216:	e007      	b.n	8005228 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005218:	2000      	movs	r0, #0
 800521a:	f002 f939 	bl	8007490 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <RadioSetModem+0xa0>)
 8005220:	2200      	movs	r2, #0
 8005222:	735a      	strb	r2, [r3, #13]
        break;
 8005224:	e000      	b.n	8005228 <RadioSetModem+0x98>
        break;
 8005226:	bf00      	nop
    }
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000594 	.word	0x20000594

08005234 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 f8e5 	bl	800740c <SUBGRF_SetRfFrequency>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b090      	sub	sp, #64	; 0x40
 800524e:	af0a      	add	r7, sp, #40	; 0x28
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005266:	f000 fdd2 	bl	8005e0e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800526a:	2000      	movs	r0, #0
 800526c:	f7ff ff90 	bl	8005190 <RadioSetModem>

    RadioSetChannel( freq );
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ffdf 	bl	8005234 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005276:	2301      	movs	r3, #1
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	2300      	movs	r3, #0
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	2300      	movs	r3, #0
 8005280:	9307      	str	r3, [sp, #28]
 8005282:	2300      	movs	r3, #0
 8005284:	9306      	str	r3, [sp, #24]
 8005286:	2300      	movs	r3, #0
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	2300      	movs	r3, #0
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	9303      	str	r3, [sp, #12]
 8005292:	2300      	movs	r3, #0
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	2303      	movs	r3, #3
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	2000      	movs	r0, #0
 80052a8:	f000 f826 	bl	80052f8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80052ac:	2000      	movs	r0, #0
 80052ae:	f000 fdb5 	bl	8005e1c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80052b2:	f000 ff13 	bl	80060dc <RadioGetWakeupTime>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fc fd59 	bl	8001d70 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80052be:	f000 fda6 	bl	8005e0e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7ff ff5a 	bl	8005190 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80052dc:	2300      	movs	r3, #0
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	2000      	movs	r0, #0
 80052e4:	f002 f836 	bl	8007354 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80052e8:	f001 fdeb 	bl	8006ec2 <SUBGRF_GetRandom>
 80052ec:	6078      	str	r0, [r7, #4]

    return rnd;
 80052ee:	687b      	ldr	r3, [r7, #4]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	4613      	mov	r3, r2
 800530a:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800530c:	4abd      	ldr	r2, [pc, #756]	; (8005604 <RadioSetRxConfig+0x30c>)
 800530e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005312:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005314:	f002 fde5 	bl	8007ee2 <RFW_DeInit>
    if( rxContinuous == true )
 8005318:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005324:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800532c:	4ab6      	ldr	r2, [pc, #728]	; (8005608 <RadioSetRxConfig+0x310>)
 800532e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005332:	7013      	strb	r3, [r2, #0]
 8005334:	e002      	b.n	800533c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005336:	4bb4      	ldr	r3, [pc, #720]	; (8005608 <RadioSetRxConfig+0x310>)
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d009      	beq.n	8005356 <RadioSetRxConfig+0x5e>
 8005342:	2b04      	cmp	r3, #4
 8005344:	f300 81da 	bgt.w	80056fc <RadioSetRxConfig+0x404>
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80bf 	beq.w	80054cc <RadioSetRxConfig+0x1d4>
 800534e:	2b01      	cmp	r3, #1
 8005350:	f000 812c 	beq.w	80055ac <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005354:	e1d2      	b.n	80056fc <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005356:	2001      	movs	r0, #1
 8005358:	f001 fef8 	bl	800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800535c:	4ba9      	ldr	r3, [pc, #676]	; (8005604 <RadioSetRxConfig+0x30c>)
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005364:	4aa7      	ldr	r2, [pc, #668]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800536a:	4ba6      	ldr	r3, [pc, #664]	; (8005604 <RadioSetRxConfig+0x30c>)
 800536c:	2209      	movs	r2, #9
 800536e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005372:	4ba4      	ldr	r3, [pc, #656]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005374:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800537a:	68b8      	ldr	r0, [r7, #8]
 800537c:	f002 fce2 	bl	8007d44 <SUBGRF_GetFskBandwidthRegValue>
 8005380:	4603      	mov	r3, r0
 8005382:	461a      	mov	r2, r3
 8005384:	4b9f      	ldr	r3, [pc, #636]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800538a:	4b9e      	ldr	r3, [pc, #632]	; (8005604 <RadioSetRxConfig+0x30c>)
 800538c:	2200      	movs	r2, #0
 800538e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005390:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	b29a      	uxth	r2, r3
 8005396:	4b9b      	ldr	r3, [pc, #620]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005398:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800539a:	4b9a      	ldr	r3, [pc, #616]	; (8005604 <RadioSetRxConfig+0x30c>)
 800539c:	2200      	movs	r2, #0
 800539e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80053a0:	4b98      	ldr	r3, [pc, #608]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053a2:	2210      	movs	r2, #16
 80053a4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80053a6:	4b97      	ldr	r3, [pc, #604]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80053ac:	4b95      	ldr	r3, [pc, #596]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80053b2:	4b95      	ldr	r3, [pc, #596]	; (8005608 <RadioSetRxConfig+0x310>)
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	4b93      	ldr	r3, [pc, #588]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053b8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80053ba:	4b92      	ldr	r3, [pc, #584]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053bc:	2201      	movs	r2, #1
 80053be:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80053c0:	4b90      	ldr	r3, [pc, #576]	; (8005604 <RadioSetRxConfig+0x30c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80053c6:	2004      	movs	r0, #4
 80053c8:	f7ff fee2 	bl	8005190 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80053cc:	488f      	ldr	r0, [pc, #572]	; (800560c <RadioSetRxConfig+0x314>)
 80053ce:	f002 f8eb 	bl	80075a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80053d2:	488f      	ldr	r0, [pc, #572]	; (8005610 <RadioSetRxConfig+0x318>)
 80053d4:	f002 f9b4 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80053d8:	4a8e      	ldr	r2, [pc, #568]	; (8005614 <RadioSetRxConfig+0x31c>)
 80053da:	f107 031c 	add.w	r3, r7, #28
 80053de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fce7 	bl	8006dbe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80053f0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053f4:	f001 fd32 	bl	8006e5c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80053f8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80053fc:	f000 fdde 	bl	8005fbc <RadioRead>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8005406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8005412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005416:	4619      	mov	r1, r3
 8005418:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800541c:	f000 fdbc 	bl	8005f98 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8005420:	2104      	movs	r1, #4
 8005422:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005426:	f000 fdb7 	bl	8005f98 <RadioWrite>
            modReg= RadioRead(0x89b);
 800542a:	f640 009b 	movw	r0, #2203	; 0x89b
 800542e:	f000 fdc5 	bl	8005fbc <RadioRead>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800543c:	f023 031c 	bic.w	r3, r3, #28
 8005440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005448:	f043 0308 	orr.w	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4619      	mov	r1, r3
 8005450:	f640 009b 	movw	r0, #2203	; 0x89b
 8005454:	f000 fda0 	bl	8005f98 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005458:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800545c:	f000 fdae 	bl	8005fbc <RadioRead>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800546a:	f023 0318 	bic.w	r3, r3, #24
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8005472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005476:	f043 0318 	orr.w	r3, r3, #24
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005482:	f000 fd89 	bl	8005f98 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005486:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800548a:	f000 fd97 	bl	8005fbc <RadioRead>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	4619      	mov	r1, r3
 80054ac:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80054b0:	f000 fd72 	bl	8005f98 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80054b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054c8:	6093      	str	r3, [r2, #8]
            break;
 80054ca:	e118      	b.n	80056fe <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80054cc:	2000      	movs	r0, #0
 80054ce:	f001 fe3d 	bl	800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80054d2:	4b4c      	ldr	r3, [pc, #304]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80054da:	4a4a      	ldr	r2, [pc, #296]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80054e0:	4b48      	ldr	r3, [pc, #288]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054e2:	220b      	movs	r2, #11
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80054e8:	68b8      	ldr	r0, [r7, #8]
 80054ea:	f002 fc2b 	bl	8007d44 <SUBGRF_GetFskBandwidthRegValue>
 80054ee:	4603      	mov	r3, r0
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b44      	ldr	r3, [pc, #272]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80054f8:	4b42      	ldr	r3, [pc, #264]	; (8005604 <RadioSetRxConfig+0x30c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80054fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	b29a      	uxth	r2, r3
 8005504:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005506:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005508:	4b3e      	ldr	r3, [pc, #248]	; (8005604 <RadioSetRxConfig+0x30c>)
 800550a:	2204      	movs	r2, #4
 800550c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800550e:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005510:	2218      	movs	r2, #24
 8005512:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005514:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005516:	2200      	movs	r2, #0
 8005518:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800551a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800551e:	f083 0301 	eor.w	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005528:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800552a:	4b37      	ldr	r3, [pc, #220]	; (8005608 <RadioSetRxConfig+0x310>)
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005530:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8005532:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800553a:	4b32      	ldr	r3, [pc, #200]	; (8005604 <RadioSetRxConfig+0x30c>)
 800553c:	22f2      	movs	r2, #242	; 0xf2
 800553e:	75da      	strb	r2, [r3, #23]
 8005540:	e002      	b.n	8005548 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005542:	4b30      	ldr	r3, [pc, #192]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005544:	2201      	movs	r2, #1
 8005546:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005548:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <RadioSetRxConfig+0x30c>)
 800554a:	2201      	movs	r2, #1
 800554c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800554e:	f000 fc5e 	bl	8005e0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005552:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <RadioSetRxConfig+0x30c>)
 8005554:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fe14 	bl	8005190 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005568:	4828      	ldr	r0, [pc, #160]	; (800560c <RadioSetRxConfig+0x314>)
 800556a:	f002 f81d 	bl	80075a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800556e:	4828      	ldr	r0, [pc, #160]	; (8005610 <RadioSetRxConfig+0x318>)
 8005570:	f002 f8e6 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <RadioSetRxConfig+0x320>)
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800557e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005582:	f107 0314 	add.w	r3, r7, #20
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fc19 	bl	8006dbe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800558c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005590:	f001 fc64 	bl	8006e5c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005594:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005596:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055a8:	6093      	str	r3, [r2, #8]
            break;
 80055aa:	e0a8      	b.n	80056fe <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80055ac:	2000      	movs	r0, #0
 80055ae:	f001 fdcd 	bl	800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <RadioSetRxConfig+0x324>)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <RadioSetRxConfig+0x2f4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b0b      	cmp	r3, #11
 80055e4:	d008      	beq.n	80055f8 <RadioSetRxConfig+0x300>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d005      	beq.n	80055f8 <RadioSetRxConfig+0x300>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d116      	bne.n	8005620 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d113      	bne.n	8005620 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <RadioSetRxConfig+0x30c>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005600:	e012      	b.n	8005628 <RadioSetRxConfig+0x330>
 8005602:	bf00      	nop
 8005604:	20000594 	.word	0x20000594
 8005608:	20000009 	.word	0x20000009
 800560c:	200005cc 	.word	0x200005cc
 8005610:	200005a2 	.word	0x200005a2
 8005614:	0800d68c 	.word	0x0800d68c
 8005618:	0800d694 	.word	0x0800d694
 800561c:	0800da9c 	.word	0x0800da9c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <RadioSetRxConfig+0x410>)
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <RadioSetRxConfig+0x410>)
 800562a:	2201      	movs	r2, #1
 800562c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800562e:	4b36      	ldr	r3, [pc, #216]	; (8005708 <RadioSetRxConfig+0x410>)
 8005630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005634:	2b05      	cmp	r3, #5
 8005636:	d004      	beq.n	8005642 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005638:	4b33      	ldr	r3, [pc, #204]	; (8005708 <RadioSetRxConfig+0x410>)
 800563a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800563e:	2b06      	cmp	r3, #6
 8005640:	d10a      	bne.n	8005658 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005642:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005644:	2b0b      	cmp	r3, #11
 8005646:	d803      	bhi.n	8005650 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005648:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <RadioSetRxConfig+0x410>)
 800564a:	220c      	movs	r2, #12
 800564c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800564e:	e006      	b.n	800565e <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005650:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <RadioSetRxConfig+0x410>)
 8005652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005654:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005656:	e002      	b.n	800565e <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005658:	4a2b      	ldr	r2, [pc, #172]	; (8005708 <RadioSetRxConfig+0x410>)
 800565a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800565c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800565e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005662:	4b29      	ldr	r3, [pc, #164]	; (8005708 <RadioSetRxConfig+0x410>)
 8005664:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <RadioSetRxConfig+0x414>)
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <RadioSetRxConfig+0x410>)
 800566c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800566e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <RadioSetRxConfig+0x410>)
 8005674:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005678:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800567c:	4b22      	ldr	r3, [pc, #136]	; (8005708 <RadioSetRxConfig+0x410>)
 800567e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005682:	f000 fbc4 	bl	8005e0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005686:	4b20      	ldr	r3, [pc, #128]	; (8005708 <RadioSetRxConfig+0x410>)
 8005688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fd7a 	bl	8005190 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800569c:	481c      	ldr	r0, [pc, #112]	; (8005710 <RadioSetRxConfig+0x418>)
 800569e:	f001 ff83 	bl	80075a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056a2:	481c      	ldr	r0, [pc, #112]	; (8005714 <RadioSetRxConfig+0x41c>)
 80056a4:	f002 f84c 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80056a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 fd5c 	bl	800716a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <RadioSetRxConfig+0x410>)
 80056b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10d      	bne.n	80056d8 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80056bc:	f240 7036 	movw	r0, #1846	; 0x736
 80056c0:	f002 f99a 	bl	80079f8 <SUBGRF_ReadRegister>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	f240 7036 	movw	r0, #1846	; 0x736
 80056d2:	f002 f97d 	bl	80079d0 <SUBGRF_WriteRegister>
 80056d6:	e00c      	b.n	80056f2 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80056d8:	f240 7036 	movw	r0, #1846	; 0x736
 80056dc:	f002 f98c 	bl	80079f8 <SUBGRF_ReadRegister>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	4619      	mov	r1, r3
 80056ea:	f240 7036 	movw	r0, #1846	; 0x736
 80056ee:	f002 f96f 	bl	80079d0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <RadioSetRxConfig+0x410>)
 80056f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f8:	609a      	str	r2, [r3, #8]
            break;
 80056fa:	e000      	b.n	80056fe <RadioSetRxConfig+0x406>
            break;
 80056fc:	bf00      	nop
    }
}
 80056fe:	bf00      	nop
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000594 	.word	0x20000594
 800570c:	20000009 	.word	0x20000009
 8005710:	200005cc 	.word	0x200005cc
 8005714:	200005a2 	.word	0x200005a2

08005718 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60ba      	str	r2, [r7, #8]
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	460b      	mov	r3, r1
 8005728:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800572a:	f002 fbda 	bl	8007ee2 <RFW_DeInit>
    switch( modem )
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b03      	cmp	r3, #3
 8005732:	f000 80d7 	beq.w	80058e4 <RadioSetTxConfig+0x1cc>
 8005736:	2b03      	cmp	r3, #3
 8005738:	f300 80e6 	bgt.w	8005908 <RadioSetTxConfig+0x1f0>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <RadioSetTxConfig+0x2e>
 8005740:	2b01      	cmp	r3, #1
 8005742:	d061      	beq.n	8005808 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005744:	e0e0      	b.n	8005908 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005746:	4b7c      	ldr	r3, [pc, #496]	; (8005938 <RadioSetTxConfig+0x220>)
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800574e:	4a7a      	ldr	r2, [pc, #488]	; (8005938 <RadioSetTxConfig+0x220>)
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005754:	4b78      	ldr	r3, [pc, #480]	; (8005938 <RadioSetTxConfig+0x220>)
 8005756:	220b      	movs	r2, #11
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 faf1 	bl	8007d44 <SUBGRF_GetFskBandwidthRegValue>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	4b74      	ldr	r3, [pc, #464]	; (8005938 <RadioSetTxConfig+0x220>)
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800576c:	4a72      	ldr	r2, [pc, #456]	; (8005938 <RadioSetTxConfig+0x220>)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005772:	4b71      	ldr	r3, [pc, #452]	; (8005938 <RadioSetTxConfig+0x220>)
 8005774:	2200      	movs	r2, #0
 8005776:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	b29a      	uxth	r2, r3
 800577e:	4b6e      	ldr	r3, [pc, #440]	; (8005938 <RadioSetTxConfig+0x220>)
 8005780:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005782:	4b6d      	ldr	r3, [pc, #436]	; (8005938 <RadioSetTxConfig+0x220>)
 8005784:	2204      	movs	r2, #4
 8005786:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005788:	4b6b      	ldr	r3, [pc, #428]	; (8005938 <RadioSetTxConfig+0x220>)
 800578a:	2218      	movs	r2, #24
 800578c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800578e:	4b6a      	ldr	r3, [pc, #424]	; (8005938 <RadioSetTxConfig+0x220>)
 8005790:	2200      	movs	r2, #0
 8005792:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005794:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	4b65      	ldr	r3, [pc, #404]	; (8005938 <RadioSetTxConfig+0x220>)
 80057a2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80057a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80057ac:	4b62      	ldr	r3, [pc, #392]	; (8005938 <RadioSetTxConfig+0x220>)
 80057ae:	22f2      	movs	r2, #242	; 0xf2
 80057b0:	75da      	strb	r2, [r3, #23]
 80057b2:	e002      	b.n	80057ba <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80057b4:	4b60      	ldr	r3, [pc, #384]	; (8005938 <RadioSetTxConfig+0x220>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80057ba:	4b5f      	ldr	r3, [pc, #380]	; (8005938 <RadioSetTxConfig+0x220>)
 80057bc:	2201      	movs	r2, #1
 80057be:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80057c0:	f000 fb25 	bl	8005e0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80057c4:	4b5c      	ldr	r3, [pc, #368]	; (8005938 <RadioSetTxConfig+0x220>)
 80057c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fcdb 	bl	8005190 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057da:	4858      	ldr	r0, [pc, #352]	; (800593c <RadioSetTxConfig+0x224>)
 80057dc:	f001 fee4 	bl	80075a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057e0:	4857      	ldr	r0, [pc, #348]	; (8005940 <RadioSetTxConfig+0x228>)
 80057e2:	f001 ffad 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80057e6:	4a57      	ldr	r2, [pc, #348]	; (8005944 <RadioSetTxConfig+0x22c>)
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80057f4:	f107 0310 	add.w	r3, r7, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fae0 	bl	8006dbe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80057fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005802:	f001 fb2b 	bl	8006e5c <SUBGRF_SetWhiteningSeed>
            break;
 8005806:	e080      	b.n	800590a <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005808:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <RadioSetTxConfig+0x220>)
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	4b48      	ldr	r3, [pc, #288]	; (8005938 <RadioSetTxConfig+0x220>)
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800581a:	4a4b      	ldr	r2, [pc, #300]	; (8005948 <RadioSetTxConfig+0x230>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	781a      	ldrb	r2, [r3, #0]
 8005822:	4b45      	ldr	r3, [pc, #276]	; (8005938 <RadioSetTxConfig+0x220>)
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005828:	4a43      	ldr	r2, [pc, #268]	; (8005938 <RadioSetTxConfig+0x220>)
 800582a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800582e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <RadioSetTxConfig+0x12c>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2b0b      	cmp	r3, #11
 800583c:	d008      	beq.n	8005850 <RadioSetTxConfig+0x138>
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d005      	beq.n	8005850 <RadioSetTxConfig+0x138>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d104      	bne.n	800585a <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <RadioSetTxConfig+0x220>)
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005858:	e003      	b.n	8005862 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <RadioSetTxConfig+0x220>)
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <RadioSetTxConfig+0x220>)
 8005864:	2201      	movs	r2, #1
 8005866:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005868:	4b33      	ldr	r3, [pc, #204]	; (8005938 <RadioSetTxConfig+0x220>)
 800586a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586e:	2b05      	cmp	r3, #5
 8005870:	d004      	beq.n	800587c <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <RadioSetTxConfig+0x220>)
 8005874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005878:	2b06      	cmp	r3, #6
 800587a:	d10a      	bne.n	8005892 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800587c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800587e:	2b0b      	cmp	r3, #11
 8005880:	d803      	bhi.n	800588a <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005882:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <RadioSetTxConfig+0x220>)
 8005884:	220c      	movs	r2, #12
 8005886:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005888:	e006      	b.n	8005898 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800588a:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <RadioSetTxConfig+0x220>)
 800588c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800588e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005890:	e002      	b.n	8005898 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005892:	4a29      	ldr	r2, [pc, #164]	; (8005938 <RadioSetTxConfig+0x220>)
 8005894:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005896:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005898:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800589c:	4b26      	ldr	r3, [pc, #152]	; (8005938 <RadioSetTxConfig+0x220>)
 800589e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80058a0:	4b2a      	ldr	r3, [pc, #168]	; (800594c <RadioSetTxConfig+0x234>)
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <RadioSetTxConfig+0x220>)
 80058a6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80058a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <RadioSetTxConfig+0x220>)
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80058b2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80058b6:	4b20      	ldr	r3, [pc, #128]	; (8005938 <RadioSetTxConfig+0x220>)
 80058b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80058bc:	f000 faa7 	bl	8005e0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <RadioSetTxConfig+0x220>)
 80058c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fc5d 	bl	8005190 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <RadioSetTxConfig+0x224>)
 80058d8:	f001 fe66 	bl	80075a8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80058dc:	4818      	ldr	r0, [pc, #96]	; (8005940 <RadioSetTxConfig+0x228>)
 80058de:	f001 ff2f 	bl	8007740 <SUBGRF_SetPacketParams>
            break;
 80058e2:	e012      	b.n	800590a <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80058e4:	2003      	movs	r0, #3
 80058e6:	f7ff fc53 	bl	8005190 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <RadioSetTxConfig+0x220>)
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <RadioSetTxConfig+0x220>)
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <RadioSetTxConfig+0x220>)
 80058fa:	2216      	movs	r2, #22
 80058fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005900:	480e      	ldr	r0, [pc, #56]	; (800593c <RadioSetTxConfig+0x224>)
 8005902:	f001 fe51 	bl	80075a8 <SUBGRF_SetModulationParams>
            break;
 8005906:	e000      	b.n	800590a <RadioSetTxConfig+0x1f2>
            break;
 8005908:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800590a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800590e:	4618      	mov	r0, r3
 8005910:	f002 f92a 	bl	8007b68 <SUBGRF_SetRfTxPower>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <RadioSetTxConfig+0x220>)
 800591a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <RadioSetTxConfig+0x220>)
 8005920:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005924:	4618      	mov	r0, r3
 8005926:	f002 faf0 	bl	8007f0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800592a:	4a03      	ldr	r2, [pc, #12]	; (8005938 <RadioSetTxConfig+0x220>)
 800592c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592e:	6053      	str	r3, [r2, #4]
}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000594 	.word	0x20000594
 800593c:	200005cc 	.word	0x200005cc
 8005940:	200005a2 	.word	0x200005a2
 8005944:	0800d694 	.word	0x0800d694
 8005948:	0800da9c 	.word	0x0800da9c
 800594c:	20000009 	.word	0x20000009

08005950 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
    return true;
 8005958:	2301      	movs	r3, #1
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b0a      	cmp	r3, #10
 8005976:	d83e      	bhi.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <RadioGetLoRaBandwidthInHz+0x1c>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059bd 	.word	0x080059bd
 8005988:	080059cd 	.word	0x080059cd
 800598c:	080059dd 	.word	0x080059dd
 8005990:	080059e5 	.word	0x080059e5
 8005994:	080059eb 	.word	0x080059eb
 8005998:	080059f1 	.word	0x080059f1
 800599c:	080059f7 	.word	0x080059f7
 80059a0:	080059b5 	.word	0x080059b5
 80059a4:	080059c5 	.word	0x080059c5
 80059a8:	080059d5 	.word	0x080059d5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80059ac:	f641 6384 	movw	r3, #7812	; 0x1e84
 80059b0:	60fb      	str	r3, [r7, #12]
        break;
 80059b2:	e020      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80059b4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80059b8:	60fb      	str	r3, [r7, #12]
        break;
 80059ba:	e01c      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80059bc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80059c0:	60fb      	str	r3, [r7, #12]
        break;
 80059c2:	e018      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80059c4:	f245 1361 	movw	r3, #20833	; 0x5161
 80059c8:	60fb      	str	r3, [r7, #12]
        break;
 80059ca:	e014      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80059cc:	f647 2312 	movw	r3, #31250	; 0x7a12
 80059d0:	60fb      	str	r3, [r7, #12]
        break;
 80059d2:	e010      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80059d4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80059d8:	60fb      	str	r3, [r7, #12]
        break;
 80059da:	e00c      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80059dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80059e0:	60fb      	str	r3, [r7, #12]
        break;
 80059e2:	e008      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <RadioGetLoRaBandwidthInHz+0xa0>)
 80059e6:	60fb      	str	r3, [r7, #12]
        break;
 80059e8:	e005      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <RadioGetLoRaBandwidthInHz+0xa4>)
 80059ec:	60fb      	str	r3, [r7, #12]
        break;
 80059ee:	e002      	b.n	80059f6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <RadioGetLoRaBandwidthInHz+0xa8>)
 80059f2:	60fb      	str	r3, [r7, #12]
        break;
 80059f4:	bf00      	nop
    }

    return bandwidthInHz;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	0001e848 	.word	0x0001e848
 8005a08:	0003d090 	.word	0x0003d090
 8005a0c:	0007a120 	.word	0x0007a120

08005a10 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	4608      	mov	r0, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	70fb      	strb	r3, [r7, #3]
 8005a22:	460b      	mov	r3, r1
 8005a24:	803b      	strh	r3, [r7, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8005a2a:	883b      	ldrh	r3, [r7, #0]
 8005a2c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a2e:	78ba      	ldrb	r2, [r7, #2]
 8005a30:	f082 0201 	eor.w	r2, r2, #1
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d001      	beq.n	8005a3e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	e000      	b.n	8005a40 <RadioGetGfskTimeOnAirNumerator+0x30>
 8005a3e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005a40:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a42:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005a46:	7c3b      	ldrb	r3, [r7, #16]
 8005a48:	7d39      	ldrb	r1, [r7, #20]
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	d001      	beq.n	8005a52 <RadioGetGfskTimeOnAirNumerator+0x42>
 8005a4e:	2102      	movs	r1, #2
 8005a50:	e000      	b.n	8005a54 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005a52:	2100      	movs	r1, #0
 8005a54:	440b      	add	r3, r1
 8005a56:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a58:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b08b      	sub	sp, #44	; 0x2c
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	460b      	mov	r3, r1
 8005a74:	71fb      	strb	r3, [r7, #7]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b05      	cmp	r3, #5
 8005a8a:	d002      	beq.n	8005a92 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b06      	cmp	r3, #6
 8005a90:	d104      	bne.n	8005a9c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005a92:	88bb      	ldrh	r3, [r7, #4]
 8005a94:	2b0b      	cmp	r3, #11
 8005a96:	d801      	bhi.n	8005a9c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005a98:	230c      	movs	r3, #12
 8005a9a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b0b      	cmp	r3, #11
 8005aa6:	d008      	beq.n	8005aba <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d005      	beq.n	8005aba <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d102      	bne.n	8005ac0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005ac4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005ac6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d001      	beq.n	8005ad2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005ace:	2210      	movs	r2, #16
 8005ad0:	e000      	b.n	8005ad4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005ad2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005ad4:	4413      	add	r3, r2
 8005ad6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005adc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005ade:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d001      	beq.n	8005aea <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	e000      	b.n	8005aec <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005aea:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005aec:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005aee:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d803      	bhi.n	8005afe <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e00e      	b.n	8005b1c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3308      	adds	r3, #8
 8005b02:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3b02      	subs	r3, #2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	e002      	b.n	8005b1c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da01      	bge.n	8005b26 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	1e5a      	subs	r2, r3, #1
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	fb02 f203 	mul.w	r2, r2, r3
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	4413      	add	r3, r2
    int32_t intermediate =
 8005b3e:	330c      	adds	r3, #12
 8005b40:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d802      	bhi.n	8005b4e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3b02      	subs	r3, #2
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	372c      	adds	r7, #44	; 0x2c
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
	...

08005b68 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <RadioTimeOnAir+0x28>
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d017      	beq.n	8005bbe <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005b8e:	e035      	b.n	8005bfc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005b90:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005b94:	8c3a      	ldrh	r2, [r7, #32]
 8005b96:	7bb9      	ldrb	r1, [r7, #14]
 8005b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff32 	bl	8005a10 <RadioGetGfskTimeOnAirNumerator>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	613b      	str	r3, [r7, #16]
        break;
 8005bbc:	e01e      	b.n	8005bfc <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005bbe:	8c39      	ldrh	r1, [r7, #32]
 8005bc0:	7bba      	ldrb	r2, [r7, #14]
 8005bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bc6:	9302      	str	r3, [sp, #8]
 8005bc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f7ff ff43 	bl	8005a64 <RadioGetLoRaTimeOnAirNumerator>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <RadioTimeOnAir+0xac>)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff feb6 	bl	8005964 <RadioGetLoRaBandwidthInHz>
 8005bf8:	6138      	str	r0, [r7, #16]
        break;
 8005bfa:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	1e5a      	subs	r2, r3, #1
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	0800da9c 	.word	0x0800da9c

08005c18 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	f240 2101 	movw	r1, #513	; 0x201
 8005c2c:	f240 2001 	movw	r0, #513	; 0x201
 8005c30:	f001 fb90 	bl	8007354 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005c34:	4b69      	ldr	r3, [pc, #420]	; (8005ddc <RadioSend+0x1c4>)
 8005c36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 ff6b 	bl	8007b18 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005c42:	4b66      	ldr	r3, [pc, #408]	; (8005ddc <RadioSend+0x1c4>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d112      	bne.n	8005c70 <RadioSend+0x58>
 8005c4a:	4b64      	ldr	r3, [pc, #400]	; (8005ddc <RadioSend+0x1c4>)
 8005c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d10d      	bne.n	8005c70 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005c54:	f640 0089 	movw	r0, #2185	; 0x889
 8005c58:	f001 fece 	bl	80079f8 <SUBGRF_ReadRegister>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f023 0304 	bic.w	r3, r3, #4
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	f640 0089 	movw	r0, #2185	; 0x889
 8005c6a:	f001 feb1 	bl	80079d0 <SUBGRF_WriteRegister>
 8005c6e:	e00c      	b.n	8005c8a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005c70:	f640 0089 	movw	r0, #2185	; 0x889
 8005c74:	f001 fec0 	bl	80079f8 <SUBGRF_ReadRegister>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	4619      	mov	r1, r3
 8005c82:	f640 0089 	movw	r0, #2185	; 0x889
 8005c86:	f001 fea3 	bl	80079d0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8005c8a:	4b54      	ldr	r3, [pc, #336]	; (8005ddc <RadioSend+0x1c4>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	f200 809e 	bhi.w	8005dd0 <RadioSend+0x1b8>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <RadioSend+0x84>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cad 	.word	0x08005cad
 8005ca4:	08005d19 	.word	0x08005d19
 8005ca8:	08005d39 	.word	0x08005d39
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005cac:	4a4b      	ldr	r2, [pc, #300]	; (8005ddc <RadioSend+0x1c4>)
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cb2:	484b      	ldr	r0, [pc, #300]	; (8005de0 <RadioSend+0x1c8>)
 8005cb4:	f001 fd44 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 f86a 	bl	8006d98 <SUBGRF_SendPayload>
            break;
 8005cc4:	e087      	b.n	8005dd6 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005cc6:	f002 f912 	bl	8007eee <RFW_Is_Init>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d116      	bne.n	8005cfe <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005cd0:	f107 020d 	add.w	r2, r7, #13
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f002 f920 	bl	8007f1e <RFW_TransmitInit>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d177      	bne.n	8005dd4 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005ce4:	7b7a      	ldrb	r2, [r7, #13]
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <RadioSend+0x1c4>)
 8005ce8:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cea:	483d      	ldr	r0, [pc, #244]	; (8005de0 <RadioSend+0x1c8>)
 8005cec:	f001 fd28 	bl	8007740 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005cf0:	7b7b      	ldrb	r3, [r7, #13]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 f84e 	bl	8006d98 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005cfc:	e06b      	b.n	8005dd6 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005cfe:	4a37      	ldr	r2, [pc, #220]	; (8005ddc <RadioSend+0x1c4>)
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d04:	4836      	ldr	r0, [pc, #216]	; (8005de0 <RadioSend+0x1c8>)
 8005d06:	f001 fd1b 	bl	8007740 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f841 	bl	8006d98 <SUBGRF_SendPayload>
            break;
 8005d16:	e05e      	b.n	8005dd6 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d18:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <RadioSend+0x1c4>)
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005d1e:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <RadioSend+0x1c4>)
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d24:	482e      	ldr	r0, [pc, #184]	; (8005de0 <RadioSend+0x1c8>)
 8005d26:	f001 fd0b 	bl	8007740 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f831 	bl	8006d98 <SUBGRF_SendPayload>
            break;
 8005d36:	e04e      	b.n	8005dd6 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4829      	ldr	r0, [pc, #164]	; (8005de4 <RadioSend+0x1cc>)
 8005d40:	f000 fbb1 	bl	80064a6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <RadioSend+0x1c4>)
 8005d46:	2202      	movs	r2, #2
 8005d48:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <RadioSend+0x1c4>)
 8005d52:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d54:	4822      	ldr	r0, [pc, #136]	; (8005de0 <RadioSend+0x1c8>)
 8005d56:	f001 fcf3 	bl	8007740 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	20f1      	movs	r0, #241	; 0xf1
 8005d5e:	f000 f91b 	bl	8005f98 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005d62:	2100      	movs	r1, #0
 8005d64:	20f0      	movs	r0, #240	; 0xf0
 8005d66:	f000 f917 	bl	8005f98 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d6a:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <RadioSend+0x1c4>)
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	2b64      	cmp	r3, #100	; 0x64
 8005d70:	d108      	bne.n	8005d84 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005d72:	2170      	movs	r1, #112	; 0x70
 8005d74:	20f3      	movs	r0, #243	; 0xf3
 8005d76:	f000 f90f 	bl	8005f98 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8005d7a:	211d      	movs	r1, #29
 8005d7c:	20f2      	movs	r0, #242	; 0xf2
 8005d7e:	f000 f90b 	bl	8005f98 <RadioWrite>
 8005d82:	e007      	b.n	8005d94 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8005d84:	21e1      	movs	r1, #225	; 0xe1
 8005d86:	20f3      	movs	r0, #243	; 0xf3
 8005d88:	f000 f906 	bl	8005f98 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	20f2      	movs	r0, #242	; 0xf2
 8005d90:	f000 f902 	bl	8005f98 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005da0:	89fb      	ldrh	r3, [r7, #14]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	20f4      	movs	r0, #244	; 0xf4
 8005dac:	f000 f8f4 	bl	8005f98 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8005db0:	89fb      	ldrh	r3, [r7, #14]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	20f5      	movs	r0, #245	; 0xf5
 8005db8:	f000 f8ee 	bl	8005f98 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4806      	ldr	r0, [pc, #24]	; (8005de4 <RadioSend+0x1cc>)
 8005dca:	f000 ffe5 	bl	8006d98 <SUBGRF_SendPayload>
            break;
 8005dce:	e002      	b.n	8005dd6 <RadioSend+0x1be>
        }
        default:
            break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <RadioSend+0x1be>
                return;
 8005dd4:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000594 	.word	0x20000594
 8005de0:	200005a2 	.word	0x200005a2
 8005de4:	20000340 	.word	0x20000340

08005de8 <RadioSleep>:

static void RadioSleep( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005dee:	2300      	movs	r3, #0
 8005df0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005df2:	793b      	ldrb	r3, [r7, #4]
 8005df4:	f043 0304 	orr.w	r3, r3, #4
 8005df8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005dfa:	7938      	ldrb	r0, [r7, #4]
 8005dfc:	f001 f8a8 	bl	8006f50 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005e00:	2002      	movs	r0, #2
 8005e02:	f7fb ffb5 	bl	8001d70 <HAL_Delay>
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <RadioStandby>:

static void RadioStandby( void )
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005e12:	2000      	movs	r0, #0
 8005e14:	f001 f8ce 	bl	8006fb4 <SUBGRF_SetStandby>
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005e24:	f002 f863 	bl	8007eee <RFW_Is_Init>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d102      	bne.n	8005e34 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005e2e:	f002 f886 	bl	8007f3e <RFW_ReceiveInit>
 8005e32:	e007      	b.n	8005e44 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e34:	2300      	movs	r3, #0
 8005e36:	2200      	movs	r2, #0
 8005e38:	f240 2162 	movw	r1, #610	; 0x262
 8005e3c:	f240 2062 	movw	r0, #610	; 0x262
 8005e40:	f001 fa88 	bl	8007354 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005e44:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <RadioRx+0x5c>)
 8005e46:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 fe63 	bl	8007b18 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <RadioRx+0x5c>)
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005e5a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005e5e:	f001 f8e5 	bl	800702c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005e62:	e005      	b.n	8005e70 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <RadioRx+0x5c>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 f8de 	bl	800702c <SUBGRF_SetRx>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000594 	.word	0x20000594

08005e7c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8005e84:	f002 f833 	bl	8007eee <RFW_Is_Init>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8005e8e:	f002 f856 	bl	8007f3e <RFW_ReceiveInit>
 8005e92:	e007      	b.n	8005ea4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e94:	2300      	movs	r3, #0
 8005e96:	2200      	movs	r2, #0
 8005e98:	f240 2162 	movw	r1, #610	; 0x262
 8005e9c:	f240 2062 	movw	r0, #610	; 0x262
 8005ea0:	f001 fa58 	bl	8007354 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <RadioRxBoosted+0x5c>)
 8005ea6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fe33 	bl	8007b18 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <RadioRxBoosted+0x5c>)
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005eba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005ebe:	f001 f8d5 	bl	800706c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005ec2:	e005      	b.n	8005ed0 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <RadioRxBoosted+0x5c>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	019b      	lsls	r3, r3, #6
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f8ce 	bl	800706c <SUBGRF_SetRxBoosted>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000594 	.word	0x20000594

08005edc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <RadioSetRxDutyCycle+0x28>)
 8005ee8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 fe12 	bl	8007b18 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f8dc 	bl	80070b4 <SUBGRF_SetRxDutyCycle>
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000594 	.word	0x20000594

08005f08 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <RadioStartCad+0x2c>)
 8005f0e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fdff 	bl	8007b18 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005f22:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005f26:	f001 fa15 	bl	8007354 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005f2a:	f001 f8ef 	bl	800710c <SUBGRF_SetCad>
}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000594 	.word	0x20000594

08005f38 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
 8005f44:	4613      	mov	r3, r2
 8005f46:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8005f48:	883b      	ldrh	r3, [r7, #0]
 8005f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fa59 	bl	800740c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fe02 	bl	8007b68 <SUBGRF_SetRfTxPower>
 8005f64:	4603      	mov	r3, r0
 8005f66:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fdd3 	bl	8007b18 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005f72:	f001 f8d9 	bl	8007128 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	4603      	mov	r3, r0
 8005f86:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005f88:	f001 fc8f 	bl	80078aa <SUBGRF_GetRssiInst>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	b21b      	sxth	r3, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	80fb      	strh	r3, [r7, #6]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8005fa8:	797a      	ldrb	r2, [r7, #5]
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fd0e 	bl	80079d0 <SUBGRF_WriteRegister>
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fd15 	bl	80079f8 <SUBGRF_ReadRegister>
 8005fce:	4603      	mov	r3, r0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	6039      	str	r1, [r7, #0]
 8005fe2:	80fb      	strh	r3, [r7, #6]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005fe8:	797b      	ldrb	r3, [r7, #5]
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	88fb      	ldrh	r3, [r7, #6]
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fd15 	bl	8007a20 <SUBGRF_WriteRegisters>
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	4603      	mov	r3, r0
 8006006:	6039      	str	r1, [r7, #0]
 8006008:	80fb      	strh	r3, [r7, #6]
 800600a:	4613      	mov	r3, r2
 800600c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800600e:	797b      	ldrb	r3, [r7, #5]
 8006010:	b29a      	uxth	r2, r3
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fd16 	bl	8007a48 <SUBGRF_ReadRegisters>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	460a      	mov	r2, r1
 800602e:	71fb      	strb	r3, [r7, #7]
 8006030:	4613      	mov	r3, r2
 8006032:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10a      	bne.n	8006050 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800603a:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <RadioSetMaxPayloadLength+0x50>)
 800603c:	79bb      	ldrb	r3, [r7, #6]
 800603e:	7013      	strb	r3, [r2, #0]
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <RadioSetMaxPayloadLength+0x50>)
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <RadioSetMaxPayloadLength+0x54>)
 8006046:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006048:	480c      	ldr	r0, [pc, #48]	; (800607c <RadioSetMaxPayloadLength+0x58>)
 800604a:	f001 fb79 	bl	8007740 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800604e:	e00d      	b.n	800606c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <RadioSetMaxPayloadLength+0x54>)
 8006052:	7d5b      	ldrb	r3, [r3, #21]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d109      	bne.n	800606c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006058:	4a06      	ldr	r2, [pc, #24]	; (8006074 <RadioSetMaxPayloadLength+0x50>)
 800605a:	79bb      	ldrb	r3, [r7, #6]
 800605c:	7013      	strb	r3, [r2, #0]
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <RadioSetMaxPayloadLength+0x50>)
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <RadioSetMaxPayloadLength+0x54>)
 8006064:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006066:	4805      	ldr	r0, [pc, #20]	; (800607c <RadioSetMaxPayloadLength+0x58>)
 8006068:	f001 fb6a 	bl	8007740 <SUBGRF_SetPacketParams>
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000009 	.word	0x20000009
 8006078:	20000594 	.word	0x20000594
 800607c:	200005a2 	.word	0x200005a2

08006080 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <RadioSetPublicNetwork+0x58>)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	7313      	strb	r3, [r2, #12]
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <RadioSetPublicNetwork+0x58>)
 8006092:	7b1a      	ldrb	r2, [r3, #12]
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <RadioSetPublicNetwork+0x58>)
 8006096:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006098:	2001      	movs	r0, #1
 800609a:	f7ff f879 	bl	8005190 <RadioSetModem>
    if( enable == true )
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80060a4:	2134      	movs	r1, #52	; 0x34
 80060a6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80060aa:	f001 fc91 	bl	80079d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80060ae:	2144      	movs	r1, #68	; 0x44
 80060b0:	f240 7041 	movw	r0, #1857	; 0x741
 80060b4:	f001 fc8c 	bl	80079d0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80060b8:	e009      	b.n	80060ce <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80060ba:	2114      	movs	r1, #20
 80060bc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80060c0:	f001 fc86 	bl	80079d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80060c4:	2124      	movs	r1, #36	; 0x24
 80060c6:	f240 7041 	movw	r0, #1857	; 0x741
 80060ca:	f001 fc81 	bl	80079d0 <SUBGRF_WriteRegister>
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000594 	.word	0x20000594

080060dc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80060e0:	f001 fd76 	bl	8007bd0 <SUBGRF_GetRadioWakeUpTime>
 80060e4:	4603      	mov	r3, r0
 80060e6:	3303      	adds	r3, #3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}

080060ec <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80060f6:	4a05      	ldr	r2, [pc, #20]	; (800610c <RadioOnDioIrq+0x20>)
 80060f8:	88fb      	ldrh	r3, [r7, #6]
 80060fa:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80060fe:	f000 f807 	bl	8006110 <RadioIrqProcess>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000594 	.word	0x20000594

08006110 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8006110:	b590      	push	{r4, r7, lr}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800611e:	4bab      	ldr	r3, [pc, #684]	; (80063cc <RadioIrqProcess+0x2bc>)
 8006120:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006128:	f000 8104 	beq.w	8006334 <RadioIrqProcess+0x224>
 800612c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006130:	f300 816e 	bgt.w	8006410 <RadioIrqProcess+0x300>
 8006134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006138:	f000 80ea 	beq.w	8006310 <RadioIrqProcess+0x200>
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	f300 8166 	bgt.w	8006410 <RadioIrqProcess+0x300>
 8006144:	2b80      	cmp	r3, #128	; 0x80
 8006146:	f000 80cf 	beq.w	80062e8 <RadioIrqProcess+0x1d8>
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	f300 8160 	bgt.w	8006410 <RadioIrqProcess+0x300>
 8006150:	2b20      	cmp	r3, #32
 8006152:	dc49      	bgt.n	80061e8 <RadioIrqProcess+0xd8>
 8006154:	2b00      	cmp	r3, #0
 8006156:	f340 815b 	ble.w	8006410 <RadioIrqProcess+0x300>
 800615a:	3b01      	subs	r3, #1
 800615c:	2b1f      	cmp	r3, #31
 800615e:	f200 8157 	bhi.w	8006410 <RadioIrqProcess+0x300>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <RadioIrqProcess+0x58>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061f1 	.word	0x080061f1
 800616c:	08006225 	.word	0x08006225
 8006170:	08006411 	.word	0x08006411
 8006174:	08006411 	.word	0x08006411
 8006178:	08006411 	.word	0x08006411
 800617c:	08006411 	.word	0x08006411
 8006180:	08006411 	.word	0x08006411
 8006184:	0800638d 	.word	0x0800638d
 8006188:	08006411 	.word	0x08006411
 800618c:	08006411 	.word	0x08006411
 8006190:	08006411 	.word	0x08006411
 8006194:	08006411 	.word	0x08006411
 8006198:	08006411 	.word	0x08006411
 800619c:	08006411 	.word	0x08006411
 80061a0:	08006411 	.word	0x08006411
 80061a4:	08006411 	.word	0x08006411
 80061a8:	08006411 	.word	0x08006411
 80061ac:	08006411 	.word	0x08006411
 80061b0:	08006411 	.word	0x08006411
 80061b4:	08006411 	.word	0x08006411
 80061b8:	08006411 	.word	0x08006411
 80061bc:	08006411 	.word	0x08006411
 80061c0:	08006411 	.word	0x08006411
 80061c4:	08006411 	.word	0x08006411
 80061c8:	08006411 	.word	0x08006411
 80061cc:	08006411 	.word	0x08006411
 80061d0:	08006411 	.word	0x08006411
 80061d4:	08006411 	.word	0x08006411
 80061d8:	08006411 	.word	0x08006411
 80061dc:	08006411 	.word	0x08006411
 80061e0:	08006411 	.word	0x08006411
 80061e4:	0800639d 	.word	0x0800639d
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	f000 80f9 	beq.w	80063e0 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80061ee:	e10f      	b.n	8006410 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 80061f0:	2000      	movs	r0, #0
 80061f2:	f000 fedf 	bl	8006fb4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80061f6:	f001 fe81 	bl	8007efc <RFW_Is_LongPacketModeEnabled>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8006200:	f001 fea5 	bl	8007f4e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006204:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8103 	beq.w	8006414 <RadioIrqProcess+0x304>
 800620e:	4b70      	ldr	r3, [pc, #448]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80fd 	beq.w	8006414 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 800621a:	4b6d      	ldr	r3, [pc, #436]	; (80063d0 <RadioIrqProcess+0x2c0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4798      	blx	r3
        break;
 8006222:	e0f7      	b.n	8006414 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8006224:	4b69      	ldr	r3, [pc, #420]	; (80063cc <RadioIrqProcess+0x2bc>)
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	f083 0301 	eor.w	r3, r3, #1
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d014      	beq.n	800625c <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 8006232:	2000      	movs	r0, #0
 8006234:	f000 febe 	bl	8006fb4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006238:	2100      	movs	r1, #0
 800623a:	f640 1002 	movw	r0, #2306	; 0x902
 800623e:	f001 fbc7 	bl	80079d0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8006242:	f640 1044 	movw	r0, #2372	; 0x944
 8006246:	f001 fbd7 	bl	80079f8 <SUBGRF_ReadRegister>
 800624a:	4603      	mov	r3, r0
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	f640 1044 	movw	r0, #2372	; 0x944
 8006258:	f001 fbba 	bl	80079d0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800625c:	1dfb      	adds	r3, r7, #7
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	4619      	mov	r1, r3
 8006262:	485c      	ldr	r0, [pc, #368]	; (80063d4 <RadioIrqProcess+0x2c4>)
 8006264:	f000 fd76 	bl	8006d54 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006268:	485b      	ldr	r0, [pc, #364]	; (80063d8 <RadioIrqProcess+0x2c8>)
 800626a:	f001 fb5f 	bl	800792c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800626e:	4b58      	ldr	r3, [pc, #352]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d036      	beq.n	80062e4 <RadioIrqProcess+0x1d4>
 8006276:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d031      	beq.n	80062e4 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 8006280:	4b52      	ldr	r3, [pc, #328]	; (80063cc <RadioIrqProcess+0x2bc>)
 8006282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10e      	bne.n	80062a8 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800628a:	4b51      	ldr	r3, [pc, #324]	; (80063d0 <RadioIrqProcess+0x2c0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689c      	ldr	r4, [r3, #8]
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	b299      	uxth	r1, r3
 8006294:	4b4d      	ldr	r3, [pc, #308]	; (80063cc <RadioIrqProcess+0x2bc>)
 8006296:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800629a:	b21a      	sxth	r2, r3
 800629c:	4b4b      	ldr	r3, [pc, #300]	; (80063cc <RadioIrqProcess+0x2bc>)
 800629e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80062a2:	484c      	ldr	r0, [pc, #304]	; (80063d4 <RadioIrqProcess+0x2c4>)
 80062a4:	47a0      	blx	r4
                break;
 80062a6:	e01e      	b.n	80062e6 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80062a8:	4b48      	ldr	r3, [pc, #288]	; (80063cc <RadioIrqProcess+0x2bc>)
 80062aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ac:	463a      	mov	r2, r7
 80062ae:	4611      	mov	r1, r2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fd6f 	bl	8007d94 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80062b6:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689c      	ldr	r4, [r3, #8]
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	b299      	uxth	r1, r3
 80062c0:	4b42      	ldr	r3, [pc, #264]	; (80063cc <RadioIrqProcess+0x2bc>)
 80062c2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80062c6:	b218      	sxth	r0, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80062ce:	4a43      	ldr	r2, [pc, #268]	; (80063dc <RadioIrqProcess+0x2cc>)
 80062d0:	fb82 c203 	smull	ip, r2, r2, r3
 80062d4:	1192      	asrs	r2, r2, #6
 80062d6:	17db      	asrs	r3, r3, #31
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	b25b      	sxtb	r3, r3
 80062dc:	4602      	mov	r2, r0
 80062de:	483d      	ldr	r0, [pc, #244]	; (80063d4 <RadioIrqProcess+0x2c4>)
 80062e0:	47a0      	blx	r4
                break;
 80062e2:	e000      	b.n	80062e6 <RadioIrqProcess+0x1d6>
        }
 80062e4:	bf00      	nop
        break;
 80062e6:	e0a2      	b.n	800642e <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 80062e8:	2000      	movs	r0, #0
 80062ea:	f000 fe63 	bl	8006fb4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80062ee:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8090 	beq.w	8006418 <RadioIrqProcess+0x308>
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 808a 	beq.w	8006418 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2000      	movs	r0, #0
 800630c:	4798      	blx	r3
        break;
 800630e:	e083      	b.n	8006418 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 8006310:	2000      	movs	r0, #0
 8006312:	f000 fe4f 	bl	8006fb4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d07e      	beq.n	800641c <RadioIrqProcess+0x30c>
 800631e:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d079      	beq.n	800641c <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006328:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <RadioIrqProcess+0x2c0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2001      	movs	r0, #1
 8006330:	4798      	blx	r3
        break;
 8006332:	e073      	b.n	800641c <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006334:	f000 fcf4 	bl	8006d20 <SUBGRF_GetOperatingMode>
 8006338:	4603      	mov	r3, r0
 800633a:	2b04      	cmp	r3, #4
 800633c:	d110      	bne.n	8006360 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 800633e:	2000      	movs	r0, #0
 8006340:	f000 fe38 	bl	8006fb4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006344:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d069      	beq.n	8006420 <RadioIrqProcess+0x310>
 800634c:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <RadioIrqProcess+0x2c0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d064      	beq.n	8006420 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006356:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4798      	blx	r3
        break;
 800635e:	e05f      	b.n	8006420 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006360:	f000 fcde 	bl	8006d20 <SUBGRF_GetOperatingMode>
 8006364:	4603      	mov	r3, r0
 8006366:	2b05      	cmp	r3, #5
 8006368:	d15a      	bne.n	8006420 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 800636a:	2000      	movs	r0, #0
 800636c:	f000 fe22 	bl	8006fb4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d053      	beq.n	8006420 <RadioIrqProcess+0x310>
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <RadioIrqProcess+0x2c0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04e      	beq.n	8006420 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <RadioIrqProcess+0x2c0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4798      	blx	r3
        break;
 800638a:	e049      	b.n	8006420 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 800638c:	f001 fdaf 	bl	8007eee <RFW_Is_Init>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d146      	bne.n	8006424 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006396:	f001 fde0 	bl	8007f5a <RFW_ReceivePayload>
        break;
 800639a:	e043      	b.n	8006424 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <RadioIrqProcess+0x2bc>)
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	f083 0301 	eor.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 80063aa:	2000      	movs	r0, #0
 80063ac:	f000 fe02 	bl	8006fb4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d037      	beq.n	8006428 <RadioIrqProcess+0x318>
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d032      	beq.n	8006428 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <RadioIrqProcess+0x2c0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4798      	blx	r3
        break;
 80063ca:	e02d      	b.n	8006428 <RadioIrqProcess+0x318>
 80063cc:	20000594 	.word	0x20000594
 80063d0:	20000440 	.word	0x20000440
 80063d4:	20000340 	.word	0x20000340
 80063d8:	200005b8 	.word	0x200005b8
 80063dc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <RadioIrqProcess+0x328>)
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 80063ee:	2000      	movs	r0, #0
 80063f0:	f000 fde0 	bl	8006fb4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <RadioIrqProcess+0x32c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <RadioIrqProcess+0x31c>
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <RadioIrqProcess+0x32c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d012      	beq.n	800642c <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <RadioIrqProcess+0x32c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	4798      	blx	r3
        break;
 800640e:	e00d      	b.n	800642c <RadioIrqProcess+0x31c>
        break;
 8006410:	bf00      	nop
 8006412:	e00c      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 8006414:	bf00      	nop
 8006416:	e00a      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 8006418:	bf00      	nop
 800641a:	e008      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 800641c:	bf00      	nop
 800641e:	e006      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 8006420:	bf00      	nop
 8006422:	e004      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 8006424:	bf00      	nop
 8006426:	e002      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <RadioIrqProcess+0x31e>
        break;
 800642c:	bf00      	nop
  }
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bd90      	pop	{r4, r7, pc}
 8006436:	bf00      	nop
 8006438:	20000594 	.word	0x20000594
 800643c:	20000440 	.word	0x20000440

08006440 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <RadioTxPrbs+0x2c>)
 8006446:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f001 fb63 	bl	8007b18 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <RadioTxPrbs+0x30>)
 8006454:	212d      	movs	r1, #45	; 0x2d
 8006456:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800645a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800645c:	f000 fe6d 	bl	800713a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8006460:	4804      	ldr	r0, [pc, #16]	; (8006474 <RadioTxPrbs+0x34>)
 8006462:	f000 fdc3 	bl	8006fec <SUBGRF_SetTx>
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000594 	.word	0x20000594
 8006470:	08005f99 	.word	0x08005f99
 8006474:	000fffff 	.word	0x000fffff

08006478 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	4618      	mov	r0, r3
 8006488:	f001 fb6e 	bl	8007b68 <SUBGRF_SetRfTxPower>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f001 fb3f 	bl	8007b18 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800649a:	f000 fe45 	bl	8007128 <SUBGRF_SetTxContinuousWave>
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80064a6:	b480      	push	{r7}
 80064a8:	b089      	sub	sp, #36	; 0x24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e011      	b.n	80064e6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	4413      	add	r3, r2
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	440b      	add	r3, r1
 80064d0:	43d2      	mvns	r2, r2
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	dbe9      	blt.n	80064c2 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	e049      	b.n	8006588 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	425a      	negs	r2, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	f002 0207 	and.w	r2, r2, #7
 8006500:	bf58      	it	pl
 8006502:	4253      	negpl	r3, r2
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f1c3 0307 	rsb	r3, r3, #7
 800650a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da00      	bge.n	8006514 <payload_integration+0x6e>
 8006512:	3307      	adds	r3, #7
 8006514:	10db      	asrs	r3, r3, #3
 8006516:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	3301      	adds	r3, #1
 800651c:	425a      	negs	r2, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	f002 0207 	and.w	r2, r2, #7
 8006526:	bf58      	it	pl
 8006528:	4253      	negpl	r3, r2
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f1c3 0307 	rsb	r3, r3, #7
 8006530:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	3301      	adds	r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	da00      	bge.n	800653c <payload_integration+0x96>
 800653a:	3307      	adds	r3, #7
 800653c:	10db      	asrs	r3, r3, #3
 800653e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8006540:	7dbb      	ldrb	r3, [r7, #22]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4413      	add	r3, r2
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	fa42 f303 	asr.w	r3, r2, r3
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006558:	7ffa      	ldrb	r2, [r7, #31]
 800655a:	7cfb      	ldrb	r3, [r7, #19]
 800655c:	4053      	eors	r3, r2
 800655e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8006560:	7d3b      	ldrb	r3, [r7, #20]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b25a      	sxtb	r2, r3
 800656a:	7ff9      	ldrb	r1, [r7, #31]
 800656c:	7d7b      	ldrb	r3, [r7, #21]
 800656e:	fa01 f303 	lsl.w	r3, r1, r3
 8006572:	b25b      	sxtb	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b259      	sxtb	r1, r3
 8006578:	7d3b      	ldrb	r3, [r7, #20]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	b2ca      	uxtb	r2, r1
 8006580:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3301      	adds	r3, #1
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	429a      	cmp	r2, r3
 8006590:	dbb0      	blt.n	80064f4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006592:	7ffb      	ldrb	r3, [r7, #31]
 8006594:	01db      	lsls	r3, r3, #7
 8006596:	b25a      	sxtb	r2, r3
 8006598:	7ffb      	ldrb	r3, [r7, #31]
 800659a:	019b      	lsls	r3, r3, #6
 800659c:	b25b      	sxtb	r3, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	7ffa      	ldrb	r2, [r7, #31]
 80065a4:	2a00      	cmp	r2, #0
 80065a6:	d101      	bne.n	80065ac <payload_integration+0x106>
 80065a8:	2220      	movs	r2, #32
 80065aa:	e000      	b.n	80065ae <payload_integration+0x108>
 80065ac:	2200      	movs	r2, #0
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b259      	sxtb	r1, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	b2ca      	uxtb	r2, r1
 80065ba:	701a      	strb	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	3724      	adds	r7, #36	; 0x24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
	...

080065c8 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80065dc:	2300      	movs	r3, #0
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80065e4:	f001 fc7d 	bl	8007ee2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4ba9      	ldr	r3, [pc, #676]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006600:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <RadioSetRxGenericConfig+0x48>
 8006608:	2b01      	cmp	r3, #1
 800660a:	f000 80e8 	beq.w	80067de <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800660e:	e1a0      	b.n	8006952 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <RadioSetRxGenericConfig+0x58>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006620:	f04f 33ff 	mov.w	r3, #4294967295
 8006624:	e196      	b.n	8006954 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	7d5b      	ldrb	r3, [r3, #21]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d902      	bls.n	8006634 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	e18f      	b.n	8006954 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	62bb      	str	r3, [r7, #40]	; 0x28
 8006638:	e00d      	b.n	8006656 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	4413      	add	r3, r2
 8006642:	7819      	ldrb	r1, [r3, #0]
 8006644:	f107 021c 	add.w	r2, r7, #28
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	4413      	add	r3, r2
 800664c:	460a      	mov	r2, r1
 800664e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	3301      	adds	r3, #1
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	7d5b      	ldrb	r3, [r3, #21]
 800665a:	461a      	mov	r2, r3
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	4293      	cmp	r3, r2
 8006660:	dbeb      	blt.n	800663a <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fd6b 	bl	800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006676:	4b8b      	ldr	r3, [pc, #556]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	4a88      	ldr	r2, [pc, #544]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006684:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	791a      	ldrb	r2, [r3, #4]
 800668a:	4b86      	ldr	r3, [pc, #536]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fb55 	bl	8007d44 <SUBGRF_GetFskBandwidthRegValue>
 800669a:	4603      	mov	r3, r0
 800669c:	461a      	mov	r2, r3
 800669e:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80066a4:	4b7f      	ldr	r3, [pc, #508]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	4b7b      	ldr	r3, [pc, #492]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066b6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	7d1a      	ldrb	r2, [r3, #20]
 80066bc:	4b79      	ldr	r3, [pc, #484]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	7d5b      	ldrb	r3, [r3, #21]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b76      	ldr	r3, [pc, #472]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066ca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80066d2:	4b74      	ldr	r3, [pc, #464]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066d4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4b6f      	ldr	r3, [pc, #444]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066e8:	759a      	strb	r2, [r3, #22]
 80066ea:	e00b      	b.n	8006704 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d103      	bne.n	80066fe <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80066f6:	4b6b      	ldr	r3, [pc, #428]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80066f8:	22ff      	movs	r2, #255	; 0xff
 80066fa:	759a      	strb	r2, [r3, #22]
 80066fc:	e002      	b.n	8006704 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80066fe:	4b69      	ldr	r3, [pc, #420]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006700:	22ff      	movs	r2, #255	; 0xff
 8006702:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800670a:	2b02      	cmp	r3, #2
 800670c:	d004      	beq.n	8006718 <RadioSetRxGenericConfig+0x150>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006714:	2b02      	cmp	r3, #2
 8006716:	d12d      	bne.n	8006774 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800671e:	2bf1      	cmp	r3, #241	; 0xf1
 8006720:	d00c      	beq.n	800673c <RadioSetRxGenericConfig+0x174>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006728:	2bf2      	cmp	r3, #242	; 0xf2
 800672a:	d007      	beq.n	800673c <RadioSetRxGenericConfig+0x174>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006732:	2b01      	cmp	r3, #1
 8006734:	d002      	beq.n	800673c <RadioSetRxGenericConfig+0x174>
            return -1;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	e10b      	b.n	8006954 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800673c:	2300      	movs	r3, #0
 800673e:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006744:	4b58      	ldr	r3, [pc, #352]	; (80068a8 <RadioSetRxGenericConfig+0x2e0>)
 8006746:	6819      	ldr	r1, [r3, #0]
 8006748:	f107 0310 	add.w	r3, r7, #16
 800674c:	4a57      	ldr	r2, [pc, #348]	; (80068ac <RadioSetRxGenericConfig+0x2e4>)
 800674e:	4618      	mov	r0, r3
 8006750:	f001 fbba 	bl	8007ec8 <RFW_Init>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <RadioSetRxGenericConfig+0x198>
            return -1;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	e0f9      	b.n	8006954 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006760:	4b50      	ldr	r3, [pc, #320]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006762:	2200      	movs	r2, #0
 8006764:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006766:	4b4f      	ldr	r3, [pc, #316]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006768:	2201      	movs	r2, #1
 800676a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800676c:	4b4d      	ldr	r3, [pc, #308]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800676e:	2200      	movs	r2, #0
 8006770:	755a      	strb	r2, [r3, #21]
        {
 8006772:	e00e      	b.n	8006792 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800677a:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800677c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006784:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006786:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800678e:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006790:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006792:	f7ff fb3c 	bl	8005e0e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006796:	2000      	movs	r0, #0
 8006798:	f7fe fcfa 	bl	8005190 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800679c:	4844      	ldr	r0, [pc, #272]	; (80068b0 <RadioSetRxGenericConfig+0x2e8>)
 800679e:	f000 ff03 	bl	80075a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80067a2:	4844      	ldr	r0, [pc, #272]	; (80068b4 <RadioSetRxGenericConfig+0x2ec>)
 80067a4:	f000 ffcc 	bl	8007740 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fb06 	bl	8006dbe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	8c1b      	ldrh	r3, [r3, #32]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fb50 	bl	8006e5c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb2b 	bl	8006e1c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80067cc:	fb02 f203 	mul.w	r2, r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a32      	ldr	r2, [pc, #200]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 80067da:	6093      	str	r3, [r2, #8]
        break;
 80067dc:	e0b9      	b.n	8006952 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <RadioSetRxGenericConfig+0x224>
            return -1;
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	e0b3      	b.n	8006954 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d104      	bne.n	8006800 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80067fe:	e002      	b.n	8006806 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006800:	23ff      	movs	r3, #255	; 0xff
 8006802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fc99 	bl	800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fca3 	bl	800716a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006824:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800683e:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800684a:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800684c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006856:	2b02      	cmp	r3, #2
 8006858:	d010      	beq.n	800687c <RadioSetRxGenericConfig+0x2b4>
 800685a:	2b02      	cmp	r3, #2
 800685c:	dc2c      	bgt.n	80068b8 <RadioSetRxGenericConfig+0x2f0>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <RadioSetRxGenericConfig+0x2a0>
 8006862:	2b01      	cmp	r3, #1
 8006864:	d005      	beq.n	8006872 <RadioSetRxGenericConfig+0x2aa>
            break;
 8006866:	e027      	b.n	80068b8 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006870:	e023      	b.n	80068ba <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006872:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800687a:	e01e      	b.n	80068ba <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006882:	2b0b      	cmp	r3, #11
 8006884:	d004      	beq.n	8006890 <RadioSetRxGenericConfig+0x2c8>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d104      	bne.n	800689a <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006890:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006898:	e00f      	b.n	80068ba <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800689a:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <RadioSetRxGenericConfig+0x2dc>)
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80068a2:	e00a      	b.n	80068ba <RadioSetRxGenericConfig+0x2f2>
 80068a4:	20000594 	.word	0x20000594
 80068a8:	20000440 	.word	0x20000440
 80068ac:	200005ed 	.word	0x200005ed
 80068b0:	200005cc 	.word	0x200005cc
 80068b4:	200005a2 	.word	0x200005a2
            break;
 80068b8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068bc:	2201      	movs	r2, #1
 80068be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80068ce:	4b23      	ldr	r3, [pc, #140]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068d0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80068d2:	4a22      	ldr	r2, [pc, #136]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068d8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068e2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <RadioSetRxGenericConfig+0x394>)
 80068ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80068f2:	f7ff fa8c 	bl	8005e0e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80068f6:	2001      	movs	r0, #1
 80068f8:	f7fe fc4a 	bl	8005190 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80068fc:	4818      	ldr	r0, [pc, #96]	; (8006960 <RadioSetRxGenericConfig+0x398>)
 80068fe:	f000 fe53 	bl	80075a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006902:	4818      	ldr	r0, [pc, #96]	; (8006964 <RadioSetRxGenericConfig+0x39c>)
 8006904:	f000 ff1c 	bl	8007740 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006908:	4b14      	ldr	r3, [pc, #80]	; (800695c <RadioSetRxGenericConfig+0x394>)
 800690a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800690e:	2b01      	cmp	r3, #1
 8006910:	d10d      	bne.n	800692e <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006912:	f240 7036 	movw	r0, #1846	; 0x736
 8006916:	f001 f86f 	bl	80079f8 <SUBGRF_ReadRegister>
 800691a:	4603      	mov	r3, r0
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	f240 7036 	movw	r0, #1846	; 0x736
 8006928:	f001 f852 	bl	80079d0 <SUBGRF_WriteRegister>
 800692c:	e00c      	b.n	8006948 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800692e:	f240 7036 	movw	r0, #1846	; 0x736
 8006932:	f001 f861 	bl	80079f8 <SUBGRF_ReadRegister>
 8006936:	4603      	mov	r3, r0
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	f240 7036 	movw	r0, #1846	; 0x736
 8006944:	f001 f844 	bl	80079d0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <RadioSetRxGenericConfig+0x394>)
 800694a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800694e:	609a      	str	r2, [r3, #8]
        break;
 8006950:	bf00      	nop
    }
    return status;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006954:	4618      	mov	r0, r3
 8006956:	3730      	adds	r7, #48	; 0x30
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000594 	.word	0x20000594
 8006960:	200005cc 	.word	0x200005cc
 8006964:	200005a2 	.word	0x200005a2

08006968 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	4613      	mov	r3, r2
 8006978:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	2300      	movs	r3, #0
 8006980:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006982:	f001 faae 	bl	8007ee2 <RFW_DeInit>
    switch( modem )
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b02      	cmp	r3, #2
 800698a:	f000 8144 	beq.w	8006c16 <RadioSetTxGenericConfig+0x2ae>
 800698e:	2b02      	cmp	r3, #2
 8006990:	f300 8160 	bgt.w	8006c54 <RadioSetTxGenericConfig+0x2ec>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <RadioSetTxGenericConfig+0x38>
 8006998:	2b01      	cmp	r3, #1
 800699a:	f000 80b7 	beq.w	8006b0c <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800699e:	e159      	b.n	8006c54 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <RadioSetTxGenericConfig+0x48>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <RadioSetTxGenericConfig+0x4e>
            return -1;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	e163      	b.n	8006c7e <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	7d1b      	ldrb	r3, [r3, #20]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d902      	bls.n	80069c4 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	e15c      	b.n	8006c7e <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80069c4:	2300      	movs	r3, #0
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
 80069c8:	e00d      	b.n	80069e6 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	4413      	add	r3, r2
 80069d2:	7819      	ldrb	r1, [r3, #0]
 80069d4:	f107 021c 	add.w	r2, r7, #28
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	4413      	add	r3, r2
 80069dc:	460a      	mov	r2, r1
 80069de:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	4293      	cmp	r3, r2
 80069f0:	dbeb      	blt.n	80069ca <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80069f2:	4ba5      	ldr	r3, [pc, #660]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4aa2      	ldr	r2, [pc, #648]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a00:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	4ba0      	ldr	r3, [pc, #640]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 f997 	bl	8007d44 <SUBGRF_GetFskBandwidthRegValue>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a98      	ldr	r2, [pc, #608]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a26:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006a28:	4b97      	ldr	r3, [pc, #604]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	4b93      	ldr	r3, [pc, #588]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a3a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006a3c:	4b92      	ldr	r3, [pc, #584]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a3e:	2204      	movs	r2, #4
 8006a40:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7d1b      	ldrb	r3, [r3, #20]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4b8f      	ldr	r3, [pc, #572]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a4c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006a4e:	4b8e      	ldr	r3, [pc, #568]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d003      	beq.n	8006a66 <RadioSetTxGenericConfig+0xfe>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7f9b      	ldrb	r3, [r3, #30]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d12a      	bne.n	8006abc <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	7fdb      	ldrb	r3, [r3, #31]
 8006a6a:	2bf1      	cmp	r3, #241	; 0xf1
 8006a6c:	d00a      	beq.n	8006a84 <RadioSetTxGenericConfig+0x11c>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	7fdb      	ldrb	r3, [r3, #31]
 8006a72:	2bf2      	cmp	r3, #242	; 0xf2
 8006a74:	d006      	beq.n	8006a84 <RadioSetTxGenericConfig+0x11c>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	7fdb      	ldrb	r3, [r3, #31]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d002      	beq.n	8006a84 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8006a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a82:	e0fc      	b.n	8006c7e <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8006a84:	2301      	movs	r3, #1
 8006a86:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006a8c:	4b7f      	ldr	r3, [pc, #508]	; (8006c8c <RadioSetTxGenericConfig+0x324>)
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	f107 0310 	add.w	r3, r7, #16
 8006a94:	4a7e      	ldr	r2, [pc, #504]	; (8006c90 <RadioSetTxGenericConfig+0x328>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 fa16 	bl	8007ec8 <RFW_Init>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <RadioSetTxGenericConfig+0x140>
              return -1;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	e0ea      	b.n	8006c7e <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006aa8:	4b77      	ldr	r3, [pc, #476]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006aae:	4b76      	ldr	r3, [pc, #472]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006ab4:	4b74      	ldr	r3, [pc, #464]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	755a      	strb	r2, [r3, #21]
        {
 8006aba:	e00c      	b.n	8006ad6 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	7fda      	ldrb	r2, [r3, #31]
 8006ac0:	4b71      	ldr	r3, [pc, #452]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006ac2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006aca:	4b6f      	ldr	r3, [pc, #444]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006acc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	7f9a      	ldrb	r2, [r3, #30]
 8006ad2:	4b6d      	ldr	r3, [pc, #436]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006ad4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006ad6:	f7ff f99a 	bl	8005e0e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006ada:	2000      	movs	r0, #0
 8006adc:	f7fe fb58 	bl	8005190 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ae0:	486c      	ldr	r0, [pc, #432]	; (8006c94 <RadioSetTxGenericConfig+0x32c>)
 8006ae2:	f000 fd61 	bl	80075a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ae6:	486c      	ldr	r0, [pc, #432]	; (8006c98 <RadioSetTxGenericConfig+0x330>)
 8006ae8:	f000 fe2a 	bl	8007740 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006aec:	f107 031c 	add.w	r3, r7, #28
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f964 	bl	8006dbe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	8b9b      	ldrh	r3, [r3, #28]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f9ae 	bl	8006e5c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	8c1b      	ldrh	r3, [r3, #32]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f989 	bl	8006e1c <SUBGRF_SetCrcPolynomial>
        break;
 8006b0a:	e0a4      	b.n	8006c56 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006b0c:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006b26:	4b58      	ldr	r3, [pc, #352]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d010      	beq.n	8006b64 <RadioSetTxGenericConfig+0x1fc>
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	dc22      	bgt.n	8006b8c <RadioSetTxGenericConfig+0x224>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <RadioSetTxGenericConfig+0x1e8>
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d005      	beq.n	8006b5a <RadioSetTxGenericConfig+0x1f2>
            break;
 8006b4e:	e01d      	b.n	8006b8c <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006b50:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b58:	e019      	b.n	8006b8e <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006b5a:	4b4b      	ldr	r3, [pc, #300]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b62:	e014      	b.n	8006b8e <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6a:	2b0b      	cmp	r3, #11
 8006b6c:	d004      	beq.n	8006b78 <RadioSetTxGenericConfig+0x210>
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	d104      	bne.n	8006b82 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006b78:	4b43      	ldr	r3, [pc, #268]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b80:	e005      	b.n	8006b8e <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006b82:	4b41      	ldr	r3, [pc, #260]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006b8a:	e000      	b.n	8006b8e <RadioSetTxGenericConfig+0x226>
            break;
 8006b8c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006b9a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006ba2:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006ba4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006bac:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006bae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006bb8:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006bbe:	f7ff f926 	bl	8005e0e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7fe fae4 	bl	8005190 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006bc8:	4832      	ldr	r0, [pc, #200]	; (8006c94 <RadioSetTxGenericConfig+0x32c>)
 8006bca:	f000 fced 	bl	80075a8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bce:	4832      	ldr	r0, [pc, #200]	; (8006c98 <RadioSetTxGenericConfig+0x330>)
 8006bd0:	f000 fdb6 	bl	8007740 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006bd4:	4b2c      	ldr	r3, [pc, #176]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bda:	2b06      	cmp	r3, #6
 8006bdc:	d10d      	bne.n	8006bfa <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006bde:	f640 0089 	movw	r0, #2185	; 0x889
 8006be2:	f000 ff09 	bl	80079f8 <SUBGRF_ReadRegister>
 8006be6:	4603      	mov	r3, r0
 8006be8:	f023 0304 	bic.w	r3, r3, #4
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	f640 0089 	movw	r0, #2185	; 0x889
 8006bf4:	f000 feec 	bl	80079d0 <SUBGRF_WriteRegister>
        break;
 8006bf8:	e02d      	b.n	8006c56 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006bfa:	f640 0089 	movw	r0, #2185	; 0x889
 8006bfe:	f000 fefb 	bl	80079f8 <SUBGRF_ReadRegister>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f640 0089 	movw	r0, #2185	; 0x889
 8006c10:	f000 fede 	bl	80079d0 <SUBGRF_WriteRegister>
        break;
 8006c14:	e01f      	b.n	8006c56 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <RadioSetTxGenericConfig+0x2c0>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c26:	d902      	bls.n	8006c2e <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	e027      	b.n	8006c7e <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006c2e:	2002      	movs	r0, #2
 8006c30:	f7fe faae 	bl	8005190 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c40:	4a11      	ldr	r2, [pc, #68]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c42:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006c44:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c46:	2216      	movs	r2, #22
 8006c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c4c:	4811      	ldr	r0, [pc, #68]	; (8006c94 <RadioSetTxGenericConfig+0x32c>)
 8006c4e:	f000 fcab 	bl	80075a8 <SUBGRF_SetModulationParams>
        break;
 8006c52:	e000      	b.n	8006c56 <RadioSetTxGenericConfig+0x2ee>
        break;
 8006c54:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 ff84 	bl	8007b68 <SUBGRF_SetRfTxPower>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c66:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f94a 	bl	8007f0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006c76:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <RadioSetTxGenericConfig+0x320>)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6053      	str	r3, [r2, #4]
    return 0;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000594 	.word	0x20000594
 8006c8c:	20000440 	.word	0x20000440
 8006c90:	200005ec 	.word	0x200005ec
 8006c94:	200005cc 	.word	0x200005cc
 8006c98:	200005a2 	.word	0x200005a2

08006c9c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <SUBGRF_Init+0x78>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006cb0:	f7fa fd02 	bl	80016b8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006cb4:	2002      	movs	r0, #2
 8006cb6:	f001 f823 	bl	8007d00 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <SUBGRF_Init+0x7c>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f000 f977 	bl	8006fb4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006cc6:	f7fa fbcd 	bl	8001464 <RBI_IsTCXO>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d10e      	bne.n	8006cee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	f000 fb78 	bl	80073c8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006cd8:	2100      	movs	r1, #0
 8006cda:	f640 1011 	movw	r0, #2321	; 0x911
 8006cde:	f000 fe77 	bl	80079d0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006ce2:	237f      	movs	r3, #127	; 0x7f
 8006ce4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006ce6:	7b38      	ldrb	r0, [r7, #12]
 8006ce8:	f000 fa85 	bl	80071f6 <SUBGRF_Calibrate>
 8006cec:	e009      	b.n	8006d02 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006cee:	2120      	movs	r1, #32
 8006cf0:	f640 1011 	movw	r0, #2321	; 0x911
 8006cf4:	f000 fe6c 	bl	80079d0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006cf8:	2120      	movs	r1, #32
 8006cfa:	f640 1012 	movw	r0, #2322	; 0x912
 8006cfe:	f000 fe67 	bl	80079d0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006d02:	f7fa fb93 	bl	800142c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <SUBGRF_Init+0x80>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	701a      	strb	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000450 	.word	0x20000450
 8006d18:	2000044c 	.word	0x2000044c
 8006d1c:	20000444 	.word	0x20000444

08006d20 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <SUBGRF_GetOperatingMode+0x10>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr
 8006d30:	20000444 	.word	0x20000444

08006d34 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 fe92 	bl	8007a70 <SUBGRF_WriteBuffer>
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8006d66:	f107 0317 	add.w	r3, r7, #23
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	f000 fdb1 	bl	80078d4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	79fa      	ldrb	r2, [r7, #7]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d201      	bcs.n	8006d80 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e007      	b.n	8006d90 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8006d80:	7df8      	ldrb	r0, [r7, #23]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	f000 fe87 	bl	8007a9c <SUBGRF_ReadBuffer>

    return 0;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	460b      	mov	r3, r1
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8006da6:	7afb      	ldrb	r3, [r7, #11]
 8006da8:	4619      	mov	r1, r3
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff ffc2 	bl	8006d34 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f91b 	bl	8006fec <SUBGRF_SetTx>
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006dce:	f000 fe27 	bl	8007a20 <SUBGRF_WriteRegisters>
    return 0;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006df6:	f000 fb67 	bl	80074c8 <SUBGRF_GetPacketType>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	2202      	movs	r2, #2
 8006e06:	4619      	mov	r1, r3
 8006e08:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006e0c:	f000 fe08 	bl	8007a20 <SUBGRF_WriteRegisters>
            break;
 8006e10:	e000      	b.n	8006e14 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006e12:	bf00      	nop
    }
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006e36:	f000 fb47 	bl	80074c8 <SUBGRF_GetPacketType>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006e40:	f107 030c 	add.w	r3, r7, #12
 8006e44:	2202      	movs	r2, #2
 8006e46:	4619      	mov	r1, r3
 8006e48:	f240 60be 	movw	r0, #1726	; 0x6be
 8006e4c:	f000 fde8 	bl	8007a20 <SUBGRF_WriteRegisters>
            break;
 8006e50:	e000      	b.n	8006e54 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006e52:	bf00      	nop
    }
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8006e6a:	f000 fb2d 	bl	80074c8 <SUBGRF_GetPacketType>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d121      	bne.n	8006eb8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006e74:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006e78:	f000 fdbe 	bl	80079f8 <SUBGRF_ReadRegister>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	b25a      	sxtb	r2, r3
 8006e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	b25b      	sxtb	r3, r3
 8006e9a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006ea4:	f000 fd94 	bl	80079d0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4619      	mov	r1, r3
 8006eae:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8006eb2:	f000 fd8d 	bl	80079d0 <SUBGRF_WriteRegister>
            break;
 8006eb6:	e000      	b.n	8006eba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8006eb8:	bf00      	nop
    }
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006ed4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006ed8:	f000 fd8e 	bl	80079f8 <SUBGRF_ReadRegister>
 8006edc:	4603      	mov	r3, r0
 8006ede:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006eee:	f000 fd6f 	bl	80079d0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006ef2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006ef6:	f000 fd7f 	bl	80079f8 <SUBGRF_ReadRegister>
 8006efa:	4603      	mov	r3, r0
 8006efc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006efe:	79bb      	ldrb	r3, [r7, #6]
 8006f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006f0c:	f000 fd60 	bl	80079d0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006f10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006f14:	f000 f88a 	bl	800702c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006f18:	463b      	mov	r3, r7
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f640 0019 	movw	r0, #2073	; 0x819
 8006f22:	f000 fd91 	bl	8007a48 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8006f26:	2000      	movs	r0, #0
 8006f28:	f000 f844 	bl	8006fb4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006f34:	f000 fd4c 	bl	80079d0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006f38:	79bb      	ldrb	r3, [r7, #6]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006f40:	f000 fd46 	bl	80079d0 <SUBGRF_WriteRegister>

    return number;
 8006f44:	683b      	ldr	r3, [r7, #0]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f7fa fa6e 	bl	800143a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006f5e:	2002      	movs	r0, #2
 8006f60:	f000 fece 	bl	8007d00 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006f64:	793b      	ldrb	r3, [r7, #4]
 8006f66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006f70:	793b      	ldrb	r3, [r7, #4]
 8006f72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006f7a:	b25b      	sxtb	r3, r3
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006f80:	793b      	ldrb	r3, [r7, #4]
 8006f82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006f90:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006f92:	f107 030f 	add.w	r3, r7, #15
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	2084      	movs	r0, #132	; 0x84
 8006f9c:	f000 fd94 	bl	8007ac8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <SUBGRF_SetSleep+0x60>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000444 	.word	0x20000444

08006fb4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006fbe:	1dfb      	adds	r3, r7, #7
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	2080      	movs	r0, #128	; 0x80
 8006fc6:	f000 fd7f 	bl	8007ac8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <SUBGRF_SetStandby+0x34>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006fd6:	e002      	b.n	8006fde <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	; (8006fe8 <SUBGRF_SetStandby+0x34>)
 8006fda:	2202      	movs	r2, #2
 8006fdc:	701a      	strb	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000444 	.word	0x20000444

08006fec <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <SUBGRF_SetTx+0x3c>)
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	b2db      	uxtb	r3, r3
 8007008:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	2203      	movs	r2, #3
 8007016:	4619      	mov	r1, r3
 8007018:	2083      	movs	r0, #131	; 0x83
 800701a:	f000 fd55 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000444 	.word	0x20000444

0800702c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <SUBGRF_SetRx+0x3c>)
 8007036:	2205      	movs	r2, #5
 8007038:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	b2db      	uxtb	r3, r3
 8007040:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	b2db      	uxtb	r3, r3
 8007048:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	2203      	movs	r2, #3
 8007056:	4619      	mov	r1, r3
 8007058:	2082      	movs	r0, #130	; 0x82
 800705a:	f000 fd35 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000444 	.word	0x20000444

0800706c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <SUBGRF_SetRxBoosted+0x44>)
 8007076:	2205      	movs	r2, #5
 8007078:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800707a:	2197      	movs	r1, #151	; 0x97
 800707c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8007080:	f000 fca6 	bl	80079d0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	b2db      	uxtb	r3, r3
 800708a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	b2db      	uxtb	r3, r3
 8007092:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800709a:	f107 030c 	add.w	r3, r7, #12
 800709e:	2203      	movs	r2, #3
 80070a0:	4619      	mov	r1, r3
 80070a2:	2082      	movs	r0, #130	; 0x82
 80070a4:	f000 fd10 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000444 	.word	0x20000444

080070b4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80070ea:	f107 0308 	add.w	r3, r7, #8
 80070ee:	2206      	movs	r2, #6
 80070f0:	4619      	mov	r1, r3
 80070f2:	2094      	movs	r0, #148	; 0x94
 80070f4:	f000 fce8 	bl	8007ac8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <SUBGRF_SetRxDutyCycle+0x54>)
 80070fa:	2206      	movs	r2, #6
 80070fc:	701a      	strb	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000444 	.word	0x20000444

0800710c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007110:	2200      	movs	r2, #0
 8007112:	2100      	movs	r1, #0
 8007114:	20c5      	movs	r0, #197	; 0xc5
 8007116:	f000 fcd7 	bl	8007ac8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800711a:	4b02      	ldr	r3, [pc, #8]	; (8007124 <SUBGRF_SetCad+0x18>)
 800711c:	2207      	movs	r2, #7
 800711e:	701a      	strb	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000444 	.word	0x20000444

08007128 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800712c:	2200      	movs	r2, #0
 800712e:	2100      	movs	r1, #0
 8007130:	20d1      	movs	r0, #209	; 0xd1
 8007132:	f000 fcc9 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 8007136:	bf00      	nop
 8007138:	bd80      	pop	{r7, pc}

0800713a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	20d2      	movs	r0, #210	; 0xd2
 8007144:	f000 fcc0 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 8007148:	bf00      	nop
 800714a:	bd80      	pop	{r7, pc}

0800714c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	2201      	movs	r2, #1
 800715a:	4619      	mov	r1, r3
 800715c:	209f      	movs	r0, #159	; 0x9f
 800715e:	f000 fcb3 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	4603      	mov	r3, r0
 8007172:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007174:	1dfb      	adds	r3, r7, #7
 8007176:	2201      	movs	r2, #1
 8007178:	4619      	mov	r1, r3
 800717a:	20a0      	movs	r0, #160	; 0xa0
 800717c:	f000 fca4 	bl	8007ac8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b3f      	cmp	r3, #63	; 0x3f
 8007184:	d91c      	bls.n	80071c0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007194:	e005      	b.n	80071a2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	089b      	lsrs	r3, r3, #2
 800719a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	3301      	adds	r3, #1
 80071a0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b1f      	cmp	r3, #31
 80071a6:	d8f6      	bhi.n	8007196 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	4413      	add	r3, r2
 80071b2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80071b4:	7b7b      	ldrb	r3, [r7, #13]
 80071b6:	4619      	mov	r1, r3
 80071b8:	f240 7006 	movw	r0, #1798	; 0x706
 80071bc:	f000 fc08 	bl	80079d0 <SUBGRF_WriteRegister>
    }
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80071ce:	f7fa f950 	bl	8001472 <RBI_IsDCDC>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d102      	bne.n	80071de <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80071d8:	2301      	movs	r3, #1
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	e001      	b.n	80071e2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80071de:	2300      	movs	r3, #0
 80071e0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80071e2:	1dfb      	adds	r3, r7, #7
 80071e4:	2201      	movs	r2, #1
 80071e6:	4619      	mov	r1, r3
 80071e8:	2096      	movs	r0, #150	; 0x96
 80071ea:	f000 fc6d 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80071fe:	793b      	ldrb	r3, [r7, #4]
 8007200:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	019b      	lsls	r3, r3, #6
 8007208:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800720a:	793b      	ldrb	r3, [r7, #4]
 800720c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007214:	b25b      	sxtb	r3, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800721a:	793b      	ldrb	r3, [r7, #4]
 800721c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007220:	b2db      	uxtb	r3, r3
 8007222:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007224:	b25b      	sxtb	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800722a:	793b      	ldrb	r3, [r7, #4]
 800722c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007234:	b25b      	sxtb	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800723a:	793b      	ldrb	r3, [r7, #4]
 800723c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007240:	b2db      	uxtb	r3, r3
 8007242:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007244:	b25b      	sxtb	r3, r3
 8007246:	4313      	orrs	r3, r2
 8007248:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800724a:	793b      	ldrb	r3, [r7, #4]
 800724c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007254:	b25b      	sxtb	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800725a:	793b      	ldrb	r3, [r7, #4]
 800725c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007264:	4313      	orrs	r3, r2
 8007266:	b25b      	sxtb	r3, r3
 8007268:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800726a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800726c:	f107 030f 	add.w	r3, r7, #15
 8007270:	2201      	movs	r2, #1
 8007272:	4619      	mov	r1, r3
 8007274:	2089      	movs	r0, #137	; 0x89
 8007276:	f000 fc27 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <SUBGRF_CalibrateImage+0x78>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d904      	bls.n	800729e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007294:	23e1      	movs	r3, #225	; 0xe1
 8007296:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007298:	23e9      	movs	r3, #233	; 0xe9
 800729a:	737b      	strb	r3, [r7, #13]
 800729c:	e022      	b.n	80072e4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a17      	ldr	r2, [pc, #92]	; (8007300 <SUBGRF_CalibrateImage+0x7c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d904      	bls.n	80072b0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80072a6:	23d7      	movs	r3, #215	; 0xd7
 80072a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80072aa:	23db      	movs	r3, #219	; 0xdb
 80072ac:	737b      	strb	r3, [r7, #13]
 80072ae:	e019      	b.n	80072e4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <SUBGRF_CalibrateImage+0x80>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d904      	bls.n	80072c2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80072b8:	23c1      	movs	r3, #193	; 0xc1
 80072ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80072bc:	23c5      	movs	r3, #197	; 0xc5
 80072be:	737b      	strb	r3, [r7, #13]
 80072c0:	e010      	b.n	80072e4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a10      	ldr	r2, [pc, #64]	; (8007308 <SUBGRF_CalibrateImage+0x84>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d904      	bls.n	80072d4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80072ca:	2375      	movs	r3, #117	; 0x75
 80072cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80072ce:	2381      	movs	r3, #129	; 0x81
 80072d0:	737b      	strb	r3, [r7, #13]
 80072d2:	e007      	b.n	80072e4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a0d      	ldr	r2, [pc, #52]	; (800730c <SUBGRF_CalibrateImage+0x88>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d903      	bls.n	80072e4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80072dc:	236b      	movs	r3, #107	; 0x6b
 80072de:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80072e0:	236f      	movs	r3, #111	; 0x6f
 80072e2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	2202      	movs	r2, #2
 80072ea:	4619      	mov	r1, r3
 80072ec:	2098      	movs	r0, #152	; 0x98
 80072ee:	f000 fbeb 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	35a4e900 	.word	0x35a4e900
 8007300:	32a9f880 	.word	0x32a9f880
 8007304:	2de54480 	.word	0x2de54480
 8007308:	1b6b0b00 	.word	0x1b6b0b00
 800730c:	1954fc40 	.word	0x1954fc40

08007310 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4623      	mov	r3, r4
 8007320:	71fb      	strb	r3, [r7, #7]
 8007322:	4603      	mov	r3, r0
 8007324:	71bb      	strb	r3, [r7, #6]
 8007326:	460b      	mov	r3, r1
 8007328:	717b      	strb	r3, [r7, #5]
 800732a:	4613      	mov	r3, r2
 800732c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8007332:	79bb      	ldrb	r3, [r7, #6]
 8007334:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007336:	797b      	ldrb	r3, [r7, #5]
 8007338:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800733a:	793b      	ldrb	r3, [r7, #4]
 800733c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	2204      	movs	r2, #4
 8007344:	4619      	mov	r1, r3
 8007346:	2095      	movs	r0, #149	; 0x95
 8007348:	f000 fbbe 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	bd90      	pop	{r4, r7, pc}

08007354 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4623      	mov	r3, r4
 8007364:	80fb      	strh	r3, [r7, #6]
 8007366:	4603      	mov	r3, r0
 8007368:	80bb      	strh	r3, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	807b      	strh	r3, [r7, #2]
 800736e:	4613      	mov	r3, r2
 8007370:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	b2db      	uxtb	r3, r3
 800737a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007382:	88bb      	ldrh	r3, [r7, #4]
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800738c:	88bb      	ldrh	r3, [r7, #4]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	0a1b      	lsrs	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	b2db      	uxtb	r3, r3
 800739a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80073a2:	883b      	ldrh	r3, [r7, #0]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80073ac:	883b      	ldrh	r3, [r7, #0]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	2208      	movs	r2, #8
 80073b8:	4619      	mov	r1, r3
 80073ba:	2008      	movs	r0, #8
 80073bc:	f000 fb84 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd90      	pop	{r4, r7, pc}

080073c8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80073f4:	f107 030c 	add.w	r3, r7, #12
 80073f8:	2204      	movs	r2, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	2097      	movs	r0, #151	; 0x97
 80073fe:	f000 fb63 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800740c:	b5b0      	push	{r4, r5, r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007418:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <SUBGRF_SetRfFrequency+0x7c>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f083 0301 	eor.w	r3, r3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff2c 	bl	8007284 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <SUBGRF_SetRfFrequency+0x7c>)
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	461a      	mov	r2, r3
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	09d5      	lsrs	r5, r2, #7
 800743c:	0654      	lsls	r4, r2, #25
 800743e:	4a13      	ldr	r2, [pc, #76]	; (800748c <SUBGRF_SetRfFrequency+0x80>)
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 fc06 	bl	8000c58 <__aeabi_uldivmod>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4613      	mov	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	0e1b      	lsrs	r3, r3, #24
 8007458:	b2db      	uxtb	r3, r3
 800745a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	b2db      	uxtb	r3, r3
 8007462:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	b2db      	uxtb	r3, r3
 800746a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	2204      	movs	r2, #4
 8007478:	4619      	mov	r1, r3
 800747a:	2086      	movs	r0, #134	; 0x86
 800747c:	f000 fb24 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bdb0      	pop	{r4, r5, r7, pc}
 8007488:	2000044c 	.word	0x2000044c
 800748c:	01e84800 	.word	0x01e84800

08007490 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800749a:	79fa      	ldrb	r2, [r7, #7]
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <SUBGRF_SetPacketType+0x34>)
 800749e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80074a6:	2100      	movs	r1, #0
 80074a8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074ac:	f000 fa90 	bl	80079d0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80074b0:	1dfb      	adds	r3, r7, #7
 80074b2:	2201      	movs	r2, #1
 80074b4:	4619      	mov	r1, r3
 80074b6:	208a      	movs	r0, #138	; 0x8a
 80074b8:	f000 fb06 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000445 	.word	0x20000445

080074c8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
    return PacketType;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <SUBGRF_GetPacketType+0x10>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	20000445 	.word	0x20000445

080074dc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	71fb      	strb	r3, [r7, #7]
 80074e6:	460b      	mov	r3, r1
 80074e8:	71bb      	strb	r3, [r7, #6]
 80074ea:	4613      	mov	r3, r2
 80074ec:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d124      	bne.n	800753e <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80074f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074f8:	2b0f      	cmp	r3, #15
 80074fa:	d106      	bne.n	800750a <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80074fc:	2301      	movs	r3, #1
 80074fe:	2201      	movs	r2, #1
 8007500:	2100      	movs	r1, #0
 8007502:	2006      	movs	r0, #6
 8007504:	f7ff ff04 	bl	8007310 <SUBGRF_SetPaConfig>
 8007508:	e005      	b.n	8007516 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800750a:	2301      	movs	r3, #1
 800750c:	2201      	movs	r2, #1
 800750e:	2100      	movs	r1, #0
 8007510:	2004      	movs	r0, #4
 8007512:	f7ff fefd 	bl	8007310 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007516:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800751a:	2b0d      	cmp	r3, #13
 800751c:	dd02      	ble.n	8007524 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800751e:	230e      	movs	r3, #14
 8007520:	71bb      	strb	r3, [r7, #6]
 8007522:	e006      	b.n	8007532 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007524:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007528:	f113 0f11 	cmn.w	r3, #17
 800752c:	da01      	bge.n	8007532 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800752e:	23ef      	movs	r3, #239	; 0xef
 8007530:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8007532:	2118      	movs	r1, #24
 8007534:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007538:	f000 fa4a 	bl	80079d0 <SUBGRF_WriteRegister>
 800753c:	e025      	b.n	800758a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800753e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007542:	f000 fa59 	bl	80079f8 <SUBGRF_ReadRegister>
 8007546:	4603      	mov	r3, r0
 8007548:	f043 031e 	orr.w	r3, r3, #30
 800754c:	b2db      	uxtb	r3, r3
 800754e:	4619      	mov	r1, r3
 8007550:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007554:	f000 fa3c 	bl	80079d0 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007558:	2301      	movs	r3, #1
 800755a:	2200      	movs	r2, #0
 800755c:	2107      	movs	r1, #7
 800755e:	2004      	movs	r0, #4
 8007560:	f7ff fed6 	bl	8007310 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007564:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007568:	2b16      	cmp	r3, #22
 800756a:	dd02      	ble.n	8007572 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800756c:	2316      	movs	r3, #22
 800756e:	71bb      	strb	r3, [r7, #6]
 8007570:	e006      	b.n	8007580 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8007572:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007576:	f113 0f09 	cmn.w	r3, #9
 800757a:	da01      	bge.n	8007580 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800757c:	23f7      	movs	r3, #247	; 0xf7
 800757e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8007580:	2138      	movs	r1, #56	; 0x38
 8007582:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007586:	f000 fa23 	bl	80079d0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800758a:	79bb      	ldrb	r3, [r7, #6]
 800758c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800758e:	797b      	ldrb	r3, [r7, #5]
 8007590:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	2202      	movs	r2, #2
 8007598:	4619      	mov	r1, r3
 800759a:	208e      	movs	r0, #142	; 0x8e
 800759c:	f000 fa94 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80075a8:	b5b0      	push	{r4, r5, r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80075b4:	4a5e      	ldr	r2, [pc, #376]	; (8007730 <SUBGRF_SetModulationParams+0x188>)
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075be:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	4b5b      	ldr	r3, [pc, #364]	; (8007734 <SUBGRF_SetModulationParams+0x18c>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d004      	beq.n	80075d8 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff ff5c 	bl	8007490 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	f200 80a2 	bhi.w	8007726 <SUBGRF_SetModulationParams+0x17e>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <SUBGRF_SetModulationParams+0x40>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080076b5 	.word	0x080076b5
 80075f0:	08007677 	.word	0x08007677
 80075f4:	080076e3 	.word	0x080076e3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80075f8:	2308      	movs	r3, #8
 80075fa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a4d      	ldr	r2, [pc, #308]	; (8007738 <SUBGRF_SetModulationParams+0x190>)
 8007602:	fbb2 f3f3 	udiv	r3, r2, r3
 8007606:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	0c1b      	lsrs	r3, r3, #16
 800760c:	b2db      	uxtb	r3, r3
 800760e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b2db      	uxtb	r3, r3
 8007616:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7b1b      	ldrb	r3, [r3, #12]
 8007622:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7b5b      	ldrb	r3, [r3, #13]
 8007628:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	461a      	mov	r2, r3
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	09d5      	lsrs	r5, r2, #7
 8007636:	0654      	lsls	r4, r2, #25
 8007638:	4a40      	ldr	r2, [pc, #256]	; (800773c <SUBGRF_SetModulationParams+0x194>)
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fb09 	bl	8000c58 <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4613      	mov	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	b2db      	uxtb	r3, r3
 8007654:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	b2db      	uxtb	r3, r3
 800765c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007664:	7cfb      	ldrb	r3, [r7, #19]
 8007666:	b29a      	uxth	r2, r3
 8007668:	f107 0308 	add.w	r3, r7, #8
 800766c:	4619      	mov	r1, r3
 800766e:	208b      	movs	r0, #139	; 0x8b
 8007670:	f000 fa2a 	bl	8007ac8 <SUBGRF_WriteCommand>
        break;
 8007674:	e058      	b.n	8007728 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007676:	2304      	movs	r3, #4
 8007678:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	4a2e      	ldr	r2, [pc, #184]	; (8007738 <SUBGRF_SetModulationParams+0x190>)
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	b2db      	uxtb	r3, r3
 800768c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	0a1b      	lsrs	r3, r3, #8
 8007692:	b2db      	uxtb	r3, r3
 8007694:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7d1b      	ldrb	r3, [r3, #20]
 80076a0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f107 0308 	add.w	r3, r7, #8
 80076aa:	4619      	mov	r1, r3
 80076ac:	208b      	movs	r0, #139	; 0x8b
 80076ae:	f000 fa0b 	bl	8007ac8 <SUBGRF_WriteCommand>
        break;
 80076b2:	e039      	b.n	8007728 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 80076b4:	2304      	movs	r3, #4
 80076b6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7e1b      	ldrb	r3, [r3, #24]
 80076bc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7e5b      	ldrb	r3, [r3, #25]
 80076c2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7e9b      	ldrb	r3, [r3, #26]
 80076c8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7edb      	ldrb	r3, [r3, #27]
 80076ce:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076d0:	7cfb      	ldrb	r3, [r7, #19]
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f107 0308 	add.w	r3, r7, #8
 80076d8:	4619      	mov	r1, r3
 80076da:	208b      	movs	r0, #139	; 0x8b
 80076dc:	f000 f9f4 	bl	8007ac8 <SUBGRF_WriteCommand>

        break;
 80076e0:	e022      	b.n	8007728 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80076e2:	2305      	movs	r3, #5
 80076e4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4a13      	ldr	r2, [pc, #76]	; (8007738 <SUBGRF_SetModulationParams+0x190>)
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	0c1b      	lsrs	r3, r3, #16
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7b1b      	ldrb	r3, [r3, #12]
 800770c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7b5b      	ldrb	r3, [r3, #13]
 8007712:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007714:	7cfb      	ldrb	r3, [r7, #19]
 8007716:	b29a      	uxth	r2, r3
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	4619      	mov	r1, r3
 800771e:	208b      	movs	r0, #139	; 0x8b
 8007720:	f000 f9d2 	bl	8007ac8 <SUBGRF_WriteCommand>
        break;
 8007724:	e000      	b.n	8007728 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007726:	bf00      	nop
    }
}
 8007728:	bf00      	nop
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bdb0      	pop	{r4, r5, r7, pc}
 8007730:	0800d69c 	.word	0x0800d69c
 8007734:	20000445 	.word	0x20000445
 8007738:	3d090000 	.word	0x3d090000
 800773c:	01e84800 	.word	0x01e84800

08007740 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800774c:	4a48      	ldr	r2, [pc, #288]	; (8007870 <SUBGRF_SetPacketParams+0x130>)
 800774e:	f107 030c 	add.w	r3, r7, #12
 8007752:	ca07      	ldmia	r2, {r0, r1, r2}
 8007754:	c303      	stmia	r3!, {r0, r1}
 8007756:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	4b45      	ldr	r3, [pc, #276]	; (8007874 <SUBGRF_SetPacketParams+0x134>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d004      	beq.n	800776e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fe91 	bl	8007490 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b03      	cmp	r3, #3
 8007774:	d878      	bhi.n	8007868 <SUBGRF_SetPacketParams+0x128>
 8007776:	a201      	add	r2, pc, #4	; (adr r2, 800777c <SUBGRF_SetPacketParams+0x3c>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	0800778d 	.word	0x0800778d
 8007780:	0800781d 	.word	0x0800781d
 8007784:	08007811 	.word	0x08007811
 8007788:	0800778d 	.word	0x0800778d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7a5b      	ldrb	r3, [r3, #9]
 8007790:	2bf1      	cmp	r3, #241	; 0xf1
 8007792:	d10a      	bne.n	80077aa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007794:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007798:	f7ff fb20 	bl	8006ddc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800779c:	f248 0005 	movw	r0, #32773	; 0x8005
 80077a0:	f7ff fb3c 	bl	8006e1c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80077a4:	2302      	movs	r3, #2
 80077a6:	75bb      	strb	r3, [r7, #22]
 80077a8:	e011      	b.n	80077ce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7a5b      	ldrb	r3, [r3, #9]
 80077ae:	2bf2      	cmp	r3, #242	; 0xf2
 80077b0:	d10a      	bne.n	80077c8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80077b2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80077b6:	f7ff fb11 	bl	8006ddc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80077ba:	f241 0021 	movw	r0, #4129	; 0x1021
 80077be:	f7ff fb2d 	bl	8006e1c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80077c2:	2306      	movs	r3, #6
 80077c4:	75bb      	strb	r3, [r7, #22]
 80077c6:	e002      	b.n	80077ce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7a5b      	ldrb	r3, [r3, #9]
 80077cc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80077ce:	2309      	movs	r3, #9
 80077d0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	885b      	ldrh	r3, [r3, #2]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	885b      	ldrh	r3, [r3, #2]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	795b      	ldrb	r3, [r3, #5]
 80077f0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	799b      	ldrb	r3, [r3, #6]
 80077f6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	79db      	ldrb	r3, [r3, #7]
 80077fc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7a1b      	ldrb	r3, [r3, #8]
 8007802:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007804:	7dbb      	ldrb	r3, [r7, #22]
 8007806:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	7a9b      	ldrb	r3, [r3, #10]
 800780c:	753b      	strb	r3, [r7, #20]
        break;
 800780e:	e022      	b.n	8007856 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7b1b      	ldrb	r3, [r3, #12]
 8007818:	733b      	strb	r3, [r7, #12]
        break;
 800781a:	e01c      	b.n	8007856 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800781c:	2306      	movs	r3, #6
 800781e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	89db      	ldrh	r3, [r3, #14]
 8007824:	0a1b      	lsrs	r3, r3, #8
 8007826:	b29b      	uxth	r3, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	89db      	ldrh	r3, [r3, #14]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1a      	ldrb	r2, [r3, #16]
 8007838:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <SUBGRF_SetPacketParams+0x138>)
 800783a:	4611      	mov	r1, r2
 800783c:	7019      	strb	r1, [r3, #0]
 800783e:	4613      	mov	r3, r2
 8007840:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7c5b      	ldrb	r3, [r3, #17]
 8007846:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7c9b      	ldrb	r3, [r3, #18]
 800784c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7cdb      	ldrb	r3, [r3, #19]
 8007852:	747b      	strb	r3, [r7, #17]
        break;
 8007854:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	b29a      	uxth	r2, r3
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	4619      	mov	r1, r3
 8007860:	208c      	movs	r0, #140	; 0x8c
 8007862:	f000 f931 	bl	8007ac8 <SUBGRF_WriteCommand>
 8007866:	e000      	b.n	800786a <SUBGRF_SetPacketParams+0x12a>
        return;
 8007868:	bf00      	nop
}
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	0800d6a4 	.word	0x0800d6a4
 8007874:	20000445 	.word	0x20000445
 8007878:	20000446 	.word	0x20000446

0800787c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	460a      	mov	r2, r1
 8007886:	71fb      	strb	r3, [r7, #7]
 8007888:	4613      	mov	r3, r2
 800788a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007890:	79bb      	ldrb	r3, [r7, #6]
 8007892:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007894:	f107 030c 	add.w	r3, r7, #12
 8007898:	2202      	movs	r2, #2
 800789a:	4619      	mov	r1, r3
 800789c:	208f      	movs	r0, #143	; 0x8f
 800789e:	f000 f913 	bl	8007ac8 <SUBGRF_WriteCommand>
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80078b4:	1d3b      	adds	r3, r7, #4
 80078b6:	2201      	movs	r2, #1
 80078b8:	4619      	mov	r1, r3
 80078ba:	2015      	movs	r0, #21
 80078bc:	f000 f918 	bl	8007af0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80078c0:	793b      	ldrb	r3, [r7, #4]
 80078c2:	425b      	negs	r3, r3
 80078c4:	105b      	asrs	r3, r3, #1
 80078c6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80078c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	2202      	movs	r2, #2
 80078e4:	4619      	mov	r1, r3
 80078e6:	2013      	movs	r0, #19
 80078e8:	f000 f902 	bl	8007af0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80078ec:	f7ff fdec 	bl	80074c8 <SUBGRF_GetPacketType>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10d      	bne.n	8007912 <SUBGRF_GetRxBufferStatus+0x3e>
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <SUBGRF_GetRxBufferStatus+0x54>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d108      	bne.n	8007912 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007900:	f240 7002 	movw	r0, #1794	; 0x702
 8007904:	f000 f878 	bl	80079f8 <SUBGRF_ReadRegister>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e002      	b.n	8007918 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007912:	7b3a      	ldrb	r2, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007918:	7b7a      	ldrb	r2, [r7, #13]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	701a      	strb	r2, [r3, #0]
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000446 	.word	0x20000446

0800792c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	2203      	movs	r2, #3
 800793a:	4619      	mov	r1, r3
 800793c:	2014      	movs	r0, #20
 800793e:	f000 f8d7 	bl	8007af0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007942:	f7ff fdc1 	bl	80074c8 <SUBGRF_GetPacketType>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <SUBGRF_GetPacketStatus+0x30>
 8007956:	2b01      	cmp	r3, #1
 8007958:	d013      	beq.n	8007982 <SUBGRF_GetPacketStatus+0x56>
 800795a:	e02a      	b.n	80079b2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800795c:	7b3a      	ldrb	r2, [r7, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007962:	7b7b      	ldrb	r3, [r7, #13]
 8007964:	425b      	negs	r3, r3
 8007966:	105b      	asrs	r3, r3, #1
 8007968:	b25a      	sxtb	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	425b      	negs	r3, r3
 8007972:	105b      	asrs	r3, r3, #1
 8007974:	b25a      	sxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	609a      	str	r2, [r3, #8]
            break;
 8007980:	e020      	b.n	80079c4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007982:	7b3b      	ldrb	r3, [r7, #12]
 8007984:	425b      	negs	r3, r3
 8007986:	105b      	asrs	r3, r3, #1
 8007988:	b25a      	sxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800798e:	7b7b      	ldrb	r3, [r7, #13]
 8007990:	b25b      	sxtb	r3, r3
 8007992:	3302      	adds	r3, #2
 8007994:	109b      	asrs	r3, r3, #2
 8007996:	b25a      	sxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	425b      	negs	r3, r3
 80079a0:	105b      	asrs	r3, r3, #1
 80079a2:	b25a      	sxtb	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80079a8:	4b08      	ldr	r3, [pc, #32]	; (80079cc <SUBGRF_GetPacketStatus+0xa0>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	611a      	str	r2, [r3, #16]
            break;
 80079b0:	e008      	b.n	80079c4 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80079b2:	2214      	movs	r2, #20
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f9f6 	bl	8008da8 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	220f      	movs	r2, #15
 80079c0:	701a      	strb	r2, [r3, #0]
            break;
 80079c2:	bf00      	nop
    }
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000448 	.word	0x20000448

080079d0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	460a      	mov	r2, r1
 80079da:	80fb      	strh	r3, [r7, #6]
 80079dc:	4613      	mov	r3, r2
 80079de:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80079e0:	1d7a      	adds	r2, r7, #5
 80079e2:	88f9      	ldrh	r1, [r7, #6]
 80079e4:	2301      	movs	r3, #1
 80079e6:	4803      	ldr	r0, [pc, #12]	; (80079f4 <SUBGRF_WriteRegister+0x24>)
 80079e8:	f7fc f8ea 	bl	8003bc0 <HAL_SUBGHZ_WriteRegisters>
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000510 	.word	0x20000510

080079f8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007a02:	f107 020f 	add.w	r2, r7, #15
 8007a06:	88f9      	ldrh	r1, [r7, #6]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4804      	ldr	r0, [pc, #16]	; (8007a1c <SUBGRF_ReadRegister+0x24>)
 8007a0c:	f7fc f937 	bl	8003c7e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000510 	.word	0x20000510

08007a20 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	80fb      	strh	r3, [r7, #6]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007a30:	88bb      	ldrh	r3, [r7, #4]
 8007a32:	88f9      	ldrh	r1, [r7, #6]
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	4803      	ldr	r0, [pc, #12]	; (8007a44 <SUBGRF_WriteRegisters+0x24>)
 8007a38:	f7fc f8c2 	bl	8003bc0 <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000510 	.word	0x20000510

08007a48 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6039      	str	r1, [r7, #0]
 8007a52:	80fb      	strh	r3, [r7, #6]
 8007a54:	4613      	mov	r3, r2
 8007a56:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	88f9      	ldrh	r1, [r7, #6]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	4803      	ldr	r0, [pc, #12]	; (8007a6c <SUBGRF_ReadRegisters+0x24>)
 8007a60:	f7fc f90d 	bl	8003c7e <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000510 	.word	0x20000510

08007a70 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007a80:	79bb      	ldrb	r3, [r7, #6]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	79f9      	ldrb	r1, [r7, #7]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4803      	ldr	r0, [pc, #12]	; (8007a98 <SUBGRF_WriteBuffer+0x28>)
 8007a8a:	f7fc fa0c 	bl	8003ea6 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20000510 	.word	0x20000510

08007a9c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007aac:	79bb      	ldrb	r3, [r7, #6]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	79f9      	ldrb	r1, [r7, #7]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4803      	ldr	r0, [pc, #12]	; (8007ac4 <SUBGRF_ReadBuffer+0x28>)
 8007ab6:	f7fc fa49 	bl	8003f4c <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000510 	.word	0x20000510

08007ac8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007ad8:	88bb      	ldrh	r3, [r7, #4]
 8007ada:	79f9      	ldrb	r1, [r7, #7]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	4803      	ldr	r0, [pc, #12]	; (8007aec <SUBGRF_WriteCommand+0x24>)
 8007ae0:	f7fc f92e 	bl	8003d40 <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000510 	.word	0x20000510

08007af0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
 8007afc:	4613      	mov	r3, r2
 8007afe:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007b00:	88bb      	ldrh	r3, [r7, #4]
 8007b02:	79f9      	ldrb	r1, [r7, #7]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4803      	ldr	r0, [pc, #12]	; (8007b14 <SUBGRF_ReadCommand+0x24>)
 8007b08:	f7fc f979 	bl	8003dfe <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000510 	.word	0x20000510

08007b18 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	460a      	mov	r2, r1
 8007b22:	71fb      	strb	r3, [r7, #7]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007b2c:	79bb      	ldrb	r3, [r7, #6]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10d      	bne.n	8007b4e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d104      	bne.n	8007b42 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007b3c:	2004      	movs	r0, #4
 8007b3e:	f000 f8df 	bl	8007d00 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d107      	bne.n	8007b58 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	73fb      	strb	r3, [r7, #15]
 8007b4c:	e004      	b.n	8007b58 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007b4e:	79bb      	ldrb	r3, [r7, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007b54:	2301      	movs	r3, #1
 8007b56:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 fc6d 	bl	800143a <RBI_ConfigRFSwitch>
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007b72:	2301      	movs	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007b76:	f7f9 fc6e 	bl	8001456 <RBI_GetTxConfig>
 8007b7a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d016      	beq.n	8007bb0 <SUBGRF_SetRfTxPower+0x48>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	dc16      	bgt.n	8007bb6 <SUBGRF_SetRfTxPower+0x4e>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <SUBGRF_SetRfTxPower+0x2e>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d00a      	beq.n	8007baa <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007b94:	e00f      	b.n	8007bb6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9a:	2b0f      	cmp	r3, #15
 8007b9c:	dd02      	ble.n	8007ba4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	73fb      	strb	r3, [r7, #15]
            break;
 8007ba2:	e009      	b.n	8007bb8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	73fb      	strb	r3, [r7, #15]
            break;
 8007ba8:	e006      	b.n	8007bb8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
            break;
 8007bae:	e003      	b.n	8007bb8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	73fb      	strb	r3, [r7, #15]
            break;
 8007bb4:	e000      	b.n	8007bb8 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007bb6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007bb8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fc8b 	bl	80074dc <SUBGRF_SetTxParams>

    return paSelect;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007bd4:	2301      	movs	r3, #1
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
	...

08007be0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007be8:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2001      	movs	r0, #1
 8007bee:	4798      	blx	r3
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000450 	.word	0x20000450

08007bfc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007c04:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2002      	movs	r0, #2
 8007c0a:	4798      	blx	r3
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000450 	.word	0x20000450

08007c18 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007c20:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2040      	movs	r0, #64	; 0x40
 8007c26:	4798      	blx	r3
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000450 	.word	0x20000450

08007c34 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d005      	beq.n	8007c56 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8007c4a:	e00a      	b.n	8007c62 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007c4c:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2080      	movs	r0, #128	; 0x80
 8007c52:	4798      	blx	r3
            break;
 8007c54:	e005      	b.n	8007c62 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c5e:	4798      	blx	r3
            break;
 8007c60:	bf00      	nop
    }
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000450 	.word	0x20000450

08007c70 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c80:	4798      	blx	r3
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000450 	.word	0x20000450

08007c90 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2020      	movs	r0, #32
 8007c9e:	4798      	blx	r3
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000450 	.word	0x20000450

08007cac <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2004      	movs	r0, #4
 8007cba:	4798      	blx	r3
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000450 	.word	0x20000450

08007cc8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2008      	movs	r0, #8
 8007cd6:	4798      	blx	r3
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000450 	.word	0x20000450

08007ce4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2010      	movs	r0, #16
 8007cf2:	4798      	blx	r3
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000450 	.word	0x20000450

08007d00 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007d0a:	f7f9 fbb2 	bl	8001472 <RBI_IsDCDC>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d112      	bne.n	8007d3a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007d14:	f640 1023 	movw	r0, #2339	; 0x923
 8007d18:	f7ff fe6e 	bl	80079f8 <SUBGRF_ReadRegister>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	f023 0306 	bic.w	r3, r3, #6
 8007d26:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007d28:	7bfa      	ldrb	r2, [r7, #15]
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	4619      	mov	r1, r3
 8007d32:	f640 1023 	movw	r0, #2339	; 0x923
 8007d36:	f7ff fe4b 	bl	80079d0 <SUBGRF_WriteRegister>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007d52:	231f      	movs	r3, #31
 8007d54:	e016      	b.n	8007d84 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	e00f      	b.n	8007d7c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d205      	bcs.n	8007d76 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	e006      	b.n	8007d84 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b15      	cmp	r3, #21
 8007d80:	d9ec      	bls.n	8007d5c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8007d82:	e7fe      	b.n	8007d82 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	0800daa0 	.word	0x0800daa0

08007d94 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007d9e:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <SUBGRF_GetCFO+0xe4>)
 8007da0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8007da2:	f640 0007 	movw	r0, #2055	; 0x807
 8007da6:	f7ff fe27 	bl	80079f8 <SUBGRF_ReadRegister>
 8007daa:	4603      	mov	r3, r0
 8007dac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007dae:	7ffb      	ldrb	r3, [r7, #31]
 8007db0:	08db      	lsrs	r3, r3, #3
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007dc2:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8007dc4:	7ffb      	ldrb	r3, [r7, #31]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8007dcc:	7fba      	ldrb	r2, [r7, #30]
 8007dce:	7f7b      	ldrb	r3, [r7, #29]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4b28      	ldr	r3, [pc, #160]	; (8007e7c <SUBGRF_GetCFO+0xe8>)
 8007dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	2b07      	cmp	r3, #7
 8007dfc:	d802      	bhi.n	8007e04 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	fb02 f303 	mul.w	r3, r2, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d802      	bhi.n	8007e18 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007e12:	2304      	movs	r3, #4
 8007e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007e18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	fb02 f303 	mul.w	r3, r2, r3
 8007e22:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007e24:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007e28:	f7ff fde6 	bl	80079f8 <SUBGRF_ReadRegister>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e34:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8007e36:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007e3a:	f7ff fddd 	bl	80079f8 <SUBGRF_ReadRegister>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8007e58:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007e5c:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	fb02 f303 	mul.w	r3, r2, r3
 8007e68:	11da      	asrs	r2, r3, #7
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	0c0a0804 	.word	0x0c0a0804
 8007e7c:	01e84800 	.word	0x01e84800

08007e80 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8007ebc:	697b      	ldr	r3, [r7, #20]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr

08007ec8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8007ee6:	bf00      	nop
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr

08007eee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8007ef2:	2300      	movs	r3, #0
#endif
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr

08007efc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8007f00:	2300      	movs	r3, #0
#endif
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	4603      	mov	r3, r0
 8007f12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	460b      	mov	r3, r1
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8007f32:	697b      	ldr	r3, [r7, #20]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8007f5e:	bf00      	nop
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
	...

08007f7c <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8007f86:	2010      	movs	r0, #16
 8007f88:	f000 fef0 	bl	8008d6c <malloc>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d104      	bne.n	8007fa0 <list_new+0x24>
		perror("list_new()");
 8007f96:	4818      	ldr	r0, [pc, #96]	; (8007ff8 <list_new+0x7c>)
 8007f98:	f001 fcac 	bl	80098f4 <perror>
		return NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e027      	b.n	8007ff0 <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f000 f958 	bl	8008258 <list_node_new>
 8007fa8:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <list_new+0x3e>
		free(l);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fee3 	bl	8008d7c <free>
		return NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e01a      	b.n	8007ff0 <list_new+0x74>
	}

	l->sentinel = sentinel;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	601a      	str	r2, [r3, #0]
	l->size = 0;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <list_new+0x66>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	e000      	b.n	8007fe4 <list_new+0x68>
 8007fe2:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <list_new+0x80>)
	l->compare = (compare == NULL)
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	60da      	str	r2, [r3, #12]

	return l;
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	0800d6b0 	.word	0x0800d6b0
 8007ffc:	08008231 	.word	0x08008231

08008000 <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 8008012:	480e      	ldr	r0, [pc, #56]	; (800804c <list_insert+0x4c>)
 8008014:	f000 f99b 	bl	800834e <list_debug>
		return NULL;
 8008018:	2300      	movs	r3, #0
 800801a:	e012      	b.n	8008042 <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f89c 	bl	800815c <list_index>
 8008024:	4603      	mov	r3, r0
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f945 	bl	80082b8 <list_node_link>
 800802e:	6078      	str	r0, [r7, #4]
	if (n)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <list_insert+0x40>
		++self->size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	605a      	str	r2, [r3, #4]
	return n;
 8008040:	687b      	ldr	r3, [r7, #4]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	0800d6bc 	.word	0x0800d6bc

08008050 <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f856 	bl	800810c <list_head>
 8008060:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 8008062:	e00e      	b.n	8008082 <list_search+0x32>
		
		if (self->compare(data, n->data))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	68d2      	ldr	r2, [r2, #12]
 800806c:	4611      	mov	r1, r2
 800806e:	6838      	ldr	r0, [r7, #0]
 8008070:	4798      	blx	r3
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <list_search+0x2c>
			return n;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e00c      	b.n	8008096 <list_search+0x46>
		n = n->next;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f8c0 	bl	8008208 <list_end>
 8008088:	4603      	mov	r3, r0
 800808a:	f083 0301 	eor.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e7      	bne.n	8008064 <list_search+0x14>
	}
	return NULL;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 80080b0:	480b      	ldr	r0, [pc, #44]	; (80080e0 <list_remove+0x40>)
 80080b2:	f001 fc27 	bl	8009904 <iprintf>
		return ;
 80080b6:	e010      	b.n	80080da <list_remove+0x3a>
	}

	if(node == NULL)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00c      	beq.n	80080d8 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 80080be:	6838      	ldr	r0, [r7, #0]
 80080c0:	f000 f928 	bl	8008314 <list_node_unlink>
 80080c4:	60f8      	str	r0, [r7, #12]
	if (n)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <list_remove+0x3a>
	{
		--self->size;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	1e5a      	subs	r2, r3, #1
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	605a      	str	r2, [r3, #4]
 80080d6:	e000      	b.n	80080da <list_remove+0x3a>
		return ;
 80080d8:	bf00      	nop
	
	}

}
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	0800d6dc 	.word	0x0800d6dc

080080e4 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f876 	bl	80081e0 <list_size>
 80080f4:	4603      	mov	r3, r0
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ff80 	bl	8008000 <list_insert>
 8008100:	4603      	mov	r3, r0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d104      	bne.n	8008124 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 800811a:	480e      	ldr	r0, [pc, #56]	; (8008154 <list_head+0x48>)
 800811c:	f000 f917 	bl	800834e <list_debug>
		return NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	e012      	b.n	800814a <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f86d 	bl	8008208 <list_end>
 800812e:	4603      	mov	r3, r0
 8008130:	f083 0301 	eor.w	r3, r3, #1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 800813a:	4807      	ldr	r0, [pc, #28]	; (8008158 <list_head+0x4c>)
 800813c:	f000 f907 	bl	800834e <list_debug>
		return NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	e002      	b.n	800814a <list_head+0x3e>
	}

	return self->sentinel->next;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	0800d6fc 	.word	0x0800d6fc
 8008158:	0800d718 	.word	0x0800d718

0800815c <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f83a 	bl	80081e0 <list_size>
 800816c:	4603      	mov	r3, r0
 800816e:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	da03      	bge.n	800817e <list_index+0x22>
		pos += s;
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4413      	add	r3, r2
 800817c:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	0fda      	lsrs	r2, r3, #31
 8008186:	4413      	add	r3, r2
 8008188:	105b      	asrs	r3, r3, #1
 800818a:	461a      	mov	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4293      	cmp	r3, r2
 8008190:	dc11      	bgt.n	80081b6 <list_index+0x5a>
		n = list_head(self);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ffba 	bl	800810c <list_head>
 8008198:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
 800819e:	e005      	b.n	80081ac <list_index+0x50>
			n = n->next;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3301      	adds	r3, #1
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	dbf5      	blt.n	80081a0 <list_index+0x44>
 80081b4:	e00f      	b.n	80081d6 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	e005      	b.n	80081ce <list_index+0x72>
			n = n->prev;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	dcf5      	bgt.n	80081c2 <list_index+0x66>
	}

	return n;
 80081d6:	697b      	ldr	r3, [r7, #20]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 80081ee:	4805      	ldr	r0, [pc, #20]	; (8008204 <list_size+0x24>)
 80081f0:	f000 f8ad 	bl	800834e <list_debug>
		return 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e001      	b.n	80081fc <list_size+0x1c>
	}

	return self->size;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	0800d77c 	.word	0x0800d77c

08008208 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <list_end+0x18>
		list_debug("list_end(): n was NULL");
 8008216:	4805      	ldr	r0, [pc, #20]	; (800822c <list_end+0x24>)
 8008218:	f000 f899 	bl	800834e <list_debug>
		return false;
 800821c:	2300      	movs	r3, #0
 800821e:	e001      	b.n	8008224 <list_end+0x1c>
	}

	return n->sentinel;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7a1b      	ldrb	r3, [r3, #8]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	0800d798 	.word	0x0800d798

08008230 <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7f7 ff9f 	bl	8000180 <strcmp>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	bf0c      	ite	eq
 8008248:	2301      	moveq	r3, #1
 800824a:	2300      	movne	r3, #0
 800824c:	b2db      	uxtb	r3, r3
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 8008262:	2010      	movs	r0, #16
 8008264:	f000 fd82 	bl	8008d6c <malloc>
 8008268:	4603      	mov	r3, r0
 800826a:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <list_node_new+0x24>
		perror("list_node_new()");
 8008272:	4810      	ldr	r0, [pc, #64]	; (80082b4 <list_node_new+0x5c>)
 8008274:	f001 fb3e 	bl	80098f4 <perror>
		return NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	e017      	b.n	80082ac <list_node_new+0x54>
	}

	n->sentinel = false;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 800828e:	6838      	ldr	r0, [r7, #0]
 8008290:	f000 fd6c 	bl	8008d6c <malloc>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fd71 	bl	8008d8c <memcpy>
	return n;
 80082aa:	68fb      	ldr	r3, [r7, #12]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	0800d824 	.word	0x0800d824

080082b8 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 80082c8:	4810      	ldr	r0, [pc, #64]	; (800830c <list_node_link+0x54>)
 80082ca:	f000 f840 	bl	800834e <list_debug>
		return NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e017      	b.n	8008302 <list_node_link+0x4a>
	}

	if (c == NULL) {
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 80082d8:	480d      	ldr	r0, [pc, #52]	; (8008310 <list_node_link+0x58>)
 80082da:	f000 f838 	bl	800834e <list_debug>
		return NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	e00f      	b.n	8008302 <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

	a->next = b;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
	b->prev = a;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	605a      	str	r2, [r3, #4]
	b->next = c;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	601a      	str	r2, [r3, #0]
	c->prev = b;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]

	return b;
 8008300:	687b      	ldr	r3, [r7, #4]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	0800d834 	.word	0x0800d834
 8008310:	0800d854 	.word	0x0800d854

08008314 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ff73 	bl	8008208 <list_end>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <list_node_unlink+0x18>
		return NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	e00c      	b.n	8008346 <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60bb      	str	r3, [r7, #8]

	a->next = c;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	601a      	str	r2, [r3, #0]
	c->prev = a;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	605a      	str	r2, [r3, #4]

	return b;
 8008344:	687b      	ldr	r3, [r7, #4]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <list_debug>:

static void list_debug(const char *format, ...)
{
 800834e:	b40f      	push	{r0, r1, r2, r3}
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	b004      	add	sp, #16
 800835e:	4770      	bx	lr

08008360 <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	789b      	ldrb	r3, [r3, #2]
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4293      	cmp	r3, r2
 800837c:	d101      	bne.n	8008382 <find_packet_by_Id+0x22>
    {
        return true ;
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 8008382:	2300      	movs	r3, #0
    }
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	789b      	ldrb	r3, [r3, #2]
 80083a4:	461a      	mov	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d101      	bne.n	80083b0 <rx_find_by_id+0x22>
	{
		return true ;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <rx_find_by_id+0x24>
	}
	else{
		return false ;
 80083b0:	2300      	movs	r3, #0
	}
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 80083c6:	4a0d      	ldr	r2, [pc, #52]	; (80083fc <ll_init+0x40>)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 80083cc:	490c      	ldr	r1, [pc, #48]	; (8008400 <ll_init+0x44>)
 80083ce:	480d      	ldr	r0, [pc, #52]	; (8008404 <ll_init+0x48>)
 80083d0:	f7ff fdd4 	bl	8007f7c <list_new>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4a0c      	ldr	r2, [pc, #48]	; (8008408 <ll_init+0x4c>)
 80083d8:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 80083da:	4909      	ldr	r1, [pc, #36]	; (8008400 <ll_init+0x44>)
 80083dc:	480b      	ldr	r0, [pc, #44]	; (800840c <ll_init+0x50>)
 80083de:	f7ff fdcd 	bl	8007f7c <list_new>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <ll_init+0x54>)
 80083e6:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <ll_init+0x58>)
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083f0:	4798      	blx	r3

	return 0 ;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	2000000a 	.word	0x2000000a
 8008400:	08008d7d 	.word	0x08008d7d
 8008404:	08008361 	.word	0x08008361
 8008408:	200005f4 	.word	0x200005f4
 800840c:	0800838f 	.word	0x0800838f
 8008410:	200005f0 	.word	0x200005f0
 8008414:	0800da18 	.word	0x0800da18

08008418 <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b091      	sub	sp, #68	; 0x44
 800841c:	af04      	add	r7, sp, #16
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	4603      	mov	r3, r0
 8008422:	71fb      	strb	r3, [r7, #7]
 8008424:	460b      	mov	r3, r1
 8008426:	71bb      	strb	r3, [r7, #6]
 8008428:	4613      	mov	r3, r2
 800842a:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <ll_send_packet+0x80>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fed5 	bl	80081e0 <list_size>
 8008436:	4603      	mov	r3, r0
 8008438:	2b09      	cmp	r3, #9
 800843a:	d902      	bls.n	8008442 <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 800843c:	f06f 0309 	mvn.w	r3, #9
 8008440:	e026      	b.n	8008490 <ll_send_packet+0x78>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 8008442:	4b16      	ldr	r3, [pc, #88]	; (800849c <ll_send_packet+0x84>)
 8008444:	7819      	ldrb	r1, [r3, #0]
 8008446:	79bc      	ldrb	r4, [r7, #6]
 8008448:	79fa      	ldrb	r2, [r7, #7]
 800844a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800844e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	797b      	ldrb	r3, [r7, #5]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4623      	mov	r3, r4
 800845e:	f000 fac3 	bl	80089e8 <packet>
	
	tmp_holder.packet = tmp ;
 8008462:	f107 030c 	add.w	r3, r7, #12
 8008466:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800846a:	ca07      	ldmia	r2, {r0, r1, r2}
 800846c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008470:	2300      	movs	r3, #0
 8008472:	623b      	str	r3, [r7, #32]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <ll_send_packet+0x80>)
 8008476:	681c      	ldr	r4, [r3, #0]
 8008478:	f107 030c 	add.w	r3, r7, #12
 800847c:	2118      	movs	r1, #24
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff feea 	bl	8008258 <list_node_new>
 8008484:	4603      	mov	r3, r0
 8008486:	4619      	mov	r1, r3
 8008488:	4620      	mov	r0, r4
 800848a:	f7ff fe2b 	bl	80080e4 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3734      	adds	r7, #52	; 0x34
 8008494:	46bd      	mov	sp, r7
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	200005f4 	.word	0x200005f4
 800849c:	2000000a 	.word	0x2000000a

080084a0 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	4603      	mov	r3, r0
 80084a8:	460a      	mov	r2, r1
 80084aa:	71fb      	strb	r3, [r7, #7]
 80084ac:	4613      	mov	r3, r2
 80084ae:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0);
 80084b0:	79ba      	ldrb	r2, [r7, #6]
 80084b2:	79f8      	ldrb	r0, [r7, #7]
 80084b4:	2300      	movs	r3, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	2102      	movs	r1, #2
 80084bc:	f7ff ffac 	bl	8008418 <ll_send_packet>
 80084c0:	4603      	mov	r3, r0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af02      	add	r7, sp, #8
 80084d0:	4603      	mov	r3, r0
 80084d2:	460a      	mov	r2, r1
 80084d4:	71fb      	strb	r3, [r7, #7]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0);
 80084da:	79ba      	ldrb	r2, [r7, #6]
 80084dc:	79f8      	ldrb	r0, [r7, #7]
 80084de:	2300      	movs	r3, #0
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	2103      	movs	r1, #3
 80084e6:	f7ff ff97 	bl	8008418 <ll_send_packet>
 80084ea:	4603      	mov	r3, r0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <ll_transmit>:
{
	return list_size(Tx_packet_list)  ;
}

void ll_transmit(void) 
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 80084fa:	4b4d      	ldr	r3, [pc, #308]	; (8008630 <ll_transmit+0x13c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fe6e 	bl	80081e0 <list_size>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 808d 	beq.w	8008626 <ll_transmit+0x132>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 800850c:	e073      	b.n	80085f6 <ll_transmit+0x102>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 800850e:	4b48      	ldr	r3, [pc, #288]	; (8008630 <ll_transmit+0x13c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a48      	ldr	r2, [pc, #288]	; (8008634 <ll_transmit+0x140>)
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fe1f 	bl	800815c <list_index>
 800851e:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fbe1 	bl	8008cf2 <packet_get_size>
 8008530:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fc19 	bl	8008d6c <malloc>
 800853a:	4603      	mov	r3, r0
 800853c:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fada 	bl	8008afa <packet_serialize>

		//send to network
		if(buff != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01c      	beq.n	8008586 <ll_transmit+0x92>
		{
			network_transmit_index++;
 800854c:	4b39      	ldr	r3, [pc, #228]	; (8008634 <ll_transmit+0x140>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a38      	ldr	r2, [pc, #224]	; (8008634 <ll_transmit+0x140>)
 8008554:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	615a      	str	r2, [r3, #20]
			Radio.Send(buff , packet_size) ;
 8008560:	4b35      	ldr	r3, [pc, #212]	; (8008638 <ll_transmit+0x144>)
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	4611      	mov	r1, r2
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
			//wait for the transmition to complete
			while(tarnsmition_done == false);
 800856e:	bf00      	nop
 8008570:	4b32      	ldr	r3, [pc, #200]	; (800863c <ll_transmit+0x148>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f083 0301 	eor.w	r3, r3, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f8      	bne.n	8008570 <ll_transmit+0x7c>
			//break ;
			free(buff) ;
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fbfc 	bl	8008d7c <free>
 8008584:	e005      	b.n	8008592 <ll_transmit+0x9e>
		}
		else if(buff == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <ll_transmit+0x9e>
		{
			printf("\npacket_serialize FAILED\n");
 800858c:	482c      	ldr	r0, [pc, #176]	; (8008640 <ll_transmit+0x14c>)
 800858e:	f001 fa3f 	bl	8009a10 <puts>
		}

		

		tarnsmition_done = false ;
 8008592:	4b2a      	ldr	r3, [pc, #168]	; (800863c <ll_transmit+0x148>)
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	78db      	ldrb	r3, [r3, #3]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d10e      	bne.n	80085be <ll_transmit+0xca>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 80085a0:	4b23      	ldr	r3, [pc, #140]	; (8008630 <ll_transmit+0x13c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fd7a 	bl	80080a0 <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fbe5 	bl	8008d7c <free>
			free(holder);
 80085b2:	6938      	ldr	r0, [r7, #16]
 80085b4:	f000 fbe2 	bl	8008d7c <free>
			free(node) ;
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	f000 fbdf 	bl	8008d7c <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	dd17      	ble.n	80085f6 <ll_transmit+0x102>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <ll_transmit+0x13c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6979      	ldr	r1, [r7, #20]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fd67 	bl	80080a0 <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d104      	bne.n	80085e4 <ll_transmit+0xf0>
			{
				free(pack->payload) ;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fbcc 	bl	8008d7c <free>
			}

			free(pack) ;
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fbc9 	bl	8008d7c <free>
			free(holder);
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f000 fbc6 	bl	8008d7c <free>
			free(node);
 80085f0:	6978      	ldr	r0, [r7, #20]
 80085f2:	f000 fbc3 	bl	8008d7c <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 80085f6:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <ll_transmit+0x13c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fdf0 	bl	80081e0 <list_size>
 8008600:	4602      	mov	r2, r0
 8008602:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <ll_transmit+0x140>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d881      	bhi.n	800850e <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <ll_transmit+0x13c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fde6 	bl	80081e0 <list_size>
 8008614:	4602      	mov	r2, r0
 8008616:	4b07      	ldr	r3, [pc, #28]	; (8008634 <ll_transmit+0x140>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d804      	bhi.n	8008628 <ll_transmit+0x134>
	{
		network_transmit_index = 0 ;	
 800861e:	4b05      	ldr	r3, [pc, #20]	; (8008634 <ll_transmit+0x140>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e000      	b.n	8008628 <ll_transmit+0x134>
		return ;
 8008626:	bf00      	nop
	}
}
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200005f4 	.word	0x200005f4
 8008634:	20000454 	.word	0x20000454
 8008638:	0800da18 	.word	0x0800da18
 800863c:	20000460 	.word	0x20000460
 8008640:	0800d874 	.word	0x0800d874

08008644 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b08f      	sub	sp, #60	; 0x3c
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 800864e:	f107 0320 	add.w	r3, r7, #32
 8008652:	461a      	mov	r2, r3
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 faac 	bl	8008bb4 <packet_desirialize>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d152      	bne.n	8008708 <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 8008662:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008666:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <ll_receive+0xdc>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d14f      	bne.n	800870e <ll_receive+0xca>
 800866e:	4b2d      	ldr	r3, [pc, #180]	; (8008724 <ll_receive+0xe0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fdb4 	bl	80081e0 <list_size>
 8008678:	4603      	mov	r3, r0
 800867a:	2b09      	cmp	r3, #9
 800867c:	d847      	bhi.n	800870e <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 800867e:	4b29      	ldr	r3, [pc, #164]	; (8008724 <ll_receive+0xe0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fdac 	bl	80081e0 <list_size>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d021      	beq.n	80086d2 <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 800868e:	4b25      	ldr	r3, [pc, #148]	; (8008724 <ll_receive+0xe0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fcd9 	bl	8008050 <list_search>
 800869e:	6378      	str	r0, [r7, #52]	; 0x34
				if(n != NULL )
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d015      	beq.n	80086d2 <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	633b      	str	r3, [r7, #48]	; 0x30
					packet_t * pack = (packet_t*) &(holder)->packet ;
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	78da      	ldrb	r2, [r3, #3]
 80086b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d10a      	bne.n	80086d2 <ll_receive+0x8e>
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	791a      	ldrb	r2, [r3, #4]
 80086c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d104      	bne.n	80086d2 <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fb56 	bl	8008d7c <free>
 80086d0:	e022      	b.n	8008718 <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 80086d2:	f107 0308 	add.w	r3, r7, #8
 80086d6:	f107 0220 	add.w	r2, r7, #32
 80086da:	ca07      	ldmia	r2, {r0, r1, r2}
 80086dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 80086e0:	f7f8 fd1b 	bl	800111a <sys_get_tick>
 80086e4:	4603      	mov	r3, r0
 80086e6:	61bb      	str	r3, [r7, #24]
			packet_holder.number_of_transmition = 0 ;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <ll_receive+0xe0>)
 80086ee:	681c      	ldr	r4, [r3, #0]
 80086f0:	f107 0308 	add.w	r3, r7, #8
 80086f4:	2118      	movs	r1, #24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fdae 	bl	8008258 <list_node_new>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4619      	mov	r1, r3
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fcef 	bl	80080e4 <list_push_back>
 8008706:	e002      	b.n	800870e <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 8008708:	4807      	ldr	r0, [pc, #28]	; (8008728 <ll_receive+0xe4>)
 800870a:	f001 f981 	bl	8009a10 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <ll_receive+0xe8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a05      	ldr	r2, [pc, #20]	; (800872c <ll_receive+0xe8>)
 8008716:	6013      	str	r3, [r2, #0]

}
 8008718:	373c      	adds	r7, #60	; 0x3c
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}
 800871e:	bf00      	nop
 8008720:	2000000a 	.word	0x2000000a
 8008724:	200005f0 	.word	0x200005f0
 8008728:	0800d890 	.word	0x0800d890
 800872c:	2000045c 	.word	0x2000045c

08008730 <ll_process_received>:

void ll_process_received()
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008736:	e0a4      	b.n	8008882 <ll_process_received+0x152>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8008738:	4b60      	ldr	r3, [pc, #384]	; (80088bc <ll_process_received+0x18c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a60      	ldr	r2, [pc, #384]	; (80088c0 <ll_process_received+0x190>)
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fd0a 	bl	800815c <list_index>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	61fb      	str	r3, [r7, #28]

		//debug_packet(packet) ;


		if(packet->type == PACK_TYPE_DATA)
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	78db      	ldrb	r3, [r3, #3]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d110      	bne.n	800877e <ll_process_received+0x4e>
			// ASK packet should be sent ,the data will be read later
			// by recv_from function ,also packet should be removed after certain time

			//number_of_transmition used to assure that a ASK has been send to confirm data recv
			//data packet will be removed by ll_get_recv_from
			if( holder->number_of_transmition == 0)
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f040 8089 	bne.w	8008878 <ll_process_received+0x148>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	789b      	ldrb	r3, [r3, #2]
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7ff fe95 	bl	80084a0 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	2201      	movs	r2, #1
 800877a:	615a      	str	r2, [r3, #20]
 800877c:	e07c      	b.n	8008878 <ll_process_received+0x148>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	78db      	ldrb	r3, [r3, #3]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d141      	bne.n	800880a <ll_process_received+0xda>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008786:	4b4f      	ldr	r3, [pc, #316]	; (80088c4 <ll_process_received+0x194>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f7ff fc5d 	bl	8008050 <list_search>
 8008796:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10f      	bne.n	80087be <ll_process_received+0x8e>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 800879e:	4b47      	ldr	r3, [pc, #284]	; (80088bc <ll_process_received+0x18c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fc7b 	bl	80080a0 <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 80087aa:	69f8      	ldr	r0, [r7, #28]
 80087ac:	f000 fae6 	bl	8008d7c <free>
				free(holder) ;
 80087b0:	6a38      	ldr	r0, [r7, #32]
 80087b2:	f000 fae3 	bl	8008d7c <free>
				free(n);
 80087b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087b8:	f000 fae0 	bl	8008d7c <free>
 80087bc:	e05c      	b.n	8008878 <ll_process_received+0x148>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d153      	bne.n	8008878 <ll_process_received+0x148>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7ff fe75 	bl	80084ca <ll_send_NANK>
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 80087e0:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <ll_process_received+0x194>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68f9      	ldr	r1, [r7, #12]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fc5a 	bl	80080a0 <list_remove>
					//free memory
					free(pack_p->payload) ;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fac3 	bl	8008d7c <free>
					free(pack_p) ;
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fac0 	bl	8008d7c <free>
					free(h);
 80087fc:	68b8      	ldr	r0, [r7, #8]
 80087fe:	f000 fabd 	bl	8008d7c <free>
					free(tx_data_node) ;
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 faba 	bl	8008d7c <free>
 8008808:	e036      	b.n	8008878 <ll_process_received+0x148>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	78db      	ldrb	r3, [r3, #3]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d132      	bne.n	8008878 <ll_process_received+0x148>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008812:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <ll_process_received+0x194>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	4619      	mov	r1, r3
 800881c:	4610      	mov	r0, r2
 800881e:	f7ff fc17 	bl	8008050 <list_search>
 8008822:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d017      	beq.n	800885a <ll_process_received+0x12a>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	78db      	ldrb	r3, [r3, #3]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d10e      	bne.n	800885a <ll_process_received+0x12a>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 800883c:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <ll_process_received+0x194>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69b9      	ldr	r1, [r7, #24]
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fc2c 	bl	80080a0 <list_remove>

					//release memory

					free(ask_packet);
 8008848:	6938      	ldr	r0, [r7, #16]
 800884a:	f000 fa97 	bl	8008d7c <free>
					free(p_holder) ;
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f000 fa94 	bl	8008d7c <free>
					free(tx_ask_node) ;
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f000 fa91 	bl	8008d7c <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 800885a:	4b18      	ldr	r3, [pc, #96]	; (80088bc <ll_process_received+0x18c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fc1d 	bl	80080a0 <list_remove>
			free(packet);
 8008866:	69f8      	ldr	r0, [r7, #28]
 8008868:	f000 fa88 	bl	8008d7c <free>
			free(holder);
 800886c:	6a38      	ldr	r0, [r7, #32]
 800886e:	f000 fa85 	bl	8008d7c <free>
			free(n);
 8008872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008874:	f000 fa82 	bl	8008d7c <free>
		}

		rx_packet_index++;
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <ll_process_received+0x190>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <ll_process_received+0x190>)
 8008880:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008882:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <ll_process_received+0x18c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fcaa 	bl	80081e0 <list_size>
 800888c:	4602      	mov	r2, r0
 800888e:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <ll_process_received+0x190>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	f63f af50 	bhi.w	8008738 <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index > list_size(Rx_packet_list))
 8008898:	4b08      	ldr	r3, [pc, #32]	; (80088bc <ll_process_received+0x18c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fc9f 	bl	80081e0 <list_size>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <ll_process_received+0x190>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d202      	bcs.n	80088b2 <ll_process_received+0x182>
	{
		rx_packet_index = 0;
 80088ac:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <ll_process_received+0x190>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
	}

}
 80088b2:	bf00      	nop
 80088b4:	3728      	adds	r7, #40	; 0x28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	200005f0 	.word	0x200005f0
 80088c0:	20000458 	.word	0x20000458
 80088c4:	200005f4 	.word	0x200005f4

080088c8 <ll_get_recv_from>:

int  ll_get_recv_from(u8 src ,u8 *data )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	71fb      	strb	r3, [r7, #7]


	int rx_list_size = list_size(Rx_packet_list) ;
 80088d4:	4b2d      	ldr	r3, [pc, #180]	; (800898c <ll_get_recv_from+0xc4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fc81 	bl	80081e0 <list_size>
 80088de:	4603      	mov	r3, r0
 80088e0:	61bb      	str	r3, [r7, #24]



	if(rx_list_size == 0)
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <ll_get_recv_from+0x24>
		return 0 ;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e04b      	b.n	8008984 <ll_get_recv_from+0xbc>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	e043      	b.n	800897a <ll_get_recv_from+0xb2>
	{
		node = list_index(Rx_packet_list , i) ;
 80088f2:	4b26      	ldr	r3, [pc, #152]	; (800898c <ll_get_recv_from+0xc4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fc2f 	bl	800815c <list_index>
 80088fe:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	60fb      	str	r3, [r7, #12]

		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	78db      	ldrb	r3, [r3, #3]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d130      	bne.n	8008974 <ll_get_recv_from+0xac>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	79fa      	ldrb	r2, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d12b      	bne.n	8008974 <ll_get_recv_from+0xac>
		{
			int data_length =  pack->payload_length ;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	791b      	ldrb	r3, [r3, #4]
 8008920:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4619      	mov	r1, r3
 800892a:	6838      	ldr	r0, [r7, #0]
 800892c:	f000 fa2e 	bl	8008d8c <memcpy>

			if( holder->number_of_transmition == 0)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <ll_get_recv_from+0x80>
			{
#ifdef PROT_DEBUG
				printf("ASK send From ll_get_recv_from\n");
#endif
				ll_send_ASK(pack->src , pack->id) ;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7ff fdac 	bl	80084a0 <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 8008948:	4b10      	ldr	r3, [pc, #64]	; (800898c <ll_get_recv_from+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6979      	ldr	r1, [r7, #20]
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fba6 	bl	80080a0 <list_remove>
			free(pack->payload) ;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa0f 	bl	8008d7c <free>
			free(pack) ;
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fa0c 	bl	8008d7c <free>
			free(holder) ;
 8008964:	6938      	ldr	r0, [r7, #16]
 8008966:	f000 fa09 	bl	8008d7c <free>
			free(node) ;
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	f000 fa06 	bl	8008d7c <free>
			return data_length ;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	e007      	b.n	8008984 <ll_get_recv_from+0xbc>
	for(int i = 0 ; i < rx_list_size ; i++)
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	3301      	adds	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	429a      	cmp	r2, r3
 8008980:	dbb7      	blt.n	80088f2 <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	200005f0 	.word	0x200005f0

08008990 <ll_process>:


u32 process_tmr = 0;
//this function should manage send and receive operations
void ll_process(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0

	ll_process_received();
 8008994:	f7ff fecc 	bl	8008730 <ll_process_received>
    if(sys_get_tick() - process_tmr > 1000)
 8008998:	f7f8 fbbf 	bl	800111a <sys_get_tick>
 800899c:	4602      	mov	r2, r0
 800899e:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <ll_process+0x38>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089a8:	d90b      	bls.n	80089c2 <ll_process+0x32>
    {
	    ll_transmit() ;
 80089aa:	f7ff fda3 	bl	80084f4 <ll_transmit>
	    Radio.Rx(1000);
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <ll_process+0x3c>)
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089b6:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 80089b8:	f7f8 fbaf 	bl	800111a <sys_get_tick>
 80089bc:	4603      	mov	r3, r0
 80089be:	4a02      	ldr	r2, [pc, #8]	; (80089c8 <ll_process+0x38>)
 80089c0:	6013      	str	r3, [r2, #0]

		default:
			break ;
		}
	*/
}
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000464 	.word	0x20000464
 80089cc:	0800da18 	.word	0x0800da18

080089d0 <ll_set_transmition_done>:


void ll_set_transmition_done()
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 80089d4:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <ll_set_transmition_done+0x14>)
 80089d6:	2201      	movs	r2, #1
 80089d8:	701a      	strb	r2, [r3, #0]
}
 80089da:	bf00      	nop
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000460 	.word	0x20000460

080089e8 <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	4608      	mov	r0, r1
 80089f2:	4611      	mov	r1, r2
 80089f4:	461a      	mov	r2, r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	70fb      	strb	r3, [r7, #3]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70bb      	strb	r3, [r7, #2]
 80089fe:	4613      	mov	r3, r2
 8008a00:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f819 	bl	8008a3e <packet_set_src>
	packet_set_dest(pack  , dest) ;
 8008a0c:	78bb      	ldrb	r3, [r7, #2]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f822 	bl	8008a5a <packet_set_dest>
	packet_set_type(pack , type );
 8008a16:	787b      	ldrb	r3, [r7, #1]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f82b 	bl	8008a76 <packet_set_type>
	packet_set_id(pack ,id) ;
 8008a20:	7c3b      	ldrb	r3, [r7, #16]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f85a 	bl	8008ade <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 8008a2a:	7e3b      	ldrb	r3, [r7, #24]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6979      	ldr	r1, [r7, #20]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f82e 	bl	8008a92 <packet_set_payload>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	701a      	strb	r2, [r3, #0]
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr

08008a5a <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	705a      	strb	r2, [r3, #1]
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr

08008a76 <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	70da      	strb	r2, [r3, #3]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr

08008a92 <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d016      	beq.n	8008ad2 <packet_set_payload+0x40>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d013      	beq.n	8008ad2 <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 f95d 	bl	8008d6c <malloc>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f962 	bl	8008d8c <memcpy>
		pack->payload_length = len ;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	711a      	strb	r2, [r3, #4]
		return ;
 8008ad0:	e002      	b.n	8008ad8 <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	711a      	strb	r2, [r3, #4]
	
}
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	709a      	strb	r2, [r3, #2]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <packet_serialize>:
	printf("\n");
	
}

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	3307      	adds	r3, #7
 8008b0a:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d04a      	beq.n	8008ba8 <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	785a      	ldrb	r2, [r3, #1]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	3301      	adds	r3, #1
 8008b22:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	789a      	ldrb	r2, [r3, #2]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	78da      	ldrb	r2, [r3, #3]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	791a      	ldrb	r2, [r3, #4]
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6899      	ldr	r1, [r3, #8]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6938      	ldr	r0, [r7, #16]
 8008b68:	f000 f910 	bl	8008d8c <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	791b      	ldrb	r3, [r3, #4]
 8008b70:	3305      	adds	r3, #5
 8008b72:	4619      	mov	r1, r3
 8008b74:	6838      	ldr	r0, [r7, #0]
 8008b76:	f000 f873 	bl	8008c60 <check_sum>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	461a      	mov	r2, r3
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4413      	add	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	e000      	b.n	8008baa <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 8008ba8:	2300      	movs	r3, #0
	}
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	3b02      	subs	r3, #2
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	8afb      	ldrh	r3, [r7, #22]
 8008bdc:	4413      	add	r3, r2
 8008bde:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	3b02      	subs	r3, #2
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f83a 	bl	8008c60 <check_sum>
 8008bec:	4603      	mov	r3, r0
 8008bee:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 8008bf0:	8aba      	ldrh	r2, [r7, #20]
 8008bf2:	8afb      	ldrh	r3, [r7, #22]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d005      	beq.n	8008c04 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 8008bf8:	4818      	ldr	r0, [pc, #96]	; (8008c5c <packet_desirialize+0xa8>)
 8008bfa:	f000 ff09 	bl	8009a10 <puts>
		return PACK_CHECKSUM_ERROR ;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	e026      	b.n	8008c52 <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	785a      	ldrb	r2, [r3, #1]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	78da      	ldrb	r2, [r3, #3]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	789a      	ldrb	r2, [r3, #2]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	791a      	ldrb	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f89b 	bl	8008d6c <malloc>
 8008c36:	4603      	mov	r3, r0
 8008c38:	461a      	mov	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6898      	ldr	r0, [r3, #8]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1d59      	adds	r1, r3, #5
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	791b      	ldrb	r3, [r3, #4]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 f89e 	bl	8008d8c <memcpy>
	
	return PACK_OK ;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	0800d940 	.word	0x0800d940

08008c60 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8008c72:	e017      	b.n	8008ca4 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4413      	add	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	3b02      	subs	r3, #2
 8008c9c:	603b      	str	r3, [r7, #0]
		i += 2;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	617b      	str	r3, [r7, #20]
	while(len>1)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	dce4      	bgt.n	8008c74 <check_sum+0x14>
	}
	
	if(len >0)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd13      	ble.n	8008cd8 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 8008cc2:	e009      	b.n	8008cd8 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	0c1b      	lsrs	r3, r3, #16
 8008cce:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 8008cd0:	89fb      	ldrh	r3, [r7, #14]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cde:	daf1      	bge.n	8008cc4 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	b29b      	uxth	r3, r3
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr

08008cf2 <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	791b      	ldrb	r3, [r3, #4]
 8008cfe:	3307      	adds	r3, #7
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr

08008d0a <atof>:
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	f001 bebc 	b.w	800aa88 <strtod>

08008d10 <atoi>:
 8008d10:	220a      	movs	r2, #10
 8008d12:	2100      	movs	r1, #0
 8008d14:	f001 bf4a 	b.w	800abac <strtol>

08008d18 <__errno>:
 8008d18:	4b01      	ldr	r3, [pc, #4]	; (8008d20 <__errno+0x8>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	2000000c 	.word	0x2000000c

08008d24 <__libc_init_array>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	4d0d      	ldr	r5, [pc, #52]	; (8008d5c <__libc_init_array+0x38>)
 8008d28:	4c0d      	ldr	r4, [pc, #52]	; (8008d60 <__libc_init_array+0x3c>)
 8008d2a:	1b64      	subs	r4, r4, r5
 8008d2c:	10a4      	asrs	r4, r4, #2
 8008d2e:	2600      	movs	r6, #0
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	d109      	bne.n	8008d48 <__libc_init_array+0x24>
 8008d34:	4d0b      	ldr	r5, [pc, #44]	; (8008d64 <__libc_init_array+0x40>)
 8008d36:	4c0c      	ldr	r4, [pc, #48]	; (8008d68 <__libc_init_array+0x44>)
 8008d38:	f004 fbb4 	bl	800d4a4 <_init>
 8008d3c:	1b64      	subs	r4, r4, r5
 8008d3e:	10a4      	asrs	r4, r4, #2
 8008d40:	2600      	movs	r6, #0
 8008d42:	42a6      	cmp	r6, r4
 8008d44:	d105      	bne.n	8008d52 <__libc_init_array+0x2e>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4c:	4798      	blx	r3
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7ee      	b.n	8008d30 <__libc_init_array+0xc>
 8008d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d56:	4798      	blx	r3
 8008d58:	3601      	adds	r6, #1
 8008d5a:	e7f2      	b.n	8008d42 <__libc_init_array+0x1e>
 8008d5c:	0800e69c 	.word	0x0800e69c
 8008d60:	0800e69c 	.word	0x0800e69c
 8008d64:	0800e69c 	.word	0x0800e69c
 8008d68:	0800e6a0 	.word	0x0800e6a0

08008d6c <malloc>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <malloc+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f000 b86f 	b.w	8008e54 <_malloc_r>
 8008d76:	bf00      	nop
 8008d78:	2000000c 	.word	0x2000000c

08008d7c <free>:
 8008d7c:	4b02      	ldr	r3, [pc, #8]	; (8008d88 <free+0xc>)
 8008d7e:	4601      	mov	r1, r0
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	f000 b819 	b.w	8008db8 <_free_r>
 8008d86:	bf00      	nop
 8008d88:	2000000c 	.word	0x2000000c

08008d8c <memcpy>:
 8008d8c:	440a      	add	r2, r1
 8008d8e:	4291      	cmp	r1, r2
 8008d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d94:	d100      	bne.n	8008d98 <memcpy+0xc>
 8008d96:	4770      	bx	lr
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d1f9      	bne.n	8008d9a <memcpy+0xe>
 8008da6:	bd10      	pop	{r4, pc}

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <_free_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4605      	mov	r5, r0
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d045      	beq.n	8008e4c <_free_r+0x94>
 8008dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc4:	1f0c      	subs	r4, r1, #4
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bfb8      	it	lt
 8008dca:	18e4      	addlt	r4, r4, r3
 8008dcc:	f003 fc1c 	bl	800c608 <__malloc_lock>
 8008dd0:	4a1f      	ldr	r2, [pc, #124]	; (8008e50 <_free_r+0x98>)
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	b933      	cbnz	r3, 8008de6 <_free_r+0x2e>
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	6014      	str	r4, [r2, #0]
 8008ddc:	4628      	mov	r0, r5
 8008dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de2:	f003 bc17 	b.w	800c614 <__malloc_unlock>
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	d90b      	bls.n	8008e02 <_free_r+0x4a>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	1862      	adds	r2, r4, r1
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bf04      	itt	eq
 8008df2:	681a      	ldreq	r2, [r3, #0]
 8008df4:	685b      	ldreq	r3, [r3, #4]
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	bf04      	itt	eq
 8008dfa:	1852      	addeq	r2, r2, r1
 8008dfc:	6022      	streq	r2, [r4, #0]
 8008dfe:	6004      	str	r4, [r0, #0]
 8008e00:	e7ec      	b.n	8008ddc <_free_r+0x24>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x54>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x4a>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1850      	adds	r0, r2, r1
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x74>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	4401      	add	r1, r0
 8008e18:	1850      	adds	r0, r2, r1
 8008e1a:	4283      	cmp	r3, r0
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1dd      	bne.n	8008ddc <_free_r+0x24>
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4401      	add	r1, r0
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	e7d7      	b.n	8008ddc <_free_r+0x24>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x7c>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	e7d3      	b.n	8008ddc <_free_r+0x24>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	1821      	adds	r1, r4, r0
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1809      	addeq	r1, r1, r0
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7c7      	b.n	8008ddc <_free_r+0x24>
 8008e4c:	bd38      	pop	{r3, r4, r5, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000468 	.word	0x20000468

08008e54 <_malloc_r>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	1ccd      	adds	r5, r1, #3
 8008e58:	f025 0503 	bic.w	r5, r5, #3
 8008e5c:	3508      	adds	r5, #8
 8008e5e:	2d0c      	cmp	r5, #12
 8008e60:	bf38      	it	cc
 8008e62:	250c      	movcc	r5, #12
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	4606      	mov	r6, r0
 8008e68:	db01      	blt.n	8008e6e <_malloc_r+0x1a>
 8008e6a:	42a9      	cmp	r1, r5
 8008e6c:	d903      	bls.n	8008e76 <_malloc_r+0x22>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e76:	f003 fbc7 	bl	800c608 <__malloc_lock>
 8008e7a:	4921      	ldr	r1, [pc, #132]	; (8008f00 <_malloc_r+0xac>)
 8008e7c:	680a      	ldr	r2, [r1, #0]
 8008e7e:	4614      	mov	r4, r2
 8008e80:	b99c      	cbnz	r4, 8008eaa <_malloc_r+0x56>
 8008e82:	4f20      	ldr	r7, [pc, #128]	; (8008f04 <_malloc_r+0xb0>)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	b923      	cbnz	r3, 8008e92 <_malloc_r+0x3e>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 fdc8 	bl	8009a20 <_sbrk_r>
 8008e90:	6038      	str	r0, [r7, #0]
 8008e92:	4629      	mov	r1, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 fdc3 	bl	8009a20 <_sbrk_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d123      	bne.n	8008ee6 <_malloc_r+0x92>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f003 fbb6 	bl	800c614 <__malloc_unlock>
 8008ea8:	e7e3      	b.n	8008e72 <_malloc_r+0x1e>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	1b5b      	subs	r3, r3, r5
 8008eae:	d417      	bmi.n	8008ee0 <_malloc_r+0x8c>
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d903      	bls.n	8008ebc <_malloc_r+0x68>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	441c      	add	r4, r3
 8008eb8:	6025      	str	r5, [r4, #0]
 8008eba:	e004      	b.n	8008ec6 <_malloc_r+0x72>
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	42a2      	cmp	r2, r4
 8008ec0:	bf0c      	ite	eq
 8008ec2:	600b      	streq	r3, [r1, #0]
 8008ec4:	6053      	strne	r3, [r2, #4]
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f003 fba4 	bl	800c614 <__malloc_unlock>
 8008ecc:	f104 000b 	add.w	r0, r4, #11
 8008ed0:	1d23      	adds	r3, r4, #4
 8008ed2:	f020 0007 	bic.w	r0, r0, #7
 8008ed6:	1ac2      	subs	r2, r0, r3
 8008ed8:	d0cc      	beq.n	8008e74 <_malloc_r+0x20>
 8008eda:	1a1b      	subs	r3, r3, r0
 8008edc:	50a3      	str	r3, [r4, r2]
 8008ede:	e7c9      	b.n	8008e74 <_malloc_r+0x20>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7cc      	b.n	8008e80 <_malloc_r+0x2c>
 8008ee6:	1cc4      	adds	r4, r0, #3
 8008ee8:	f024 0403 	bic.w	r4, r4, #3
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d0e3      	beq.n	8008eb8 <_malloc_r+0x64>
 8008ef0:	1a21      	subs	r1, r4, r0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 fd94 	bl	8009a20 <_sbrk_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1dd      	bne.n	8008eb8 <_malloc_r+0x64>
 8008efc:	e7cf      	b.n	8008e9e <_malloc_r+0x4a>
 8008efe:	bf00      	nop
 8008f00:	20000468 	.word	0x20000468
 8008f04:	2000046c 	.word	0x2000046c

08008f08 <__cvt>:
 8008f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	461f      	mov	r7, r3
 8008f12:	4614      	mov	r4, r2
 8008f14:	bfb8      	it	lt
 8008f16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f1e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f22:	bfb6      	itet	lt
 8008f24:	461f      	movlt	r7, r3
 8008f26:	2300      	movge	r3, #0
 8008f28:	232d      	movlt	r3, #45	; 0x2d
 8008f2a:	7013      	strb	r3, [r2, #0]
 8008f2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f2e:	f023 0820 	bic.w	r8, r3, #32
 8008f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f36:	d005      	beq.n	8008f44 <__cvt+0x3c>
 8008f38:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f3c:	d100      	bne.n	8008f40 <__cvt+0x38>
 8008f3e:	3501      	adds	r5, #1
 8008f40:	2302      	movs	r3, #2
 8008f42:	e000      	b.n	8008f46 <__cvt+0x3e>
 8008f44:	2303      	movs	r3, #3
 8008f46:	aa07      	add	r2, sp, #28
 8008f48:	9204      	str	r2, [sp, #16]
 8008f4a:	aa06      	add	r2, sp, #24
 8008f4c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f50:	e9cd 3500 	strd	r3, r5, [sp]
 8008f54:	4622      	mov	r2, r4
 8008f56:	463b      	mov	r3, r7
 8008f58:	f001 ff92 	bl	800ae80 <_dtoa_r>
 8008f5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f60:	4606      	mov	r6, r0
 8008f62:	d102      	bne.n	8008f6a <__cvt+0x62>
 8008f64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f66:	07db      	lsls	r3, r3, #31
 8008f68:	d522      	bpl.n	8008fb0 <__cvt+0xa8>
 8008f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f6e:	eb06 0905 	add.w	r9, r6, r5
 8008f72:	d110      	bne.n	8008f96 <__cvt+0x8e>
 8008f74:	7833      	ldrb	r3, [r6, #0]
 8008f76:	2b30      	cmp	r3, #48	; 0x30
 8008f78:	d10a      	bne.n	8008f90 <__cvt+0x88>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4639      	mov	r1, r7
 8008f82:	f7f7 fd89 	bl	8000a98 <__aeabi_dcmpeq>
 8008f86:	b918      	cbnz	r0, 8008f90 <__cvt+0x88>
 8008f88:	f1c5 0501 	rsb	r5, r5, #1
 8008f8c:	f8ca 5000 	str.w	r5, [sl]
 8008f90:	f8da 3000 	ldr.w	r3, [sl]
 8008f94:	4499      	add	r9, r3
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 fd7b 	bl	8000a98 <__aeabi_dcmpeq>
 8008fa2:	b108      	cbz	r0, 8008fa8 <__cvt+0xa0>
 8008fa4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fa8:	2230      	movs	r2, #48	; 0x30
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	454b      	cmp	r3, r9
 8008fae:	d307      	bcc.n	8008fc0 <__cvt+0xb8>
 8008fb0:	9b07      	ldr	r3, [sp, #28]
 8008fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fb4:	1b9b      	subs	r3, r3, r6
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	b008      	add	sp, #32
 8008fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc0:	1c59      	adds	r1, r3, #1
 8008fc2:	9107      	str	r1, [sp, #28]
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e7f0      	b.n	8008faa <__cvt+0xa2>

08008fc8 <__exponent>:
 8008fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	bfb8      	it	lt
 8008fd0:	4249      	neglt	r1, r1
 8008fd2:	f803 2b02 	strb.w	r2, [r3], #2
 8008fd6:	bfb4      	ite	lt
 8008fd8:	222d      	movlt	r2, #45	; 0x2d
 8008fda:	222b      	movge	r2, #43	; 0x2b
 8008fdc:	2909      	cmp	r1, #9
 8008fde:	7042      	strb	r2, [r0, #1]
 8008fe0:	dd2a      	ble.n	8009038 <__exponent+0x70>
 8008fe2:	f10d 0407 	add.w	r4, sp, #7
 8008fe6:	46a4      	mov	ip, r4
 8008fe8:	270a      	movs	r7, #10
 8008fea:	46a6      	mov	lr, r4
 8008fec:	460a      	mov	r2, r1
 8008fee:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ff2:	fb07 1516 	mls	r5, r7, r6, r1
 8008ff6:	3530      	adds	r5, #48	; 0x30
 8008ff8:	2a63      	cmp	r2, #99	; 0x63
 8008ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009002:	4631      	mov	r1, r6
 8009004:	dcf1      	bgt.n	8008fea <__exponent+0x22>
 8009006:	3130      	adds	r1, #48	; 0x30
 8009008:	f1ae 0502 	sub.w	r5, lr, #2
 800900c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009010:	1c44      	adds	r4, r0, #1
 8009012:	4629      	mov	r1, r5
 8009014:	4561      	cmp	r1, ip
 8009016:	d30a      	bcc.n	800902e <__exponent+0x66>
 8009018:	f10d 0209 	add.w	r2, sp, #9
 800901c:	eba2 020e 	sub.w	r2, r2, lr
 8009020:	4565      	cmp	r5, ip
 8009022:	bf88      	it	hi
 8009024:	2200      	movhi	r2, #0
 8009026:	4413      	add	r3, r2
 8009028:	1a18      	subs	r0, r3, r0
 800902a:	b003      	add	sp, #12
 800902c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009032:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009036:	e7ed      	b.n	8009014 <__exponent+0x4c>
 8009038:	2330      	movs	r3, #48	; 0x30
 800903a:	3130      	adds	r1, #48	; 0x30
 800903c:	7083      	strb	r3, [r0, #2]
 800903e:	70c1      	strb	r1, [r0, #3]
 8009040:	1d03      	adds	r3, r0, #4
 8009042:	e7f1      	b.n	8009028 <__exponent+0x60>

08009044 <_printf_float>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	b091      	sub	sp, #68	; 0x44
 800904a:	460c      	mov	r4, r1
 800904c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009050:	4616      	mov	r6, r2
 8009052:	461f      	mov	r7, r3
 8009054:	4605      	mov	r5, r0
 8009056:	f003 fa59 	bl	800c50c <_localeconv_r>
 800905a:	6803      	ldr	r3, [r0, #0]
 800905c:	9309      	str	r3, [sp, #36]	; 0x24
 800905e:	4618      	mov	r0, r3
 8009060:	f7f7 f898 	bl	8000194 <strlen>
 8009064:	2300      	movs	r3, #0
 8009066:	930e      	str	r3, [sp, #56]	; 0x38
 8009068:	f8d8 3000 	ldr.w	r3, [r8]
 800906c:	900a      	str	r0, [sp, #40]	; 0x28
 800906e:	3307      	adds	r3, #7
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	f103 0208 	add.w	r2, r3, #8
 8009078:	f894 9018 	ldrb.w	r9, [r4, #24]
 800907c:	f8d4 b000 	ldr.w	fp, [r4]
 8009080:	f8c8 2000 	str.w	r2, [r8]
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800908c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009090:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009094:	930b      	str	r3, [sp, #44]	; 0x2c
 8009096:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009098:	4b9c      	ldr	r3, [pc, #624]	; (800930c <_printf_float+0x2c8>)
 800909a:	f04f 32ff 	mov.w	r2, #4294967295
 800909e:	4640      	mov	r0, r8
 80090a0:	f7f7 fd2c 	bl	8000afc <__aeabi_dcmpun>
 80090a4:	bb70      	cbnz	r0, 8009104 <_printf_float+0xc0>
 80090a6:	4b99      	ldr	r3, [pc, #612]	; (800930c <_printf_float+0x2c8>)
 80090a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090aa:	f04f 32ff 	mov.w	r2, #4294967295
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7f7 fd06 	bl	8000ac0 <__aeabi_dcmple>
 80090b4:	bb30      	cbnz	r0, 8009104 <_printf_float+0xc0>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4640      	mov	r0, r8
 80090bc:	4651      	mov	r1, sl
 80090be:	f7f7 fcf5 	bl	8000aac <__aeabi_dcmplt>
 80090c2:	b110      	cbz	r0, 80090ca <_printf_float+0x86>
 80090c4:	232d      	movs	r3, #45	; 0x2d
 80090c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ca:	4b91      	ldr	r3, [pc, #580]	; (8009310 <_printf_float+0x2cc>)
 80090cc:	4891      	ldr	r0, [pc, #580]	; (8009314 <_printf_float+0x2d0>)
 80090ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090d2:	bf94      	ite	ls
 80090d4:	4698      	movls	r8, r3
 80090d6:	4680      	movhi	r8, r0
 80090d8:	2303      	movs	r3, #3
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	f02b 0304 	bic.w	r3, fp, #4
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	f04f 0a00 	mov.w	sl, #0
 80090e6:	9700      	str	r7, [sp, #0]
 80090e8:	4633      	mov	r3, r6
 80090ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80090ec:	4621      	mov	r1, r4
 80090ee:	4628      	mov	r0, r5
 80090f0:	f000 f9d2 	bl	8009498 <_printf_common>
 80090f4:	3001      	adds	r0, #1
 80090f6:	f040 808f 	bne.w	8009218 <_printf_float+0x1d4>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	b011      	add	sp, #68	; 0x44
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	4642      	mov	r2, r8
 8009106:	4653      	mov	r3, sl
 8009108:	4640      	mov	r0, r8
 800910a:	4651      	mov	r1, sl
 800910c:	f7f7 fcf6 	bl	8000afc <__aeabi_dcmpun>
 8009110:	b140      	cbz	r0, 8009124 <_printf_float+0xe0>
 8009112:	f1ba 0f00 	cmp.w	sl, #0
 8009116:	bfbc      	itt	lt
 8009118:	232d      	movlt	r3, #45	; 0x2d
 800911a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800911e:	487e      	ldr	r0, [pc, #504]	; (8009318 <_printf_float+0x2d4>)
 8009120:	4b7e      	ldr	r3, [pc, #504]	; (800931c <_printf_float+0x2d8>)
 8009122:	e7d4      	b.n	80090ce <_printf_float+0x8a>
 8009124:	6863      	ldr	r3, [r4, #4]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800912c:	d142      	bne.n	80091b4 <_printf_float+0x170>
 800912e:	2306      	movs	r3, #6
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	9206      	str	r2, [sp, #24]
 8009136:	aa0e      	add	r2, sp, #56	; 0x38
 8009138:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800913c:	aa0d      	add	r2, sp, #52	; 0x34
 800913e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009142:	9203      	str	r2, [sp, #12]
 8009144:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009148:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	4642      	mov	r2, r8
 8009154:	4653      	mov	r3, sl
 8009156:	4628      	mov	r0, r5
 8009158:	910b      	str	r1, [sp, #44]	; 0x2c
 800915a:	f7ff fed5 	bl	8008f08 <__cvt>
 800915e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009160:	2947      	cmp	r1, #71	; 0x47
 8009162:	4680      	mov	r8, r0
 8009164:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009166:	d108      	bne.n	800917a <_printf_float+0x136>
 8009168:	1cc8      	adds	r0, r1, #3
 800916a:	db02      	blt.n	8009172 <_printf_float+0x12e>
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	4299      	cmp	r1, r3
 8009170:	dd40      	ble.n	80091f4 <_printf_float+0x1b0>
 8009172:	f1a9 0902 	sub.w	r9, r9, #2
 8009176:	fa5f f989 	uxtb.w	r9, r9
 800917a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800917e:	d81f      	bhi.n	80091c0 <_printf_float+0x17c>
 8009180:	3901      	subs	r1, #1
 8009182:	464a      	mov	r2, r9
 8009184:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009188:	910d      	str	r1, [sp, #52]	; 0x34
 800918a:	f7ff ff1d 	bl	8008fc8 <__exponent>
 800918e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009190:	1813      	adds	r3, r2, r0
 8009192:	2a01      	cmp	r2, #1
 8009194:	4682      	mov	sl, r0
 8009196:	6123      	str	r3, [r4, #16]
 8009198:	dc02      	bgt.n	80091a0 <_printf_float+0x15c>
 800919a:	6822      	ldr	r2, [r4, #0]
 800919c:	07d2      	lsls	r2, r2, #31
 800919e:	d501      	bpl.n	80091a4 <_printf_float+0x160>
 80091a0:	3301      	adds	r3, #1
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d09c      	beq.n	80090e6 <_printf_float+0xa2>
 80091ac:	232d      	movs	r3, #45	; 0x2d
 80091ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091b2:	e798      	b.n	80090e6 <_printf_float+0xa2>
 80091b4:	2947      	cmp	r1, #71	; 0x47
 80091b6:	d1bc      	bne.n	8009132 <_printf_float+0xee>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1ba      	bne.n	8009132 <_printf_float+0xee>
 80091bc:	2301      	movs	r3, #1
 80091be:	e7b7      	b.n	8009130 <_printf_float+0xec>
 80091c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091c4:	d118      	bne.n	80091f8 <_printf_float+0x1b4>
 80091c6:	2900      	cmp	r1, #0
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	dd0b      	ble.n	80091e4 <_printf_float+0x1a0>
 80091cc:	6121      	str	r1, [r4, #16]
 80091ce:	b913      	cbnz	r3, 80091d6 <_printf_float+0x192>
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	07d0      	lsls	r0, r2, #31
 80091d4:	d502      	bpl.n	80091dc <_printf_float+0x198>
 80091d6:	3301      	adds	r3, #1
 80091d8:	440b      	add	r3, r1
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	65a1      	str	r1, [r4, #88]	; 0x58
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	e7df      	b.n	80091a4 <_printf_float+0x160>
 80091e4:	b913      	cbnz	r3, 80091ec <_printf_float+0x1a8>
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	07d2      	lsls	r2, r2, #31
 80091ea:	d501      	bpl.n	80091f0 <_printf_float+0x1ac>
 80091ec:	3302      	adds	r3, #2
 80091ee:	e7f4      	b.n	80091da <_printf_float+0x196>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e7f2      	b.n	80091da <_printf_float+0x196>
 80091f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091fa:	4299      	cmp	r1, r3
 80091fc:	db05      	blt.n	800920a <_printf_float+0x1c6>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	6121      	str	r1, [r4, #16]
 8009202:	07d8      	lsls	r0, r3, #31
 8009204:	d5ea      	bpl.n	80091dc <_printf_float+0x198>
 8009206:	1c4b      	adds	r3, r1, #1
 8009208:	e7e7      	b.n	80091da <_printf_float+0x196>
 800920a:	2900      	cmp	r1, #0
 800920c:	bfd4      	ite	le
 800920e:	f1c1 0202 	rsble	r2, r1, #2
 8009212:	2201      	movgt	r2, #1
 8009214:	4413      	add	r3, r2
 8009216:	e7e0      	b.n	80091da <_printf_float+0x196>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	055a      	lsls	r2, r3, #21
 800921c:	d407      	bmi.n	800922e <_printf_float+0x1ea>
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	4642      	mov	r2, r8
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d12b      	bne.n	8009284 <_printf_float+0x240>
 800922c:	e765      	b.n	80090fa <_printf_float+0xb6>
 800922e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009232:	f240 80dc 	bls.w	80093ee <_printf_float+0x3aa>
 8009236:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800923a:	2200      	movs	r2, #0
 800923c:	2300      	movs	r3, #0
 800923e:	f7f7 fc2b 	bl	8000a98 <__aeabi_dcmpeq>
 8009242:	2800      	cmp	r0, #0
 8009244:	d033      	beq.n	80092ae <_printf_float+0x26a>
 8009246:	4a36      	ldr	r2, [pc, #216]	; (8009320 <_printf_float+0x2dc>)
 8009248:	2301      	movs	r3, #1
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	f43f af52 	beq.w	80090fa <_printf_float+0xb6>
 8009256:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800925a:	429a      	cmp	r2, r3
 800925c:	db02      	blt.n	8009264 <_printf_float+0x220>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	07d8      	lsls	r0, r3, #31
 8009262:	d50f      	bpl.n	8009284 <_printf_float+0x240>
 8009264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f af43 	beq.w	80090fa <_printf_float+0xb6>
 8009274:	f04f 0800 	mov.w	r8, #0
 8009278:	f104 091a 	add.w	r9, r4, #26
 800927c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800927e:	3b01      	subs	r3, #1
 8009280:	4543      	cmp	r3, r8
 8009282:	dc09      	bgt.n	8009298 <_printf_float+0x254>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	079b      	lsls	r3, r3, #30
 8009288:	f100 8101 	bmi.w	800948e <_printf_float+0x44a>
 800928c:	68e0      	ldr	r0, [r4, #12]
 800928e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009290:	4298      	cmp	r0, r3
 8009292:	bfb8      	it	lt
 8009294:	4618      	movlt	r0, r3
 8009296:	e732      	b.n	80090fe <_printf_float+0xba>
 8009298:	2301      	movs	r3, #1
 800929a:	464a      	mov	r2, r9
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f af29 	beq.w	80090fa <_printf_float+0xb6>
 80092a8:	f108 0801 	add.w	r8, r8, #1
 80092ac:	e7e6      	b.n	800927c <_printf_float+0x238>
 80092ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc37      	bgt.n	8009324 <_printf_float+0x2e0>
 80092b4:	4a1a      	ldr	r2, [pc, #104]	; (8009320 <_printf_float+0x2dc>)
 80092b6:	2301      	movs	r3, #1
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b8      	blx	r7
 80092be:	3001      	adds	r0, #1
 80092c0:	f43f af1b 	beq.w	80090fa <_printf_float+0xb6>
 80092c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092c8:	4313      	orrs	r3, r2
 80092ca:	d102      	bne.n	80092d2 <_printf_float+0x28e>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	07d9      	lsls	r1, r3, #31
 80092d0:	d5d8      	bpl.n	8009284 <_printf_float+0x240>
 80092d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092d6:	4631      	mov	r1, r6
 80092d8:	4628      	mov	r0, r5
 80092da:	47b8      	blx	r7
 80092dc:	3001      	adds	r0, #1
 80092de:	f43f af0c 	beq.w	80090fa <_printf_float+0xb6>
 80092e2:	f04f 0900 	mov.w	r9, #0
 80092e6:	f104 0a1a 	add.w	sl, r4, #26
 80092ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ec:	425b      	negs	r3, r3
 80092ee:	454b      	cmp	r3, r9
 80092f0:	dc01      	bgt.n	80092f6 <_printf_float+0x2b2>
 80092f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f4:	e794      	b.n	8009220 <_printf_float+0x1dc>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4652      	mov	r2, sl
 80092fa:	4631      	mov	r1, r6
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b8      	blx	r7
 8009300:	3001      	adds	r0, #1
 8009302:	f43f aefa 	beq.w	80090fa <_printf_float+0xb6>
 8009306:	f109 0901 	add.w	r9, r9, #1
 800930a:	e7ee      	b.n	80092ea <_printf_float+0x2a6>
 800930c:	7fefffff 	.word	0x7fefffff
 8009310:	0800db54 	.word	0x0800db54
 8009314:	0800db58 	.word	0x0800db58
 8009318:	0800db60 	.word	0x0800db60
 800931c:	0800db5c 	.word	0x0800db5c
 8009320:	0800db64 	.word	0x0800db64
 8009324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009328:	429a      	cmp	r2, r3
 800932a:	bfa8      	it	ge
 800932c:	461a      	movge	r2, r3
 800932e:	2a00      	cmp	r2, #0
 8009330:	4691      	mov	r9, r2
 8009332:	dc37      	bgt.n	80093a4 <_printf_float+0x360>
 8009334:	f04f 0b00 	mov.w	fp, #0
 8009338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800933c:	f104 021a 	add.w	r2, r4, #26
 8009340:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009344:	ebaa 0309 	sub.w	r3, sl, r9
 8009348:	455b      	cmp	r3, fp
 800934a:	dc33      	bgt.n	80093b4 <_printf_float+0x370>
 800934c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009350:	429a      	cmp	r2, r3
 8009352:	db3b      	blt.n	80093cc <_printf_float+0x388>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	07da      	lsls	r2, r3, #31
 8009358:	d438      	bmi.n	80093cc <_printf_float+0x388>
 800935a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800935c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800935e:	eba2 030a 	sub.w	r3, r2, sl
 8009362:	eba2 0901 	sub.w	r9, r2, r1
 8009366:	4599      	cmp	r9, r3
 8009368:	bfa8      	it	ge
 800936a:	4699      	movge	r9, r3
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	dc34      	bgt.n	80093dc <_printf_float+0x398>
 8009372:	f04f 0800 	mov.w	r8, #0
 8009376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937a:	f104 0a1a 	add.w	sl, r4, #26
 800937e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	eba3 0309 	sub.w	r3, r3, r9
 8009388:	4543      	cmp	r3, r8
 800938a:	f77f af7b 	ble.w	8009284 <_printf_float+0x240>
 800938e:	2301      	movs	r3, #1
 8009390:	4652      	mov	r2, sl
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	f43f aeae 	beq.w	80090fa <_printf_float+0xb6>
 800939e:	f108 0801 	add.w	r8, r8, #1
 80093a2:	e7ec      	b.n	800937e <_printf_float+0x33a>
 80093a4:	4613      	mov	r3, r2
 80093a6:	4631      	mov	r1, r6
 80093a8:	4642      	mov	r2, r8
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	d1c0      	bne.n	8009334 <_printf_float+0x2f0>
 80093b2:	e6a2      	b.n	80090fa <_printf_float+0xb6>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4631      	mov	r1, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	f43f ae9b 	beq.w	80090fa <_printf_float+0xb6>
 80093c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093c6:	f10b 0b01 	add.w	fp, fp, #1
 80093ca:	e7b9      	b.n	8009340 <_printf_float+0x2fc>
 80093cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	d1bf      	bne.n	800935a <_printf_float+0x316>
 80093da:	e68e      	b.n	80090fa <_printf_float+0xb6>
 80093dc:	464b      	mov	r3, r9
 80093de:	eb08 020a 	add.w	r2, r8, sl
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1c2      	bne.n	8009372 <_printf_float+0x32e>
 80093ec:	e685      	b.n	80090fa <_printf_float+0xb6>
 80093ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f0:	2a01      	cmp	r2, #1
 80093f2:	dc01      	bgt.n	80093f8 <_printf_float+0x3b4>
 80093f4:	07db      	lsls	r3, r3, #31
 80093f6:	d537      	bpl.n	8009468 <_printf_float+0x424>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4642      	mov	r2, r8
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f ae79 	beq.w	80090fa <_printf_float+0xb6>
 8009408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f ae71 	beq.w	80090fa <_printf_float+0xb6>
 8009418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800941c:	2200      	movs	r2, #0
 800941e:	2300      	movs	r3, #0
 8009420:	f7f7 fb3a 	bl	8000a98 <__aeabi_dcmpeq>
 8009424:	b9d8      	cbnz	r0, 800945e <_printf_float+0x41a>
 8009426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009428:	f108 0201 	add.w	r2, r8, #1
 800942c:	3b01      	subs	r3, #1
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	d10e      	bne.n	8009456 <_printf_float+0x412>
 8009438:	e65f      	b.n	80090fa <_printf_float+0xb6>
 800943a:	2301      	movs	r3, #1
 800943c:	464a      	mov	r2, r9
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	f43f ae58 	beq.w	80090fa <_printf_float+0xb6>
 800944a:	f108 0801 	add.w	r8, r8, #1
 800944e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009450:	3b01      	subs	r3, #1
 8009452:	4543      	cmp	r3, r8
 8009454:	dcf1      	bgt.n	800943a <_printf_float+0x3f6>
 8009456:	4653      	mov	r3, sl
 8009458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800945c:	e6e1      	b.n	8009222 <_printf_float+0x1de>
 800945e:	f04f 0800 	mov.w	r8, #0
 8009462:	f104 091a 	add.w	r9, r4, #26
 8009466:	e7f2      	b.n	800944e <_printf_float+0x40a>
 8009468:	2301      	movs	r3, #1
 800946a:	4642      	mov	r2, r8
 800946c:	e7df      	b.n	800942e <_printf_float+0x3ea>
 800946e:	2301      	movs	r3, #1
 8009470:	464a      	mov	r2, r9
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	f43f ae3e 	beq.w	80090fa <_printf_float+0xb6>
 800947e:	f108 0801 	add.w	r8, r8, #1
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009486:	1a5b      	subs	r3, r3, r1
 8009488:	4543      	cmp	r3, r8
 800948a:	dcf0      	bgt.n	800946e <_printf_float+0x42a>
 800948c:	e6fe      	b.n	800928c <_printf_float+0x248>
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	f104 0919 	add.w	r9, r4, #25
 8009496:	e7f4      	b.n	8009482 <_printf_float+0x43e>

08009498 <_printf_common>:
 8009498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800949c:	4616      	mov	r6, r2
 800949e:	4699      	mov	r9, r3
 80094a0:	688a      	ldr	r2, [r1, #8]
 80094a2:	690b      	ldr	r3, [r1, #16]
 80094a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	bfb8      	it	lt
 80094ac:	4613      	movlt	r3, r2
 80094ae:	6033      	str	r3, [r6, #0]
 80094b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094b4:	4607      	mov	r7, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	b10a      	cbz	r2, 80094be <_printf_common+0x26>
 80094ba:	3301      	adds	r3, #1
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	0699      	lsls	r1, r3, #26
 80094c2:	bf42      	ittt	mi
 80094c4:	6833      	ldrmi	r3, [r6, #0]
 80094c6:	3302      	addmi	r3, #2
 80094c8:	6033      	strmi	r3, [r6, #0]
 80094ca:	6825      	ldr	r5, [r4, #0]
 80094cc:	f015 0506 	ands.w	r5, r5, #6
 80094d0:	d106      	bne.n	80094e0 <_printf_common+0x48>
 80094d2:	f104 0a19 	add.w	sl, r4, #25
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	6832      	ldr	r2, [r6, #0]
 80094da:	1a9b      	subs	r3, r3, r2
 80094dc:	42ab      	cmp	r3, r5
 80094de:	dc26      	bgt.n	800952e <_printf_common+0x96>
 80094e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094e4:	1e13      	subs	r3, r2, #0
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	bf18      	it	ne
 80094ea:	2301      	movne	r3, #1
 80094ec:	0692      	lsls	r2, r2, #26
 80094ee:	d42b      	bmi.n	8009548 <_printf_common+0xb0>
 80094f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f4:	4649      	mov	r1, r9
 80094f6:	4638      	mov	r0, r7
 80094f8:	47c0      	blx	r8
 80094fa:	3001      	adds	r0, #1
 80094fc:	d01e      	beq.n	800953c <_printf_common+0xa4>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	68e5      	ldr	r5, [r4, #12]
 8009502:	6832      	ldr	r2, [r6, #0]
 8009504:	f003 0306 	and.w	r3, r3, #6
 8009508:	2b04      	cmp	r3, #4
 800950a:	bf08      	it	eq
 800950c:	1aad      	subeq	r5, r5, r2
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	bf0c      	ite	eq
 8009514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009518:	2500      	movne	r5, #0
 800951a:	4293      	cmp	r3, r2
 800951c:	bfc4      	itt	gt
 800951e:	1a9b      	subgt	r3, r3, r2
 8009520:	18ed      	addgt	r5, r5, r3
 8009522:	2600      	movs	r6, #0
 8009524:	341a      	adds	r4, #26
 8009526:	42b5      	cmp	r5, r6
 8009528:	d11a      	bne.n	8009560 <_printf_common+0xc8>
 800952a:	2000      	movs	r0, #0
 800952c:	e008      	b.n	8009540 <_printf_common+0xa8>
 800952e:	2301      	movs	r3, #1
 8009530:	4652      	mov	r2, sl
 8009532:	4649      	mov	r1, r9
 8009534:	4638      	mov	r0, r7
 8009536:	47c0      	blx	r8
 8009538:	3001      	adds	r0, #1
 800953a:	d103      	bne.n	8009544 <_printf_common+0xac>
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	3501      	adds	r5, #1
 8009546:	e7c6      	b.n	80094d6 <_printf_common+0x3e>
 8009548:	18e1      	adds	r1, r4, r3
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	2030      	movs	r0, #48	; 0x30
 800954e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009552:	4422      	add	r2, r4
 8009554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800955c:	3302      	adds	r3, #2
 800955e:	e7c7      	b.n	80094f0 <_printf_common+0x58>
 8009560:	2301      	movs	r3, #1
 8009562:	4622      	mov	r2, r4
 8009564:	4649      	mov	r1, r9
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	3001      	adds	r0, #1
 800956c:	d0e6      	beq.n	800953c <_printf_common+0xa4>
 800956e:	3601      	adds	r6, #1
 8009570:	e7d9      	b.n	8009526 <_printf_common+0x8e>
	...

08009574 <_printf_i>:
 8009574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009578:	460c      	mov	r4, r1
 800957a:	4691      	mov	r9, r2
 800957c:	7e27      	ldrb	r7, [r4, #24]
 800957e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009580:	2f78      	cmp	r7, #120	; 0x78
 8009582:	4680      	mov	r8, r0
 8009584:	469a      	mov	sl, r3
 8009586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800958a:	d807      	bhi.n	800959c <_printf_i+0x28>
 800958c:	2f62      	cmp	r7, #98	; 0x62
 800958e:	d80a      	bhi.n	80095a6 <_printf_i+0x32>
 8009590:	2f00      	cmp	r7, #0
 8009592:	f000 80d8 	beq.w	8009746 <_printf_i+0x1d2>
 8009596:	2f58      	cmp	r7, #88	; 0x58
 8009598:	f000 80a3 	beq.w	80096e2 <_printf_i+0x16e>
 800959c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095a4:	e03a      	b.n	800961c <_printf_i+0xa8>
 80095a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095aa:	2b15      	cmp	r3, #21
 80095ac:	d8f6      	bhi.n	800959c <_printf_i+0x28>
 80095ae:	a001      	add	r0, pc, #4	; (adr r0, 80095b4 <_printf_i+0x40>)
 80095b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	08009621 	.word	0x08009621
 80095bc:	0800959d 	.word	0x0800959d
 80095c0:	0800959d 	.word	0x0800959d
 80095c4:	0800959d 	.word	0x0800959d
 80095c8:	0800959d 	.word	0x0800959d
 80095cc:	08009621 	.word	0x08009621
 80095d0:	0800959d 	.word	0x0800959d
 80095d4:	0800959d 	.word	0x0800959d
 80095d8:	0800959d 	.word	0x0800959d
 80095dc:	0800959d 	.word	0x0800959d
 80095e0:	0800972d 	.word	0x0800972d
 80095e4:	08009651 	.word	0x08009651
 80095e8:	0800970f 	.word	0x0800970f
 80095ec:	0800959d 	.word	0x0800959d
 80095f0:	0800959d 	.word	0x0800959d
 80095f4:	0800974f 	.word	0x0800974f
 80095f8:	0800959d 	.word	0x0800959d
 80095fc:	08009651 	.word	0x08009651
 8009600:	0800959d 	.word	0x0800959d
 8009604:	0800959d 	.word	0x0800959d
 8009608:	08009717 	.word	0x08009717
 800960c:	680b      	ldr	r3, [r1, #0]
 800960e:	1d1a      	adds	r2, r3, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	600a      	str	r2, [r1, #0]
 8009614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800961c:	2301      	movs	r3, #1
 800961e:	e0a3      	b.n	8009768 <_printf_i+0x1f4>
 8009620:	6825      	ldr	r5, [r4, #0]
 8009622:	6808      	ldr	r0, [r1, #0]
 8009624:	062e      	lsls	r6, r5, #24
 8009626:	f100 0304 	add.w	r3, r0, #4
 800962a:	d50a      	bpl.n	8009642 <_printf_i+0xce>
 800962c:	6805      	ldr	r5, [r0, #0]
 800962e:	600b      	str	r3, [r1, #0]
 8009630:	2d00      	cmp	r5, #0
 8009632:	da03      	bge.n	800963c <_printf_i+0xc8>
 8009634:	232d      	movs	r3, #45	; 0x2d
 8009636:	426d      	negs	r5, r5
 8009638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963c:	485e      	ldr	r0, [pc, #376]	; (80097b8 <_printf_i+0x244>)
 800963e:	230a      	movs	r3, #10
 8009640:	e019      	b.n	8009676 <_printf_i+0x102>
 8009642:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009646:	6805      	ldr	r5, [r0, #0]
 8009648:	600b      	str	r3, [r1, #0]
 800964a:	bf18      	it	ne
 800964c:	b22d      	sxthne	r5, r5
 800964e:	e7ef      	b.n	8009630 <_printf_i+0xbc>
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	6825      	ldr	r5, [r4, #0]
 8009654:	1d18      	adds	r0, r3, #4
 8009656:	6008      	str	r0, [r1, #0]
 8009658:	0628      	lsls	r0, r5, #24
 800965a:	d501      	bpl.n	8009660 <_printf_i+0xec>
 800965c:	681d      	ldr	r5, [r3, #0]
 800965e:	e002      	b.n	8009666 <_printf_i+0xf2>
 8009660:	0669      	lsls	r1, r5, #25
 8009662:	d5fb      	bpl.n	800965c <_printf_i+0xe8>
 8009664:	881d      	ldrh	r5, [r3, #0]
 8009666:	4854      	ldr	r0, [pc, #336]	; (80097b8 <_printf_i+0x244>)
 8009668:	2f6f      	cmp	r7, #111	; 0x6f
 800966a:	bf0c      	ite	eq
 800966c:	2308      	moveq	r3, #8
 800966e:	230a      	movne	r3, #10
 8009670:	2100      	movs	r1, #0
 8009672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009676:	6866      	ldr	r6, [r4, #4]
 8009678:	60a6      	str	r6, [r4, #8]
 800967a:	2e00      	cmp	r6, #0
 800967c:	bfa2      	ittt	ge
 800967e:	6821      	ldrge	r1, [r4, #0]
 8009680:	f021 0104 	bicge.w	r1, r1, #4
 8009684:	6021      	strge	r1, [r4, #0]
 8009686:	b90d      	cbnz	r5, 800968c <_printf_i+0x118>
 8009688:	2e00      	cmp	r6, #0
 800968a:	d04d      	beq.n	8009728 <_printf_i+0x1b4>
 800968c:	4616      	mov	r6, r2
 800968e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009692:	fb03 5711 	mls	r7, r3, r1, r5
 8009696:	5dc7      	ldrb	r7, [r0, r7]
 8009698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800969c:	462f      	mov	r7, r5
 800969e:	42bb      	cmp	r3, r7
 80096a0:	460d      	mov	r5, r1
 80096a2:	d9f4      	bls.n	800968e <_printf_i+0x11a>
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d10b      	bne.n	80096c0 <_printf_i+0x14c>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	07df      	lsls	r7, r3, #31
 80096ac:	d508      	bpl.n	80096c0 <_printf_i+0x14c>
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	6861      	ldr	r1, [r4, #4]
 80096b2:	4299      	cmp	r1, r3
 80096b4:	bfde      	ittt	le
 80096b6:	2330      	movle	r3, #48	; 0x30
 80096b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096c0:	1b92      	subs	r2, r2, r6
 80096c2:	6122      	str	r2, [r4, #16]
 80096c4:	f8cd a000 	str.w	sl, [sp]
 80096c8:	464b      	mov	r3, r9
 80096ca:	aa03      	add	r2, sp, #12
 80096cc:	4621      	mov	r1, r4
 80096ce:	4640      	mov	r0, r8
 80096d0:	f7ff fee2 	bl	8009498 <_printf_common>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d14c      	bne.n	8009772 <_printf_i+0x1fe>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	b004      	add	sp, #16
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	4835      	ldr	r0, [pc, #212]	; (80097b8 <_printf_i+0x244>)
 80096e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	680e      	ldr	r6, [r1, #0]
 80096ec:	061f      	lsls	r7, r3, #24
 80096ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80096f2:	600e      	str	r6, [r1, #0]
 80096f4:	d514      	bpl.n	8009720 <_printf_i+0x1ac>
 80096f6:	07d9      	lsls	r1, r3, #31
 80096f8:	bf44      	itt	mi
 80096fa:	f043 0320 	orrmi.w	r3, r3, #32
 80096fe:	6023      	strmi	r3, [r4, #0]
 8009700:	b91d      	cbnz	r5, 800970a <_printf_i+0x196>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f023 0320 	bic.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	2310      	movs	r3, #16
 800970c:	e7b0      	b.n	8009670 <_printf_i+0xfc>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	f043 0320 	orr.w	r3, r3, #32
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	2378      	movs	r3, #120	; 0x78
 8009718:	4828      	ldr	r0, [pc, #160]	; (80097bc <_printf_i+0x248>)
 800971a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800971e:	e7e3      	b.n	80096e8 <_printf_i+0x174>
 8009720:	065e      	lsls	r6, r3, #25
 8009722:	bf48      	it	mi
 8009724:	b2ad      	uxthmi	r5, r5
 8009726:	e7e6      	b.n	80096f6 <_printf_i+0x182>
 8009728:	4616      	mov	r6, r2
 800972a:	e7bb      	b.n	80096a4 <_printf_i+0x130>
 800972c:	680b      	ldr	r3, [r1, #0]
 800972e:	6826      	ldr	r6, [r4, #0]
 8009730:	6960      	ldr	r0, [r4, #20]
 8009732:	1d1d      	adds	r5, r3, #4
 8009734:	600d      	str	r5, [r1, #0]
 8009736:	0635      	lsls	r5, r6, #24
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	d501      	bpl.n	8009740 <_printf_i+0x1cc>
 800973c:	6018      	str	r0, [r3, #0]
 800973e:	e002      	b.n	8009746 <_printf_i+0x1d2>
 8009740:	0671      	lsls	r1, r6, #25
 8009742:	d5fb      	bpl.n	800973c <_printf_i+0x1c8>
 8009744:	8018      	strh	r0, [r3, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	4616      	mov	r6, r2
 800974c:	e7ba      	b.n	80096c4 <_printf_i+0x150>
 800974e:	680b      	ldr	r3, [r1, #0]
 8009750:	1d1a      	adds	r2, r3, #4
 8009752:	600a      	str	r2, [r1, #0]
 8009754:	681e      	ldr	r6, [r3, #0]
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	2100      	movs	r1, #0
 800975a:	4630      	mov	r0, r6
 800975c:	f7f6 fd28 	bl	80001b0 <memchr>
 8009760:	b108      	cbz	r0, 8009766 <_printf_i+0x1f2>
 8009762:	1b80      	subs	r0, r0, r6
 8009764:	6060      	str	r0, [r4, #4]
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009770:	e7a8      	b.n	80096c4 <_printf_i+0x150>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	4632      	mov	r2, r6
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d0ab      	beq.n	80096d8 <_printf_i+0x164>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	079b      	lsls	r3, r3, #30
 8009784:	d413      	bmi.n	80097ae <_printf_i+0x23a>
 8009786:	68e0      	ldr	r0, [r4, #12]
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	4298      	cmp	r0, r3
 800978c:	bfb8      	it	lt
 800978e:	4618      	movlt	r0, r3
 8009790:	e7a4      	b.n	80096dc <_printf_i+0x168>
 8009792:	2301      	movs	r3, #1
 8009794:	4632      	mov	r2, r6
 8009796:	4649      	mov	r1, r9
 8009798:	4640      	mov	r0, r8
 800979a:	47d0      	blx	sl
 800979c:	3001      	adds	r0, #1
 800979e:	d09b      	beq.n	80096d8 <_printf_i+0x164>
 80097a0:	3501      	adds	r5, #1
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	9903      	ldr	r1, [sp, #12]
 80097a6:	1a5b      	subs	r3, r3, r1
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	dcf2      	bgt.n	8009792 <_printf_i+0x21e>
 80097ac:	e7eb      	b.n	8009786 <_printf_i+0x212>
 80097ae:	2500      	movs	r5, #0
 80097b0:	f104 0619 	add.w	r6, r4, #25
 80097b4:	e7f5      	b.n	80097a2 <_printf_i+0x22e>
 80097b6:	bf00      	nop
 80097b8:	0800db66 	.word	0x0800db66
 80097bc:	0800db77 	.word	0x0800db77

080097c0 <_perror_r>:
 80097c0:	6983      	ldr	r3, [r0, #24]
 80097c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c4:	68c4      	ldr	r4, [r0, #12]
 80097c6:	4605      	mov	r5, r0
 80097c8:	460e      	mov	r6, r1
 80097ca:	b90b      	cbnz	r3, 80097d0 <_perror_r+0x10>
 80097cc:	f002 fa9e 	bl	800bd0c <__sinit>
 80097d0:	4b43      	ldr	r3, [pc, #268]	; (80098e0 <_perror_r+0x120>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d132      	bne.n	800983c <_perror_r+0x7c>
 80097d6:	686c      	ldr	r4, [r5, #4]
 80097d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097da:	07d8      	lsls	r0, r3, #31
 80097dc:	d405      	bmi.n	80097ea <_perror_r+0x2a>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	0599      	lsls	r1, r3, #22
 80097e2:	d402      	bmi.n	80097ea <_perror_r+0x2a>
 80097e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e6:	f002 fe96 	bl	800c516 <__retarget_lock_acquire_recursive>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f002 f9bb 	bl	800bb68 <_fflush_r>
 80097f2:	bb6e      	cbnz	r6, 8009850 <_perror_r+0x90>
 80097f4:	6829      	ldr	r1, [r5, #0]
 80097f6:	ab01      	add	r3, sp, #4
 80097f8:	2201      	movs	r2, #1
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 f920 	bl	8009a40 <_strerror_r>
 8009800:	4607      	mov	r7, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	d14f      	bne.n	80098a6 <_perror_r+0xe6>
 8009806:	4837      	ldr	r0, [pc, #220]	; (80098e4 <_perror_r+0x124>)
 8009808:	4f36      	ldr	r7, [pc, #216]	; (80098e4 <_perror_r+0x124>)
 800980a:	f7f6 fcc3 	bl	8000194 <strlen>
 800980e:	4606      	mov	r6, r0
 8009810:	b156      	cbz	r6, 8009828 <_perror_r+0x68>
 8009812:	4620      	mov	r0, r4
 8009814:	f002 f9e4 	bl	800bbe0 <fileno>
 8009818:	4633      	mov	r3, r6
 800981a:	4601      	mov	r1, r0
 800981c:	463a      	mov	r2, r7
 800981e:	4628      	mov	r0, r5
 8009820:	f001 fa22 	bl	800ac68 <_write_r>
 8009824:	2800      	cmp	r0, #0
 8009826:	da51      	bge.n	80098cc <_perror_r+0x10c>
 8009828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800982e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009832:	07d2      	lsls	r2, r2, #31
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	d54c      	bpl.n	80098d2 <_perror_r+0x112>
 8009838:	b003      	add	sp, #12
 800983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983c:	4b2a      	ldr	r3, [pc, #168]	; (80098e8 <_perror_r+0x128>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <_perror_r+0x86>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7c8      	b.n	80097d8 <_perror_r+0x18>
 8009846:	4b29      	ldr	r3, [pc, #164]	; (80098ec <_perror_r+0x12c>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7c3      	b.n	80097d8 <_perror_r+0x18>
 8009850:	7833      	ldrb	r3, [r6, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0ce      	beq.n	80097f4 <_perror_r+0x34>
 8009856:	4630      	mov	r0, r6
 8009858:	f7f6 fc9c 	bl	8000194 <strlen>
 800985c:	4607      	mov	r7, r0
 800985e:	b157      	cbz	r7, 8009876 <_perror_r+0xb6>
 8009860:	4620      	mov	r0, r4
 8009862:	f002 f9bd 	bl	800bbe0 <fileno>
 8009866:	463b      	mov	r3, r7
 8009868:	4601      	mov	r1, r0
 800986a:	4632      	mov	r2, r6
 800986c:	4628      	mov	r0, r5
 800986e:	f001 f9fb 	bl	800ac68 <_write_r>
 8009872:	2800      	cmp	r0, #0
 8009874:	da14      	bge.n	80098a0 <_perror_r+0xe0>
 8009876:	481e      	ldr	r0, [pc, #120]	; (80098f0 <_perror_r+0x130>)
 8009878:	4f1d      	ldr	r7, [pc, #116]	; (80098f0 <_perror_r+0x130>)
 800987a:	f7f6 fc8b 	bl	8000194 <strlen>
 800987e:	4606      	mov	r6, r0
 8009880:	2e00      	cmp	r6, #0
 8009882:	d0b7      	beq.n	80097f4 <_perror_r+0x34>
 8009884:	4620      	mov	r0, r4
 8009886:	f002 f9ab 	bl	800bbe0 <fileno>
 800988a:	4633      	mov	r3, r6
 800988c:	4601      	mov	r1, r0
 800988e:	463a      	mov	r2, r7
 8009890:	4628      	mov	r0, r5
 8009892:	f001 f9e9 	bl	800ac68 <_write_r>
 8009896:	2800      	cmp	r0, #0
 8009898:	dbac      	blt.n	80097f4 <_perror_r+0x34>
 800989a:	1a36      	subs	r6, r6, r0
 800989c:	4407      	add	r7, r0
 800989e:	e7ef      	b.n	8009880 <_perror_r+0xc0>
 80098a0:	1a3f      	subs	r7, r7, r0
 80098a2:	4406      	add	r6, r0
 80098a4:	e7db      	b.n	800985e <_perror_r+0x9e>
 80098a6:	f7f6 fc75 	bl	8000194 <strlen>
 80098aa:	4606      	mov	r6, r0
 80098ac:	2e00      	cmp	r6, #0
 80098ae:	d0aa      	beq.n	8009806 <_perror_r+0x46>
 80098b0:	4620      	mov	r0, r4
 80098b2:	f002 f995 	bl	800bbe0 <fileno>
 80098b6:	4633      	mov	r3, r6
 80098b8:	4601      	mov	r1, r0
 80098ba:	463a      	mov	r2, r7
 80098bc:	4628      	mov	r0, r5
 80098be:	f001 f9d3 	bl	800ac68 <_write_r>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	db9f      	blt.n	8009806 <_perror_r+0x46>
 80098c6:	1a36      	subs	r6, r6, r0
 80098c8:	4407      	add	r7, r0
 80098ca:	e7ef      	b.n	80098ac <_perror_r+0xec>
 80098cc:	1a36      	subs	r6, r6, r0
 80098ce:	4407      	add	r7, r0
 80098d0:	e79e      	b.n	8009810 <_perror_r+0x50>
 80098d2:	059b      	lsls	r3, r3, #22
 80098d4:	d4b0      	bmi.n	8009838 <_perror_r+0x78>
 80098d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d8:	f002 fe1e 	bl	800c518 <__retarget_lock_release_recursive>
 80098dc:	e7ac      	b.n	8009838 <_perror_r+0x78>
 80098de:	bf00      	nop
 80098e0:	0800e428 	.word	0x0800e428
 80098e4:	0800e68f 	.word	0x0800e68f
 80098e8:	0800e448 	.word	0x0800e448
 80098ec:	0800e408 	.word	0x0800e408
 80098f0:	0800e65f 	.word	0x0800e65f

080098f4 <perror>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <perror+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f7ff bf61 	b.w	80097c0 <_perror_r>
 80098fe:	bf00      	nop
 8009900:	2000000c 	.word	0x2000000c

08009904 <iprintf>:
 8009904:	b40f      	push	{r0, r1, r2, r3}
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <iprintf+0x2c>)
 8009908:	b513      	push	{r0, r1, r4, lr}
 800990a:	681c      	ldr	r4, [r3, #0]
 800990c:	b124      	cbz	r4, 8009918 <iprintf+0x14>
 800990e:	69a3      	ldr	r3, [r4, #24]
 8009910:	b913      	cbnz	r3, 8009918 <iprintf+0x14>
 8009912:	4620      	mov	r0, r4
 8009914:	f002 f9fa 	bl	800bd0c <__sinit>
 8009918:	ab05      	add	r3, sp, #20
 800991a:	9a04      	ldr	r2, [sp, #16]
 800991c:	68a1      	ldr	r1, [r4, #8]
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	4620      	mov	r0, r4
 8009922:	f003 fb67 	bl	800cff4 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992c:	b004      	add	sp, #16
 800992e:	4770      	bx	lr
 8009930:	2000000c 	.word	0x2000000c

08009934 <_puts_r>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	460e      	mov	r6, r1
 8009938:	4605      	mov	r5, r0
 800993a:	b118      	cbz	r0, 8009944 <_puts_r+0x10>
 800993c:	6983      	ldr	r3, [r0, #24]
 800993e:	b90b      	cbnz	r3, 8009944 <_puts_r+0x10>
 8009940:	f002 f9e4 	bl	800bd0c <__sinit>
 8009944:	69ab      	ldr	r3, [r5, #24]
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	b913      	cbnz	r3, 8009950 <_puts_r+0x1c>
 800994a:	4628      	mov	r0, r5
 800994c:	f002 f9de 	bl	800bd0c <__sinit>
 8009950:	4b2c      	ldr	r3, [pc, #176]	; (8009a04 <_puts_r+0xd0>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d120      	bne.n	8009998 <_puts_r+0x64>
 8009956:	686c      	ldr	r4, [r5, #4]
 8009958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800995a:	07db      	lsls	r3, r3, #31
 800995c:	d405      	bmi.n	800996a <_puts_r+0x36>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	0598      	lsls	r0, r3, #22
 8009962:	d402      	bmi.n	800996a <_puts_r+0x36>
 8009964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009966:	f002 fdd6 	bl	800c516 <__retarget_lock_acquire_recursive>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	0719      	lsls	r1, r3, #28
 800996e:	d51d      	bpl.n	80099ac <_puts_r+0x78>
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	b1db      	cbz	r3, 80099ac <_puts_r+0x78>
 8009974:	3e01      	subs	r6, #1
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800997c:	3b01      	subs	r3, #1
 800997e:	60a3      	str	r3, [r4, #8]
 8009980:	bb39      	cbnz	r1, 80099d2 <_puts_r+0x9e>
 8009982:	2b00      	cmp	r3, #0
 8009984:	da38      	bge.n	80099f8 <_puts_r+0xc4>
 8009986:	4622      	mov	r2, r4
 8009988:	210a      	movs	r1, #10
 800998a:	4628      	mov	r0, r5
 800998c:	f001 f91a 	bl	800abc4 <__swbuf_r>
 8009990:	3001      	adds	r0, #1
 8009992:	d011      	beq.n	80099b8 <_puts_r+0x84>
 8009994:	250a      	movs	r5, #10
 8009996:	e011      	b.n	80099bc <_puts_r+0x88>
 8009998:	4b1b      	ldr	r3, [pc, #108]	; (8009a08 <_puts_r+0xd4>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d101      	bne.n	80099a2 <_puts_r+0x6e>
 800999e:	68ac      	ldr	r4, [r5, #8]
 80099a0:	e7da      	b.n	8009958 <_puts_r+0x24>
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <_puts_r+0xd8>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	bf08      	it	eq
 80099a8:	68ec      	ldreq	r4, [r5, #12]
 80099aa:	e7d5      	b.n	8009958 <_puts_r+0x24>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	f001 f96c 	bl	800ac8c <__swsetup_r>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d0dd      	beq.n	8009974 <_puts_r+0x40>
 80099b8:	f04f 35ff 	mov.w	r5, #4294967295
 80099bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099be:	07da      	lsls	r2, r3, #31
 80099c0:	d405      	bmi.n	80099ce <_puts_r+0x9a>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	059b      	lsls	r3, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_puts_r+0x9a>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f002 fda5 	bl	800c518 <__retarget_lock_release_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	bd70      	pop	{r4, r5, r6, pc}
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da04      	bge.n	80099e0 <_puts_r+0xac>
 80099d6:	69a2      	ldr	r2, [r4, #24]
 80099d8:	429a      	cmp	r2, r3
 80099da:	dc06      	bgt.n	80099ea <_puts_r+0xb6>
 80099dc:	290a      	cmp	r1, #10
 80099de:	d004      	beq.n	80099ea <_puts_r+0xb6>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	7019      	strb	r1, [r3, #0]
 80099e8:	e7c5      	b.n	8009976 <_puts_r+0x42>
 80099ea:	4622      	mov	r2, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f001 f8e9 	bl	800abc4 <__swbuf_r>
 80099f2:	3001      	adds	r0, #1
 80099f4:	d1bf      	bne.n	8009976 <_puts_r+0x42>
 80099f6:	e7df      	b.n	80099b8 <_puts_r+0x84>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	250a      	movs	r5, #10
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	701d      	strb	r5, [r3, #0]
 8009a02:	e7db      	b.n	80099bc <_puts_r+0x88>
 8009a04:	0800e428 	.word	0x0800e428
 8009a08:	0800e448 	.word	0x0800e448
 8009a0c:	0800e408 	.word	0x0800e408

08009a10 <puts>:
 8009a10:	4b02      	ldr	r3, [pc, #8]	; (8009a1c <puts+0xc>)
 8009a12:	4601      	mov	r1, r0
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f7ff bf8d 	b.w	8009934 <_puts_r>
 8009a1a:	bf00      	nop
 8009a1c:	2000000c 	.word	0x2000000c

08009a20 <_sbrk_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d06      	ldr	r5, [pc, #24]	; (8009a3c <_sbrk_r+0x1c>)
 8009a24:	2300      	movs	r3, #0
 8009a26:	4604      	mov	r4, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f7f7 ffda 	bl	80019e4 <_sbrk>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_sbrk_r+0x1a>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_sbrk_r+0x1a>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000604 	.word	0x20000604

08009a40 <_strerror_r>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	288e      	cmp	r0, #142	; 0x8e
 8009a4a:	f200 812f 	bhi.w	8009cac <_strerror_r+0x26c>
 8009a4e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009a52:	0138      	.short	0x0138
 8009a54:	0091008f 	.word	0x0091008f
 8009a58:	00950093 	.word	0x00950093
 8009a5c:	00990097 	.word	0x00990097
 8009a60:	009d009b 	.word	0x009d009b
 8009a64:	00a300a1 	.word	0x00a300a1
 8009a68:	00a900a7 	.word	0x00a900a7
 8009a6c:	00ad00ab 	.word	0x00ad00ab
 8009a70:	00af012d 	.word	0x00af012d
 8009a74:	00b300b1 	.word	0x00b300b1
 8009a78:	00b700b5 	.word	0x00b700b5
 8009a7c:	00bf00bd 	.word	0x00bf00bd
 8009a80:	00c700c5 	.word	0x00c700c5
 8009a84:	00cb00c9 	.word	0x00cb00c9
 8009a88:	00d100cd 	.word	0x00d100cd
 8009a8c:	00d700d5 	.word	0x00d700d5
 8009a90:	00db00d9 	.word	0x00db00d9
 8009a94:	00df00dd 	.word	0x00df00dd
 8009a98:	00e300e1 	.word	0x00e300e1
 8009a9c:	012d012d 	.word	0x012d012d
 8009aa0:	012d012d 	.word	0x012d012d
 8009aa4:	012d012d 	.word	0x012d012d
 8009aa8:	012d012d 	.word	0x012d012d
 8009aac:	00eb00e7 	.word	0x00eb00e7
 8009ab0:	012d012d 	.word	0x012d012d
 8009ab4:	012d012d 	.word	0x012d012d
 8009ab8:	012d012d 	.word	0x012d012d
 8009abc:	012d012d 	.word	0x012d012d
 8009ac0:	012d012d 	.word	0x012d012d
 8009ac4:	012d012d 	.word	0x012d012d
 8009ac8:	00ed012d 	.word	0x00ed012d
 8009acc:	00ef0107 	.word	0x00ef0107
 8009ad0:	012d00f1 	.word	0x012d00f1
 8009ad4:	012d012d 	.word	0x012d012d
 8009ad8:	012d00f3 	.word	0x012d00f3
 8009adc:	012d012d 	.word	0x012d012d
 8009ae0:	012d00f5 	.word	0x012d00f5
 8009ae4:	00f9012d 	.word	0x00f9012d
 8009ae8:	012d012d 	.word	0x012d012d
 8009aec:	012d00fb 	.word	0x012d00fb
 8009af0:	012d012d 	.word	0x012d012d
 8009af4:	012d012d 	.word	0x012d012d
 8009af8:	012d012d 	.word	0x012d012d
 8009afc:	012d012d 	.word	0x012d012d
 8009b00:	00fd012d 	.word	0x00fd012d
 8009b04:	00ff012d 	.word	0x00ff012d
 8009b08:	01030101 	.word	0x01030101
 8009b0c:	012d012d 	.word	0x012d012d
 8009b10:	012d0125 	.word	0x012d0125
 8009b14:	012d012d 	.word	0x012d012d
 8009b18:	012d012d 	.word	0x012d012d
 8009b1c:	012d012d 	.word	0x012d012d
 8009b20:	0113012d 	.word	0x0113012d
 8009b24:	01090105 	.word	0x01090105
 8009b28:	010d010b 	.word	0x010d010b
 8009b2c:	012d010f 	.word	0x012d010f
 8009b30:	01150111 	.word	0x01150111
 8009b34:	00e90119 	.word	0x00e90119
 8009b38:	012b00c1 	.word	0x012b00c1
 8009b3c:	00cf00b9 	.word	0x00cf00b9
 8009b40:	009f00bb 	.word	0x009f00bb
 8009b44:	012900a5 	.word	0x012900a5
 8009b48:	012d00f7 	.word	0x012d00f7
 8009b4c:	00c30117 	.word	0x00c30117
 8009b50:	011b011d 	.word	0x011b011d
 8009b54:	012d012d 	.word	0x012d012d
 8009b58:	012d012d 	.word	0x012d012d
 8009b5c:	00d3012d 	.word	0x00d3012d
 8009b60:	012d012d 	.word	0x012d012d
 8009b64:	00e5012d 	.word	0x00e5012d
 8009b68:	011f0127 	.word	0x011f0127
 8009b6c:	01230121 	.word	0x01230121
 8009b70:	4855      	ldr	r0, [pc, #340]	; (8009cc8 <_strerror_r+0x288>)
 8009b72:	bd10      	pop	{r4, pc}
 8009b74:	4855      	ldr	r0, [pc, #340]	; (8009ccc <_strerror_r+0x28c>)
 8009b76:	e7fc      	b.n	8009b72 <_strerror_r+0x132>
 8009b78:	4855      	ldr	r0, [pc, #340]	; (8009cd0 <_strerror_r+0x290>)
 8009b7a:	e7fa      	b.n	8009b72 <_strerror_r+0x132>
 8009b7c:	4855      	ldr	r0, [pc, #340]	; (8009cd4 <_strerror_r+0x294>)
 8009b7e:	e7f8      	b.n	8009b72 <_strerror_r+0x132>
 8009b80:	4855      	ldr	r0, [pc, #340]	; (8009cd8 <_strerror_r+0x298>)
 8009b82:	e7f6      	b.n	8009b72 <_strerror_r+0x132>
 8009b84:	4855      	ldr	r0, [pc, #340]	; (8009cdc <_strerror_r+0x29c>)
 8009b86:	e7f4      	b.n	8009b72 <_strerror_r+0x132>
 8009b88:	4855      	ldr	r0, [pc, #340]	; (8009ce0 <_strerror_r+0x2a0>)
 8009b8a:	e7f2      	b.n	8009b72 <_strerror_r+0x132>
 8009b8c:	4855      	ldr	r0, [pc, #340]	; (8009ce4 <_strerror_r+0x2a4>)
 8009b8e:	e7f0      	b.n	8009b72 <_strerror_r+0x132>
 8009b90:	4855      	ldr	r0, [pc, #340]	; (8009ce8 <_strerror_r+0x2a8>)
 8009b92:	e7ee      	b.n	8009b72 <_strerror_r+0x132>
 8009b94:	4855      	ldr	r0, [pc, #340]	; (8009cec <_strerror_r+0x2ac>)
 8009b96:	e7ec      	b.n	8009b72 <_strerror_r+0x132>
 8009b98:	4855      	ldr	r0, [pc, #340]	; (8009cf0 <_strerror_r+0x2b0>)
 8009b9a:	e7ea      	b.n	8009b72 <_strerror_r+0x132>
 8009b9c:	4855      	ldr	r0, [pc, #340]	; (8009cf4 <_strerror_r+0x2b4>)
 8009b9e:	e7e8      	b.n	8009b72 <_strerror_r+0x132>
 8009ba0:	4855      	ldr	r0, [pc, #340]	; (8009cf8 <_strerror_r+0x2b8>)
 8009ba2:	e7e6      	b.n	8009b72 <_strerror_r+0x132>
 8009ba4:	4855      	ldr	r0, [pc, #340]	; (8009cfc <_strerror_r+0x2bc>)
 8009ba6:	e7e4      	b.n	8009b72 <_strerror_r+0x132>
 8009ba8:	4855      	ldr	r0, [pc, #340]	; (8009d00 <_strerror_r+0x2c0>)
 8009baa:	e7e2      	b.n	8009b72 <_strerror_r+0x132>
 8009bac:	4855      	ldr	r0, [pc, #340]	; (8009d04 <_strerror_r+0x2c4>)
 8009bae:	e7e0      	b.n	8009b72 <_strerror_r+0x132>
 8009bb0:	4855      	ldr	r0, [pc, #340]	; (8009d08 <_strerror_r+0x2c8>)
 8009bb2:	e7de      	b.n	8009b72 <_strerror_r+0x132>
 8009bb4:	4855      	ldr	r0, [pc, #340]	; (8009d0c <_strerror_r+0x2cc>)
 8009bb6:	e7dc      	b.n	8009b72 <_strerror_r+0x132>
 8009bb8:	4855      	ldr	r0, [pc, #340]	; (8009d10 <_strerror_r+0x2d0>)
 8009bba:	e7da      	b.n	8009b72 <_strerror_r+0x132>
 8009bbc:	4855      	ldr	r0, [pc, #340]	; (8009d14 <_strerror_r+0x2d4>)
 8009bbe:	e7d8      	b.n	8009b72 <_strerror_r+0x132>
 8009bc0:	4855      	ldr	r0, [pc, #340]	; (8009d18 <_strerror_r+0x2d8>)
 8009bc2:	e7d6      	b.n	8009b72 <_strerror_r+0x132>
 8009bc4:	4855      	ldr	r0, [pc, #340]	; (8009d1c <_strerror_r+0x2dc>)
 8009bc6:	e7d4      	b.n	8009b72 <_strerror_r+0x132>
 8009bc8:	4855      	ldr	r0, [pc, #340]	; (8009d20 <_strerror_r+0x2e0>)
 8009bca:	e7d2      	b.n	8009b72 <_strerror_r+0x132>
 8009bcc:	4855      	ldr	r0, [pc, #340]	; (8009d24 <_strerror_r+0x2e4>)
 8009bce:	e7d0      	b.n	8009b72 <_strerror_r+0x132>
 8009bd0:	4855      	ldr	r0, [pc, #340]	; (8009d28 <_strerror_r+0x2e8>)
 8009bd2:	e7ce      	b.n	8009b72 <_strerror_r+0x132>
 8009bd4:	4855      	ldr	r0, [pc, #340]	; (8009d2c <_strerror_r+0x2ec>)
 8009bd6:	e7cc      	b.n	8009b72 <_strerror_r+0x132>
 8009bd8:	4855      	ldr	r0, [pc, #340]	; (8009d30 <_strerror_r+0x2f0>)
 8009bda:	e7ca      	b.n	8009b72 <_strerror_r+0x132>
 8009bdc:	4855      	ldr	r0, [pc, #340]	; (8009d34 <_strerror_r+0x2f4>)
 8009bde:	e7c8      	b.n	8009b72 <_strerror_r+0x132>
 8009be0:	4855      	ldr	r0, [pc, #340]	; (8009d38 <_strerror_r+0x2f8>)
 8009be2:	e7c6      	b.n	8009b72 <_strerror_r+0x132>
 8009be4:	4855      	ldr	r0, [pc, #340]	; (8009d3c <_strerror_r+0x2fc>)
 8009be6:	e7c4      	b.n	8009b72 <_strerror_r+0x132>
 8009be8:	4855      	ldr	r0, [pc, #340]	; (8009d40 <_strerror_r+0x300>)
 8009bea:	e7c2      	b.n	8009b72 <_strerror_r+0x132>
 8009bec:	4855      	ldr	r0, [pc, #340]	; (8009d44 <_strerror_r+0x304>)
 8009bee:	e7c0      	b.n	8009b72 <_strerror_r+0x132>
 8009bf0:	4855      	ldr	r0, [pc, #340]	; (8009d48 <_strerror_r+0x308>)
 8009bf2:	e7be      	b.n	8009b72 <_strerror_r+0x132>
 8009bf4:	4855      	ldr	r0, [pc, #340]	; (8009d4c <_strerror_r+0x30c>)
 8009bf6:	e7bc      	b.n	8009b72 <_strerror_r+0x132>
 8009bf8:	4855      	ldr	r0, [pc, #340]	; (8009d50 <_strerror_r+0x310>)
 8009bfa:	e7ba      	b.n	8009b72 <_strerror_r+0x132>
 8009bfc:	4855      	ldr	r0, [pc, #340]	; (8009d54 <_strerror_r+0x314>)
 8009bfe:	e7b8      	b.n	8009b72 <_strerror_r+0x132>
 8009c00:	4855      	ldr	r0, [pc, #340]	; (8009d58 <_strerror_r+0x318>)
 8009c02:	e7b6      	b.n	8009b72 <_strerror_r+0x132>
 8009c04:	4855      	ldr	r0, [pc, #340]	; (8009d5c <_strerror_r+0x31c>)
 8009c06:	e7b4      	b.n	8009b72 <_strerror_r+0x132>
 8009c08:	4855      	ldr	r0, [pc, #340]	; (8009d60 <_strerror_r+0x320>)
 8009c0a:	e7b2      	b.n	8009b72 <_strerror_r+0x132>
 8009c0c:	4855      	ldr	r0, [pc, #340]	; (8009d64 <_strerror_r+0x324>)
 8009c0e:	e7b0      	b.n	8009b72 <_strerror_r+0x132>
 8009c10:	4855      	ldr	r0, [pc, #340]	; (8009d68 <_strerror_r+0x328>)
 8009c12:	e7ae      	b.n	8009b72 <_strerror_r+0x132>
 8009c14:	4855      	ldr	r0, [pc, #340]	; (8009d6c <_strerror_r+0x32c>)
 8009c16:	e7ac      	b.n	8009b72 <_strerror_r+0x132>
 8009c18:	4855      	ldr	r0, [pc, #340]	; (8009d70 <_strerror_r+0x330>)
 8009c1a:	e7aa      	b.n	8009b72 <_strerror_r+0x132>
 8009c1c:	4855      	ldr	r0, [pc, #340]	; (8009d74 <_strerror_r+0x334>)
 8009c1e:	e7a8      	b.n	8009b72 <_strerror_r+0x132>
 8009c20:	4855      	ldr	r0, [pc, #340]	; (8009d78 <_strerror_r+0x338>)
 8009c22:	e7a6      	b.n	8009b72 <_strerror_r+0x132>
 8009c24:	4855      	ldr	r0, [pc, #340]	; (8009d7c <_strerror_r+0x33c>)
 8009c26:	e7a4      	b.n	8009b72 <_strerror_r+0x132>
 8009c28:	4855      	ldr	r0, [pc, #340]	; (8009d80 <_strerror_r+0x340>)
 8009c2a:	e7a2      	b.n	8009b72 <_strerror_r+0x132>
 8009c2c:	4855      	ldr	r0, [pc, #340]	; (8009d84 <_strerror_r+0x344>)
 8009c2e:	e7a0      	b.n	8009b72 <_strerror_r+0x132>
 8009c30:	4855      	ldr	r0, [pc, #340]	; (8009d88 <_strerror_r+0x348>)
 8009c32:	e79e      	b.n	8009b72 <_strerror_r+0x132>
 8009c34:	4855      	ldr	r0, [pc, #340]	; (8009d8c <_strerror_r+0x34c>)
 8009c36:	e79c      	b.n	8009b72 <_strerror_r+0x132>
 8009c38:	4855      	ldr	r0, [pc, #340]	; (8009d90 <_strerror_r+0x350>)
 8009c3a:	e79a      	b.n	8009b72 <_strerror_r+0x132>
 8009c3c:	4855      	ldr	r0, [pc, #340]	; (8009d94 <_strerror_r+0x354>)
 8009c3e:	e798      	b.n	8009b72 <_strerror_r+0x132>
 8009c40:	4855      	ldr	r0, [pc, #340]	; (8009d98 <_strerror_r+0x358>)
 8009c42:	e796      	b.n	8009b72 <_strerror_r+0x132>
 8009c44:	4855      	ldr	r0, [pc, #340]	; (8009d9c <_strerror_r+0x35c>)
 8009c46:	e794      	b.n	8009b72 <_strerror_r+0x132>
 8009c48:	4855      	ldr	r0, [pc, #340]	; (8009da0 <_strerror_r+0x360>)
 8009c4a:	e792      	b.n	8009b72 <_strerror_r+0x132>
 8009c4c:	4855      	ldr	r0, [pc, #340]	; (8009da4 <_strerror_r+0x364>)
 8009c4e:	e790      	b.n	8009b72 <_strerror_r+0x132>
 8009c50:	4855      	ldr	r0, [pc, #340]	; (8009da8 <_strerror_r+0x368>)
 8009c52:	e78e      	b.n	8009b72 <_strerror_r+0x132>
 8009c54:	4855      	ldr	r0, [pc, #340]	; (8009dac <_strerror_r+0x36c>)
 8009c56:	e78c      	b.n	8009b72 <_strerror_r+0x132>
 8009c58:	4855      	ldr	r0, [pc, #340]	; (8009db0 <_strerror_r+0x370>)
 8009c5a:	e78a      	b.n	8009b72 <_strerror_r+0x132>
 8009c5c:	4855      	ldr	r0, [pc, #340]	; (8009db4 <_strerror_r+0x374>)
 8009c5e:	e788      	b.n	8009b72 <_strerror_r+0x132>
 8009c60:	4855      	ldr	r0, [pc, #340]	; (8009db8 <_strerror_r+0x378>)
 8009c62:	e786      	b.n	8009b72 <_strerror_r+0x132>
 8009c64:	4855      	ldr	r0, [pc, #340]	; (8009dbc <_strerror_r+0x37c>)
 8009c66:	e784      	b.n	8009b72 <_strerror_r+0x132>
 8009c68:	4855      	ldr	r0, [pc, #340]	; (8009dc0 <_strerror_r+0x380>)
 8009c6a:	e782      	b.n	8009b72 <_strerror_r+0x132>
 8009c6c:	4855      	ldr	r0, [pc, #340]	; (8009dc4 <_strerror_r+0x384>)
 8009c6e:	e780      	b.n	8009b72 <_strerror_r+0x132>
 8009c70:	4855      	ldr	r0, [pc, #340]	; (8009dc8 <_strerror_r+0x388>)
 8009c72:	e77e      	b.n	8009b72 <_strerror_r+0x132>
 8009c74:	4855      	ldr	r0, [pc, #340]	; (8009dcc <_strerror_r+0x38c>)
 8009c76:	e77c      	b.n	8009b72 <_strerror_r+0x132>
 8009c78:	4855      	ldr	r0, [pc, #340]	; (8009dd0 <_strerror_r+0x390>)
 8009c7a:	e77a      	b.n	8009b72 <_strerror_r+0x132>
 8009c7c:	4855      	ldr	r0, [pc, #340]	; (8009dd4 <_strerror_r+0x394>)
 8009c7e:	e778      	b.n	8009b72 <_strerror_r+0x132>
 8009c80:	4855      	ldr	r0, [pc, #340]	; (8009dd8 <_strerror_r+0x398>)
 8009c82:	e776      	b.n	8009b72 <_strerror_r+0x132>
 8009c84:	4855      	ldr	r0, [pc, #340]	; (8009ddc <_strerror_r+0x39c>)
 8009c86:	e774      	b.n	8009b72 <_strerror_r+0x132>
 8009c88:	4855      	ldr	r0, [pc, #340]	; (8009de0 <_strerror_r+0x3a0>)
 8009c8a:	e772      	b.n	8009b72 <_strerror_r+0x132>
 8009c8c:	4855      	ldr	r0, [pc, #340]	; (8009de4 <_strerror_r+0x3a4>)
 8009c8e:	e770      	b.n	8009b72 <_strerror_r+0x132>
 8009c90:	4855      	ldr	r0, [pc, #340]	; (8009de8 <_strerror_r+0x3a8>)
 8009c92:	e76e      	b.n	8009b72 <_strerror_r+0x132>
 8009c94:	4855      	ldr	r0, [pc, #340]	; (8009dec <_strerror_r+0x3ac>)
 8009c96:	e76c      	b.n	8009b72 <_strerror_r+0x132>
 8009c98:	4855      	ldr	r0, [pc, #340]	; (8009df0 <_strerror_r+0x3b0>)
 8009c9a:	e76a      	b.n	8009b72 <_strerror_r+0x132>
 8009c9c:	4855      	ldr	r0, [pc, #340]	; (8009df4 <_strerror_r+0x3b4>)
 8009c9e:	e768      	b.n	8009b72 <_strerror_r+0x132>
 8009ca0:	4855      	ldr	r0, [pc, #340]	; (8009df8 <_strerror_r+0x3b8>)
 8009ca2:	e766      	b.n	8009b72 <_strerror_r+0x132>
 8009ca4:	4855      	ldr	r0, [pc, #340]	; (8009dfc <_strerror_r+0x3bc>)
 8009ca6:	e764      	b.n	8009b72 <_strerror_r+0x132>
 8009ca8:	4855      	ldr	r0, [pc, #340]	; (8009e00 <_strerror_r+0x3c0>)
 8009caa:	e762      	b.n	8009b72 <_strerror_r+0x132>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bf14      	ite	ne
 8009cb0:	461a      	movne	r2, r3
 8009cb2:	4622      	moveq	r2, r4
 8009cb4:	f000 ff84 	bl	800abc0 <_user_strerror>
 8009cb8:	4b52      	ldr	r3, [pc, #328]	; (8009e04 <_strerror_r+0x3c4>)
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	bf08      	it	eq
 8009cbe:	4618      	moveq	r0, r3
 8009cc0:	e757      	b.n	8009b72 <_strerror_r+0x132>
 8009cc2:	4851      	ldr	r0, [pc, #324]	; (8009e08 <_strerror_r+0x3c8>)
 8009cc4:	e755      	b.n	8009b72 <_strerror_r+0x132>
 8009cc6:	bf00      	nop
 8009cc8:	0800db88 	.word	0x0800db88
 8009ccc:	0800db92 	.word	0x0800db92
 8009cd0:	0800dbac 	.word	0x0800dbac
 8009cd4:	0800dbbc 	.word	0x0800dbbc
 8009cd8:	0800dbd4 	.word	0x0800dbd4
 8009cdc:	0800dbde 	.word	0x0800dbde
 8009ce0:	0800dbf8 	.word	0x0800dbf8
 8009ce4:	0800dc0a 	.word	0x0800dc0a
 8009ce8:	0800dc1c 	.word	0x0800dc1c
 8009cec:	0800dc35 	.word	0x0800dc35
 8009cf0:	0800dc45 	.word	0x0800dc45
 8009cf4:	0800dc51 	.word	0x0800dc51
 8009cf8:	0800dc6e 	.word	0x0800dc6e
 8009cfc:	0800dc80 	.word	0x0800dc80
 8009d00:	0800dc91 	.word	0x0800dc91
 8009d04:	0800dca3 	.word	0x0800dca3
 8009d08:	0800dcaf 	.word	0x0800dcaf
 8009d0c:	0800dcc7 	.word	0x0800dcc7
 8009d10:	0800dcd3 	.word	0x0800dcd3
 8009d14:	0800dce5 	.word	0x0800dce5
 8009d18:	0800dcf4 	.word	0x0800dcf4
 8009d1c:	0800dd04 	.word	0x0800dd04
 8009d20:	0800dd11 	.word	0x0800dd11
 8009d24:	0800dd30 	.word	0x0800dd30
 8009d28:	0800dd3f 	.word	0x0800dd3f
 8009d2c:	0800dd50 	.word	0x0800dd50
 8009d30:	0800dd74 	.word	0x0800dd74
 8009d34:	0800dd92 	.word	0x0800dd92
 8009d38:	0800ddb0 	.word	0x0800ddb0
 8009d3c:	0800ddd0 	.word	0x0800ddd0
 8009d40:	0800dde7 	.word	0x0800dde7
 8009d44:	0800ddf6 	.word	0x0800ddf6
 8009d48:	0800de05 	.word	0x0800de05
 8009d4c:	0800de19 	.word	0x0800de19
 8009d50:	0800de31 	.word	0x0800de31
 8009d54:	0800de3f 	.word	0x0800de3f
 8009d58:	0800de4c 	.word	0x0800de4c
 8009d5c:	0800de62 	.word	0x0800de62
 8009d60:	0800de71 	.word	0x0800de71
 8009d64:	0800de7d 	.word	0x0800de7d
 8009d68:	0800deac 	.word	0x0800deac
 8009d6c:	0800debd 	.word	0x0800debd
 8009d70:	0800ded8 	.word	0x0800ded8
 8009d74:	0800deeb 	.word	0x0800deeb
 8009d78:	0800df01 	.word	0x0800df01
 8009d7c:	0800df0a 	.word	0x0800df0a
 8009d80:	0800df21 	.word	0x0800df21
 8009d84:	0800df29 	.word	0x0800df29
 8009d88:	0800df36 	.word	0x0800df36
 8009d8c:	0800df4b 	.word	0x0800df4b
 8009d90:	0800df5f 	.word	0x0800df5f
 8009d94:	0800df77 	.word	0x0800df77
 8009d98:	0800df86 	.word	0x0800df86
 8009d9c:	0800df97 	.word	0x0800df97
 8009da0:	0800dfaa 	.word	0x0800dfaa
 8009da4:	0800dfb6 	.word	0x0800dfb6
 8009da8:	0800dfcf 	.word	0x0800dfcf
 8009dac:	0800dfe3 	.word	0x0800dfe3
 8009db0:	0800dffe 	.word	0x0800dffe
 8009db4:	0800e016 	.word	0x0800e016
 8009db8:	0800e030 	.word	0x0800e030
 8009dbc:	0800e038 	.word	0x0800e038
 8009dc0:	0800e068 	.word	0x0800e068
 8009dc4:	0800e087 	.word	0x0800e087
 8009dc8:	0800e0a6 	.word	0x0800e0a6
 8009dcc:	0800e0bd 	.word	0x0800e0bd
 8009dd0:	0800e0d0 	.word	0x0800e0d0
 8009dd4:	0800e0e9 	.word	0x0800e0e9
 8009dd8:	0800e100 	.word	0x0800e100
 8009ddc:	0800e116 	.word	0x0800e116
 8009de0:	0800e137 	.word	0x0800e137
 8009de4:	0800e14f 	.word	0x0800e14f
 8009de8:	0800e16b 	.word	0x0800e16b
 8009dec:	0800e17e 	.word	0x0800e17e
 8009df0:	0800e194 	.word	0x0800e194
 8009df4:	0800e1a8 	.word	0x0800e1a8
 8009df8:	0800e1ca 	.word	0x0800e1ca
 8009dfc:	0800e1f0 	.word	0x0800e1f0
 8009e00:	0800e201 	.word	0x0800e201
 8009e04:	0800e690 	.word	0x0800e690
 8009e08:	0800e216 	.word	0x0800e216

08009e0c <strncmp>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	b16a      	cbz	r2, 8009e2c <strncmp+0x20>
 8009e10:	3901      	subs	r1, #1
 8009e12:	1884      	adds	r4, r0, r2
 8009e14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d103      	bne.n	8009e28 <strncmp+0x1c>
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d001      	beq.n	8009e28 <strncmp+0x1c>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f5      	bne.n	8009e14 <strncmp+0x8>
 8009e28:	1a98      	subs	r0, r3, r2
 8009e2a:	bd10      	pop	{r4, pc}
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	e7fc      	b.n	8009e2a <strncmp+0x1e>

08009e30 <strstr>:
 8009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e32:	780c      	ldrb	r4, [r1, #0]
 8009e34:	b164      	cbz	r4, 8009e50 <strstr+0x20>
 8009e36:	4603      	mov	r3, r0
 8009e38:	781a      	ldrb	r2, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	1c5e      	adds	r6, r3, #1
 8009e3e:	b90a      	cbnz	r2, 8009e44 <strstr+0x14>
 8009e40:	4610      	mov	r0, r2
 8009e42:	e005      	b.n	8009e50 <strstr+0x20>
 8009e44:	4294      	cmp	r4, r2
 8009e46:	d108      	bne.n	8009e5a <strstr+0x2a>
 8009e48:	460d      	mov	r5, r1
 8009e4a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009e4e:	b902      	cbnz	r2, 8009e52 <strstr+0x22>
 8009e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e52:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009e56:	4297      	cmp	r7, r2
 8009e58:	d0f7      	beq.n	8009e4a <strstr+0x1a>
 8009e5a:	4633      	mov	r3, r6
 8009e5c:	e7ec      	b.n	8009e38 <strstr+0x8>

08009e5e <sulp>:
 8009e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	460f      	mov	r7, r1
 8009e64:	4690      	mov	r8, r2
 8009e66:	f002 ff47 	bl	800ccf8 <__ulp>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	d011      	beq.n	8009e98 <sulp+0x3a>
 8009e74:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009e78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd0b      	ble.n	8009e98 <sulp+0x3a>
 8009e80:	051b      	lsls	r3, r3, #20
 8009e82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e86:	2400      	movs	r4, #0
 8009e88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	462b      	mov	r3, r5
 8009e90:	f7f6 fb9a 	bl	80005c8 <__aeabi_dmul>
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ea0 <_strtod_l>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	b0a1      	sub	sp, #132	; 0x84
 8009ea6:	469b      	mov	fp, r3
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	931c      	str	r3, [sp, #112]	; 0x70
 8009eac:	4ba1      	ldr	r3, [pc, #644]	; (800a134 <_strtod_l+0x294>)
 8009eae:	9217      	str	r2, [sp, #92]	; 0x5c
 8009eb0:	681f      	ldr	r7, [r3, #0]
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	460e      	mov	r6, r1
 8009eb8:	f7f6 f96c 	bl	8000194 <strlen>
 8009ebc:	f04f 0800 	mov.w	r8, #0
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	f04f 0900 	mov.w	r9, #0
 8009ec6:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	2a2b      	cmp	r2, #43	; 0x2b
 8009ece:	d04c      	beq.n	8009f6a <_strtod_l+0xca>
 8009ed0:	d83a      	bhi.n	8009f48 <_strtod_l+0xa8>
 8009ed2:	2a0d      	cmp	r2, #13
 8009ed4:	d833      	bhi.n	8009f3e <_strtod_l+0x9e>
 8009ed6:	2a08      	cmp	r2, #8
 8009ed8:	d833      	bhi.n	8009f42 <_strtod_l+0xa2>
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	d03d      	beq.n	8009f5a <_strtod_l+0xba>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009ee4:	782b      	ldrb	r3, [r5, #0]
 8009ee6:	2b30      	cmp	r3, #48	; 0x30
 8009ee8:	f040 80af 	bne.w	800a04a <_strtod_l+0x1aa>
 8009eec:	786b      	ldrb	r3, [r5, #1]
 8009eee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ef2:	2b58      	cmp	r3, #88	; 0x58
 8009ef4:	d16c      	bne.n	8009fd0 <_strtod_l+0x130>
 8009ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	ab1c      	add	r3, sp, #112	; 0x70
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4a8e      	ldr	r2, [pc, #568]	; (800a138 <_strtod_l+0x298>)
 8009f00:	f8cd b008 	str.w	fp, [sp, #8]
 8009f04:	ab1d      	add	r3, sp, #116	; 0x74
 8009f06:	a91b      	add	r1, sp, #108	; 0x6c
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f002 f803 	bl	800bf14 <__gethex>
 8009f0e:	f010 0607 	ands.w	r6, r0, #7
 8009f12:	4604      	mov	r4, r0
 8009f14:	d005      	beq.n	8009f22 <_strtod_l+0x82>
 8009f16:	2e06      	cmp	r6, #6
 8009f18:	d129      	bne.n	8009f6e <_strtod_l+0xce>
 8009f1a:	3501      	adds	r5, #1
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	951b      	str	r5, [sp, #108]	; 0x6c
 8009f20:	930c      	str	r3, [sp, #48]	; 0x30
 8009f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 8596 	bne.w	800aa56 <_strtod_l+0xbb6>
 8009f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f2c:	b1d3      	cbz	r3, 8009f64 <_strtod_l+0xc4>
 8009f2e:	4642      	mov	r2, r8
 8009f30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f34:	4610      	mov	r0, r2
 8009f36:	4619      	mov	r1, r3
 8009f38:	b021      	add	sp, #132	; 0x84
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	2a20      	cmp	r2, #32
 8009f40:	d1cd      	bne.n	8009ede <_strtod_l+0x3e>
 8009f42:	3301      	adds	r3, #1
 8009f44:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f46:	e7bf      	b.n	8009ec8 <_strtod_l+0x28>
 8009f48:	2a2d      	cmp	r2, #45	; 0x2d
 8009f4a:	d1c8      	bne.n	8009ede <_strtod_l+0x3e>
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	920c      	str	r2, [sp, #48]	; 0x30
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1c3      	bne.n	8009ee2 <_strtod_l+0x42>
 8009f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f040 8577 	bne.w	800aa52 <_strtod_l+0xbb2>
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	e7e4      	b.n	8009f34 <_strtod_l+0x94>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	e7ef      	b.n	8009f4e <_strtod_l+0xae>
 8009f6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f70:	b13a      	cbz	r2, 8009f82 <_strtod_l+0xe2>
 8009f72:	2135      	movs	r1, #53	; 0x35
 8009f74:	a81e      	add	r0, sp, #120	; 0x78
 8009f76:	f002 ffc3 	bl	800cf00 <__copybits>
 8009f7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	f002 fb8f 	bl	800c6a0 <_Bfree>
 8009f82:	3e01      	subs	r6, #1
 8009f84:	2e05      	cmp	r6, #5
 8009f86:	d807      	bhi.n	8009f98 <_strtod_l+0xf8>
 8009f88:	e8df f006 	tbb	[pc, r6]
 8009f8c:	1d180b0e 	.word	0x1d180b0e
 8009f90:	030e      	.short	0x030e
 8009f92:	f04f 0900 	mov.w	r9, #0
 8009f96:	46c8      	mov	r8, r9
 8009f98:	0721      	lsls	r1, r4, #28
 8009f9a:	d5c2      	bpl.n	8009f22 <_strtod_l+0x82>
 8009f9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009fa0:	e7bf      	b.n	8009f22 <_strtod_l+0x82>
 8009fa2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009fa6:	e7f7      	b.n	8009f98 <_strtod_l+0xf8>
 8009fa8:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009fac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009fae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009fb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009fba:	e7ed      	b.n	8009f98 <_strtod_l+0xf8>
 8009fbc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a13c <_strtod_l+0x29c>
 8009fc0:	f04f 0800 	mov.w	r8, #0
 8009fc4:	e7e8      	b.n	8009f98 <_strtod_l+0xf8>
 8009fc6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009fca:	f04f 38ff 	mov.w	r8, #4294967295
 8009fce:	e7e3      	b.n	8009f98 <_strtod_l+0xf8>
 8009fd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	921b      	str	r2, [sp, #108]	; 0x6c
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	2b30      	cmp	r3, #48	; 0x30
 8009fda:	d0f9      	beq.n	8009fd0 <_strtod_l+0x130>
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0a0      	beq.n	8009f22 <_strtod_l+0x82>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	9307      	str	r3, [sp, #28]
 8009fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fe6:	9308      	str	r3, [sp, #32]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009fee:	469b      	mov	fp, r3
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009ff4:	7805      	ldrb	r5, [r0, #0]
 8009ff6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009ffa:	b2d9      	uxtb	r1, r3
 8009ffc:	2909      	cmp	r1, #9
 8009ffe:	d926      	bls.n	800a04e <_strtod_l+0x1ae>
 800a000:	4622      	mov	r2, r4
 800a002:	4639      	mov	r1, r7
 800a004:	f7ff ff02 	bl	8009e0c <strncmp>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d032      	beq.n	800a072 <_strtod_l+0x1d2>
 800a00c:	2000      	movs	r0, #0
 800a00e:	462b      	mov	r3, r5
 800a010:	465c      	mov	r4, fp
 800a012:	9004      	str	r0, [sp, #16]
 800a014:	4602      	mov	r2, r0
 800a016:	2b65      	cmp	r3, #101	; 0x65
 800a018:	d001      	beq.n	800a01e <_strtod_l+0x17e>
 800a01a:	2b45      	cmp	r3, #69	; 0x45
 800a01c:	d113      	bne.n	800a046 <_strtod_l+0x1a6>
 800a01e:	b91c      	cbnz	r4, 800a028 <_strtod_l+0x188>
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	4303      	orrs	r3, r0
 800a024:	d099      	beq.n	8009f5a <_strtod_l+0xba>
 800a026:	2400      	movs	r4, #0
 800a028:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a02a:	1c73      	adds	r3, r6, #1
 800a02c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a02e:	7873      	ldrb	r3, [r6, #1]
 800a030:	2b2b      	cmp	r3, #43	; 0x2b
 800a032:	d078      	beq.n	800a126 <_strtod_l+0x286>
 800a034:	2b2d      	cmp	r3, #45	; 0x2d
 800a036:	d07b      	beq.n	800a130 <_strtod_l+0x290>
 800a038:	2700      	movs	r7, #0
 800a03a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a03e:	2909      	cmp	r1, #9
 800a040:	f240 8082 	bls.w	800a148 <_strtod_l+0x2a8>
 800a044:	961b      	str	r6, [sp, #108]	; 0x6c
 800a046:	2500      	movs	r5, #0
 800a048:	e09e      	b.n	800a188 <_strtod_l+0x2e8>
 800a04a:	2300      	movs	r3, #0
 800a04c:	e7c9      	b.n	8009fe2 <_strtod_l+0x142>
 800a04e:	f1bb 0f08 	cmp.w	fp, #8
 800a052:	bfd5      	itete	le
 800a054:	9906      	ldrle	r1, [sp, #24]
 800a056:	9905      	ldrgt	r1, [sp, #20]
 800a058:	fb02 3301 	mlale	r3, r2, r1, r3
 800a05c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a060:	f100 0001 	add.w	r0, r0, #1
 800a064:	bfd4      	ite	le
 800a066:	9306      	strle	r3, [sp, #24]
 800a068:	9305      	strgt	r3, [sp, #20]
 800a06a:	f10b 0b01 	add.w	fp, fp, #1
 800a06e:	901b      	str	r0, [sp, #108]	; 0x6c
 800a070:	e7bf      	b.n	8009ff2 <_strtod_l+0x152>
 800a072:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a074:	191a      	adds	r2, r3, r4
 800a076:	921b      	str	r2, [sp, #108]	; 0x6c
 800a078:	5d1b      	ldrb	r3, [r3, r4]
 800a07a:	f1bb 0f00 	cmp.w	fp, #0
 800a07e:	d036      	beq.n	800a0ee <_strtod_l+0x24e>
 800a080:	9004      	str	r0, [sp, #16]
 800a082:	465c      	mov	r4, fp
 800a084:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a088:	2a09      	cmp	r2, #9
 800a08a:	d912      	bls.n	800a0b2 <_strtod_l+0x212>
 800a08c:	2201      	movs	r2, #1
 800a08e:	e7c2      	b.n	800a016 <_strtod_l+0x176>
 800a090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	921b      	str	r2, [sp, #108]	; 0x6c
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	3001      	adds	r0, #1
 800a09a:	2b30      	cmp	r3, #48	; 0x30
 800a09c:	d0f8      	beq.n	800a090 <_strtod_l+0x1f0>
 800a09e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a0a2:	2a08      	cmp	r2, #8
 800a0a4:	f200 84dc 	bhi.w	800aa60 <_strtod_l+0xbc0>
 800a0a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a0aa:	9004      	str	r0, [sp, #16]
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	9208      	str	r2, [sp, #32]
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	3b30      	subs	r3, #48	; 0x30
 800a0b4:	f100 0201 	add.w	r2, r0, #1
 800a0b8:	d013      	beq.n	800a0e2 <_strtod_l+0x242>
 800a0ba:	9904      	ldr	r1, [sp, #16]
 800a0bc:	4411      	add	r1, r2
 800a0be:	9104      	str	r1, [sp, #16]
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	1905      	adds	r5, r0, r4
 800a0c4:	210a      	movs	r1, #10
 800a0c6:	42aa      	cmp	r2, r5
 800a0c8:	d113      	bne.n	800a0f2 <_strtod_l+0x252>
 800a0ca:	1822      	adds	r2, r4, r0
 800a0cc:	2a08      	cmp	r2, #8
 800a0ce:	f104 0401 	add.w	r4, r4, #1
 800a0d2:	4404      	add	r4, r0
 800a0d4:	dc1b      	bgt.n	800a10e <_strtod_l+0x26e>
 800a0d6:	9906      	ldr	r1, [sp, #24]
 800a0d8:	220a      	movs	r2, #10
 800a0da:	fb02 3301 	mla	r3, r2, r1, r3
 800a0de:	9306      	str	r3, [sp, #24]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0e4:	1c59      	adds	r1, r3, #1
 800a0e6:	911b      	str	r1, [sp, #108]	; 0x6c
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	e7ca      	b.n	800a084 <_strtod_l+0x1e4>
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	e7d3      	b.n	800a09a <_strtod_l+0x1fa>
 800a0f2:	2a08      	cmp	r2, #8
 800a0f4:	dc04      	bgt.n	800a100 <_strtod_l+0x260>
 800a0f6:	9f06      	ldr	r7, [sp, #24]
 800a0f8:	434f      	muls	r7, r1
 800a0fa:	9706      	str	r7, [sp, #24]
 800a0fc:	3201      	adds	r2, #1
 800a0fe:	e7e2      	b.n	800a0c6 <_strtod_l+0x226>
 800a100:	1c57      	adds	r7, r2, #1
 800a102:	2f10      	cmp	r7, #16
 800a104:	bfde      	ittt	le
 800a106:	9f05      	ldrle	r7, [sp, #20]
 800a108:	434f      	mulle	r7, r1
 800a10a:	9705      	strle	r7, [sp, #20]
 800a10c:	e7f6      	b.n	800a0fc <_strtod_l+0x25c>
 800a10e:	2c10      	cmp	r4, #16
 800a110:	bfdf      	itttt	le
 800a112:	9905      	ldrle	r1, [sp, #20]
 800a114:	220a      	movle	r2, #10
 800a116:	fb02 3301 	mlale	r3, r2, r1, r3
 800a11a:	9305      	strle	r3, [sp, #20]
 800a11c:	e7e0      	b.n	800a0e0 <_strtod_l+0x240>
 800a11e:	2300      	movs	r3, #0
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	2201      	movs	r2, #1
 800a124:	e77c      	b.n	800a020 <_strtod_l+0x180>
 800a126:	2700      	movs	r7, #0
 800a128:	1cb3      	adds	r3, r6, #2
 800a12a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a12c:	78b3      	ldrb	r3, [r6, #2]
 800a12e:	e784      	b.n	800a03a <_strtod_l+0x19a>
 800a130:	2701      	movs	r7, #1
 800a132:	e7f9      	b.n	800a128 <_strtod_l+0x288>
 800a134:	0800e4d4 	.word	0x0800e4d4
 800a138:	0800e220 	.word	0x0800e220
 800a13c:	7ff00000 	.word	0x7ff00000
 800a140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a142:	1c59      	adds	r1, r3, #1
 800a144:	911b      	str	r1, [sp, #108]	; 0x6c
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b30      	cmp	r3, #48	; 0x30
 800a14a:	d0f9      	beq.n	800a140 <_strtod_l+0x2a0>
 800a14c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a150:	2908      	cmp	r1, #8
 800a152:	f63f af78 	bhi.w	800a046 <_strtod_l+0x1a6>
 800a156:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a15a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a15c:	9309      	str	r3, [sp, #36]	; 0x24
 800a15e:	f04f 0e0a 	mov.w	lr, #10
 800a162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a164:	1c59      	adds	r1, r3, #1
 800a166:	911b      	str	r1, [sp, #108]	; 0x6c
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a16e:	2d09      	cmp	r5, #9
 800a170:	d935      	bls.n	800a1de <_strtod_l+0x33e>
 800a172:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a174:	1b49      	subs	r1, r1, r5
 800a176:	2908      	cmp	r1, #8
 800a178:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a17c:	dc02      	bgt.n	800a184 <_strtod_l+0x2e4>
 800a17e:	4565      	cmp	r5, ip
 800a180:	bfa8      	it	ge
 800a182:	4665      	movge	r5, ip
 800a184:	b107      	cbz	r7, 800a188 <_strtod_l+0x2e8>
 800a186:	426d      	negs	r5, r5
 800a188:	2c00      	cmp	r4, #0
 800a18a:	d14c      	bne.n	800a226 <_strtod_l+0x386>
 800a18c:	9907      	ldr	r1, [sp, #28]
 800a18e:	4301      	orrs	r1, r0
 800a190:	f47f aec7 	bne.w	8009f22 <_strtod_l+0x82>
 800a194:	2a00      	cmp	r2, #0
 800a196:	f47f aee0 	bne.w	8009f5a <_strtod_l+0xba>
 800a19a:	2b69      	cmp	r3, #105	; 0x69
 800a19c:	d026      	beq.n	800a1ec <_strtod_l+0x34c>
 800a19e:	dc23      	bgt.n	800a1e8 <_strtod_l+0x348>
 800a1a0:	2b49      	cmp	r3, #73	; 0x49
 800a1a2:	d023      	beq.n	800a1ec <_strtod_l+0x34c>
 800a1a4:	2b4e      	cmp	r3, #78	; 0x4e
 800a1a6:	f47f aed8 	bne.w	8009f5a <_strtod_l+0xba>
 800a1aa:	499c      	ldr	r1, [pc, #624]	; (800a41c <_strtod_l+0x57c>)
 800a1ac:	a81b      	add	r0, sp, #108	; 0x6c
 800a1ae:	f002 f8fd 	bl	800c3ac <__match>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f43f aed1 	beq.w	8009f5a <_strtod_l+0xba>
 800a1b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b28      	cmp	r3, #40	; 0x28
 800a1be:	d12c      	bne.n	800a21a <_strtod_l+0x37a>
 800a1c0:	4997      	ldr	r1, [pc, #604]	; (800a420 <_strtod_l+0x580>)
 800a1c2:	aa1e      	add	r2, sp, #120	; 0x78
 800a1c4:	a81b      	add	r0, sp, #108	; 0x6c
 800a1c6:	f002 f905 	bl	800c3d4 <__hexnan>
 800a1ca:	2805      	cmp	r0, #5
 800a1cc:	d125      	bne.n	800a21a <_strtod_l+0x37a>
 800a1ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a1d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a1d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a1dc:	e6a1      	b.n	8009f22 <_strtod_l+0x82>
 800a1de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a1e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a1e6:	e7bc      	b.n	800a162 <_strtod_l+0x2c2>
 800a1e8:	2b6e      	cmp	r3, #110	; 0x6e
 800a1ea:	e7dc      	b.n	800a1a6 <_strtod_l+0x306>
 800a1ec:	498d      	ldr	r1, [pc, #564]	; (800a424 <_strtod_l+0x584>)
 800a1ee:	a81b      	add	r0, sp, #108	; 0x6c
 800a1f0:	f002 f8dc 	bl	800c3ac <__match>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f aeb0 	beq.w	8009f5a <_strtod_l+0xba>
 800a1fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1fc:	498a      	ldr	r1, [pc, #552]	; (800a428 <_strtod_l+0x588>)
 800a1fe:	3b01      	subs	r3, #1
 800a200:	a81b      	add	r0, sp, #108	; 0x6c
 800a202:	931b      	str	r3, [sp, #108]	; 0x6c
 800a204:	f002 f8d2 	bl	800c3ac <__match>
 800a208:	b910      	cbnz	r0, 800a210 <_strtod_l+0x370>
 800a20a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a20c:	3301      	adds	r3, #1
 800a20e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a210:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800a438 <_strtod_l+0x598>
 800a214:	f04f 0800 	mov.w	r8, #0
 800a218:	e683      	b.n	8009f22 <_strtod_l+0x82>
 800a21a:	4884      	ldr	r0, [pc, #528]	; (800a42c <_strtod_l+0x58c>)
 800a21c:	f003 f81a 	bl	800d254 <nan>
 800a220:	4680      	mov	r8, r0
 800a222:	4689      	mov	r9, r1
 800a224:	e67d      	b.n	8009f22 <_strtod_l+0x82>
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	9806      	ldr	r0, [sp, #24]
 800a22a:	1aeb      	subs	r3, r5, r3
 800a22c:	f1bb 0f00 	cmp.w	fp, #0
 800a230:	bf08      	it	eq
 800a232:	46a3      	moveq	fp, r4
 800a234:	2c10      	cmp	r4, #16
 800a236:	9307      	str	r3, [sp, #28]
 800a238:	4626      	mov	r6, r4
 800a23a:	bfa8      	it	ge
 800a23c:	2610      	movge	r6, #16
 800a23e:	f7f6 f949 	bl	80004d4 <__aeabi_ui2d>
 800a242:	2c09      	cmp	r4, #9
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	dd13      	ble.n	800a272 <_strtod_l+0x3d2>
 800a24a:	4b79      	ldr	r3, [pc, #484]	; (800a430 <_strtod_l+0x590>)
 800a24c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a250:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a254:	f7f6 f9b8 	bl	80005c8 <__aeabi_dmul>
 800a258:	4680      	mov	r8, r0
 800a25a:	9805      	ldr	r0, [sp, #20]
 800a25c:	4689      	mov	r9, r1
 800a25e:	f7f6 f939 	bl	80004d4 <__aeabi_ui2d>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f5 fff7 	bl	800025c <__adddf3>
 800a26e:	4680      	mov	r8, r0
 800a270:	4689      	mov	r9, r1
 800a272:	2c0f      	cmp	r4, #15
 800a274:	dc36      	bgt.n	800a2e4 <_strtod_l+0x444>
 800a276:	9b07      	ldr	r3, [sp, #28]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f43f ae52 	beq.w	8009f22 <_strtod_l+0x82>
 800a27e:	dd22      	ble.n	800a2c6 <_strtod_l+0x426>
 800a280:	2b16      	cmp	r3, #22
 800a282:	dc09      	bgt.n	800a298 <_strtod_l+0x3f8>
 800a284:	4c6a      	ldr	r4, [pc, #424]	; (800a430 <_strtod_l+0x590>)
 800a286:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a28a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a28e:	4642      	mov	r2, r8
 800a290:	464b      	mov	r3, r9
 800a292:	f7f6 f999 	bl	80005c8 <__aeabi_dmul>
 800a296:	e7c3      	b.n	800a220 <_strtod_l+0x380>
 800a298:	9a07      	ldr	r2, [sp, #28]
 800a29a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	db20      	blt.n	800a2e4 <_strtod_l+0x444>
 800a2a2:	4d63      	ldr	r5, [pc, #396]	; (800a430 <_strtod_l+0x590>)
 800a2a4:	f1c4 040f 	rsb	r4, r4, #15
 800a2a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b4:	f7f6 f988 	bl	80005c8 <__aeabi_dmul>
 800a2b8:	9b07      	ldr	r3, [sp, #28]
 800a2ba:	1b1c      	subs	r4, r3, r4
 800a2bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a2c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2c4:	e7e5      	b.n	800a292 <_strtod_l+0x3f2>
 800a2c6:	9b07      	ldr	r3, [sp, #28]
 800a2c8:	3316      	adds	r3, #22
 800a2ca:	db0b      	blt.n	800a2e4 <_strtod_l+0x444>
 800a2cc:	9b04      	ldr	r3, [sp, #16]
 800a2ce:	4a58      	ldr	r2, [pc, #352]	; (800a430 <_strtod_l+0x590>)
 800a2d0:	1b5d      	subs	r5, r3, r5
 800a2d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a2d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 fa9d 	bl	800081c <__aeabi_ddiv>
 800a2e2:	e79d      	b.n	800a220 <_strtod_l+0x380>
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	1ba6      	subs	r6, r4, r6
 800a2e8:	441e      	add	r6, r3
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	dd71      	ble.n	800a3d2 <_strtod_l+0x532>
 800a2ee:	f016 030f 	ands.w	r3, r6, #15
 800a2f2:	d00a      	beq.n	800a30a <_strtod_l+0x46a>
 800a2f4:	494e      	ldr	r1, [pc, #312]	; (800a430 <_strtod_l+0x590>)
 800a2f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a302:	f7f6 f961 	bl	80005c8 <__aeabi_dmul>
 800a306:	4680      	mov	r8, r0
 800a308:	4689      	mov	r9, r1
 800a30a:	f036 060f 	bics.w	r6, r6, #15
 800a30e:	d050      	beq.n	800a3b2 <_strtod_l+0x512>
 800a310:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a314:	dd27      	ble.n	800a366 <_strtod_l+0x4c6>
 800a316:	f04f 0b00 	mov.w	fp, #0
 800a31a:	f8cd b010 	str.w	fp, [sp, #16]
 800a31e:	f8cd b020 	str.w	fp, [sp, #32]
 800a322:	f8cd b018 	str.w	fp, [sp, #24]
 800a326:	2322      	movs	r3, #34	; 0x22
 800a328:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800a438 <_strtod_l+0x598>
 800a32c:	f8ca 3000 	str.w	r3, [sl]
 800a330:	f04f 0800 	mov.w	r8, #0
 800a334:	9b08      	ldr	r3, [sp, #32]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f43f adf3 	beq.w	8009f22 <_strtod_l+0x82>
 800a33c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a33e:	4650      	mov	r0, sl
 800a340:	f002 f9ae 	bl	800c6a0 <_Bfree>
 800a344:	9906      	ldr	r1, [sp, #24]
 800a346:	4650      	mov	r0, sl
 800a348:	f002 f9aa 	bl	800c6a0 <_Bfree>
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	4650      	mov	r0, sl
 800a350:	f002 f9a6 	bl	800c6a0 <_Bfree>
 800a354:	9908      	ldr	r1, [sp, #32]
 800a356:	4650      	mov	r0, sl
 800a358:	f002 f9a2 	bl	800c6a0 <_Bfree>
 800a35c:	4659      	mov	r1, fp
 800a35e:	4650      	mov	r0, sl
 800a360:	f002 f99e 	bl	800c6a0 <_Bfree>
 800a364:	e5dd      	b.n	8009f22 <_strtod_l+0x82>
 800a366:	2300      	movs	r3, #0
 800a368:	1136      	asrs	r6, r6, #4
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	461f      	mov	r7, r3
 800a370:	2e01      	cmp	r6, #1
 800a372:	dc21      	bgt.n	800a3b8 <_strtod_l+0x518>
 800a374:	b10b      	cbz	r3, 800a37a <_strtod_l+0x4da>
 800a376:	4680      	mov	r8, r0
 800a378:	4689      	mov	r9, r1
 800a37a:	4b2e      	ldr	r3, [pc, #184]	; (800a434 <_strtod_l+0x594>)
 800a37c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a380:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a384:	4642      	mov	r2, r8
 800a386:	464b      	mov	r3, r9
 800a388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a38c:	f7f6 f91c 	bl	80005c8 <__aeabi_dmul>
 800a390:	4b29      	ldr	r3, [pc, #164]	; (800a438 <_strtod_l+0x598>)
 800a392:	460a      	mov	r2, r1
 800a394:	400b      	ands	r3, r1
 800a396:	4929      	ldr	r1, [pc, #164]	; (800a43c <_strtod_l+0x59c>)
 800a398:	428b      	cmp	r3, r1
 800a39a:	4680      	mov	r8, r0
 800a39c:	d8bb      	bhi.n	800a316 <_strtod_l+0x476>
 800a39e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a3a2:	428b      	cmp	r3, r1
 800a3a4:	bf86      	itte	hi
 800a3a6:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800a440 <_strtod_l+0x5a0>
 800a3aa:	f04f 38ff 	movhi.w	r8, #4294967295
 800a3ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	e07e      	b.n	800a4b6 <_strtod_l+0x616>
 800a3b8:	07f2      	lsls	r2, r6, #31
 800a3ba:	d507      	bpl.n	800a3cc <_strtod_l+0x52c>
 800a3bc:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <_strtod_l+0x594>)
 800a3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f6 f8ff 	bl	80005c8 <__aeabi_dmul>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	3701      	adds	r7, #1
 800a3ce:	1076      	asrs	r6, r6, #1
 800a3d0:	e7ce      	b.n	800a370 <_strtod_l+0x4d0>
 800a3d2:	d0ee      	beq.n	800a3b2 <_strtod_l+0x512>
 800a3d4:	4276      	negs	r6, r6
 800a3d6:	f016 020f 	ands.w	r2, r6, #15
 800a3da:	d00a      	beq.n	800a3f2 <_strtod_l+0x552>
 800a3dc:	4b14      	ldr	r3, [pc, #80]	; (800a430 <_strtod_l+0x590>)
 800a3de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f6 fa17 	bl	800081c <__aeabi_ddiv>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	4689      	mov	r9, r1
 800a3f2:	1136      	asrs	r6, r6, #4
 800a3f4:	d0dd      	beq.n	800a3b2 <_strtod_l+0x512>
 800a3f6:	2e1f      	cmp	r6, #31
 800a3f8:	dd24      	ble.n	800a444 <_strtod_l+0x5a4>
 800a3fa:	f04f 0b00 	mov.w	fp, #0
 800a3fe:	f8cd b010 	str.w	fp, [sp, #16]
 800a402:	f8cd b020 	str.w	fp, [sp, #32]
 800a406:	f8cd b018 	str.w	fp, [sp, #24]
 800a40a:	2322      	movs	r3, #34	; 0x22
 800a40c:	f04f 0800 	mov.w	r8, #0
 800a410:	f04f 0900 	mov.w	r9, #0
 800a414:	f8ca 3000 	str.w	r3, [sl]
 800a418:	e78c      	b.n	800a334 <_strtod_l+0x494>
 800a41a:	bf00      	nop
 800a41c:	0800db61 	.word	0x0800db61
 800a420:	0800e234 	.word	0x0800e234
 800a424:	0800db59 	.word	0x0800db59
 800a428:	0800e374 	.word	0x0800e374
 800a42c:	0800e690 	.word	0x0800e690
 800a430:	0800e570 	.word	0x0800e570
 800a434:	0800e548 	.word	0x0800e548
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	7ca00000 	.word	0x7ca00000
 800a440:	7fefffff 	.word	0x7fefffff
 800a444:	f016 0310 	ands.w	r3, r6, #16
 800a448:	bf18      	it	ne
 800a44a:	236a      	movne	r3, #106	; 0x6a
 800a44c:	4fb3      	ldr	r7, [pc, #716]	; (800a71c <_strtod_l+0x87c>)
 800a44e:	9305      	str	r3, [sp, #20]
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	2300      	movs	r3, #0
 800a456:	07f2      	lsls	r2, r6, #31
 800a458:	d504      	bpl.n	800a464 <_strtod_l+0x5c4>
 800a45a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45e:	f7f6 f8b3 	bl	80005c8 <__aeabi_dmul>
 800a462:	2301      	movs	r3, #1
 800a464:	1076      	asrs	r6, r6, #1
 800a466:	f107 0708 	add.w	r7, r7, #8
 800a46a:	d1f4      	bne.n	800a456 <_strtod_l+0x5b6>
 800a46c:	b10b      	cbz	r3, 800a472 <_strtod_l+0x5d2>
 800a46e:	4680      	mov	r8, r0
 800a470:	4689      	mov	r9, r1
 800a472:	9b05      	ldr	r3, [sp, #20]
 800a474:	b1bb      	cbz	r3, 800a4a6 <_strtod_l+0x606>
 800a476:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a47a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a47e:	2b00      	cmp	r3, #0
 800a480:	4649      	mov	r1, r9
 800a482:	dd10      	ble.n	800a4a6 <_strtod_l+0x606>
 800a484:	2b1f      	cmp	r3, #31
 800a486:	f340 8128 	ble.w	800a6da <_strtod_l+0x83a>
 800a48a:	2b34      	cmp	r3, #52	; 0x34
 800a48c:	bfde      	ittt	le
 800a48e:	3b20      	suble	r3, #32
 800a490:	f04f 32ff 	movle.w	r2, #4294967295
 800a494:	fa02 f303 	lslle.w	r3, r2, r3
 800a498:	f04f 0800 	mov.w	r8, #0
 800a49c:	bfcc      	ite	gt
 800a49e:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a4a2:	ea03 0901 	andle.w	r9, r3, r1
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	f7f6 faf3 	bl	8000a98 <__aeabi_dcmpeq>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d1a1      	bne.n	800a3fa <_strtod_l+0x55a>
 800a4b6:	9b06      	ldr	r3, [sp, #24]
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	9908      	ldr	r1, [sp, #32]
 800a4bc:	4623      	mov	r3, r4
 800a4be:	465a      	mov	r2, fp
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	f002 f959 	bl	800c778 <__s2b>
 800a4c6:	9008      	str	r0, [sp, #32]
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	f43f af24 	beq.w	800a316 <_strtod_l+0x476>
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	1b5d      	subs	r5, r3, r5
 800a4d2:	9b07      	ldr	r3, [sp, #28]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bfb4      	ite	lt
 800a4d8:	462b      	movlt	r3, r5
 800a4da:	2300      	movge	r3, #0
 800a4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800a4de:	9b07      	ldr	r3, [sp, #28]
 800a4e0:	f04f 0b00 	mov.w	fp, #0
 800a4e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a4e8:	9316      	str	r3, [sp, #88]	; 0x58
 800a4ea:	f8cd b010 	str.w	fp, [sp, #16]
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	6859      	ldr	r1, [r3, #4]
 800a4f4:	f002 f894 	bl	800c620 <_Balloc>
 800a4f8:	9006      	str	r0, [sp, #24]
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f43f af13 	beq.w	800a326 <_strtod_l+0x486>
 800a500:	9b08      	ldr	r3, [sp, #32]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	3202      	adds	r2, #2
 800a506:	f103 010c 	add.w	r1, r3, #12
 800a50a:	0092      	lsls	r2, r2, #2
 800a50c:	300c      	adds	r0, #12
 800a50e:	f7fe fc3d 	bl	8008d8c <memcpy>
 800a512:	ab1e      	add	r3, sp, #120	; 0x78
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	ab1d      	add	r3, sp, #116	; 0x74
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4642      	mov	r2, r8
 800a51c:	464b      	mov	r3, r9
 800a51e:	4650      	mov	r0, sl
 800a520:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a524:	f002 fc62 	bl	800cdec <__d2b>
 800a528:	901c      	str	r0, [sp, #112]	; 0x70
 800a52a:	2800      	cmp	r0, #0
 800a52c:	f43f aefb 	beq.w	800a326 <_strtod_l+0x486>
 800a530:	2101      	movs	r1, #1
 800a532:	4650      	mov	r0, sl
 800a534:	f002 f9b8 	bl	800c8a8 <__i2b>
 800a538:	9004      	str	r0, [sp, #16]
 800a53a:	4603      	mov	r3, r0
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f43f aef2 	beq.w	800a326 <_strtod_l+0x486>
 800a542:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a544:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a546:	2d00      	cmp	r5, #0
 800a548:	bfab      	itete	ge
 800a54a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a54c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a54e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a550:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a552:	bfac      	ite	ge
 800a554:	18ee      	addge	r6, r5, r3
 800a556:	1b5c      	sublt	r4, r3, r5
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	1aed      	subs	r5, r5, r3
 800a55c:	4415      	add	r5, r2
 800a55e:	4b70      	ldr	r3, [pc, #448]	; (800a720 <_strtod_l+0x880>)
 800a560:	3d01      	subs	r5, #1
 800a562:	429d      	cmp	r5, r3
 800a564:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a568:	f280 80c9 	bge.w	800a6fe <_strtod_l+0x85e>
 800a56c:	1b5b      	subs	r3, r3, r5
 800a56e:	2b1f      	cmp	r3, #31
 800a570:	eba2 0203 	sub.w	r2, r2, r3
 800a574:	f04f 0701 	mov.w	r7, #1
 800a578:	f300 80b6 	bgt.w	800a6e8 <_strtod_l+0x848>
 800a57c:	fa07 f303 	lsl.w	r3, r7, r3
 800a580:	930f      	str	r3, [sp, #60]	; 0x3c
 800a582:	2500      	movs	r5, #0
 800a584:	18b7      	adds	r7, r6, r2
 800a586:	9b05      	ldr	r3, [sp, #20]
 800a588:	42be      	cmp	r6, r7
 800a58a:	4414      	add	r4, r2
 800a58c:	441c      	add	r4, r3
 800a58e:	4633      	mov	r3, r6
 800a590:	bfa8      	it	ge
 800a592:	463b      	movge	r3, r7
 800a594:	42a3      	cmp	r3, r4
 800a596:	bfa8      	it	ge
 800a598:	4623      	movge	r3, r4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfc2      	ittt	gt
 800a59e:	1aff      	subgt	r7, r7, r3
 800a5a0:	1ae4      	subgt	r4, r4, r3
 800a5a2:	1af6      	subgt	r6, r6, r3
 800a5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd17      	ble.n	800a5da <_strtod_l+0x73a>
 800a5aa:	9904      	ldr	r1, [sp, #16]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	f002 fa36 	bl	800ca20 <__pow5mult>
 800a5b4:	9004      	str	r0, [sp, #16]
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f43f aeb5 	beq.w	800a326 <_strtod_l+0x486>
 800a5bc:	4601      	mov	r1, r0
 800a5be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f002 f987 	bl	800c8d4 <__multiply>
 800a5c6:	9009      	str	r0, [sp, #36]	; 0x24
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	f43f aeac 	beq.w	800a326 <_strtod_l+0x486>
 800a5ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f002 f865 	bl	800c6a0 <_Bfree>
 800a5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d8:	931c      	str	r3, [sp, #112]	; 0x70
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	f300 8093 	bgt.w	800a706 <_strtod_l+0x866>
 800a5e0:	9b07      	ldr	r3, [sp, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dd08      	ble.n	800a5f8 <_strtod_l+0x758>
 800a5e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5e8:	9906      	ldr	r1, [sp, #24]
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	f002 fa18 	bl	800ca20 <__pow5mult>
 800a5f0:	9006      	str	r0, [sp, #24]
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f43f ae97 	beq.w	800a326 <_strtod_l+0x486>
 800a5f8:	2c00      	cmp	r4, #0
 800a5fa:	dd08      	ble.n	800a60e <_strtod_l+0x76e>
 800a5fc:	9906      	ldr	r1, [sp, #24]
 800a5fe:	4622      	mov	r2, r4
 800a600:	4650      	mov	r0, sl
 800a602:	f002 fa67 	bl	800cad4 <__lshift>
 800a606:	9006      	str	r0, [sp, #24]
 800a608:	2800      	cmp	r0, #0
 800a60a:	f43f ae8c 	beq.w	800a326 <_strtod_l+0x486>
 800a60e:	2e00      	cmp	r6, #0
 800a610:	dd08      	ble.n	800a624 <_strtod_l+0x784>
 800a612:	9904      	ldr	r1, [sp, #16]
 800a614:	4632      	mov	r2, r6
 800a616:	4650      	mov	r0, sl
 800a618:	f002 fa5c 	bl	800cad4 <__lshift>
 800a61c:	9004      	str	r0, [sp, #16]
 800a61e:	2800      	cmp	r0, #0
 800a620:	f43f ae81 	beq.w	800a326 <_strtod_l+0x486>
 800a624:	9a06      	ldr	r2, [sp, #24]
 800a626:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a628:	4650      	mov	r0, sl
 800a62a:	f002 fadb 	bl	800cbe4 <__mdiff>
 800a62e:	4683      	mov	fp, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	f43f ae78 	beq.w	800a326 <_strtod_l+0x486>
 800a636:	2400      	movs	r4, #0
 800a638:	68c3      	ldr	r3, [r0, #12]
 800a63a:	9904      	ldr	r1, [sp, #16]
 800a63c:	60c4      	str	r4, [r0, #12]
 800a63e:	930d      	str	r3, [sp, #52]	; 0x34
 800a640:	f002 fab4 	bl	800cbac <__mcmp>
 800a644:	42a0      	cmp	r0, r4
 800a646:	da71      	bge.n	800a72c <_strtod_l+0x88c>
 800a648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a64a:	ea53 0308 	orrs.w	r3, r3, r8
 800a64e:	f040 8097 	bne.w	800a780 <_strtod_l+0x8e0>
 800a652:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a656:	2b00      	cmp	r3, #0
 800a658:	f040 8092 	bne.w	800a780 <_strtod_l+0x8e0>
 800a65c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a660:	0d1b      	lsrs	r3, r3, #20
 800a662:	051b      	lsls	r3, r3, #20
 800a664:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a668:	f240 808a 	bls.w	800a780 <_strtod_l+0x8e0>
 800a66c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a670:	b923      	cbnz	r3, 800a67c <_strtod_l+0x7dc>
 800a672:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a676:	2b01      	cmp	r3, #1
 800a678:	f340 8082 	ble.w	800a780 <_strtod_l+0x8e0>
 800a67c:	4659      	mov	r1, fp
 800a67e:	2201      	movs	r2, #1
 800a680:	4650      	mov	r0, sl
 800a682:	f002 fa27 	bl	800cad4 <__lshift>
 800a686:	9904      	ldr	r1, [sp, #16]
 800a688:	4683      	mov	fp, r0
 800a68a:	f002 fa8f 	bl	800cbac <__mcmp>
 800a68e:	2800      	cmp	r0, #0
 800a690:	dd76      	ble.n	800a780 <_strtod_l+0x8e0>
 800a692:	9905      	ldr	r1, [sp, #20]
 800a694:	4a23      	ldr	r2, [pc, #140]	; (800a724 <_strtod_l+0x884>)
 800a696:	464b      	mov	r3, r9
 800a698:	2900      	cmp	r1, #0
 800a69a:	f000 8092 	beq.w	800a7c2 <_strtod_l+0x922>
 800a69e:	ea02 0109 	and.w	r1, r2, r9
 800a6a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6a6:	f300 808c 	bgt.w	800a7c2 <_strtod_l+0x922>
 800a6aa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6ae:	f77f aeac 	ble.w	800a40a <_strtod_l+0x56a>
 800a6b2:	4a1d      	ldr	r2, [pc, #116]	; (800a728 <_strtod_l+0x888>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	f7f5 ff81 	bl	80005c8 <__aeabi_dmul>
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4303      	orrs	r3, r0
 800a6ca:	bf08      	it	eq
 800a6cc:	2322      	moveq	r3, #34	; 0x22
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	bf08      	it	eq
 800a6d4:	f8ca 3000 	streq.w	r3, [sl]
 800a6d8:	e630      	b.n	800a33c <_strtod_l+0x49c>
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	ea03 0808 	and.w	r8, r3, r8
 800a6e6:	e6de      	b.n	800a4a6 <_strtod_l+0x606>
 800a6e8:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a6ec:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a6f0:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a6f4:	35e2      	adds	r5, #226	; 0xe2
 800a6f6:	fa07 f505 	lsl.w	r5, r7, r5
 800a6fa:	970f      	str	r7, [sp, #60]	; 0x3c
 800a6fc:	e742      	b.n	800a584 <_strtod_l+0x6e4>
 800a6fe:	2301      	movs	r3, #1
 800a700:	2500      	movs	r5, #0
 800a702:	930f      	str	r3, [sp, #60]	; 0x3c
 800a704:	e73e      	b.n	800a584 <_strtod_l+0x6e4>
 800a706:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a708:	463a      	mov	r2, r7
 800a70a:	4650      	mov	r0, sl
 800a70c:	f002 f9e2 	bl	800cad4 <__lshift>
 800a710:	901c      	str	r0, [sp, #112]	; 0x70
 800a712:	2800      	cmp	r0, #0
 800a714:	f47f af64 	bne.w	800a5e0 <_strtod_l+0x740>
 800a718:	e605      	b.n	800a326 <_strtod_l+0x486>
 800a71a:	bf00      	nop
 800a71c:	0800e248 	.word	0x0800e248
 800a720:	fffffc02 	.word	0xfffffc02
 800a724:	7ff00000 	.word	0x7ff00000
 800a728:	39500000 	.word	0x39500000
 800a72c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a730:	d166      	bne.n	800a800 <_strtod_l+0x960>
 800a732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a738:	b35a      	cbz	r2, 800a792 <_strtod_l+0x8f2>
 800a73a:	4a9d      	ldr	r2, [pc, #628]	; (800a9b0 <_strtod_l+0xb10>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d12c      	bne.n	800a79a <_strtod_l+0x8fa>
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	4640      	mov	r0, r8
 800a744:	b303      	cbz	r3, 800a788 <_strtod_l+0x8e8>
 800a746:	4a9b      	ldr	r2, [pc, #620]	; (800a9b4 <_strtod_l+0xb14>)
 800a748:	464b      	mov	r3, r9
 800a74a:	401a      	ands	r2, r3
 800a74c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a750:	f04f 31ff 	mov.w	r1, #4294967295
 800a754:	d81b      	bhi.n	800a78e <_strtod_l+0x8ee>
 800a756:	0d12      	lsrs	r2, r2, #20
 800a758:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a75c:	fa01 f303 	lsl.w	r3, r1, r3
 800a760:	4298      	cmp	r0, r3
 800a762:	d11a      	bne.n	800a79a <_strtod_l+0x8fa>
 800a764:	4b94      	ldr	r3, [pc, #592]	; (800a9b8 <_strtod_l+0xb18>)
 800a766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a768:	429a      	cmp	r2, r3
 800a76a:	d102      	bne.n	800a772 <_strtod_l+0x8d2>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f43f adda 	beq.w	800a326 <_strtod_l+0x486>
 800a772:	4b90      	ldr	r3, [pc, #576]	; (800a9b4 <_strtod_l+0xb14>)
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	401a      	ands	r2, r3
 800a778:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a77c:	f04f 0800 	mov.w	r8, #0
 800a780:	9b05      	ldr	r3, [sp, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d195      	bne.n	800a6b2 <_strtod_l+0x812>
 800a786:	e5d9      	b.n	800a33c <_strtod_l+0x49c>
 800a788:	f04f 33ff 	mov.w	r3, #4294967295
 800a78c:	e7e8      	b.n	800a760 <_strtod_l+0x8c0>
 800a78e:	460b      	mov	r3, r1
 800a790:	e7e6      	b.n	800a760 <_strtod_l+0x8c0>
 800a792:	ea53 0308 	orrs.w	r3, r3, r8
 800a796:	f43f af7c 	beq.w	800a692 <_strtod_l+0x7f2>
 800a79a:	b1e5      	cbz	r5, 800a7d6 <_strtod_l+0x936>
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	421d      	tst	r5, r3
 800a7a0:	d0ee      	beq.n	800a780 <_strtod_l+0x8e0>
 800a7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a4:	9a05      	ldr	r2, [sp, #20]
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	b1c3      	cbz	r3, 800a7de <_strtod_l+0x93e>
 800a7ac:	f7ff fb57 	bl	8009e5e <sulp>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7b8:	f7f5 fd50 	bl	800025c <__adddf3>
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	e7de      	b.n	800a780 <_strtod_l+0x8e0>
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a7cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a7d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a7d4:	e7d4      	b.n	800a780 <_strtod_l+0x8e0>
 800a7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7d8:	ea13 0f08 	tst.w	r3, r8
 800a7dc:	e7e0      	b.n	800a7a0 <_strtod_l+0x900>
 800a7de:	f7ff fb3e 	bl	8009e5e <sulp>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7ea:	f7f5 fd35 	bl	8000258 <__aeabi_dsub>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	f7f6 f94f 	bl	8000a98 <__aeabi_dcmpeq>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d0c0      	beq.n	800a780 <_strtod_l+0x8e0>
 800a7fe:	e604      	b.n	800a40a <_strtod_l+0x56a>
 800a800:	9904      	ldr	r1, [sp, #16]
 800a802:	4658      	mov	r0, fp
 800a804:	f002 fb4e 	bl	800cea4 <__ratio>
 800a808:	2200      	movs	r2, #0
 800a80a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	f7f6 f955 	bl	8000ac0 <__aeabi_dcmple>
 800a816:	2800      	cmp	r0, #0
 800a818:	d075      	beq.n	800a906 <_strtod_l+0xa66>
 800a81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d047      	beq.n	800a8b0 <_strtod_l+0xa10>
 800a820:	4f66      	ldr	r7, [pc, #408]	; (800a9bc <_strtod_l+0xb1c>)
 800a822:	2600      	movs	r6, #0
 800a824:	4d65      	ldr	r5, [pc, #404]	; (800a9bc <_strtod_l+0xb1c>)
 800a826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a82c:	0d1b      	lsrs	r3, r3, #20
 800a82e:	051b      	lsls	r3, r3, #20
 800a830:	930f      	str	r3, [sp, #60]	; 0x3c
 800a832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a834:	4b62      	ldr	r3, [pc, #392]	; (800a9c0 <_strtod_l+0xb20>)
 800a836:	429a      	cmp	r2, r3
 800a838:	f040 80ca 	bne.w	800a9d0 <_strtod_l+0xb30>
 800a83c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a840:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f002 fa53 	bl	800ccf8 <__ulp>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f5 feb5 	bl	80005c8 <__aeabi_dmul>
 800a85e:	4642      	mov	r2, r8
 800a860:	464b      	mov	r3, r9
 800a862:	f7f5 fcfb 	bl	800025c <__adddf3>
 800a866:	460b      	mov	r3, r1
 800a868:	4952      	ldr	r1, [pc, #328]	; (800a9b4 <_strtod_l+0xb14>)
 800a86a:	4a56      	ldr	r2, [pc, #344]	; (800a9c4 <_strtod_l+0xb24>)
 800a86c:	4019      	ands	r1, r3
 800a86e:	4291      	cmp	r1, r2
 800a870:	4680      	mov	r8, r0
 800a872:	d95e      	bls.n	800a932 <_strtod_l+0xa92>
 800a874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a876:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d103      	bne.n	800a886 <_strtod_l+0x9e6>
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	3301      	adds	r3, #1
 800a882:	f43f ad50 	beq.w	800a326 <_strtod_l+0x486>
 800a886:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a9b8 <_strtod_l+0xb18>
 800a88a:	f04f 38ff 	mov.w	r8, #4294967295
 800a88e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a890:	4650      	mov	r0, sl
 800a892:	f001 ff05 	bl	800c6a0 <_Bfree>
 800a896:	9906      	ldr	r1, [sp, #24]
 800a898:	4650      	mov	r0, sl
 800a89a:	f001 ff01 	bl	800c6a0 <_Bfree>
 800a89e:	9904      	ldr	r1, [sp, #16]
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	f001 fefd 	bl	800c6a0 <_Bfree>
 800a8a6:	4659      	mov	r1, fp
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f001 fef9 	bl	800c6a0 <_Bfree>
 800a8ae:	e61e      	b.n	800a4ee <_strtod_l+0x64e>
 800a8b0:	f1b8 0f00 	cmp.w	r8, #0
 800a8b4:	d119      	bne.n	800a8ea <_strtod_l+0xa4a>
 800a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8bc:	b9e3      	cbnz	r3, 800a8f8 <_strtod_l+0xa58>
 800a8be:	4b3f      	ldr	r3, [pc, #252]	; (800a9bc <_strtod_l+0xb1c>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	f7f6 f8f1 	bl	8000aac <__aeabi_dcmplt>
 800a8ca:	b9c8      	cbnz	r0, 800a900 <_strtod_l+0xa60>
 800a8cc:	4b3e      	ldr	r3, [pc, #248]	; (800a9c8 <_strtod_l+0xb28>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fe78 	bl	80005c8 <__aeabi_dmul>
 800a8d8:	4604      	mov	r4, r0
 800a8da:	460d      	mov	r5, r1
 800a8dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8e0:	9418      	str	r4, [sp, #96]	; 0x60
 800a8e2:	9319      	str	r3, [sp, #100]	; 0x64
 800a8e4:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a8e8:	e79d      	b.n	800a826 <_strtod_l+0x986>
 800a8ea:	f1b8 0f01 	cmp.w	r8, #1
 800a8ee:	d103      	bne.n	800a8f8 <_strtod_l+0xa58>
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f43f ad89 	beq.w	800a40a <_strtod_l+0x56a>
 800a8f8:	4f34      	ldr	r7, [pc, #208]	; (800a9cc <_strtod_l+0xb2c>)
 800a8fa:	2600      	movs	r6, #0
 800a8fc:	2400      	movs	r4, #0
 800a8fe:	e791      	b.n	800a824 <_strtod_l+0x984>
 800a900:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a902:	4d31      	ldr	r5, [pc, #196]	; (800a9c8 <_strtod_l+0xb28>)
 800a904:	e7ea      	b.n	800a8dc <_strtod_l+0xa3c>
 800a906:	4b30      	ldr	r3, [pc, #192]	; (800a9c8 <_strtod_l+0xb28>)
 800a908:	2200      	movs	r2, #0
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f5 fe5b 	bl	80005c8 <__aeabi_dmul>
 800a912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	b933      	cbnz	r3, 800a928 <_strtod_l+0xa88>
 800a91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a91e:	9010      	str	r0, [sp, #64]	; 0x40
 800a920:	9311      	str	r3, [sp, #68]	; 0x44
 800a922:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a926:	e77e      	b.n	800a826 <_strtod_l+0x986>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a930:	e7f7      	b.n	800a922 <_strtod_l+0xa82>
 800a932:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a936:	9b05      	ldr	r3, [sp, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1a8      	bne.n	800a88e <_strtod_l+0x9ee>
 800a93c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a942:	0d1b      	lsrs	r3, r3, #20
 800a944:	051b      	lsls	r3, r3, #20
 800a946:	429a      	cmp	r2, r3
 800a948:	d1a1      	bne.n	800a88e <_strtod_l+0x9ee>
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7f6 f99b 	bl	8000c88 <__aeabi_d2lz>
 800a952:	f7f5 fe0b 	bl	800056c <__aeabi_l2d>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4620      	mov	r0, r4
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f5 fc7b 	bl	8000258 <__aeabi_dsub>
 800a962:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a968:	ea43 0308 	orr.w	r3, r3, r8
 800a96c:	4313      	orrs	r3, r2
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	d068      	beq.n	800aa46 <_strtod_l+0xba6>
 800a974:	a30a      	add	r3, pc, #40	; (adr r3, 800a9a0 <_strtod_l+0xb00>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f6 f897 	bl	8000aac <__aeabi_dcmplt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f47f acdc 	bne.w	800a33c <_strtod_l+0x49c>
 800a984:	a308      	add	r3, pc, #32	; (adr r3, 800a9a8 <_strtod_l+0xb08>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f6 f8ab 	bl	8000ae8 <__aeabi_dcmpgt>
 800a992:	2800      	cmp	r0, #0
 800a994:	f43f af7b 	beq.w	800a88e <_strtod_l+0x9ee>
 800a998:	e4d0      	b.n	800a33c <_strtod_l+0x49c>
 800a99a:	bf00      	nop
 800a99c:	f3af 8000 	nop.w
 800a9a0:	94a03595 	.word	0x94a03595
 800a9a4:	3fdfffff 	.word	0x3fdfffff
 800a9a8:	35afe535 	.word	0x35afe535
 800a9ac:	3fe00000 	.word	0x3fe00000
 800a9b0:	000fffff 	.word	0x000fffff
 800a9b4:	7ff00000 	.word	0x7ff00000
 800a9b8:	7fefffff 	.word	0x7fefffff
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	7fe00000 	.word	0x7fe00000
 800a9c4:	7c9fffff 	.word	0x7c9fffff
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	bff00000 	.word	0xbff00000
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	b313      	cbz	r3, 800aa1a <_strtod_l+0xb7a>
 800a9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9da:	d81e      	bhi.n	800aa1a <_strtod_l+0xb7a>
 800a9dc:	a326      	add	r3, pc, #152	; (adr r3, 800aa78 <_strtod_l+0xbd8>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f6 f86b 	bl	8000ac0 <__aeabi_dcmple>
 800a9ea:	b190      	cbz	r0, 800aa12 <_strtod_l+0xb72>
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7f6 f8c2 	bl	8000b78 <__aeabi_d2uiz>
 800a9f4:	2801      	cmp	r0, #1
 800a9f6:	bf38      	it	cc
 800a9f8:	2001      	movcc	r0, #1
 800a9fa:	f7f5 fd6b 	bl	80004d4 <__aeabi_ui2d>
 800a9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	b9d3      	cbnz	r3, 800aa3c <_strtod_l+0xb9c>
 800aa06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa0a:	9012      	str	r0, [sp, #72]	; 0x48
 800aa0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800aa12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800aa18:	1a9f      	subs	r7, r3, r2
 800aa1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa1e:	f002 f96b 	bl	800ccf8 <__ulp>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4630      	mov	r0, r6
 800aa28:	4639      	mov	r1, r7
 800aa2a:	f7f5 fdcd 	bl	80005c8 <__aeabi_dmul>
 800aa2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa32:	f7f5 fc13 	bl	800025c <__adddf3>
 800aa36:	4680      	mov	r8, r0
 800aa38:	4689      	mov	r9, r1
 800aa3a:	e77c      	b.n	800a936 <_strtod_l+0xa96>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aa44:	e7e3      	b.n	800aa0e <_strtod_l+0xb6e>
 800aa46:	a30e      	add	r3, pc, #56	; (adr r3, 800aa80 <_strtod_l+0xbe0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f6 f82e 	bl	8000aac <__aeabi_dcmplt>
 800aa50:	e79f      	b.n	800a992 <_strtod_l+0xaf2>
 800aa52:	2300      	movs	r3, #0
 800aa54:	930c      	str	r3, [sp, #48]	; 0x30
 800aa56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	f7ff ba65 	b.w	8009f2a <_strtod_l+0x8a>
 800aa60:	2b65      	cmp	r3, #101	; 0x65
 800aa62:	f43f ab5c 	beq.w	800a11e <_strtod_l+0x27e>
 800aa66:	2b45      	cmp	r3, #69	; 0x45
 800aa68:	f43f ab59 	beq.w	800a11e <_strtod_l+0x27e>
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f7ff bb8d 	b.w	800a18c <_strtod_l+0x2ec>
 800aa72:	bf00      	nop
 800aa74:	f3af 8000 	nop.w
 800aa78:	ffc00000 	.word	0xffc00000
 800aa7c:	41dfffff 	.word	0x41dfffff
 800aa80:	94a03595 	.word	0x94a03595
 800aa84:	3fcfffff 	.word	0x3fcfffff

0800aa88 <strtod>:
 800aa88:	460a      	mov	r2, r1
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	4802      	ldr	r0, [pc, #8]	; (800aa98 <strtod+0x10>)
 800aa8e:	4b03      	ldr	r3, [pc, #12]	; (800aa9c <strtod+0x14>)
 800aa90:	6800      	ldr	r0, [r0, #0]
 800aa92:	f7ff ba05 	b.w	8009ea0 <_strtod_l>
 800aa96:	bf00      	nop
 800aa98:	2000000c 	.word	0x2000000c
 800aa9c:	20000074 	.word	0x20000074

0800aaa0 <_strtol_l.isra.0>:
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa6:	4686      	mov	lr, r0
 800aaa8:	d001      	beq.n	800aaae <_strtol_l.isra.0+0xe>
 800aaaa:	2b24      	cmp	r3, #36	; 0x24
 800aaac:	d906      	bls.n	800aabc <_strtol_l.isra.0+0x1c>
 800aaae:	f7fe f933 	bl	8008d18 <__errno>
 800aab2:	2316      	movs	r3, #22
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	2000      	movs	r0, #0
 800aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabc:	4e3a      	ldr	r6, [pc, #232]	; (800aba8 <_strtol_l.isra.0+0x108>)
 800aabe:	468c      	mov	ip, r1
 800aac0:	4660      	mov	r0, ip
 800aac2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aac6:	5da5      	ldrb	r5, [r4, r6]
 800aac8:	f015 0508 	ands.w	r5, r5, #8
 800aacc:	d1f8      	bne.n	800aac0 <_strtol_l.isra.0+0x20>
 800aace:	2c2d      	cmp	r4, #45	; 0x2d
 800aad0:	d133      	bne.n	800ab3a <_strtol_l.isra.0+0x9a>
 800aad2:	f89c 4000 	ldrb.w	r4, [ip]
 800aad6:	f04f 0801 	mov.w	r8, #1
 800aada:	f100 0c02 	add.w	ip, r0, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d05d      	beq.n	800ab9e <_strtol_l.isra.0+0xfe>
 800aae2:	2b10      	cmp	r3, #16
 800aae4:	d10c      	bne.n	800ab00 <_strtol_l.isra.0+0x60>
 800aae6:	2c30      	cmp	r4, #48	; 0x30
 800aae8:	d10a      	bne.n	800ab00 <_strtol_l.isra.0+0x60>
 800aaea:	f89c 0000 	ldrb.w	r0, [ip]
 800aaee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aaf2:	2858      	cmp	r0, #88	; 0x58
 800aaf4:	d14e      	bne.n	800ab94 <_strtol_l.isra.0+0xf4>
 800aaf6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800aafa:	2310      	movs	r3, #16
 800aafc:	f10c 0c02 	add.w	ip, ip, #2
 800ab00:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ab04:	3f01      	subs	r7, #1
 800ab06:	2500      	movs	r5, #0
 800ab08:	fbb7 f9f3 	udiv	r9, r7, r3
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	fb03 7a19 	mls	sl, r3, r9, r7
 800ab12:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ab16:	2e09      	cmp	r6, #9
 800ab18:	d818      	bhi.n	800ab4c <_strtol_l.isra.0+0xac>
 800ab1a:	4634      	mov	r4, r6
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	dd24      	ble.n	800ab6a <_strtol_l.isra.0+0xca>
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	db1f      	blt.n	800ab64 <_strtol_l.isra.0+0xc4>
 800ab24:	4581      	cmp	r9, r0
 800ab26:	d31d      	bcc.n	800ab64 <_strtol_l.isra.0+0xc4>
 800ab28:	d101      	bne.n	800ab2e <_strtol_l.isra.0+0x8e>
 800ab2a:	45a2      	cmp	sl, r4
 800ab2c:	db1a      	blt.n	800ab64 <_strtol_l.isra.0+0xc4>
 800ab2e:	fb00 4003 	mla	r0, r0, r3, r4
 800ab32:	2501      	movs	r5, #1
 800ab34:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ab38:	e7eb      	b.n	800ab12 <_strtol_l.isra.0+0x72>
 800ab3a:	2c2b      	cmp	r4, #43	; 0x2b
 800ab3c:	bf08      	it	eq
 800ab3e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ab42:	46a8      	mov	r8, r5
 800ab44:	bf08      	it	eq
 800ab46:	f100 0c02 	addeq.w	ip, r0, #2
 800ab4a:	e7c8      	b.n	800aade <_strtol_l.isra.0+0x3e>
 800ab4c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ab50:	2e19      	cmp	r6, #25
 800ab52:	d801      	bhi.n	800ab58 <_strtol_l.isra.0+0xb8>
 800ab54:	3c37      	subs	r4, #55	; 0x37
 800ab56:	e7e1      	b.n	800ab1c <_strtol_l.isra.0+0x7c>
 800ab58:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ab5c:	2e19      	cmp	r6, #25
 800ab5e:	d804      	bhi.n	800ab6a <_strtol_l.isra.0+0xca>
 800ab60:	3c57      	subs	r4, #87	; 0x57
 800ab62:	e7db      	b.n	800ab1c <_strtol_l.isra.0+0x7c>
 800ab64:	f04f 35ff 	mov.w	r5, #4294967295
 800ab68:	e7e4      	b.n	800ab34 <_strtol_l.isra.0+0x94>
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	da08      	bge.n	800ab80 <_strtol_l.isra.0+0xe0>
 800ab6e:	2322      	movs	r3, #34	; 0x22
 800ab70:	f8ce 3000 	str.w	r3, [lr]
 800ab74:	4638      	mov	r0, r7
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	d09e      	beq.n	800aab8 <_strtol_l.isra.0+0x18>
 800ab7a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ab7e:	e007      	b.n	800ab90 <_strtol_l.isra.0+0xf0>
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	d000      	beq.n	800ab88 <_strtol_l.isra.0+0xe8>
 800ab86:	4240      	negs	r0, r0
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	d095      	beq.n	800aab8 <_strtol_l.isra.0+0x18>
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	d1f4      	bne.n	800ab7a <_strtol_l.isra.0+0xda>
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	e791      	b.n	800aab8 <_strtol_l.isra.0+0x18>
 800ab94:	2430      	movs	r4, #48	; 0x30
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1b2      	bne.n	800ab00 <_strtol_l.isra.0+0x60>
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	e7b0      	b.n	800ab00 <_strtol_l.isra.0+0x60>
 800ab9e:	2c30      	cmp	r4, #48	; 0x30
 800aba0:	d0a3      	beq.n	800aaea <_strtol_l.isra.0+0x4a>
 800aba2:	230a      	movs	r3, #10
 800aba4:	e7ac      	b.n	800ab00 <_strtol_l.isra.0+0x60>
 800aba6:	bf00      	nop
 800aba8:	0800e271 	.word	0x0800e271

0800abac <strtol>:
 800abac:	4613      	mov	r3, r2
 800abae:	460a      	mov	r2, r1
 800abb0:	4601      	mov	r1, r0
 800abb2:	4802      	ldr	r0, [pc, #8]	; (800abbc <strtol+0x10>)
 800abb4:	6800      	ldr	r0, [r0, #0]
 800abb6:	f7ff bf73 	b.w	800aaa0 <_strtol_l.isra.0>
 800abba:	bf00      	nop
 800abbc:	2000000c 	.word	0x2000000c

0800abc0 <_user_strerror>:
 800abc0:	2000      	movs	r0, #0
 800abc2:	4770      	bx	lr

0800abc4 <__swbuf_r>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	460e      	mov	r6, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	4605      	mov	r5, r0
 800abcc:	b118      	cbz	r0, 800abd6 <__swbuf_r+0x12>
 800abce:	6983      	ldr	r3, [r0, #24]
 800abd0:	b90b      	cbnz	r3, 800abd6 <__swbuf_r+0x12>
 800abd2:	f001 f89b 	bl	800bd0c <__sinit>
 800abd6:	4b21      	ldr	r3, [pc, #132]	; (800ac5c <__swbuf_r+0x98>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	d12b      	bne.n	800ac34 <__swbuf_r+0x70>
 800abdc:	686c      	ldr	r4, [r5, #4]
 800abde:	69a3      	ldr	r3, [r4, #24]
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	071a      	lsls	r2, r3, #28
 800abe6:	d52f      	bpl.n	800ac48 <__swbuf_r+0x84>
 800abe8:	6923      	ldr	r3, [r4, #16]
 800abea:	b36b      	cbz	r3, 800ac48 <__swbuf_r+0x84>
 800abec:	6923      	ldr	r3, [r4, #16]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	1ac0      	subs	r0, r0, r3
 800abf2:	6963      	ldr	r3, [r4, #20]
 800abf4:	b2f6      	uxtb	r6, r6
 800abf6:	4283      	cmp	r3, r0
 800abf8:	4637      	mov	r7, r6
 800abfa:	dc04      	bgt.n	800ac06 <__swbuf_r+0x42>
 800abfc:	4621      	mov	r1, r4
 800abfe:	4628      	mov	r0, r5
 800ac00:	f000 ffb2 	bl	800bb68 <_fflush_r>
 800ac04:	bb30      	cbnz	r0, 800ac54 <__swbuf_r+0x90>
 800ac06:	68a3      	ldr	r3, [r4, #8]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	60a3      	str	r3, [r4, #8]
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	6022      	str	r2, [r4, #0]
 800ac12:	701e      	strb	r6, [r3, #0]
 800ac14:	6963      	ldr	r3, [r4, #20]
 800ac16:	3001      	adds	r0, #1
 800ac18:	4283      	cmp	r3, r0
 800ac1a:	d004      	beq.n	800ac26 <__swbuf_r+0x62>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	07db      	lsls	r3, r3, #31
 800ac20:	d506      	bpl.n	800ac30 <__swbuf_r+0x6c>
 800ac22:	2e0a      	cmp	r6, #10
 800ac24:	d104      	bne.n	800ac30 <__swbuf_r+0x6c>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f000 ff9d 	bl	800bb68 <_fflush_r>
 800ac2e:	b988      	cbnz	r0, 800ac54 <__swbuf_r+0x90>
 800ac30:	4638      	mov	r0, r7
 800ac32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac34:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <__swbuf_r+0x9c>)
 800ac36:	429c      	cmp	r4, r3
 800ac38:	d101      	bne.n	800ac3e <__swbuf_r+0x7a>
 800ac3a:	68ac      	ldr	r4, [r5, #8]
 800ac3c:	e7cf      	b.n	800abde <__swbuf_r+0x1a>
 800ac3e:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <__swbuf_r+0xa0>)
 800ac40:	429c      	cmp	r4, r3
 800ac42:	bf08      	it	eq
 800ac44:	68ec      	ldreq	r4, [r5, #12]
 800ac46:	e7ca      	b.n	800abde <__swbuf_r+0x1a>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 f81e 	bl	800ac8c <__swsetup_r>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d0cb      	beq.n	800abec <__swbuf_r+0x28>
 800ac54:	f04f 37ff 	mov.w	r7, #4294967295
 800ac58:	e7ea      	b.n	800ac30 <__swbuf_r+0x6c>
 800ac5a:	bf00      	nop
 800ac5c:	0800e428 	.word	0x0800e428
 800ac60:	0800e448 	.word	0x0800e448
 800ac64:	0800e408 	.word	0x0800e408

0800ac68 <_write_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	; (800ac88 <_write_r+0x20>)
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4611      	mov	r1, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f7f6 fe68 	bl	800194c <_write>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_write_r+0x1e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_write_r+0x1e>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20000604 	.word	0x20000604

0800ac8c <__swsetup_r>:
 800ac8c:	4b32      	ldr	r3, [pc, #200]	; (800ad58 <__swsetup_r+0xcc>)
 800ac8e:	b570      	push	{r4, r5, r6, lr}
 800ac90:	681d      	ldr	r5, [r3, #0]
 800ac92:	4606      	mov	r6, r0
 800ac94:	460c      	mov	r4, r1
 800ac96:	b125      	cbz	r5, 800aca2 <__swsetup_r+0x16>
 800ac98:	69ab      	ldr	r3, [r5, #24]
 800ac9a:	b913      	cbnz	r3, 800aca2 <__swsetup_r+0x16>
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f001 f835 	bl	800bd0c <__sinit>
 800aca2:	4b2e      	ldr	r3, [pc, #184]	; (800ad5c <__swsetup_r+0xd0>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d10f      	bne.n	800acc8 <__swsetup_r+0x3c>
 800aca8:	686c      	ldr	r4, [r5, #4]
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acb0:	0719      	lsls	r1, r3, #28
 800acb2:	d42c      	bmi.n	800ad0e <__swsetup_r+0x82>
 800acb4:	06dd      	lsls	r5, r3, #27
 800acb6:	d411      	bmi.n	800acdc <__swsetup_r+0x50>
 800acb8:	2309      	movs	r3, #9
 800acba:	6033      	str	r3, [r6, #0]
 800acbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acc0:	81a3      	strh	r3, [r4, #12]
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	e03e      	b.n	800ad46 <__swsetup_r+0xba>
 800acc8:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <__swsetup_r+0xd4>)
 800acca:	429c      	cmp	r4, r3
 800accc:	d101      	bne.n	800acd2 <__swsetup_r+0x46>
 800acce:	68ac      	ldr	r4, [r5, #8]
 800acd0:	e7eb      	b.n	800acaa <__swsetup_r+0x1e>
 800acd2:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <__swsetup_r+0xd8>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	bf08      	it	eq
 800acd8:	68ec      	ldreq	r4, [r5, #12]
 800acda:	e7e6      	b.n	800acaa <__swsetup_r+0x1e>
 800acdc:	0758      	lsls	r0, r3, #29
 800acde:	d512      	bpl.n	800ad06 <__swsetup_r+0x7a>
 800ace0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ace2:	b141      	cbz	r1, 800acf6 <__swsetup_r+0x6a>
 800ace4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace8:	4299      	cmp	r1, r3
 800acea:	d002      	beq.n	800acf2 <__swsetup_r+0x66>
 800acec:	4630      	mov	r0, r6
 800acee:	f7fe f863 	bl	8008db8 <_free_r>
 800acf2:	2300      	movs	r3, #0
 800acf4:	6363      	str	r3, [r4, #52]	; 0x34
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	2300      	movs	r3, #0
 800ad00:	6063      	str	r3, [r4, #4]
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	f043 0308 	orr.w	r3, r3, #8
 800ad0c:	81a3      	strh	r3, [r4, #12]
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	b94b      	cbnz	r3, 800ad26 <__swsetup_r+0x9a>
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad1c:	d003      	beq.n	800ad26 <__swsetup_r+0x9a>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4630      	mov	r0, r6
 800ad22:	f001 fc1f 	bl	800c564 <__smakebuf_r>
 800ad26:	89a0      	ldrh	r0, [r4, #12]
 800ad28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad2c:	f010 0301 	ands.w	r3, r0, #1
 800ad30:	d00a      	beq.n	800ad48 <__swsetup_r+0xbc>
 800ad32:	2300      	movs	r3, #0
 800ad34:	60a3      	str	r3, [r4, #8]
 800ad36:	6963      	ldr	r3, [r4, #20]
 800ad38:	425b      	negs	r3, r3
 800ad3a:	61a3      	str	r3, [r4, #24]
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	b943      	cbnz	r3, 800ad52 <__swsetup_r+0xc6>
 800ad40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad44:	d1ba      	bne.n	800acbc <__swsetup_r+0x30>
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	0781      	lsls	r1, r0, #30
 800ad4a:	bf58      	it	pl
 800ad4c:	6963      	ldrpl	r3, [r4, #20]
 800ad4e:	60a3      	str	r3, [r4, #8]
 800ad50:	e7f4      	b.n	800ad3c <__swsetup_r+0xb0>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e7f7      	b.n	800ad46 <__swsetup_r+0xba>
 800ad56:	bf00      	nop
 800ad58:	2000000c 	.word	0x2000000c
 800ad5c:	0800e428 	.word	0x0800e428
 800ad60:	0800e448 	.word	0x0800e448
 800ad64:	0800e408 	.word	0x0800e408

0800ad68 <quorem>:
 800ad68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	6903      	ldr	r3, [r0, #16]
 800ad6e:	690c      	ldr	r4, [r1, #16]
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	4607      	mov	r7, r0
 800ad74:	f2c0 8081 	blt.w	800ae7a <quorem+0x112>
 800ad78:	3c01      	subs	r4, #1
 800ad7a:	f101 0814 	add.w	r8, r1, #20
 800ad7e:	f100 0514 	add.w	r5, r0, #20
 800ad82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad90:	3301      	adds	r3, #1
 800ad92:	429a      	cmp	r2, r3
 800ad94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ada0:	d331      	bcc.n	800ae06 <quorem+0x9e>
 800ada2:	f04f 0e00 	mov.w	lr, #0
 800ada6:	4640      	mov	r0, r8
 800ada8:	46ac      	mov	ip, r5
 800adaa:	46f2      	mov	sl, lr
 800adac:	f850 2b04 	ldr.w	r2, [r0], #4
 800adb0:	b293      	uxth	r3, r2
 800adb2:	fb06 e303 	mla	r3, r6, r3, lr
 800adb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adba:	b29b      	uxth	r3, r3
 800adbc:	ebaa 0303 	sub.w	r3, sl, r3
 800adc0:	0c12      	lsrs	r2, r2, #16
 800adc2:	f8dc a000 	ldr.w	sl, [ip]
 800adc6:	fb06 e202 	mla	r2, r6, r2, lr
 800adca:	fa13 f38a 	uxtah	r3, r3, sl
 800adce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800add2:	fa1f fa82 	uxth.w	sl, r2
 800add6:	f8dc 2000 	ldr.w	r2, [ip]
 800adda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800adde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ade8:	4581      	cmp	r9, r0
 800adea:	f84c 3b04 	str.w	r3, [ip], #4
 800adee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adf2:	d2db      	bcs.n	800adac <quorem+0x44>
 800adf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800adf8:	b92b      	cbnz	r3, 800ae06 <quorem+0x9e>
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	3b04      	subs	r3, #4
 800adfe:	429d      	cmp	r5, r3
 800ae00:	461a      	mov	r2, r3
 800ae02:	d32e      	bcc.n	800ae62 <quorem+0xfa>
 800ae04:	613c      	str	r4, [r7, #16]
 800ae06:	4638      	mov	r0, r7
 800ae08:	f001 fed0 	bl	800cbac <__mcmp>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	db24      	blt.n	800ae5a <quorem+0xf2>
 800ae10:	3601      	adds	r6, #1
 800ae12:	4628      	mov	r0, r5
 800ae14:	f04f 0c00 	mov.w	ip, #0
 800ae18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae20:	b293      	uxth	r3, r2
 800ae22:	ebac 0303 	sub.w	r3, ip, r3
 800ae26:	0c12      	lsrs	r2, r2, #16
 800ae28:	fa13 f38e 	uxtah	r3, r3, lr
 800ae2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae3a:	45c1      	cmp	r9, r8
 800ae3c:	f840 3b04 	str.w	r3, [r0], #4
 800ae40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae44:	d2e8      	bcs.n	800ae18 <quorem+0xb0>
 800ae46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae4e:	b922      	cbnz	r2, 800ae5a <quorem+0xf2>
 800ae50:	3b04      	subs	r3, #4
 800ae52:	429d      	cmp	r5, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	d30a      	bcc.n	800ae6e <quorem+0x106>
 800ae58:	613c      	str	r4, [r7, #16]
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	b003      	add	sp, #12
 800ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae62:	6812      	ldr	r2, [r2, #0]
 800ae64:	3b04      	subs	r3, #4
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	d1cc      	bne.n	800ae04 <quorem+0x9c>
 800ae6a:	3c01      	subs	r4, #1
 800ae6c:	e7c7      	b.n	800adfe <quorem+0x96>
 800ae6e:	6812      	ldr	r2, [r2, #0]
 800ae70:	3b04      	subs	r3, #4
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	d1f0      	bne.n	800ae58 <quorem+0xf0>
 800ae76:	3c01      	subs	r4, #1
 800ae78:	e7eb      	b.n	800ae52 <quorem+0xea>
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	e7ee      	b.n	800ae5c <quorem+0xf4>
	...

0800ae80 <_dtoa_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae86:	b099      	sub	sp, #100	; 0x64
 800ae88:	4616      	mov	r6, r2
 800ae8a:	461f      	mov	r7, r3
 800ae8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ae90:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ae94:	4605      	mov	r5, r0
 800ae96:	b974      	cbnz	r4, 800aeb6 <_dtoa_r+0x36>
 800ae98:	2010      	movs	r0, #16
 800ae9a:	f7fd ff67 	bl	8008d6c <malloc>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	6268      	str	r0, [r5, #36]	; 0x24
 800aea2:	b920      	cbnz	r0, 800aeae <_dtoa_r+0x2e>
 800aea4:	4ba8      	ldr	r3, [pc, #672]	; (800b148 <_dtoa_r+0x2c8>)
 800aea6:	21ea      	movs	r1, #234	; 0xea
 800aea8:	48a8      	ldr	r0, [pc, #672]	; (800b14c <_dtoa_r+0x2cc>)
 800aeaa:	f002 fa29 	bl	800d300 <__assert_func>
 800aeae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeb2:	6004      	str	r4, [r0, #0]
 800aeb4:	60c4      	str	r4, [r0, #12]
 800aeb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aeb8:	6819      	ldr	r1, [r3, #0]
 800aeba:	b151      	cbz	r1, 800aed2 <_dtoa_r+0x52>
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	604a      	str	r2, [r1, #4]
 800aec0:	2301      	movs	r3, #1
 800aec2:	4093      	lsls	r3, r2
 800aec4:	608b      	str	r3, [r1, #8]
 800aec6:	4628      	mov	r0, r5
 800aec8:	f001 fbea 	bl	800c6a0 <_Bfree>
 800aecc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	1e3b      	subs	r3, r7, #0
 800aed4:	bfb9      	ittee	lt
 800aed6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aeda:	9305      	strlt	r3, [sp, #20]
 800aedc:	2300      	movge	r3, #0
 800aede:	f8c8 3000 	strge.w	r3, [r8]
 800aee2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aee6:	4b9a      	ldr	r3, [pc, #616]	; (800b150 <_dtoa_r+0x2d0>)
 800aee8:	bfbc      	itt	lt
 800aeea:	2201      	movlt	r2, #1
 800aeec:	f8c8 2000 	strlt.w	r2, [r8]
 800aef0:	ea33 0309 	bics.w	r3, r3, r9
 800aef4:	d119      	bne.n	800af2a <_dtoa_r+0xaa>
 800aef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aef8:	f242 730f 	movw	r3, #9999	; 0x270f
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af02:	4333      	orrs	r3, r6
 800af04:	f000 8581 	beq.w	800ba0a <_dtoa_r+0xb8a>
 800af08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af0a:	b953      	cbnz	r3, 800af22 <_dtoa_r+0xa2>
 800af0c:	4b91      	ldr	r3, [pc, #580]	; (800b154 <_dtoa_r+0x2d4>)
 800af0e:	e022      	b.n	800af56 <_dtoa_r+0xd6>
 800af10:	4b91      	ldr	r3, [pc, #580]	; (800b158 <_dtoa_r+0x2d8>)
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	3308      	adds	r3, #8
 800af16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	9808      	ldr	r0, [sp, #32]
 800af1c:	b019      	add	sp, #100	; 0x64
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af22:	4b8c      	ldr	r3, [pc, #560]	; (800b154 <_dtoa_r+0x2d4>)
 800af24:	9308      	str	r3, [sp, #32]
 800af26:	3303      	adds	r3, #3
 800af28:	e7f5      	b.n	800af16 <_dtoa_r+0x96>
 800af2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af2e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800af32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af36:	2200      	movs	r2, #0
 800af38:	2300      	movs	r3, #0
 800af3a:	f7f5 fdad 	bl	8000a98 <__aeabi_dcmpeq>
 800af3e:	4680      	mov	r8, r0
 800af40:	b158      	cbz	r0, 800af5a <_dtoa_r+0xda>
 800af42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af44:	2301      	movs	r3, #1
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 855a 	beq.w	800ba04 <_dtoa_r+0xb84>
 800af50:	4882      	ldr	r0, [pc, #520]	; (800b15c <_dtoa_r+0x2dc>)
 800af52:	6018      	str	r0, [r3, #0]
 800af54:	1e43      	subs	r3, r0, #1
 800af56:	9308      	str	r3, [sp, #32]
 800af58:	e7df      	b.n	800af1a <_dtoa_r+0x9a>
 800af5a:	ab16      	add	r3, sp, #88	; 0x58
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	ab17      	add	r3, sp, #92	; 0x5c
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	4628      	mov	r0, r5
 800af64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af68:	f001 ff40 	bl	800cdec <__d2b>
 800af6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af70:	4682      	mov	sl, r0
 800af72:	2c00      	cmp	r4, #0
 800af74:	d07e      	beq.n	800b074 <_dtoa_r+0x1f4>
 800af76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800af7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af84:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800af88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af8c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800af90:	4b73      	ldr	r3, [pc, #460]	; (800b160 <_dtoa_r+0x2e0>)
 800af92:	2200      	movs	r2, #0
 800af94:	f7f5 f960 	bl	8000258 <__aeabi_dsub>
 800af98:	a365      	add	r3, pc, #404	; (adr r3, 800b130 <_dtoa_r+0x2b0>)
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	f7f5 fb13 	bl	80005c8 <__aeabi_dmul>
 800afa2:	a365      	add	r3, pc, #404	; (adr r3, 800b138 <_dtoa_r+0x2b8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f958 	bl	800025c <__adddf3>
 800afac:	4606      	mov	r6, r0
 800afae:	4620      	mov	r0, r4
 800afb0:	460f      	mov	r7, r1
 800afb2:	f7f5 fa9f 	bl	80004f4 <__aeabi_i2d>
 800afb6:	a362      	add	r3, pc, #392	; (adr r3, 800b140 <_dtoa_r+0x2c0>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 fb04 	bl	80005c8 <__aeabi_dmul>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	f7f5 f948 	bl	800025c <__adddf3>
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	f7f5 fdaa 	bl	8000b28 <__aeabi_d2iz>
 800afd4:	2200      	movs	r2, #0
 800afd6:	4681      	mov	r9, r0
 800afd8:	2300      	movs	r3, #0
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fd65 	bl	8000aac <__aeabi_dcmplt>
 800afe2:	b148      	cbz	r0, 800aff8 <_dtoa_r+0x178>
 800afe4:	4648      	mov	r0, r9
 800afe6:	f7f5 fa85 	bl	80004f4 <__aeabi_i2d>
 800afea:	4632      	mov	r2, r6
 800afec:	463b      	mov	r3, r7
 800afee:	f7f5 fd53 	bl	8000a98 <__aeabi_dcmpeq>
 800aff2:	b908      	cbnz	r0, 800aff8 <_dtoa_r+0x178>
 800aff4:	f109 39ff 	add.w	r9, r9, #4294967295
 800aff8:	f1b9 0f16 	cmp.w	r9, #22
 800affc:	d857      	bhi.n	800b0ae <_dtoa_r+0x22e>
 800affe:	4b59      	ldr	r3, [pc, #356]	; (800b164 <_dtoa_r+0x2e4>)
 800b000:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b00c:	f7f5 fd4e 	bl	8000aac <__aeabi_dcmplt>
 800b010:	2800      	cmp	r0, #0
 800b012:	d04e      	beq.n	800b0b2 <_dtoa_r+0x232>
 800b014:	f109 39ff 	add.w	r9, r9, #4294967295
 800b018:	2300      	movs	r3, #0
 800b01a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b01e:	1b1c      	subs	r4, r3, r4
 800b020:	1e63      	subs	r3, r4, #1
 800b022:	9309      	str	r3, [sp, #36]	; 0x24
 800b024:	bf45      	ittet	mi
 800b026:	f1c4 0301 	rsbmi	r3, r4, #1
 800b02a:	9306      	strmi	r3, [sp, #24]
 800b02c:	2300      	movpl	r3, #0
 800b02e:	2300      	movmi	r3, #0
 800b030:	bf4c      	ite	mi
 800b032:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b034:	9306      	strpl	r3, [sp, #24]
 800b036:	f1b9 0f00 	cmp.w	r9, #0
 800b03a:	db3c      	blt.n	800b0b6 <_dtoa_r+0x236>
 800b03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b042:	444b      	add	r3, r9
 800b044:	9309      	str	r3, [sp, #36]	; 0x24
 800b046:	2300      	movs	r3, #0
 800b048:	930a      	str	r3, [sp, #40]	; 0x28
 800b04a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b04c:	2b09      	cmp	r3, #9
 800b04e:	f200 808d 	bhi.w	800b16c <_dtoa_r+0x2ec>
 800b052:	2b05      	cmp	r3, #5
 800b054:	bfc4      	itt	gt
 800b056:	3b04      	subgt	r3, #4
 800b058:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b05a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b05c:	f1a3 0302 	sub.w	r3, r3, #2
 800b060:	bfcc      	ite	gt
 800b062:	2400      	movgt	r4, #0
 800b064:	2401      	movle	r4, #1
 800b066:	2b03      	cmp	r3, #3
 800b068:	f200 808c 	bhi.w	800b184 <_dtoa_r+0x304>
 800b06c:	e8df f003 	tbb	[pc, r3]
 800b070:	5b4d4f2d 	.word	0x5b4d4f2d
 800b074:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b078:	441c      	add	r4, r3
 800b07a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b07e:	2b20      	cmp	r3, #32
 800b080:	bfc3      	ittte	gt
 800b082:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b086:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b08a:	fa09 f303 	lslgt.w	r3, r9, r3
 800b08e:	f1c3 0320 	rsble	r3, r3, #32
 800b092:	bfc6      	itte	gt
 800b094:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b098:	4318      	orrgt	r0, r3
 800b09a:	fa06 f003 	lslle.w	r0, r6, r3
 800b09e:	f7f5 fa19 	bl	80004d4 <__aeabi_ui2d>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b0a8:	3c01      	subs	r4, #1
 800b0aa:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0ac:	e770      	b.n	800af90 <_dtoa_r+0x110>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7b3      	b.n	800b01a <_dtoa_r+0x19a>
 800b0b2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0b4:	e7b2      	b.n	800b01c <_dtoa_r+0x19c>
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	eba3 0309 	sub.w	r3, r3, r9
 800b0bc:	9306      	str	r3, [sp, #24]
 800b0be:	f1c9 0300 	rsb	r3, r9, #0
 800b0c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	930e      	str	r3, [sp, #56]	; 0x38
 800b0c8:	e7bf      	b.n	800b04a <_dtoa_r+0x1ca>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dc5a      	bgt.n	800b18a <_dtoa_r+0x30a>
 800b0d4:	f04f 0b01 	mov.w	fp, #1
 800b0d8:	f8cd b008 	str.w	fp, [sp, #8]
 800b0dc:	465b      	mov	r3, fp
 800b0de:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b0e2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	6042      	str	r2, [r0, #4]
 800b0e8:	2204      	movs	r2, #4
 800b0ea:	f102 0614 	add.w	r6, r2, #20
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	6841      	ldr	r1, [r0, #4]
 800b0f2:	d950      	bls.n	800b196 <_dtoa_r+0x316>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f001 fa93 	bl	800c620 <_Balloc>
 800b0fa:	9008      	str	r0, [sp, #32]
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d14e      	bne.n	800b19e <_dtoa_r+0x31e>
 800b100:	4b19      	ldr	r3, [pc, #100]	; (800b168 <_dtoa_r+0x2e8>)
 800b102:	4602      	mov	r2, r0
 800b104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b108:	e6ce      	b.n	800aea8 <_dtoa_r+0x28>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e7de      	b.n	800b0cc <_dtoa_r+0x24c>
 800b10e:	2300      	movs	r3, #0
 800b110:	930b      	str	r3, [sp, #44]	; 0x2c
 800b112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b114:	eb09 0b03 	add.w	fp, r9, r3
 800b118:	f10b 0301 	add.w	r3, fp, #1
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	bfb8      	it	lt
 800b122:	2301      	movlt	r3, #1
 800b124:	e7dd      	b.n	800b0e2 <_dtoa_r+0x262>
 800b126:	2301      	movs	r3, #1
 800b128:	e7f2      	b.n	800b110 <_dtoa_r+0x290>
 800b12a:	bf00      	nop
 800b12c:	f3af 8000 	nop.w
 800b130:	636f4361 	.word	0x636f4361
 800b134:	3fd287a7 	.word	0x3fd287a7
 800b138:	8b60c8b3 	.word	0x8b60c8b3
 800b13c:	3fc68a28 	.word	0x3fc68a28
 800b140:	509f79fb 	.word	0x509f79fb
 800b144:	3fd34413 	.word	0x3fd34413
 800b148:	0800e37e 	.word	0x0800e37e
 800b14c:	0800e395 	.word	0x0800e395
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	0800e37a 	.word	0x0800e37a
 800b158:	0800e371 	.word	0x0800e371
 800b15c:	0800db65 	.word	0x0800db65
 800b160:	3ff80000 	.word	0x3ff80000
 800b164:	0800e570 	.word	0x0800e570
 800b168:	0800e3f4 	.word	0x0800e3f4
 800b16c:	2401      	movs	r4, #1
 800b16e:	2300      	movs	r3, #0
 800b170:	9322      	str	r3, [sp, #136]	; 0x88
 800b172:	940b      	str	r4, [sp, #44]	; 0x2c
 800b174:	f04f 3bff 	mov.w	fp, #4294967295
 800b178:	2200      	movs	r2, #0
 800b17a:	f8cd b008 	str.w	fp, [sp, #8]
 800b17e:	2312      	movs	r3, #18
 800b180:	9223      	str	r2, [sp, #140]	; 0x8c
 800b182:	e7ae      	b.n	800b0e2 <_dtoa_r+0x262>
 800b184:	2301      	movs	r3, #1
 800b186:	930b      	str	r3, [sp, #44]	; 0x2c
 800b188:	e7f4      	b.n	800b174 <_dtoa_r+0x2f4>
 800b18a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b18e:	f8cd b008 	str.w	fp, [sp, #8]
 800b192:	465b      	mov	r3, fp
 800b194:	e7a5      	b.n	800b0e2 <_dtoa_r+0x262>
 800b196:	3101      	adds	r1, #1
 800b198:	6041      	str	r1, [r0, #4]
 800b19a:	0052      	lsls	r2, r2, #1
 800b19c:	e7a5      	b.n	800b0ea <_dtoa_r+0x26a>
 800b19e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1a0:	9a08      	ldr	r2, [sp, #32]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	9b02      	ldr	r3, [sp, #8]
 800b1a6:	2b0e      	cmp	r3, #14
 800b1a8:	f200 80a8 	bhi.w	800b2fc <_dtoa_r+0x47c>
 800b1ac:	2c00      	cmp	r4, #0
 800b1ae:	f000 80a5 	beq.w	800b2fc <_dtoa_r+0x47c>
 800b1b2:	f1b9 0f00 	cmp.w	r9, #0
 800b1b6:	dd34      	ble.n	800b222 <_dtoa_r+0x3a2>
 800b1b8:	4a9a      	ldr	r2, [pc, #616]	; (800b424 <_dtoa_r+0x5a4>)
 800b1ba:	f009 030f 	and.w	r3, r9, #15
 800b1be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1c6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b1ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b1ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b1d2:	d016      	beq.n	800b202 <_dtoa_r+0x382>
 800b1d4:	4b94      	ldr	r3, [pc, #592]	; (800b428 <_dtoa_r+0x5a8>)
 800b1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1de:	f7f5 fb1d 	bl	800081c <__aeabi_ddiv>
 800b1e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1e6:	f004 040f 	and.w	r4, r4, #15
 800b1ea:	2703      	movs	r7, #3
 800b1ec:	4e8e      	ldr	r6, [pc, #568]	; (800b428 <_dtoa_r+0x5a8>)
 800b1ee:	b954      	cbnz	r4, 800b206 <_dtoa_r+0x386>
 800b1f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1f8:	f7f5 fb10 	bl	800081c <__aeabi_ddiv>
 800b1fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b200:	e029      	b.n	800b256 <_dtoa_r+0x3d6>
 800b202:	2702      	movs	r7, #2
 800b204:	e7f2      	b.n	800b1ec <_dtoa_r+0x36c>
 800b206:	07e1      	lsls	r1, r4, #31
 800b208:	d508      	bpl.n	800b21c <_dtoa_r+0x39c>
 800b20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b20e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b212:	f7f5 f9d9 	bl	80005c8 <__aeabi_dmul>
 800b216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b21a:	3701      	adds	r7, #1
 800b21c:	1064      	asrs	r4, r4, #1
 800b21e:	3608      	adds	r6, #8
 800b220:	e7e5      	b.n	800b1ee <_dtoa_r+0x36e>
 800b222:	f000 80a5 	beq.w	800b370 <_dtoa_r+0x4f0>
 800b226:	f1c9 0400 	rsb	r4, r9, #0
 800b22a:	4b7e      	ldr	r3, [pc, #504]	; (800b424 <_dtoa_r+0x5a4>)
 800b22c:	4e7e      	ldr	r6, [pc, #504]	; (800b428 <_dtoa_r+0x5a8>)
 800b22e:	f004 020f 	and.w	r2, r4, #15
 800b232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b23e:	f7f5 f9c3 	bl	80005c8 <__aeabi_dmul>
 800b242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b246:	1124      	asrs	r4, r4, #4
 800b248:	2300      	movs	r3, #0
 800b24a:	2702      	movs	r7, #2
 800b24c:	2c00      	cmp	r4, #0
 800b24e:	f040 8084 	bne.w	800b35a <_dtoa_r+0x4da>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1d2      	bne.n	800b1fc <_dtoa_r+0x37c>
 800b256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 808b 	beq.w	800b374 <_dtoa_r+0x4f4>
 800b25e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b262:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b26a:	4b70      	ldr	r3, [pc, #448]	; (800b42c <_dtoa_r+0x5ac>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	f7f5 fc1d 	bl	8000aac <__aeabi_dcmplt>
 800b272:	2800      	cmp	r0, #0
 800b274:	d07e      	beq.n	800b374 <_dtoa_r+0x4f4>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d07b      	beq.n	800b374 <_dtoa_r+0x4f4>
 800b27c:	f1bb 0f00 	cmp.w	fp, #0
 800b280:	dd38      	ble.n	800b2f4 <_dtoa_r+0x474>
 800b282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b286:	4b6a      	ldr	r3, [pc, #424]	; (800b430 <_dtoa_r+0x5b0>)
 800b288:	2200      	movs	r2, #0
 800b28a:	f7f5 f99d 	bl	80005c8 <__aeabi_dmul>
 800b28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b292:	f109 38ff 	add.w	r8, r9, #4294967295
 800b296:	3701      	adds	r7, #1
 800b298:	465c      	mov	r4, fp
 800b29a:	4638      	mov	r0, r7
 800b29c:	f7f5 f92a 	bl	80004f4 <__aeabi_i2d>
 800b2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2a4:	f7f5 f990 	bl	80005c8 <__aeabi_dmul>
 800b2a8:	4b62      	ldr	r3, [pc, #392]	; (800b434 <_dtoa_r+0x5b4>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f7f4 ffd6 	bl	800025c <__adddf3>
 800b2b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b2b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2b8:	9611      	str	r6, [sp, #68]	; 0x44
 800b2ba:	2c00      	cmp	r4, #0
 800b2bc:	d15d      	bne.n	800b37a <_dtoa_r+0x4fa>
 800b2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c2:	4b5d      	ldr	r3, [pc, #372]	; (800b438 <_dtoa_r+0x5b8>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f7f4 ffc7 	bl	8000258 <__aeabi_dsub>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2d4:	4633      	mov	r3, r6
 800b2d6:	f7f5 fc07 	bl	8000ae8 <__aeabi_dcmpgt>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f040 829e 	bne.w	800b81c <_dtoa_r+0x99c>
 800b2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b2ea:	f7f5 fbdf 	bl	8000aac <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f040 8292 	bne.w	800b818 <_dtoa_r+0x998>
 800b2f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b2f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f2c0 8153 	blt.w	800b5aa <_dtoa_r+0x72a>
 800b304:	f1b9 0f0e 	cmp.w	r9, #14
 800b308:	f300 814f 	bgt.w	800b5aa <_dtoa_r+0x72a>
 800b30c:	4b45      	ldr	r3, [pc, #276]	; (800b424 <_dtoa_r+0x5a4>)
 800b30e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b312:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b316:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b31a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f280 80db 	bge.w	800b4d8 <_dtoa_r+0x658>
 800b322:	9b02      	ldr	r3, [sp, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f300 80d7 	bgt.w	800b4d8 <_dtoa_r+0x658>
 800b32a:	f040 8274 	bne.w	800b816 <_dtoa_r+0x996>
 800b32e:	4b42      	ldr	r3, [pc, #264]	; (800b438 <_dtoa_r+0x5b8>)
 800b330:	2200      	movs	r2, #0
 800b332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b336:	f7f5 f947 	bl	80005c8 <__aeabi_dmul>
 800b33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b33e:	f7f5 fbc9 	bl	8000ad4 <__aeabi_dcmpge>
 800b342:	9c02      	ldr	r4, [sp, #8]
 800b344:	4626      	mov	r6, r4
 800b346:	2800      	cmp	r0, #0
 800b348:	f040 824a 	bne.w	800b7e0 <_dtoa_r+0x960>
 800b34c:	9f08      	ldr	r7, [sp, #32]
 800b34e:	2331      	movs	r3, #49	; 0x31
 800b350:	f807 3b01 	strb.w	r3, [r7], #1
 800b354:	f109 0901 	add.w	r9, r9, #1
 800b358:	e246      	b.n	800b7e8 <_dtoa_r+0x968>
 800b35a:	07e2      	lsls	r2, r4, #31
 800b35c:	d505      	bpl.n	800b36a <_dtoa_r+0x4ea>
 800b35e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b362:	f7f5 f931 	bl	80005c8 <__aeabi_dmul>
 800b366:	3701      	adds	r7, #1
 800b368:	2301      	movs	r3, #1
 800b36a:	1064      	asrs	r4, r4, #1
 800b36c:	3608      	adds	r6, #8
 800b36e:	e76d      	b.n	800b24c <_dtoa_r+0x3cc>
 800b370:	2702      	movs	r7, #2
 800b372:	e770      	b.n	800b256 <_dtoa_r+0x3d6>
 800b374:	9c02      	ldr	r4, [sp, #8]
 800b376:	46c8      	mov	r8, r9
 800b378:	e78f      	b.n	800b29a <_dtoa_r+0x41a>
 800b37a:	9908      	ldr	r1, [sp, #32]
 800b37c:	4b29      	ldr	r3, [pc, #164]	; (800b424 <_dtoa_r+0x5a4>)
 800b37e:	4421      	add	r1, r4
 800b380:	9112      	str	r1, [sp, #72]	; 0x48
 800b382:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b388:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b38c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b390:	2900      	cmp	r1, #0
 800b392:	d055      	beq.n	800b440 <_dtoa_r+0x5c0>
 800b394:	4929      	ldr	r1, [pc, #164]	; (800b43c <_dtoa_r+0x5bc>)
 800b396:	2000      	movs	r0, #0
 800b398:	f7f5 fa40 	bl	800081c <__aeabi_ddiv>
 800b39c:	463b      	mov	r3, r7
 800b39e:	4632      	mov	r2, r6
 800b3a0:	f7f4 ff5a 	bl	8000258 <__aeabi_dsub>
 800b3a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3a8:	9f08      	ldr	r7, [sp, #32]
 800b3aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ae:	f7f5 fbbb 	bl	8000b28 <__aeabi_d2iz>
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	f7f5 f89e 	bl	80004f4 <__aeabi_i2d>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3c0:	f7f4 ff4a 	bl	8000258 <__aeabi_dsub>
 800b3c4:	3430      	adds	r4, #48	; 0x30
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3ce:	f807 4b01 	strb.w	r4, [r7], #1
 800b3d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3d6:	f7f5 fb69 	bl	8000aac <__aeabi_dcmplt>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d174      	bne.n	800b4c8 <_dtoa_r+0x648>
 800b3de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e2:	4912      	ldr	r1, [pc, #72]	; (800b42c <_dtoa_r+0x5ac>)
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	f7f4 ff37 	bl	8000258 <__aeabi_dsub>
 800b3ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3ee:	f7f5 fb5d 	bl	8000aac <__aeabi_dcmplt>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f040 80b6 	bne.w	800b564 <_dtoa_r+0x6e4>
 800b3f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3fa:	429f      	cmp	r7, r3
 800b3fc:	f43f af7a 	beq.w	800b2f4 <_dtoa_r+0x474>
 800b400:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b404:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <_dtoa_r+0x5b0>)
 800b406:	2200      	movs	r2, #0
 800b408:	f7f5 f8de 	bl	80005c8 <__aeabi_dmul>
 800b40c:	4b08      	ldr	r3, [pc, #32]	; (800b430 <_dtoa_r+0x5b0>)
 800b40e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b412:	2200      	movs	r2, #0
 800b414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b418:	f7f5 f8d6 	bl	80005c8 <__aeabi_dmul>
 800b41c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b420:	e7c3      	b.n	800b3aa <_dtoa_r+0x52a>
 800b422:	bf00      	nop
 800b424:	0800e570 	.word	0x0800e570
 800b428:	0800e548 	.word	0x0800e548
 800b42c:	3ff00000 	.word	0x3ff00000
 800b430:	40240000 	.word	0x40240000
 800b434:	401c0000 	.word	0x401c0000
 800b438:	40140000 	.word	0x40140000
 800b43c:	3fe00000 	.word	0x3fe00000
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f5 f8c0 	bl	80005c8 <__aeabi_dmul>
 800b448:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b44c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b44e:	9c08      	ldr	r4, [sp, #32]
 800b450:	9314      	str	r3, [sp, #80]	; 0x50
 800b452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b456:	f7f5 fb67 	bl	8000b28 <__aeabi_d2iz>
 800b45a:	9015      	str	r0, [sp, #84]	; 0x54
 800b45c:	f7f5 f84a 	bl	80004f4 <__aeabi_i2d>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b468:	f7f4 fef6 	bl	8000258 <__aeabi_dsub>
 800b46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46e:	3330      	adds	r3, #48	; 0x30
 800b470:	f804 3b01 	strb.w	r3, [r4], #1
 800b474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b476:	429c      	cmp	r4, r3
 800b478:	4606      	mov	r6, r0
 800b47a:	460f      	mov	r7, r1
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	d124      	bne.n	800b4cc <_dtoa_r+0x64c>
 800b482:	4bb2      	ldr	r3, [pc, #712]	; (800b74c <_dtoa_r+0x8cc>)
 800b484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b488:	f7f4 fee8 	bl	800025c <__adddf3>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4630      	mov	r0, r6
 800b492:	4639      	mov	r1, r7
 800b494:	f7f5 fb28 	bl	8000ae8 <__aeabi_dcmpgt>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d162      	bne.n	800b562 <_dtoa_r+0x6e2>
 800b49c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4a0:	49aa      	ldr	r1, [pc, #680]	; (800b74c <_dtoa_r+0x8cc>)
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	f7f4 fed8 	bl	8000258 <__aeabi_dsub>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f5 fafc 	bl	8000aac <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f43f af1d 	beq.w	800b2f4 <_dtoa_r+0x474>
 800b4ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b4bc:	1e7b      	subs	r3, r7, #1
 800b4be:	9314      	str	r3, [sp, #80]	; 0x50
 800b4c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b4c4:	2b30      	cmp	r3, #48	; 0x30
 800b4c6:	d0f8      	beq.n	800b4ba <_dtoa_r+0x63a>
 800b4c8:	46c1      	mov	r9, r8
 800b4ca:	e03a      	b.n	800b542 <_dtoa_r+0x6c2>
 800b4cc:	4ba0      	ldr	r3, [pc, #640]	; (800b750 <_dtoa_r+0x8d0>)
 800b4ce:	f7f5 f87b 	bl	80005c8 <__aeabi_dmul>
 800b4d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4d6:	e7bc      	b.n	800b452 <_dtoa_r+0x5d2>
 800b4d8:	9f08      	ldr	r7, [sp, #32]
 800b4da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e2:	f7f5 f99b 	bl	800081c <__aeabi_ddiv>
 800b4e6:	f7f5 fb1f 	bl	8000b28 <__aeabi_d2iz>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	f7f5 f802 	bl	80004f4 <__aeabi_i2d>
 800b4f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4f4:	f7f5 f868 	bl	80005c8 <__aeabi_dmul>
 800b4f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4602      	mov	r2, r0
 800b500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b504:	f7f4 fea8 	bl	8000258 <__aeabi_dsub>
 800b508:	f807 6b01 	strb.w	r6, [r7], #1
 800b50c:	9e08      	ldr	r6, [sp, #32]
 800b50e:	9b02      	ldr	r3, [sp, #8]
 800b510:	1bbe      	subs	r6, r7, r6
 800b512:	42b3      	cmp	r3, r6
 800b514:	d13a      	bne.n	800b58c <_dtoa_r+0x70c>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	f7f4 fe9f 	bl	800025c <__adddf3>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b52a:	f7f5 fadd 	bl	8000ae8 <__aeabi_dcmpgt>
 800b52e:	bb58      	cbnz	r0, 800b588 <_dtoa_r+0x708>
 800b530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b538:	f7f5 faae 	bl	8000a98 <__aeabi_dcmpeq>
 800b53c:	b108      	cbz	r0, 800b542 <_dtoa_r+0x6c2>
 800b53e:	07e1      	lsls	r1, r4, #31
 800b540:	d422      	bmi.n	800b588 <_dtoa_r+0x708>
 800b542:	4628      	mov	r0, r5
 800b544:	4651      	mov	r1, sl
 800b546:	f001 f8ab 	bl	800c6a0 <_Bfree>
 800b54a:	2300      	movs	r3, #0
 800b54c:	703b      	strb	r3, [r7, #0]
 800b54e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b550:	f109 0001 	add.w	r0, r9, #1
 800b554:	6018      	str	r0, [r3, #0]
 800b556:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f43f acde 	beq.w	800af1a <_dtoa_r+0x9a>
 800b55e:	601f      	str	r7, [r3, #0]
 800b560:	e4db      	b.n	800af1a <_dtoa_r+0x9a>
 800b562:	4627      	mov	r7, r4
 800b564:	463b      	mov	r3, r7
 800b566:	461f      	mov	r7, r3
 800b568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b56c:	2a39      	cmp	r2, #57	; 0x39
 800b56e:	d107      	bne.n	800b580 <_dtoa_r+0x700>
 800b570:	9a08      	ldr	r2, [sp, #32]
 800b572:	429a      	cmp	r2, r3
 800b574:	d1f7      	bne.n	800b566 <_dtoa_r+0x6e6>
 800b576:	9908      	ldr	r1, [sp, #32]
 800b578:	2230      	movs	r2, #48	; 0x30
 800b57a:	f108 0801 	add.w	r8, r8, #1
 800b57e:	700a      	strb	r2, [r1, #0]
 800b580:	781a      	ldrb	r2, [r3, #0]
 800b582:	3201      	adds	r2, #1
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e79f      	b.n	800b4c8 <_dtoa_r+0x648>
 800b588:	46c8      	mov	r8, r9
 800b58a:	e7eb      	b.n	800b564 <_dtoa_r+0x6e4>
 800b58c:	4b70      	ldr	r3, [pc, #448]	; (800b750 <_dtoa_r+0x8d0>)
 800b58e:	2200      	movs	r2, #0
 800b590:	f7f5 f81a 	bl	80005c8 <__aeabi_dmul>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b59c:	2200      	movs	r2, #0
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f7f5 fa7a 	bl	8000a98 <__aeabi_dcmpeq>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d098      	beq.n	800b4da <_dtoa_r+0x65a>
 800b5a8:	e7cb      	b.n	800b542 <_dtoa_r+0x6c2>
 800b5aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	f000 80d1 	beq.w	800b754 <_dtoa_r+0x8d4>
 800b5b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5b4:	2a01      	cmp	r2, #1
 800b5b6:	f300 80af 	bgt.w	800b718 <_dtoa_r+0x898>
 800b5ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	f000 80a7 	beq.w	800b710 <_dtoa_r+0x890>
 800b5c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5c8:	9f06      	ldr	r7, [sp, #24]
 800b5ca:	9a06      	ldr	r2, [sp, #24]
 800b5cc:	441a      	add	r2, r3
 800b5ce:	9206      	str	r2, [sp, #24]
 800b5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	441a      	add	r2, r3
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5da:	f001 f965 	bl	800c8a8 <__i2b>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	2f00      	cmp	r7, #0
 800b5e2:	dd0c      	ble.n	800b5fe <_dtoa_r+0x77e>
 800b5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dd09      	ble.n	800b5fe <_dtoa_r+0x77e>
 800b5ea:	42bb      	cmp	r3, r7
 800b5ec:	9a06      	ldr	r2, [sp, #24]
 800b5ee:	bfa8      	it	ge
 800b5f0:	463b      	movge	r3, r7
 800b5f2:	1ad2      	subs	r2, r2, r3
 800b5f4:	9206      	str	r2, [sp, #24]
 800b5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5f8:	1aff      	subs	r7, r7, r3
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b600:	b1f3      	cbz	r3, 800b640 <_dtoa_r+0x7c0>
 800b602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 80a9 	beq.w	800b75c <_dtoa_r+0x8dc>
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	dd10      	ble.n	800b630 <_dtoa_r+0x7b0>
 800b60e:	4631      	mov	r1, r6
 800b610:	4622      	mov	r2, r4
 800b612:	4628      	mov	r0, r5
 800b614:	f001 fa04 	bl	800ca20 <__pow5mult>
 800b618:	4652      	mov	r2, sl
 800b61a:	4601      	mov	r1, r0
 800b61c:	4606      	mov	r6, r0
 800b61e:	4628      	mov	r0, r5
 800b620:	f001 f958 	bl	800c8d4 <__multiply>
 800b624:	4651      	mov	r1, sl
 800b626:	4680      	mov	r8, r0
 800b628:	4628      	mov	r0, r5
 800b62a:	f001 f839 	bl	800c6a0 <_Bfree>
 800b62e:	46c2      	mov	sl, r8
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	1b1a      	subs	r2, r3, r4
 800b634:	d004      	beq.n	800b640 <_dtoa_r+0x7c0>
 800b636:	4651      	mov	r1, sl
 800b638:	4628      	mov	r0, r5
 800b63a:	f001 f9f1 	bl	800ca20 <__pow5mult>
 800b63e:	4682      	mov	sl, r0
 800b640:	2101      	movs	r1, #1
 800b642:	4628      	mov	r0, r5
 800b644:	f001 f930 	bl	800c8a8 <__i2b>
 800b648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	4604      	mov	r4, r0
 800b64e:	f340 8087 	ble.w	800b760 <_dtoa_r+0x8e0>
 800b652:	461a      	mov	r2, r3
 800b654:	4601      	mov	r1, r0
 800b656:	4628      	mov	r0, r5
 800b658:	f001 f9e2 	bl	800ca20 <__pow5mult>
 800b65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b65e:	2b01      	cmp	r3, #1
 800b660:	4604      	mov	r4, r0
 800b662:	f340 8080 	ble.w	800b766 <_dtoa_r+0x8e6>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	f001 f8cb 	bl	800c80c <__hi0bits>
 800b676:	f1c0 0020 	rsb	r0, r0, #32
 800b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67c:	4418      	add	r0, r3
 800b67e:	f010 001f 	ands.w	r0, r0, #31
 800b682:	f000 8092 	beq.w	800b7aa <_dtoa_r+0x92a>
 800b686:	f1c0 0320 	rsb	r3, r0, #32
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	f340 808a 	ble.w	800b7a4 <_dtoa_r+0x924>
 800b690:	f1c0 001c 	rsb	r0, r0, #28
 800b694:	9b06      	ldr	r3, [sp, #24]
 800b696:	4403      	add	r3, r0
 800b698:	9306      	str	r3, [sp, #24]
 800b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69c:	4403      	add	r3, r0
 800b69e:	4407      	add	r7, r0
 800b6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a2:	9b06      	ldr	r3, [sp, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd05      	ble.n	800b6b4 <_dtoa_r+0x834>
 800b6a8:	4651      	mov	r1, sl
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f001 fa11 	bl	800cad4 <__lshift>
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd05      	ble.n	800b6c6 <_dtoa_r+0x846>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f001 fa08 	bl	800cad4 <__lshift>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d070      	beq.n	800b7ae <_dtoa_r+0x92e>
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f001 fa6c 	bl	800cbac <__mcmp>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	da6a      	bge.n	800b7ae <_dtoa_r+0x92e>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4651      	mov	r1, sl
 800b6dc:	220a      	movs	r2, #10
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f001 f800 	bl	800c6e4 <__multadd>
 800b6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6ea:	4682      	mov	sl, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 8193 	beq.w	800ba18 <_dtoa_r+0xb98>
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	220a      	movs	r2, #10
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 fff3 	bl	800c6e4 <__multadd>
 800b6fe:	f1bb 0f00 	cmp.w	fp, #0
 800b702:	4606      	mov	r6, r0
 800b704:	f300 8093 	bgt.w	800b82e <_dtoa_r+0x9ae>
 800b708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	dc57      	bgt.n	800b7be <_dtoa_r+0x93e>
 800b70e:	e08e      	b.n	800b82e <_dtoa_r+0x9ae>
 800b710:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b712:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b716:	e756      	b.n	800b5c6 <_dtoa_r+0x746>
 800b718:	9b02      	ldr	r3, [sp, #8]
 800b71a:	1e5c      	subs	r4, r3, #1
 800b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71e:	42a3      	cmp	r3, r4
 800b720:	bfbf      	itttt	lt
 800b722:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b724:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b726:	1ae2      	sublt	r2, r4, r3
 800b728:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b72a:	bfb6      	itet	lt
 800b72c:	189b      	addlt	r3, r3, r2
 800b72e:	1b1c      	subge	r4, r3, r4
 800b730:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b732:	9b02      	ldr	r3, [sp, #8]
 800b734:	bfb8      	it	lt
 800b736:	2400      	movlt	r4, #0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bfb9      	ittee	lt
 800b73c:	9b06      	ldrlt	r3, [sp, #24]
 800b73e:	9a02      	ldrlt	r2, [sp, #8]
 800b740:	9f06      	ldrge	r7, [sp, #24]
 800b742:	9b02      	ldrge	r3, [sp, #8]
 800b744:	bfbc      	itt	lt
 800b746:	1a9f      	sublt	r7, r3, r2
 800b748:	2300      	movlt	r3, #0
 800b74a:	e73e      	b.n	800b5ca <_dtoa_r+0x74a>
 800b74c:	3fe00000 	.word	0x3fe00000
 800b750:	40240000 	.word	0x40240000
 800b754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b756:	9f06      	ldr	r7, [sp, #24]
 800b758:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b75a:	e741      	b.n	800b5e0 <_dtoa_r+0x760>
 800b75c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b75e:	e76a      	b.n	800b636 <_dtoa_r+0x7b6>
 800b760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b762:	2b01      	cmp	r3, #1
 800b764:	dc19      	bgt.n	800b79a <_dtoa_r+0x91a>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	b9bb      	cbnz	r3, 800b79a <_dtoa_r+0x91a>
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b770:	b99b      	cbnz	r3, 800b79a <_dtoa_r+0x91a>
 800b772:	9b05      	ldr	r3, [sp, #20]
 800b774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b778:	0d1b      	lsrs	r3, r3, #20
 800b77a:	051b      	lsls	r3, r3, #20
 800b77c:	b183      	cbz	r3, 800b7a0 <_dtoa_r+0x920>
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	3301      	adds	r3, #1
 800b782:	9306      	str	r3, [sp, #24]
 800b784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b786:	3301      	adds	r3, #1
 800b788:	9309      	str	r3, [sp, #36]	; 0x24
 800b78a:	f04f 0801 	mov.w	r8, #1
 800b78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f af6a 	bne.w	800b66a <_dtoa_r+0x7ea>
 800b796:	2001      	movs	r0, #1
 800b798:	e76f      	b.n	800b67a <_dtoa_r+0x7fa>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	e7f6      	b.n	800b78e <_dtoa_r+0x90e>
 800b7a0:	4698      	mov	r8, r3
 800b7a2:	e7f4      	b.n	800b78e <_dtoa_r+0x90e>
 800b7a4:	f43f af7d 	beq.w	800b6a2 <_dtoa_r+0x822>
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	301c      	adds	r0, #28
 800b7ac:	e772      	b.n	800b694 <_dtoa_r+0x814>
 800b7ae:	9b02      	ldr	r3, [sp, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc36      	bgt.n	800b822 <_dtoa_r+0x9a2>
 800b7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	dd33      	ble.n	800b822 <_dtoa_r+0x9a2>
 800b7ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b7be:	f1bb 0f00 	cmp.w	fp, #0
 800b7c2:	d10d      	bne.n	800b7e0 <_dtoa_r+0x960>
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	465b      	mov	r3, fp
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f000 ff8a 	bl	800c6e4 <__multadd>
 800b7d0:	4601      	mov	r1, r0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	f001 f9e9 	bl	800cbac <__mcmp>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f73f adb6 	bgt.w	800b34c <_dtoa_r+0x4cc>
 800b7e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7e2:	9f08      	ldr	r7, [sp, #32]
 800b7e4:	ea6f 0903 	mvn.w	r9, r3
 800b7e8:	f04f 0800 	mov.w	r8, #0
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 ff56 	bl	800c6a0 <_Bfree>
 800b7f4:	2e00      	cmp	r6, #0
 800b7f6:	f43f aea4 	beq.w	800b542 <_dtoa_r+0x6c2>
 800b7fa:	f1b8 0f00 	cmp.w	r8, #0
 800b7fe:	d005      	beq.n	800b80c <_dtoa_r+0x98c>
 800b800:	45b0      	cmp	r8, r6
 800b802:	d003      	beq.n	800b80c <_dtoa_r+0x98c>
 800b804:	4641      	mov	r1, r8
 800b806:	4628      	mov	r0, r5
 800b808:	f000 ff4a 	bl	800c6a0 <_Bfree>
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 ff46 	bl	800c6a0 <_Bfree>
 800b814:	e695      	b.n	800b542 <_dtoa_r+0x6c2>
 800b816:	2400      	movs	r4, #0
 800b818:	4626      	mov	r6, r4
 800b81a:	e7e1      	b.n	800b7e0 <_dtoa_r+0x960>
 800b81c:	46c1      	mov	r9, r8
 800b81e:	4626      	mov	r6, r4
 800b820:	e594      	b.n	800b34c <_dtoa_r+0x4cc>
 800b822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b824:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 80fc 	beq.w	800ba26 <_dtoa_r+0xba6>
 800b82e:	2f00      	cmp	r7, #0
 800b830:	dd05      	ble.n	800b83e <_dtoa_r+0x9be>
 800b832:	4631      	mov	r1, r6
 800b834:	463a      	mov	r2, r7
 800b836:	4628      	mov	r0, r5
 800b838:	f001 f94c 	bl	800cad4 <__lshift>
 800b83c:	4606      	mov	r6, r0
 800b83e:	f1b8 0f00 	cmp.w	r8, #0
 800b842:	d05c      	beq.n	800b8fe <_dtoa_r+0xa7e>
 800b844:	6871      	ldr	r1, [r6, #4]
 800b846:	4628      	mov	r0, r5
 800b848:	f000 feea 	bl	800c620 <_Balloc>
 800b84c:	4607      	mov	r7, r0
 800b84e:	b928      	cbnz	r0, 800b85c <_dtoa_r+0x9dc>
 800b850:	4b7f      	ldr	r3, [pc, #508]	; (800ba50 <_dtoa_r+0xbd0>)
 800b852:	4602      	mov	r2, r0
 800b854:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b858:	f7ff bb26 	b.w	800aea8 <_dtoa_r+0x28>
 800b85c:	6932      	ldr	r2, [r6, #16]
 800b85e:	3202      	adds	r2, #2
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	f106 010c 	add.w	r1, r6, #12
 800b866:	300c      	adds	r0, #12
 800b868:	f7fd fa90 	bl	8008d8c <memcpy>
 800b86c:	2201      	movs	r2, #1
 800b86e:	4639      	mov	r1, r7
 800b870:	4628      	mov	r0, r5
 800b872:	f001 f92f 	bl	800cad4 <__lshift>
 800b876:	9b08      	ldr	r3, [sp, #32]
 800b878:	3301      	adds	r3, #1
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	9b08      	ldr	r3, [sp, #32]
 800b87e:	445b      	add	r3, fp
 800b880:	930a      	str	r3, [sp, #40]	; 0x28
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	46b0      	mov	r8, r6
 800b88a:	9309      	str	r3, [sp, #36]	; 0x24
 800b88c:	4606      	mov	r6, r0
 800b88e:	9b02      	ldr	r3, [sp, #8]
 800b890:	4621      	mov	r1, r4
 800b892:	4650      	mov	r0, sl
 800b894:	f103 3bff 	add.w	fp, r3, #4294967295
 800b898:	f7ff fa66 	bl	800ad68 <quorem>
 800b89c:	4603      	mov	r3, r0
 800b89e:	3330      	adds	r3, #48	; 0x30
 800b8a0:	9004      	str	r0, [sp, #16]
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a8:	f001 f980 	bl	800cbac <__mcmp>
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	9006      	str	r0, [sp, #24]
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f001 f996 	bl	800cbe4 <__mdiff>
 800b8b8:	68c2      	ldr	r2, [r0, #12]
 800b8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8bc:	4607      	mov	r7, r0
 800b8be:	bb02      	cbnz	r2, 800b902 <_dtoa_r+0xa82>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	f001 f972 	bl	800cbac <__mcmp>
 800b8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b8d4:	f000 fee4 	bl	800c6a0 <_Bfree>
 800b8d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8dc:	9f02      	ldr	r7, [sp, #8]
 800b8de:	ea43 0102 	orr.w	r1, r3, r2
 800b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e8:	d10d      	bne.n	800b906 <_dtoa_r+0xa86>
 800b8ea:	2b39      	cmp	r3, #57	; 0x39
 800b8ec:	d027      	beq.n	800b93e <_dtoa_r+0xabe>
 800b8ee:	9a06      	ldr	r2, [sp, #24]
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	dd01      	ble.n	800b8f8 <_dtoa_r+0xa78>
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	3331      	adds	r3, #49	; 0x31
 800b8f8:	f88b 3000 	strb.w	r3, [fp]
 800b8fc:	e776      	b.n	800b7ec <_dtoa_r+0x96c>
 800b8fe:	4630      	mov	r0, r6
 800b900:	e7b9      	b.n	800b876 <_dtoa_r+0x9f6>
 800b902:	2201      	movs	r2, #1
 800b904:	e7e2      	b.n	800b8cc <_dtoa_r+0xa4c>
 800b906:	9906      	ldr	r1, [sp, #24]
 800b908:	2900      	cmp	r1, #0
 800b90a:	db04      	blt.n	800b916 <_dtoa_r+0xa96>
 800b90c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b90e:	4301      	orrs	r1, r0
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	4301      	orrs	r1, r0
 800b914:	d120      	bne.n	800b958 <_dtoa_r+0xad8>
 800b916:	2a00      	cmp	r2, #0
 800b918:	ddee      	ble.n	800b8f8 <_dtoa_r+0xa78>
 800b91a:	4651      	mov	r1, sl
 800b91c:	2201      	movs	r2, #1
 800b91e:	4628      	mov	r0, r5
 800b920:	9302      	str	r3, [sp, #8]
 800b922:	f001 f8d7 	bl	800cad4 <__lshift>
 800b926:	4621      	mov	r1, r4
 800b928:	4682      	mov	sl, r0
 800b92a:	f001 f93f 	bl	800cbac <__mcmp>
 800b92e:	2800      	cmp	r0, #0
 800b930:	9b02      	ldr	r3, [sp, #8]
 800b932:	dc02      	bgt.n	800b93a <_dtoa_r+0xaba>
 800b934:	d1e0      	bne.n	800b8f8 <_dtoa_r+0xa78>
 800b936:	07da      	lsls	r2, r3, #31
 800b938:	d5de      	bpl.n	800b8f8 <_dtoa_r+0xa78>
 800b93a:	2b39      	cmp	r3, #57	; 0x39
 800b93c:	d1da      	bne.n	800b8f4 <_dtoa_r+0xa74>
 800b93e:	2339      	movs	r3, #57	; 0x39
 800b940:	f88b 3000 	strb.w	r3, [fp]
 800b944:	463b      	mov	r3, r7
 800b946:	461f      	mov	r7, r3
 800b948:	3b01      	subs	r3, #1
 800b94a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b94e:	2a39      	cmp	r2, #57	; 0x39
 800b950:	d050      	beq.n	800b9f4 <_dtoa_r+0xb74>
 800b952:	3201      	adds	r2, #1
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	e749      	b.n	800b7ec <_dtoa_r+0x96c>
 800b958:	2a00      	cmp	r2, #0
 800b95a:	dd03      	ble.n	800b964 <_dtoa_r+0xae4>
 800b95c:	2b39      	cmp	r3, #57	; 0x39
 800b95e:	d0ee      	beq.n	800b93e <_dtoa_r+0xabe>
 800b960:	3301      	adds	r3, #1
 800b962:	e7c9      	b.n	800b8f8 <_dtoa_r+0xa78>
 800b964:	9a02      	ldr	r2, [sp, #8]
 800b966:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b968:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b96c:	428a      	cmp	r2, r1
 800b96e:	d02a      	beq.n	800b9c6 <_dtoa_r+0xb46>
 800b970:	4651      	mov	r1, sl
 800b972:	2300      	movs	r3, #0
 800b974:	220a      	movs	r2, #10
 800b976:	4628      	mov	r0, r5
 800b978:	f000 feb4 	bl	800c6e4 <__multadd>
 800b97c:	45b0      	cmp	r8, r6
 800b97e:	4682      	mov	sl, r0
 800b980:	f04f 0300 	mov.w	r3, #0
 800b984:	f04f 020a 	mov.w	r2, #10
 800b988:	4641      	mov	r1, r8
 800b98a:	4628      	mov	r0, r5
 800b98c:	d107      	bne.n	800b99e <_dtoa_r+0xb1e>
 800b98e:	f000 fea9 	bl	800c6e4 <__multadd>
 800b992:	4680      	mov	r8, r0
 800b994:	4606      	mov	r6, r0
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	3301      	adds	r3, #1
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	e777      	b.n	800b88e <_dtoa_r+0xa0e>
 800b99e:	f000 fea1 	bl	800c6e4 <__multadd>
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4680      	mov	r8, r0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f000 fe9a 	bl	800c6e4 <__multadd>
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	e7f0      	b.n	800b996 <_dtoa_r+0xb16>
 800b9b4:	f1bb 0f00 	cmp.w	fp, #0
 800b9b8:	9a08      	ldr	r2, [sp, #32]
 800b9ba:	bfcc      	ite	gt
 800b9bc:	465f      	movgt	r7, fp
 800b9be:	2701      	movle	r7, #1
 800b9c0:	4417      	add	r7, r2
 800b9c2:	f04f 0800 	mov.w	r8, #0
 800b9c6:	4651      	mov	r1, sl
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	f001 f881 	bl	800cad4 <__lshift>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	f001 f8e9 	bl	800cbac <__mcmp>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	dcb2      	bgt.n	800b944 <_dtoa_r+0xac4>
 800b9de:	d102      	bne.n	800b9e6 <_dtoa_r+0xb66>
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	07db      	lsls	r3, r3, #31
 800b9e4:	d4ae      	bmi.n	800b944 <_dtoa_r+0xac4>
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	461f      	mov	r7, r3
 800b9ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9ee:	2a30      	cmp	r2, #48	; 0x30
 800b9f0:	d0fa      	beq.n	800b9e8 <_dtoa_r+0xb68>
 800b9f2:	e6fb      	b.n	800b7ec <_dtoa_r+0x96c>
 800b9f4:	9a08      	ldr	r2, [sp, #32]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d1a5      	bne.n	800b946 <_dtoa_r+0xac6>
 800b9fa:	2331      	movs	r3, #49	; 0x31
 800b9fc:	f109 0901 	add.w	r9, r9, #1
 800ba00:	7013      	strb	r3, [r2, #0]
 800ba02:	e6f3      	b.n	800b7ec <_dtoa_r+0x96c>
 800ba04:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <_dtoa_r+0xbd4>)
 800ba06:	f7ff baa6 	b.w	800af56 <_dtoa_r+0xd6>
 800ba0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f47f aa7f 	bne.w	800af10 <_dtoa_r+0x90>
 800ba12:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <_dtoa_r+0xbd8>)
 800ba14:	f7ff ba9f 	b.w	800af56 <_dtoa_r+0xd6>
 800ba18:	f1bb 0f00 	cmp.w	fp, #0
 800ba1c:	dc03      	bgt.n	800ba26 <_dtoa_r+0xba6>
 800ba1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	f73f aecc 	bgt.w	800b7be <_dtoa_r+0x93e>
 800ba26:	9f08      	ldr	r7, [sp, #32]
 800ba28:	4621      	mov	r1, r4
 800ba2a:	4650      	mov	r0, sl
 800ba2c:	f7ff f99c 	bl	800ad68 <quorem>
 800ba30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba34:	f807 3b01 	strb.w	r3, [r7], #1
 800ba38:	9a08      	ldr	r2, [sp, #32]
 800ba3a:	1aba      	subs	r2, r7, r2
 800ba3c:	4593      	cmp	fp, r2
 800ba3e:	ddb9      	ble.n	800b9b4 <_dtoa_r+0xb34>
 800ba40:	4651      	mov	r1, sl
 800ba42:	2300      	movs	r3, #0
 800ba44:	220a      	movs	r2, #10
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 fe4c 	bl	800c6e4 <__multadd>
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	e7eb      	b.n	800ba28 <_dtoa_r+0xba8>
 800ba50:	0800e3f4 	.word	0x0800e3f4
 800ba54:	0800db64 	.word	0x0800db64
 800ba58:	0800e371 	.word	0x0800e371

0800ba5c <__sflush_r>:
 800ba5c:	898a      	ldrh	r2, [r1, #12]
 800ba5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba62:	4605      	mov	r5, r0
 800ba64:	0710      	lsls	r0, r2, #28
 800ba66:	460c      	mov	r4, r1
 800ba68:	d458      	bmi.n	800bb1c <__sflush_r+0xc0>
 800ba6a:	684b      	ldr	r3, [r1, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dc05      	bgt.n	800ba7c <__sflush_r+0x20>
 800ba70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dc02      	bgt.n	800ba7c <__sflush_r+0x20>
 800ba76:	2000      	movs	r0, #0
 800ba78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	d0f9      	beq.n	800ba76 <__sflush_r+0x1a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba88:	682f      	ldr	r7, [r5, #0]
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	d032      	beq.n	800baf4 <__sflush_r+0x98>
 800ba8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	075a      	lsls	r2, r3, #29
 800ba94:	d505      	bpl.n	800baa2 <__sflush_r+0x46>
 800ba96:	6863      	ldr	r3, [r4, #4]
 800ba98:	1ac0      	subs	r0, r0, r3
 800ba9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba9c:	b10b      	cbz	r3, 800baa2 <__sflush_r+0x46>
 800ba9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baa0:	1ac0      	subs	r0, r0, r3
 800baa2:	2300      	movs	r3, #0
 800baa4:	4602      	mov	r2, r0
 800baa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baa8:	6a21      	ldr	r1, [r4, #32]
 800baaa:	4628      	mov	r0, r5
 800baac:	47b0      	blx	r6
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	d106      	bne.n	800bac2 <__sflush_r+0x66>
 800bab4:	6829      	ldr	r1, [r5, #0]
 800bab6:	291d      	cmp	r1, #29
 800bab8:	d82c      	bhi.n	800bb14 <__sflush_r+0xb8>
 800baba:	4a2a      	ldr	r2, [pc, #168]	; (800bb64 <__sflush_r+0x108>)
 800babc:	40ca      	lsrs	r2, r1
 800babe:	07d6      	lsls	r6, r2, #31
 800bac0:	d528      	bpl.n	800bb14 <__sflush_r+0xb8>
 800bac2:	2200      	movs	r2, #0
 800bac4:	6062      	str	r2, [r4, #4]
 800bac6:	04d9      	lsls	r1, r3, #19
 800bac8:	6922      	ldr	r2, [r4, #16]
 800baca:	6022      	str	r2, [r4, #0]
 800bacc:	d504      	bpl.n	800bad8 <__sflush_r+0x7c>
 800bace:	1c42      	adds	r2, r0, #1
 800bad0:	d101      	bne.n	800bad6 <__sflush_r+0x7a>
 800bad2:	682b      	ldr	r3, [r5, #0]
 800bad4:	b903      	cbnz	r3, 800bad8 <__sflush_r+0x7c>
 800bad6:	6560      	str	r0, [r4, #84]	; 0x54
 800bad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bada:	602f      	str	r7, [r5, #0]
 800badc:	2900      	cmp	r1, #0
 800bade:	d0ca      	beq.n	800ba76 <__sflush_r+0x1a>
 800bae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bae4:	4299      	cmp	r1, r3
 800bae6:	d002      	beq.n	800baee <__sflush_r+0x92>
 800bae8:	4628      	mov	r0, r5
 800baea:	f7fd f965 	bl	8008db8 <_free_r>
 800baee:	2000      	movs	r0, #0
 800baf0:	6360      	str	r0, [r4, #52]	; 0x34
 800baf2:	e7c1      	b.n	800ba78 <__sflush_r+0x1c>
 800baf4:	6a21      	ldr	r1, [r4, #32]
 800baf6:	2301      	movs	r3, #1
 800baf8:	4628      	mov	r0, r5
 800bafa:	47b0      	blx	r6
 800bafc:	1c41      	adds	r1, r0, #1
 800bafe:	d1c7      	bne.n	800ba90 <__sflush_r+0x34>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0c4      	beq.n	800ba90 <__sflush_r+0x34>
 800bb06:	2b1d      	cmp	r3, #29
 800bb08:	d001      	beq.n	800bb0e <__sflush_r+0xb2>
 800bb0a:	2b16      	cmp	r3, #22
 800bb0c:	d101      	bne.n	800bb12 <__sflush_r+0xb6>
 800bb0e:	602f      	str	r7, [r5, #0]
 800bb10:	e7b1      	b.n	800ba76 <__sflush_r+0x1a>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb18:	81a3      	strh	r3, [r4, #12]
 800bb1a:	e7ad      	b.n	800ba78 <__sflush_r+0x1c>
 800bb1c:	690f      	ldr	r7, [r1, #16]
 800bb1e:	2f00      	cmp	r7, #0
 800bb20:	d0a9      	beq.n	800ba76 <__sflush_r+0x1a>
 800bb22:	0793      	lsls	r3, r2, #30
 800bb24:	680e      	ldr	r6, [r1, #0]
 800bb26:	bf08      	it	eq
 800bb28:	694b      	ldreq	r3, [r1, #20]
 800bb2a:	600f      	str	r7, [r1, #0]
 800bb2c:	bf18      	it	ne
 800bb2e:	2300      	movne	r3, #0
 800bb30:	eba6 0807 	sub.w	r8, r6, r7
 800bb34:	608b      	str	r3, [r1, #8]
 800bb36:	f1b8 0f00 	cmp.w	r8, #0
 800bb3a:	dd9c      	ble.n	800ba76 <__sflush_r+0x1a>
 800bb3c:	6a21      	ldr	r1, [r4, #32]
 800bb3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb40:	4643      	mov	r3, r8
 800bb42:	463a      	mov	r2, r7
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b0      	blx	r6
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	dc06      	bgt.n	800bb5a <__sflush_r+0xfe>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295
 800bb58:	e78e      	b.n	800ba78 <__sflush_r+0x1c>
 800bb5a:	4407      	add	r7, r0
 800bb5c:	eba8 0800 	sub.w	r8, r8, r0
 800bb60:	e7e9      	b.n	800bb36 <__sflush_r+0xda>
 800bb62:	bf00      	nop
 800bb64:	20400001 	.word	0x20400001

0800bb68 <_fflush_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	690b      	ldr	r3, [r1, #16]
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	460c      	mov	r4, r1
 800bb70:	b913      	cbnz	r3, 800bb78 <_fflush_r+0x10>
 800bb72:	2500      	movs	r5, #0
 800bb74:	4628      	mov	r0, r5
 800bb76:	bd38      	pop	{r3, r4, r5, pc}
 800bb78:	b118      	cbz	r0, 800bb82 <_fflush_r+0x1a>
 800bb7a:	6983      	ldr	r3, [r0, #24]
 800bb7c:	b90b      	cbnz	r3, 800bb82 <_fflush_r+0x1a>
 800bb7e:	f000 f8c5 	bl	800bd0c <__sinit>
 800bb82:	4b14      	ldr	r3, [pc, #80]	; (800bbd4 <_fflush_r+0x6c>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	d11b      	bne.n	800bbc0 <_fflush_r+0x58>
 800bb88:	686c      	ldr	r4, [r5, #4]
 800bb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0ef      	beq.n	800bb72 <_fflush_r+0xa>
 800bb92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb94:	07d0      	lsls	r0, r2, #31
 800bb96:	d404      	bmi.n	800bba2 <_fflush_r+0x3a>
 800bb98:	0599      	lsls	r1, r3, #22
 800bb9a:	d402      	bmi.n	800bba2 <_fflush_r+0x3a>
 800bb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb9e:	f000 fcba 	bl	800c516 <__retarget_lock_acquire_recursive>
 800bba2:	4628      	mov	r0, r5
 800bba4:	4621      	mov	r1, r4
 800bba6:	f7ff ff59 	bl	800ba5c <__sflush_r>
 800bbaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbac:	07da      	lsls	r2, r3, #31
 800bbae:	4605      	mov	r5, r0
 800bbb0:	d4e0      	bmi.n	800bb74 <_fflush_r+0xc>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	059b      	lsls	r3, r3, #22
 800bbb6:	d4dd      	bmi.n	800bb74 <_fflush_r+0xc>
 800bbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbba:	f000 fcad 	bl	800c518 <__retarget_lock_release_recursive>
 800bbbe:	e7d9      	b.n	800bb74 <_fflush_r+0xc>
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <_fflush_r+0x70>)
 800bbc2:	429c      	cmp	r4, r3
 800bbc4:	d101      	bne.n	800bbca <_fflush_r+0x62>
 800bbc6:	68ac      	ldr	r4, [r5, #8]
 800bbc8:	e7df      	b.n	800bb8a <_fflush_r+0x22>
 800bbca:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <_fflush_r+0x74>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	bf08      	it	eq
 800bbd0:	68ec      	ldreq	r4, [r5, #12]
 800bbd2:	e7da      	b.n	800bb8a <_fflush_r+0x22>
 800bbd4:	0800e428 	.word	0x0800e428
 800bbd8:	0800e448 	.word	0x0800e448
 800bbdc:	0800e408 	.word	0x0800e408

0800bbe0 <fileno>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4e1a      	ldr	r6, [pc, #104]	; (800bc4c <fileno+0x6c>)
 800bbe4:	6835      	ldr	r5, [r6, #0]
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	b125      	cbz	r5, 800bbf4 <fileno+0x14>
 800bbea:	69ab      	ldr	r3, [r5, #24]
 800bbec:	b913      	cbnz	r3, 800bbf4 <fileno+0x14>
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f88c 	bl	800bd0c <__sinit>
 800bbf4:	4b16      	ldr	r3, [pc, #88]	; (800bc50 <fileno+0x70>)
 800bbf6:	429c      	cmp	r4, r3
 800bbf8:	d118      	bne.n	800bc2c <fileno+0x4c>
 800bbfa:	686c      	ldr	r4, [r5, #4]
 800bbfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbfe:	07d8      	lsls	r0, r3, #31
 800bc00:	d405      	bmi.n	800bc0e <fileno+0x2e>
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	0599      	lsls	r1, r3, #22
 800bc06:	d402      	bmi.n	800bc0e <fileno+0x2e>
 800bc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc0a:	f000 fc84 	bl	800c516 <__retarget_lock_acquire_recursive>
 800bc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc12:	b1ab      	cbz	r3, 800bc40 <fileno+0x60>
 800bc14:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800bc18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc1a:	07d2      	lsls	r2, r2, #31
 800bc1c:	d404      	bmi.n	800bc28 <fileno+0x48>
 800bc1e:	059b      	lsls	r3, r3, #22
 800bc20:	d402      	bmi.n	800bc28 <fileno+0x48>
 800bc22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc24:	f000 fc78 	bl	800c518 <__retarget_lock_release_recursive>
 800bc28:	4628      	mov	r0, r5
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	4b09      	ldr	r3, [pc, #36]	; (800bc54 <fileno+0x74>)
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d101      	bne.n	800bc36 <fileno+0x56>
 800bc32:	68ac      	ldr	r4, [r5, #8]
 800bc34:	e7e2      	b.n	800bbfc <fileno+0x1c>
 800bc36:	4b08      	ldr	r3, [pc, #32]	; (800bc58 <fileno+0x78>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	bf08      	it	eq
 800bc3c:	68ec      	ldreq	r4, [r5, #12]
 800bc3e:	e7dd      	b.n	800bbfc <fileno+0x1c>
 800bc40:	6832      	ldr	r2, [r6, #0]
 800bc42:	2109      	movs	r1, #9
 800bc44:	6011      	str	r1, [r2, #0]
 800bc46:	f04f 35ff 	mov.w	r5, #4294967295
 800bc4a:	e7e5      	b.n	800bc18 <fileno+0x38>
 800bc4c:	2000000c 	.word	0x2000000c
 800bc50:	0800e428 	.word	0x0800e428
 800bc54:	0800e448 	.word	0x0800e448
 800bc58:	0800e408 	.word	0x0800e408

0800bc5c <std>:
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	4604      	mov	r4, r0
 800bc62:	e9c0 3300 	strd	r3, r3, [r0]
 800bc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc6a:	6083      	str	r3, [r0, #8]
 800bc6c:	8181      	strh	r1, [r0, #12]
 800bc6e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc70:	81c2      	strh	r2, [r0, #14]
 800bc72:	6183      	str	r3, [r0, #24]
 800bc74:	4619      	mov	r1, r3
 800bc76:	2208      	movs	r2, #8
 800bc78:	305c      	adds	r0, #92	; 0x5c
 800bc7a:	f7fd f895 	bl	8008da8 <memset>
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <std+0x38>)
 800bc80:	6263      	str	r3, [r4, #36]	; 0x24
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <std+0x3c>)
 800bc84:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <std+0x40>)
 800bc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc8a:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <std+0x44>)
 800bc8c:	6224      	str	r4, [r4, #32]
 800bc8e:	6323      	str	r3, [r4, #48]	; 0x30
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	0800d261 	.word	0x0800d261
 800bc98:	0800d283 	.word	0x0800d283
 800bc9c:	0800d2bb 	.word	0x0800d2bb
 800bca0:	0800d2df 	.word	0x0800d2df

0800bca4 <_cleanup_r>:
 800bca4:	4901      	ldr	r1, [pc, #4]	; (800bcac <_cleanup_r+0x8>)
 800bca6:	f000 b8af 	b.w	800be08 <_fwalk_reent>
 800bcaa:	bf00      	nop
 800bcac:	0800bb69 	.word	0x0800bb69

0800bcb0 <__sfmoreglue>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	1e4a      	subs	r2, r1, #1
 800bcb4:	2568      	movs	r5, #104	; 0x68
 800bcb6:	4355      	muls	r5, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcbe:	f7fd f8c9 	bl	8008e54 <_malloc_r>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b140      	cbz	r0, 800bcd8 <__sfmoreglue+0x28>
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	e9c0 1600 	strd	r1, r6, [r0]
 800bccc:	300c      	adds	r0, #12
 800bcce:	60a0      	str	r0, [r4, #8]
 800bcd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcd4:	f7fd f868 	bl	8008da8 <memset>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	bd70      	pop	{r4, r5, r6, pc}

0800bcdc <__sfp_lock_acquire>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__sfp_lock_acquire+0x8>)
 800bcde:	f000 bc1a 	b.w	800c516 <__retarget_lock_acquire_recursive>
 800bce2:	bf00      	nop
 800bce4:	20000600 	.word	0x20000600

0800bce8 <__sfp_lock_release>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__sfp_lock_release+0x8>)
 800bcea:	f000 bc15 	b.w	800c518 <__retarget_lock_release_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20000600 	.word	0x20000600

0800bcf4 <__sinit_lock_acquire>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__sinit_lock_acquire+0x8>)
 800bcf6:	f000 bc0e 	b.w	800c516 <__retarget_lock_acquire_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	200005fb 	.word	0x200005fb

0800bd00 <__sinit_lock_release>:
 800bd00:	4801      	ldr	r0, [pc, #4]	; (800bd08 <__sinit_lock_release+0x8>)
 800bd02:	f000 bc09 	b.w	800c518 <__retarget_lock_release_recursive>
 800bd06:	bf00      	nop
 800bd08:	200005fb 	.word	0x200005fb

0800bd0c <__sinit>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	f7ff fff0 	bl	800bcf4 <__sinit_lock_acquire>
 800bd14:	69a3      	ldr	r3, [r4, #24]
 800bd16:	b11b      	cbz	r3, 800bd20 <__sinit+0x14>
 800bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1c:	f7ff bff0 	b.w	800bd00 <__sinit_lock_release>
 800bd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd24:	6523      	str	r3, [r4, #80]	; 0x50
 800bd26:	4b13      	ldr	r3, [pc, #76]	; (800bd74 <__sinit+0x68>)
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <__sinit+0x6c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	bf04      	itt	eq
 800bd32:	2301      	moveq	r3, #1
 800bd34:	61a3      	streq	r3, [r4, #24]
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f820 	bl	800bd7c <__sfp>
 800bd3c:	6060      	str	r0, [r4, #4]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 f81c 	bl	800bd7c <__sfp>
 800bd44:	60a0      	str	r0, [r4, #8]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 f818 	bl	800bd7c <__sfp>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	60e0      	str	r0, [r4, #12]
 800bd50:	2104      	movs	r1, #4
 800bd52:	6860      	ldr	r0, [r4, #4]
 800bd54:	f7ff ff82 	bl	800bc5c <std>
 800bd58:	68a0      	ldr	r0, [r4, #8]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	2109      	movs	r1, #9
 800bd5e:	f7ff ff7d 	bl	800bc5c <std>
 800bd62:	68e0      	ldr	r0, [r4, #12]
 800bd64:	2202      	movs	r2, #2
 800bd66:	2112      	movs	r1, #18
 800bd68:	f7ff ff78 	bl	800bc5c <std>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	61a3      	str	r3, [r4, #24]
 800bd70:	e7d2      	b.n	800bd18 <__sinit+0xc>
 800bd72:	bf00      	nop
 800bd74:	0800db50 	.word	0x0800db50
 800bd78:	0800bca5 	.word	0x0800bca5

0800bd7c <__sfp>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	4607      	mov	r7, r0
 800bd80:	f7ff ffac 	bl	800bcdc <__sfp_lock_acquire>
 800bd84:	4b1e      	ldr	r3, [pc, #120]	; (800be00 <__sfp+0x84>)
 800bd86:	681e      	ldr	r6, [r3, #0]
 800bd88:	69b3      	ldr	r3, [r6, #24]
 800bd8a:	b913      	cbnz	r3, 800bd92 <__sfp+0x16>
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ffbd 	bl	800bd0c <__sinit>
 800bd92:	3648      	adds	r6, #72	; 0x48
 800bd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	d503      	bpl.n	800bda4 <__sfp+0x28>
 800bd9c:	6833      	ldr	r3, [r6, #0]
 800bd9e:	b30b      	cbz	r3, 800bde4 <__sfp+0x68>
 800bda0:	6836      	ldr	r6, [r6, #0]
 800bda2:	e7f7      	b.n	800bd94 <__sfp+0x18>
 800bda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bda8:	b9d5      	cbnz	r5, 800bde0 <__sfp+0x64>
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <__sfp+0x88>)
 800bdac:	60e3      	str	r3, [r4, #12]
 800bdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdb2:	6665      	str	r5, [r4, #100]	; 0x64
 800bdb4:	f000 fbae 	bl	800c514 <__retarget_lock_init_recursive>
 800bdb8:	f7ff ff96 	bl	800bce8 <__sfp_lock_release>
 800bdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdc4:	6025      	str	r5, [r4, #0]
 800bdc6:	61a5      	str	r5, [r4, #24]
 800bdc8:	2208      	movs	r2, #8
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdd0:	f7fc ffea 	bl	8008da8 <memset>
 800bdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bddc:	4620      	mov	r0, r4
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	3468      	adds	r4, #104	; 0x68
 800bde2:	e7d9      	b.n	800bd98 <__sfp+0x1c>
 800bde4:	2104      	movs	r1, #4
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ff62 	bl	800bcb0 <__sfmoreglue>
 800bdec:	4604      	mov	r4, r0
 800bdee:	6030      	str	r0, [r6, #0]
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d1d5      	bne.n	800bda0 <__sfp+0x24>
 800bdf4:	f7ff ff78 	bl	800bce8 <__sfp_lock_release>
 800bdf8:	230c      	movs	r3, #12
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	e7ee      	b.n	800bddc <__sfp+0x60>
 800bdfe:	bf00      	nop
 800be00:	0800db50 	.word	0x0800db50
 800be04:	ffff0001 	.word	0xffff0001

0800be08 <_fwalk_reent>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4606      	mov	r6, r0
 800be0e:	4688      	mov	r8, r1
 800be10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be14:	2700      	movs	r7, #0
 800be16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be1a:	f1b9 0901 	subs.w	r9, r9, #1
 800be1e:	d505      	bpl.n	800be2c <_fwalk_reent+0x24>
 800be20:	6824      	ldr	r4, [r4, #0]
 800be22:	2c00      	cmp	r4, #0
 800be24:	d1f7      	bne.n	800be16 <_fwalk_reent+0xe>
 800be26:	4638      	mov	r0, r7
 800be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2c:	89ab      	ldrh	r3, [r5, #12]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d907      	bls.n	800be42 <_fwalk_reent+0x3a>
 800be32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be36:	3301      	adds	r3, #1
 800be38:	d003      	beq.n	800be42 <_fwalk_reent+0x3a>
 800be3a:	4629      	mov	r1, r5
 800be3c:	4630      	mov	r0, r6
 800be3e:	47c0      	blx	r8
 800be40:	4307      	orrs	r7, r0
 800be42:	3568      	adds	r5, #104	; 0x68
 800be44:	e7e9      	b.n	800be1a <_fwalk_reent+0x12>

0800be46 <rshift>:
 800be46:	6903      	ldr	r3, [r0, #16]
 800be48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be54:	f100 0414 	add.w	r4, r0, #20
 800be58:	dd45      	ble.n	800bee6 <rshift+0xa0>
 800be5a:	f011 011f 	ands.w	r1, r1, #31
 800be5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be66:	d10c      	bne.n	800be82 <rshift+0x3c>
 800be68:	f100 0710 	add.w	r7, r0, #16
 800be6c:	4629      	mov	r1, r5
 800be6e:	42b1      	cmp	r1, r6
 800be70:	d334      	bcc.n	800bedc <rshift+0x96>
 800be72:	1a9b      	subs	r3, r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	1eea      	subs	r2, r5, #3
 800be78:	4296      	cmp	r6, r2
 800be7a:	bf38      	it	cc
 800be7c:	2300      	movcc	r3, #0
 800be7e:	4423      	add	r3, r4
 800be80:	e015      	b.n	800beae <rshift+0x68>
 800be82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be86:	f1c1 0820 	rsb	r8, r1, #32
 800be8a:	40cf      	lsrs	r7, r1
 800be8c:	f105 0e04 	add.w	lr, r5, #4
 800be90:	46a1      	mov	r9, r4
 800be92:	4576      	cmp	r6, lr
 800be94:	46f4      	mov	ip, lr
 800be96:	d815      	bhi.n	800bec4 <rshift+0x7e>
 800be98:	1a9b      	subs	r3, r3, r2
 800be9a:	009a      	lsls	r2, r3, #2
 800be9c:	3a04      	subs	r2, #4
 800be9e:	3501      	adds	r5, #1
 800bea0:	42ae      	cmp	r6, r5
 800bea2:	bf38      	it	cc
 800bea4:	2200      	movcc	r2, #0
 800bea6:	18a3      	adds	r3, r4, r2
 800bea8:	50a7      	str	r7, [r4, r2]
 800beaa:	b107      	cbz	r7, 800beae <rshift+0x68>
 800beac:	3304      	adds	r3, #4
 800beae:	1b1a      	subs	r2, r3, r4
 800beb0:	42a3      	cmp	r3, r4
 800beb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800beb6:	bf08      	it	eq
 800beb8:	2300      	moveq	r3, #0
 800beba:	6102      	str	r2, [r0, #16]
 800bebc:	bf08      	it	eq
 800bebe:	6143      	streq	r3, [r0, #20]
 800bec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bec4:	f8dc c000 	ldr.w	ip, [ip]
 800bec8:	fa0c fc08 	lsl.w	ip, ip, r8
 800becc:	ea4c 0707 	orr.w	r7, ip, r7
 800bed0:	f849 7b04 	str.w	r7, [r9], #4
 800bed4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bed8:	40cf      	lsrs	r7, r1
 800beda:	e7da      	b.n	800be92 <rshift+0x4c>
 800bedc:	f851 cb04 	ldr.w	ip, [r1], #4
 800bee0:	f847 cf04 	str.w	ip, [r7, #4]!
 800bee4:	e7c3      	b.n	800be6e <rshift+0x28>
 800bee6:	4623      	mov	r3, r4
 800bee8:	e7e1      	b.n	800beae <rshift+0x68>

0800beea <__hexdig_fun>:
 800beea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800beee:	2b09      	cmp	r3, #9
 800bef0:	d802      	bhi.n	800bef8 <__hexdig_fun+0xe>
 800bef2:	3820      	subs	r0, #32
 800bef4:	b2c0      	uxtb	r0, r0
 800bef6:	4770      	bx	lr
 800bef8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800befc:	2b05      	cmp	r3, #5
 800befe:	d801      	bhi.n	800bf04 <__hexdig_fun+0x1a>
 800bf00:	3847      	subs	r0, #71	; 0x47
 800bf02:	e7f7      	b.n	800bef4 <__hexdig_fun+0xa>
 800bf04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bf08:	2b05      	cmp	r3, #5
 800bf0a:	d801      	bhi.n	800bf10 <__hexdig_fun+0x26>
 800bf0c:	3827      	subs	r0, #39	; 0x27
 800bf0e:	e7f1      	b.n	800bef4 <__hexdig_fun+0xa>
 800bf10:	2000      	movs	r0, #0
 800bf12:	4770      	bx	lr

0800bf14 <__gethex>:
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	b08b      	sub	sp, #44	; 0x2c
 800bf1a:	468b      	mov	fp, r1
 800bf1c:	9306      	str	r3, [sp, #24]
 800bf1e:	4bb9      	ldr	r3, [pc, #740]	; (800c204 <__gethex+0x2f0>)
 800bf20:	9002      	str	r0, [sp, #8]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	9303      	str	r3, [sp, #12]
 800bf26:	4618      	mov	r0, r3
 800bf28:	4690      	mov	r8, r2
 800bf2a:	f7f4 f933 	bl	8000194 <strlen>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	f8db 2000 	ldr.w	r2, [fp]
 800bf34:	4403      	add	r3, r0
 800bf36:	4682      	mov	sl, r0
 800bf38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bf3c:	9307      	str	r3, [sp, #28]
 800bf3e:	1c93      	adds	r3, r2, #2
 800bf40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf48:	32fe      	adds	r2, #254	; 0xfe
 800bf4a:	18d1      	adds	r1, r2, r3
 800bf4c:	461f      	mov	r7, r3
 800bf4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf52:	9101      	str	r1, [sp, #4]
 800bf54:	2830      	cmp	r0, #48	; 0x30
 800bf56:	d0f8      	beq.n	800bf4a <__gethex+0x36>
 800bf58:	f7ff ffc7 	bl	800beea <__hexdig_fun>
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d13a      	bne.n	800bfd8 <__gethex+0xc4>
 800bf62:	9903      	ldr	r1, [sp, #12]
 800bf64:	4652      	mov	r2, sl
 800bf66:	4638      	mov	r0, r7
 800bf68:	f7fd ff50 	bl	8009e0c <strncmp>
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d166      	bne.n	800c040 <__gethex+0x12c>
 800bf72:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bf76:	eb07 060a 	add.w	r6, r7, sl
 800bf7a:	f7ff ffb6 	bl	800beea <__hexdig_fun>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d060      	beq.n	800c044 <__gethex+0x130>
 800bf82:	4633      	mov	r3, r6
 800bf84:	7818      	ldrb	r0, [r3, #0]
 800bf86:	2830      	cmp	r0, #48	; 0x30
 800bf88:	461f      	mov	r7, r3
 800bf8a:	f103 0301 	add.w	r3, r3, #1
 800bf8e:	d0f9      	beq.n	800bf84 <__gethex+0x70>
 800bf90:	f7ff ffab 	bl	800beea <__hexdig_fun>
 800bf94:	2301      	movs	r3, #1
 800bf96:	fab0 f480 	clz	r4, r0
 800bf9a:	0964      	lsrs	r4, r4, #5
 800bf9c:	4635      	mov	r5, r6
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	463a      	mov	r2, r7
 800bfa2:	4616      	mov	r6, r2
 800bfa4:	3201      	adds	r2, #1
 800bfa6:	7830      	ldrb	r0, [r6, #0]
 800bfa8:	f7ff ff9f 	bl	800beea <__hexdig_fun>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d1f8      	bne.n	800bfa2 <__gethex+0x8e>
 800bfb0:	9903      	ldr	r1, [sp, #12]
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7fd ff29 	bl	8009e0c <strncmp>
 800bfba:	b980      	cbnz	r0, 800bfde <__gethex+0xca>
 800bfbc:	b94d      	cbnz	r5, 800bfd2 <__gethex+0xbe>
 800bfbe:	eb06 050a 	add.w	r5, r6, sl
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	3201      	adds	r2, #1
 800bfc8:	7830      	ldrb	r0, [r6, #0]
 800bfca:	f7ff ff8e 	bl	800beea <__hexdig_fun>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1f8      	bne.n	800bfc4 <__gethex+0xb0>
 800bfd2:	1bad      	subs	r5, r5, r6
 800bfd4:	00ad      	lsls	r5, r5, #2
 800bfd6:	e004      	b.n	800bfe2 <__gethex+0xce>
 800bfd8:	2400      	movs	r4, #0
 800bfda:	4625      	mov	r5, r4
 800bfdc:	e7e0      	b.n	800bfa0 <__gethex+0x8c>
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	d1f7      	bne.n	800bfd2 <__gethex+0xbe>
 800bfe2:	7833      	ldrb	r3, [r6, #0]
 800bfe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bfe8:	2b50      	cmp	r3, #80	; 0x50
 800bfea:	d139      	bne.n	800c060 <__gethex+0x14c>
 800bfec:	7873      	ldrb	r3, [r6, #1]
 800bfee:	2b2b      	cmp	r3, #43	; 0x2b
 800bff0:	d02a      	beq.n	800c048 <__gethex+0x134>
 800bff2:	2b2d      	cmp	r3, #45	; 0x2d
 800bff4:	d02c      	beq.n	800c050 <__gethex+0x13c>
 800bff6:	1c71      	adds	r1, r6, #1
 800bff8:	f04f 0900 	mov.w	r9, #0
 800bffc:	7808      	ldrb	r0, [r1, #0]
 800bffe:	f7ff ff74 	bl	800beea <__hexdig_fun>
 800c002:	1e43      	subs	r3, r0, #1
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b18      	cmp	r3, #24
 800c008:	d82a      	bhi.n	800c060 <__gethex+0x14c>
 800c00a:	f1a0 0210 	sub.w	r2, r0, #16
 800c00e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c012:	f7ff ff6a 	bl	800beea <__hexdig_fun>
 800c016:	1e43      	subs	r3, r0, #1
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b18      	cmp	r3, #24
 800c01c:	d91b      	bls.n	800c056 <__gethex+0x142>
 800c01e:	f1b9 0f00 	cmp.w	r9, #0
 800c022:	d000      	beq.n	800c026 <__gethex+0x112>
 800c024:	4252      	negs	r2, r2
 800c026:	4415      	add	r5, r2
 800c028:	f8cb 1000 	str.w	r1, [fp]
 800c02c:	b1d4      	cbz	r4, 800c064 <__gethex+0x150>
 800c02e:	9b01      	ldr	r3, [sp, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	bf14      	ite	ne
 800c034:	2700      	movne	r7, #0
 800c036:	2706      	moveq	r7, #6
 800c038:	4638      	mov	r0, r7
 800c03a:	b00b      	add	sp, #44	; 0x2c
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	463e      	mov	r6, r7
 800c042:	4625      	mov	r5, r4
 800c044:	2401      	movs	r4, #1
 800c046:	e7cc      	b.n	800bfe2 <__gethex+0xce>
 800c048:	f04f 0900 	mov.w	r9, #0
 800c04c:	1cb1      	adds	r1, r6, #2
 800c04e:	e7d5      	b.n	800bffc <__gethex+0xe8>
 800c050:	f04f 0901 	mov.w	r9, #1
 800c054:	e7fa      	b.n	800c04c <__gethex+0x138>
 800c056:	230a      	movs	r3, #10
 800c058:	fb03 0202 	mla	r2, r3, r2, r0
 800c05c:	3a10      	subs	r2, #16
 800c05e:	e7d6      	b.n	800c00e <__gethex+0xfa>
 800c060:	4631      	mov	r1, r6
 800c062:	e7e1      	b.n	800c028 <__gethex+0x114>
 800c064:	1bf3      	subs	r3, r6, r7
 800c066:	3b01      	subs	r3, #1
 800c068:	4621      	mov	r1, r4
 800c06a:	2b07      	cmp	r3, #7
 800c06c:	dc0a      	bgt.n	800c084 <__gethex+0x170>
 800c06e:	9802      	ldr	r0, [sp, #8]
 800c070:	f000 fad6 	bl	800c620 <_Balloc>
 800c074:	4604      	mov	r4, r0
 800c076:	b940      	cbnz	r0, 800c08a <__gethex+0x176>
 800c078:	4b63      	ldr	r3, [pc, #396]	; (800c208 <__gethex+0x2f4>)
 800c07a:	4602      	mov	r2, r0
 800c07c:	21de      	movs	r1, #222	; 0xde
 800c07e:	4863      	ldr	r0, [pc, #396]	; (800c20c <__gethex+0x2f8>)
 800c080:	f001 f93e 	bl	800d300 <__assert_func>
 800c084:	3101      	adds	r1, #1
 800c086:	105b      	asrs	r3, r3, #1
 800c088:	e7ef      	b.n	800c06a <__gethex+0x156>
 800c08a:	f100 0914 	add.w	r9, r0, #20
 800c08e:	f04f 0b00 	mov.w	fp, #0
 800c092:	f1ca 0301 	rsb	r3, sl, #1
 800c096:	f8cd 9010 	str.w	r9, [sp, #16]
 800c09a:	f8cd b004 	str.w	fp, [sp, #4]
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	42b7      	cmp	r7, r6
 800c0a2:	d33f      	bcc.n	800c124 <__gethex+0x210>
 800c0a4:	9f04      	ldr	r7, [sp, #16]
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	f847 3b04 	str.w	r3, [r7], #4
 800c0ac:	eba7 0709 	sub.w	r7, r7, r9
 800c0b0:	10bf      	asrs	r7, r7, #2
 800c0b2:	6127      	str	r7, [r4, #16]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fba9 	bl	800c80c <__hi0bits>
 800c0ba:	017f      	lsls	r7, r7, #5
 800c0bc:	f8d8 6000 	ldr.w	r6, [r8]
 800c0c0:	1a3f      	subs	r7, r7, r0
 800c0c2:	42b7      	cmp	r7, r6
 800c0c4:	dd62      	ble.n	800c18c <__gethex+0x278>
 800c0c6:	1bbf      	subs	r7, r7, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 ff3b 	bl	800cf46 <__any_on>
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	b1a8      	cbz	r0, 800c100 <__gethex+0x1ec>
 800c0d4:	1e7b      	subs	r3, r7, #1
 800c0d6:	1159      	asrs	r1, r3, #5
 800c0d8:	f003 021f 	and.w	r2, r3, #31
 800c0dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c0e0:	f04f 0a01 	mov.w	sl, #1
 800c0e4:	fa0a f202 	lsl.w	r2, sl, r2
 800c0e8:	420a      	tst	r2, r1
 800c0ea:	d009      	beq.n	800c100 <__gethex+0x1ec>
 800c0ec:	4553      	cmp	r3, sl
 800c0ee:	dd05      	ble.n	800c0fc <__gethex+0x1e8>
 800c0f0:	1eb9      	subs	r1, r7, #2
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 ff27 	bl	800cf46 <__any_on>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d144      	bne.n	800c186 <__gethex+0x272>
 800c0fc:	f04f 0a02 	mov.w	sl, #2
 800c100:	4639      	mov	r1, r7
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff fe9f 	bl	800be46 <rshift>
 800c108:	443d      	add	r5, r7
 800c10a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c10e:	42ab      	cmp	r3, r5
 800c110:	da4a      	bge.n	800c1a8 <__gethex+0x294>
 800c112:	9802      	ldr	r0, [sp, #8]
 800c114:	4621      	mov	r1, r4
 800c116:	f000 fac3 	bl	800c6a0 <_Bfree>
 800c11a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c11c:	2300      	movs	r3, #0
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	27a3      	movs	r7, #163	; 0xa3
 800c122:	e789      	b.n	800c038 <__gethex+0x124>
 800c124:	1e73      	subs	r3, r6, #1
 800c126:	9a07      	ldr	r2, [sp, #28]
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c12e:	4293      	cmp	r3, r2
 800c130:	d019      	beq.n	800c166 <__gethex+0x252>
 800c132:	f1bb 0f20 	cmp.w	fp, #32
 800c136:	d107      	bne.n	800c148 <__gethex+0x234>
 800c138:	9b04      	ldr	r3, [sp, #16]
 800c13a:	9a01      	ldr	r2, [sp, #4]
 800c13c:	f843 2b04 	str.w	r2, [r3], #4
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	2300      	movs	r3, #0
 800c144:	9301      	str	r3, [sp, #4]
 800c146:	469b      	mov	fp, r3
 800c148:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c14c:	f7ff fecd 	bl	800beea <__hexdig_fun>
 800c150:	9b01      	ldr	r3, [sp, #4]
 800c152:	f000 000f 	and.w	r0, r0, #15
 800c156:	fa00 f00b 	lsl.w	r0, r0, fp
 800c15a:	4303      	orrs	r3, r0
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	f10b 0b04 	add.w	fp, fp, #4
 800c162:	9b05      	ldr	r3, [sp, #20]
 800c164:	e00d      	b.n	800c182 <__gethex+0x26e>
 800c166:	9b05      	ldr	r3, [sp, #20]
 800c168:	9a08      	ldr	r2, [sp, #32]
 800c16a:	4413      	add	r3, r2
 800c16c:	42bb      	cmp	r3, r7
 800c16e:	d3e0      	bcc.n	800c132 <__gethex+0x21e>
 800c170:	4618      	mov	r0, r3
 800c172:	9903      	ldr	r1, [sp, #12]
 800c174:	9309      	str	r3, [sp, #36]	; 0x24
 800c176:	4652      	mov	r2, sl
 800c178:	f7fd fe48 	bl	8009e0c <strncmp>
 800c17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17e:	2800      	cmp	r0, #0
 800c180:	d1d7      	bne.n	800c132 <__gethex+0x21e>
 800c182:	461e      	mov	r6, r3
 800c184:	e78c      	b.n	800c0a0 <__gethex+0x18c>
 800c186:	f04f 0a03 	mov.w	sl, #3
 800c18a:	e7b9      	b.n	800c100 <__gethex+0x1ec>
 800c18c:	da09      	bge.n	800c1a2 <__gethex+0x28e>
 800c18e:	1bf7      	subs	r7, r6, r7
 800c190:	4621      	mov	r1, r4
 800c192:	9802      	ldr	r0, [sp, #8]
 800c194:	463a      	mov	r2, r7
 800c196:	f000 fc9d 	bl	800cad4 <__lshift>
 800c19a:	1bed      	subs	r5, r5, r7
 800c19c:	4604      	mov	r4, r0
 800c19e:	f100 0914 	add.w	r9, r0, #20
 800c1a2:	f04f 0a00 	mov.w	sl, #0
 800c1a6:	e7b0      	b.n	800c10a <__gethex+0x1f6>
 800c1a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c1ac:	42a8      	cmp	r0, r5
 800c1ae:	dd70      	ble.n	800c292 <__gethex+0x37e>
 800c1b0:	1b45      	subs	r5, r0, r5
 800c1b2:	42ae      	cmp	r6, r5
 800c1b4:	dc34      	bgt.n	800c220 <__gethex+0x30c>
 800c1b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d028      	beq.n	800c210 <__gethex+0x2fc>
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d02a      	beq.n	800c218 <__gethex+0x304>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d115      	bne.n	800c1f2 <__gethex+0x2de>
 800c1c6:	42ae      	cmp	r6, r5
 800c1c8:	d113      	bne.n	800c1f2 <__gethex+0x2de>
 800c1ca:	2e01      	cmp	r6, #1
 800c1cc:	d10b      	bne.n	800c1e6 <__gethex+0x2d2>
 800c1ce:	9a06      	ldr	r2, [sp, #24]
 800c1d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	f8c9 3000 	str.w	r3, [r9]
 800c1de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1e0:	2762      	movs	r7, #98	; 0x62
 800c1e2:	601c      	str	r4, [r3, #0]
 800c1e4:	e728      	b.n	800c038 <__gethex+0x124>
 800c1e6:	1e71      	subs	r1, r6, #1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 feac 	bl	800cf46 <__any_on>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d1ed      	bne.n	800c1ce <__gethex+0x2ba>
 800c1f2:	9802      	ldr	r0, [sp, #8]
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	f000 fa53 	bl	800c6a0 <_Bfree>
 800c1fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	2750      	movs	r7, #80	; 0x50
 800c202:	e719      	b.n	800c038 <__gethex+0x124>
 800c204:	0800e4d4 	.word	0x0800e4d4
 800c208:	0800e3f4 	.word	0x0800e3f4
 800c20c:	0800e468 	.word	0x0800e468
 800c210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1ed      	bne.n	800c1f2 <__gethex+0x2de>
 800c216:	e7da      	b.n	800c1ce <__gethex+0x2ba>
 800c218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1d7      	bne.n	800c1ce <__gethex+0x2ba>
 800c21e:	e7e8      	b.n	800c1f2 <__gethex+0x2de>
 800c220:	1e6f      	subs	r7, r5, #1
 800c222:	f1ba 0f00 	cmp.w	sl, #0
 800c226:	d131      	bne.n	800c28c <__gethex+0x378>
 800c228:	b127      	cbz	r7, 800c234 <__gethex+0x320>
 800c22a:	4639      	mov	r1, r7
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 fe8a 	bl	800cf46 <__any_on>
 800c232:	4682      	mov	sl, r0
 800c234:	117b      	asrs	r3, r7, #5
 800c236:	2101      	movs	r1, #1
 800c238:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c23c:	f007 071f 	and.w	r7, r7, #31
 800c240:	fa01 f707 	lsl.w	r7, r1, r7
 800c244:	421f      	tst	r7, r3
 800c246:	4629      	mov	r1, r5
 800c248:	4620      	mov	r0, r4
 800c24a:	bf18      	it	ne
 800c24c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c250:	1b76      	subs	r6, r6, r5
 800c252:	f7ff fdf8 	bl	800be46 <rshift>
 800c256:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c25a:	2702      	movs	r7, #2
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	d048      	beq.n	800c2f4 <__gethex+0x3e0>
 800c262:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d015      	beq.n	800c296 <__gethex+0x382>
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d017      	beq.n	800c29e <__gethex+0x38a>
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d109      	bne.n	800c286 <__gethex+0x372>
 800c272:	f01a 0f02 	tst.w	sl, #2
 800c276:	d006      	beq.n	800c286 <__gethex+0x372>
 800c278:	f8d9 0000 	ldr.w	r0, [r9]
 800c27c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c280:	f01a 0f01 	tst.w	sl, #1
 800c284:	d10e      	bne.n	800c2a4 <__gethex+0x390>
 800c286:	f047 0710 	orr.w	r7, r7, #16
 800c28a:	e033      	b.n	800c2f4 <__gethex+0x3e0>
 800c28c:	f04f 0a01 	mov.w	sl, #1
 800c290:	e7d0      	b.n	800c234 <__gethex+0x320>
 800c292:	2701      	movs	r7, #1
 800c294:	e7e2      	b.n	800c25c <__gethex+0x348>
 800c296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c298:	f1c3 0301 	rsb	r3, r3, #1
 800c29c:	9315      	str	r3, [sp, #84]	; 0x54
 800c29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0f0      	beq.n	800c286 <__gethex+0x372>
 800c2a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2a8:	f104 0314 	add.w	r3, r4, #20
 800c2ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c2b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c2b4:	f04f 0c00 	mov.w	ip, #0
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c2c2:	d01c      	beq.n	800c2fe <__gethex+0x3ea>
 800c2c4:	3201      	adds	r2, #1
 800c2c6:	6002      	str	r2, [r0, #0]
 800c2c8:	2f02      	cmp	r7, #2
 800c2ca:	f104 0314 	add.w	r3, r4, #20
 800c2ce:	d13d      	bne.n	800c34c <__gethex+0x438>
 800c2d0:	f8d8 2000 	ldr.w	r2, [r8]
 800c2d4:	3a01      	subs	r2, #1
 800c2d6:	42b2      	cmp	r2, r6
 800c2d8:	d10a      	bne.n	800c2f0 <__gethex+0x3dc>
 800c2da:	1171      	asrs	r1, r6, #5
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2e2:	f006 061f 	and.w	r6, r6, #31
 800c2e6:	fa02 f606 	lsl.w	r6, r2, r6
 800c2ea:	421e      	tst	r6, r3
 800c2ec:	bf18      	it	ne
 800c2ee:	4617      	movne	r7, r2
 800c2f0:	f047 0720 	orr.w	r7, r7, #32
 800c2f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2f6:	601c      	str	r4, [r3, #0]
 800c2f8:	9b06      	ldr	r3, [sp, #24]
 800c2fa:	601d      	str	r5, [r3, #0]
 800c2fc:	e69c      	b.n	800c038 <__gethex+0x124>
 800c2fe:	4299      	cmp	r1, r3
 800c300:	f843 cc04 	str.w	ip, [r3, #-4]
 800c304:	d8d8      	bhi.n	800c2b8 <__gethex+0x3a4>
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	459b      	cmp	fp, r3
 800c30a:	db17      	blt.n	800c33c <__gethex+0x428>
 800c30c:	6861      	ldr	r1, [r4, #4]
 800c30e:	9802      	ldr	r0, [sp, #8]
 800c310:	3101      	adds	r1, #1
 800c312:	f000 f985 	bl	800c620 <_Balloc>
 800c316:	4681      	mov	r9, r0
 800c318:	b918      	cbnz	r0, 800c322 <__gethex+0x40e>
 800c31a:	4b1a      	ldr	r3, [pc, #104]	; (800c384 <__gethex+0x470>)
 800c31c:	4602      	mov	r2, r0
 800c31e:	2184      	movs	r1, #132	; 0x84
 800c320:	e6ad      	b.n	800c07e <__gethex+0x16a>
 800c322:	6922      	ldr	r2, [r4, #16]
 800c324:	3202      	adds	r2, #2
 800c326:	f104 010c 	add.w	r1, r4, #12
 800c32a:	0092      	lsls	r2, r2, #2
 800c32c:	300c      	adds	r0, #12
 800c32e:	f7fc fd2d 	bl	8008d8c <memcpy>
 800c332:	4621      	mov	r1, r4
 800c334:	9802      	ldr	r0, [sp, #8]
 800c336:	f000 f9b3 	bl	800c6a0 <_Bfree>
 800c33a:	464c      	mov	r4, r9
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c344:	6122      	str	r2, [r4, #16]
 800c346:	2201      	movs	r2, #1
 800c348:	615a      	str	r2, [r3, #20]
 800c34a:	e7bd      	b.n	800c2c8 <__gethex+0x3b4>
 800c34c:	6922      	ldr	r2, [r4, #16]
 800c34e:	455a      	cmp	r2, fp
 800c350:	dd0b      	ble.n	800c36a <__gethex+0x456>
 800c352:	2101      	movs	r1, #1
 800c354:	4620      	mov	r0, r4
 800c356:	f7ff fd76 	bl	800be46 <rshift>
 800c35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c35e:	3501      	adds	r5, #1
 800c360:	42ab      	cmp	r3, r5
 800c362:	f6ff aed6 	blt.w	800c112 <__gethex+0x1fe>
 800c366:	2701      	movs	r7, #1
 800c368:	e7c2      	b.n	800c2f0 <__gethex+0x3dc>
 800c36a:	f016 061f 	ands.w	r6, r6, #31
 800c36e:	d0fa      	beq.n	800c366 <__gethex+0x452>
 800c370:	449a      	add	sl, r3
 800c372:	f1c6 0620 	rsb	r6, r6, #32
 800c376:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c37a:	f000 fa47 	bl	800c80c <__hi0bits>
 800c37e:	42b0      	cmp	r0, r6
 800c380:	dbe7      	blt.n	800c352 <__gethex+0x43e>
 800c382:	e7f0      	b.n	800c366 <__gethex+0x452>
 800c384:	0800e3f4 	.word	0x0800e3f4

0800c388 <L_shift>:
 800c388:	f1c2 0208 	rsb	r2, r2, #8
 800c38c:	0092      	lsls	r2, r2, #2
 800c38e:	b570      	push	{r4, r5, r6, lr}
 800c390:	f1c2 0620 	rsb	r6, r2, #32
 800c394:	6843      	ldr	r3, [r0, #4]
 800c396:	6804      	ldr	r4, [r0, #0]
 800c398:	fa03 f506 	lsl.w	r5, r3, r6
 800c39c:	432c      	orrs	r4, r5
 800c39e:	40d3      	lsrs	r3, r2
 800c3a0:	6004      	str	r4, [r0, #0]
 800c3a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3a6:	4288      	cmp	r0, r1
 800c3a8:	d3f4      	bcc.n	800c394 <L_shift+0xc>
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}

0800c3ac <__match>:
 800c3ac:	b530      	push	{r4, r5, lr}
 800c3ae:	6803      	ldr	r3, [r0, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b6:	b914      	cbnz	r4, 800c3be <__match+0x12>
 800c3b8:	6003      	str	r3, [r0, #0]
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	bd30      	pop	{r4, r5, pc}
 800c3be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c3c6:	2d19      	cmp	r5, #25
 800c3c8:	bf98      	it	ls
 800c3ca:	3220      	addls	r2, #32
 800c3cc:	42a2      	cmp	r2, r4
 800c3ce:	d0f0      	beq.n	800c3b2 <__match+0x6>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e7f3      	b.n	800c3bc <__match+0x10>

0800c3d4 <__hexnan>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	680b      	ldr	r3, [r1, #0]
 800c3da:	6801      	ldr	r1, [r0, #0]
 800c3dc:	115e      	asrs	r6, r3, #5
 800c3de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3e2:	f013 031f 	ands.w	r3, r3, #31
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	bf18      	it	ne
 800c3ea:	3604      	addne	r6, #4
 800c3ec:	2500      	movs	r5, #0
 800c3ee:	1f37      	subs	r7, r6, #4
 800c3f0:	4682      	mov	sl, r0
 800c3f2:	4690      	mov	r8, r2
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3fa:	46b9      	mov	r9, r7
 800c3fc:	463c      	mov	r4, r7
 800c3fe:	9502      	str	r5, [sp, #8]
 800c400:	46ab      	mov	fp, r5
 800c402:	784a      	ldrb	r2, [r1, #1]
 800c404:	1c4b      	adds	r3, r1, #1
 800c406:	9303      	str	r3, [sp, #12]
 800c408:	b342      	cbz	r2, 800c45c <__hexnan+0x88>
 800c40a:	4610      	mov	r0, r2
 800c40c:	9105      	str	r1, [sp, #20]
 800c40e:	9204      	str	r2, [sp, #16]
 800c410:	f7ff fd6b 	bl	800beea <__hexdig_fun>
 800c414:	2800      	cmp	r0, #0
 800c416:	d14f      	bne.n	800c4b8 <__hexnan+0xe4>
 800c418:	9a04      	ldr	r2, [sp, #16]
 800c41a:	9905      	ldr	r1, [sp, #20]
 800c41c:	2a20      	cmp	r2, #32
 800c41e:	d818      	bhi.n	800c452 <__hexnan+0x7e>
 800c420:	9b02      	ldr	r3, [sp, #8]
 800c422:	459b      	cmp	fp, r3
 800c424:	dd13      	ble.n	800c44e <__hexnan+0x7a>
 800c426:	454c      	cmp	r4, r9
 800c428:	d206      	bcs.n	800c438 <__hexnan+0x64>
 800c42a:	2d07      	cmp	r5, #7
 800c42c:	dc04      	bgt.n	800c438 <__hexnan+0x64>
 800c42e:	462a      	mov	r2, r5
 800c430:	4649      	mov	r1, r9
 800c432:	4620      	mov	r0, r4
 800c434:	f7ff ffa8 	bl	800c388 <L_shift>
 800c438:	4544      	cmp	r4, r8
 800c43a:	d950      	bls.n	800c4de <__hexnan+0x10a>
 800c43c:	2300      	movs	r3, #0
 800c43e:	f1a4 0904 	sub.w	r9, r4, #4
 800c442:	f844 3c04 	str.w	r3, [r4, #-4]
 800c446:	f8cd b008 	str.w	fp, [sp, #8]
 800c44a:	464c      	mov	r4, r9
 800c44c:	461d      	mov	r5, r3
 800c44e:	9903      	ldr	r1, [sp, #12]
 800c450:	e7d7      	b.n	800c402 <__hexnan+0x2e>
 800c452:	2a29      	cmp	r2, #41	; 0x29
 800c454:	d156      	bne.n	800c504 <__hexnan+0x130>
 800c456:	3102      	adds	r1, #2
 800c458:	f8ca 1000 	str.w	r1, [sl]
 800c45c:	f1bb 0f00 	cmp.w	fp, #0
 800c460:	d050      	beq.n	800c504 <__hexnan+0x130>
 800c462:	454c      	cmp	r4, r9
 800c464:	d206      	bcs.n	800c474 <__hexnan+0xa0>
 800c466:	2d07      	cmp	r5, #7
 800c468:	dc04      	bgt.n	800c474 <__hexnan+0xa0>
 800c46a:	462a      	mov	r2, r5
 800c46c:	4649      	mov	r1, r9
 800c46e:	4620      	mov	r0, r4
 800c470:	f7ff ff8a 	bl	800c388 <L_shift>
 800c474:	4544      	cmp	r4, r8
 800c476:	d934      	bls.n	800c4e2 <__hexnan+0x10e>
 800c478:	f1a8 0204 	sub.w	r2, r8, #4
 800c47c:	4623      	mov	r3, r4
 800c47e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c482:	f842 1f04 	str.w	r1, [r2, #4]!
 800c486:	429f      	cmp	r7, r3
 800c488:	d2f9      	bcs.n	800c47e <__hexnan+0xaa>
 800c48a:	1b3b      	subs	r3, r7, r4
 800c48c:	f023 0303 	bic.w	r3, r3, #3
 800c490:	3304      	adds	r3, #4
 800c492:	3401      	adds	r4, #1
 800c494:	3e03      	subs	r6, #3
 800c496:	42b4      	cmp	r4, r6
 800c498:	bf88      	it	hi
 800c49a:	2304      	movhi	r3, #4
 800c49c:	4443      	add	r3, r8
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f843 2b04 	str.w	r2, [r3], #4
 800c4a4:	429f      	cmp	r7, r3
 800c4a6:	d2fb      	bcs.n	800c4a0 <__hexnan+0xcc>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	b91b      	cbnz	r3, 800c4b4 <__hexnan+0xe0>
 800c4ac:	4547      	cmp	r7, r8
 800c4ae:	d127      	bne.n	800c500 <__hexnan+0x12c>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	2005      	movs	r0, #5
 800c4b6:	e026      	b.n	800c506 <__hexnan+0x132>
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	2d08      	cmp	r5, #8
 800c4bc:	f10b 0b01 	add.w	fp, fp, #1
 800c4c0:	dd06      	ble.n	800c4d0 <__hexnan+0xfc>
 800c4c2:	4544      	cmp	r4, r8
 800c4c4:	d9c3      	bls.n	800c44e <__hexnan+0x7a>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4cc:	2501      	movs	r5, #1
 800c4ce:	3c04      	subs	r4, #4
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	f000 000f 	and.w	r0, r0, #15
 800c4d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	e7b7      	b.n	800c44e <__hexnan+0x7a>
 800c4de:	2508      	movs	r5, #8
 800c4e0:	e7b5      	b.n	800c44e <__hexnan+0x7a>
 800c4e2:	9b01      	ldr	r3, [sp, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0df      	beq.n	800c4a8 <__hexnan+0xd4>
 800c4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ec:	f1c3 0320 	rsb	r3, r3, #32
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4f8:	401a      	ands	r2, r3
 800c4fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800c4fe:	e7d3      	b.n	800c4a8 <__hexnan+0xd4>
 800c500:	3f04      	subs	r7, #4
 800c502:	e7d1      	b.n	800c4a8 <__hexnan+0xd4>
 800c504:	2004      	movs	r0, #4
 800c506:	b007      	add	sp, #28
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c50c <_localeconv_r>:
 800c50c:	4800      	ldr	r0, [pc, #0]	; (800c510 <_localeconv_r+0x4>)
 800c50e:	4770      	bx	lr
 800c510:	20000164 	.word	0x20000164

0800c514 <__retarget_lock_init_recursive>:
 800c514:	4770      	bx	lr

0800c516 <__retarget_lock_acquire_recursive>:
 800c516:	4770      	bx	lr

0800c518 <__retarget_lock_release_recursive>:
 800c518:	4770      	bx	lr

0800c51a <__swhatbuf_r>:
 800c51a:	b570      	push	{r4, r5, r6, lr}
 800c51c:	460e      	mov	r6, r1
 800c51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c522:	2900      	cmp	r1, #0
 800c524:	b096      	sub	sp, #88	; 0x58
 800c526:	4614      	mov	r4, r2
 800c528:	461d      	mov	r5, r3
 800c52a:	da07      	bge.n	800c53c <__swhatbuf_r+0x22>
 800c52c:	2300      	movs	r3, #0
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	89b3      	ldrh	r3, [r6, #12]
 800c532:	061a      	lsls	r2, r3, #24
 800c534:	d410      	bmi.n	800c558 <__swhatbuf_r+0x3e>
 800c536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c53a:	e00e      	b.n	800c55a <__swhatbuf_r+0x40>
 800c53c:	466a      	mov	r2, sp
 800c53e:	f000 ff1f 	bl	800d380 <_fstat_r>
 800c542:	2800      	cmp	r0, #0
 800c544:	dbf2      	blt.n	800c52c <__swhatbuf_r+0x12>
 800c546:	9a01      	ldr	r2, [sp, #4]
 800c548:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c54c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c550:	425a      	negs	r2, r3
 800c552:	415a      	adcs	r2, r3
 800c554:	602a      	str	r2, [r5, #0]
 800c556:	e7ee      	b.n	800c536 <__swhatbuf_r+0x1c>
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	2000      	movs	r0, #0
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	b016      	add	sp, #88	; 0x58
 800c560:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c564 <__smakebuf_r>:
 800c564:	898b      	ldrh	r3, [r1, #12]
 800c566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c568:	079d      	lsls	r5, r3, #30
 800c56a:	4606      	mov	r6, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	d507      	bpl.n	800c580 <__smakebuf_r+0x1c>
 800c570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	2301      	movs	r3, #1
 800c57a:	6163      	str	r3, [r4, #20]
 800c57c:	b002      	add	sp, #8
 800c57e:	bd70      	pop	{r4, r5, r6, pc}
 800c580:	ab01      	add	r3, sp, #4
 800c582:	466a      	mov	r2, sp
 800c584:	f7ff ffc9 	bl	800c51a <__swhatbuf_r>
 800c588:	9900      	ldr	r1, [sp, #0]
 800c58a:	4605      	mov	r5, r0
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fc fc61 	bl	8008e54 <_malloc_r>
 800c592:	b948      	cbnz	r0, 800c5a8 <__smakebuf_r+0x44>
 800c594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d4ef      	bmi.n	800c57c <__smakebuf_r+0x18>
 800c59c:	f023 0303 	bic.w	r3, r3, #3
 800c5a0:	f043 0302 	orr.w	r3, r3, #2
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	e7e3      	b.n	800c570 <__smakebuf_r+0xc>
 800c5a8:	4b0d      	ldr	r3, [pc, #52]	; (800c5e0 <__smakebuf_r+0x7c>)
 800c5aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b4:	81a3      	strh	r3, [r4, #12]
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	6163      	str	r3, [r4, #20]
 800c5ba:	9b01      	ldr	r3, [sp, #4]
 800c5bc:	6120      	str	r0, [r4, #16]
 800c5be:	b15b      	cbz	r3, 800c5d8 <__smakebuf_r+0x74>
 800c5c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f000 feed 	bl	800d3a4 <_isatty_r>
 800c5ca:	b128      	cbz	r0, 800c5d8 <__smakebuf_r+0x74>
 800c5cc:	89a3      	ldrh	r3, [r4, #12]
 800c5ce:	f023 0303 	bic.w	r3, r3, #3
 800c5d2:	f043 0301 	orr.w	r3, r3, #1
 800c5d6:	81a3      	strh	r3, [r4, #12]
 800c5d8:	89a0      	ldrh	r0, [r4, #12]
 800c5da:	4305      	orrs	r5, r0
 800c5dc:	81a5      	strh	r5, [r4, #12]
 800c5de:	e7cd      	b.n	800c57c <__smakebuf_r+0x18>
 800c5e0:	0800bca5 	.word	0x0800bca5

0800c5e4 <__ascii_mbtowc>:
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	b901      	cbnz	r1, 800c5ea <__ascii_mbtowc+0x6>
 800c5e8:	a901      	add	r1, sp, #4
 800c5ea:	b142      	cbz	r2, 800c5fe <__ascii_mbtowc+0x1a>
 800c5ec:	b14b      	cbz	r3, 800c602 <__ascii_mbtowc+0x1e>
 800c5ee:	7813      	ldrb	r3, [r2, #0]
 800c5f0:	600b      	str	r3, [r1, #0]
 800c5f2:	7812      	ldrb	r2, [r2, #0]
 800c5f4:	1e10      	subs	r0, r2, #0
 800c5f6:	bf18      	it	ne
 800c5f8:	2001      	movne	r0, #1
 800c5fa:	b002      	add	sp, #8
 800c5fc:	4770      	bx	lr
 800c5fe:	4610      	mov	r0, r2
 800c600:	e7fb      	b.n	800c5fa <__ascii_mbtowc+0x16>
 800c602:	f06f 0001 	mvn.w	r0, #1
 800c606:	e7f8      	b.n	800c5fa <__ascii_mbtowc+0x16>

0800c608 <__malloc_lock>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__malloc_lock+0x8>)
 800c60a:	f7ff bf84 	b.w	800c516 <__retarget_lock_acquire_recursive>
 800c60e:	bf00      	nop
 800c610:	200005fc 	.word	0x200005fc

0800c614 <__malloc_unlock>:
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <__malloc_unlock+0x8>)
 800c616:	f7ff bf7f 	b.w	800c518 <__retarget_lock_release_recursive>
 800c61a:	bf00      	nop
 800c61c:	200005fc 	.word	0x200005fc

0800c620 <_Balloc>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c624:	4604      	mov	r4, r0
 800c626:	460d      	mov	r5, r1
 800c628:	b976      	cbnz	r6, 800c648 <_Balloc+0x28>
 800c62a:	2010      	movs	r0, #16
 800c62c:	f7fc fb9e 	bl	8008d6c <malloc>
 800c630:	4602      	mov	r2, r0
 800c632:	6260      	str	r0, [r4, #36]	; 0x24
 800c634:	b920      	cbnz	r0, 800c640 <_Balloc+0x20>
 800c636:	4b18      	ldr	r3, [pc, #96]	; (800c698 <_Balloc+0x78>)
 800c638:	4818      	ldr	r0, [pc, #96]	; (800c69c <_Balloc+0x7c>)
 800c63a:	2166      	movs	r1, #102	; 0x66
 800c63c:	f000 fe60 	bl	800d300 <__assert_func>
 800c640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c644:	6006      	str	r6, [r0, #0]
 800c646:	60c6      	str	r6, [r0, #12]
 800c648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c64a:	68f3      	ldr	r3, [r6, #12]
 800c64c:	b183      	cbz	r3, 800c670 <_Balloc+0x50>
 800c64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c656:	b9b8      	cbnz	r0, 800c688 <_Balloc+0x68>
 800c658:	2101      	movs	r1, #1
 800c65a:	fa01 f605 	lsl.w	r6, r1, r5
 800c65e:	1d72      	adds	r2, r6, #5
 800c660:	0092      	lsls	r2, r2, #2
 800c662:	4620      	mov	r0, r4
 800c664:	f000 fc90 	bl	800cf88 <_calloc_r>
 800c668:	b160      	cbz	r0, 800c684 <_Balloc+0x64>
 800c66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c66e:	e00e      	b.n	800c68e <_Balloc+0x6e>
 800c670:	2221      	movs	r2, #33	; 0x21
 800c672:	2104      	movs	r1, #4
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fc87 	bl	800cf88 <_calloc_r>
 800c67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c67c:	60f0      	str	r0, [r6, #12]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1e4      	bne.n	800c64e <_Balloc+0x2e>
 800c684:	2000      	movs	r0, #0
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	6802      	ldr	r2, [r0, #0]
 800c68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c68e:	2300      	movs	r3, #0
 800c690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c694:	e7f7      	b.n	800c686 <_Balloc+0x66>
 800c696:	bf00      	nop
 800c698:	0800e37e 	.word	0x0800e37e
 800c69c:	0800e4e8 	.word	0x0800e4e8

0800c6a0 <_Bfree>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	b976      	cbnz	r6, 800c6c8 <_Bfree+0x28>
 800c6aa:	2010      	movs	r0, #16
 800c6ac:	f7fc fb5e 	bl	8008d6c <malloc>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	6268      	str	r0, [r5, #36]	; 0x24
 800c6b4:	b920      	cbnz	r0, 800c6c0 <_Bfree+0x20>
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <_Bfree+0x3c>)
 800c6b8:	4809      	ldr	r0, [pc, #36]	; (800c6e0 <_Bfree+0x40>)
 800c6ba:	218a      	movs	r1, #138	; 0x8a
 800c6bc:	f000 fe20 	bl	800d300 <__assert_func>
 800c6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6c4:	6006      	str	r6, [r0, #0]
 800c6c6:	60c6      	str	r6, [r0, #12]
 800c6c8:	b13c      	cbz	r4, 800c6da <_Bfree+0x3a>
 800c6ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6cc:	6862      	ldr	r2, [r4, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6d4:	6021      	str	r1, [r4, #0]
 800c6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	0800e37e 	.word	0x0800e37e
 800c6e0:	0800e4e8 	.word	0x0800e4e8

0800c6e4 <__multadd>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	690e      	ldr	r6, [r1, #16]
 800c6ea:	4607      	mov	r7, r0
 800c6ec:	4698      	mov	r8, r3
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	f101 0014 	add.w	r0, r1, #20
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	6805      	ldr	r5, [r0, #0]
 800c6f8:	b2a9      	uxth	r1, r5
 800c6fa:	fb02 8101 	mla	r1, r2, r1, r8
 800c6fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c702:	0c2d      	lsrs	r5, r5, #16
 800c704:	fb02 c505 	mla	r5, r2, r5, ip
 800c708:	b289      	uxth	r1, r1
 800c70a:	3301      	adds	r3, #1
 800c70c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c710:	429e      	cmp	r6, r3
 800c712:	f840 1b04 	str.w	r1, [r0], #4
 800c716:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c71a:	dcec      	bgt.n	800c6f6 <__multadd+0x12>
 800c71c:	f1b8 0f00 	cmp.w	r8, #0
 800c720:	d022      	beq.n	800c768 <__multadd+0x84>
 800c722:	68a3      	ldr	r3, [r4, #8]
 800c724:	42b3      	cmp	r3, r6
 800c726:	dc19      	bgt.n	800c75c <__multadd+0x78>
 800c728:	6861      	ldr	r1, [r4, #4]
 800c72a:	4638      	mov	r0, r7
 800c72c:	3101      	adds	r1, #1
 800c72e:	f7ff ff77 	bl	800c620 <_Balloc>
 800c732:	4605      	mov	r5, r0
 800c734:	b928      	cbnz	r0, 800c742 <__multadd+0x5e>
 800c736:	4602      	mov	r2, r0
 800c738:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <__multadd+0x8c>)
 800c73a:	480e      	ldr	r0, [pc, #56]	; (800c774 <__multadd+0x90>)
 800c73c:	21b5      	movs	r1, #181	; 0xb5
 800c73e:	f000 fddf 	bl	800d300 <__assert_func>
 800c742:	6922      	ldr	r2, [r4, #16]
 800c744:	3202      	adds	r2, #2
 800c746:	f104 010c 	add.w	r1, r4, #12
 800c74a:	0092      	lsls	r2, r2, #2
 800c74c:	300c      	adds	r0, #12
 800c74e:	f7fc fb1d 	bl	8008d8c <memcpy>
 800c752:	4621      	mov	r1, r4
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff ffa3 	bl	800c6a0 <_Bfree>
 800c75a:	462c      	mov	r4, r5
 800c75c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c760:	3601      	adds	r6, #1
 800c762:	f8c3 8014 	str.w	r8, [r3, #20]
 800c766:	6126      	str	r6, [r4, #16]
 800c768:	4620      	mov	r0, r4
 800c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c76e:	bf00      	nop
 800c770:	0800e3f4 	.word	0x0800e3f4
 800c774:	0800e4e8 	.word	0x0800e4e8

0800c778 <__s2b>:
 800c778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c77c:	460c      	mov	r4, r1
 800c77e:	4615      	mov	r5, r2
 800c780:	461f      	mov	r7, r3
 800c782:	2209      	movs	r2, #9
 800c784:	3308      	adds	r3, #8
 800c786:	4606      	mov	r6, r0
 800c788:	fb93 f3f2 	sdiv	r3, r3, r2
 800c78c:	2100      	movs	r1, #0
 800c78e:	2201      	movs	r2, #1
 800c790:	429a      	cmp	r2, r3
 800c792:	db09      	blt.n	800c7a8 <__s2b+0x30>
 800c794:	4630      	mov	r0, r6
 800c796:	f7ff ff43 	bl	800c620 <_Balloc>
 800c79a:	b940      	cbnz	r0, 800c7ae <__s2b+0x36>
 800c79c:	4602      	mov	r2, r0
 800c79e:	4b19      	ldr	r3, [pc, #100]	; (800c804 <__s2b+0x8c>)
 800c7a0:	4819      	ldr	r0, [pc, #100]	; (800c808 <__s2b+0x90>)
 800c7a2:	21ce      	movs	r1, #206	; 0xce
 800c7a4:	f000 fdac 	bl	800d300 <__assert_func>
 800c7a8:	0052      	lsls	r2, r2, #1
 800c7aa:	3101      	adds	r1, #1
 800c7ac:	e7f0      	b.n	800c790 <__s2b+0x18>
 800c7ae:	9b08      	ldr	r3, [sp, #32]
 800c7b0:	6143      	str	r3, [r0, #20]
 800c7b2:	2d09      	cmp	r5, #9
 800c7b4:	f04f 0301 	mov.w	r3, #1
 800c7b8:	6103      	str	r3, [r0, #16]
 800c7ba:	dd16      	ble.n	800c7ea <__s2b+0x72>
 800c7bc:	f104 0909 	add.w	r9, r4, #9
 800c7c0:	46c8      	mov	r8, r9
 800c7c2:	442c      	add	r4, r5
 800c7c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	3b30      	subs	r3, #48	; 0x30
 800c7cc:	220a      	movs	r2, #10
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7ff ff88 	bl	800c6e4 <__multadd>
 800c7d4:	45a0      	cmp	r8, r4
 800c7d6:	d1f5      	bne.n	800c7c4 <__s2b+0x4c>
 800c7d8:	f1a5 0408 	sub.w	r4, r5, #8
 800c7dc:	444c      	add	r4, r9
 800c7de:	1b2d      	subs	r5, r5, r4
 800c7e0:	1963      	adds	r3, r4, r5
 800c7e2:	42bb      	cmp	r3, r7
 800c7e4:	db04      	blt.n	800c7f0 <__s2b+0x78>
 800c7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ea:	340a      	adds	r4, #10
 800c7ec:	2509      	movs	r5, #9
 800c7ee:	e7f6      	b.n	800c7de <__s2b+0x66>
 800c7f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	3b30      	subs	r3, #48	; 0x30
 800c7f8:	220a      	movs	r2, #10
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ff72 	bl	800c6e4 <__multadd>
 800c800:	e7ee      	b.n	800c7e0 <__s2b+0x68>
 800c802:	bf00      	nop
 800c804:	0800e3f4 	.word	0x0800e3f4
 800c808:	0800e4e8 	.word	0x0800e4e8

0800c80c <__hi0bits>:
 800c80c:	0c02      	lsrs	r2, r0, #16
 800c80e:	0412      	lsls	r2, r2, #16
 800c810:	4603      	mov	r3, r0
 800c812:	b9ca      	cbnz	r2, 800c848 <__hi0bits+0x3c>
 800c814:	0403      	lsls	r3, r0, #16
 800c816:	2010      	movs	r0, #16
 800c818:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c81c:	bf04      	itt	eq
 800c81e:	021b      	lsleq	r3, r3, #8
 800c820:	3008      	addeq	r0, #8
 800c822:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c826:	bf04      	itt	eq
 800c828:	011b      	lsleq	r3, r3, #4
 800c82a:	3004      	addeq	r0, #4
 800c82c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c830:	bf04      	itt	eq
 800c832:	009b      	lsleq	r3, r3, #2
 800c834:	3002      	addeq	r0, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	db05      	blt.n	800c846 <__hi0bits+0x3a>
 800c83a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c83e:	f100 0001 	add.w	r0, r0, #1
 800c842:	bf08      	it	eq
 800c844:	2020      	moveq	r0, #32
 800c846:	4770      	bx	lr
 800c848:	2000      	movs	r0, #0
 800c84a:	e7e5      	b.n	800c818 <__hi0bits+0xc>

0800c84c <__lo0bits>:
 800c84c:	6803      	ldr	r3, [r0, #0]
 800c84e:	4602      	mov	r2, r0
 800c850:	f013 0007 	ands.w	r0, r3, #7
 800c854:	d00b      	beq.n	800c86e <__lo0bits+0x22>
 800c856:	07d9      	lsls	r1, r3, #31
 800c858:	d422      	bmi.n	800c8a0 <__lo0bits+0x54>
 800c85a:	0798      	lsls	r0, r3, #30
 800c85c:	bf49      	itett	mi
 800c85e:	085b      	lsrmi	r3, r3, #1
 800c860:	089b      	lsrpl	r3, r3, #2
 800c862:	2001      	movmi	r0, #1
 800c864:	6013      	strmi	r3, [r2, #0]
 800c866:	bf5c      	itt	pl
 800c868:	6013      	strpl	r3, [r2, #0]
 800c86a:	2002      	movpl	r0, #2
 800c86c:	4770      	bx	lr
 800c86e:	b299      	uxth	r1, r3
 800c870:	b909      	cbnz	r1, 800c876 <__lo0bits+0x2a>
 800c872:	0c1b      	lsrs	r3, r3, #16
 800c874:	2010      	movs	r0, #16
 800c876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c87a:	bf04      	itt	eq
 800c87c:	0a1b      	lsreq	r3, r3, #8
 800c87e:	3008      	addeq	r0, #8
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	bf04      	itt	eq
 800c884:	091b      	lsreq	r3, r3, #4
 800c886:	3004      	addeq	r0, #4
 800c888:	0799      	lsls	r1, r3, #30
 800c88a:	bf04      	itt	eq
 800c88c:	089b      	lsreq	r3, r3, #2
 800c88e:	3002      	addeq	r0, #2
 800c890:	07d9      	lsls	r1, r3, #31
 800c892:	d403      	bmi.n	800c89c <__lo0bits+0x50>
 800c894:	085b      	lsrs	r3, r3, #1
 800c896:	f100 0001 	add.w	r0, r0, #1
 800c89a:	d003      	beq.n	800c8a4 <__lo0bits+0x58>
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	4770      	bx	lr
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	4770      	bx	lr
 800c8a4:	2020      	movs	r0, #32
 800c8a6:	4770      	bx	lr

0800c8a8 <__i2b>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	f7ff feb7 	bl	800c620 <_Balloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__i2b+0x1a>
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <__i2b+0x24>)
 800c8b8:	4805      	ldr	r0, [pc, #20]	; (800c8d0 <__i2b+0x28>)
 800c8ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8be:	f000 fd1f 	bl	800d300 <__assert_func>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	6144      	str	r4, [r0, #20]
 800c8c6:	6103      	str	r3, [r0, #16]
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	bf00      	nop
 800c8cc:	0800e3f4 	.word	0x0800e3f4
 800c8d0:	0800e4e8 	.word	0x0800e4e8

0800c8d4 <__multiply>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4614      	mov	r4, r2
 800c8da:	690a      	ldr	r2, [r1, #16]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	bfb8      	it	lt
 800c8e2:	460b      	movlt	r3, r1
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	bfbc      	itt	lt
 800c8e8:	4625      	movlt	r5, r4
 800c8ea:	461c      	movlt	r4, r3
 800c8ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c8f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8f4:	68ab      	ldr	r3, [r5, #8]
 800c8f6:	6869      	ldr	r1, [r5, #4]
 800c8f8:	eb0a 0709 	add.w	r7, sl, r9
 800c8fc:	42bb      	cmp	r3, r7
 800c8fe:	b085      	sub	sp, #20
 800c900:	bfb8      	it	lt
 800c902:	3101      	addlt	r1, #1
 800c904:	f7ff fe8c 	bl	800c620 <_Balloc>
 800c908:	b930      	cbnz	r0, 800c918 <__multiply+0x44>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b42      	ldr	r3, [pc, #264]	; (800ca18 <__multiply+0x144>)
 800c90e:	4843      	ldr	r0, [pc, #268]	; (800ca1c <__multiply+0x148>)
 800c910:	f240 115d 	movw	r1, #349	; 0x15d
 800c914:	f000 fcf4 	bl	800d300 <__assert_func>
 800c918:	f100 0614 	add.w	r6, r0, #20
 800c91c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c920:	4633      	mov	r3, r6
 800c922:	2200      	movs	r2, #0
 800c924:	4543      	cmp	r3, r8
 800c926:	d31e      	bcc.n	800c966 <__multiply+0x92>
 800c928:	f105 0c14 	add.w	ip, r5, #20
 800c92c:	f104 0314 	add.w	r3, r4, #20
 800c930:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c934:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c938:	9202      	str	r2, [sp, #8]
 800c93a:	ebac 0205 	sub.w	r2, ip, r5
 800c93e:	3a15      	subs	r2, #21
 800c940:	f022 0203 	bic.w	r2, r2, #3
 800c944:	3204      	adds	r2, #4
 800c946:	f105 0115 	add.w	r1, r5, #21
 800c94a:	458c      	cmp	ip, r1
 800c94c:	bf38      	it	cc
 800c94e:	2204      	movcc	r2, #4
 800c950:	9201      	str	r2, [sp, #4]
 800c952:	9a02      	ldr	r2, [sp, #8]
 800c954:	9303      	str	r3, [sp, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d808      	bhi.n	800c96c <__multiply+0x98>
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	dc55      	bgt.n	800ca0a <__multiply+0x136>
 800c95e:	6107      	str	r7, [r0, #16]
 800c960:	b005      	add	sp, #20
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	f843 2b04 	str.w	r2, [r3], #4
 800c96a:	e7db      	b.n	800c924 <__multiply+0x50>
 800c96c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c970:	f1ba 0f00 	cmp.w	sl, #0
 800c974:	d020      	beq.n	800c9b8 <__multiply+0xe4>
 800c976:	f105 0e14 	add.w	lr, r5, #20
 800c97a:	46b1      	mov	r9, r6
 800c97c:	2200      	movs	r2, #0
 800c97e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c982:	f8d9 b000 	ldr.w	fp, [r9]
 800c986:	b2a1      	uxth	r1, r4
 800c988:	fa1f fb8b 	uxth.w	fp, fp
 800c98c:	fb0a b101 	mla	r1, sl, r1, fp
 800c990:	4411      	add	r1, r2
 800c992:	f8d9 2000 	ldr.w	r2, [r9]
 800c996:	0c24      	lsrs	r4, r4, #16
 800c998:	0c12      	lsrs	r2, r2, #16
 800c99a:	fb0a 2404 	mla	r4, sl, r4, r2
 800c99e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9a2:	b289      	uxth	r1, r1
 800c9a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9a8:	45f4      	cmp	ip, lr
 800c9aa:	f849 1b04 	str.w	r1, [r9], #4
 800c9ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c9b2:	d8e4      	bhi.n	800c97e <__multiply+0xaa>
 800c9b4:	9901      	ldr	r1, [sp, #4]
 800c9b6:	5072      	str	r2, [r6, r1]
 800c9b8:	9a03      	ldr	r2, [sp, #12]
 800c9ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	d01f      	beq.n	800ca06 <__multiply+0x132>
 800c9c6:	6834      	ldr	r4, [r6, #0]
 800c9c8:	f105 0114 	add.w	r1, r5, #20
 800c9cc:	46b6      	mov	lr, r6
 800c9ce:	f04f 0a00 	mov.w	sl, #0
 800c9d2:	880a      	ldrh	r2, [r1, #0]
 800c9d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9d8:	fb09 b202 	mla	r2, r9, r2, fp
 800c9dc:	4492      	add	sl, r2
 800c9de:	b2a4      	uxth	r4, r4
 800c9e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c9e4:	f84e 4b04 	str.w	r4, [lr], #4
 800c9e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c9ec:	f8be 2000 	ldrh.w	r2, [lr]
 800c9f0:	0c24      	lsrs	r4, r4, #16
 800c9f2:	fb09 2404 	mla	r4, r9, r4, r2
 800c9f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c9fa:	458c      	cmp	ip, r1
 800c9fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca00:	d8e7      	bhi.n	800c9d2 <__multiply+0xfe>
 800ca02:	9a01      	ldr	r2, [sp, #4]
 800ca04:	50b4      	str	r4, [r6, r2]
 800ca06:	3604      	adds	r6, #4
 800ca08:	e7a3      	b.n	800c952 <__multiply+0x7e>
 800ca0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1a5      	bne.n	800c95e <__multiply+0x8a>
 800ca12:	3f01      	subs	r7, #1
 800ca14:	e7a1      	b.n	800c95a <__multiply+0x86>
 800ca16:	bf00      	nop
 800ca18:	0800e3f4 	.word	0x0800e3f4
 800ca1c:	0800e4e8 	.word	0x0800e4e8

0800ca20 <__pow5mult>:
 800ca20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca24:	4615      	mov	r5, r2
 800ca26:	f012 0203 	ands.w	r2, r2, #3
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460f      	mov	r7, r1
 800ca2e:	d007      	beq.n	800ca40 <__pow5mult+0x20>
 800ca30:	4c25      	ldr	r4, [pc, #148]	; (800cac8 <__pow5mult+0xa8>)
 800ca32:	3a01      	subs	r2, #1
 800ca34:	2300      	movs	r3, #0
 800ca36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca3a:	f7ff fe53 	bl	800c6e4 <__multadd>
 800ca3e:	4607      	mov	r7, r0
 800ca40:	10ad      	asrs	r5, r5, #2
 800ca42:	d03d      	beq.n	800cac0 <__pow5mult+0xa0>
 800ca44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca46:	b97c      	cbnz	r4, 800ca68 <__pow5mult+0x48>
 800ca48:	2010      	movs	r0, #16
 800ca4a:	f7fc f98f 	bl	8008d6c <malloc>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	6270      	str	r0, [r6, #36]	; 0x24
 800ca52:	b928      	cbnz	r0, 800ca60 <__pow5mult+0x40>
 800ca54:	4b1d      	ldr	r3, [pc, #116]	; (800cacc <__pow5mult+0xac>)
 800ca56:	481e      	ldr	r0, [pc, #120]	; (800cad0 <__pow5mult+0xb0>)
 800ca58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca5c:	f000 fc50 	bl	800d300 <__assert_func>
 800ca60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca64:	6004      	str	r4, [r0, #0]
 800ca66:	60c4      	str	r4, [r0, #12]
 800ca68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca70:	b94c      	cbnz	r4, 800ca86 <__pow5mult+0x66>
 800ca72:	f240 2171 	movw	r1, #625	; 0x271
 800ca76:	4630      	mov	r0, r6
 800ca78:	f7ff ff16 	bl	800c8a8 <__i2b>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca82:	4604      	mov	r4, r0
 800ca84:	6003      	str	r3, [r0, #0]
 800ca86:	f04f 0900 	mov.w	r9, #0
 800ca8a:	07eb      	lsls	r3, r5, #31
 800ca8c:	d50a      	bpl.n	800caa4 <__pow5mult+0x84>
 800ca8e:	4639      	mov	r1, r7
 800ca90:	4622      	mov	r2, r4
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7ff ff1e 	bl	800c8d4 <__multiply>
 800ca98:	4639      	mov	r1, r7
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7ff fdff 	bl	800c6a0 <_Bfree>
 800caa2:	4647      	mov	r7, r8
 800caa4:	106d      	asrs	r5, r5, #1
 800caa6:	d00b      	beq.n	800cac0 <__pow5mult+0xa0>
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	b938      	cbnz	r0, 800cabc <__pow5mult+0x9c>
 800caac:	4622      	mov	r2, r4
 800caae:	4621      	mov	r1, r4
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7ff ff0f 	bl	800c8d4 <__multiply>
 800cab6:	6020      	str	r0, [r4, #0]
 800cab8:	f8c0 9000 	str.w	r9, [r0]
 800cabc:	4604      	mov	r4, r0
 800cabe:	e7e4      	b.n	800ca8a <__pow5mult+0x6a>
 800cac0:	4638      	mov	r0, r7
 800cac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac6:	bf00      	nop
 800cac8:	0800e638 	.word	0x0800e638
 800cacc:	0800e37e 	.word	0x0800e37e
 800cad0:	0800e4e8 	.word	0x0800e4e8

0800cad4 <__lshift>:
 800cad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad8:	460c      	mov	r4, r1
 800cada:	6849      	ldr	r1, [r1, #4]
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	4607      	mov	r7, r0
 800cae6:	4691      	mov	r9, r2
 800cae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caec:	f108 0601 	add.w	r6, r8, #1
 800caf0:	42b3      	cmp	r3, r6
 800caf2:	db0b      	blt.n	800cb0c <__lshift+0x38>
 800caf4:	4638      	mov	r0, r7
 800caf6:	f7ff fd93 	bl	800c620 <_Balloc>
 800cafa:	4605      	mov	r5, r0
 800cafc:	b948      	cbnz	r0, 800cb12 <__lshift+0x3e>
 800cafe:	4602      	mov	r2, r0
 800cb00:	4b28      	ldr	r3, [pc, #160]	; (800cba4 <__lshift+0xd0>)
 800cb02:	4829      	ldr	r0, [pc, #164]	; (800cba8 <__lshift+0xd4>)
 800cb04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb08:	f000 fbfa 	bl	800d300 <__assert_func>
 800cb0c:	3101      	adds	r1, #1
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	e7ee      	b.n	800caf0 <__lshift+0x1c>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f100 0114 	add.w	r1, r0, #20
 800cb18:	f100 0210 	add.w	r2, r0, #16
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	4553      	cmp	r3, sl
 800cb20:	db33      	blt.n	800cb8a <__lshift+0xb6>
 800cb22:	6920      	ldr	r0, [r4, #16]
 800cb24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb28:	f104 0314 	add.w	r3, r4, #20
 800cb2c:	f019 091f 	ands.w	r9, r9, #31
 800cb30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb38:	d02b      	beq.n	800cb92 <__lshift+0xbe>
 800cb3a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb3e:	468a      	mov	sl, r1
 800cb40:	2200      	movs	r2, #0
 800cb42:	6818      	ldr	r0, [r3, #0]
 800cb44:	fa00 f009 	lsl.w	r0, r0, r9
 800cb48:	4302      	orrs	r2, r0
 800cb4a:	f84a 2b04 	str.w	r2, [sl], #4
 800cb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb52:	459c      	cmp	ip, r3
 800cb54:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb58:	d8f3      	bhi.n	800cb42 <__lshift+0x6e>
 800cb5a:	ebac 0304 	sub.w	r3, ip, r4
 800cb5e:	3b15      	subs	r3, #21
 800cb60:	f023 0303 	bic.w	r3, r3, #3
 800cb64:	3304      	adds	r3, #4
 800cb66:	f104 0015 	add.w	r0, r4, #21
 800cb6a:	4584      	cmp	ip, r0
 800cb6c:	bf38      	it	cc
 800cb6e:	2304      	movcc	r3, #4
 800cb70:	50ca      	str	r2, [r1, r3]
 800cb72:	b10a      	cbz	r2, 800cb78 <__lshift+0xa4>
 800cb74:	f108 0602 	add.w	r6, r8, #2
 800cb78:	3e01      	subs	r6, #1
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	612e      	str	r6, [r5, #16]
 800cb7e:	4621      	mov	r1, r4
 800cb80:	f7ff fd8e 	bl	800c6a0 <_Bfree>
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb8e:	3301      	adds	r3, #1
 800cb90:	e7c5      	b.n	800cb1e <__lshift+0x4a>
 800cb92:	3904      	subs	r1, #4
 800cb94:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb98:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb9c:	459c      	cmp	ip, r3
 800cb9e:	d8f9      	bhi.n	800cb94 <__lshift+0xc0>
 800cba0:	e7ea      	b.n	800cb78 <__lshift+0xa4>
 800cba2:	bf00      	nop
 800cba4:	0800e3f4 	.word	0x0800e3f4
 800cba8:	0800e4e8 	.word	0x0800e4e8

0800cbac <__mcmp>:
 800cbac:	690a      	ldr	r2, [r1, #16]
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6900      	ldr	r0, [r0, #16]
 800cbb2:	1a80      	subs	r0, r0, r2
 800cbb4:	b530      	push	{r4, r5, lr}
 800cbb6:	d10d      	bne.n	800cbd4 <__mcmp+0x28>
 800cbb8:	3314      	adds	r3, #20
 800cbba:	3114      	adds	r1, #20
 800cbbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbcc:	4295      	cmp	r5, r2
 800cbce:	d002      	beq.n	800cbd6 <__mcmp+0x2a>
 800cbd0:	d304      	bcc.n	800cbdc <__mcmp+0x30>
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	bd30      	pop	{r4, r5, pc}
 800cbd6:	42a3      	cmp	r3, r4
 800cbd8:	d3f4      	bcc.n	800cbc4 <__mcmp+0x18>
 800cbda:	e7fb      	b.n	800cbd4 <__mcmp+0x28>
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	e7f8      	b.n	800cbd4 <__mcmp+0x28>
	...

0800cbe4 <__mdiff>:
 800cbe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	460c      	mov	r4, r1
 800cbea:	4606      	mov	r6, r0
 800cbec:	4611      	mov	r1, r2
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4617      	mov	r7, r2
 800cbf2:	f7ff ffdb 	bl	800cbac <__mcmp>
 800cbf6:	1e05      	subs	r5, r0, #0
 800cbf8:	d111      	bne.n	800cc1e <__mdiff+0x3a>
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f7ff fd0f 	bl	800c620 <_Balloc>
 800cc02:	4602      	mov	r2, r0
 800cc04:	b928      	cbnz	r0, 800cc12 <__mdiff+0x2e>
 800cc06:	4b3a      	ldr	r3, [pc, #232]	; (800ccf0 <__mdiff+0x10c>)
 800cc08:	f240 2132 	movw	r1, #562	; 0x232
 800cc0c:	4839      	ldr	r0, [pc, #228]	; (800ccf4 <__mdiff+0x110>)
 800cc0e:	f000 fb77 	bl	800d300 <__assert_func>
 800cc12:	2301      	movs	r3, #1
 800cc14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc18:	4610      	mov	r0, r2
 800cc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	bfa4      	itt	ge
 800cc20:	463b      	movge	r3, r7
 800cc22:	4627      	movge	r7, r4
 800cc24:	4630      	mov	r0, r6
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	bfa6      	itte	ge
 800cc2a:	461c      	movge	r4, r3
 800cc2c:	2500      	movge	r5, #0
 800cc2e:	2501      	movlt	r5, #1
 800cc30:	f7ff fcf6 	bl	800c620 <_Balloc>
 800cc34:	4602      	mov	r2, r0
 800cc36:	b918      	cbnz	r0, 800cc40 <__mdiff+0x5c>
 800cc38:	4b2d      	ldr	r3, [pc, #180]	; (800ccf0 <__mdiff+0x10c>)
 800cc3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc3e:	e7e5      	b.n	800cc0c <__mdiff+0x28>
 800cc40:	693e      	ldr	r6, [r7, #16]
 800cc42:	60c5      	str	r5, [r0, #12]
 800cc44:	6925      	ldr	r5, [r4, #16]
 800cc46:	f107 0114 	add.w	r1, r7, #20
 800cc4a:	f100 0e14 	add.w	lr, r0, #20
 800cc4e:	f104 0914 	add.w	r9, r4, #20
 800cc52:	f107 0010 	add.w	r0, r7, #16
 800cc56:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cc5a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cc5e:	46f2      	mov	sl, lr
 800cc60:	2700      	movs	r7, #0
 800cc62:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc66:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800cc6a:	fa1f f883 	uxth.w	r8, r3
 800cc6e:	fa17 f78b 	uxtah	r7, r7, fp
 800cc72:	0c1b      	lsrs	r3, r3, #16
 800cc74:	eba7 0808 	sub.w	r8, r7, r8
 800cc78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc80:	fa1f f888 	uxth.w	r8, r8
 800cc84:	141f      	asrs	r7, r3, #16
 800cc86:	454d      	cmp	r5, r9
 800cc88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc8c:	f84a 3b04 	str.w	r3, [sl], #4
 800cc90:	d8e7      	bhi.n	800cc62 <__mdiff+0x7e>
 800cc92:	1b2b      	subs	r3, r5, r4
 800cc94:	3b15      	subs	r3, #21
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	3415      	adds	r4, #21
 800cc9e:	42a5      	cmp	r5, r4
 800cca0:	bf38      	it	cc
 800cca2:	2304      	movcc	r3, #4
 800cca4:	4419      	add	r1, r3
 800cca6:	4473      	add	r3, lr
 800cca8:	469e      	mov	lr, r3
 800ccaa:	460d      	mov	r5, r1
 800ccac:	4565      	cmp	r5, ip
 800ccae:	d30e      	bcc.n	800ccce <__mdiff+0xea>
 800ccb0:	f10c 0003 	add.w	r0, ip, #3
 800ccb4:	1a40      	subs	r0, r0, r1
 800ccb6:	f020 0003 	bic.w	r0, r0, #3
 800ccba:	3903      	subs	r1, #3
 800ccbc:	458c      	cmp	ip, r1
 800ccbe:	bf38      	it	cc
 800ccc0:	2000      	movcc	r0, #0
 800ccc2:	4418      	add	r0, r3
 800ccc4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800ccc8:	b17b      	cbz	r3, 800ccea <__mdiff+0x106>
 800ccca:	6116      	str	r6, [r2, #16]
 800cccc:	e7a4      	b.n	800cc18 <__mdiff+0x34>
 800ccce:	f855 8b04 	ldr.w	r8, [r5], #4
 800ccd2:	fa17 f488 	uxtah	r4, r7, r8
 800ccd6:	1420      	asrs	r0, r4, #16
 800ccd8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ccdc:	b2a4      	uxth	r4, r4
 800ccde:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800cce2:	f84e 4b04 	str.w	r4, [lr], #4
 800cce6:	1407      	asrs	r7, r0, #16
 800cce8:	e7e0      	b.n	800ccac <__mdiff+0xc8>
 800ccea:	3e01      	subs	r6, #1
 800ccec:	e7ea      	b.n	800ccc4 <__mdiff+0xe0>
 800ccee:	bf00      	nop
 800ccf0:	0800e3f4 	.word	0x0800e3f4
 800ccf4:	0800e4e8 	.word	0x0800e4e8

0800ccf8 <__ulp>:
 800ccf8:	4b11      	ldr	r3, [pc, #68]	; (800cd40 <__ulp+0x48>)
 800ccfa:	400b      	ands	r3, r1
 800ccfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dd02      	ble.n	800cd0a <__ulp+0x12>
 800cd04:	2000      	movs	r0, #0
 800cd06:	4619      	mov	r1, r3
 800cd08:	4770      	bx	lr
 800cd0a:	425b      	negs	r3, r3
 800cd0c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cd10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd14:	f04f 0000 	mov.w	r0, #0
 800cd18:	f04f 0100 	mov.w	r1, #0
 800cd1c:	da04      	bge.n	800cd28 <__ulp+0x30>
 800cd1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd22:	fa43 f102 	asr.w	r1, r3, r2
 800cd26:	4770      	bx	lr
 800cd28:	f1a2 0314 	sub.w	r3, r2, #20
 800cd2c:	2b1e      	cmp	r3, #30
 800cd2e:	bfda      	itte	le
 800cd30:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cd34:	fa22 f303 	lsrle.w	r3, r2, r3
 800cd38:	2301      	movgt	r3, #1
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	7ff00000 	.word	0x7ff00000

0800cd44 <__b2d>:
 800cd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd48:	6907      	ldr	r7, [r0, #16]
 800cd4a:	f100 0914 	add.w	r9, r0, #20
 800cd4e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cd52:	f1a7 0804 	sub.w	r8, r7, #4
 800cd56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7ff fd56 	bl	800c80c <__hi0bits>
 800cd60:	f1c0 0320 	rsb	r3, r0, #32
 800cd64:	280a      	cmp	r0, #10
 800cd66:	600b      	str	r3, [r1, #0]
 800cd68:	491f      	ldr	r1, [pc, #124]	; (800cde8 <__b2d+0xa4>)
 800cd6a:	dc17      	bgt.n	800cd9c <__b2d+0x58>
 800cd6c:	f1c0 0c0b 	rsb	ip, r0, #11
 800cd70:	45c1      	cmp	r9, r8
 800cd72:	fa26 f30c 	lsr.w	r3, r6, ip
 800cd76:	bf38      	it	cc
 800cd78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cd7c:	ea43 0501 	orr.w	r5, r3, r1
 800cd80:	bf28      	it	cs
 800cd82:	2200      	movcs	r2, #0
 800cd84:	f100 0315 	add.w	r3, r0, #21
 800cd88:	fa06 f303 	lsl.w	r3, r6, r3
 800cd8c:	fa22 f20c 	lsr.w	r2, r2, ip
 800cd90:	ea43 0402 	orr.w	r4, r3, r2
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd9c:	45c1      	cmp	r9, r8
 800cd9e:	bf3a      	itte	cc
 800cda0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cda4:	f1a7 0808 	subcc.w	r8, r7, #8
 800cda8:	2200      	movcs	r2, #0
 800cdaa:	f1b0 030b 	subs.w	r3, r0, #11
 800cdae:	d016      	beq.n	800cdde <__b2d+0x9a>
 800cdb0:	f1c3 0720 	rsb	r7, r3, #32
 800cdb4:	fa22 f107 	lsr.w	r1, r2, r7
 800cdb8:	45c8      	cmp	r8, r9
 800cdba:	fa06 f603 	lsl.w	r6, r6, r3
 800cdbe:	ea46 0601 	orr.w	r6, r6, r1
 800cdc2:	bf8c      	ite	hi
 800cdc4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cdc8:	2100      	movls	r1, #0
 800cdca:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cdce:	fa02 f003 	lsl.w	r0, r2, r3
 800cdd2:	40f9      	lsrs	r1, r7
 800cdd4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cdd8:	ea40 0401 	orr.w	r4, r0, r1
 800cddc:	e7da      	b.n	800cd94 <__b2d+0x50>
 800cdde:	ea46 0501 	orr.w	r5, r6, r1
 800cde2:	4614      	mov	r4, r2
 800cde4:	e7d6      	b.n	800cd94 <__b2d+0x50>
 800cde6:	bf00      	nop
 800cde8:	3ff00000 	.word	0x3ff00000

0800cdec <__d2b>:
 800cdec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cdf6:	4690      	mov	r8, r2
 800cdf8:	461d      	mov	r5, r3
 800cdfa:	f7ff fc11 	bl	800c620 <_Balloc>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	b930      	cbnz	r0, 800ce10 <__d2b+0x24>
 800ce02:	4602      	mov	r2, r0
 800ce04:	4b25      	ldr	r3, [pc, #148]	; (800ce9c <__d2b+0xb0>)
 800ce06:	4826      	ldr	r0, [pc, #152]	; (800cea0 <__d2b+0xb4>)
 800ce08:	f240 310a 	movw	r1, #778	; 0x30a
 800ce0c:	f000 fa78 	bl	800d300 <__assert_func>
 800ce10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ce14:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ce18:	bb2d      	cbnz	r5, 800ce66 <__d2b+0x7a>
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	f1b8 0300 	subs.w	r3, r8, #0
 800ce20:	d026      	beq.n	800ce70 <__d2b+0x84>
 800ce22:	4668      	mov	r0, sp
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	f7ff fd11 	bl	800c84c <__lo0bits>
 800ce2a:	9900      	ldr	r1, [sp, #0]
 800ce2c:	b1f0      	cbz	r0, 800ce6c <__d2b+0x80>
 800ce2e:	9a01      	ldr	r2, [sp, #4]
 800ce30:	f1c0 0320 	rsb	r3, r0, #32
 800ce34:	fa02 f303 	lsl.w	r3, r2, r3
 800ce38:	430b      	orrs	r3, r1
 800ce3a:	40c2      	lsrs	r2, r0
 800ce3c:	6163      	str	r3, [r4, #20]
 800ce3e:	9201      	str	r2, [sp, #4]
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	61a3      	str	r3, [r4, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	bf14      	ite	ne
 800ce48:	2102      	movne	r1, #2
 800ce4a:	2101      	moveq	r1, #1
 800ce4c:	6121      	str	r1, [r4, #16]
 800ce4e:	b1c5      	cbz	r5, 800ce82 <__d2b+0x96>
 800ce50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce54:	4405      	add	r5, r0
 800ce56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce5a:	603d      	str	r5, [r7, #0]
 800ce5c:	6030      	str	r0, [r6, #0]
 800ce5e:	4620      	mov	r0, r4
 800ce60:	b002      	add	sp, #8
 800ce62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce6a:	e7d6      	b.n	800ce1a <__d2b+0x2e>
 800ce6c:	6161      	str	r1, [r4, #20]
 800ce6e:	e7e7      	b.n	800ce40 <__d2b+0x54>
 800ce70:	a801      	add	r0, sp, #4
 800ce72:	f7ff fceb 	bl	800c84c <__lo0bits>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	6163      	str	r3, [r4, #20]
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	6121      	str	r1, [r4, #16]
 800ce7e:	3020      	adds	r0, #32
 800ce80:	e7e5      	b.n	800ce4e <__d2b+0x62>
 800ce82:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ce86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce8a:	6038      	str	r0, [r7, #0]
 800ce8c:	6918      	ldr	r0, [r3, #16]
 800ce8e:	f7ff fcbd 	bl	800c80c <__hi0bits>
 800ce92:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ce96:	6031      	str	r1, [r6, #0]
 800ce98:	e7e1      	b.n	800ce5e <__d2b+0x72>
 800ce9a:	bf00      	nop
 800ce9c:	0800e3f4 	.word	0x0800e3f4
 800cea0:	0800e4e8 	.word	0x0800e4e8

0800cea4 <__ratio>:
 800cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	4688      	mov	r8, r1
 800ceaa:	4669      	mov	r1, sp
 800ceac:	4681      	mov	r9, r0
 800ceae:	f7ff ff49 	bl	800cd44 <__b2d>
 800ceb2:	460f      	mov	r7, r1
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	4640      	mov	r0, r8
 800ceba:	a901      	add	r1, sp, #4
 800cebc:	f7ff ff42 	bl	800cd44 <__b2d>
 800cec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cec4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cec8:	eba3 0c02 	sub.w	ip, r3, r2
 800cecc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ced0:	1a9b      	subs	r3, r3, r2
 800ced2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bfd5      	itete	le
 800ceda:	460a      	movle	r2, r1
 800cedc:	462a      	movgt	r2, r5
 800cede:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cee2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cee6:	468b      	mov	fp, r1
 800cee8:	bfd8      	it	le
 800ceea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ceee:	465b      	mov	r3, fp
 800cef0:	4602      	mov	r2, r0
 800cef2:	4639      	mov	r1, r7
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7f3 fc91 	bl	800081c <__aeabi_ddiv>
 800cefa:	b003      	add	sp, #12
 800cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf00 <__copybits>:
 800cf00:	3901      	subs	r1, #1
 800cf02:	b570      	push	{r4, r5, r6, lr}
 800cf04:	1149      	asrs	r1, r1, #5
 800cf06:	6914      	ldr	r4, [r2, #16]
 800cf08:	3101      	adds	r1, #1
 800cf0a:	f102 0314 	add.w	r3, r2, #20
 800cf0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf16:	1f05      	subs	r5, r0, #4
 800cf18:	42a3      	cmp	r3, r4
 800cf1a:	d30c      	bcc.n	800cf36 <__copybits+0x36>
 800cf1c:	1aa3      	subs	r3, r4, r2
 800cf1e:	3b11      	subs	r3, #17
 800cf20:	f023 0303 	bic.w	r3, r3, #3
 800cf24:	3211      	adds	r2, #17
 800cf26:	42a2      	cmp	r2, r4
 800cf28:	bf88      	it	hi
 800cf2a:	2300      	movhi	r3, #0
 800cf2c:	4418      	add	r0, r3
 800cf2e:	2300      	movs	r3, #0
 800cf30:	4288      	cmp	r0, r1
 800cf32:	d305      	bcc.n	800cf40 <__copybits+0x40>
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf3a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf3e:	e7eb      	b.n	800cf18 <__copybits+0x18>
 800cf40:	f840 3b04 	str.w	r3, [r0], #4
 800cf44:	e7f4      	b.n	800cf30 <__copybits+0x30>

0800cf46 <__any_on>:
 800cf46:	f100 0214 	add.w	r2, r0, #20
 800cf4a:	6900      	ldr	r0, [r0, #16]
 800cf4c:	114b      	asrs	r3, r1, #5
 800cf4e:	4298      	cmp	r0, r3
 800cf50:	b510      	push	{r4, lr}
 800cf52:	db11      	blt.n	800cf78 <__any_on+0x32>
 800cf54:	dd0a      	ble.n	800cf6c <__any_on+0x26>
 800cf56:	f011 011f 	ands.w	r1, r1, #31
 800cf5a:	d007      	beq.n	800cf6c <__any_on+0x26>
 800cf5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf60:	fa24 f001 	lsr.w	r0, r4, r1
 800cf64:	fa00 f101 	lsl.w	r1, r0, r1
 800cf68:	428c      	cmp	r4, r1
 800cf6a:	d10b      	bne.n	800cf84 <__any_on+0x3e>
 800cf6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d803      	bhi.n	800cf7c <__any_on+0x36>
 800cf74:	2000      	movs	r0, #0
 800cf76:	bd10      	pop	{r4, pc}
 800cf78:	4603      	mov	r3, r0
 800cf7a:	e7f7      	b.n	800cf6c <__any_on+0x26>
 800cf7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf80:	2900      	cmp	r1, #0
 800cf82:	d0f5      	beq.n	800cf70 <__any_on+0x2a>
 800cf84:	2001      	movs	r0, #1
 800cf86:	e7f6      	b.n	800cf76 <__any_on+0x30>

0800cf88 <_calloc_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	fb02 f501 	mul.w	r5, r2, r1
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f7fb ff60 	bl	8008e54 <_malloc_r>
 800cf94:	4604      	mov	r4, r0
 800cf96:	b118      	cbz	r0, 800cfa0 <_calloc_r+0x18>
 800cf98:	462a      	mov	r2, r5
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	f7fb ff04 	bl	8008da8 <memset>
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}

0800cfa4 <__sfputc_r>:
 800cfa4:	6893      	ldr	r3, [r2, #8]
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	b410      	push	{r4}
 800cfac:	6093      	str	r3, [r2, #8]
 800cfae:	da07      	bge.n	800cfc0 <__sfputc_r+0x1c>
 800cfb0:	6994      	ldr	r4, [r2, #24]
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	db01      	blt.n	800cfba <__sfputc_r+0x16>
 800cfb6:	290a      	cmp	r1, #10
 800cfb8:	d102      	bne.n	800cfc0 <__sfputc_r+0x1c>
 800cfba:	bc10      	pop	{r4}
 800cfbc:	f7fd be02 	b.w	800abc4 <__swbuf_r>
 800cfc0:	6813      	ldr	r3, [r2, #0]
 800cfc2:	1c58      	adds	r0, r3, #1
 800cfc4:	6010      	str	r0, [r2, #0]
 800cfc6:	7019      	strb	r1, [r3, #0]
 800cfc8:	4608      	mov	r0, r1
 800cfca:	bc10      	pop	{r4}
 800cfcc:	4770      	bx	lr

0800cfce <__sfputs_r>:
 800cfce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	460f      	mov	r7, r1
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	18d5      	adds	r5, r2, r3
 800cfd8:	42ac      	cmp	r4, r5
 800cfda:	d101      	bne.n	800cfe0 <__sfputs_r+0x12>
 800cfdc:	2000      	movs	r0, #0
 800cfde:	e007      	b.n	800cff0 <__sfputs_r+0x22>
 800cfe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe4:	463a      	mov	r2, r7
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f7ff ffdc 	bl	800cfa4 <__sfputc_r>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d1f3      	bne.n	800cfd8 <__sfputs_r+0xa>
 800cff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cff4 <_vfiprintf_r>:
 800cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	460d      	mov	r5, r1
 800cffa:	b09d      	sub	sp, #116	; 0x74
 800cffc:	4614      	mov	r4, r2
 800cffe:	4698      	mov	r8, r3
 800d000:	4606      	mov	r6, r0
 800d002:	b118      	cbz	r0, 800d00c <_vfiprintf_r+0x18>
 800d004:	6983      	ldr	r3, [r0, #24]
 800d006:	b90b      	cbnz	r3, 800d00c <_vfiprintf_r+0x18>
 800d008:	f7fe fe80 	bl	800bd0c <__sinit>
 800d00c:	4b89      	ldr	r3, [pc, #548]	; (800d234 <_vfiprintf_r+0x240>)
 800d00e:	429d      	cmp	r5, r3
 800d010:	d11b      	bne.n	800d04a <_vfiprintf_r+0x56>
 800d012:	6875      	ldr	r5, [r6, #4]
 800d014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d016:	07d9      	lsls	r1, r3, #31
 800d018:	d405      	bmi.n	800d026 <_vfiprintf_r+0x32>
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	059a      	lsls	r2, r3, #22
 800d01e:	d402      	bmi.n	800d026 <_vfiprintf_r+0x32>
 800d020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d022:	f7ff fa78 	bl	800c516 <__retarget_lock_acquire_recursive>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	071b      	lsls	r3, r3, #28
 800d02a:	d501      	bpl.n	800d030 <_vfiprintf_r+0x3c>
 800d02c:	692b      	ldr	r3, [r5, #16]
 800d02e:	b9eb      	cbnz	r3, 800d06c <_vfiprintf_r+0x78>
 800d030:	4629      	mov	r1, r5
 800d032:	4630      	mov	r0, r6
 800d034:	f7fd fe2a 	bl	800ac8c <__swsetup_r>
 800d038:	b1c0      	cbz	r0, 800d06c <_vfiprintf_r+0x78>
 800d03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d03c:	07dc      	lsls	r4, r3, #31
 800d03e:	d50e      	bpl.n	800d05e <_vfiprintf_r+0x6a>
 800d040:	f04f 30ff 	mov.w	r0, #4294967295
 800d044:	b01d      	add	sp, #116	; 0x74
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	4b7b      	ldr	r3, [pc, #492]	; (800d238 <_vfiprintf_r+0x244>)
 800d04c:	429d      	cmp	r5, r3
 800d04e:	d101      	bne.n	800d054 <_vfiprintf_r+0x60>
 800d050:	68b5      	ldr	r5, [r6, #8]
 800d052:	e7df      	b.n	800d014 <_vfiprintf_r+0x20>
 800d054:	4b79      	ldr	r3, [pc, #484]	; (800d23c <_vfiprintf_r+0x248>)
 800d056:	429d      	cmp	r5, r3
 800d058:	bf08      	it	eq
 800d05a:	68f5      	ldreq	r5, [r6, #12]
 800d05c:	e7da      	b.n	800d014 <_vfiprintf_r+0x20>
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	0598      	lsls	r0, r3, #22
 800d062:	d4ed      	bmi.n	800d040 <_vfiprintf_r+0x4c>
 800d064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d066:	f7ff fa57 	bl	800c518 <__retarget_lock_release_recursive>
 800d06a:	e7e9      	b.n	800d040 <_vfiprintf_r+0x4c>
 800d06c:	2300      	movs	r3, #0
 800d06e:	9309      	str	r3, [sp, #36]	; 0x24
 800d070:	2320      	movs	r3, #32
 800d072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d076:	f8cd 800c 	str.w	r8, [sp, #12]
 800d07a:	2330      	movs	r3, #48	; 0x30
 800d07c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d240 <_vfiprintf_r+0x24c>
 800d080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d084:	f04f 0901 	mov.w	r9, #1
 800d088:	4623      	mov	r3, r4
 800d08a:	469a      	mov	sl, r3
 800d08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d090:	b10a      	cbz	r2, 800d096 <_vfiprintf_r+0xa2>
 800d092:	2a25      	cmp	r2, #37	; 0x25
 800d094:	d1f9      	bne.n	800d08a <_vfiprintf_r+0x96>
 800d096:	ebba 0b04 	subs.w	fp, sl, r4
 800d09a:	d00b      	beq.n	800d0b4 <_vfiprintf_r+0xc0>
 800d09c:	465b      	mov	r3, fp
 800d09e:	4622      	mov	r2, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f7ff ff93 	bl	800cfce <__sfputs_r>
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f000 80aa 	beq.w	800d202 <_vfiprintf_r+0x20e>
 800d0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b0:	445a      	add	r2, fp
 800d0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80a2 	beq.w	800d202 <_vfiprintf_r+0x20e>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0c8:	f10a 0a01 	add.w	sl, sl, #1
 800d0cc:	9304      	str	r3, [sp, #16]
 800d0ce:	9307      	str	r3, [sp, #28]
 800d0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d0d6:	4654      	mov	r4, sl
 800d0d8:	2205      	movs	r2, #5
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	4858      	ldr	r0, [pc, #352]	; (800d240 <_vfiprintf_r+0x24c>)
 800d0e0:	f7f3 f866 	bl	80001b0 <memchr>
 800d0e4:	9a04      	ldr	r2, [sp, #16]
 800d0e6:	b9d8      	cbnz	r0, 800d120 <_vfiprintf_r+0x12c>
 800d0e8:	06d1      	lsls	r1, r2, #27
 800d0ea:	bf44      	itt	mi
 800d0ec:	2320      	movmi	r3, #32
 800d0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f2:	0713      	lsls	r3, r2, #28
 800d0f4:	bf44      	itt	mi
 800d0f6:	232b      	movmi	r3, #43	; 0x2b
 800d0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d100:	2b2a      	cmp	r3, #42	; 0x2a
 800d102:	d015      	beq.n	800d130 <_vfiprintf_r+0x13c>
 800d104:	9a07      	ldr	r2, [sp, #28]
 800d106:	4654      	mov	r4, sl
 800d108:	2000      	movs	r0, #0
 800d10a:	f04f 0c0a 	mov.w	ip, #10
 800d10e:	4621      	mov	r1, r4
 800d110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d114:	3b30      	subs	r3, #48	; 0x30
 800d116:	2b09      	cmp	r3, #9
 800d118:	d94e      	bls.n	800d1b8 <_vfiprintf_r+0x1c4>
 800d11a:	b1b0      	cbz	r0, 800d14a <_vfiprintf_r+0x156>
 800d11c:	9207      	str	r2, [sp, #28]
 800d11e:	e014      	b.n	800d14a <_vfiprintf_r+0x156>
 800d120:	eba0 0308 	sub.w	r3, r0, r8
 800d124:	fa09 f303 	lsl.w	r3, r9, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	9304      	str	r3, [sp, #16]
 800d12c:	46a2      	mov	sl, r4
 800d12e:	e7d2      	b.n	800d0d6 <_vfiprintf_r+0xe2>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	1d19      	adds	r1, r3, #4
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	9103      	str	r1, [sp, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bfbb      	ittet	lt
 800d13c:	425b      	neglt	r3, r3
 800d13e:	f042 0202 	orrlt.w	r2, r2, #2
 800d142:	9307      	strge	r3, [sp, #28]
 800d144:	9307      	strlt	r3, [sp, #28]
 800d146:	bfb8      	it	lt
 800d148:	9204      	strlt	r2, [sp, #16]
 800d14a:	7823      	ldrb	r3, [r4, #0]
 800d14c:	2b2e      	cmp	r3, #46	; 0x2e
 800d14e:	d10c      	bne.n	800d16a <_vfiprintf_r+0x176>
 800d150:	7863      	ldrb	r3, [r4, #1]
 800d152:	2b2a      	cmp	r3, #42	; 0x2a
 800d154:	d135      	bne.n	800d1c2 <_vfiprintf_r+0x1ce>
 800d156:	9b03      	ldr	r3, [sp, #12]
 800d158:	1d1a      	adds	r2, r3, #4
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	9203      	str	r2, [sp, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	bfb8      	it	lt
 800d162:	f04f 33ff 	movlt.w	r3, #4294967295
 800d166:	3402      	adds	r4, #2
 800d168:	9305      	str	r3, [sp, #20]
 800d16a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d250 <_vfiprintf_r+0x25c>
 800d16e:	7821      	ldrb	r1, [r4, #0]
 800d170:	2203      	movs	r2, #3
 800d172:	4650      	mov	r0, sl
 800d174:	f7f3 f81c 	bl	80001b0 <memchr>
 800d178:	b140      	cbz	r0, 800d18c <_vfiprintf_r+0x198>
 800d17a:	2340      	movs	r3, #64	; 0x40
 800d17c:	eba0 000a 	sub.w	r0, r0, sl
 800d180:	fa03 f000 	lsl.w	r0, r3, r0
 800d184:	9b04      	ldr	r3, [sp, #16]
 800d186:	4303      	orrs	r3, r0
 800d188:	3401      	adds	r4, #1
 800d18a:	9304      	str	r3, [sp, #16]
 800d18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d190:	482c      	ldr	r0, [pc, #176]	; (800d244 <_vfiprintf_r+0x250>)
 800d192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d196:	2206      	movs	r2, #6
 800d198:	f7f3 f80a 	bl	80001b0 <memchr>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d03f      	beq.n	800d220 <_vfiprintf_r+0x22c>
 800d1a0:	4b29      	ldr	r3, [pc, #164]	; (800d248 <_vfiprintf_r+0x254>)
 800d1a2:	bb1b      	cbnz	r3, 800d1ec <_vfiprintf_r+0x1f8>
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	3307      	adds	r3, #7
 800d1a8:	f023 0307 	bic.w	r3, r3, #7
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	9303      	str	r3, [sp, #12]
 800d1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b2:	443b      	add	r3, r7
 800d1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b6:	e767      	b.n	800d088 <_vfiprintf_r+0x94>
 800d1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1bc:	460c      	mov	r4, r1
 800d1be:	2001      	movs	r0, #1
 800d1c0:	e7a5      	b.n	800d10e <_vfiprintf_r+0x11a>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	3401      	adds	r4, #1
 800d1c6:	9305      	str	r3, [sp, #20]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	f04f 0c0a 	mov.w	ip, #10
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1d4:	3a30      	subs	r2, #48	; 0x30
 800d1d6:	2a09      	cmp	r2, #9
 800d1d8:	d903      	bls.n	800d1e2 <_vfiprintf_r+0x1ee>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0c5      	beq.n	800d16a <_vfiprintf_r+0x176>
 800d1de:	9105      	str	r1, [sp, #20]
 800d1e0:	e7c3      	b.n	800d16a <_vfiprintf_r+0x176>
 800d1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e7f0      	b.n	800d1ce <_vfiprintf_r+0x1da>
 800d1ec:	ab03      	add	r3, sp, #12
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	462a      	mov	r2, r5
 800d1f2:	4b16      	ldr	r3, [pc, #88]	; (800d24c <_vfiprintf_r+0x258>)
 800d1f4:	a904      	add	r1, sp, #16
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f7fb ff24 	bl	8009044 <_printf_float>
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	1c78      	adds	r0, r7, #1
 800d200:	d1d6      	bne.n	800d1b0 <_vfiprintf_r+0x1bc>
 800d202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d204:	07d9      	lsls	r1, r3, #31
 800d206:	d405      	bmi.n	800d214 <_vfiprintf_r+0x220>
 800d208:	89ab      	ldrh	r3, [r5, #12]
 800d20a:	059a      	lsls	r2, r3, #22
 800d20c:	d402      	bmi.n	800d214 <_vfiprintf_r+0x220>
 800d20e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d210:	f7ff f982 	bl	800c518 <__retarget_lock_release_recursive>
 800d214:	89ab      	ldrh	r3, [r5, #12]
 800d216:	065b      	lsls	r3, r3, #25
 800d218:	f53f af12 	bmi.w	800d040 <_vfiprintf_r+0x4c>
 800d21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d21e:	e711      	b.n	800d044 <_vfiprintf_r+0x50>
 800d220:	ab03      	add	r3, sp, #12
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	462a      	mov	r2, r5
 800d226:	4b09      	ldr	r3, [pc, #36]	; (800d24c <_vfiprintf_r+0x258>)
 800d228:	a904      	add	r1, sp, #16
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7fc f9a2 	bl	8009574 <_printf_i>
 800d230:	e7e4      	b.n	800d1fc <_vfiprintf_r+0x208>
 800d232:	bf00      	nop
 800d234:	0800e428 	.word	0x0800e428
 800d238:	0800e448 	.word	0x0800e448
 800d23c:	0800e408 	.word	0x0800e408
 800d240:	0800e644 	.word	0x0800e644
 800d244:	0800e64e 	.word	0x0800e64e
 800d248:	08009045 	.word	0x08009045
 800d24c:	0800cfcf 	.word	0x0800cfcf
 800d250:	0800e64a 	.word	0x0800e64a

0800d254 <nan>:
 800d254:	4901      	ldr	r1, [pc, #4]	; (800d25c <nan+0x8>)
 800d256:	2000      	movs	r0, #0
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	7ff80000 	.word	0x7ff80000

0800d260 <__sread>:
 800d260:	b510      	push	{r4, lr}
 800d262:	460c      	mov	r4, r1
 800d264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d268:	f000 f8be 	bl	800d3e8 <_read_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	bfab      	itete	ge
 800d270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d272:	89a3      	ldrhlt	r3, [r4, #12]
 800d274:	181b      	addge	r3, r3, r0
 800d276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d27a:	bfac      	ite	ge
 800d27c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d27e:	81a3      	strhlt	r3, [r4, #12]
 800d280:	bd10      	pop	{r4, pc}

0800d282 <__swrite>:
 800d282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d286:	461f      	mov	r7, r3
 800d288:	898b      	ldrh	r3, [r1, #12]
 800d28a:	05db      	lsls	r3, r3, #23
 800d28c:	4605      	mov	r5, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	4616      	mov	r6, r2
 800d292:	d505      	bpl.n	800d2a0 <__swrite+0x1e>
 800d294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d298:	2302      	movs	r3, #2
 800d29a:	2200      	movs	r2, #0
 800d29c:	f000 f892 	bl	800d3c4 <_lseek_r>
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2aa:	81a3      	strh	r3, [r4, #12]
 800d2ac:	4632      	mov	r2, r6
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b6:	f7fd bcd7 	b.w	800ac68 <_write_r>

0800d2ba <__sseek>:
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	460c      	mov	r4, r1
 800d2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c2:	f000 f87f 	bl	800d3c4 <_lseek_r>
 800d2c6:	1c43      	adds	r3, r0, #1
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	bf15      	itete	ne
 800d2cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2d6:	81a3      	strheq	r3, [r4, #12]
 800d2d8:	bf18      	it	ne
 800d2da:	81a3      	strhne	r3, [r4, #12]
 800d2dc:	bd10      	pop	{r4, pc}

0800d2de <__sclose>:
 800d2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e2:	f000 b82b 	b.w	800d33c <_close_r>

0800d2e6 <__ascii_wctomb>:
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	b141      	cbz	r1, 800d2fe <__ascii_wctomb+0x18>
 800d2ec:	2aff      	cmp	r2, #255	; 0xff
 800d2ee:	d904      	bls.n	800d2fa <__ascii_wctomb+0x14>
 800d2f0:	228a      	movs	r2, #138	; 0x8a
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	4770      	bx	lr
 800d2fa:	700a      	strb	r2, [r1, #0]
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	4770      	bx	lr

0800d300 <__assert_func>:
 800d300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d302:	4614      	mov	r4, r2
 800d304:	461a      	mov	r2, r3
 800d306:	4b09      	ldr	r3, [pc, #36]	; (800d32c <__assert_func+0x2c>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4605      	mov	r5, r0
 800d30c:	68d8      	ldr	r0, [r3, #12]
 800d30e:	b14c      	cbz	r4, 800d324 <__assert_func+0x24>
 800d310:	4b07      	ldr	r3, [pc, #28]	; (800d330 <__assert_func+0x30>)
 800d312:	9100      	str	r1, [sp, #0]
 800d314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d318:	4906      	ldr	r1, [pc, #24]	; (800d334 <__assert_func+0x34>)
 800d31a:	462b      	mov	r3, r5
 800d31c:	f000 f81e 	bl	800d35c <fiprintf>
 800d320:	f000 f874 	bl	800d40c <abort>
 800d324:	4b04      	ldr	r3, [pc, #16]	; (800d338 <__assert_func+0x38>)
 800d326:	461c      	mov	r4, r3
 800d328:	e7f3      	b.n	800d312 <__assert_func+0x12>
 800d32a:	bf00      	nop
 800d32c:	2000000c 	.word	0x2000000c
 800d330:	0800e655 	.word	0x0800e655
 800d334:	0800e662 	.word	0x0800e662
 800d338:	0800e690 	.word	0x0800e690

0800d33c <_close_r>:
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	4d06      	ldr	r5, [pc, #24]	; (800d358 <_close_r+0x1c>)
 800d340:	2300      	movs	r3, #0
 800d342:	4604      	mov	r4, r0
 800d344:	4608      	mov	r0, r1
 800d346:	602b      	str	r3, [r5, #0]
 800d348:	f7f4 fb1c 	bl	8001984 <_close>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_close_r+0x1a>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b103      	cbz	r3, 800d356 <_close_r+0x1a>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	20000604 	.word	0x20000604

0800d35c <fiprintf>:
 800d35c:	b40e      	push	{r1, r2, r3}
 800d35e:	b503      	push	{r0, r1, lr}
 800d360:	4601      	mov	r1, r0
 800d362:	ab03      	add	r3, sp, #12
 800d364:	4805      	ldr	r0, [pc, #20]	; (800d37c <fiprintf+0x20>)
 800d366:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	f7ff fe41 	bl	800cff4 <_vfiprintf_r>
 800d372:	b002      	add	sp, #8
 800d374:	f85d eb04 	ldr.w	lr, [sp], #4
 800d378:	b003      	add	sp, #12
 800d37a:	4770      	bx	lr
 800d37c:	2000000c 	.word	0x2000000c

0800d380 <_fstat_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	4d07      	ldr	r5, [pc, #28]	; (800d3a0 <_fstat_r+0x20>)
 800d384:	2300      	movs	r3, #0
 800d386:	4604      	mov	r4, r0
 800d388:	4608      	mov	r0, r1
 800d38a:	4611      	mov	r1, r2
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	f7f4 fb04 	bl	800199a <_fstat>
 800d392:	1c43      	adds	r3, r0, #1
 800d394:	d102      	bne.n	800d39c <_fstat_r+0x1c>
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	b103      	cbz	r3, 800d39c <_fstat_r+0x1c>
 800d39a:	6023      	str	r3, [r4, #0]
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000604 	.word	0x20000604

0800d3a4 <_isatty_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4d06      	ldr	r5, [pc, #24]	; (800d3c0 <_isatty_r+0x1c>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	f7f4 fb02 	bl	80019b8 <_isatty>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_isatty_r+0x1a>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_isatty_r+0x1a>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	20000604 	.word	0x20000604

0800d3c4 <_lseek_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d07      	ldr	r5, [pc, #28]	; (800d3e4 <_lseek_r+0x20>)
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	4608      	mov	r0, r1
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	602a      	str	r2, [r5, #0]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f7f4 fafa 	bl	80019cc <_lseek>
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	d102      	bne.n	800d3e2 <_lseek_r+0x1e>
 800d3dc:	682b      	ldr	r3, [r5, #0]
 800d3de:	b103      	cbz	r3, 800d3e2 <_lseek_r+0x1e>
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
 800d3e4:	20000604 	.word	0x20000604

0800d3e8 <_read_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d07      	ldr	r5, [pc, #28]	; (800d408 <_read_r+0x20>)
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	4608      	mov	r0, r1
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	602a      	str	r2, [r5, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	f7f4 fa8b 	bl	8001912 <_read>
 800d3fc:	1c43      	adds	r3, r0, #1
 800d3fe:	d102      	bne.n	800d406 <_read_r+0x1e>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	b103      	cbz	r3, 800d406 <_read_r+0x1e>
 800d404:	6023      	str	r3, [r4, #0]
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	20000604 	.word	0x20000604

0800d40c <abort>:
 800d40c:	b508      	push	{r3, lr}
 800d40e:	2006      	movs	r0, #6
 800d410:	f000 f82c 	bl	800d46c <raise>
 800d414:	2001      	movs	r0, #1
 800d416:	f7f4 fa72 	bl	80018fe <_exit>

0800d41a <_raise_r>:
 800d41a:	291f      	cmp	r1, #31
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4604      	mov	r4, r0
 800d420:	460d      	mov	r5, r1
 800d422:	d904      	bls.n	800d42e <_raise_r+0x14>
 800d424:	2316      	movs	r3, #22
 800d426:	6003      	str	r3, [r0, #0]
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	bd38      	pop	{r3, r4, r5, pc}
 800d42e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d430:	b112      	cbz	r2, 800d438 <_raise_r+0x1e>
 800d432:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d436:	b94b      	cbnz	r3, 800d44c <_raise_r+0x32>
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 f831 	bl	800d4a0 <_getpid_r>
 800d43e:	462a      	mov	r2, r5
 800d440:	4601      	mov	r1, r0
 800d442:	4620      	mov	r0, r4
 800d444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d448:	f000 b818 	b.w	800d47c <_kill_r>
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d00a      	beq.n	800d466 <_raise_r+0x4c>
 800d450:	1c59      	adds	r1, r3, #1
 800d452:	d103      	bne.n	800d45c <_raise_r+0x42>
 800d454:	2316      	movs	r3, #22
 800d456:	6003      	str	r3, [r0, #0]
 800d458:	2001      	movs	r0, #1
 800d45a:	e7e7      	b.n	800d42c <_raise_r+0x12>
 800d45c:	2400      	movs	r4, #0
 800d45e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d462:	4628      	mov	r0, r5
 800d464:	4798      	blx	r3
 800d466:	2000      	movs	r0, #0
 800d468:	e7e0      	b.n	800d42c <_raise_r+0x12>
	...

0800d46c <raise>:
 800d46c:	4b02      	ldr	r3, [pc, #8]	; (800d478 <raise+0xc>)
 800d46e:	4601      	mov	r1, r0
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	f7ff bfd2 	b.w	800d41a <_raise_r>
 800d476:	bf00      	nop
 800d478:	2000000c 	.word	0x2000000c

0800d47c <_kill_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d07      	ldr	r5, [pc, #28]	; (800d49c <_kill_r+0x20>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	4611      	mov	r1, r2
 800d488:	602b      	str	r3, [r5, #0]
 800d48a:	f7f4 fa28 	bl	80018de <_kill>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d102      	bne.n	800d498 <_kill_r+0x1c>
 800d492:	682b      	ldr	r3, [r5, #0]
 800d494:	b103      	cbz	r3, 800d498 <_kill_r+0x1c>
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop
 800d49c:	20000604 	.word	0x20000604

0800d4a0 <_getpid_r>:
 800d4a0:	f7f4 ba16 	b.w	80018d0 <_getpid>

0800d4a4 <_init>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_fini>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr
