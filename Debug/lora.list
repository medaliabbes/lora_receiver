
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de08  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001184  0800df48  0800df48  0001df48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0cc  0800f0cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0cc  0800f0cc  0001f0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0d4  0800f0d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0d4  0800f0d4  0001f0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0d8  0800f0d8  0001f0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200001e0  0800f2bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800f2bc  00020608  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bbd  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce8  00000000  00000000  00044dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00049ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  0004b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2a2  00000000  00000000  0004cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5fb  00000000  00000000  0006b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7314  00000000  00000000  0008563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081b4  00000000  00000000  0012c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800df30 	.word	0x0800df30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800df30 	.word	0x0800df30

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b9a4 	b.w	80011d4 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f83e 	bl	8000f14 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_d2lz>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4605      	mov	r5, r0
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	4628      	mov	r0, r5
 8000eac:	4621      	mov	r1, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f7ff fdfb 	bl	8000aac <__aeabi_dcmplt>
 8000eb6:	b928      	cbnz	r0, 8000ec4 <__aeabi_d2lz+0x20>
 8000eb8:	4628      	mov	r0, r5
 8000eba:	4621      	mov	r1, r4
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f000 b80a 	b.w	8000ed8 <__aeabi_d2ulz>
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eca:	f000 f805 	bl	8000ed8 <__aeabi_d2ulz>
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_d2ulz>:
 8000ed8:	b5d0      	push	{r4, r6, r7, lr}
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__aeabi_d2ulz+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	4606      	mov	r6, r0
 8000ee0:	460f      	mov	r7, r1
 8000ee2:	f7ff fb71 	bl	80005c8 <__aeabi_dmul>
 8000ee6:	f7ff fe47 	bl	8000b78 <__aeabi_d2uiz>
 8000eea:	4604      	mov	r4, r0
 8000eec:	f7ff faf2 	bl	80004d4 <__aeabi_ui2d>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <__aeabi_d2ulz+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f7ff fb68 	bl	80005c8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4630      	mov	r0, r6
 8000efe:	4639      	mov	r1, r7
 8000f00:	f7ff f9aa 	bl	8000258 <__aeabi_dsub>
 8000f04:	f7ff fe38 	bl	8000b78 <__aeabi_d2uiz>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f0c:	3df00000 	.word	0x3df00000
 8000f10:	41f00000 	.word	0x41f00000

08000f14 <__udivmoddi4>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	9e08      	ldr	r6, [sp, #32]
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	468e      	mov	lr, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 8082 	bne.w	800102a <__udivmoddi4+0x116>
 8000f26:	428a      	cmp	r2, r1
 8000f28:	4617      	mov	r7, r2
 8000f2a:	d946      	bls.n	8000fba <__udivmoddi4+0xa6>
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b14a      	cbz	r2, 8000f46 <__udivmoddi4+0x32>
 8000f32:	f1c2 0120 	rsb	r1, r2, #32
 8000f36:	fa05 f302 	lsl.w	r3, r5, r2
 8000f3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f3e:	4097      	lsls	r7, r2
 8000f40:	ea41 0e03 	orr.w	lr, r1, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f4a:	0c23      	lsrs	r3, r4, #16
 8000f4c:	fbbe fcf8 	udiv	ip, lr, r8
 8000f50:	b2b9      	uxth	r1, r7
 8000f52:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000f56:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f5a:	fb0c f001 	mul.w	r0, ip, r1
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	d90a      	bls.n	8000f78 <__udivmoddi4+0x64>
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000f68:	f080 8116 	bcs.w	8001198 <__udivmoddi4+0x284>
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	f240 8113 	bls.w	8001198 <__udivmoddi4+0x284>
 8000f72:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a1b      	subs	r3, r3, r0
 8000f7a:	b2a4      	uxth	r4, r4
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3310 	mls	r3, r8, r0, r3
 8000f84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f88:	fb00 f101 	mul.w	r1, r0, r1
 8000f8c:	42a1      	cmp	r1, r4
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x90>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f96:	f080 8101 	bcs.w	800119c <__udivmoddi4+0x288>
 8000f9a:	42a1      	cmp	r1, r4
 8000f9c:	f240 80fe 	bls.w	800119c <__udivmoddi4+0x288>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	1a64      	subs	r4, r4, r1
 8000fa6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000faa:	2100      	movs	r1, #0
 8000fac:	b11e      	cbz	r6, 8000fb6 <__udivmoddi4+0xa2>
 8000fae:	40d4      	lsrs	r4, r2
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	b902      	cbnz	r2, 8000fbe <__udivmoddi4+0xaa>
 8000fbc:	deff      	udf	#255	; 0xff
 8000fbe:	fab2 f282 	clz	r2, r2
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d14f      	bne.n	8001066 <__udivmoddi4+0x152>
 8000fc6:	1bcb      	subs	r3, r1, r7
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	fa1f f887 	uxth.w	r8, r7
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fd6:	0c25      	lsrs	r5, r4, #16
 8000fd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fdc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000fe0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fe4:	42ab      	cmp	r3, r5
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0xe4>
 8000fe8:	197d      	adds	r5, r7, r5
 8000fea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0xe2>
 8000ff0:	42ab      	cmp	r3, r5
 8000ff2:	f200 80e7 	bhi.w	80011c4 <__udivmoddi4+0x2b0>
 8000ff6:	4684      	mov	ip, r0
 8000ff8:	1aed      	subs	r5, r5, r3
 8000ffa:	b2a3      	uxth	r3, r4
 8000ffc:	fbb5 f0fe 	udiv	r0, r5, lr
 8001000:	fb0e 5510 	mls	r5, lr, r0, r5
 8001004:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8001008:	fb08 f800 	mul.w	r8, r8, r0
 800100c:	45a0      	cmp	r8, r4
 800100e:	d907      	bls.n	8001020 <__udivmoddi4+0x10c>
 8001010:	193c      	adds	r4, r7, r4
 8001012:	f100 33ff 	add.w	r3, r0, #4294967295
 8001016:	d202      	bcs.n	800101e <__udivmoddi4+0x10a>
 8001018:	45a0      	cmp	r8, r4
 800101a:	f200 80d7 	bhi.w	80011cc <__udivmoddi4+0x2b8>
 800101e:	4618      	mov	r0, r3
 8001020:	eba4 0408 	sub.w	r4, r4, r8
 8001024:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001028:	e7c0      	b.n	8000fac <__udivmoddi4+0x98>
 800102a:	428b      	cmp	r3, r1
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x12c>
 800102e:	2e00      	cmp	r6, #0
 8001030:	f000 80af 	beq.w	8001192 <__udivmoddi4+0x27e>
 8001034:	2100      	movs	r1, #0
 8001036:	e9c6 0500 	strd	r0, r5, [r6]
 800103a:	4608      	mov	r0, r1
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	fab3 f183 	clz	r1, r3
 8001044:	2900      	cmp	r1, #0
 8001046:	d14b      	bne.n	80010e0 <__udivmoddi4+0x1cc>
 8001048:	42ab      	cmp	r3, r5
 800104a:	d302      	bcc.n	8001052 <__udivmoddi4+0x13e>
 800104c:	4282      	cmp	r2, r0
 800104e:	f200 80b7 	bhi.w	80011c0 <__udivmoddi4+0x2ac>
 8001052:	1a84      	subs	r4, r0, r2
 8001054:	eb65 0303 	sbc.w	r3, r5, r3
 8001058:	2001      	movs	r0, #1
 800105a:	469e      	mov	lr, r3
 800105c:	2e00      	cmp	r6, #0
 800105e:	d0aa      	beq.n	8000fb6 <__udivmoddi4+0xa2>
 8001060:	e9c6 4e00 	strd	r4, lr, [r6]
 8001064:	e7a7      	b.n	8000fb6 <__udivmoddi4+0xa2>
 8001066:	f1c2 0c20 	rsb	ip, r2, #32
 800106a:	fa01 f302 	lsl.w	r3, r1, r2
 800106e:	4097      	lsls	r7, r2
 8001070:	fa20 f00c 	lsr.w	r0, r0, ip
 8001074:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001078:	fa21 fc0c 	lsr.w	ip, r1, ip
 800107c:	4318      	orrs	r0, r3
 800107e:	fbbc f1fe 	udiv	r1, ip, lr
 8001082:	0c05      	lsrs	r5, r0, #16
 8001084:	fb0e cc11 	mls	ip, lr, r1, ip
 8001088:	fa1f f887 	uxth.w	r8, r7
 800108c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001090:	fb01 f308 	mul.w	r3, r1, r8
 8001094:	42ab      	cmp	r3, r5
 8001096:	fa04 f402 	lsl.w	r4, r4, r2
 800109a:	d909      	bls.n	80010b0 <__udivmoddi4+0x19c>
 800109c:	197d      	adds	r5, r7, r5
 800109e:	f101 3cff 	add.w	ip, r1, #4294967295
 80010a2:	f080 808b 	bcs.w	80011bc <__udivmoddi4+0x2a8>
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	f240 8088 	bls.w	80011bc <__udivmoddi4+0x2a8>
 80010ac:	3902      	subs	r1, #2
 80010ae:	443d      	add	r5, r7
 80010b0:	1aeb      	subs	r3, r5, r3
 80010b2:	b285      	uxth	r5, r0
 80010b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80010b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80010bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010c0:	fb00 f308 	mul.w	r3, r0, r8
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	d907      	bls.n	80010d8 <__udivmoddi4+0x1c4>
 80010c8:	197d      	adds	r5, r7, r5
 80010ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80010ce:	d271      	bcs.n	80011b4 <__udivmoddi4+0x2a0>
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d96f      	bls.n	80011b4 <__udivmoddi4+0x2a0>
 80010d4:	3802      	subs	r0, #2
 80010d6:	443d      	add	r5, r7
 80010d8:	1aeb      	subs	r3, r5, r3
 80010da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010de:	e778      	b.n	8000fd2 <__udivmoddi4+0xbe>
 80010e0:	f1c1 0c20 	rsb	ip, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f70c 	lsr.w	r7, r2, ip
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 f40c 	lsr.w	r4, r0, ip
 80010f0:	fa05 f301 	lsl.w	r3, r5, r1
 80010f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010f8:	fa25 f50c 	lsr.w	r5, r5, ip
 80010fc:	431c      	orrs	r4, r3
 80010fe:	0c23      	lsrs	r3, r4, #16
 8001100:	fbb5 f9fe 	udiv	r9, r5, lr
 8001104:	fa1f f887 	uxth.w	r8, r7
 8001108:	fb0e 5519 	mls	r5, lr, r9, r5
 800110c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8001110:	fb09 fa08 	mul.w	sl, r9, r8
 8001114:	45aa      	cmp	sl, r5
 8001116:	fa02 f201 	lsl.w	r2, r2, r1
 800111a:	fa00 f301 	lsl.w	r3, r0, r1
 800111e:	d908      	bls.n	8001132 <__udivmoddi4+0x21e>
 8001120:	197d      	adds	r5, r7, r5
 8001122:	f109 30ff 	add.w	r0, r9, #4294967295
 8001126:	d247      	bcs.n	80011b8 <__udivmoddi4+0x2a4>
 8001128:	45aa      	cmp	sl, r5
 800112a:	d945      	bls.n	80011b8 <__udivmoddi4+0x2a4>
 800112c:	f1a9 0902 	sub.w	r9, r9, #2
 8001130:	443d      	add	r5, r7
 8001132:	eba5 050a 	sub.w	r5, r5, sl
 8001136:	b2a4      	uxth	r4, r4
 8001138:	fbb5 f0fe 	udiv	r0, r5, lr
 800113c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001140:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001144:	fb00 f808 	mul.w	r8, r0, r8
 8001148:	45a0      	cmp	r8, r4
 800114a:	d907      	bls.n	800115c <__udivmoddi4+0x248>
 800114c:	193c      	adds	r4, r7, r4
 800114e:	f100 35ff 	add.w	r5, r0, #4294967295
 8001152:	d22d      	bcs.n	80011b0 <__udivmoddi4+0x29c>
 8001154:	45a0      	cmp	r8, r4
 8001156:	d92b      	bls.n	80011b0 <__udivmoddi4+0x29c>
 8001158:	3802      	subs	r0, #2
 800115a:	443c      	add	r4, r7
 800115c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001160:	eba4 0408 	sub.w	r4, r4, r8
 8001164:	fba0 8902 	umull	r8, r9, r0, r2
 8001168:	454c      	cmp	r4, r9
 800116a:	46c6      	mov	lr, r8
 800116c:	464d      	mov	r5, r9
 800116e:	d319      	bcc.n	80011a4 <__udivmoddi4+0x290>
 8001170:	d016      	beq.n	80011a0 <__udivmoddi4+0x28c>
 8001172:	b15e      	cbz	r6, 800118c <__udivmoddi4+0x278>
 8001174:	ebb3 020e 	subs.w	r2, r3, lr
 8001178:	eb64 0405 	sbc.w	r4, r4, r5
 800117c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001180:	40ca      	lsrs	r2, r1
 8001182:	ea4c 0202 	orr.w	r2, ip, r2
 8001186:	40cc      	lsrs	r4, r1
 8001188:	e9c6 2400 	strd	r2, r4, [r6]
 800118c:	2100      	movs	r1, #0
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	4631      	mov	r1, r6
 8001194:	4630      	mov	r0, r6
 8001196:	e70e      	b.n	8000fb6 <__udivmoddi4+0xa2>
 8001198:	46ac      	mov	ip, r5
 800119a:	e6ed      	b.n	8000f78 <__udivmoddi4+0x64>
 800119c:	4618      	mov	r0, r3
 800119e:	e701      	b.n	8000fa4 <__udivmoddi4+0x90>
 80011a0:	4543      	cmp	r3, r8
 80011a2:	d2e6      	bcs.n	8001172 <__udivmoddi4+0x25e>
 80011a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80011a8:	eb69 0507 	sbc.w	r5, r9, r7
 80011ac:	3801      	subs	r0, #1
 80011ae:	e7e0      	b.n	8001172 <__udivmoddi4+0x25e>
 80011b0:	4628      	mov	r0, r5
 80011b2:	e7d3      	b.n	800115c <__udivmoddi4+0x248>
 80011b4:	4660      	mov	r0, ip
 80011b6:	e78f      	b.n	80010d8 <__udivmoddi4+0x1c4>
 80011b8:	4681      	mov	r9, r0
 80011ba:	e7ba      	b.n	8001132 <__udivmoddi4+0x21e>
 80011bc:	4661      	mov	r1, ip
 80011be:	e777      	b.n	80010b0 <__udivmoddi4+0x19c>
 80011c0:	4608      	mov	r0, r1
 80011c2:	e74b      	b.n	800105c <__udivmoddi4+0x148>
 80011c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80011c8:	443d      	add	r5, r7
 80011ca:	e715      	b.n	8000ff8 <__udivmoddi4+0xe4>
 80011cc:	3802      	subs	r0, #2
 80011ce:	443c      	add	r4, r7
 80011d0:	e726      	b.n	8001020 <__udivmoddi4+0x10c>
 80011d2:	bf00      	nop

080011d4 <__aeabi_idiv0>:
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f001 f946 	bl	8002470 <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 80011e4:	f001 f908 	bl	80023f8 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <config_init+0x1c>)
 80011ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ee:	611a      	str	r2, [r3, #16]
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58004000 	.word	0x58004000

080011f8 <config_save>:

int config_save(config_t * param)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	  uint32_t  PAGEError = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

	  static FLASH_EraseInitTypeDef EraseInitStruct;
	  HAL_StatusTypeDef sta ;

	  uint32_t adress = FLASH_USER_START_ADDR ;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <config_save+0x64>)
 8001206:	61fb      	str	r3, [r7, #28]
	  //config_t myconfig = *param ;
	  uint64_t mydata  ;

	  memcpy(&mydata ,param , (int)sizeof(config_t) ) ;
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2208      	movs	r2, #8
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f008 f93b 	bl	800948c <memcpy>

	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <config_save+0x68>)
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = FLASH_PAGE_NB - 1 ;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <config_save+0x68>)
 800121e:	227f      	movs	r2, #127	; 0x7f
 8001220:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 1 ;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <config_save+0x68>)
 8001224:	2201      	movs	r2, #1
 8001226:	609a      	str	r2, [r3, #8]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) ;
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <config_save+0x68>)
 8001230:	f001 f9e4 	bl	80025fc <HAL_FLASHEx_Erase>

	  sta = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD ,adress , mydata);
 8001234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001238:	69f9      	ldr	r1, [r7, #28]
 800123a:	2001      	movs	r0, #1
 800123c:	f001 f898 	bl	8002370 <HAL_FLASH_Program>
 8001240:	4603      	mov	r3, r0
 8001242:	76fb      	strb	r3, [r7, #27]

	  HAL_FLASH_Lock() ;
 8001244:	f001 f8fa 	bl	800243c <HAL_FLASH_Lock>

	  if(sta != HAL_OK )
 8001248:	7efb      	ldrb	r3, [r7, #27]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <config_save+0x5a>
	  {
		  return CONFIG_ERROR ;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <config_save+0x5c>
	  }
	  else
	  {
		  return CONFIG_OK ;
 8001252:	2300      	movs	r3, #0
	  }

}
 8001254:	4618      	mov	r0, r3
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	0803f800 	.word	0x0803f800
 8001260:	200001fc 	.word	0x200001fc

08001264 <config_load>:

void config_load(config_t * param)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 800126c:	2008      	movs	r0, #8
 800126e:	f008 f8fd 	bl	800946c <malloc>
 8001272:	4603      	mov	r3, r0
 8001274:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <config_load+0x54>)
 8001278:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	e00b      	b.n	8001298 <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	68f9      	ldr	r1, [r7, #12]
 8001286:	440b      	add	r3, r1
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	3301      	adds	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9f0      	bls.n	8001280 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 800129e:	2208      	movs	r2, #8
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f008 f8f2 	bl	800948c <memcpy>

	free(p_mydata) ;
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f008 f8e7 	bl	800947c <free>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0803f800 	.word	0x0803f800

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4906      	ldr	r1, [pc, #24]	; (80012f0 <__NVIC_EnableIRQ+0x34>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001358:	f023 0218 	bic.w	r2, r3, #24
 800135c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4313      	orrs	r3, r2
 8001364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4013      	ands	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32 sys_get_tick()
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 80013a6:	f000 fea9 	bl	80020fc <HAL_GetTick>
 80013aa:	4603      	mov	r3, r0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <sys_random>:

extern u8  sys_random()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 80013b4:	f000 fb6c 	bl	8001a90 <get_random>
 80013b8:	4601      	mov	r1, r0
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <sys_random+0x20>)
 80013bc:	fba3 2301 	umull	r2, r3, r3, r1
 80013c0:	09da      	lsrs	r2, r3, #7
 80013c2:	4613      	mov	r3, r2
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	1aca      	subs	r2, r1, r3
 80013ca:	b2d3      	uxtb	r3, r2
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	80808081 	.word	0x80808081

080013d4 <main>:

#endif


int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0a2      	sub	sp, #136	; 0x88
 80013d8:	af02      	add	r7, sp, #8

  HAL_Init();
 80013da:	f000 fe23 	bl	8002024 <HAL_Init>

  SystemClock_Config();
 80013de:	f000 f90d 	bl	80015fc <SystemClock_Config>

  MX_GPIO_Init();
 80013e2:	f000 f9b9 	bl	8001758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013e6:	f000 f963 	bl	80016b0 <MX_USART1_UART_Init>
  SubghzApp_Init();
 80013ea:	f000 fb5b 	bl	8001aa4 <SubghzApp_Init>

#ifdef RECEIVER

  config_t param ;

  config_init();
 80013ee:	f7ff fef3 	bl	80011d8 <config_init>

  config_load(&param) ;
 80013f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff34 	bl	8001264 <config_load>

  printf("saved param seuil %f , periode %d\n",param.seuil , param.periode) ;
 80013fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f88a 	bl	8000518 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800140a:	9100      	str	r1, [sp, #0]
 800140c:	483e      	ldr	r0, [pc, #248]	; (8001508 <main+0x134>)
 800140e:	f008 fdf9 	bl	800a004 <iprintf>

  printf("Node receiver \n");
 8001412:	483e      	ldr	r0, [pc, #248]	; (800150c <main+0x138>)
 8001414:	f008 fe7c 	bl	800a110 <puts>

  ll_init(RECEIVER_ADDRESS) ;
 8001418:	204d      	movs	r0, #77	; 0x4d
 800141a:	f007 fb35 	bl	8008a88 <ll_init>

  char feedback[50];
  u8 recv[50] ;
  u8 send_feedback = 0 ;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t feedback_timer = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78
  int feedback_periode = 0 ;
 8001428:	2300      	movs	r3, #0
 800142a:	677b      	str	r3, [r7, #116]	; 0x74



#ifdef RECEIVER

	  int len = ll_get_recv_from( TRANSMITTER_ADDRESS , recv) ;
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	2034      	movs	r0, #52	; 0x34
 8001432:	f007 fdc9 	bl	8008fc8 <ll_get_recv_from>
 8001436:	6738      	str	r0, [r7, #112]	; 0x70

	  if(len>0)
 8001438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800143a:	2b00      	cmp	r3, #0
 800143c:	dd30      	ble.n	80014a0 <main+0xcc>
	  {
		  recv[len] = 0 ;
 800143e:	463a      	mov	r2, r7
 8001440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001442:	4413      	add	r3, r2
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
		  printf("data from %d: %s$\n" , 52 ,recv) ;
 8001448:	463b      	mov	r3, r7
 800144a:	461a      	mov	r2, r3
 800144c:	2134      	movs	r1, #52	; 0x34
 800144e:	4830      	ldr	r0, [pc, #192]	; (8001510 <main+0x13c>)
 8001450:	f008 fdd8 	bl	800a004 <iprintf>
		  //float seuil ;
		  //int periode ;
		  parse_transmetter_data((char*)recv , len ,&param.seuil,&param.periode ) ;
 8001454:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001458:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800145c:	1d1a      	adds	r2, r3, #4
 800145e:	4638      	mov	r0, r7
 8001460:	460b      	mov	r3, r1
 8001462:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001464:	f000 f85e 	bl	8001524 <parse_transmetter_data>
		  printf("config seuil :%0.2f, per :%d\n",param.seuil , param.periode);
 8001468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f854 	bl	8000518 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001476:	9100      	str	r1, [sp, #0]
 8001478:	4826      	ldr	r0, [pc, #152]	; (8001514 <main+0x140>)
 800147a:	f008 fdc3 	bl	800a004 <iprintf>

		  //save to the flash
		  config_save(&param) ;
 800147e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff feb8 	bl	80011f8 <config_save>

		  send_feedback = 1 ;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		  feedback_periode = param.periode * 1000;
 800148e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	677b      	str	r3, [r7, #116]	; 0x74
		  feedback_timer =  HAL_GetTick() ;
 800149a:	f000 fe2f 	bl	80020fc <HAL_GetTick>
 800149e:	67b8      	str	r0, [r7, #120]	; 0x78

		  //save config
	  }

	  if(send_feedback == 1)
 80014a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d12b      	bne.n	8001500 <main+0x12c>
	  {
		  if(HAL_GetTick() - feedback_timer >= feedback_periode )
 80014a8:	f000 fe28 	bl	80020fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014b0:	1ad2      	subs	r2, r2, r3
 80014b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d323      	bcc.n	8001500 <main+0x12c>
		  {
			  sprintf(feedback ,"seuil :%f" ,get_flow(feedback_periode));
 80014b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80014ba:	f000 f88b 	bl	80015d4 <get_flow>
 80014be:	4603      	mov	r3, r0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f829 	bl	8000518 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80014ce:	4912      	ldr	r1, [pc, #72]	; (8001518 <main+0x144>)
 80014d0:	f008 fe36 	bl	800a140 <siprintf>

			  //reset the count of pulse
			  number_of_pulses = 0 ;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <main+0x148>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

			  ll_send_to(TRANSMITTER_ADDRESS ,(u8*) feedback , strlen(feedback) );
 80014da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe58 	bl	8000194 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ec:	4619      	mov	r1, r3
 80014ee:	2034      	movs	r0, #52	; 0x34
 80014f0:	f007 fb66 	bl	8008bc0 <ll_send_to>
			  feedback_timer =  HAL_GetTick() ;
 80014f4:	f000 fe02 	bl	80020fc <HAL_GetTick>
 80014f8:	67b8      	str	r0, [r7, #120]	; 0x78
			  printf("feedback send\n");
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <main+0x14c>)
 80014fc:	f008 fe08 	bl	800a110 <puts>
	  		printf("receiver :%s\n" , recv_data) ;
	  	  }

#endif

	  ll_process() ;
 8001500:	f007 fdc6 	bl	8009090 <ll_process>
  {
 8001504:	e792      	b.n	800142c <main+0x58>
 8001506:	bf00      	nop
 8001508:	0800df48 	.word	0x0800df48
 800150c:	0800df6c 	.word	0x0800df6c
 8001510:	0800df7c 	.word	0x0800df7c
 8001514:	0800df90 	.word	0x0800df90
 8001518:	0800dfb0 	.word	0x0800dfb0
 800151c:	20000208 	.word	0x20000208
 8001520:	0800dfbc 	.word	0x0800dfbc

08001524 <parse_transmetter_data>:
	(void) tmp ;
	return 0 ;
}
#else
int parse_transmetter_data(char * t_data , int len , float *seuil , int *periode)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
	char tmp[6] ;

	//seuil :%0.2f , periode : %d
	char * per = strstr(t_data , ", periode :");
 8001532:	4926      	ldr	r1, [pc, #152]	; (80015cc <parse_transmetter_data+0xa8>)
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f009 f809 	bl	800a54c <strstr>
 800153a:	61f8      	str	r0, [r7, #28]

	if(per == NULL)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <parse_transmetter_data+0x24>
	{
		return -1 ;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e03c      	b.n	80015c2 <parse_transmetter_data+0x9e>
	}

	char * se = strstr(t_data , "seuil :");
 8001548:	4921      	ldr	r1, [pc, #132]	; (80015d0 <parse_transmetter_data+0xac>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f008 fffe 	bl	800a54c <strstr>
 8001550:	61b8      	str	r0, [r7, #24]

	if(se == NULL)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <parse_transmetter_data+0x3a>
	{
		return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e031      	b.n	80015c2 <parse_transmetter_data+0x9e>
	}

	se += 7 ;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	3307      	adds	r3, #7
 8001562:	61bb      	str	r3, [r7, #24]
	memcpy(tmp , se, per - se);
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	69b9      	ldr	r1, [r7, #24]
 8001572:	4618      	mov	r0, r3
 8001574:	f007 ff8a 	bl	800948c <memcpy>
	*seuil = atof(tmp) ;
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4618      	mov	r0, r3
 800157e:	f007 ff44 	bl	800940a <atof>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb15 	bl	8000bb8 <__aeabi_d2f>
 800158e:	4602      	mov	r2, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]

	//printf("seuil %0.2f\n" , *seuil);

	per += 12;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	330c      	adds	r3, #12
 8001598:	61fb      	str	r3, [r7, #28]
	memcpy(tmp , per ,(t_data+len - 1) - per) ;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	441a      	add	r2, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	69f9      	ldr	r1, [r7, #28]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 ff6c 	bl	800948c <memcpy>

	*periode = atoi(per) ;
 80015b4:	69f8      	ldr	r0, [r7, #28]
 80015b6:	f007 ff2b 	bl	8009410 <atoi>
 80015ba:	4602      	mov	r2, r0
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	601a      	str	r2, [r3, #0]
	//printf("periode %d \n" , *periode );
	//printf("per :%s$\n" , per);

	return 0 ;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0800dfcc 	.word	0x0800dfcc
 80015d0:	0800dfd8 	.word	0x0800dfd8

080015d4 <get_flow>:

//debit
float get_flow(int periode)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	return number_of_pulses / periode ;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <get_flow+0x24>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fbf0 	bl	8000dcc <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000208 	.word	0x20000208

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09a      	sub	sp, #104	; 0x68
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2248      	movs	r2, #72	; 0x48
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f007 ff4c 	bl	80094a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001622:	f001 fa37 	bl	8002a94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fe8e 	bl	8001348 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <SystemClock_Config+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <SystemClock_Config+0xb0>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <SystemClock_Config+0xb0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001648:	2324      	movs	r3, #36	; 0x24
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800164c:	2381      	movs	r3, #129	; 0x81
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001654:	2300      	movs	r3, #0
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001658:	23b0      	movs	r3, #176	; 0xb0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fcbf 	bl	8002fe8 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001670:	f000 f879 	bl	8001766 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001674:	234f      	movs	r3, #79	; 0x4f
 8001676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f002 f842 	bl	800371c <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800169e:	f000 f862 	bl	8001766 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3768      	adds	r7, #104	; 0x68
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	58000400 	.word	0x58000400

080016b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <MX_USART1_UART_Init+0xa4>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f8:	4815      	ldr	r0, [pc, #84]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 80016fa:	f003 f9a4 	bl	8004a46 <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 f82f 	bl	8001766 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 800170c:	f003 ff90 	bl	8005630 <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001716:	f000 f826 	bl	8001766 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 800171e:	f003 ffc5 	bl	80056ac <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001728:	f000 f81d 	bl	8001766 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <MX_USART1_UART_Init+0xa0>)
 800172e:	f003 ff47 	bl	80055c0 <HAL_UARTEx_DisableFifoMode>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 f815 	bl	8001766 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 800173c:	2024      	movs	r0, #36	; 0x24
 800173e:	f7ff fdbd 	bl	80012bc <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 8001742:	2101      	movs	r1, #1
 8001744:	2024      	movs	r0, #36	; 0x24
 8001746:	f7ff fdd5 	bl	80012f4 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000480 	.word	0x20000480
 8001754:	40013800 	.word	0x40013800

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	2002      	movs	r0, #2
 800175e:	f7ff fe08 	bl	8001372 <LL_AHB2_GRP1_EnableClock>

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176a:	b672      	cpsid	i
}
 800176c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176e:	e7fe      	b.n	800176e <Error_Handler+0x8>

08001770 <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 8001776:	1d39      	adds	r1, r7, #4
 8001778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177c:	2201      	movs	r2, #1
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <__io_getchar+0x20>)
 8001780:	f003 fa47 	bl	8004c12 <HAL_UART_Receive>
	return ch ;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000480 	.word	0x20000480

08001794 <__io_putchar>:

int __io_putchar(int ch)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	230a      	movs	r3, #10
 80017a0:	2201      	movs	r2, #1
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <__io_putchar+0x20>)
 80017a4:	f003 f99f 	bl	8004ae6 <HAL_UART_Transmit>
	return ch ;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000480 	.word	0x20000480

080017b8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80017bc:	f000 fb82 	bl	8001ec4 <BSP_RADIO_Init>
 80017c0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fbb4 	bl	8001f40 <BSP_RADIO_ConfigRFSwitch>
 80017d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80017e6:	f000 fc07 	bl	8001ff8 <BSP_RADIO_GetTxConfig>
 80017ea:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80017f4:	f000 fc07 	bl	8002006 <BSP_RADIO_IsTCXO>
 80017f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}

080017fe <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8001802:	f000 fc07 	bl	8002014 <BSP_RADIO_IsDCDC>
 8001806:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}

0800180c <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d302      	bcc.n	8001834 <ring_pushOver+0x28>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e002      	b.n	800183a <ring_pushOver+0x2e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	d110      	bne.n	800186c <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	d302      	bcc.n	800185e <ring_pushOver+0x52>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e002      	b.n	8001864 <ring_pushOver+0x58>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	60d3      	str	r3, [r2, #12]
        return 1;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <ring_pushOver+0x62>
    }
    
    return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_AHB2_GRP1_EnableClock>:
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b096      	sub	sp, #88	; 0x58
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2238      	movs	r2, #56	; 0x38
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fdcf 	bl	80094a8 <memset>
  if(huart->Instance==USART1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <HAL_UART_MspInit+0x94>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d12d      	bne.n	8001970 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001914:	2301      	movs	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001918:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800191c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f002 faa0 	bl	8003e68 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800192e:	f7ff ff1a 	bl	8001766 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001932:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001936:	f7ff ffb7 	bl	80018a8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2002      	movs	r0, #2
 800193c:	f7ff ff9c 	bl	8001878 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001940:	23c0      	movs	r3, #192	; 0xc0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2307      	movs	r3, #7
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001958:	4619      	mov	r1, r3
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <HAL_UART_MspInit+0x98>)
 800195c:	f000 ff22 	bl	80027a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2024      	movs	r0, #36	; 0x24
 8001966:	f000 fcce 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800196a:	2024      	movs	r0, #36	; 0x24
 800196c:	f000 fce5 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3758      	adds	r7, #88	; 0x58
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40013800 	.word	0x40013800
 800197c:	48000400 	.word	0x48000400

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c6:	f000 fb87 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <USART1_IRQHandler+0x2c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <USART1_IRQHandler+0x2c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fa10 	bl	8001e14 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000480 	.word	0x20000480

08001a00 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a06:	f002 fe5f 	bl	80046c8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000510 	.word	0x20000510

08001a14 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a38:	68fb      	ldr	r3, [r7, #12]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SUBGHZ_Init+0x20>)
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_SUBGHZ_Init+0x20>)
 8001a50:	f002 fbbe 	bl	80041d0 <HAL_SUBGHZ_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001a5a:	f7ff fe84 	bl	8001766 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000510 	.word	0x20000510

08001a68 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ffcf 	bl	8001a14 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2032      	movs	r0, #50	; 0x32
 8001a7c:	f000 fc43 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a80:	2032      	movs	r0, #50	; 0x32
 8001a82:	f000 fc5a 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <get_random+0x10>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4798      	blx	r3
 8001a9a:	4603      	mov	r3, r0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	0800e450 	.word	0x0800e450

08001aa4 <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b08b      	sub	sp, #44	; 0x2c
 8001aa8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2201      	movs	r2, #1
 8001aae:	2101      	movs	r1, #1
 8001ab0:	483d      	ldr	r0, [pc, #244]	; (8001ba8 <SubghzApp_Init+0x104>)
 8001ab2:	f008 faa7 	bl	800a004 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <SubghzApp_Init+0x108>)
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <SubghzApp_Init+0x10c>)
 8001aba:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <SubghzApp_Init+0x108>)
 8001abe:	4a3d      	ldr	r2, [pc, #244]	; (8001bb4 <SubghzApp_Init+0x110>)
 8001ac0:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <SubghzApp_Init+0x108>)
 8001ac4:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <SubghzApp_Init+0x114>)
 8001ac6:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <SubghzApp_Init+0x108>)
 8001aca:	4a3c      	ldr	r2, [pc, #240]	; (8001bbc <SubghzApp_Init+0x118>)
 8001acc:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <SubghzApp_Init+0x108>)
 8001ad0:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <SubghzApp_Init+0x11c>)
 8001ad2:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4834      	ldr	r0, [pc, #208]	; (8001bac <SubghzApp_Init+0x108>)
 8001ada:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <SubghzApp_Init+0x124>)
 8001ae2:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001ae4:	4839      	ldr	r0, [pc, #228]	; (8001bcc <SubghzApp_Init+0x128>)
 8001ae6:	f008 fa8d 	bl	800a004 <iprintf>
  printf("LORA_MODULATION\n\r");
 8001aea:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <SubghzApp_Init+0x12c>)
 8001aec:	f008 fa8a 	bl	800a004 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001af0:	217d      	movs	r1, #125	; 0x7d
 8001af2:	4838      	ldr	r0, [pc, #224]	; (8001bd4 <SubghzApp_Init+0x130>)
 8001af4:	f008 fa86 	bl	800a004 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001af8:	2107      	movs	r1, #7
 8001afa:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <SubghzApp_Init+0x134>)
 8001afc:	f008 fa82 	bl	800a004 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001b02:	69dc      	ldr	r4, [r3, #28]
 8001b04:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b08:	9308      	str	r3, [sp, #32]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9307      	str	r3, [sp, #28]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9306      	str	r3, [sp, #24]
 8001b12:	2300      	movs	r3, #0
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	2301      	movs	r3, #1
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	2308      	movs	r3, #8
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2307      	movs	r3, #7
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2114      	movs	r1, #20
 8001b30:	2001      	movs	r0, #1
 8001b32:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001b36:	699c      	ldr	r4, [r3, #24]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9308      	str	r3, [sp, #32]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9307      	str	r3, [sp, #28]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9306      	str	r3, [sp, #24]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9305      	str	r3, [sp, #20]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	2305      	movs	r3, #5
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	2308      	movs	r3, #8
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	2207      	movs	r2, #7
 8001b64:	2100      	movs	r1, #0
 8001b66:	2001      	movs	r0, #1
 8001b68:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	21ff      	movs	r1, #255	; 0xff
 8001b70:	2001      	movs	r0, #1
 8001b72:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4798      	blx	r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	0d9b      	lsrs	r3, r3, #22
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <SubghzApp_Init+0x138>)
 8001b82:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001b84:	22ff      	movs	r2, #255	; 0xff
 8001b86:	2100      	movs	r1, #0
 8001b88:	4815      	ldr	r0, [pc, #84]	; (8001be0 <SubghzApp_Init+0x13c>)
 8001b8a:	f007 fc8d 	bl	80094a8 <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <SubghzApp_Init+0x120>)
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <SubghzApp_Init+0x138>)
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4798      	blx	r3

}
 8001b9e:	bf00      	nop
 8001ba0:	3704      	adds	r7, #4
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800dfe0 	.word	0x0800dfe0
 8001bac:	2000020c 	.word	0x2000020c
 8001bb0:	08001be5 	.word	0x08001be5
 8001bb4:	08001bf1 	.word	0x08001bf1
 8001bb8:	08001c1d 	.word	0x08001c1d
 8001bbc:	08001c39 	.word	0x08001c39
 8001bc0:	08001c55 	.word	0x08001c55
 8001bc4:	0800e450 	.word	0x0800e450
 8001bc8:	33bca100 	.word	0x33bca100
 8001bcc:	0800dffc 	.word	0x0800dffc
 8001bd0:	0800e010 	.word	0x0800e010
 8001bd4:	0800e024 	.word	0x0800e024
 8001bd8:	0800e038 	.word	0x0800e038
 8001bdc:	2000032c 	.word	0x2000032c
 8001be0:	2000022c 	.word	0x2000022c

08001be4 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001be8:	f007 fa72 	bl	80090d0 <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f007 f898 	bl	8008d44 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001c20:	4803      	ldr	r0, [pc, #12]	; (8001c30 <OnTxTimeout+0x14>)
 8001c22:	f008 f9ef 	bl	800a004 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8001c26:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <OnTxTimeout+0x18>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	0800e048 	.word	0x0800e048
 8001c34:	20000228 	.word	0x20000228

08001c38 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <OnRxTimeout+0x14>)
 8001c3e:	f008 f9e1 	bl	800a004 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <OnRxTimeout+0x18>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800e058 	.word	0x0800e058
 8001c50:	20000228 	.word	0x20000228

08001c54 <OnRxError>:

static void OnRxError(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <OnRxError+0x14>)
 8001c5a:	f008 f9d3 	bl	800a004 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8001c5e:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <OnRxError+0x18>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	701a      	strb	r2, [r3, #0]
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800e068 	.word	0x0800e068
 8001c6c:	20000228 	.word	0x20000228

08001c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
	return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <_kill>:

int _kill(int pid, int sig)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c88:	f007 fbc6 	bl	8009418 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2216      	movs	r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
	return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_exit>:

void _exit (int status)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffe7 	bl	8001c7e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cb0:	e7fe      	b.n	8001cb0 <_exit+0x12>

08001cb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e00a      	b.n	8001cda <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cc4:	f7ff fd54 	bl	8001770 <__io_getchar>
 8001cc8:	4601      	mov	r1, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf0      	blt.n	8001cc4 <_read+0x12>
	}

return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e009      	b.n	8001d12 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd44 	bl	8001794 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf1      	blt.n	8001cfe <_write+0x12>
	}
	return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_close>:

int _close(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f007 fb30 	bl	8009418 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20008000 	.word	0x20008000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000330 	.word	0x20000330
 8001dec:	20000608 	.word	0x20000608

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <set_NL_detection+0x14>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000334 	.word	0x20000334

08001e14 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b0a      	cmp	r3, #10
 8001e22:	d101      	bne.n	8001e28 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001e24:	f7ff ffea 	bl	8001dfc <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <uart_RX_interrupt_hanlder+0x28>)
 8001e2e:	f7ff fced 	bl	800180c <ring_pushOver>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000051c 	.word	0x2000051c

08001e40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e44:	f7ff ffd4 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <LoopForever+0xe>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	; (8001e8c <LoopForever+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e6e:	f007 fad9 	bl	8009424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e72:	f7ff faaf 	bl	80013d4 <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   r0, =_estack
 8001e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e84:	0800f0dc 	.word	0x0800f0dc
  ldr r2, =_sbss
 8001e88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e8c:	20000608 	.word	0x20000608

08001e90 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>

08001e92 <LL_AHB2_GRP1_EnableClock>:
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001ed8:	2004      	movs	r0, #4
 8001eda:	f7ff ffda 	bl	8001e92 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001ede:	2310      	movs	r3, #16
 8001ee0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4812      	ldr	r0, [pc, #72]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001ef4:	f000 fc56 	bl	80027a4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	480e      	ldr	r0, [pc, #56]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001f02:	f000 fc4f 	bl	80027a4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001f06:	2308      	movs	r3, #8
 8001f08:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480b      	ldr	r0, [pc, #44]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001f10:	f000 fc48 	bl	80027a4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001f14:	2200      	movs	r2, #0
 8001f16:	2120      	movs	r1, #32
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001f1a:	f000 fda3 	bl	8002a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2110      	movs	r1, #16
 8001f22:	4806      	ldr	r0, [pc, #24]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001f24:	f000 fd9e 	bl	8002a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <BSP_RADIO_Init+0x78>)
 8001f2e:	f000 fd99 	bl	8002a64 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	48000800 	.word	0x48000800

08001f40 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d84b      	bhi.n	8001fe8 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001f50:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001f69 	.word	0x08001f69
 8001f5c:	08001f89 	.word	0x08001f89
 8001f60:	08001fa9 	.word	0x08001fa9
 8001f64:	08001fc9 	.word	0x08001fc9
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2108      	movs	r1, #8
 8001f6c:	4821      	ldr	r0, [pc, #132]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f6e:	f000 fd79 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f78:	f000 fd74 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2120      	movs	r1, #32
 8001f80:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f82:	f000 fd6f 	bl	8002a64 <HAL_GPIO_WritePin>
      break;      
 8001f86:	e030      	b.n	8001fea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f8e:	f000 fd69 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001f92:	2201      	movs	r2, #1
 8001f94:	2110      	movs	r1, #16
 8001f96:	4817      	ldr	r0, [pc, #92]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f98:	f000 fd64 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fa2:	f000 fd5f 	bl	8002a64 <HAL_GPIO_WritePin>
      break;
 8001fa6:	e020      	b.n	8001fea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2108      	movs	r1, #8
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fae:	f000 fd59 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	480f      	ldr	r0, [pc, #60]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fb8:	f000 fd54 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fc2:	f000 fd4f 	bl	8002a64 <HAL_GPIO_WritePin>
      break;
 8001fc6:	e010      	b.n	8001fea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2108      	movs	r1, #8
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fce:	f000 fd49 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fd8:	f000 fd44 	bl	8002a64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2120      	movs	r1, #32
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fe2:	f000 fd3f 	bl	8002a64 <HAL_GPIO_WritePin>
      break;
 8001fe6:	e000      	b.n	8001fea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001fe8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	48000800 	.word	0x48000800

08001ff8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202e:	2003      	movs	r0, #3
 8002030:	f000 f95e 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002034:	f001 fd36 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8002038:	4603      	mov	r3, r0
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_Init+0x3c>)
 800203c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	200f      	movs	r0, #15
 8002040:	f000 f810 	bl	8002064 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002050:	f7ff fc42 	bl	80018d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	79fb      	ldrb	r3, [r7, #7]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_InitTick+0x6c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d024      	beq.n	80020c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002078:	f001 fd14 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_InitTick+0x6c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002088:	fbb3 f3f1 	udiv	r3, r3, r1
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f960 	bl	8002356 <HAL_SYSTICK_Config>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	d809      	bhi.n	80020b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a2:	2200      	movs	r2, #0
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	f04f 30ff 	mov.w	r0, #4294967295
 80020aa:	f000 f92c 	bl	8002306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_InitTick+0x70>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e007      	b.n	80020c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e004      	b.n	80020c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000008 	.word	0x20000008
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_IncTick+0x1c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_IncTick+0x20>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_IncTick+0x20>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000590 	.word	0x20000590

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <HAL_GetTick+0x10>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000590 	.word	0x20000590

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff fff0 	bl	80020fc <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_Delay+0x44>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffe0 	bl	80020fc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008

08002158 <__NVIC_SetPriorityGrouping>:
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <__NVIC_EnableIRQ+0x34>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff90 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff2d 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff44 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff92 	bl	8002248 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff61 	bl	80021f4 <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff37 	bl	80021bc <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa4 	bl	80022ac <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_FLASH_Program+0x80>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_FLASH_Program+0x1a>
 8002386:	2302      	movs	r3, #2
 8002388:	e02d      	b.n	80023e6 <HAL_FLASH_Program+0x76>
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_FLASH_Program+0x80>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_FLASH_Program+0x80>)
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800239a:	f000 f869 	bl	8002470 <FLASH_WaitForLastOperation>
 800239e:	4603      	mov	r3, r0
 80023a0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11a      	bne.n	80023de <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80023ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b2:	68b8      	ldr	r0, [r7, #8]
 80023b4:	f000 f8be 	bl	8002534 <FLASH_Program_DoubleWord>
 80023b8:	e004      	b.n	80023c4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	68b8      	ldr	r0, [r7, #8]
 80023c0:	f000 f8de 	bl	8002580 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c8:	f000 f852 	bl	8002470 <FLASH_WaitForLastOperation>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_FLASH_Program+0x84>)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <HAL_FLASH_Program+0x84>)
 80023da:	4013      	ands	r3, r2
 80023dc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_FLASH_Program+0x80>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000338 	.word	0x20000338
 80023f4:	58004000 	.word	0x58004000

080023f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_FLASH_Unlock+0x38>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da0b      	bge.n	8002422 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_FLASH_Unlock+0x38>)
 800240c:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_FLASH_Unlock+0x3c>)
 800240e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_FLASH_Unlock+0x38>)
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_FLASH_Unlock+0x40>)
 8002414:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_FLASH_Unlock+0x38>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da01      	bge.n	8002422 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002422:	79fb      	ldrb	r3, [r7, #7]
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58004000 	.word	0x58004000
 8002434:	45670123 	.word	0x45670123
 8002438:	cdef89ab 	.word	0xcdef89ab

0800243c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_FLASH_Lock+0x30>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_FLASH_Lock+0x30>)
 800244c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002450:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_FLASH_Lock+0x30>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db01      	blt.n	800245e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800245e:	79fb      	ldrb	r3, [r7, #7]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	58004000 	.word	0x58004000

08002470 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fe40 	bl	80020fc <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800247e:	e009      	b.n	8002494 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002480:	f7ff fe3c 	bl	80020fc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d801      	bhi.n	8002494 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e047      	b.n	8002524 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d0ee      	beq.n	8002480 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80024be:	4013      	ands	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <FLASH_WaitForLastOperation+0x6c>
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80024d6:	4915      	ldr	r1, [pc, #84]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	618b      	str	r3, [r1, #24]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <FLASH_WaitForLastOperation+0x80>
 80024e6:	4a11      	ldr	r2, [pc, #68]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024ee:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00e      	beq.n	8002514 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <FLASH_WaitForLastOperation+0xc0>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e011      	b.n	8002524 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002500:	f7ff fdfc 	bl	80020fc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d801      	bhi.n	8002514 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e007      	b.n	8002524 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <FLASH_WaitForLastOperation+0xbc>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002520:	d0ee      	beq.n	8002500 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58004000 	.word	0x58004000
 8002530:	20000338 	.word	0x20000338

08002534 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <FLASH_Program_DoubleWord+0x48>)
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <FLASH_Program_DoubleWord+0x48>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002552:	f3bf 8f6f 	isb	sy
}
 8002556:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	000a      	movs	r2, r1
 8002566:	2300      	movs	r3, #0
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	3104      	adds	r1, #4
 800256c:	4613      	mov	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	58004000 	.word	0x58004000

08002580 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <FLASH_Program_Fast+0x78>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <FLASH_Program_Fast+0x78>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a2:	f3ef 8310 	mrs	r3, PRIMASK
 80025a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80025a8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80025aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	3304      	adds	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
    row_index--;
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ef      	bne.n	80025b0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80025d0:	bf00      	nop
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <FLASH_Program_Fast+0x78>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025de:	d0f8      	beq.n	80025d2 <FLASH_Program_Fast+0x52>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f383 8810 	msr	PRIMASK, r3
}
 80025ea:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80025ec:	bf00      	nop
 80025ee:	3724      	adds	r7, #36	; 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	58004000 	.word	0x58004000

080025fc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_FLASHEx_Erase+0xac>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_FLASHEx_Erase+0x16>
 800260e:	2302      	movs	r3, #2
 8002610:	e046      	b.n	80026a0 <HAL_FLASHEx_Erase+0xa4>
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_FLASHEx_Erase+0xac>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_FLASHEx_Erase+0xac>)
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800261e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002622:	f7ff ff25 	bl	8002470 <FLASH_WaitForLastOperation>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d133      	bne.n	8002698 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d108      	bne.n	800264a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8002638:	f000 f838 	bl	80026ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800263c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002640:	f7ff ff16 	bl	8002470 <FLASH_WaitForLastOperation>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e024      	b.n	8002694 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	e012      	b.n	8002680 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f000 f836 	bl	80026cc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002664:	f7ff ff04 	bl	8002470 <FLASH_WaitForLastOperation>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	601a      	str	r2, [r3, #0]
          break;
 8002678:	e00a      	b.n	8002690 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3301      	adds	r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4413      	add	r3, r2
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3e4      	bcc.n	800265a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8002690:	f000 f878 	bl	8002784 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002694:	f000 f832 	bl	80026fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_FLASHEx_Erase+0xac>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]

  return status;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000338 	.word	0x20000338

080026ac <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <FLASH_MassErase+0x1c>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <FLASH_MassErase+0x1c>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6153      	str	r3, [r2, #20]
#endif
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	58004000 	.word	0x58004000

080026cc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <FLASH_PageErase+0x2c>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <FLASH_PageErase+0x2c>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6153      	str	r3, [r2, #20]
#endif
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	58004000 	.word	0x58004000

080026fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002708:	2b01      	cmp	r3, #1
 800270a:	d117      	bne.n	800273c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <FLASH_FlushCaches+0x84>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002712:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <FLASH_FlushCaches+0x84>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <FLASH_FlushCaches+0x84>)
 800271e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <FLASH_FlushCaches+0x84>)
 800272a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <FLASH_FlushCaches+0x84>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b01      	cmp	r3, #1
 8002746:	d117      	bne.n	8002778 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <FLASH_FlushCaches+0x84>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <FLASH_FlushCaches+0x84>)
 800274e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <FLASH_FlushCaches+0x84>)
 800275a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800276a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <FLASH_FlushCaches+0x84>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <FLASH_FlushCaches+0x84>)
 8002772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	58004000 	.word	0x58004000

08002784 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <FLASH_AcknowledgePageErase+0x1c>)
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <FLASH_AcknowledgePageErase+0x1c>)
 800278e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002792:	f023 0302 	bic.w	r3, r3, #2
 8002796:	6153      	str	r3, [r2, #20]
#endif
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	58004000 	.word	0x58004000

080027a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b2:	e140      	b.n	8002a36 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8132 	beq.w	8002a30 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d005      	beq.n	80027e4 <HAL_GPIO_Init+0x40>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d130      	bne.n	8002846 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281a:	2201      	movs	r2, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 0201 	and.w	r2, r3, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b03      	cmp	r3, #3
 8002850:	d017      	beq.n	8002882 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d123      	bne.n	80028d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	6939      	ldr	r1, [r7, #16]
 80028d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0203 	and.w	r2, r3, #3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 808c 	beq.w	8002a30 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x2b0>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	2207      	movs	r2, #7
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002942:	d00d      	beq.n	8002960 <HAL_GPIO_Init+0x1bc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a44      	ldr	r2, [pc, #272]	; (8002a58 <HAL_GPIO_Init+0x2b4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x1b8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a43      	ldr	r2, [pc, #268]	; (8002a5c <HAL_GPIO_Init+0x2b8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_GPIO_Init+0x1b4>
 8002954:	2302      	movs	r3, #2
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x1be>
 8002958:	2307      	movs	r3, #7
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x1be>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x1be>
 8002960:	2300      	movs	r3, #0
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002972:	4938      	ldr	r1, [pc, #224]	; (8002a54 <HAL_GPIO_Init+0x2b0>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002986:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029a6:	4a2e      	ldr	r2, [pc, #184]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 80029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a2a:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3301      	adds	r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f47f aeb7 	bne.w	80027b4 <HAL_GPIO_Init+0x10>
  }
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	48000400 	.word	0x48000400
 8002a5c:	48000800 	.word	0x48000800
 8002a60:	58000800 	.word	0x58000800

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a03      	ldr	r2, [pc, #12]	; (8002aac <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	58000400 	.word	0x58000400

08002ab0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_PWREx_GetVoltageRange+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	58000400 	.word	0x58000400

08002ac8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad8:	d101      	bne.n	8002ade <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	58000400 	.word	0x58000400

08002aec <LL_RCC_HSE_EnableTcxo>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <LL_RCC_HSE_DisableTcxo>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b36:	d101      	bne.n	8002b3c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_HSE_Enable>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_HSE_Disable>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_HSE_IsReady>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b90:	d101      	bne.n	8002b96 <LL_RCC_HSE_IsReady+0x18>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <LL_RCC_HSE_IsReady+0x1a>
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSI_Enable>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_HSI_Disable>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_HSI_IsReady>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	d101      	bne.n	8002bf0 <LL_RCC_HSI_IsReady+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_RCC_HSI_IsReady+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_HSI_SetCalibTrimming>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d101      	bne.n	8002c3a <LL_RCC_LSE_IsReady+0x18>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_RCC_LSE_IsReady+0x1a>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d101      	bne.n	8002c9c <LL_RCC_LSI_IsReady+0x18>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_RCC_LSI_IsReady+0x1a>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d101      	bne.n	8002cf4 <LL_RCC_MSI_IsReady+0x16>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_RCC_MSI_IsReady+0x18>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d101      	bne.n	8002d14 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	6013      	str	r3, [r2, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef4:	d101      	bne.n	8002efa <LL_RCC_PLL_IsReady+0x18>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_RCC_PLL_IsReady+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0303 	and.w	r3, r3, #3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d101      	bne.n	8002f76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d101      	bne.n	8002f9a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb6:	d101      	bne.n	8002fbc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd8:	d101      	bne.n	8002fde <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e38a      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	f7ff fece 	bl	8002d9a <LL_RCC_GetSysClkSource>
 8002ffe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003000:	f7ff ffa2 	bl	8002f48 <LL_RCC_PLL_GetMainSource>
 8003004:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80c9 	beq.w	80031a6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x3e>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d17b      	bne.n	8003118 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d178      	bne.n	8003118 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003026:	f7ff fe5a 	bl	8002cde <LL_RCC_MSI_IsReady>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x54>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e369      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x72>
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003058:	e006      	b.n	8003068 <HAL_RCC_OscConfig+0x80>
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	4293      	cmp	r3, r2
 800306a:	d222      	bcs.n	80030b2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fd4f 	bl	8003b14 <RCC_SetFlashLatencyFromMSIRange>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e347      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fe4e 	bl	8002d4c <LL_RCC_MSI_SetCalibTrimming>
 80030b0:	e021      	b.n	80030f6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe35 	bl	8002d4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fd14 	bl	8003b14 <RCC_SetFlashLatencyFromMSIRange>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e30c      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030f6:	f000 fcd5 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4ab4      	ldr	r2, [pc, #720]	; (80033d0 <HAL_RCC_OscConfig+0x3e8>)
 80030fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003100:	4bb4      	ldr	r3, [pc, #720]	; (80033d4 <HAL_RCC_OscConfig+0x3ec>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe ffad 	bl	8002064 <HAL_InitTick>
 800310a:	4603      	mov	r3, r0
 800310c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d047      	beq.n	80031a4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	e2fb      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02c      	beq.n	800317a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003120:	f7ff fdc1 	bl	8002ca6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003124:	f7fe ffea 	bl	80020fc <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312c:	f7fe ffe6 	bl	80020fc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2e8      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800313e:	f7ff fdce 	bl	8002cde <LL_RCC_MSI_IsReady>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f1      	beq.n	800312c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f043 0308 	orr.w	r3, r3, #8
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fdea 	bl	8002d4c <LL_RCC_MSI_SetCalibTrimming>
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800317a:	f7ff fda2 	bl	8002cc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317e:	f7fe ffbd 	bl	80020fc <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003186:	f7fe ffb9 	bl	80020fc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e2bb      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003198:	f7ff fda1 	bl	8002cde <LL_RCC_MSI_IsReady>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f1      	bne.n	8003186 <HAL_RCC_OscConfig+0x19e>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d05f      	beq.n	8003272 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x1dc>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d10d      	bne.n	80031da <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d10a      	bne.n	80031da <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	f7ff fcdb 	bl	8002b7e <LL_RCC_HSE_IsReady>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d050      	beq.n	8003270 <HAL_RCC_OscConfig+0x288>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d14c      	bne.n	8003270 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e29a      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0x218>
 80031fa:	f7ff fca4 	bl	8002b46 <LL_RCC_HSE_Enable>
 80031fe:	e00d      	b.n	800321c <HAL_RCC_OscConfig+0x234>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003208:	d104      	bne.n	8003214 <HAL_RCC_OscConfig+0x22c>
 800320a:	f7ff fc6f 	bl	8002aec <LL_RCC_HSE_EnableTcxo>
 800320e:	f7ff fc9a 	bl	8002b46 <LL_RCC_HSE_Enable>
 8003212:	e003      	b.n	800321c <HAL_RCC_OscConfig+0x234>
 8003214:	f7ff fca5 	bl	8002b62 <LL_RCC_HSE_Disable>
 8003218:	f7ff fc76 	bl	8002b08 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe ff6a 	bl	80020fc <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe ff66 	bl	80020fc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e268      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800323e:	f7ff fc9e 	bl	8002b7e <LL_RCC_HSE_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f1      	beq.n	800322c <HAL_RCC_OscConfig+0x244>
 8003248:	e013      	b.n	8003272 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe ff57 	bl	80020fc <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003252:	f7fe ff53 	bl	80020fc <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e255      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003264:	f7ff fc8b 	bl	8002b7e <LL_RCC_HSE_IsReady>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f1      	bne.n	8003252 <HAL_RCC_OscConfig+0x26a>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04b      	beq.n	8003316 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x2a8>
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d113      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d110      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003290:	f7ff fca2 	bl	8002bd8 <LL_RCC_HSI_IsReady>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2be>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e234      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fca5 	bl	8002bfa <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b0:	e031      	b.n	8003316 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d019      	beq.n	80032ee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ba:	f7ff fc71 	bl	8002ba0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe ff1d 	bl	80020fc <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe ff19 	bl	80020fc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e21b      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032d8:	f7ff fc7e 	bl	8002bd8 <LL_RCC_HSI_IsReady>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f1      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fc87 	bl	8002bfa <LL_RCC_HSI_SetCalibTrimming>
 80032ec:	e013      	b.n	8003316 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	f7ff fc65 	bl	8002bbc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe ff03 	bl	80020fc <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe feff 	bl	80020fc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e201      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800330c:	f7ff fc64 	bl	8002bd8 <LL_RCC_HSI_IsReady>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f1      	bne.n	80032fa <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06e      	beq.n	8003400 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d056      	beq.n	80033d8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	429a      	cmp	r2, r3
 8003340:	d031      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1da      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003364:	f7ff fc7e 	bl	8002c64 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003368:	f7fe fec8 	bl	80020fc <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003370:	f7fe fec4 	bl	80020fc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b11      	cmp	r3, #17
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1c6      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003382:	f7ff fc7f 	bl	8002c84 <LL_RCC_LSI_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f1      	bne.n	8003370 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003394:	f023 0210 	bic.w	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	f7ff fc4d 	bl	8002c44 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fea7 	bl	80020fc <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fea3 	bl	80020fc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b11      	cmp	r3, #17
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a5      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80033c4:	f7ff fc5e 	bl	8002c84 <LL_RCC_LSI_IsReady>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f1      	beq.n	80033b2 <HAL_RCC_OscConfig+0x3ca>
 80033ce:	e017      	b.n	8003400 <HAL_RCC_OscConfig+0x418>
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d8:	f7ff fc44 	bl	8002c64 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fe8e 	bl	80020fc <HAL_GetTick>
 80033e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fe8a 	bl	80020fc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b11      	cmp	r3, #17
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e18c      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80033f6:	f7ff fc45 	bl	8002c84 <LL_RCC_LSI_IsReady>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f1      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80d8 	beq.w	80035be <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800340e:	f7ff fb5b 	bl	8002ac8 <LL_PWR_IsEnabledBkUpAccess>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d113      	bne.n	8003440 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003418:	f7ff fb3c 	bl	8002a94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fe fe6e 	bl	80020fc <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fe6a 	bl	80020fc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e16c      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003436:	f7ff fb47 	bl	8002ac8 <LL_PWR_IsEnabledBkUpAccess>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f1      	beq.n	8003424 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d07b      	beq.n	8003540 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b85      	cmp	r3, #133	; 0x85
 800344e:	d003      	beq.n	8003458 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d109      	bne.n	800346c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe fe46 	bl	80020fc <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003486:	e00a      	b.n	800349e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe fe38 	bl	80020fc <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e138      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800349e:	f7ff fbc0 	bl	8002c22 <LL_RCC_LSE_IsReady>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ef      	beq.n	8003488 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b81      	cmp	r3, #129	; 0x81
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b85      	cmp	r3, #133	; 0x85
 80034b6:	d121      	bne.n	80034fc <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fe20 	bl	80020fc <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fe12 	bl	80020fc <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e112      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ec      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034fa:	e060      	b.n	80035be <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fdfe 	bl	80020fc <HAL_GetTick>
 8003500:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003516:	e00a      	b.n	800352e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003518:	f7fe fdf0 	bl	80020fc <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0f0      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ec      	bne.n	8003518 <HAL_RCC_OscConfig+0x530>
 800353e:	e03e      	b.n	80035be <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fddc 	bl	80020fc <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fdce 	bl	80020fc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0ce      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ec      	bne.n	800355c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003582:	f7fe fdbb 	bl	80020fc <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe fdad 	bl	80020fc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0ad      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035b4:	f7ff fb35 	bl	8002c22 <LL_RCC_LSE_IsReady>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ef      	bne.n	800359e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a3 	beq.w	800370e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d076      	beq.n	80036bc <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d14b      	bne.n	800366e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	f7ff fc76 	bl	8002ec6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe fd8f 	bl	80020fc <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fd8b 	bl	80020fc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b0a      	cmp	r3, #10
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e08d      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80035f4:	f7ff fc75 	bl	8002ee2 <LL_RCC_PLL_IsReady>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f1      	bne.n	80035e2 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <HAL_RCC_OscConfig+0x730>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003616:	0212      	lsls	r2, r2, #8
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800362a:	430a      	orrs	r2, r1
 800362c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003630:	4313      	orrs	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003634:	f7ff fc39 	bl	8002eaa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fd58 	bl	80020fc <HAL_GetTick>
 800364c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fd54 	bl	80020fc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b0a      	cmp	r3, #10
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e056      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003662:	f7ff fc3e 	bl	8002ee2 <LL_RCC_PLL_IsReady>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f1      	beq.n	8003650 <HAL_RCC_OscConfig+0x668>
 800366c:	e04f      	b.n	800370e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	f7ff fc2a 	bl	8002ec6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367c:	f023 0303 	bic.w	r3, r3, #3
 8003680:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003694:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fd31 	bl	80020fc <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fd2d 	bl	80020fc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b0a      	cmp	r3, #10
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e02f      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80036b0:	f7ff fc17 	bl	8002ee2 <LL_RCC_PLL_IsReady>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f1      	bne.n	800369e <HAL_RCC_OscConfig+0x6b6>
 80036ba:	e028      	b.n	800370e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e023      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	429a      	cmp	r2, r3
 80036dc:	d115      	bne.n	800370a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d10e      	bne.n	800370a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	11c1808c 	.word	0x11c1808c

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e10f      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b89      	ldr	r3, [pc, #548]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d91b      	bls.n	8003776 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b86      	ldr	r3, [pc, #536]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4984      	ldr	r1, [pc, #528]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374e:	f7fe fcd5 	bl	80020fc <HAL_GetTick>
 8003752:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003754:	e008      	b.n	8003768 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003756:	f7fe fcd1 	bl	80020fc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0f3      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003768:	4b7b      	ldr	r3, [pc, #492]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d1ef      	bne.n	8003756 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fb12 	bl	8002db0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800378c:	f7fe fcb6 	bl	80020fc <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003794:	f7fe fcb2 	bl	80020fc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0d4      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037a6:	f7ff fbda 	bl	8002f5e <LL_RCC_IsActiveFlag_HPRE>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f1      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fb08 	bl	8002dd6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037c6:	f7fe fc99 	bl	80020fc <HAL_GetTick>
 80037ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037ce:	f7fe fc95 	bl	80020fc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0b7      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037e0:	f7ff fbce 	bl	8002f80 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f1      	beq.n	80037ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb01 	bl	8002e02 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003800:	f7fe fc7c 	bl	80020fc <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003808:	f7fe fc78 	bl	80020fc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e09a      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800381a:	f7ff fbc3 	bl	8002fa4 <LL_RCC_IsActiveFlag_PPRE1>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f1      	beq.n	8003808 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff faf6 	bl	8002e28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800383c:	f7fe fc5e 	bl	80020fc <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003844:	f7fe fc5a 	bl	80020fc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e07c      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003856:	f7ff fbb6 	bl	8002fc6 <LL_RCC_IsActiveFlag_PPRE2>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f1      	beq.n	8003844 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d043      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d106      	bne.n	8003882 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003874:	f7ff f983 	bl	8002b7e <LL_RCC_HSE_IsReady>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11e      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e066      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d106      	bne.n	8003898 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800388a:	f7ff fb2a 	bl	8002ee2 <LL_RCC_PLL_IsReady>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d113      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e05b      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038a0:	f7ff fa1d 	bl	8002cde <LL_RCC_MSI_IsReady>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e050      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038ae:	f7ff f993 	bl	8002bd8 <LL_RCC_HSI_IsReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e049      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fa57 	bl	8002d74 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe fc19 	bl	80020fc <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ce:	f7fe fc15 	bl	80020fc <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e035      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e4:	f7ff fa59 	bl	8002d9a <LL_RCC_GetSysClkSource>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1ec      	bne.n	80038ce <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d21b      	bcs.n	800393a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4913      	ldr	r1, [pc, #76]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003912:	f7fe fbf3 	bl	80020fc <HAL_GetTick>
 8003916:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003918:	e008      	b.n	800392c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800391a:	f7fe fbef 	bl	80020fc <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e011      	b.n	8003950 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <HAL_RCC_ClockConfig+0x23c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d1ef      	bne.n	800391a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800393a:	f000 f8b3 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 800393e:	4603      	mov	r3, r0
 8003940:	4a06      	ldr	r2, [pc, #24]	; (800395c <HAL_RCC_ClockConfig+0x240>)
 8003942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_ClockConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fb8b 	bl	8002064 <HAL_InitTick>
 800394e:	4603      	mov	r3, r0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58004000 	.word	0x58004000
 800395c:	20000000 	.word	0x20000000
 8003960:	20000004 	.word	0x20000004

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	f7ff fa12 	bl	8002d9a <LL_RCC_GetSysClkSource>
 8003976:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003978:	f7ff fae6 	bl	8002f48 <LL_RCC_PLL_GetMainSource>
 800397c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d139      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d136      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003990:	f7ff f9b5 	bl	8002cfe <LL_RCC_MSI_IsEnabledRangeSelect>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d115      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x62>
 800399a:	f7ff f9b0 	bl	8002cfe <LL_RCC_MSI_IsEnabledRangeSelect>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x4e>
 80039a4:	f7ff f9bb 	bl	8002d1e <LL_RCC_MSI_GetRange>
 80039a8:	4603      	mov	r3, r0
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	e005      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x5a>
 80039b2:	f7ff f9bf 	bl	8002d34 <LL_RCC_MSI_GetRangeAfterStandby>
 80039b6:	4603      	mov	r3, r0
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x134>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x8c>
 80039c6:	f7ff f99a 	bl	8002cfe <LL_RCC_MSI_IsEnabledRangeSelect>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x7a>
 80039d0:	f7ff f9a5 	bl	8002d1e <LL_RCC_MSI_GetRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	e005      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x86>
 80039de:	f7ff f9a9 	bl	8002d34 <LL_RCC_MSI_GetRangeAfterStandby>
 80039e2:	4603      	mov	r3, r0
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x134>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d115      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039fc:	e012      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e00c      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a10:	f7ff f888 	bl	8002b24 <LL_RCC_HSE_IsEnabledDiv2>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e001      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a22:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	f7ff f9b9 	bl	8002d9a <LL_RCC_GetSysClkSource>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d12f      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a2e:	f7ff fa8b 	bl	8002f48 <LL_RCC_PLL_GetMainSource>
 8003a32:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0xde>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a40:	e00d      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a44:	60fb      	str	r3, [r7, #12]
        break;
 8003a46:	e00d      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a48:	f7ff f86c 	bl	8002b24 <LL_RCC_HSE_IsEnabledDiv2>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a54:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a5a:	60fb      	str	r3, [r7, #12]
        break;
 8003a5c:	e002      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	60fb      	str	r3, [r7, #12]
        break;
 8003a62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a64:	f7ff fa4e 	bl	8002f04 <LL_RCC_PLL_GetN>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	fb03 f402 	mul.w	r4, r3, r2
 8003a70:	f7ff fa5f 	bl	8002f32 <LL_RCC_PLL_GetDivider>
 8003a74:	4603      	mov	r3, r0
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	3301      	adds	r3, #1
 8003a7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a7e:	f7ff fa4d 	bl	8002f1c <LL_RCC_PLL_GetR>
 8003a82:	4603      	mov	r3, r0
 8003a84:	0f5b      	lsrs	r3, r3, #29
 8003a86:	3301      	adds	r3, #1
 8003a88:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a8c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a8e:	697b      	ldr	r3, [r7, #20]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	0800e3e8 	.word	0x0800e3e8
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	01e84800 	.word	0x01e84800

08003aa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b598      	push	{r3, r4, r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003aa8:	f7ff ff5c 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003aac:	4604      	mov	r4, r0
 8003aae:	f7ff f9ce 	bl	8002e4e <LL_RCC_GetAHBPrescaler>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd98      	pop	{r3, r4, r7, pc}
 8003ac8:	0800e388 	.word	0x0800e388

08003acc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b598      	push	{r3, r4, r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ad0:	f7ff ffe8 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	f7ff f9d2 	bl	8002e7e <LL_RCC_GetAPB1Prescaler>
 8003ada:	4603      	mov	r3, r0
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd98      	pop	{r3, r4, r7, pc}
 8003aec:	0800e3c8 	.word	0x0800e3c8

08003af0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b598      	push	{r3, r4, r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003af4:	f7ff ffd6 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003af8:	4604      	mov	r4, r0
 8003afa:	f7ff f9cb 	bl	8002e94 <LL_RCC_GetAPB2Prescaler>
 8003afe:	4603      	mov	r3, r0
 8003b00:	0adb      	lsrs	r3, r3, #11
 8003b02:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd98      	pop	{r3, r4, r7, pc}
 8003b10:	0800e3c8 	.word	0x0800e3c8

08003b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b2c:	f7ff f99a 	bl	8002e64 <LL_RCC_GetAHB3Prescaler>
 8003b30:	4603      	mov	r3, r0
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0c9c      	lsrs	r4, r3, #18
 8003b50:	f7fe ffae 	bl	8002ab0 <HAL_PWREx_GetVoltageRange>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4619      	mov	r1, r3
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f000 f80b 	bl	8003b74 <RCC_SetFlashLatency>
 8003b5e:	4603      	mov	r3, r0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	0800e3e8 	.word	0x0800e3e8
 8003b6c:	0800e388 	.word	0x0800e388
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003b7e:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <RCC_SetFlashLatency+0xfc>)
 8003b80:	f107 0320 	add.w	r3, r7, #32
 8003b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b88:	6018      	str	r0, [r3, #0]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003b8e:	4a39      	ldr	r2, [pc, #228]	; (8003c74 <RCC_SetFlashLatency+0x100>)
 8003b90:	f107 0318 	add.w	r3, r7, #24
 8003b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b98:	6018      	str	r0, [r3, #0]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003b9e:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <RCC_SetFlashLatency+0x104>)
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003baa:	2300      	movs	r3, #0
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d11d      	bne.n	8003bf2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bba:	e016      	b.n	8003bea <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d808      	bhi.n	8003be4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bda:	4413      	add	r3, r2
 8003bdc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003be2:	e023      	b.n	8003c2c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	3301      	adds	r3, #1
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d9e5      	bls.n	8003bbc <RCC_SetFlashLatency+0x48>
 8003bf0:	e01c      	b.n	8003c2c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf6:	e016      	b.n	8003c26 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c00:	4413      	add	r3, r2
 8003c02:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d808      	bhi.n	8003c20 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c16:	4413      	add	r3, r2
 8003c18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c1e:	e005      	b.n	8003c2c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	3301      	adds	r3, #1
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d9e5      	bls.n	8003bf8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <RCC_SetFlashLatency+0x108>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 0207 	bic.w	r2, r3, #7
 8003c34:	4911      	ldr	r1, [pc, #68]	; (8003c7c <RCC_SetFlashLatency+0x108>)
 8003c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c3c:	f7fe fa5e 	bl	80020fc <HAL_GetTick>
 8003c40:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c42:	e008      	b.n	8003c56 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c44:	f7fe fa5a 	bl	80020fc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e007      	b.n	8003c66 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <RCC_SetFlashLatency+0x108>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1ef      	bne.n	8003c44 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3738      	adds	r7, #56	; 0x38
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	0800e0a8 	.word	0x0800e0a8
 8003c74:	0800e0b0 	.word	0x0800e0b0
 8003c78:	0800e0b8 	.word	0x0800e0b8
 8003c7c:	58004000 	.word	0x58004000

08003c80 <LL_RCC_LSE_IsReady>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d101      	bne.n	8003c98 <LL_RCC_LSE_IsReady+0x18>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <LL_RCC_LSE_IsReady+0x1a>
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <LL_RCC_SetUSARTClockSource>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	401a      	ands	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_SetI2SClockSource>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_SetLPUARTClockSource>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_SetI2CClockSource>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	401a      	ands	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_SetLPTIMClockSource>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <LL_RCC_SetRNGClockSource>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_SetADCClockSource>:
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_SetRTCClockSource>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_GetRTCClockSource>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <LL_RCC_ForceBackupDomainReset>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003e74:	2300      	movs	r3, #0
 8003e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d058      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003e88:	f7fe fe04 	bl	8002a94 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8c:	f7fe f936 	bl	80020fc <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fe f932 	bl	80020fc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea6:	e006      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ea8:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d13c      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ebc:	f7ff ffa7 	bl	8003e0e <LL_RCC_GetRTCClockSource>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d00f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ed8:	f7ff ffa5 	bl	8003e26 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003edc:	f7ff ffb3 	bl	8003e46 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d014      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f902 	bl	80020fc <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003efa:	e00b      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fe f8fe 	bl	80020fc <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d902      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	74fb      	strb	r3, [r7, #19]
            break;
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f14:	f7ff feb4 	bl	8003c80 <LL_RCC_LSE_IsReady>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d1ee      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff5b 	bl	8003de4 <LL_RCC_SetRTCClockSource>
 8003f2e:	e004      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
 8003f34:	e001      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fea9 	bl	8003ca2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fe9e 	bl	8003ca2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fec0 	bl	8003cfc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fee6 	bl	8003d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fedb 	bl	8003d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fed0 	bl	8003d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fea9 	bl	8003d26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fe9e 	bl	8003d26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fe93 	bl	8003d26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d011      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe5e 	bl	8003cd2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	d107      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fea5 	bl	8003d90 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fea3 	bl	8003dba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d107      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800408e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	58000400 	.word	0x58000400

0800409c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040ac:	4904      	ldr	r1, [pc, #16]	; (80040c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	58000400 	.word	0x58000400

080040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	58000400 	.word	0x58000400

080040e4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80040f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	58000400 	.word	0x58000400

08004104 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800410a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	58000400 	.word	0x58000400

0800411c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d101      	bne.n	8004130 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	58000400 	.word	0x58000400

08004140 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d101      	bne.n	8004154 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	58000400 	.word	0x58000400

08004164 <LL_RCC_RF_DisableReset>:
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <LL_RCC_IsRFUnderReset>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004198:	d101      	bne.n	800419e <LL_RCC_IsRFUnderReset+0x1a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <LL_RCC_IsRFUnderReset+0x1c>
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <LL_EXTI_EnableIT_32_63+0x24>)
 80041b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80041b6:	4905      	ldr	r1, [pc, #20]	; (80041cc <LL_EXTI_EnableIT_32_63+0x24>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	58000800 	.word	0x58000800

080041d0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
    return status;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	e04b      	b.n	800427e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fc34 	bl	8001a68 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004206:	f7ff ffad 	bl	8004164 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800420a:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <HAL_SUBGHZ_Init+0xb8>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	0cdb      	lsrs	r3, r3, #19
 8004218:	2264      	movs	r2, #100	; 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	609a      	str	r2, [r3, #8]
      break;
 8004230:	e007      	b.n	8004242 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3b01      	subs	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004238:	f7ff ffa4 	bl	8004184 <LL_RCC_IsRFUnderReset>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ee      	bne.n	8004220 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8004242:	f7ff ff3f 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004246:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800424a:	f7ff ffad 	bl	80041a8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800424e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004252:	f7ff ff23 	bl	800409c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004256:	f7ff ff55 	bl	8004104 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 faad 	bl	80047c4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	719a      	strb	r2, [r3, #6]

  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000000 	.word	0x20000000

0800428c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	461a      	mov	r2, r3
 8004298:	460b      	mov	r3, r1
 800429a:	817b      	strh	r3, [r7, #10]
 800429c:	4613      	mov	r3, r2
 800429e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	799b      	ldrb	r3, [r3, #6]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d14a      	bne.n	8004340 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	795b      	ldrb	r3, [r3, #5]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e045      	b.n	8004342 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2202      	movs	r2, #2
 80042c0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fb4c 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042c8:	f7ff ff0c 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80042cc:	210d      	movs	r1, #13
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa98 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fa90 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80042e4:	897b      	ldrh	r3, [r7, #10]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa8a 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	82bb      	strh	r3, [r7, #20]
 80042f4:	e00a      	b.n	800430c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80042f6:	8abb      	ldrh	r3, [r7, #20]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fa7f 	bl	8004804 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004306:	8abb      	ldrh	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	82bb      	strh	r3, [r7, #20]
 800430c:	8aba      	ldrh	r2, [r7, #20]
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d3f0      	bcc.n	80042f6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004314:	f7ff fed6 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fb45 	bl	80049a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
 800432a:	e001      	b.n	8004330 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	715a      	strb	r2, [r3, #5]

    return status;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	e000      	b.n	8004342 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b088      	sub	sp, #32
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	461a      	mov	r2, r3
 8004356:	460b      	mov	r3, r1
 8004358:	817b      	strh	r3, [r7, #10]
 800435a:	4613      	mov	r3, r2
 800435c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	799b      	ldrb	r3, [r3, #6]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d14a      	bne.n	8004402 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	795b      	ldrb	r3, [r3, #5]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004374:	2302      	movs	r3, #2
 8004376:	e045      	b.n	8004404 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 faee 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004384:	f7ff feae 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004388:	211d      	movs	r1, #29
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fa3a 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004390:	897b      	ldrh	r3, [r7, #10]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	b29b      	uxth	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa32 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa2c 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80043ac:	2100      	movs	r1, #0
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fa28 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	82fb      	strh	r3, [r7, #22]
 80043b8:	e009      	b.n	80043ce <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043ba:	69b9      	ldr	r1, [r7, #24]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa77 	bl	80048b0 <SUBGHZSPI_Receive>
      pData++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80043c8:	8afb      	ldrh	r3, [r7, #22]
 80043ca:	3301      	adds	r3, #1
 80043cc:	82fb      	strh	r3, [r7, #22]
 80043ce:	8afa      	ldrh	r2, [r7, #22]
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3f1      	bcc.n	80043ba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043d6:	f7ff fe75 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fae4 	bl	80049a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e001      	b.n	80043f2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	715a      	strb	r2, [r3, #5]

    return status;
 80043fe:	7ffb      	ldrb	r3, [r7, #31]
 8004400:	e000      	b.n	8004404 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	461a      	mov	r2, r3
 8004418:	460b      	mov	r3, r1
 800441a:	72fb      	strb	r3, [r7, #11]
 800441c:	4613      	mov	r3, r2
 800441e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	799b      	ldrb	r3, [r3, #6]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d14a      	bne.n	80044c0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	795b      	ldrb	r3, [r3, #5]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004432:	2302      	movs	r3, #2
 8004434:	e045      	b.n	80044c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fa8f 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004442:	7afb      	ldrb	r3, [r7, #11]
 8004444:	2b84      	cmp	r3, #132	; 0x84
 8004446:	d002      	beq.n	800444e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	2b94      	cmp	r3, #148	; 0x94
 800444c:	d103      	bne.n	8004456 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	711a      	strb	r2, [r3, #4]
 8004454:	e002      	b.n	800445c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800445c:	f7ff fe42 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004460:	7afb      	ldrb	r3, [r7, #11]
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f9cd 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800446a:	2300      	movs	r3, #0
 800446c:	82bb      	strh	r3, [r7, #20]
 800446e:	e00a      	b.n	8004486 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004470:	8abb      	ldrh	r3, [r7, #20]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f9c2 	bl	8004804 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004480:	8abb      	ldrh	r3, [r7, #20]
 8004482:	3301      	adds	r3, #1
 8004484:	82bb      	strh	r3, [r7, #20]
 8004486:	8aba      	ldrh	r2, [r7, #20]
 8004488:	893b      	ldrh	r3, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d3f0      	bcc.n	8004470 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800448e:	f7ff fe19 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004492:	7afb      	ldrb	r3, [r7, #11]
 8004494:	2b84      	cmp	r3, #132	; 0x84
 8004496:	d002      	beq.n	800449e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa85 	bl	80049a8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
 80044aa:	e001      	b.n	80044b0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	715a      	strb	r2, [r3, #5]

    return status;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	e000      	b.n	80044c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b088      	sub	sp, #32
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	461a      	mov	r2, r3
 80044d6:	460b      	mov	r3, r1
 80044d8:	72fb      	strb	r3, [r7, #11]
 80044da:	4613      	mov	r3, r2
 80044dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	799b      	ldrb	r3, [r3, #6]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d13d      	bne.n	8004568 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	795b      	ldrb	r3, [r3, #5]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e038      	b.n	800456a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fa2e 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004504:	f7ff fdee 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004508:	7afb      	ldrb	r3, [r7, #11]
 800450a:	4619      	mov	r1, r3
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f979 	bl	8004804 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004512:	2100      	movs	r1, #0
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f975 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	82fb      	strh	r3, [r7, #22]
 800451e:	e009      	b.n	8004534 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f9c4 	bl	80048b0 <SUBGHZSPI_Receive>
      pData++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3301      	adds	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800452e:	8afb      	ldrh	r3, [r7, #22]
 8004530:	3301      	adds	r3, #1
 8004532:	82fb      	strh	r3, [r7, #22]
 8004534:	8afa      	ldrh	r2, [r7, #22]
 8004536:	893b      	ldrh	r3, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d3f1      	bcc.n	8004520 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800453c:	f7ff fdc2 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fa31 	bl	80049a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e001      	b.n	8004558 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	715a      	strb	r2, [r3, #5]

    return status;
 8004564:	7ffb      	ldrb	r3, [r7, #31]
 8004566:	e000      	b.n	800456a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	461a      	mov	r2, r3
 800457e:	460b      	mov	r3, r1
 8004580:	72fb      	strb	r3, [r7, #11]
 8004582:	4613      	mov	r3, r2
 8004584:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	799b      	ldrb	r3, [r3, #6]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d13e      	bne.n	800460e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004598:	2302      	movs	r3, #2
 800459a:	e039      	b.n	8004610 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f9dc 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045a8:	f7ff fd9c 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80045ac:	210e      	movs	r1, #14
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f928 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f923 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	82bb      	strh	r3, [r7, #20]
 80045c2:	e00a      	b.n	80045da <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80045c4:	8abb      	ldrh	r3, [r7, #20]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f918 	bl	8004804 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80045d4:	8abb      	ldrh	r3, [r7, #20]
 80045d6:	3301      	adds	r3, #1
 80045d8:	82bb      	strh	r3, [r7, #20]
 80045da:	8aba      	ldrh	r2, [r7, #20]
 80045dc:	893b      	ldrh	r3, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3f0      	bcc.n	80045c4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045e2:	f7ff fd6f 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f9de 	bl	80049a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
 80045f8:	e001      	b.n	80045fe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	715a      	strb	r2, [r3, #5]

    return status;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	e000      	b.n	8004610 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	460b      	mov	r3, r1
 8004626:	72fb      	strb	r3, [r7, #11]
 8004628:	4613      	mov	r3, r2
 800462a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	799b      	ldrb	r3, [r3, #6]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d141      	bne.n	80046be <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	795b      	ldrb	r3, [r3, #5]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004642:	2302      	movs	r3, #2
 8004644:	e03c      	b.n	80046c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f987 	bl	8004960 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004652:	f7ff fd47 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004656:	211e      	movs	r1, #30
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f8d3 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f8ce 	bl	8004804 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004668:	2100      	movs	r1, #0
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f8ca 	bl	8004804 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	82fb      	strh	r3, [r7, #22]
 8004674:	e009      	b.n	800468a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f919 	bl	80048b0 <SUBGHZSPI_Receive>
      pData++;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3301      	adds	r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	3301      	adds	r3, #1
 8004688:	82fb      	strh	r3, [r7, #22]
 800468a:	8afa      	ldrh	r2, [r7, #22]
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3f1      	bcc.n	8004676 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004692:	f7ff fd17 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f986 	bl	80049a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e001      	b.n	80046ae <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	715a      	strb	r2, [r3, #5]

    return status;
 80046ba:	7ffb      	ldrb	r3, [r7, #31]
 80046bc:	e000      	b.n	80046c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80046d0:	2300      	movs	r3, #0
 80046d2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80046d4:	f107 020c 	add.w	r2, r7, #12
 80046d8:	2302      	movs	r3, #2
 80046da:	2112      	movs	r1, #18
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fef4 	bl	80044ca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80046e2:	7b3b      	ldrb	r3, [r7, #12]
 80046e4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	b21a      	sxth	r2, r3
 80046ec:	7b7b      	ldrb	r3, [r7, #13]
 80046ee:	b21b      	sxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b21b      	sxth	r3, r3
 80046f4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80046f6:	89fb      	ldrh	r3, [r7, #14]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f003 fdd3 	bl	80082ac <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004706:	89fb      	ldrh	r3, [r7, #14]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f003 fdd8 	bl	80082c8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f003 fe27 	bl	8008378 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 fe2c 	bl	8008394 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f003 fe31 	bl	80083b0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f003 fdfe 	bl	800835c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004760:	89fb      	ldrh	r3, [r7, #14]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f003 fdb9 	bl	80082e4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	09db      	lsrs	r3, r3, #7
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800477e:	89fb      	ldrh	r3, [r7, #14]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800478a:	2101      	movs	r1, #1
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f003 fdb7 	bl	8008300 <HAL_SUBGHZ_CADStatusCallback>
 8004792:	e003      	b.n	800479c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004794:	2100      	movs	r1, #0
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f003 fdb2 	bl	8008300 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800479c:	89fb      	ldrh	r3, [r7, #14]
 800479e:	0a5b      	lsrs	r3, r3, #9
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f003 fdc7 	bl	800833c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80047ae:	f107 020c 	add.w	r2, r7, #12
 80047b2:	2302      	movs	r3, #2
 80047b4:	2102      	movs	r1, #2
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fe28 	bl	800440c <HAL_SUBGHZ_ExecSetCmd>
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80047e0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047e4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80047e8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a04      	ldr	r2, [pc, #16]	; (8004800 <SUBGHZSPI_Init+0x3c>)
 80047f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f4:	6013      	str	r3, [r2, #0]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	58010000 	.word	0x58010000

08004804 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <SUBGHZSPI_Transmit+0xa0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	0cdb      	lsrs	r3, r3, #19
 8004822:	2264      	movs	r2, #100	; 0x64
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e008      	b.n	800484e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b01      	subs	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004842:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <SUBGHZSPI_Transmit+0xa4>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d1ed      	bne.n	800482a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <SUBGHZSPI_Transmit+0xa8>)
 8004850:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <SUBGHZSPI_Transmit+0xa0>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	0cdb      	lsrs	r3, r3, #19
 8004866:	2264      	movs	r2, #100	; 0x64
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	609a      	str	r2, [r3, #8]
      break;
 800487e:	e008      	b.n	8004892 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <SUBGHZSPI_Transmit+0xa4>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d1ed      	bne.n	800486e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SUBGHZSPI_Transmit+0xa4>)
 8004894:	68db      	ldr	r3, [r3, #12]

  return status;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000
 80048a8:	58010000 	.word	0x58010000
 80048ac:	5801000c 	.word	0x5801000c

080048b0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <SUBGHZSPI_Receive+0xa4>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	0cdb      	lsrs	r3, r3, #19
 80048cc:	2264      	movs	r2, #100	; 0x64
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d105      	bne.n	80048e6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	609a      	str	r2, [r3, #8]
      break;
 80048e4:	e008      	b.n	80048f8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <SUBGHZSPI_Receive+0xa8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d1ed      	bne.n	80048d4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <SUBGHZSPI_Receive+0xac>)
 80048fa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	22ff      	movs	r2, #255	; 0xff
 8004900:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <SUBGHZSPI_Receive+0xa4>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	0cdb      	lsrs	r3, r3, #19
 8004910:	2264      	movs	r2, #100	; 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e008      	b.n	800493c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b01      	subs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <SUBGHZSPI_Receive+0xa8>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d1ed      	bne.n	8004918 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <SUBGHZSPI_Receive+0xa8>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	701a      	strb	r2, [r3, #0]

  return status;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000000 	.word	0x20000000
 8004958:	58010000 	.word	0x58010000
 800495c:	5801000c 	.word	0x5801000c

08004960 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d111      	bne.n	8004994 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <SUBGHZ_CheckDeviceReady+0x44>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004980:	f7ff fbb0 	bl	80040e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3b01      	subs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f9      	bne.n	8004984 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004990:	f7ff fb98 	bl	80040c4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f807 	bl	80049a8 <SUBGHZ_WaitOnBusy>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000000 	.word	0x20000000

080049a8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <SUBGHZ_WaitOnBusy+0x58>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	0d1b      	lsrs	r3, r3, #20
 80049c2:	2264      	movs	r2, #100	; 0x64
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80049ca:	f7ff fbb9 	bl	8004140 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80049ce:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	609a      	str	r2, [r3, #8]
      break;
 80049e0:	e009      	b.n	80049f6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80049e8:	f7ff fb98 	bl	800411c <LL_PWR_IsActiveFlag_RFBUSYS>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d0e9      	beq.n	80049ca <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000000 	.word	0x20000000

08004a04 <LL_RCC_GetUSARTClockSource>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	401a      	ands	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	4313      	orrs	r3, r2
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_GetLPUARTClockSource>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr

08004a46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e042      	b.n	8004ade <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc ff3a 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f995 	bl	8004db8 <UART_SetConfig>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e022      	b.n	8004ade <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fbd9 	bl	8005258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fc5f 	bl	800539a <UART_CheckIdleState>
 8004adc:	4603      	mov	r3, r0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08a      	sub	sp, #40	; 0x28
 8004aea:	af02      	add	r7, sp, #8
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	f040 8083 	bne.w	8004c08 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_UART_Transmit+0x28>
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07b      	b.n	8004c0a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x3a>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e074      	b.n	8004c0a <HAL_UART_Transmit+0x124>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2221      	movs	r2, #33	; 0x21
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b38:	f7fd fae0 	bl	80020fc <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d108      	bne.n	8004b6a <HAL_UART_Transmit+0x84>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e003      	b.n	8004b72 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b7a:	e02c      	b.n	8004bd6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fc52 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e039      	b.n	8004c0a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	3302      	adds	r3, #2
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e007      	b.n	8004bc4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1cc      	bne.n	8004b7c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fc1f 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b08a      	sub	sp, #40	; 0x28
 8004c16:	af02      	add	r7, sp, #8
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f040 80c0 	bne.w	8004dae <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_Receive+0x28>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0b8      	b.n	8004db0 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Receive+0x3a>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b1      	b.n	8004db0 <HAL_UART_Receive+0x19e>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2222      	movs	r2, #34	; 0x22
 8004c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c6a:	f7fd fa47 	bl	80020fc <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d10e      	bne.n	8004ca8 <HAL_UART_Receive+0x96>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <HAL_UART_Receive+0x8c>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c9c:	e02d      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ca6:	e028      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10d      	bne.n	8004ccc <HAL_UART_Receive+0xba>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_UART_Receive+0xb0>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cc0:	e01b      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	227f      	movs	r2, #127	; 0x7f
 8004cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cca:	e016      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd4:	d10d      	bne.n	8004cf2 <HAL_UART_Receive+0xe0>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_UART_Receive+0xd6>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	227f      	movs	r2, #127	; 0x7f
 8004ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ce6:	e008      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	223f      	movs	r2, #63	; 0x3f
 8004cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cf0:	e003      	b.n	8004cfa <HAL_UART_Receive+0xe8>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0a:	d108      	bne.n	8004d1e <HAL_UART_Receive+0x10c>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e003      	b.n	8004d26 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d2e:	e032      	b.n	8004d96 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	2120      	movs	r1, #32
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fb78 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e032      	b.n	8004db0 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	8a7b      	ldrh	r3, [r7, #18]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	3302      	adds	r3, #2
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e00c      	b.n	8004d84 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	8a7b      	ldrh	r3, [r7, #18]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	4013      	ands	r3, r2
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1c6      	bne.n	8004d30 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	b5b0      	push	{r4, r5, r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4bab      	ldr	r3, [pc, #684]	; (8005090 <UART_SetConfig+0x2d8>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	69f9      	ldr	r1, [r7, #28]
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4aa0      	ldr	r2, [pc, #640]	; (8005094 <UART_SetConfig+0x2dc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	f023 010f 	bic.w	r1, r3, #15
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a91      	ldr	r2, [pc, #580]	; (8005098 <UART_SetConfig+0x2e0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d122      	bne.n	8004e9e <UART_SetConfig+0xe6>
 8004e58:	2003      	movs	r0, #3
 8004e5a:	f7ff fdd3 	bl	8004a04 <LL_RCC_GetUSARTClockSource>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d817      	bhi.n	8004e98 <UART_SetConfig+0xe0>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0xb8>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e8d 	.word	0x08004e8d
 8004e78:	08004e87 	.word	0x08004e87
 8004e7c:	08004e93 	.word	0x08004e93
 8004e80:	2301      	movs	r3, #1
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e072      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004e86:	2302      	movs	r3, #2
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e06f      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e06c      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004e92:	2308      	movs	r3, #8
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e069      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	e066      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7e      	ldr	r2, [pc, #504]	; (800509c <UART_SetConfig+0x2e4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d134      	bne.n	8004f12 <UART_SetConfig+0x15a>
 8004ea8:	200c      	movs	r0, #12
 8004eaa:	f7ff fdab 	bl	8004a04 <LL_RCC_GetUSARTClockSource>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d829      	bhi.n	8004f0c <UART_SetConfig+0x154>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x108>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ef5 	.word	0x08004ef5
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f01 	.word	0x08004f01
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004efb 	.word	0x08004efb
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f0d 	.word	0x08004f0d
 8004ef0:	08004f07 	.word	0x08004f07
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	76fb      	strb	r3, [r7, #27]
 8004ef8:	e038      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004efa:	2302      	movs	r3, #2
 8004efc:	76fb      	strb	r3, [r7, #27]
 8004efe:	e035      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f00:	2304      	movs	r3, #4
 8004f02:	76fb      	strb	r3, [r7, #27]
 8004f04:	e032      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f06:	2308      	movs	r3, #8
 8004f08:	76fb      	strb	r3, [r7, #27]
 8004f0a:	e02f      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	76fb      	strb	r3, [r7, #27]
 8004f10:	e02c      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a5f      	ldr	r2, [pc, #380]	; (8005094 <UART_SetConfig+0x2dc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d125      	bne.n	8004f68 <UART_SetConfig+0x1b0>
 8004f1c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f20:	f7ff fd82 	bl	8004a28 <LL_RCC_GetLPUARTClockSource>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2a:	d017      	beq.n	8004f5c <UART_SetConfig+0x1a4>
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f30:	d817      	bhi.n	8004f62 <UART_SetConfig+0x1aa>
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d00b      	beq.n	8004f50 <UART_SetConfig+0x198>
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d811      	bhi.n	8004f62 <UART_SetConfig+0x1aa>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <UART_SetConfig+0x192>
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d006      	beq.n	8004f56 <UART_SetConfig+0x19e>
 8004f48:	e00b      	b.n	8004f62 <UART_SetConfig+0x1aa>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	76fb      	strb	r3, [r7, #27]
 8004f4e:	e00d      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f50:	2302      	movs	r3, #2
 8004f52:	76fb      	strb	r3, [r7, #27]
 8004f54:	e00a      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f56:	2304      	movs	r3, #4
 8004f58:	76fb      	strb	r3, [r7, #27]
 8004f5a:	e007      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f62:	2310      	movs	r3, #16
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e001      	b.n	8004f6c <UART_SetConfig+0x1b4>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a48      	ldr	r2, [pc, #288]	; (8005094 <UART_SetConfig+0x2dc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	f040 8098 	bne.w	80050a8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f78:	7efb      	ldrb	r3, [r7, #27]
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d823      	bhi.n	8004fc6 <UART_SetConfig+0x20e>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x1cc>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fb7 	.word	0x08004fb7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fc7 	.word	0x08004fc7
 8004fa4:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe fd90 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 8004fac:	6178      	str	r0, [r7, #20]
        break;
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <UART_SetConfig+0x2e8>)
 8004fb2:	617b      	str	r3, [r7, #20]
        break;
 8004fb4:	e00c      	b.n	8004fd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe fcd5 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8004fba:	6178      	str	r0, [r7, #20]
        break;
 8004fbc:	e008      	b.n	8004fd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	617b      	str	r3, [r7, #20]
        break;
 8004fc4:	e004      	b.n	8004fd0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8004fce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8128 	beq.w	8005228 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <UART_SetConfig+0x2ec>)
 8004fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d305      	bcc.n	8005008 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d902      	bls.n	800500e <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	76bb      	strb	r3, [r7, #26]
 800500c:	e10c      	b.n	8005228 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4618      	mov	r0, r3
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <UART_SetConfig+0x2ec>)
 800501c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005020:	b29a      	uxth	r2, r3
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	f7fb ff25 	bl	8000e74 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4610      	mov	r0, r2
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	020b      	lsls	r3, r1, #8
 800503c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005040:	0202      	lsls	r2, r0, #8
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	6849      	ldr	r1, [r1, #4]
 8005046:	0849      	lsrs	r1, r1, #1
 8005048:	4608      	mov	r0, r1
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	1814      	adds	r4, r2, r0
 8005050:	eb43 0501 	adc.w	r5, r3, r1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb ff07 	bl	8000e74 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4613      	mov	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005074:	d308      	bcc.n	8005088 <UART_SetConfig+0x2d0>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507c:	d204      	bcs.n	8005088 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	e0cf      	b.n	8005228 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	76bb      	strb	r3, [r7, #26]
 800508c:	e0cc      	b.n	8005228 <UART_SetConfig+0x470>
 800508e:	bf00      	nop
 8005090:	cfff69f3 	.word	0xcfff69f3
 8005094:	40008000 	.word	0x40008000
 8005098:	40013800 	.word	0x40013800
 800509c:	40004400 	.word	0x40004400
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	0800e428 	.word	0x0800e428
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d165      	bne.n	800517e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80050b2:	7efb      	ldrb	r3, [r7, #27]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d828      	bhi.n	800510a <UART_SetConfig+0x352>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x308>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fcf2 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80050e8:	6178      	str	r0, [r7, #20]
        break;
 80050ea:	e013      	b.n	8005114 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fd00 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80050f0:	6178      	str	r0, [r7, #20]
        break;
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b56      	ldr	r3, [pc, #344]	; (8005250 <UART_SetConfig+0x498>)
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	e00c      	b.n	8005114 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fc33 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 80050fe:	6178      	str	r0, [r7, #20]
        break;
 8005100:	e008      	b.n	8005114 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	617b      	str	r3, [r7, #20]
        break;
 8005108:	e004      	b.n	8005114 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	76bb      	strb	r3, [r7, #26]
        break;
 8005112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 8086 	beq.w	8005228 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	4a4c      	ldr	r2, [pc, #304]	; (8005254 <UART_SetConfig+0x49c>)
 8005122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005126:	461a      	mov	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fbb3 f3f2 	udiv	r3, r3, r2
 800512e:	005a      	lsls	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d916      	bls.n	8005178 <UART_SetConfig+0x3c0>
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d212      	bcs.n	8005178 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f023 030f 	bic.w	r3, r3, #15
 800515a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	b29a      	uxth	r2, r3
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	4313      	orrs	r3, r2
 800516c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	89fa      	ldrh	r2, [r7, #14]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	e057      	b.n	8005228 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	76bb      	strb	r3, [r7, #26]
 800517c:	e054      	b.n	8005228 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800517e:	7efb      	ldrb	r3, [r7, #27]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d828      	bhi.n	80051d6 <UART_SetConfig+0x41e>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <UART_SetConfig+0x3d4>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051c1 	.word	0x080051c1
 8005198:	080051d7 	.word	0x080051d7
 800519c:	080051c7 	.word	0x080051c7
 80051a0:	080051d7 	.word	0x080051d7
 80051a4:	080051d7 	.word	0x080051d7
 80051a8:	080051d7 	.word	0x080051d7
 80051ac:	080051cf 	.word	0x080051cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b0:	f7fe fc8c 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80051b4:	6178      	str	r0, [r7, #20]
        break;
 80051b6:	e013      	b.n	80051e0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7fe fc9a 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80051bc:	6178      	str	r0, [r7, #20]
        break;
 80051be:	e00f      	b.n	80051e0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c0:	4b23      	ldr	r3, [pc, #140]	; (8005250 <UART_SetConfig+0x498>)
 80051c2:	617b      	str	r3, [r7, #20]
        break;
 80051c4:	e00c      	b.n	80051e0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c6:	f7fe fbcd 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 80051ca:	6178      	str	r0, [r7, #20]
        break;
 80051cc:	e008      	b.n	80051e0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	617b      	str	r3, [r7, #20]
        break;
 80051d4:	e004      	b.n	80051e0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	76bb      	strb	r3, [r7, #26]
        break;
 80051de:	bf00      	nop
    }

    if (pclk != 0U)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <UART_SetConfig+0x49c>)
 80051ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f0:	461a      	mov	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	b29b      	uxth	r3, r3
 800520a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d908      	bls.n	8005224 <UART_SetConfig+0x46c>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d204      	bcs.n	8005224 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	e001      	b.n	8005228 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005244:	7ebb      	ldrb	r3, [r7, #26]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bdb0      	pop	{r4, r5, r7, pc}
 800524e:	bf00      	nop
 8005250:	00f42400 	.word	0x00f42400
 8005254:	0800e428 	.word	0x0800e428

08005258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01a      	beq.n	800536e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005356:	d10a      	bne.n	800536e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af02      	add	r7, sp, #8
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053aa:	f7fc fea7 	bl	80020fc <HAL_GetTick>
 80053ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d10e      	bne.n	80053dc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f82f 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e025      	b.n	8005428 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d10e      	bne.n	8005408 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f819 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e00f      	b.n	8005428 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b09c      	sub	sp, #112	; 0x70
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e0a9      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	f000 80a5 	beq.w	8005596 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fc fe56 	bl	80020fc <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <UART_WaitOnFlagUntilTimeout+0x32>
 800545c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800545e:	2b00      	cmp	r3, #0
 8005460:	d140      	bne.n	80054e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005476:	667b      	str	r3, [r7, #100]	; 0x64
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005482:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005486:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800548e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	663b      	str	r3, [r7, #96]	; 0x60
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80054b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e069      	b.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d051      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005500:	d149      	bne.n	8005596 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
 800552c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	613b      	str	r3, [r7, #16]
   return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	66bb      	str	r3, [r7, #104]	; 0x68
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800555e:	623a      	str	r2, [r7, #32]
 8005560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	69f9      	ldr	r1, [r7, #28]
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	61bb      	str	r3, [r7, #24]
   return(result);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e010      	b.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	f43f af46 	beq.w	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3770      	adds	r7, #112	; 0x70
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e027      	b.n	8005626 <HAL_UARTEx_DisableFifoMode+0x66>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005644:	2302      	movs	r3, #2
 8005646:	e02d      	b.n	80056a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2224      	movs	r2, #36	; 0x24
 8005654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f84f 	bl	8005728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e02d      	b.n	8005720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f811 	bl	8005728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005748:	e031      	b.n	80057ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800574a:	2308      	movs	r3, #8
 800574c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800574e:	2308      	movs	r3, #8
 8005750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	0e5b      	lsrs	r3, r3, #25
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	0f5b      	lsrs	r3, r3, #29
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005772:	7bbb      	ldrb	r3, [r7, #14]
 8005774:	7b3a      	ldrb	r2, [r7, #12]
 8005776:	4910      	ldr	r1, [pc, #64]	; (80057b8 <UARTEx_SetNbDataToProcess+0x90>)
 8005778:	5c8a      	ldrb	r2, [r1, r2]
 800577a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800577e:	7b3a      	ldrb	r2, [r7, #12]
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <UARTEx_SetNbDataToProcess+0x94>)
 8005782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005784:	fb93 f3f2 	sdiv	r3, r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	7b7a      	ldrb	r2, [r7, #13]
 8005794:	4908      	ldr	r1, [pc, #32]	; (80057b8 <UARTEx_SetNbDataToProcess+0x90>)
 8005796:	5c8a      	ldrb	r2, [r1, r2]
 8005798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800579c:	7b7a      	ldrb	r2, [r7, #13]
 800579e:	4907      	ldr	r1, [pc, #28]	; (80057bc <UARTEx_SetNbDataToProcess+0x94>)
 80057a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	0800e440 	.word	0x0800e440
 80057bc:	0800e448 	.word	0x0800e448

080057c0 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <RadioInit+0x60>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <RadioInit+0x64>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80057d4:	4b13      	ldr	r3, [pc, #76]	; (8005824 <RadioInit+0x64>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80057da:	4b12      	ldr	r3, [pc, #72]	; (8005824 <RadioInit+0x64>)
 80057dc:	2200      	movs	r2, #0
 80057de:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80057e0:	4811      	ldr	r0, [pc, #68]	; (8005828 <RadioInit+0x68>)
 80057e2:	f001 fdc1 	bl	8007368 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80057e6:	2000      	movs	r0, #0
 80057e8:	f000 ffb0 	bl	800674c <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80057ec:	f002 f852 	bl	8007894 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80057f0:	2100      	movs	r1, #0
 80057f2:	2000      	movs	r0, #0
 80057f4:	f002 fba8 	bl	8007f48 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80057f8:	2204      	movs	r2, #4
 80057fa:	2100      	movs	r1, #0
 80057fc:	2001      	movs	r0, #1
 80057fe:	f002 f9d3 	bl	8007ba8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005802:	2300      	movs	r3, #0
 8005804:	2200      	movs	r2, #0
 8005806:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800580a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800580e:	f002 f907 	bl	8007a20 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005812:	f000 fe4f 	bl	80064b4 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000450 	.word	0x20000450
 8005824:	20000594 	.word	0x20000594
 8005828:	080067b9 	.word	0x080067b9

0800582c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005830:	f001 fddc 	bl	80073ec <SUBGRF_GetOperatingMode>
 8005834:	4603      	mov	r3, r0
 8005836:	2b07      	cmp	r3, #7
 8005838:	d00a      	beq.n	8005850 <RadioGetStatus+0x24>
 800583a:	2b07      	cmp	r3, #7
 800583c:	dc0a      	bgt.n	8005854 <RadioGetStatus+0x28>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d002      	beq.n	8005848 <RadioGetStatus+0x1c>
 8005842:	2b05      	cmp	r3, #5
 8005844:	d002      	beq.n	800584c <RadioGetStatus+0x20>
 8005846:	e005      	b.n	8005854 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005848:	2302      	movs	r3, #2
 800584a:	e004      	b.n	8005856 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800584c:	2301      	movs	r3, #1
 800584e:	e002      	b.n	8005856 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005850:	2303      	movs	r3, #3
 8005852:	e000      	b.n	8005856 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005854:	2300      	movs	r3, #0
    }
}
 8005856:	4618      	mov	r0, r3
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <RadioSetModem+0xa0>)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	4618      	mov	r0, r3
 8005870:	f002 fedf 	bl	8008632 <RFW_SetRadioModem>
    switch( modem )
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b03      	cmp	r3, #3
 800587a:	d80b      	bhi.n	8005894 <RadioSetModem+0x38>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <RadioSetModem+0x28>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058a3 	.word	0x080058a3
 8005888:	080058c9 	.word	0x080058c9
 800588c:	080058d7 	.word	0x080058d7
 8005890:	080058e5 	.word	0x080058e5
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005894:	2000      	movs	r0, #0
 8005896:	f002 f961 	bl	8007b5c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <RadioSetModem+0xa0>)
 800589c:	2200      	movs	r2, #0
 800589e:	735a      	strb	r2, [r3, #13]
        break;
 80058a0:	e028      	b.n	80058f4 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80058a2:	2001      	movs	r0, #1
 80058a4:	f002 f95a 	bl	8007b5c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80058a8:	4b14      	ldr	r3, [pc, #80]	; (80058fc <RadioSetModem+0xa0>)
 80058aa:	7b5a      	ldrb	r2, [r3, #13]
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <RadioSetModem+0xa0>)
 80058ae:	7b1b      	ldrb	r3, [r3, #12]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d01e      	beq.n	80058f2 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <RadioSetModem+0xa0>)
 80058b6:	7b1a      	ldrb	r2, [r3, #12]
 80058b8:	4b10      	ldr	r3, [pc, #64]	; (80058fc <RadioSetModem+0xa0>)
 80058ba:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <RadioSetModem+0xa0>)
 80058be:	7b5b      	ldrb	r3, [r3, #13]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 ff43 	bl	800674c <RadioSetPublicNetwork>
        }
        break;
 80058c6:	e014      	b.n	80058f2 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80058c8:	2002      	movs	r0, #2
 80058ca:	f002 f947 	bl	8007b5c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <RadioSetModem+0xa0>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	735a      	strb	r2, [r3, #13]
        break;
 80058d4:	e00e      	b.n	80058f4 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80058d6:	2002      	movs	r0, #2
 80058d8:	f002 f940 	bl	8007b5c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <RadioSetModem+0xa0>)
 80058de:	2200      	movs	r2, #0
 80058e0:	735a      	strb	r2, [r3, #13]
        break;
 80058e2:	e007      	b.n	80058f4 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80058e4:	2000      	movs	r0, #0
 80058e6:	f002 f939 	bl	8007b5c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <RadioSetModem+0xa0>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	735a      	strb	r2, [r3, #13]
        break;
 80058f0:	e000      	b.n	80058f4 <RadioSetModem+0x98>
        break;
 80058f2:	bf00      	nop
    }
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000594 	.word	0x20000594

08005900 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f002 f8e5 	bl	8007ad8 <SUBGRF_SetRfFrequency>
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b090      	sub	sp, #64	; 0x40
 800591a:	af0a      	add	r7, sp, #40	; 0x28
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005932:	f000 fdd2 	bl	80064da <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005936:	2000      	movs	r0, #0
 8005938:	f7ff ff90 	bl	800585c <RadioSetModem>

    RadioSetChannel( freq );
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff ffdf 	bl	8005900 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005942:	2301      	movs	r3, #1
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	2300      	movs	r3, #0
 8005948:	9308      	str	r3, [sp, #32]
 800594a:	2300      	movs	r3, #0
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	9306      	str	r3, [sp, #24]
 8005952:	2300      	movs	r3, #0
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	2300      	movs	r3, #0
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	2300      	movs	r3, #0
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	2300      	movs	r3, #0
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	2303      	movs	r3, #3
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	2000      	movs	r0, #0
 8005974:	f000 f826 	bl	80059c4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005978:	2000      	movs	r0, #0
 800597a:	f000 fdb5 	bl	80064e8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800597e:	f000 ff13 	bl	80067a8 <RadioGetWakeupTime>
 8005982:	4603      	mov	r3, r0
 8005984:	4618      	mov	r0, r3
 8005986:	f7fc fbc3 	bl	8002110 <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800598a:	f000 fda6 	bl	80064da <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80059a2:	2001      	movs	r0, #1
 80059a4:	f7ff ff5a 	bl	800585c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	2000      	movs	r0, #0
 80059b0:	f002 f836 	bl	8007a20 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80059b4:	f001 fdeb 	bl	800758e <SUBGRF_GetRandom>
 80059b8:	6078      	str	r0, [r7, #4]

    return rnd;
 80059ba:	687b      	ldr	r3, [r7, #4]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	4613      	mov	r3, r2
 80059d6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80059d8:	4abd      	ldr	r2, [pc, #756]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 80059da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80059de:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80059e0:	f002 fde5 	bl	80085ae <RFW_DeInit>
    if( rxContinuous == true )
 80059e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80059f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80059f8:	4ab6      	ldr	r2, [pc, #728]	; (8005cd4 <RadioSetRxConfig+0x310>)
 80059fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80059fe:	7013      	strb	r3, [r2, #0]
 8005a00:	e002      	b.n	8005a08 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005a02:	4bb4      	ldr	r3, [pc, #720]	; (8005cd4 <RadioSetRxConfig+0x310>)
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d009      	beq.n	8005a22 <RadioSetRxConfig+0x5e>
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	f300 81da 	bgt.w	8005dc8 <RadioSetRxConfig+0x404>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80bf 	beq.w	8005b98 <RadioSetRxConfig+0x1d4>
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	f000 812c 	beq.w	8005c78 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005a20:	e1d2      	b.n	8005dc8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005a22:	2001      	movs	r0, #1
 8005a24:	f001 fef8 	bl	8007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005a28:	4ba9      	ldr	r3, [pc, #676]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005a30:	4aa7      	ldr	r2, [pc, #668]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005a36:	4ba6      	ldr	r3, [pc, #664]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a38:	2209      	movs	r2, #9
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005a3e:	4ba4      	ldr	r3, [pc, #656]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005a46:	68b8      	ldr	r0, [r7, #8]
 8005a48:	f002 fce2 	bl	8008410 <SUBGRF_GetFskBandwidthRegValue>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b9f      	ldr	r3, [pc, #636]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005a56:	4b9e      	ldr	r3, [pc, #632]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005a5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	4b9b      	ldr	r3, [pc, #620]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a64:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005a66:	4b9a      	ldr	r3, [pc, #616]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005a6c:	4b98      	ldr	r3, [pc, #608]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a6e:	2210      	movs	r2, #16
 8005a70:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005a78:	4b95      	ldr	r3, [pc, #596]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005a7e:	4b95      	ldr	r3, [pc, #596]	; (8005cd4 <RadioSetRxConfig+0x310>)
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a84:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005a86:	4b92      	ldr	r3, [pc, #584]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8005a8c:	4b90      	ldr	r3, [pc, #576]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8005a92:	2004      	movs	r0, #4
 8005a94:	f7ff fee2 	bl	800585c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a98:	488f      	ldr	r0, [pc, #572]	; (8005cd8 <RadioSetRxConfig+0x314>)
 8005a9a:	f002 f8eb 	bl	8007c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a9e:	488f      	ldr	r0, [pc, #572]	; (8005cdc <RadioSetRxConfig+0x318>)
 8005aa0:	f002 f9b4 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005aa4:	4a8e      	ldr	r2, [pc, #568]	; (8005ce0 <RadioSetRxConfig+0x31c>)
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ab2:	f107 031c 	add.w	r3, r7, #28
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fce7 	bl	800748a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005abc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ac0:	f001 fd32 	bl	8007528 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8005ac4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005ac8:	f000 fdde 	bl	8006688 <RadioRead>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8005ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8005ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005ae8:	f000 fdbc 	bl	8006664 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8005aec:	2104      	movs	r1, #4
 8005aee:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005af2:	f000 fdb7 	bl	8006664 <RadioWrite>
            modReg= RadioRead(0x89b);
 8005af6:	f640 009b 	movw	r0, #2203	; 0x89b
 8005afa:	f000 fdc5 	bl	8006688 <RadioRead>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b08:	f023 031c 	bic.w	r3, r3, #28
 8005b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b14:	f043 0308 	orr.w	r3, r3, #8
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f640 009b 	movw	r0, #2203	; 0x89b
 8005b20:	f000 fda0 	bl	8006664 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005b24:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005b28:	f000 fdae 	bl	8006688 <RadioRead>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b36:	f023 0318 	bic.w	r3, r3, #24
 8005b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8005b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b42:	f043 0318 	orr.w	r3, r3, #24
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005b4e:	f000 fd89 	bl	8006664 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005b52:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005b56:	f000 fd97 	bl	8006688 <RadioRead>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8005b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b70:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005b7c:	f000 fd72 	bl	8006664 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005b80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005b94:	6093      	str	r3, [r2, #8]
            break;
 8005b96:	e118      	b.n	8005dca <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f001 fe3d 	bl	8007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005b9e:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005ba6:	4a4a      	ldr	r2, [pc, #296]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005bac:	4b48      	ldr	r3, [pc, #288]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bae:	220b      	movs	r2, #11
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005bb4:	68b8      	ldr	r0, [r7, #8]
 8005bb6:	f002 fc2b 	bl	8008410 <SUBGRF_GetFskBandwidthRegValue>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005bca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	4b3f      	ldr	r3, [pc, #252]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bd2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bdc:	2218      	movs	r2, #24
 8005bde:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005be6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b37      	ldr	r3, [pc, #220]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bf4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <RadioSetRxConfig+0x310>)
 8005bf8:	781a      	ldrb	r2, [r3, #0]
 8005bfa:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005bfc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8005bfe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005c06:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c08:	22f2      	movs	r2, #242	; 0xf2
 8005c0a:	75da      	strb	r2, [r3, #23]
 8005c0c:	e002      	b.n	8005c14 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005c0e:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005c14:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005c1a:	f000 fc5e 	bl	80064da <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fe14 	bl	800585c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005c34:	4828      	ldr	r0, [pc, #160]	; (8005cd8 <RadioSetRxConfig+0x314>)
 8005c36:	f002 f81d 	bl	8007c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c3a:	4828      	ldr	r0, [pc, #160]	; (8005cdc <RadioSetRxConfig+0x318>)
 8005c3c:	f002 f8e6 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005c40:	4a28      	ldr	r2, [pc, #160]	; (8005ce4 <RadioSetRxConfig+0x320>)
 8005c42:	f107 0314 	add.w	r3, r7, #20
 8005c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c4e:	f107 0314 	add.w	r3, r7, #20
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fc19 	bl	800748a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005c58:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c5c:	f001 fc64 	bl	8007528 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005c60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c74:	6093      	str	r3, [r2, #8]
            break;
 8005c76:	e0a8      	b.n	8005dca <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f001 fdcd 	bl	8007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <RadioSetRxConfig+0x324>)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4413      	add	r3, r2
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <RadioSetRxConfig+0x2f4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b0b      	cmp	r3, #11
 8005cb0:	d008      	beq.n	8005cc4 <RadioSetRxConfig+0x300>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d005      	beq.n	8005cc4 <RadioSetRxConfig+0x300>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d116      	bne.n	8005cec <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b0c      	cmp	r3, #12
 8005cc2:	d113      	bne.n	8005cec <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005cc4:	4b02      	ldr	r3, [pc, #8]	; (8005cd0 <RadioSetRxConfig+0x30c>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005ccc:	e012      	b.n	8005cf4 <RadioSetRxConfig+0x330>
 8005cce:	bf00      	nop
 8005cd0:	20000594 	.word	0x20000594
 8005cd4:	20000009 	.word	0x20000009
 8005cd8:	200005cc 	.word	0x200005cc
 8005cdc:	200005a2 	.word	0x200005a2
 8005ce0:	0800e0c4 	.word	0x0800e0c4
 8005ce4:	0800e0cc 	.word	0x0800e0cc
 8005ce8:	0800e4d4 	.word	0x0800e4d4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005cec:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005cf4:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005cfa:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d00:	2b05      	cmp	r3, #5
 8005d02:	d004      	beq.n	8005d0e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d0a:	2b06      	cmp	r3, #6
 8005d0c:	d10a      	bne.n	8005d24 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005d0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d10:	2b0b      	cmp	r3, #11
 8005d12:	d803      	bhi.n	8005d1c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005d14:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d16:	220c      	movs	r2, #12
 8005d18:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005d1a:	e006      	b.n	8005d2a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005d1c:	4a2d      	ldr	r2, [pc, #180]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d20:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005d22:	e002      	b.n	8005d2a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d28:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005d2a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d30:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005d32:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <RadioSetRxConfig+0x414>)
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d38:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005d3a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005d3e:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d40:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005d44:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005d48:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005d4e:	f000 fbc4 	bl	80064da <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005d52:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fd7a 	bl	800585c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005d68:	481c      	ldr	r0, [pc, #112]	; (8005ddc <RadioSetRxConfig+0x418>)
 8005d6a:	f001 ff83 	bl	8007c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d6e:	481c      	ldr	r0, [pc, #112]	; (8005de0 <RadioSetRxConfig+0x41c>)
 8005d70:	f002 f84c 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005d74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fd5c 	bl	8007836 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10d      	bne.n	8005da4 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005d88:	f240 7036 	movw	r0, #1846	; 0x736
 8005d8c:	f002 f99a 	bl	80080c4 <SUBGRF_ReadRegister>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f023 0304 	bic.w	r3, r3, #4
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f240 7036 	movw	r0, #1846	; 0x736
 8005d9e:	f002 f97d 	bl	800809c <SUBGRF_WriteRegister>
 8005da2:	e00c      	b.n	8005dbe <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005da4:	f240 7036 	movw	r0, #1846	; 0x736
 8005da8:	f002 f98c 	bl	80080c4 <SUBGRF_ReadRegister>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f043 0304 	orr.w	r3, r3, #4
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	f240 7036 	movw	r0, #1846	; 0x736
 8005dba:	f002 f96f 	bl	800809c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <RadioSetRxConfig+0x410>)
 8005dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc4:	609a      	str	r2, [r3, #8]
            break;
 8005dc6:	e000      	b.n	8005dca <RadioSetRxConfig+0x406>
            break;
 8005dc8:	bf00      	nop
    }
}
 8005dca:	bf00      	nop
 8005dcc:	3728      	adds	r7, #40	; 0x28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000594 	.word	0x20000594
 8005dd8:	20000009 	.word	0x20000009
 8005ddc:	200005cc 	.word	0x200005cc
 8005de0:	200005a2 	.word	0x200005a2

08005de4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60ba      	str	r2, [r7, #8]
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	460b      	mov	r3, r1
 8005df4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005df6:	f002 fbda 	bl	80085ae <RFW_DeInit>
    switch( modem )
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	f000 80d7 	beq.w	8005fb0 <RadioSetTxConfig+0x1cc>
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	f300 80e6 	bgt.w	8005fd4 <RadioSetTxConfig+0x1f0>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <RadioSetTxConfig+0x2e>
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d061      	beq.n	8005ed4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005e10:	e0e0      	b.n	8005fd4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005e12:	4b7c      	ldr	r3, [pc, #496]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005e1a:	4a7a      	ldr	r2, [pc, #488]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005e20:	4b78      	ldr	r3, [pc, #480]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e22:	220b      	movs	r2, #11
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 faf1 	bl	8008410 <SUBGRF_GetFskBandwidthRegValue>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b74      	ldr	r3, [pc, #464]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005e38:	4a72      	ldr	r2, [pc, #456]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005e3e:	4b71      	ldr	r3, [pc, #452]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005e44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	4b6e      	ldr	r3, [pc, #440]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e4c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005e4e:	4b6d      	ldr	r3, [pc, #436]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e50:	2204      	movs	r2, #4
 8005e52:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005e54:	4b6b      	ldr	r3, [pc, #428]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e56:	2218      	movs	r2, #24
 8005e58:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e64:	f083 0301 	eor.w	r3, r3, #1
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b65      	ldr	r3, [pc, #404]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e6e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8005e70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005e78:	4b62      	ldr	r3, [pc, #392]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e7a:	22f2      	movs	r2, #242	; 0xf2
 8005e7c:	75da      	strb	r2, [r3, #23]
 8005e7e:	e002      	b.n	8005e86 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005e80:	4b60      	ldr	r3, [pc, #384]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005e86:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005e8c:	f000 fb25 	bl	80064da <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005e90:	4b5c      	ldr	r3, [pc, #368]	; (8006004 <RadioSetTxConfig+0x220>)
 8005e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fcdb 	bl	800585c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005ea6:	4858      	ldr	r0, [pc, #352]	; (8006008 <RadioSetTxConfig+0x224>)
 8005ea8:	f001 fee4 	bl	8007c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005eac:	4857      	ldr	r0, [pc, #348]	; (800600c <RadioSetTxConfig+0x228>)
 8005eae:	f001 ffad 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005eb2:	4a57      	ldr	r2, [pc, #348]	; (8006010 <RadioSetTxConfig+0x22c>)
 8005eb4:	f107 0310 	add.w	r3, r7, #16
 8005eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ebc:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ec0:	f107 0310 	add.w	r3, r7, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fae0 	bl	800748a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ece:	f001 fb2b 	bl	8007528 <SUBGRF_SetWhiteningSeed>
            break;
 8005ed2:	e080      	b.n	8005fd6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <RadioSetTxConfig+0x220>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b48      	ldr	r3, [pc, #288]	; (8006004 <RadioSetTxConfig+0x220>)
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005ee6:	4a4b      	ldr	r2, [pc, #300]	; (8006014 <RadioSetTxConfig+0x230>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	4b45      	ldr	r3, [pc, #276]	; (8006004 <RadioSetTxConfig+0x220>)
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005ef4:	4a43      	ldr	r2, [pc, #268]	; (8006004 <RadioSetTxConfig+0x220>)
 8005ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005efa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <RadioSetTxConfig+0x12c>
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b0b      	cmp	r3, #11
 8005f08:	d008      	beq.n	8005f1c <RadioSetTxConfig+0x138>
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d005      	beq.n	8005f1c <RadioSetTxConfig+0x138>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d107      	bne.n	8005f26 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d104      	bne.n	8005f26 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005f24:	e003      	b.n	8005f2e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005f2e:	4b35      	ldr	r3, [pc, #212]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f34:	4b33      	ldr	r3, [pc, #204]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d004      	beq.n	8005f48 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d10a      	bne.n	8005f5e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f4a:	2b0b      	cmp	r3, #11
 8005f4c:	d803      	bhi.n	8005f56 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f50:	220c      	movs	r2, #12
 8005f52:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005f54:	e006      	b.n	8005f64 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005f56:	4a2b      	ldr	r2, [pc, #172]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f5a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005f5c:	e002      	b.n	8005f64 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005f5e:	4a29      	ldr	r2, [pc, #164]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f62:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005f64:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005f68:	4b26      	ldr	r3, [pc, #152]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f6a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005f6c:	4b2a      	ldr	r3, [pc, #168]	; (8006018 <RadioSetTxConfig+0x234>)
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	4b24      	ldr	r3, [pc, #144]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f72:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005f74:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005f78:	4b22      	ldr	r3, [pc, #136]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f7a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005f7e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005f88:	f000 faa7 	bl	80064da <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <RadioSetTxConfig+0x220>)
 8005f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fc5d 	bl	800585c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005fa2:	4819      	ldr	r0, [pc, #100]	; (8006008 <RadioSetTxConfig+0x224>)
 8005fa4:	f001 fe66 	bl	8007c74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005fa8:	4818      	ldr	r0, [pc, #96]	; (800600c <RadioSetTxConfig+0x228>)
 8005faa:	f001 ff2f 	bl	8007e0c <SUBGRF_SetPacketParams>
            break;
 8005fae:	e012      	b.n	8005fd6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005fb0:	2003      	movs	r0, #3
 8005fb2:	f7ff fc53 	bl	800585c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <RadioSetTxConfig+0x220>)
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005fbe:	4a11      	ldr	r2, [pc, #68]	; (8006004 <RadioSetTxConfig+0x220>)
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <RadioSetTxConfig+0x220>)
 8005fc6:	2216      	movs	r2, #22
 8005fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005fcc:	480e      	ldr	r0, [pc, #56]	; (8006008 <RadioSetTxConfig+0x224>)
 8005fce:	f001 fe51 	bl	8007c74 <SUBGRF_SetModulationParams>
            break;
 8005fd2:	e000      	b.n	8005fd6 <RadioSetTxConfig+0x1f2>
            break;
 8005fd4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 f92a 	bl	8008234 <SUBGRF_SetRfTxPower>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b07      	ldr	r3, [pc, #28]	; (8006004 <RadioSetTxConfig+0x220>)
 8005fe6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <RadioSetTxConfig+0x220>)
 8005fec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f002 faf0 	bl	80085d6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005ff6:	4a03      	ldr	r2, [pc, #12]	; (8006004 <RadioSetTxConfig+0x220>)
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	6053      	str	r3, [r2, #4]
}
 8005ffc:	bf00      	nop
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000594 	.word	0x20000594
 8006008:	200005cc 	.word	0x200005cc
 800600c:	200005a2 	.word	0x200005a2
 8006010:	0800e0cc 	.word	0x0800e0cc
 8006014:	0800e4d4 	.word	0x0800e4d4
 8006018:	20000009 	.word	0x20000009

0800601c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
    return true;
 8006024:	2301      	movs	r3, #1
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	2b0a      	cmp	r3, #10
 8006042:	d83e      	bhi.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <RadioGetLoRaBandwidthInHz+0x1c>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006079 	.word	0x08006079
 8006050:	08006089 	.word	0x08006089
 8006054:	08006099 	.word	0x08006099
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060b1 	.word	0x080060b1
 8006060:	080060b7 	.word	0x080060b7
 8006064:	080060bd 	.word	0x080060bd
 8006068:	080060c3 	.word	0x080060c3
 800606c:	08006081 	.word	0x08006081
 8006070:	08006091 	.word	0x08006091
 8006074:	080060a1 	.word	0x080060a1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006078:	f641 6384 	movw	r3, #7812	; 0x1e84
 800607c:	60fb      	str	r3, [r7, #12]
        break;
 800607e:	e020      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006080:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8006084:	60fb      	str	r3, [r7, #12]
        break;
 8006086:	e01c      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006088:	f643 5309 	movw	r3, #15625	; 0x3d09
 800608c:	60fb      	str	r3, [r7, #12]
        break;
 800608e:	e018      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006090:	f245 1361 	movw	r3, #20833	; 0x5161
 8006094:	60fb      	str	r3, [r7, #12]
        break;
 8006096:	e014      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006098:	f647 2312 	movw	r3, #31250	; 0x7a12
 800609c:	60fb      	str	r3, [r7, #12]
        break;
 800609e:	e010      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80060a0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80060a4:	60fb      	str	r3, [r7, #12]
        break;
 80060a6:	e00c      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80060a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80060ac:	60fb      	str	r3, [r7, #12]
        break;
 80060ae:	e008      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80060b2:	60fb      	str	r3, [r7, #12]
        break;
 80060b4:	e005      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80060b8:	60fb      	str	r3, [r7, #12]
        break;
 80060ba:	e002      	b.n	80060c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80060be:	60fb      	str	r3, [r7, #12]
        break;
 80060c0:	bf00      	nop
    }

    return bandwidthInHz;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	0001e848 	.word	0x0001e848
 80060d4:	0003d090 	.word	0x0003d090
 80060d8:	0007a120 	.word	0x0007a120

080060dc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	70fb      	strb	r3, [r7, #3]
 80060ee:	460b      	mov	r3, r1
 80060f0:	803b      	strh	r3, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80060f6:	883b      	ldrh	r3, [r7, #0]
 80060f8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80060fa:	78ba      	ldrb	r2, [r7, #2]
 80060fc:	f082 0201 	eor.w	r2, r2, #1
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	2a00      	cmp	r2, #0
 8006104:	d001      	beq.n	800610a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006106:	2208      	movs	r2, #8
 8006108:	e000      	b.n	800610c <RadioGetGfskTimeOnAirNumerator+0x30>
 800610a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800610c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800610e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006112:	7c3b      	ldrb	r3, [r7, #16]
 8006114:	7d39      	ldrb	r1, [r7, #20]
 8006116:	2900      	cmp	r1, #0
 8006118:	d001      	beq.n	800611e <RadioGetGfskTimeOnAirNumerator+0x42>
 800611a:	2102      	movs	r1, #2
 800611c:	e000      	b.n	8006120 <RadioGetGfskTimeOnAirNumerator+0x44>
 800611e:	2100      	movs	r1, #0
 8006120:	440b      	add	r3, r1
 8006122:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006124:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006130:	b480      	push	{r7}
 8006132:	b08b      	sub	sp, #44	; 0x2c
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	460b      	mov	r3, r1
 8006140:	71fb      	strb	r3, [r7, #7]
 8006142:	4613      	mov	r3, r2
 8006144:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	3304      	adds	r3, #4
 800614a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800614c:	2300      	movs	r3, #0
 800614e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b05      	cmp	r3, #5
 8006156:	d002      	beq.n	800615e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d104      	bne.n	8006168 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800615e:	88bb      	ldrh	r3, [r7, #4]
 8006160:	2b0b      	cmp	r3, #11
 8006162:	d801      	bhi.n	8006168 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006164:	230c      	movs	r3, #12
 8006166:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b0b      	cmp	r3, #11
 8006172:	d008      	beq.n	8006186 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b0c      	cmp	r3, #12
 8006178:	d005      	beq.n	8006186 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d105      	bne.n	800618c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b0c      	cmp	r3, #12
 8006184:	d102      	bne.n	800618c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800618c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006190:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006192:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006196:	2a00      	cmp	r2, #0
 8006198:	d001      	beq.n	800619e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800619a:	2210      	movs	r2, #16
 800619c:	e000      	b.n	80061a0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800619e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80061a0:	4413      	add	r3, r2
 80061a2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80061a8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80061aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	d001      	beq.n	80061b6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80061b2:	2200      	movs	r2, #0
 80061b4:	e000      	b.n	80061b8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80061b6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80061b8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80061ba:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d803      	bhi.n	80061ca <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	e00e      	b.n	80061e8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3308      	adds	r3, #8
 80061ce:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80061d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	3b02      	subs	r3, #2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	623b      	str	r3, [r7, #32]
 80061e0:	e002      	b.n	80061e8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da01      	bge.n	80061f2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	4413      	add	r3, r2
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	fb02 f203 	mul.w	r2, r2, r3
 8006206:	88bb      	ldrh	r3, [r7, #4]
 8006208:	4413      	add	r3, r2
    int32_t intermediate =
 800620a:	330c      	adds	r3, #12
 800620c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d802      	bhi.n	800621a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	3302      	adds	r3, #2
 8006218:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3b02      	subs	r3, #2
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	372c      	adds	r7, #44	; 0x2c
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
	...

08006234 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	; 0x28
 8006238:	af04      	add	r7, sp, #16
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	461a      	mov	r2, r3
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	4613      	mov	r3, r2
 8006246:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800624c:	2301      	movs	r3, #1
 800624e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <RadioTimeOnAir+0x28>
 8006256:	2b01      	cmp	r3, #1
 8006258:	d017      	beq.n	800628a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800625a:	e035      	b.n	80062c8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800625c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8006260:	8c3a      	ldrh	r2, [r7, #32]
 8006262:	7bb9      	ldrb	r1, [r7, #14]
 8006264:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ff32 	bl	80060dc <RadioGetGfskTimeOnAirNumerator>
 8006278:	4603      	mov	r3, r0
 800627a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	613b      	str	r3, [r7, #16]
        break;
 8006288:	e01e      	b.n	80062c8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800628a:	8c39      	ldrh	r1, [r7, #32]
 800628c:	7bba      	ldrb	r2, [r7, #14]
 800628e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	460b      	mov	r3, r1
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	68b8      	ldr	r0, [r7, #8]
 80062a6:	f7ff ff43 	bl	8006130 <RadioGetLoRaTimeOnAirNumerator>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80062b6:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <RadioTimeOnAir+0xac>)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4413      	add	r3, r2
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff feb6 	bl	8006030 <RadioGetLoRaBandwidthInHz>
 80062c4:	6138      	str	r0, [r7, #16]
        break;
 80062c6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4413      	add	r3, r2
 80062ce:	1e5a      	subs	r2, r3, #1
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	0800e4d4 	.word	0x0800e4d4

080062e4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	f240 2101 	movw	r1, #513	; 0x201
 80062f8:	f240 2001 	movw	r0, #513	; 0x201
 80062fc:	f001 fb90 	bl	8007a20 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8006300:	4b69      	ldr	r3, [pc, #420]	; (80064a8 <RadioSend+0x1c4>)
 8006302:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006306:	2101      	movs	r1, #1
 8006308:	4618      	mov	r0, r3
 800630a:	f001 ff6b 	bl	80081e4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800630e:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <RadioSend+0x1c4>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d112      	bne.n	800633c <RadioSend+0x58>
 8006316:	4b64      	ldr	r3, [pc, #400]	; (80064a8 <RadioSend+0x1c4>)
 8006318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800631c:	2b06      	cmp	r3, #6
 800631e:	d10d      	bne.n	800633c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006320:	f640 0089 	movw	r0, #2185	; 0x889
 8006324:	f001 fece 	bl	80080c4 <SUBGRF_ReadRegister>
 8006328:	4603      	mov	r3, r0
 800632a:	f023 0304 	bic.w	r3, r3, #4
 800632e:	b2db      	uxtb	r3, r3
 8006330:	4619      	mov	r1, r3
 8006332:	f640 0089 	movw	r0, #2185	; 0x889
 8006336:	f001 feb1 	bl	800809c <SUBGRF_WriteRegister>
 800633a:	e00c      	b.n	8006356 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800633c:	f640 0089 	movw	r0, #2185	; 0x889
 8006340:	f001 fec0 	bl	80080c4 <SUBGRF_ReadRegister>
 8006344:	4603      	mov	r3, r0
 8006346:	f043 0304 	orr.w	r3, r3, #4
 800634a:	b2db      	uxtb	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	f640 0089 	movw	r0, #2185	; 0x889
 8006352:	f001 fea3 	bl	800809c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8006356:	4b54      	ldr	r3, [pc, #336]	; (80064a8 <RadioSend+0x1c4>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b03      	cmp	r3, #3
 800635c:	f200 809e 	bhi.w	800649c <RadioSend+0x1b8>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <RadioSend+0x84>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	08006393 	.word	0x08006393
 800636c:	08006379 	.word	0x08006379
 8006370:	080063e5 	.word	0x080063e5
 8006374:	08006405 	.word	0x08006405
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006378:	4a4b      	ldr	r2, [pc, #300]	; (80064a8 <RadioSend+0x1c4>)
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800637e:	484b      	ldr	r0, [pc, #300]	; (80064ac <RadioSend+0x1c8>)
 8006380:	f001 fd44 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	2200      	movs	r2, #0
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f86a 	bl	8007464 <SUBGRF_SendPayload>
            break;
 8006390:	e087      	b.n	80064a2 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006392:	f002 f912 	bl	80085ba <RFW_Is_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d116      	bne.n	80063ca <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800639c:	f107 020d 	add.w	r2, r7, #13
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 f920 	bl	80085ea <RFW_TransmitInit>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d177      	bne.n	80064a0 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80063b0:	7b7a      	ldrb	r2, [r7, #13]
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <RadioSend+0x1c4>)
 80063b4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80063b6:	483d      	ldr	r0, [pc, #244]	; (80064ac <RadioSend+0x1c8>)
 80063b8:	f001 fd28 	bl	8007e0c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80063bc:	7b7b      	ldrb	r3, [r7, #13]
 80063be:	2200      	movs	r2, #0
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 f84e 	bl	8007464 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80063c8:	e06b      	b.n	80064a2 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80063ca:	4a37      	ldr	r2, [pc, #220]	; (80064a8 <RadioSend+0x1c4>)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80063d0:	4836      	ldr	r0, [pc, #216]	; (80064ac <RadioSend+0x1c8>)
 80063d2:	f001 fd1b 	bl	8007e0c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	2200      	movs	r2, #0
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f841 	bl	8007464 <SUBGRF_SendPayload>
            break;
 80063e2:	e05e      	b.n	80064a2 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <RadioSend+0x1c4>)
 80063e6:	2202      	movs	r2, #2
 80063e8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80063ea:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <RadioSend+0x1c4>)
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80063f0:	482e      	ldr	r0, [pc, #184]	; (80064ac <RadioSend+0x1c8>)
 80063f2:	f001 fd0b 	bl	8007e0c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	2200      	movs	r2, #0
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f831 	bl	8007464 <SUBGRF_SendPayload>
            break;
 8006402:	e04e      	b.n	80064a2 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	461a      	mov	r2, r3
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4829      	ldr	r0, [pc, #164]	; (80064b0 <RadioSend+0x1cc>)
 800640c:	f000 fbb1 	bl	8006b72 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <RadioSend+0x1c4>)
 8006412:	2202      	movs	r2, #2
 8006414:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	3301      	adds	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <RadioSend+0x1c4>)
 800641e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006420:	4822      	ldr	r0, [pc, #136]	; (80064ac <RadioSend+0x1c8>)
 8006422:	f001 fcf3 	bl	8007e0c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8006426:	2100      	movs	r1, #0
 8006428:	20f1      	movs	r0, #241	; 0xf1
 800642a:	f000 f91b 	bl	8006664 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800642e:	2100      	movs	r1, #0
 8006430:	20f0      	movs	r0, #240	; 0xf0
 8006432:	f000 f917 	bl	8006664 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006436:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <RadioSend+0x1c4>)
 8006438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d108      	bne.n	8006450 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800643e:	2170      	movs	r1, #112	; 0x70
 8006440:	20f3      	movs	r0, #243	; 0xf3
 8006442:	f000 f90f 	bl	8006664 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8006446:	211d      	movs	r1, #29
 8006448:	20f2      	movs	r0, #242	; 0xf2
 800644a:	f000 f90b 	bl	8006664 <RadioWrite>
 800644e:	e007      	b.n	8006460 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8006450:	21e1      	movs	r1, #225	; 0xe1
 8006452:	20f3      	movs	r0, #243	; 0xf3
 8006454:	f000 f906 	bl	8006664 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8006458:	2104      	movs	r1, #4
 800645a:	20f2      	movs	r0, #242	; 0xf2
 800645c:	f000 f902 	bl	8006664 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	b29b      	uxth	r3, r3
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	b29b      	uxth	r3, r3
 8006468:	3302      	adds	r3, #2
 800646a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	b29b      	uxth	r3, r3
 8006472:	b2db      	uxtb	r3, r3
 8006474:	4619      	mov	r1, r3
 8006476:	20f4      	movs	r0, #244	; 0xf4
 8006478:	f000 f8f4 	bl	8006664 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800647c:	89fb      	ldrh	r3, [r7, #14]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	20f5      	movs	r0, #245	; 0xf5
 8006484:	f000 f8ee 	bl	8006664 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	3301      	adds	r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006492:	4619      	mov	r1, r3
 8006494:	4806      	ldr	r0, [pc, #24]	; (80064b0 <RadioSend+0x1cc>)
 8006496:	f000 ffe5 	bl	8007464 <SUBGRF_SendPayload>
            break;
 800649a:	e002      	b.n	80064a2 <RadioSend+0x1be>
        }
        default:
            break;
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <RadioSend+0x1be>
                return;
 80064a0:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000594 	.word	0x20000594
 80064ac:	200005a2 	.word	0x200005a2
 80064b0:	20000350 	.word	0x20000350

080064b4 <RadioSleep>:

static void RadioSleep( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80064ba:	2300      	movs	r3, #0
 80064bc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80064be:	793b      	ldrb	r3, [r7, #4]
 80064c0:	f043 0304 	orr.w	r3, r3, #4
 80064c4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80064c6:	7938      	ldrb	r0, [r7, #4]
 80064c8:	f001 f8a8 	bl	800761c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80064cc:	2002      	movs	r0, #2
 80064ce:	f7fb fe1f 	bl	8002110 <HAL_Delay>
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <RadioStandby>:

static void RadioStandby( void )
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80064de:	2000      	movs	r0, #0
 80064e0:	f001 f8ce 	bl	8007680 <SUBGRF_SetStandby>
}
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80064f0:	f002 f863 	bl	80085ba <RFW_Is_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80064fa:	f002 f886 	bl	800860a <RFW_ReceiveInit>
 80064fe:	e007      	b.n	8006510 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006500:	2300      	movs	r3, #0
 8006502:	2200      	movs	r2, #0
 8006504:	f240 2162 	movw	r1, #610	; 0x262
 8006508:	f240 2062 	movw	r0, #610	; 0x262
 800650c:	f001 fa88 	bl	8007a20 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <RadioRx+0x5c>)
 8006512:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fe63 	bl	80081e4 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <RadioRx+0x5c>)
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006526:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800652a:	f001 f8e5 	bl	80076f8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800652e:	e005      	b.n	800653c <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006530:	4b04      	ldr	r3, [pc, #16]	; (8006544 <RadioRx+0x5c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	019b      	lsls	r3, r3, #6
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f8de 	bl	80076f8 <SUBGRF_SetRx>
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000594 	.word	0x20000594

08006548 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006550:	f002 f833 	bl	80085ba <RFW_Is_Init>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800655a:	f002 f856 	bl	800860a <RFW_ReceiveInit>
 800655e:	e007      	b.n	8006570 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	f240 2162 	movw	r1, #610	; 0x262
 8006568:	f240 2062 	movw	r0, #610	; 0x262
 800656c:	f001 fa58 	bl	8007a20 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <RadioRxBoosted+0x5c>)
 8006572:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f001 fe33 	bl	80081e4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <RadioRxBoosted+0x5c>)
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006586:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800658a:	f001 f8d5 	bl	8007738 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800658e:	e005      	b.n	800659c <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <RadioRxBoosted+0x5c>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	4618      	mov	r0, r3
 8006598:	f001 f8ce 	bl	8007738 <SUBGRF_SetRxBoosted>
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000594 	.word	0x20000594

080065a8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <RadioSetRxDutyCycle+0x28>)
 80065b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fe12 	bl	80081e4 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f8dc 	bl	8007780 <SUBGRF_SetRxDutyCycle>
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000594 	.word	0x20000594

080065d4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <RadioStartCad+0x2c>)
 80065da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 fdff 	bl	80081e4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80065e6:	2300      	movs	r3, #0
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80065ee:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80065f2:	f001 fa15 	bl	8007a20 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80065f6:	f001 f8ef 	bl	80077d8 <SUBGRF_SetCad>
}
 80065fa:	bf00      	nop
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000594 	.word	0x20000594

08006604 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
 8006610:	4613      	mov	r3, r2
 8006612:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006614:	883b      	ldrh	r3, [r7, #0]
 8006616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fa59 	bl	8007ad8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fe02 	bl	8008234 <SUBGRF_SetRfTxPower>
 8006630:	4603      	mov	r3, r0
 8006632:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fdd3 	bl	80081e4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800663e:	f001 f8d9 	bl	80077f4 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	4603      	mov	r3, r0
 8006652:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006654:	f001 fc8f 	bl	8007f76 <SUBGRF_GetRssiInst>
 8006658:	4603      	mov	r3, r0
 800665a:	b21b      	sxth	r3, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	460a      	mov	r2, r1
 800666e:	80fb      	strh	r3, [r7, #6]
 8006670:	4613      	mov	r3, r2
 8006672:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006674:	797a      	ldrb	r2, [r7, #5]
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fd0e 	bl	800809c <SUBGRF_WriteRegister>
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fd15 	bl	80080c4 <SUBGRF_ReadRegister>
 800669a:	4603      	mov	r3, r0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	80fb      	strh	r3, [r7, #6]
 80066b0:	4613      	mov	r3, r2
 80066b2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80066b4:	797b      	ldrb	r3, [r7, #5]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 fd15 	bl	80080ec <SUBGRF_WriteRegisters>
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	4603      	mov	r3, r0
 80066d2:	6039      	str	r1, [r7, #0]
 80066d4:	80fb      	strh	r3, [r7, #6]
 80066d6:	4613      	mov	r3, r2
 80066d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80066da:	797b      	ldrb	r3, [r7, #5]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 fd16 	bl	8008114 <SUBGRF_ReadRegisters>
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	460a      	mov	r2, r1
 80066fa:	71fb      	strb	r3, [r7, #7]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10a      	bne.n	800671c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <RadioSetMaxPayloadLength+0x50>)
 8006708:	79bb      	ldrb	r3, [r7, #6]
 800670a:	7013      	strb	r3, [r2, #0]
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <RadioSetMaxPayloadLength+0x50>)
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <RadioSetMaxPayloadLength+0x54>)
 8006712:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006714:	480c      	ldr	r0, [pc, #48]	; (8006748 <RadioSetMaxPayloadLength+0x58>)
 8006716:	f001 fb79 	bl	8007e0c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800671a:	e00d      	b.n	8006738 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <RadioSetMaxPayloadLength+0x54>)
 800671e:	7d5b      	ldrb	r3, [r3, #21]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d109      	bne.n	8006738 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006724:	4a06      	ldr	r2, [pc, #24]	; (8006740 <RadioSetMaxPayloadLength+0x50>)
 8006726:	79bb      	ldrb	r3, [r7, #6]
 8006728:	7013      	strb	r3, [r2, #0]
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <RadioSetMaxPayloadLength+0x50>)
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <RadioSetMaxPayloadLength+0x54>)
 8006730:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006732:	4805      	ldr	r0, [pc, #20]	; (8006748 <RadioSetMaxPayloadLength+0x58>)
 8006734:	f001 fb6a 	bl	8007e0c <SUBGRF_SetPacketParams>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000009 	.word	0x20000009
 8006744:	20000594 	.word	0x20000594
 8006748:	200005a2 	.word	0x200005a2

0800674c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <RadioSetPublicNetwork+0x58>)
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	7313      	strb	r3, [r2, #12]
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <RadioSetPublicNetwork+0x58>)
 800675e:	7b1a      	ldrb	r2, [r3, #12]
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <RadioSetPublicNetwork+0x58>)
 8006762:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006764:	2001      	movs	r0, #1
 8006766:	f7ff f879 	bl	800585c <RadioSetModem>
    if( enable == true )
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006770:	2134      	movs	r1, #52	; 0x34
 8006772:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006776:	f001 fc91 	bl	800809c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800677a:	2144      	movs	r1, #68	; 0x44
 800677c:	f240 7041 	movw	r0, #1857	; 0x741
 8006780:	f001 fc8c 	bl	800809c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006784:	e009      	b.n	800679a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006786:	2114      	movs	r1, #20
 8006788:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800678c:	f001 fc86 	bl	800809c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006790:	2124      	movs	r1, #36	; 0x24
 8006792:	f240 7041 	movw	r0, #1857	; 0x741
 8006796:	f001 fc81 	bl	800809c <SUBGRF_WriteRegister>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000594 	.word	0x20000594

080067a8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80067ac:	f001 fd76 	bl	800829c <SUBGRF_GetRadioWakeUpTime>
 80067b0:	4603      	mov	r3, r0
 80067b2:	3303      	adds	r3, #3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <RadioOnDioIrq+0x20>)
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80067ca:	f000 f807 	bl	80067dc <RadioIrqProcess>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000594 	.word	0x20000594

080067dc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80067ea:	4bab      	ldr	r3, [pc, #684]	; (8006a98 <RadioIrqProcess+0x2bc>)
 80067ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f4:	f000 8104 	beq.w	8006a00 <RadioIrqProcess+0x224>
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	f300 816e 	bgt.w	8006adc <RadioIrqProcess+0x300>
 8006800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006804:	f000 80ea 	beq.w	80069dc <RadioIrqProcess+0x200>
 8006808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680c:	f300 8166 	bgt.w	8006adc <RadioIrqProcess+0x300>
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	f000 80cf 	beq.w	80069b4 <RadioIrqProcess+0x1d8>
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	f300 8160 	bgt.w	8006adc <RadioIrqProcess+0x300>
 800681c:	2b20      	cmp	r3, #32
 800681e:	dc49      	bgt.n	80068b4 <RadioIrqProcess+0xd8>
 8006820:	2b00      	cmp	r3, #0
 8006822:	f340 815b 	ble.w	8006adc <RadioIrqProcess+0x300>
 8006826:	3b01      	subs	r3, #1
 8006828:	2b1f      	cmp	r3, #31
 800682a:	f200 8157 	bhi.w	8006adc <RadioIrqProcess+0x300>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <RadioIrqProcess+0x58>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	080068bd 	.word	0x080068bd
 8006838:	080068f1 	.word	0x080068f1
 800683c:	08006add 	.word	0x08006add
 8006840:	08006add 	.word	0x08006add
 8006844:	08006add 	.word	0x08006add
 8006848:	08006add 	.word	0x08006add
 800684c:	08006add 	.word	0x08006add
 8006850:	08006a59 	.word	0x08006a59
 8006854:	08006add 	.word	0x08006add
 8006858:	08006add 	.word	0x08006add
 800685c:	08006add 	.word	0x08006add
 8006860:	08006add 	.word	0x08006add
 8006864:	08006add 	.word	0x08006add
 8006868:	08006add 	.word	0x08006add
 800686c:	08006add 	.word	0x08006add
 8006870:	08006add 	.word	0x08006add
 8006874:	08006add 	.word	0x08006add
 8006878:	08006add 	.word	0x08006add
 800687c:	08006add 	.word	0x08006add
 8006880:	08006add 	.word	0x08006add
 8006884:	08006add 	.word	0x08006add
 8006888:	08006add 	.word	0x08006add
 800688c:	08006add 	.word	0x08006add
 8006890:	08006add 	.word	0x08006add
 8006894:	08006add 	.word	0x08006add
 8006898:	08006add 	.word	0x08006add
 800689c:	08006add 	.word	0x08006add
 80068a0:	08006add 	.word	0x08006add
 80068a4:	08006add 	.word	0x08006add
 80068a8:	08006add 	.word	0x08006add
 80068ac:	08006add 	.word	0x08006add
 80068b0:	08006a69 	.word	0x08006a69
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	f000 80f9 	beq.w	8006aac <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80068ba:	e10f      	b.n	8006adc <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 80068bc:	2000      	movs	r0, #0
 80068be:	f000 fedf 	bl	8007680 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80068c2:	f001 fe81 	bl	80085c8 <RFW_Is_LongPacketModeEnabled>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 80068cc:	f001 fea5 	bl	800861a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80068d0:	4b72      	ldr	r3, [pc, #456]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8103 	beq.w	8006ae0 <RadioIrqProcess+0x304>
 80068da:	4b70      	ldr	r3, [pc, #448]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80fd 	beq.w	8006ae0 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 80068e6:	4b6d      	ldr	r3, [pc, #436]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4798      	blx	r3
        break;
 80068ee:	e0f7      	b.n	8006ae0 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 80068f0:	4b69      	ldr	r3, [pc, #420]	; (8006a98 <RadioIrqProcess+0x2bc>)
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	f083 0301 	eor.w	r3, r3, #1
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d014      	beq.n	8006928 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 80068fe:	2000      	movs	r0, #0
 8006900:	f000 febe 	bl	8007680 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006904:	2100      	movs	r1, #0
 8006906:	f640 1002 	movw	r0, #2306	; 0x902
 800690a:	f001 fbc7 	bl	800809c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800690e:	f640 1044 	movw	r0, #2372	; 0x944
 8006912:	f001 fbd7 	bl	80080c4 <SUBGRF_ReadRegister>
 8006916:	4603      	mov	r3, r0
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	b2db      	uxtb	r3, r3
 800691e:	4619      	mov	r1, r3
 8006920:	f640 1044 	movw	r0, #2372	; 0x944
 8006924:	f001 fbba 	bl	800809c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	4619      	mov	r1, r3
 800692e:	485c      	ldr	r0, [pc, #368]	; (8006aa0 <RadioIrqProcess+0x2c4>)
 8006930:	f000 fd76 	bl	8007420 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006934:	485b      	ldr	r0, [pc, #364]	; (8006aa4 <RadioIrqProcess+0x2c8>)
 8006936:	f001 fb5f 	bl	8007ff8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800693a:	4b58      	ldr	r3, [pc, #352]	; (8006a9c <RadioIrqProcess+0x2c0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d036      	beq.n	80069b0 <RadioIrqProcess+0x1d4>
 8006942:	4b56      	ldr	r3, [pc, #344]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d031      	beq.n	80069b0 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 800694c:	4b52      	ldr	r3, [pc, #328]	; (8006a98 <RadioIrqProcess+0x2bc>)
 800694e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006952:	2b01      	cmp	r3, #1
 8006954:	d10e      	bne.n	8006974 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8006956:	4b51      	ldr	r3, [pc, #324]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689c      	ldr	r4, [r3, #8]
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	b299      	uxth	r1, r3
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <RadioIrqProcess+0x2bc>)
 8006962:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006966:	b21a      	sxth	r2, r3
 8006968:	4b4b      	ldr	r3, [pc, #300]	; (8006a98 <RadioIrqProcess+0x2bc>)
 800696a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800696e:	484c      	ldr	r0, [pc, #304]	; (8006aa0 <RadioIrqProcess+0x2c4>)
 8006970:	47a0      	blx	r4
                break;
 8006972:	e01e      	b.n	80069b2 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006974:	4b48      	ldr	r3, [pc, #288]	; (8006a98 <RadioIrqProcess+0x2bc>)
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	463a      	mov	r2, r7
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fd6f 	bl	8008460 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8006982:	4b46      	ldr	r3, [pc, #280]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689c      	ldr	r4, [r3, #8]
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	b299      	uxth	r1, r3
 800698c:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <RadioIrqProcess+0x2bc>)
 800698e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8006992:	b218      	sxth	r0, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800699a:	4a43      	ldr	r2, [pc, #268]	; (8006aa8 <RadioIrqProcess+0x2cc>)
 800699c:	fb82 c203 	smull	ip, r2, r2, r3
 80069a0:	1192      	asrs	r2, r2, #6
 80069a2:	17db      	asrs	r3, r3, #31
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	4602      	mov	r2, r0
 80069aa:	483d      	ldr	r0, [pc, #244]	; (8006aa0 <RadioIrqProcess+0x2c4>)
 80069ac:	47a0      	blx	r4
                break;
 80069ae:	e000      	b.n	80069b2 <RadioIrqProcess+0x1d6>
        }
 80069b0:	bf00      	nop
        break;
 80069b2:	e0a2      	b.n	8006afa <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 80069b4:	2000      	movs	r0, #0
 80069b6:	f000 fe63 	bl	8007680 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80069ba:	4b38      	ldr	r3, [pc, #224]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8090 	beq.w	8006ae4 <RadioIrqProcess+0x308>
 80069c4:	4b35      	ldr	r3, [pc, #212]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 808a 	beq.w	8006ae4 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 80069d0:	4b32      	ldr	r3, [pc, #200]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2000      	movs	r0, #0
 80069d8:	4798      	blx	r3
        break;
 80069da:	e083      	b.n	8006ae4 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 80069dc:	2000      	movs	r0, #0
 80069de:	f000 fe4f 	bl	8007680 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d07e      	beq.n	8006ae8 <RadioIrqProcess+0x30c>
 80069ea:	4b2c      	ldr	r3, [pc, #176]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d079      	beq.n	8006ae8 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <RadioIrqProcess+0x2c0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2001      	movs	r0, #1
 80069fc:	4798      	blx	r3
        break;
 80069fe:	e073      	b.n	8006ae8 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006a00:	f000 fcf4 	bl	80073ec <SUBGRF_GetOperatingMode>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d110      	bne.n	8006a2c <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f000 fe38 	bl	8007680 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d069      	beq.n	8006aec <RadioIrqProcess+0x310>
 8006a18:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d064      	beq.n	8006aec <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4798      	blx	r3
        break;
 8006a2a:	e05f      	b.n	8006aec <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006a2c:	f000 fcde 	bl	80073ec <SUBGRF_GetOperatingMode>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d15a      	bne.n	8006aec <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006a36:	2000      	movs	r0, #0
 8006a38:	f000 fe22 	bl	8007680 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d053      	beq.n	8006aec <RadioIrqProcess+0x310>
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d04e      	beq.n	8006aec <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4798      	blx	r3
        break;
 8006a56:	e049      	b.n	8006aec <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006a58:	f001 fdaf 	bl	80085ba <RFW_Is_Init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d146      	bne.n	8006af0 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006a62:	f001 fde0 	bl	8008626 <RFW_ReceivePayload>
        break;
 8006a66:	e043      	b.n	8006af0 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <RadioIrqProcess+0x2bc>)
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	f083 0301 	eor.w	r3, r3, #1
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006a76:	2000      	movs	r0, #0
 8006a78:	f000 fe02 	bl	8007680 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d037      	beq.n	8006af4 <RadioIrqProcess+0x318>
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d032      	beq.n	8006af4 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <RadioIrqProcess+0x2c0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4798      	blx	r3
        break;
 8006a96:	e02d      	b.n	8006af4 <RadioIrqProcess+0x318>
 8006a98:	20000594 	.word	0x20000594
 8006a9c:	20000450 	.word	0x20000450
 8006aa0:	20000350 	.word	0x20000350
 8006aa4:	200005b8 	.word	0x200005b8
 8006aa8:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <RadioIrqProcess+0x328>)
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	f083 0301 	eor.w	r3, r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 8006aba:	2000      	movs	r0, #0
 8006abc:	f000 fde0 	bl	8007680 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <RadioIrqProcess+0x32c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d017      	beq.n	8006af8 <RadioIrqProcess+0x31c>
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <RadioIrqProcess+0x32c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <RadioIrqProcess+0x32c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4798      	blx	r3
        break;
 8006ada:	e00d      	b.n	8006af8 <RadioIrqProcess+0x31c>
        break;
 8006adc:	bf00      	nop
 8006ade:	e00c      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006ae0:	bf00      	nop
 8006ae2:	e00a      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e008      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e006      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <RadioIrqProcess+0x31e>
        break;
 8006af8:	bf00      	nop
  }
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000594 	.word	0x20000594
 8006b08:	20000450 	.word	0x20000450

08006b0c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <RadioTxPrbs+0x2c>)
 8006b12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fb63 	bl	80081e4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <RadioTxPrbs+0x30>)
 8006b20:	212d      	movs	r1, #45	; 0x2d
 8006b22:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006b26:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8006b28:	f000 fe6d 	bl	8007806 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8006b2c:	4804      	ldr	r0, [pc, #16]	; (8006b40 <RadioTxPrbs+0x34>)
 8006b2e:	f000 fdc3 	bl	80076b8 <SUBGRF_SetTx>
}
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000594 	.word	0x20000594
 8006b3c:	08006665 	.word	0x08006665
 8006b40:	000fffff 	.word	0x000fffff

08006b44 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fb6e 	bl	8008234 <SUBGRF_SetRfTxPower>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fb3f 	bl	80081e4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006b66:	f000 fe45 	bl	80077f4 <SUBGRF_SetTxContinuousWave>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006b72:	b480      	push	{r7}
 8006b74:	b089      	sub	sp, #36	; 0x24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e011      	b.n	8006bb2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	4413      	add	r3, r2
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	440b      	add	r3, r1
 8006b9c:	43d2      	mvns	r2, r2
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	dbe9      	blt.n	8006b8e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e049      	b.n	8006c54 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	425a      	negs	r2, r3
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	f002 0207 	and.w	r2, r2, #7
 8006bcc:	bf58      	it	pl
 8006bce:	4253      	negpl	r3, r2
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f1c3 0307 	rsb	r3, r3, #7
 8006bd6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da00      	bge.n	8006be0 <payload_integration+0x6e>
 8006bde:	3307      	adds	r3, #7
 8006be0:	10db      	asrs	r3, r3, #3
 8006be2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	3301      	adds	r3, #1
 8006be8:	425a      	negs	r2, r3
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	f002 0207 	and.w	r2, r2, #7
 8006bf2:	bf58      	it	pl
 8006bf4:	4253      	negpl	r3, r2
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f1c3 0307 	rsb	r3, r3, #7
 8006bfc:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3301      	adds	r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da00      	bge.n	8006c08 <payload_integration+0x96>
 8006c06:	3307      	adds	r3, #7
 8006c08:	10db      	asrs	r3, r3, #3
 8006c0a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8006c0c:	7dbb      	ldrb	r3, [r7, #22]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	fa42 f303 	asr.w	r3, r2, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006c24:	7ffa      	ldrb	r2, [r7, #31]
 8006c26:	7cfb      	ldrb	r3, [r7, #19]
 8006c28:	4053      	eors	r3, r2
 8006c2a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8006c2c:	7d3b      	ldrb	r3, [r7, #20]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	b25a      	sxtb	r2, r3
 8006c36:	7ff9      	ldrb	r1, [r7, #31]
 8006c38:	7d7b      	ldrb	r3, [r7, #21]
 8006c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	b259      	sxtb	r1, r3
 8006c44:	7d3b      	ldrb	r3, [r7, #20]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	b2ca      	uxtb	r2, r1
 8006c4c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	3301      	adds	r3, #1
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	dbb0      	blt.n	8006bc0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8006c5e:	7ffb      	ldrb	r3, [r7, #31]
 8006c60:	01db      	lsls	r3, r3, #7
 8006c62:	b25a      	sxtb	r2, r3
 8006c64:	7ffb      	ldrb	r3, [r7, #31]
 8006c66:	019b      	lsls	r3, r3, #6
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	7ffa      	ldrb	r2, [r7, #31]
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d101      	bne.n	8006c78 <payload_integration+0x106>
 8006c74:	2220      	movs	r2, #32
 8006c76:	e000      	b.n	8006c7a <payload_integration+0x108>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b259      	sxtb	r1, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	b2ca      	uxtb	r2, r1
 8006c86:	701a      	strb	r2, [r3, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3724      	adds	r7, #36	; 0x24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
	...

08006c94 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08c      	sub	sp, #48	; 0x30
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	2300      	movs	r3, #0
 8006cae:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006cb0:	f001 fc7d 	bl	80085ae <RFW_DeInit>

    if( rxContinuous != 0 )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	4ba9      	ldr	r3, [pc, #676]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006ccc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <RadioSetRxGenericConfig+0x48>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f000 80e8 	beq.w	8006eaa <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8006cda:	e1a0      	b.n	800701e <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <RadioSetRxGenericConfig+0x58>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf0:	e196      	b.n	8007020 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	7d5b      	ldrb	r3, [r3, #21]
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d902      	bls.n	8006d00 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	e18f      	b.n	8007020 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006d00:	2300      	movs	r3, #0
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d04:	e00d      	b.n	8006d22 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	4413      	add	r3, r2
 8006d0e:	7819      	ldrb	r1, [r3, #0]
 8006d10:	f107 021c 	add.w	r2, r7, #28
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	4413      	add	r3, r2
 8006d18:	460a      	mov	r2, r1
 8006d1a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	3301      	adds	r3, #1
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	7d5b      	ldrb	r3, [r3, #21]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	dbeb      	blt.n	8006d06 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd6b 	bl	8007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006d42:	4b8b      	ldr	r3, [pc, #556]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	4a88      	ldr	r2, [pc, #544]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d50:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	791a      	ldrb	r2, [r3, #4]
 8006d56:	4b86      	ldr	r3, [pc, #536]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 fb55 	bl	8008410 <SUBGRF_GetFskBandwidthRegValue>
 8006d66:	4603      	mov	r3, r0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b81      	ldr	r3, [pc, #516]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006d70:	4b7f      	ldr	r3, [pc, #508]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d82:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	7d1a      	ldrb	r2, [r3, #20]
 8006d88:	4b79      	ldr	r3, [pc, #484]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d8a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	7d5b      	ldrb	r3, [r3, #21]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b76      	ldr	r3, [pc, #472]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006d96:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006d9e:	4b74      	ldr	r3, [pc, #464]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006da0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	4b6f      	ldr	r3, [pc, #444]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006db4:	759a      	strb	r2, [r3, #22]
 8006db6:	e00b      	b.n	8006dd0 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d103      	bne.n	8006dca <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006dc2:	4b6b      	ldr	r3, [pc, #428]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	759a      	strb	r2, [r3, #22]
 8006dc8:	e002      	b.n	8006dd0 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006dca:	4b69      	ldr	r3, [pc, #420]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006dcc:	22ff      	movs	r2, #255	; 0xff
 8006dce:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d004      	beq.n	8006de4 <RadioSetRxGenericConfig+0x150>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d12d      	bne.n	8006e40 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dea:	2bf1      	cmp	r3, #241	; 0xf1
 8006dec:	d00c      	beq.n	8006e08 <RadioSetRxGenericConfig+0x174>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006df4:	2bf2      	cmp	r3, #242	; 0xf2
 8006df6:	d007      	beq.n	8006e08 <RadioSetRxGenericConfig+0x174>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d002      	beq.n	8006e08 <RadioSetRxGenericConfig+0x174>
            return -1;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	e10b      	b.n	8007020 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006e10:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <RadioSetRxGenericConfig+0x2e0>)
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	f107 0310 	add.w	r3, r7, #16
 8006e18:	4a57      	ldr	r2, [pc, #348]	; (8006f78 <RadioSetRxGenericConfig+0x2e4>)
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fbba 	bl	8008594 <RFW_Init>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <RadioSetRxGenericConfig+0x198>
            return -1;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	e0f9      	b.n	8007020 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006e2c:	4b50      	ldr	r3, [pc, #320]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006e38:	4b4d      	ldr	r3, [pc, #308]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	755a      	strb	r2, [r3, #21]
        {
 8006e3e:	e00e      	b.n	8006e5e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006e46:	4b4a      	ldr	r3, [pc, #296]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e48:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006e50:	4b47      	ldr	r3, [pc, #284]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e52:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006e5a:	4b45      	ldr	r3, [pc, #276]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006e5c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006e5e:	f7ff fb3c 	bl	80064da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006e62:	2000      	movs	r0, #0
 8006e64:	f7fe fcfa 	bl	800585c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e68:	4844      	ldr	r0, [pc, #272]	; (8006f7c <RadioSetRxGenericConfig+0x2e8>)
 8006e6a:	f000 ff03 	bl	8007c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e6e:	4844      	ldr	r0, [pc, #272]	; (8006f80 <RadioSetRxGenericConfig+0x2ec>)
 8006e70:	f000 ffcc 	bl	8007e0c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006e74:	f107 031c 	add.w	r3, r7, #28
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fb06 	bl	800748a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	8c1b      	ldrh	r3, [r3, #32]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fb50 	bl	8007528 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb2b 	bl	80074e8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e98:	fb02 f203 	mul.w	r2, r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	4a32      	ldr	r2, [pc, #200]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006ea6:	6093      	str	r3, [r2, #8]
        break;
 8006ea8:	e0b9      	b.n	800701e <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <RadioSetRxGenericConfig+0x224>
            return -1;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	e0b3      	b.n	8007020 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d104      	bne.n	8006ecc <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006eca:	e002      	b.n	8006ed2 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006ecc:	23ff      	movs	r3, #255	; 0xff
 8006ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf14      	ite	ne
 8006eda:	2301      	movne	r3, #1
 8006edc:	2300      	moveq	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fc99 	bl	8007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fca3 	bl	8007836 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ef0:	4b1f      	ldr	r3, [pc, #124]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006efe:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d010      	beq.n	8006f48 <RadioSetRxGenericConfig+0x2b4>
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	dc2c      	bgt.n	8006f84 <RadioSetRxGenericConfig+0x2f0>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <RadioSetRxGenericConfig+0x2a0>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d005      	beq.n	8006f3e <RadioSetRxGenericConfig+0x2aa>
            break;
 8006f32:	e027      	b.n	8006f84 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f3c:	e023      	b.n	8006f86 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f46:	e01e      	b.n	8006f86 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f4e:	2b0b      	cmp	r3, #11
 8006f50:	d004      	beq.n	8006f5c <RadioSetRxGenericConfig+0x2c8>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f58:	2b0c      	cmp	r3, #12
 8006f5a:	d104      	bne.n	8006f66 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006f5c:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f64:	e00f      	b.n	8006f86 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006f66:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <RadioSetRxGenericConfig+0x2dc>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f6e:	e00a      	b.n	8006f86 <RadioSetRxGenericConfig+0x2f2>
 8006f70:	20000594 	.word	0x20000594
 8006f74:	20000450 	.word	0x20000450
 8006f78:	200005ed 	.word	0x200005ed
 8006f7c:	200005cc 	.word	0x200005cc
 8006f80:	200005a2 	.word	0x200005a2
            break;
 8006f84:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006f86:	4b28      	ldr	r3, [pc, #160]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8006f90:	4b25      	ldr	r3, [pc, #148]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006f92:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006f9a:	4b23      	ldr	r3, [pc, #140]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006f9c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006f9e:	4a22      	ldr	r2, [pc, #136]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fa4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006fae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006fbe:	f7ff fa8c 	bl	80064da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	f7fe fc4a 	bl	800585c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fc8:	4818      	ldr	r0, [pc, #96]	; (800702c <RadioSetRxGenericConfig+0x398>)
 8006fca:	f000 fe53 	bl	8007c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006fce:	4818      	ldr	r0, [pc, #96]	; (8007030 <RadioSetRxGenericConfig+0x39c>)
 8006fd0:	f000 ff1c 	bl	8007e0c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006fd4:	4b14      	ldr	r3, [pc, #80]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8006fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10d      	bne.n	8006ffa <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006fde:	f240 7036 	movw	r0, #1846	; 0x736
 8006fe2:	f001 f86f 	bl	80080c4 <SUBGRF_ReadRegister>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f240 7036 	movw	r0, #1846	; 0x736
 8006ff4:	f001 f852 	bl	800809c <SUBGRF_WriteRegister>
 8006ff8:	e00c      	b.n	8007014 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8006ffa:	f240 7036 	movw	r0, #1846	; 0x736
 8006ffe:	f001 f861 	bl	80080c4 <SUBGRF_ReadRegister>
 8007002:	4603      	mov	r3, r0
 8007004:	f043 0304 	orr.w	r3, r3, #4
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	f240 7036 	movw	r0, #1846	; 0x736
 8007010:	f001 f844 	bl	800809c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <RadioSetRxGenericConfig+0x394>)
 8007016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800701a:	609a      	str	r2, [r3, #8]
        break;
 800701c:	bf00      	nop
    }
    return status;
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007020:	4618      	mov	r0, r3
 8007022:	3730      	adds	r7, #48	; 0x30
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000594 	.word	0x20000594
 800702c:	200005cc 	.word	0x200005cc
 8007030:	200005a2 	.word	0x200005a2

08007034 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	4613      	mov	r3, r2
 8007044:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	2300      	movs	r3, #0
 800704c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800704e:	f001 faae 	bl	80085ae <RFW_DeInit>
    switch( modem )
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b02      	cmp	r3, #2
 8007056:	f000 8144 	beq.w	80072e2 <RadioSetTxGenericConfig+0x2ae>
 800705a:	2b02      	cmp	r3, #2
 800705c:	f300 8160 	bgt.w	8007320 <RadioSetTxGenericConfig+0x2ec>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <RadioSetTxGenericConfig+0x38>
 8007064:	2b01      	cmp	r3, #1
 8007066:	f000 80b7 	beq.w	80071d8 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800706a:	e159      	b.n	8007320 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <RadioSetTxGenericConfig+0x48>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <RadioSetTxGenericConfig+0x4e>
            return -1;
 800707c:	f04f 33ff 	mov.w	r3, #4294967295
 8007080:	e163      	b.n	800734a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7d1b      	ldrb	r3, [r3, #20]
 8007086:	2b08      	cmp	r3, #8
 8007088:	d902      	bls.n	8007090 <RadioSetTxGenericConfig+0x5c>
            return -1;
 800708a:	f04f 33ff 	mov.w	r3, #4294967295
 800708e:	e15c      	b.n	800734a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007090:	2300      	movs	r3, #0
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
 8007094:	e00d      	b.n	80070b2 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	4413      	add	r3, r2
 800709e:	7819      	ldrb	r1, [r3, #0]
 80070a0:	f107 021c 	add.w	r2, r7, #28
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	4413      	add	r3, r2
 80070a8:	460a      	mov	r2, r1
 80070aa:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	3301      	adds	r3, #1
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	7d1b      	ldrb	r3, [r3, #20]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	4293      	cmp	r3, r2
 80070bc:	dbeb      	blt.n	8007096 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80070be:	4ba5      	ldr	r3, [pc, #660]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4aa2      	ldr	r2, [pc, #648]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070cc:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	4ba0      	ldr	r3, [pc, #640]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 f997 	bl	8008410 <SUBGRF_GetFskBandwidthRegValue>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b9b      	ldr	r3, [pc, #620]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4a98      	ldr	r2, [pc, #608]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070f2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80070f4:	4b97      	ldr	r3, [pc, #604]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	b29a      	uxth	r2, r3
 8007104:	4b93      	ldr	r3, [pc, #588]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007106:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007108:	4b92      	ldr	r3, [pc, #584]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800710a:	2204      	movs	r2, #4
 800710c:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	7d1b      	ldrb	r3, [r3, #20]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4b8f      	ldr	r3, [pc, #572]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007118:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800711a:	4b8e      	ldr	r3, [pc, #568]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800711c:	2200      	movs	r2, #0
 800711e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007126:	2b02      	cmp	r3, #2
 8007128:	d003      	beq.n	8007132 <RadioSetTxGenericConfig+0xfe>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	7f9b      	ldrb	r3, [r3, #30]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d12a      	bne.n	8007188 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	7fdb      	ldrb	r3, [r3, #31]
 8007136:	2bf1      	cmp	r3, #241	; 0xf1
 8007138:	d00a      	beq.n	8007150 <RadioSetTxGenericConfig+0x11c>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	7fdb      	ldrb	r3, [r3, #31]
 800713e:	2bf2      	cmp	r3, #242	; 0xf2
 8007140:	d006      	beq.n	8007150 <RadioSetTxGenericConfig+0x11c>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	7fdb      	ldrb	r3, [r3, #31]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d002      	beq.n	8007150 <RadioSetTxGenericConfig+0x11c>
                return -1;
 800714a:	f04f 33ff 	mov.w	r3, #4294967295
 800714e:	e0fc      	b.n	800734a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8007150:	2301      	movs	r3, #1
 8007152:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007158:	4b7f      	ldr	r3, [pc, #508]	; (8007358 <RadioSetTxGenericConfig+0x324>)
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	f107 0310 	add.w	r3, r7, #16
 8007160:	4a7e      	ldr	r2, [pc, #504]	; (800735c <RadioSetTxGenericConfig+0x328>)
 8007162:	4618      	mov	r0, r3
 8007164:	f001 fa16 	bl	8008594 <RFW_Init>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <RadioSetTxGenericConfig+0x140>
              return -1;
 800716e:	f04f 33ff 	mov.w	r3, #4294967295
 8007172:	e0ea      	b.n	800734a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007174:	4b77      	ldr	r3, [pc, #476]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007176:	2200      	movs	r2, #0
 8007178:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800717a:	4b76      	ldr	r3, [pc, #472]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800717c:	2201      	movs	r2, #1
 800717e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007180:	4b74      	ldr	r3, [pc, #464]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007182:	2200      	movs	r2, #0
 8007184:	755a      	strb	r2, [r3, #21]
        {
 8007186:	e00c      	b.n	80071a2 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	7fda      	ldrb	r2, [r3, #31]
 800718c:	4b71      	ldr	r3, [pc, #452]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800718e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007196:	4b6f      	ldr	r3, [pc, #444]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007198:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7f9a      	ldrb	r2, [r3, #30]
 800719e:	4b6d      	ldr	r3, [pc, #436]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80071a0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80071a2:	f7ff f99a 	bl	80064da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80071a6:	2000      	movs	r0, #0
 80071a8:	f7fe fb58 	bl	800585c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80071ac:	486c      	ldr	r0, [pc, #432]	; (8007360 <RadioSetTxGenericConfig+0x32c>)
 80071ae:	f000 fd61 	bl	8007c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80071b2:	486c      	ldr	r0, [pc, #432]	; (8007364 <RadioSetTxGenericConfig+0x330>)
 80071b4:	f000 fe2a 	bl	8007e0c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80071b8:	f107 031c 	add.w	r3, r7, #28
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 f964 	bl	800748a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	8b9b      	ldrh	r3, [r3, #28]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f9ae 	bl	8007528 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	8c1b      	ldrh	r3, [r3, #32]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f989 	bl	80074e8 <SUBGRF_SetCrcPolynomial>
        break;
 80071d6:	e0a4      	b.n	8007322 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80071d8:	4b5e      	ldr	r3, [pc, #376]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80071e6:	4b5b      	ldr	r3, [pc, #364]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80071e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80071f2:	4b58      	ldr	r3, [pc, #352]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80071fe:	4b55      	ldr	r3, [pc, #340]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007200:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800720a:	2b02      	cmp	r3, #2
 800720c:	d010      	beq.n	8007230 <RadioSetTxGenericConfig+0x1fc>
 800720e:	2b02      	cmp	r3, #2
 8007210:	dc22      	bgt.n	8007258 <RadioSetTxGenericConfig+0x224>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <RadioSetTxGenericConfig+0x1e8>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d005      	beq.n	8007226 <RadioSetTxGenericConfig+0x1f2>
            break;
 800721a:	e01d      	b.n	8007258 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800721c:	4b4d      	ldr	r3, [pc, #308]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007224:	e019      	b.n	800725a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007226:	4b4b      	ldr	r3, [pc, #300]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800722e:	e014      	b.n	800725a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d004      	beq.n	8007244 <RadioSetTxGenericConfig+0x210>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d104      	bne.n	800724e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007244:	4b43      	ldr	r3, [pc, #268]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800724c:	e005      	b.n	800725a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800724e:	4b41      	ldr	r3, [pc, #260]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007256:	e000      	b.n	800725a <RadioSetTxGenericConfig+0x226>
            break;
 8007258:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800725a:	4b3e      	ldr	r3, [pc, #248]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800725c:	2201      	movs	r2, #1
 800725e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007264:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007266:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007270:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007278:	4b36      	ldr	r3, [pc, #216]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800727a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007284:	4b33      	ldr	r3, [pc, #204]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800728a:	f7ff f926 	bl	80064da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800728e:	2001      	movs	r0, #1
 8007290:	f7fe fae4 	bl	800585c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007294:	4832      	ldr	r0, [pc, #200]	; (8007360 <RadioSetTxGenericConfig+0x32c>)
 8007296:	f000 fced 	bl	8007c74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800729a:	4832      	ldr	r0, [pc, #200]	; (8007364 <RadioSetTxGenericConfig+0x330>)
 800729c:	f000 fdb6 	bl	8007e0c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80072a0:	4b2c      	ldr	r3, [pc, #176]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 80072a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a6:	2b06      	cmp	r3, #6
 80072a8:	d10d      	bne.n	80072c6 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80072aa:	f640 0089 	movw	r0, #2185	; 0x889
 80072ae:	f000 ff09 	bl	80080c4 <SUBGRF_ReadRegister>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	f640 0089 	movw	r0, #2185	; 0x889
 80072c0:	f000 feec 	bl	800809c <SUBGRF_WriteRegister>
        break;
 80072c4:	e02d      	b.n	8007322 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80072c6:	f640 0089 	movw	r0, #2185	; 0x889
 80072ca:	f000 fefb 	bl	80080c4 <SUBGRF_ReadRegister>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f043 0304 	orr.w	r3, r3, #4
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	f640 0089 	movw	r0, #2185	; 0x889
 80072dc:	f000 fede 	bl	800809c <SUBGRF_WriteRegister>
        break;
 80072e0:	e01f      	b.n	8007322 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <RadioSetTxGenericConfig+0x2c0>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072f2:	d902      	bls.n	80072fa <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	e027      	b.n	800734a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80072fa:	2002      	movs	r0, #2
 80072fc:	f7fe faae 	bl	800585c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007300:	4b14      	ldr	r3, [pc, #80]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	4a11      	ldr	r2, [pc, #68]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 800730e:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007312:	2216      	movs	r2, #22
 8007314:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007318:	4811      	ldr	r0, [pc, #68]	; (8007360 <RadioSetTxGenericConfig+0x32c>)
 800731a:	f000 fcab 	bl	8007c74 <SUBGRF_SetModulationParams>
        break;
 800731e:	e000      	b.n	8007322 <RadioSetTxGenericConfig+0x2ee>
        break;
 8007320:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 ff84 	bl	8008234 <SUBGRF_SetRfTxPower>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007332:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007338:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f94a 	bl	80085d6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007342:	4a04      	ldr	r2, [pc, #16]	; (8007354 <RadioSetTxGenericConfig+0x320>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6053      	str	r3, [r2, #4]
    return 0;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000594 	.word	0x20000594
 8007358:	20000450 	.word	0x20000450
 800735c:	200005ec 	.word	0x200005ec
 8007360:	200005cc 	.word	0x200005cc
 8007364:	200005a2 	.word	0x200005a2

08007368 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8007376:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <SUBGRF_Init+0x78>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800737c:	f7fa fb62 	bl	8001a44 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007380:	2002      	movs	r0, #2
 8007382:	f001 f823 	bl	80083cc <Radio_SMPS_Set>

    ImageCalibrated = false;
 8007386:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <SUBGRF_Init+0x7c>)
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800738c:	2000      	movs	r0, #0
 800738e:	f000 f977 	bl	8007680 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8007392:	f7fa fa2d 	bl	80017f0 <RBI_IsTCXO>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10e      	bne.n	80073ba <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800739c:	2140      	movs	r1, #64	; 0x40
 800739e:	2001      	movs	r0, #1
 80073a0:	f000 fb78 	bl	8007a94 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80073a4:	2100      	movs	r1, #0
 80073a6:	f640 1011 	movw	r0, #2321	; 0x911
 80073aa:	f000 fe77 	bl	800809c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80073ae:	237f      	movs	r3, #127	; 0x7f
 80073b0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80073b2:	7b38      	ldrb	r0, [r7, #12]
 80073b4:	f000 fa85 	bl	80078c2 <SUBGRF_Calibrate>
 80073b8:	e009      	b.n	80073ce <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80073ba:	2120      	movs	r1, #32
 80073bc:	f640 1011 	movw	r0, #2321	; 0x911
 80073c0:	f000 fe6c 	bl	800809c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80073c4:	2120      	movs	r1, #32
 80073c6:	f640 1012 	movw	r0, #2322	; 0x912
 80073ca:	f000 fe67 	bl	800809c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80073ce:	f7fa f9f3 	bl	80017b8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <SUBGRF_Init+0x80>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	701a      	strb	r2, [r3, #0]
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000460 	.word	0x20000460
 80073e4:	2000045c 	.word	0x2000045c
 80073e8:	20000454 	.word	0x20000454

080073ec <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
    return OperatingMode;
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <SUBGRF_GetOperatingMode+0x10>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	20000454 	.word	0x20000454

08007400 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	461a      	mov	r2, r3
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	2000      	movs	r0, #0
 8007414:	f000 fe92 	bl	800813c <SUBGRF_WriteBuffer>
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007432:	f107 0317 	add.w	r3, r7, #23
 8007436:	4619      	mov	r1, r3
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f000 fdb1 	bl	8007fa0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	79fa      	ldrb	r2, [r7, #7]
 8007444:	429a      	cmp	r2, r3
 8007446:	d201      	bcs.n	800744c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007448:	2301      	movs	r3, #1
 800744a:	e007      	b.n	800745c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800744c:	7df8      	ldrb	r0, [r7, #23]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	68f9      	ldr	r1, [r7, #12]
 8007456:	f000 fe87 	bl	8008168 <SUBGRF_ReadBuffer>

    return 0;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	460b      	mov	r3, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	4619      	mov	r1, r3
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff ffc2 	bl	8007400 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f91b 	bl	80076b8 <SUBGRF_SetTx>
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007492:	2208      	movs	r2, #8
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800749a:	f000 fe27 	bl	80080ec <SUBGRF_WriteRegisters>
    return 0;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80074c2:	f000 fb67 	bl	8007b94 <SUBGRF_GetPacketType>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	2202      	movs	r2, #2
 80074d2:	4619      	mov	r1, r3
 80074d4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80074d8:	f000 fe08 	bl	80080ec <SUBGRF_WriteRegisters>
            break;
 80074dc:	e000      	b.n	80074e0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80074de:	bf00      	nop
    }
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	0a1b      	lsrs	r3, r3, #8
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007502:	f000 fb47 	bl	8007b94 <SUBGRF_GetPacketType>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d108      	bne.n	800751e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800750c:	f107 030c 	add.w	r3, r7, #12
 8007510:	2202      	movs	r2, #2
 8007512:	4619      	mov	r1, r3
 8007514:	f240 60be 	movw	r0, #1726	; 0x6be
 8007518:	f000 fde8 	bl	80080ec <SUBGRF_WriteRegisters>
            break;
 800751c:	e000      	b.n	8007520 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800751e:	bf00      	nop
    }
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007536:	f000 fb2d 	bl	8007b94 <SUBGRF_GetPacketType>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d121      	bne.n	8007584 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007540:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007544:	f000 fdbe 	bl	80080c4 <SUBGRF_ReadRegister>
 8007548:	4603      	mov	r3, r0
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b29b      	uxth	r3, r3
 8007556:	b25b      	sxtb	r3, r3
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	b25a      	sxtb	r2, r3
 800755e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007562:	4313      	orrs	r3, r2
 8007564:	b25b      	sxtb	r3, r3
 8007566:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4619      	mov	r1, r3
 800756c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007570:	f000 fd94 	bl	800809c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800757e:	f000 fd8d 	bl	800809c <SUBGRF_WriteRegister>
            break;
 8007582:	e000      	b.n	8007586 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8007584:	bf00      	nop
    }
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80075a0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80075a4:	f000 fd8e 	bl	80080c4 <SUBGRF_ReadRegister>
 80075a8:	4603      	mov	r3, r0
 80075aa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4619      	mov	r1, r3
 80075b6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80075ba:	f000 fd6f 	bl	800809c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80075be:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80075c2:	f000 fd7f 	bl	80080c4 <SUBGRF_ReadRegister>
 80075c6:	4603      	mov	r3, r0
 80075c8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80075ca:	79bb      	ldrb	r3, [r7, #6]
 80075cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	4619      	mov	r1, r3
 80075d4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80075d8:	f000 fd60 	bl	800809c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80075dc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80075e0:	f000 f88a 	bl	80076f8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80075e4:	463b      	mov	r3, r7
 80075e6:	2204      	movs	r2, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	f640 0019 	movw	r0, #2073	; 0x819
 80075ee:	f000 fd91 	bl	8008114 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80075f2:	2000      	movs	r0, #0
 80075f4:	f000 f844 	bl	8007680 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	4619      	mov	r1, r3
 80075fc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007600:	f000 fd4c 	bl	800809c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007604:	79bb      	ldrb	r3, [r7, #6]
 8007606:	4619      	mov	r1, r3
 8007608:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800760c:	f000 fd46 	bl	800809c <SUBGRF_WriteRegister>

    return number;
 8007610:	683b      	ldr	r3, [r7, #0]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007624:	2000      	movs	r0, #0
 8007626:	f7fa f8ce 	bl	80017c6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800762a:	2002      	movs	r0, #2
 800762c:	f000 fece 	bl	80083cc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007630:	793b      	ldrb	r3, [r7, #4]
 8007632:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800763c:	793b      	ldrb	r3, [r7, #4]
 800763e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007646:	b25b      	sxtb	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800764c:	793b      	ldrb	r3, [r7, #4]
 800764e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007656:	4313      	orrs	r3, r2
 8007658:	b25b      	sxtb	r3, r3
 800765a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800765c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800765e:	f107 030f 	add.w	r3, r7, #15
 8007662:	2201      	movs	r2, #1
 8007664:	4619      	mov	r1, r3
 8007666:	2084      	movs	r0, #132	; 0x84
 8007668:	f000 fd94 	bl	8008194 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800766c:	4b03      	ldr	r3, [pc, #12]	; (800767c <SUBGRF_SetSleep+0x60>)
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000454 	.word	0x20000454

08007680 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	2201      	movs	r2, #1
 800768e:	4619      	mov	r1, r3
 8007690:	2080      	movs	r0, #128	; 0x80
 8007692:	f000 fd7f 	bl	8008194 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <SUBGRF_SetStandby+0x34>)
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80076a2:	e002      	b.n	80076aa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <SUBGRF_SetStandby+0x34>)
 80076a6:	2202      	movs	r2, #2
 80076a8:	701a      	strb	r2, [r3, #0]
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000454 	.word	0x20000454

080076b8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <SUBGRF_SetTx+0x3c>)
 80076c2:	2204      	movs	r2, #4
 80076c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	2203      	movs	r2, #3
 80076e2:	4619      	mov	r1, r3
 80076e4:	2083      	movs	r0, #131	; 0x83
 80076e6:	f000 fd55 	bl	8008194 <SUBGRF_WriteCommand>
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000454 	.word	0x20000454

080076f8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007700:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <SUBGRF_SetRx+0x3c>)
 8007702:	2205      	movs	r2, #5
 8007704:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	b2db      	uxtb	r3, r3
 800770c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	b2db      	uxtb	r3, r3
 8007714:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	2203      	movs	r2, #3
 8007722:	4619      	mov	r1, r3
 8007724:	2082      	movs	r0, #130	; 0x82
 8007726:	f000 fd35 	bl	8008194 <SUBGRF_WriteCommand>
}
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000454 	.word	0x20000454

08007738 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <SUBGRF_SetRxBoosted+0x44>)
 8007742:	2205      	movs	r2, #5
 8007744:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8007746:	2197      	movs	r1, #151	; 0x97
 8007748:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800774c:	f000 fca6 	bl	800809c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	b2db      	uxtb	r3, r3
 8007756:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	b2db      	uxtb	r3, r3
 800775e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	2203      	movs	r2, #3
 800776c:	4619      	mov	r1, r3
 800776e:	2082      	movs	r0, #130	; 0x82
 8007770:	f000 fd10 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000454 	.word	0x20000454

08007780 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	b2db      	uxtb	r3, r3
 8007790:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	b2db      	uxtb	r3, r3
 8007798:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	2206      	movs	r2, #6
 80077bc:	4619      	mov	r1, r3
 80077be:	2094      	movs	r0, #148	; 0x94
 80077c0:	f000 fce8 	bl	8008194 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <SUBGRF_SetRxDutyCycle+0x54>)
 80077c6:	2206      	movs	r2, #6
 80077c8:	701a      	strb	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000454 	.word	0x20000454

080077d8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80077dc:	2200      	movs	r2, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	20c5      	movs	r0, #197	; 0xc5
 80077e2:	f000 fcd7 	bl	8008194 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80077e6:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <SUBGRF_SetCad+0x18>)
 80077e8:	2207      	movs	r2, #7
 80077ea:	701a      	strb	r2, [r3, #0]
}
 80077ec:	bf00      	nop
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000454 	.word	0x20000454

080077f4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80077f8:	2200      	movs	r2, #0
 80077fa:	2100      	movs	r1, #0
 80077fc:	20d1      	movs	r0, #209	; 0xd1
 80077fe:	f000 fcc9 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007802:	bf00      	nop
 8007804:	bd80      	pop	{r7, pc}

08007806 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8007806:	b580      	push	{r7, lr}
 8007808:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800780a:	2200      	movs	r2, #0
 800780c:	2100      	movs	r1, #0
 800780e:	20d2      	movs	r0, #210	; 0xd2
 8007810:	f000 fcc0 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}

08007818 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	2201      	movs	r2, #1
 8007826:	4619      	mov	r1, r3
 8007828:	209f      	movs	r0, #159	; 0x9f
 800782a:	f000 fcb3 	bl	8008194 <SUBGRF_WriteCommand>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	4603      	mov	r3, r0
 800783e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007840:	1dfb      	adds	r3, r7, #7
 8007842:	2201      	movs	r2, #1
 8007844:	4619      	mov	r1, r3
 8007846:	20a0      	movs	r0, #160	; 0xa0
 8007848:	f000 fca4 	bl	8008194 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	2b3f      	cmp	r3, #63	; 0x3f
 8007850:	d91c      	bls.n	800788c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007860:	e005      	b.n	800786e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	3301      	adds	r3, #1
 800786c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b1f      	cmp	r3, #31
 8007872:	d8f6      	bhi.n	8007862 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	b2da      	uxtb	r2, r3
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4413      	add	r3, r2
 800787e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8007880:	7b7b      	ldrb	r3, [r7, #13]
 8007882:	4619      	mov	r1, r3
 8007884:	f240 7006 	movw	r0, #1798	; 0x706
 8007888:	f000 fc08 	bl	800809c <SUBGRF_WriteRegister>
    }
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800789a:	f7f9 ffb0 	bl	80017fe <RBI_IsDCDC>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d102      	bne.n	80078aa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80078a4:	2301      	movs	r3, #1
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	e001      	b.n	80078ae <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80078aa:	2300      	movs	r3, #0
 80078ac:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80078ae:	1dfb      	adds	r3, r7, #7
 80078b0:	2201      	movs	r2, #1
 80078b2:	4619      	mov	r1, r3
 80078b4:	2096      	movs	r0, #150	; 0x96
 80078b6:	f000 fc6d 	bl	8008194 <SUBGRF_WriteCommand>
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80078ca:	793b      	ldrb	r3, [r7, #4]
 80078cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	019b      	lsls	r3, r3, #6
 80078d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80078d6:	793b      	ldrb	r3, [r7, #4]
 80078d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80078e6:	793b      	ldrb	r3, [r7, #4]
 80078e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80078f6:	793b      	ldrb	r3, [r7, #4]
 80078f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007900:	b25b      	sxtb	r3, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007906:	793b      	ldrb	r3, [r7, #4]
 8007908:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800790c:	b2db      	uxtb	r3, r3
 800790e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007910:	b25b      	sxtb	r3, r3
 8007912:	4313      	orrs	r3, r2
 8007914:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007916:	793b      	ldrb	r3, [r7, #4]
 8007918:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800791c:	b2db      	uxtb	r3, r3
 800791e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007920:	b25b      	sxtb	r3, r3
 8007922:	4313      	orrs	r3, r2
 8007924:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007926:	793b      	ldrb	r3, [r7, #4]
 8007928:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007930:	4313      	orrs	r3, r2
 8007932:	b25b      	sxtb	r3, r3
 8007934:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007936:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007938:	f107 030f 	add.w	r3, r7, #15
 800793c:	2201      	movs	r2, #1
 800793e:	4619      	mov	r1, r3
 8007940:	2089      	movs	r0, #137	; 0x89
 8007942:	f000 fc27 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a1b      	ldr	r2, [pc, #108]	; (80079c8 <SUBGRF_CalibrateImage+0x78>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d904      	bls.n	800796a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007960:	23e1      	movs	r3, #225	; 0xe1
 8007962:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007964:	23e9      	movs	r3, #233	; 0xe9
 8007966:	737b      	strb	r3, [r7, #13]
 8007968:	e022      	b.n	80079b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <SUBGRF_CalibrateImage+0x7c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d904      	bls.n	800797c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007972:	23d7      	movs	r3, #215	; 0xd7
 8007974:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8007976:	23db      	movs	r3, #219	; 0xdb
 8007978:	737b      	strb	r3, [r7, #13]
 800797a:	e019      	b.n	80079b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <SUBGRF_CalibrateImage+0x80>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d904      	bls.n	800798e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8007984:	23c1      	movs	r3, #193	; 0xc1
 8007986:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8007988:	23c5      	movs	r3, #197	; 0xc5
 800798a:	737b      	strb	r3, [r7, #13]
 800798c:	e010      	b.n	80079b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <SUBGRF_CalibrateImage+0x84>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d904      	bls.n	80079a0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8007996:	2375      	movs	r3, #117	; 0x75
 8007998:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800799a:	2381      	movs	r3, #129	; 0x81
 800799c:	737b      	strb	r3, [r7, #13]
 800799e:	e007      	b.n	80079b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a0d      	ldr	r2, [pc, #52]	; (80079d8 <SUBGRF_CalibrateImage+0x88>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d903      	bls.n	80079b0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80079a8:	236b      	movs	r3, #107	; 0x6b
 80079aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80079ac:	236f      	movs	r3, #111	; 0x6f
 80079ae:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80079b0:	f107 030c 	add.w	r3, r7, #12
 80079b4:	2202      	movs	r2, #2
 80079b6:	4619      	mov	r1, r3
 80079b8:	2098      	movs	r0, #152	; 0x98
 80079ba:	f000 fbeb 	bl	8008194 <SUBGRF_WriteCommand>
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	35a4e900 	.word	0x35a4e900
 80079cc:	32a9f880 	.word	0x32a9f880
 80079d0:	2de54480 	.word	0x2de54480
 80079d4:	1b6b0b00 	.word	0x1b6b0b00
 80079d8:	1954fc40 	.word	0x1954fc40

080079dc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	4611      	mov	r1, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	71fb      	strb	r3, [r7, #7]
 80079ee:	4603      	mov	r3, r0
 80079f0:	71bb      	strb	r3, [r7, #6]
 80079f2:	460b      	mov	r3, r1
 80079f4:	717b      	strb	r3, [r7, #5]
 80079f6:	4613      	mov	r3, r2
 80079f8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80079fe:	79bb      	ldrb	r3, [r7, #6]
 8007a00:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007a02:	797b      	ldrb	r3, [r7, #5]
 8007a04:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007a06:	793b      	ldrb	r3, [r7, #4]
 8007a08:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	2204      	movs	r2, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	2095      	movs	r0, #149	; 0x95
 8007a14:	f000 fbbe 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd90      	pop	{r4, r7, pc}

08007a20 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	80fb      	strh	r3, [r7, #6]
 8007a32:	4603      	mov	r3, r0
 8007a34:	80bb      	strh	r3, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	807b      	strh	r3, [r7, #2]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	0a1b      	lsrs	r3, r3, #8
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007a48:	88fb      	ldrh	r3, [r7, #6]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007a4e:	88bb      	ldrh	r3, [r7, #4]
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007a6e:	883b      	ldrh	r3, [r7, #0]
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007a78:	883b      	ldrh	r3, [r7, #0]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	2208      	movs	r2, #8
 8007a84:	4619      	mov	r1, r3
 8007a86:	2008      	movs	r0, #8
 8007a88:	f000 fb84 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd90      	pop	{r4, r7, pc}

08007a94 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	2097      	movs	r0, #151	; 0x97
 8007aca:	f000 fb63 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007ad8:	b5b0      	push	{r4, r5, r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <SUBGRF_SetRfFrequency+0x7c>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f083 0301 	eor.w	r3, r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff ff2c 	bl	8007950 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007af8:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <SUBGRF_SetRfFrequency+0x7c>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	09d5      	lsrs	r5, r2, #7
 8007b08:	0654      	lsls	r4, r2, #25
 8007b0a:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <SUBGRF_SetRfFrequency+0x80>)
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	f7f9 f9ae 	bl	8000e74 <__aeabi_uldivmod>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	0e1b      	lsrs	r3, r3, #24
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	2204      	movs	r2, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	2086      	movs	r0, #134	; 0x86
 8007b48:	f000 fb24 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bdb0      	pop	{r4, r5, r7, pc}
 8007b54:	2000045c 	.word	0x2000045c
 8007b58:	01e84800 	.word	0x01e84800

08007b5c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007b66:	79fa      	ldrb	r2, [r7, #7]
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <SUBGRF_SetPacketType+0x34>)
 8007b6a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007b72:	2100      	movs	r1, #0
 8007b74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007b78:	f000 fa90 	bl	800809c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007b7c:	1dfb      	adds	r3, r7, #7
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4619      	mov	r1, r3
 8007b82:	208a      	movs	r0, #138	; 0x8a
 8007b84:	f000 fb06 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000455 	.word	0x20000455

08007b94 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
    return PacketType;
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <SUBGRF_GetPacketType+0x10>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	20000455 	.word	0x20000455

08007ba8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	71fb      	strb	r3, [r7, #7]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	71bb      	strb	r3, [r7, #6]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d124      	bne.n	8007c0a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8007bc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007bc4:	2b0f      	cmp	r3, #15
 8007bc6:	d106      	bne.n	8007bd6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8007bc8:	2301      	movs	r3, #1
 8007bca:	2201      	movs	r2, #1
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2006      	movs	r0, #6
 8007bd0:	f7ff ff04 	bl	80079dc <SUBGRF_SetPaConfig>
 8007bd4:	e005      	b.n	8007be2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	2201      	movs	r2, #1
 8007bda:	2100      	movs	r1, #0
 8007bdc:	2004      	movs	r0, #4
 8007bde:	f7ff fefd 	bl	80079dc <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007be2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007be6:	2b0d      	cmp	r3, #13
 8007be8:	dd02      	ble.n	8007bf0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8007bea:	230e      	movs	r3, #14
 8007bec:	71bb      	strb	r3, [r7, #6]
 8007bee:	e006      	b.n	8007bfe <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007bf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007bf4:	f113 0f11 	cmn.w	r3, #17
 8007bf8:	da01      	bge.n	8007bfe <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8007bfa:	23ef      	movs	r3, #239	; 0xef
 8007bfc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8007bfe:	2118      	movs	r1, #24
 8007c00:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007c04:	f000 fa4a 	bl	800809c <SUBGRF_WriteRegister>
 8007c08:	e025      	b.n	8007c56 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8007c0a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007c0e:	f000 fa59 	bl	80080c4 <SUBGRF_ReadRegister>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f043 031e 	orr.w	r3, r3, #30
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007c20:	f000 fa3c 	bl	800809c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007c24:	2301      	movs	r3, #1
 8007c26:	2200      	movs	r2, #0
 8007c28:	2107      	movs	r1, #7
 8007c2a:	2004      	movs	r0, #4
 8007c2c:	f7ff fed6 	bl	80079dc <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007c30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c34:	2b16      	cmp	r3, #22
 8007c36:	dd02      	ble.n	8007c3e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007c38:	2316      	movs	r3, #22
 8007c3a:	71bb      	strb	r3, [r7, #6]
 8007c3c:	e006      	b.n	8007c4c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8007c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007c42:	f113 0f09 	cmn.w	r3, #9
 8007c46:	da01      	bge.n	8007c4c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007c48:	23f7      	movs	r3, #247	; 0xf7
 8007c4a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8007c4c:	2138      	movs	r1, #56	; 0x38
 8007c4e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007c52:	f000 fa23 	bl	800809c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007c56:	79bb      	ldrb	r3, [r7, #6]
 8007c58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8007c5a:	797b      	ldrb	r3, [r7, #5]
 8007c5c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8007c5e:	f107 030c 	add.w	r3, r7, #12
 8007c62:	2202      	movs	r2, #2
 8007c64:	4619      	mov	r1, r3
 8007c66:	208e      	movs	r0, #142	; 0x8e
 8007c68:	f000 fa94 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007c80:	4a5e      	ldr	r2, [pc, #376]	; (8007dfc <SUBGRF_SetModulationParams+0x188>)
 8007c82:	f107 0308 	add.w	r3, r7, #8
 8007c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c8a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	4b5b      	ldr	r3, [pc, #364]	; (8007e00 <SUBGRF_SetModulationParams+0x18c>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d004      	beq.n	8007ca4 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff ff5c 	bl	8007b5c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	f200 80a2 	bhi.w	8007df2 <SUBGRF_SetModulationParams+0x17e>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <SUBGRF_SetModulationParams+0x40>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007d81 	.word	0x08007d81
 8007cbc:	08007d43 	.word	0x08007d43
 8007cc0:	08007daf 	.word	0x08007daf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4a4d      	ldr	r2, [pc, #308]	; (8007e04 <SUBGRF_SetModulationParams+0x190>)
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7b1b      	ldrb	r3, [r3, #12]
 8007cee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7b5b      	ldrb	r3, [r3, #13]
 8007cf4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	09d5      	lsrs	r5, r2, #7
 8007d02:	0654      	lsls	r4, r2, #25
 8007d04:	4a40      	ldr	r2, [pc, #256]	; (8007e08 <SUBGRF_SetModulationParams+0x194>)
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7f9 f8b1 	bl	8000e74 <__aeabi_uldivmod>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4613      	mov	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f107 0308 	add.w	r3, r7, #8
 8007d38:	4619      	mov	r1, r3
 8007d3a:	208b      	movs	r0, #139	; 0x8b
 8007d3c:	f000 fa2a 	bl	8008194 <SUBGRF_WriteCommand>
        break;
 8007d40:	e058      	b.n	8007df4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007d42:	2304      	movs	r3, #4
 8007d44:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	4a2e      	ldr	r2, [pc, #184]	; (8007e04 <SUBGRF_SetModulationParams+0x190>)
 8007d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	0a1b      	lsrs	r3, r3, #8
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7d1b      	ldrb	r3, [r3, #20]
 8007d6c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007d6e:	7cfb      	ldrb	r3, [r7, #19]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4619      	mov	r1, r3
 8007d78:	208b      	movs	r0, #139	; 0x8b
 8007d7a:	f000 fa0b 	bl	8008194 <SUBGRF_WriteCommand>
        break;
 8007d7e:	e039      	b.n	8007df4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8007d80:	2304      	movs	r3, #4
 8007d82:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7e1b      	ldrb	r3, [r3, #24]
 8007d88:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7e5b      	ldrb	r3, [r3, #25]
 8007d8e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7e9b      	ldrb	r3, [r3, #26]
 8007d94:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7edb      	ldrb	r3, [r3, #27]
 8007d9a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007d9c:	7cfb      	ldrb	r3, [r7, #19]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f107 0308 	add.w	r3, r7, #8
 8007da4:	4619      	mov	r1, r3
 8007da6:	208b      	movs	r0, #139	; 0x8b
 8007da8:	f000 f9f4 	bl	8008194 <SUBGRF_WriteCommand>

        break;
 8007dac:	e022      	b.n	8007df4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007dae:	2305      	movs	r3, #5
 8007db0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <SUBGRF_SetModulationParams+0x190>)
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7b1b      	ldrb	r3, [r3, #12]
 8007dd8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7b5b      	ldrb	r3, [r3, #13]
 8007dde:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007de0:	7cfb      	ldrb	r3, [r7, #19]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4619      	mov	r1, r3
 8007dea:	208b      	movs	r0, #139	; 0x8b
 8007dec:	f000 f9d2 	bl	8008194 <SUBGRF_WriteCommand>
        break;
 8007df0:	e000      	b.n	8007df4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007df2:	bf00      	nop
    }
}
 8007df4:	bf00      	nop
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007dfc:	0800e0d4 	.word	0x0800e0d4
 8007e00:	20000455 	.word	0x20000455
 8007e04:	3d090000 	.word	0x3d090000
 8007e08:	01e84800 	.word	0x01e84800

08007e0c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007e18:	4a48      	ldr	r2, [pc, #288]	; (8007f3c <SUBGRF_SetPacketParams+0x130>)
 8007e1a:	f107 030c 	add.w	r3, r7, #12
 8007e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e20:	c303      	stmia	r3!, {r0, r1}
 8007e22:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	4b45      	ldr	r3, [pc, #276]	; (8007f40 <SUBGRF_SetPacketParams+0x134>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d004      	beq.n	8007e3a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fe91 	bl	8007b5c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d878      	bhi.n	8007f34 <SUBGRF_SetPacketParams+0x128>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <SUBGRF_SetPacketParams+0x3c>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007ee9 	.word	0x08007ee9
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007e59 	.word	0x08007e59
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7a5b      	ldrb	r3, [r3, #9]
 8007e5c:	2bf1      	cmp	r3, #241	; 0xf1
 8007e5e:	d10a      	bne.n	8007e76 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007e60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007e64:	f7ff fb20 	bl	80074a8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007e68:	f248 0005 	movw	r0, #32773	; 0x8005
 8007e6c:	f7ff fb3c 	bl	80074e8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007e70:	2302      	movs	r3, #2
 8007e72:	75bb      	strb	r3, [r7, #22]
 8007e74:	e011      	b.n	8007e9a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7a5b      	ldrb	r3, [r3, #9]
 8007e7a:	2bf2      	cmp	r3, #242	; 0xf2
 8007e7c:	d10a      	bne.n	8007e94 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007e7e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007e82:	f7ff fb11 	bl	80074a8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007e86:	f241 0021 	movw	r0, #4129	; 0x1021
 8007e8a:	f7ff fb2d 	bl	80074e8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007e8e:	2306      	movs	r3, #6
 8007e90:	75bb      	strb	r3, [r7, #22]
 8007e92:	e002      	b.n	8007e9a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7a5b      	ldrb	r3, [r3, #9]
 8007e98:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007e9a:	2309      	movs	r3, #9
 8007e9c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	885b      	ldrh	r3, [r3, #2]
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	795b      	ldrb	r3, [r3, #5]
 8007ebc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	799b      	ldrb	r3, [r3, #6]
 8007ec2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	79db      	ldrb	r3, [r3, #7]
 8007ec8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7a1b      	ldrb	r3, [r3, #8]
 8007ece:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
 8007ed2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7a9b      	ldrb	r3, [r3, #10]
 8007ed8:	753b      	strb	r3, [r7, #20]
        break;
 8007eda:	e022      	b.n	8007f22 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7b1b      	ldrb	r3, [r3, #12]
 8007ee4:	733b      	strb	r3, [r7, #12]
        break;
 8007ee6:	e01c      	b.n	8007f22 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007ee8:	2306      	movs	r3, #6
 8007eea:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	89db      	ldrh	r3, [r3, #14]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	89db      	ldrh	r3, [r3, #14]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1a      	ldrb	r2, [r3, #16]
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <SUBGRF_SetPacketParams+0x138>)
 8007f06:	4611      	mov	r1, r2
 8007f08:	7019      	strb	r1, [r3, #0]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c5b      	ldrb	r3, [r3, #17]
 8007f12:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	7c9b      	ldrb	r3, [r3, #18]
 8007f18:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7cdb      	ldrb	r3, [r3, #19]
 8007f1e:	747b      	strb	r3, [r7, #17]
        break;
 8007f20:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f107 030c 	add.w	r3, r7, #12
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	208c      	movs	r0, #140	; 0x8c
 8007f2e:	f000 f931 	bl	8008194 <SUBGRF_WriteCommand>
 8007f32:	e000      	b.n	8007f36 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007f34:	bf00      	nop
}
 8007f36:	3718      	adds	r7, #24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	0800e0dc 	.word	0x0800e0dc
 8007f40:	20000455 	.word	0x20000455
 8007f44:	20000456 	.word	0x20000456

08007f48 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	460a      	mov	r2, r1
 8007f52:	71fb      	strb	r3, [r7, #7]
 8007f54:	4613      	mov	r3, r2
 8007f56:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007f5c:	79bb      	ldrb	r3, [r7, #6]
 8007f5e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007f60:	f107 030c 	add.w	r3, r7, #12
 8007f64:	2202      	movs	r2, #2
 8007f66:	4619      	mov	r1, r3
 8007f68:	208f      	movs	r0, #143	; 0x8f
 8007f6a:	f000 f913 	bl	8008194 <SUBGRF_WriteCommand>
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	2201      	movs	r2, #1
 8007f84:	4619      	mov	r1, r3
 8007f86:	2015      	movs	r0, #21
 8007f88:	f000 f918 	bl	80081bc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007f8c:	793b      	ldrb	r3, [r7, #4]
 8007f8e:	425b      	negs	r3, r3
 8007f90:	105b      	asrs	r3, r3, #1
 8007f92:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007faa:	f107 030c 	add.w	r3, r7, #12
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	2013      	movs	r0, #19
 8007fb4:	f000 f902 	bl	80081bc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007fb8:	f7ff fdec 	bl	8007b94 <SUBGRF_GetPacketType>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d10d      	bne.n	8007fde <SUBGRF_GetRxBufferStatus+0x3e>
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <SUBGRF_GetRxBufferStatus+0x54>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d108      	bne.n	8007fde <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007fcc:	f240 7002 	movw	r0, #1794	; 0x702
 8007fd0:	f000 f878 	bl	80080c4 <SUBGRF_ReadRegister>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007fde:	7b3a      	ldrb	r2, [r7, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007fe4:	7b7a      	ldrb	r2, [r7, #13]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	701a      	strb	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000456 	.word	0x20000456

08007ff8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	2203      	movs	r2, #3
 8008006:	4619      	mov	r1, r3
 8008008:	2014      	movs	r0, #20
 800800a:	f000 f8d7 	bl	80081bc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800800e:	f7ff fdc1 	bl	8007b94 <SUBGRF_GetPacketType>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <SUBGRF_GetPacketStatus+0x30>
 8008022:	2b01      	cmp	r3, #1
 8008024:	d013      	beq.n	800804e <SUBGRF_GetPacketStatus+0x56>
 8008026:	e02a      	b.n	800807e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008028:	7b3a      	ldrb	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800802e:	7b7b      	ldrb	r3, [r7, #13]
 8008030:	425b      	negs	r3, r3
 8008032:	105b      	asrs	r3, r3, #1
 8008034:	b25a      	sxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	425b      	negs	r3, r3
 800803e:	105b      	asrs	r3, r3, #1
 8008040:	b25a      	sxtb	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	609a      	str	r2, [r3, #8]
            break;
 800804c:	e020      	b.n	8008090 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800804e:	7b3b      	ldrb	r3, [r7, #12]
 8008050:	425b      	negs	r3, r3
 8008052:	105b      	asrs	r3, r3, #1
 8008054:	b25a      	sxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800805a:	7b7b      	ldrb	r3, [r7, #13]
 800805c:	b25b      	sxtb	r3, r3
 800805e:	3302      	adds	r3, #2
 8008060:	109b      	asrs	r3, r3, #2
 8008062:	b25a      	sxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	425b      	negs	r3, r3
 800806c:	105b      	asrs	r3, r3, #1
 800806e:	b25a      	sxtb	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <SUBGRF_GetPacketStatus+0xa0>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	611a      	str	r2, [r3, #16]
            break;
 800807c:	e008      	b.n	8008090 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800807e:	2214      	movs	r2, #20
 8008080:	2100      	movs	r1, #0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 fa10 	bl	80094a8 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	220f      	movs	r2, #15
 800808c:	701a      	strb	r2, [r3, #0]
            break;
 800808e:	bf00      	nop
    }
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000458 	.word	0x20000458

0800809c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	460a      	mov	r2, r1
 80080a6:	80fb      	strh	r3, [r7, #6]
 80080a8:	4613      	mov	r3, r2
 80080aa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80080ac:	1d7a      	adds	r2, r7, #5
 80080ae:	88f9      	ldrh	r1, [r7, #6]
 80080b0:	2301      	movs	r3, #1
 80080b2:	4803      	ldr	r0, [pc, #12]	; (80080c0 <SUBGRF_WriteRegister+0x24>)
 80080b4:	f7fc f8ea 	bl	800428c <HAL_SUBGHZ_WriteRegisters>
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000510 	.word	0x20000510

080080c4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80080ce:	f107 020f 	add.w	r2, r7, #15
 80080d2:	88f9      	ldrh	r1, [r7, #6]
 80080d4:	2301      	movs	r3, #1
 80080d6:	4804      	ldr	r0, [pc, #16]	; (80080e8 <SUBGRF_ReadRegister+0x24>)
 80080d8:	f7fc f937 	bl	800434a <HAL_SUBGHZ_ReadRegisters>
    return data;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000510 	.word	0x20000510

080080ec <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	80fb      	strh	r3, [r7, #6]
 80080f8:	4613      	mov	r3, r2
 80080fa:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80080fc:	88bb      	ldrh	r3, [r7, #4]
 80080fe:	88f9      	ldrh	r1, [r7, #6]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	4803      	ldr	r0, [pc, #12]	; (8008110 <SUBGRF_WriteRegisters+0x24>)
 8008104:	f7fc f8c2 	bl	800428c <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000510 	.word	0x20000510

08008114 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	6039      	str	r1, [r7, #0]
 800811e:	80fb      	strh	r3, [r7, #6]
 8008120:	4613      	mov	r3, r2
 8008122:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008124:	88bb      	ldrh	r3, [r7, #4]
 8008126:	88f9      	ldrh	r1, [r7, #6]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	4803      	ldr	r0, [pc, #12]	; (8008138 <SUBGRF_ReadRegisters+0x24>)
 800812c:	f7fc f90d 	bl	800434a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000510 	.word	0x20000510

0800813c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	6039      	str	r1, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
 8008148:	4613      	mov	r3, r2
 800814a:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800814c:	79bb      	ldrb	r3, [r7, #6]
 800814e:	b29b      	uxth	r3, r3
 8008150:	79f9      	ldrb	r1, [r7, #7]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4803      	ldr	r0, [pc, #12]	; (8008164 <SUBGRF_WriteBuffer+0x28>)
 8008156:	f7fc fa0c 	bl	8004572 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000510 	.word	0x20000510

08008168 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
 8008174:	4613      	mov	r3, r2
 8008176:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008178:	79bb      	ldrb	r3, [r7, #6]
 800817a:	b29b      	uxth	r3, r3
 800817c:	79f9      	ldrb	r1, [r7, #7]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4803      	ldr	r0, [pc, #12]	; (8008190 <SUBGRF_ReadBuffer+0x28>)
 8008182:	f7fc fa49 	bl	8004618 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000510 	.word	0x20000510

08008194 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	4613      	mov	r3, r2
 80081a2:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80081a4:	88bb      	ldrh	r3, [r7, #4]
 80081a6:	79f9      	ldrb	r1, [r7, #7]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	4803      	ldr	r0, [pc, #12]	; (80081b8 <SUBGRF_WriteCommand+0x24>)
 80081ac:	f7fc f92e 	bl	800440c <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000510 	.word	0x20000510

080081bc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
 80081c8:	4613      	mov	r3, r2
 80081ca:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80081cc:	88bb      	ldrh	r3, [r7, #4]
 80081ce:	79f9      	ldrb	r1, [r7, #7]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	4803      	ldr	r0, [pc, #12]	; (80081e0 <SUBGRF_ReadCommand+0x24>)
 80081d4:	f7fc f979 	bl	80044ca <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000510 	.word	0x20000510

080081e4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	460a      	mov	r2, r1
 80081ee:	71fb      	strb	r3, [r7, #7]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80081f8:	79bb      	ldrb	r3, [r7, #6]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10d      	bne.n	800821a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d104      	bne.n	800820e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8008204:	2302      	movs	r3, #2
 8008206:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008208:	2004      	movs	r0, #4
 800820a:	f000 f8df 	bl	80083cc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d107      	bne.n	8008224 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8008214:	2303      	movs	r3, #3
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e004      	b.n	8008224 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800821a:	79bb      	ldrb	r3, [r7, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f7f9 facd 	bl	80017c6 <RBI_ConfigRFSwitch>
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8008242:	f7f9 face 	bl	80017e2 <RBI_GetTxConfig>
 8008246:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d016      	beq.n	800827c <SUBGRF_SetRfTxPower+0x48>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b02      	cmp	r3, #2
 8008252:	dc16      	bgt.n	8008282 <SUBGRF_SetRfTxPower+0x4e>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <SUBGRF_SetRfTxPower+0x2e>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d00a      	beq.n	8008276 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008260:	e00f      	b.n	8008282 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	dd02      	ble.n	8008270 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800826a:	2302      	movs	r3, #2
 800826c:	73fb      	strb	r3, [r7, #15]
            break;
 800826e:	e009      	b.n	8008284 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008270:	2301      	movs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
            break;
 8008274:	e006      	b.n	8008284 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8008276:	2301      	movs	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
            break;
 800827a:	e003      	b.n	8008284 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800827c:	2302      	movs	r3, #2
 800827e:	73fb      	strb	r3, [r7, #15]
            break;
 8008280:	e000      	b.n	8008284 <SUBGRF_SetRfTxPower+0x50>
            break;
 8008282:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008284:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2202      	movs	r2, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fc8b 	bl	8007ba8 <SUBGRF_SetTxParams>

    return paSelect;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80082a0:	2301      	movs	r3, #1
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2001      	movs	r0, #1
 80082ba:	4798      	blx	r3
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000460 	.word	0x20000460

080082c8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80082d0:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2002      	movs	r0, #2
 80082d6:	4798      	blx	r3
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000460 	.word	0x20000460

080082e4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2040      	movs	r0, #64	; 0x40
 80082f2:	4798      	blx	r3
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000460 	.word	0x20000460

08008300 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8008312:	2b01      	cmp	r3, #1
 8008314:	d005      	beq.n	8008322 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008316:	e00a      	b.n	800832e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2080      	movs	r0, #128	; 0x80
 800831e:	4798      	blx	r3
            break;
 8008320:	e005      	b.n	800832e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f44f 7080 	mov.w	r0, #256	; 0x100
 800832a:	4798      	blx	r3
            break;
 800832c:	bf00      	nop
    }
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000460 	.word	0x20000460

0800833c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f44f 7000 	mov.w	r0, #512	; 0x200
 800834c:	4798      	blx	r3
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000460 	.word	0x20000460

0800835c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008364:	4b03      	ldr	r3, [pc, #12]	; (8008374 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2020      	movs	r0, #32
 800836a:	4798      	blx	r3
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000460 	.word	0x20000460

08008378 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2004      	movs	r0, #4
 8008386:	4798      	blx	r3
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000460 	.word	0x20000460

08008394 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800839c:	4b03      	ldr	r3, [pc, #12]	; (80083ac <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2008      	movs	r0, #8
 80083a2:	4798      	blx	r3
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000460 	.word	0x20000460

080083b0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80083b8:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2010      	movs	r0, #16
 80083be:	4798      	blx	r3
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000460 	.word	0x20000460

080083cc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80083d6:	f7f9 fa12 	bl	80017fe <RBI_IsDCDC>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d112      	bne.n	8008406 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80083e0:	f640 1023 	movw	r0, #2339	; 0x923
 80083e4:	f7ff fe6e 	bl	80080c4 <SUBGRF_ReadRegister>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	f023 0306 	bic.w	r3, r3, #6
 80083f2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80083f4:	7bfa      	ldrb	r2, [r7, #15]
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4619      	mov	r1, r3
 80083fe:	f640 1023 	movw	r0, #2339	; 0x923
 8008402:	f7ff fe4b 	bl	800809c <SUBGRF_WriteRegister>
  }
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800841e:	231f      	movs	r3, #31
 8008420:	e016      	b.n	8008450 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e00f      	b.n	8008448 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	4a0c      	ldr	r2, [pc, #48]	; (800845c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800842c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d205      	bcs.n	8008442 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	791b      	ldrb	r3, [r3, #4]
 8008440:	e006      	b.n	8008450 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	3301      	adds	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b15      	cmp	r3, #21
 800844c:	d9ec      	bls.n	8008428 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800844e:	e7fe      	b.n	800844e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	0800e4d8 	.word	0x0800e4d8

08008460 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800846a:	4b36      	ldr	r3, [pc, #216]	; (8008544 <SUBGRF_GetCFO+0xe4>)
 800846c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800846e:	f640 0007 	movw	r0, #2055	; 0x807
 8008472:	f7ff fe27 	bl	80080c4 <SUBGRF_ReadRegister>
 8008476:	4603      	mov	r3, r0
 8008478:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800847a:	7ffb      	ldrb	r3, [r7, #31]
 800847c:	08db      	lsrs	r3, r3, #3
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008488:	4413      	add	r3, r2
 800848a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800848e:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8008490:	7ffb      	ldrb	r3, [r7, #31]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8008498:	7fba      	ldrb	r2, [r7, #30]
 800849a:	7f7b      	ldrb	r3, [r7, #29]
 800849c:	3b01      	subs	r3, #1
 800849e:	fa02 f303 	lsl.w	r3, r2, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	4b28      	ldr	r3, [pc, #160]	; (8008548 <SUBGRF_GetCFO+0xe8>)
 80084a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80084bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	2b07      	cmp	r3, #7
 80084c8:	d802      	bhi.n	80084d0 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80084ca:	2302      	movs	r3, #2
 80084cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d802      	bhi.n	80084e4 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80084de:	2304      	movs	r3, #4
 80084e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80084e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
 80084ee:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80084f0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80084f4:	f7ff fde6 	bl	80080c4 <SUBGRF_ReadRegister>
 80084f8:	4603      	mov	r3, r0
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008500:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8008502:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008506:	f7ff fddd 	bl	80080c4 <SUBGRF_ReadRegister>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	4313      	orrs	r3, r2
 8008512:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008524:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008528:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	6a3a      	ldr	r2, [r7, #32]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	11da      	asrs	r2, r3, #7
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	601a      	str	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	0c0a0804 	.word	0x0c0a0804
 8008548:	01e84800 	.word	0x01e84800

0800854c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008564:	697b      	ldr	r3, [r7, #20]
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008588:	697b      	ldr	r3, [r7, #20]
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80085a0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr

080085ae <RFW_DeInit>:

void RFW_DeInit( void)
{
 80085ae:	b480      	push	{r7}
 80085b0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80085ba:	b480      	push	{r7}
 80085bc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80085be:	2300      	movs	r3, #0
#endif
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bc80      	pop	{r7}
 80085c6:	4770      	bx	lr

080085c8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80085cc:	2300      	movs	r3, #0
#endif
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr

080085d6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	4603      	mov	r3, r0
 80085de:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	460b      	mov	r3, r1
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80085fe:	697b      	ldr	r3, [r7, #20]
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800860a:	b480      	push	{r7}
 800860c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800860e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008612:	4618      	mov	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800861a:	b480      	push	{r7}
 800861c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800861e:	bf00      	nop
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800862a:	bf00      	nop
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	4603      	mov	r3, r0
 800863a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr
	...

08008648 <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8008652:	2010      	movs	r0, #16
 8008654:	f000 ff0a 	bl	800946c <malloc>
 8008658:	4603      	mov	r3, r0
 800865a:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <list_new+0x24>
		perror("list_new()");
 8008662:	4818      	ldr	r0, [pc, #96]	; (80086c4 <list_new+0x7c>)
 8008664:	f001 fcc6 	bl	8009ff4 <perror>
		return NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	e027      	b.n	80086bc <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 800866c:	2100      	movs	r1, #0
 800866e:	2000      	movs	r0, #0
 8008670:	f000 f958 	bl	8008924 <list_node_new>
 8008674:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <list_new+0x3e>
		free(l);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fefd 	bl	800947c <free>
		return NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	e01a      	b.n	80086bc <list_new+0x74>
	}

	l->sentinel = sentinel;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	601a      	str	r2, [r3, #0]
	l->size = 0;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2201      	movs	r2, #1
 8008696:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <list_new+0x66>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	e000      	b.n	80086b0 <list_new+0x68>
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <list_new+0x80>)
	l->compare = (compare == NULL)
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	60da      	str	r2, [r3, #12]

	return l;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	0800e0e8 	.word	0x0800e0e8
 80086c8:	080088fd 	.word	0x080088fd

080086cc <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 80086de:	480e      	ldr	r0, [pc, #56]	; (8008718 <list_insert+0x4c>)
 80086e0:	f000 f99b 	bl	8008a1a <list_debug>
		return NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e012      	b.n	800870e <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f89c 	bl	8008828 <list_index>
 80086f0:	4603      	mov	r3, r0
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f945 	bl	8008984 <list_node_link>
 80086fa:	6078      	str	r0, [r7, #4]
	if (n)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <list_insert+0x40>
		++self->size;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	605a      	str	r2, [r3, #4]
	return n;
 800870c:	687b      	ldr	r3, [r7, #4]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	0800e0f4 	.word	0x0800e0f4

0800871c <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f856 	bl	80087d8 <list_head>
 800872c:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 800872e:	e00e      	b.n	800874e <list_search+0x32>
		
		if (self->compare(data, n->data))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	68d2      	ldr	r2, [r2, #12]
 8008738:	4611      	mov	r1, r2
 800873a:	6838      	ldr	r0, [r7, #0]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <list_search+0x2c>
			return n;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	e00c      	b.n	8008762 <list_search+0x46>
		n = n->next;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f8c0 	bl	80088d4 <list_end>
 8008754:	4603      	mov	r3, r0
 8008756:	f083 0301 	eor.w	r3, r3, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e7      	bne.n	8008730 <list_search+0x14>
	}
	return NULL;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d103      	bne.n	8008784 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 800877c:	480b      	ldr	r0, [pc, #44]	; (80087ac <list_remove+0x40>)
 800877e:	f001 fc41 	bl	800a004 <iprintf>
		return ;
 8008782:	e010      	b.n	80087a6 <list_remove+0x3a>
	}

	if(node == NULL)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00c      	beq.n	80087a4 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 800878a:	6838      	ldr	r0, [r7, #0]
 800878c:	f000 f928 	bl	80089e0 <list_node_unlink>
 8008790:	60f8      	str	r0, [r7, #12]
	if (n)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <list_remove+0x3a>
	{
		--self->size;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	1e5a      	subs	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	e000      	b.n	80087a6 <list_remove+0x3a>
		return ;
 80087a4:	bf00      	nop
	
	}

}
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	0800e114 	.word	0x0800e114

080087b0 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f876 	bl	80088ac <list_size>
 80087c0:	4603      	mov	r3, r0
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff ff80 	bl	80086cc <list_insert>
 80087cc:	4603      	mov	r3, r0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d104      	bne.n	80087f0 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 80087e6:	480e      	ldr	r0, [pc, #56]	; (8008820 <list_head+0x48>)
 80087e8:	f000 f917 	bl	8008a1a <list_debug>
		return NULL;
 80087ec:	2300      	movs	r3, #0
 80087ee:	e012      	b.n	8008816 <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 f86d 	bl	80088d4 <list_end>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f083 0301 	eor.w	r3, r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 8008806:	4807      	ldr	r0, [pc, #28]	; (8008824 <list_head+0x4c>)
 8008808:	f000 f907 	bl	8008a1a <list_debug>
		return NULL;
 800880c:	2300      	movs	r3, #0
 800880e:	e002      	b.n	8008816 <list_head+0x3e>
	}

	return self->sentinel->next;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	0800e134 	.word	0x0800e134
 8008824:	0800e150 	.word	0x0800e150

08008828 <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f83a 	bl	80088ac <list_size>
 8008838:	4603      	mov	r3, r0
 800883a:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	da03      	bge.n	800884a <list_index+0x22>
		pos += s;
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4413      	add	r3, r2
 8008848:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	0fda      	lsrs	r2, r3, #31
 8008852:	4413      	add	r3, r2
 8008854:	105b      	asrs	r3, r3, #1
 8008856:	461a      	mov	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	4293      	cmp	r3, r2
 800885c:	dc11      	bgt.n	8008882 <list_index+0x5a>
		n = list_head(self);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff ffba 	bl	80087d8 <list_head>
 8008864:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	e005      	b.n	8008878 <list_index+0x50>
			n = n->next;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3301      	adds	r3, #1
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	dbf5      	blt.n	800886c <list_index+0x44>
 8008880:	e00f      	b.n	80088a2 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e005      	b.n	800889a <list_index+0x72>
			n = n->prev;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b01      	subs	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	dcf5      	bgt.n	800888e <list_index+0x66>
	}

	return n;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d104      	bne.n	80088c4 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <list_size+0x24>)
 80088bc:	f000 f8ad 	bl	8008a1a <list_debug>
		return 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e001      	b.n	80088c8 <list_size+0x1c>
	}

	return self->size;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0800e1b4 	.word	0x0800e1b4

080088d4 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <list_end+0x18>
		list_debug("list_end(): n was NULL");
 80088e2:	4805      	ldr	r0, [pc, #20]	; (80088f8 <list_end+0x24>)
 80088e4:	f000 f899 	bl	8008a1a <list_debug>
		return false;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e001      	b.n	80088f0 <list_end+0x1c>
	}

	return n->sentinel;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7a1b      	ldrb	r3, [r3, #8]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	0800e1d0 	.word	0x0800e1d0

080088fc <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7f7 fc39 	bl	8000180 <strcmp>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 800892e:	2010      	movs	r0, #16
 8008930:	f000 fd9c 	bl	800946c <malloc>
 8008934:	4603      	mov	r3, r0
 8008936:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <list_node_new+0x24>
		perror("list_node_new()");
 800893e:	4810      	ldr	r0, [pc, #64]	; (8008980 <list_node_new+0x5c>)
 8008940:	f001 fb58 	bl	8009ff4 <perror>
		return NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	e017      	b.n	8008978 <list_node_new+0x54>
	}

	n->sentinel = false;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 800895a:	6838      	ldr	r0, [r7, #0]
 800895c:	f000 fd86 	bl	800946c <malloc>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fd8b 	bl	800948c <memcpy>
	return n;
 8008976:	68fb      	ldr	r3, [r7, #12]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	0800e25c 	.word	0x0800e25c

08008984 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 8008994:	4810      	ldr	r0, [pc, #64]	; (80089d8 <list_node_link+0x54>)
 8008996:	f000 f840 	bl	8008a1a <list_debug>
		return NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	e017      	b.n	80089ce <list_node_link+0x4a>
	}

	if (c == NULL) {
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 80089a4:	480d      	ldr	r0, [pc, #52]	; (80089dc <list_node_link+0x58>)
 80089a6:	f000 f838 	bl	8008a1a <list_debug>
		return NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e00f      	b.n	80089ce <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

	a->next = b;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	601a      	str	r2, [r3, #0]
	b->prev = a;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	605a      	str	r2, [r3, #4]
	b->next = c;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	601a      	str	r2, [r3, #0]
	c->prev = b;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	605a      	str	r2, [r3, #4]

	return b;
 80089cc:	687b      	ldr	r3, [r7, #4]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	0800e26c 	.word	0x0800e26c
 80089dc:	0800e28c 	.word	0x0800e28c

080089e0 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff73 	bl	80088d4 <list_end>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <list_node_unlink+0x18>
		return NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	e00c      	b.n	8008a12 <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60bb      	str	r3, [r7, #8]

	a->next = c;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	601a      	str	r2, [r3, #0]
	c->prev = a;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	605a      	str	r2, [r3, #4]

	return b;
 8008a10:	687b      	ldr	r3, [r7, #4]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <list_debug>:

static void list_debug(const char *format, ...)
{
 8008a1a:	b40f      	push	{r0, r1, r2, r3}
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	b004      	add	sp, #16
 8008a2a:	4770      	bx	lr

08008a2c <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	789b      	ldrb	r3, [r3, #2]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d101      	bne.n	8008a4e <find_packet_by_Id+0x22>
    {
        return true ;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 8008a4e:	2300      	movs	r3, #0
    }
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr

08008a5a <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	789b      	ldrb	r3, [r3, #2]
 8008a70:	461a      	mov	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d101      	bne.n	8008a7c <rx_find_by_id+0x22>
	{
		return true ;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <rx_find_by_id+0x24>
	}
	else{
		return false ;
 8008a7c:	2300      	movs	r3, #0
	}
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bc80      	pop	{r7}
 8008a86:	4770      	bx	lr

08008a88 <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 8008a92:	4a0d      	ldr	r2, [pc, #52]	; (8008ac8 <ll_init+0x40>)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 8008a98:	490c      	ldr	r1, [pc, #48]	; (8008acc <ll_init+0x44>)
 8008a9a:	480d      	ldr	r0, [pc, #52]	; (8008ad0 <ll_init+0x48>)
 8008a9c:	f7ff fdd4 	bl	8008648 <list_new>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	4a0c      	ldr	r2, [pc, #48]	; (8008ad4 <ll_init+0x4c>)
 8008aa4:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 8008aa6:	4909      	ldr	r1, [pc, #36]	; (8008acc <ll_init+0x44>)
 8008aa8:	480b      	ldr	r0, [pc, #44]	; (8008ad8 <ll_init+0x50>)
 8008aaa:	f7ff fdcd 	bl	8008648 <list_new>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <ll_init+0x54>)
 8008ab2:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <ll_init+0x58>)
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008abc:	4798      	blx	r3

	return 0 ;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	2000000a 	.word	0x2000000a
 8008acc:	0800947d 	.word	0x0800947d
 8008ad0:	08008a2d 	.word	0x08008a2d
 8008ad4:	200005f4 	.word	0x200005f4
 8008ad8:	08008a5b 	.word	0x08008a5b
 8008adc:	200005f0 	.word	0x200005f0
 8008ae0:	0800e450 	.word	0x0800e450

08008ae4 <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b091      	sub	sp, #68	; 0x44
 8008ae8:	af04      	add	r7, sp, #16
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	4603      	mov	r3, r0
 8008aee:	71fb      	strb	r3, [r7, #7]
 8008af0:	460b      	mov	r3, r1
 8008af2:	71bb      	strb	r3, [r7, #6]
 8008af4:	4613      	mov	r3, r2
 8008af6:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 8008af8:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <ll_send_packet+0x80>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fed5 	bl	80088ac <list_size>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d902      	bls.n	8008b0e <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 8008b08:	f06f 0309 	mvn.w	r3, #9
 8008b0c:	e026      	b.n	8008b5c <ll_send_packet+0x78>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 8008b0e:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <ll_send_packet+0x84>)
 8008b10:	7819      	ldrb	r1, [r3, #0]
 8008b12:	79bc      	ldrb	r4, [r7, #6]
 8008b14:	79fa      	ldrb	r2, [r7, #7]
 8008b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	797b      	ldrb	r3, [r7, #5]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	4623      	mov	r3, r4
 8008b2a:	f000 fadd 	bl	80090e8 <packet>
	
	tmp_holder.packet = tmp ;
 8008b2e:	f107 030c 	add.w	r3, r7, #12
 8008b32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	623b      	str	r3, [r7, #32]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <ll_send_packet+0x80>)
 8008b42:	681c      	ldr	r4, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	2118      	movs	r1, #24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff feea 	bl	8008924 <list_node_new>
 8008b50:	4603      	mov	r3, r0
 8008b52:	4619      	mov	r1, r3
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7ff fe2b 	bl	80087b0 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3734      	adds	r7, #52	; 0x34
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd90      	pop	{r4, r7, pc}
 8008b64:	200005f4 	.word	0x200005f4
 8008b68:	2000000a 	.word	0x2000000a

08008b6c <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	4603      	mov	r3, r0
 8008b74:	460a      	mov	r2, r1
 8008b76:	71fb      	strb	r3, [r7, #7]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0);
 8008b7c:	79ba      	ldrb	r2, [r7, #6]
 8008b7e:	79f8      	ldrb	r0, [r7, #7]
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	2102      	movs	r1, #2
 8008b88:	f7ff ffac 	bl	8008ae4 <ll_send_packet>
 8008b8c:	4603      	mov	r3, r0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af02      	add	r7, sp, #8
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	460a      	mov	r2, r1
 8008ba0:	71fb      	strb	r3, [r7, #7]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0);
 8008ba6:	79ba      	ldrb	r2, [r7, #6]
 8008ba8:	79f8      	ldrb	r0, [r7, #7]
 8008baa:	2300      	movs	r3, #0
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2103      	movs	r1, #3
 8008bb2:	f7ff ff97 	bl	8008ae4 <ll_send_packet>
 8008bb6:	4603      	mov	r3, r0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len) 
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 8008bce:	f7f8 fbef 	bl	80013b0 <sys_random>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	7dfa      	ldrb	r2, [r7, #23]
 8008bdc:	7bf8      	ldrb	r0, [r7, #15]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2101      	movs	r1, #1
 8008be4:	f7ff ff7e 	bl	8008ae4 <ll_send_packet>
 8008be8:	4603      	mov	r3, r0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <ll_transmit>:
{
	return list_size(Tx_packet_list)  ;
}

void ll_transmit(void) 
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 8008bfa:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <ll_transmit+0x13c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fe54 	bl	80088ac <list_size>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 808d 	beq.w	8008d26 <ll_transmit+0x132>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 8008c0c:	e073      	b.n	8008cf6 <ll_transmit+0x102>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 8008c0e:	4b48      	ldr	r3, [pc, #288]	; (8008d30 <ll_transmit+0x13c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a48      	ldr	r2, [pc, #288]	; (8008d34 <ll_transmit+0x140>)
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fe05 	bl	8008828 <list_index>
 8008c1e:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 fbe1 	bl	80093f2 <packet_get_size>
 8008c30:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fc19 	bl	800946c <malloc>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fada 	bl	80091fa <packet_serialize>

		//send to network
		if(buff != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01c      	beq.n	8008c86 <ll_transmit+0x92>
		{
			network_transmit_index++;
 8008c4c:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <ll_transmit+0x140>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	4a38      	ldr	r2, [pc, #224]	; (8008d34 <ll_transmit+0x140>)
 8008c54:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	615a      	str	r2, [r3, #20]
			Radio.Send(buff , packet_size) ;
 8008c60:	4b35      	ldr	r3, [pc, #212]	; (8008d38 <ll_transmit+0x144>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	b2d2      	uxtb	r2, r2
 8008c68:	4611      	mov	r1, r2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
			//wait for the transmition to complete
			while(tarnsmition_done == false);
 8008c6e:	bf00      	nop
 8008c70:	4b32      	ldr	r3, [pc, #200]	; (8008d3c <ll_transmit+0x148>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f083 0301 	eor.w	r3, r3, #1
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f8      	bne.n	8008c70 <ll_transmit+0x7c>
			//break ;
			free(buff) ;
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fbfc 	bl	800947c <free>
 8008c84:	e005      	b.n	8008c92 <ll_transmit+0x9e>
		}
		else if(buff == NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <ll_transmit+0x9e>
		{
			printf("\npacket_serialize FAILED\n");
 8008c8c:	482c      	ldr	r0, [pc, #176]	; (8008d40 <ll_transmit+0x14c>)
 8008c8e:	f001 fa3f 	bl	800a110 <puts>
		}

		

		tarnsmition_done = false ;
 8008c92:	4b2a      	ldr	r3, [pc, #168]	; (8008d3c <ll_transmit+0x148>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	78db      	ldrb	r3, [r3, #3]
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d10e      	bne.n	8008cbe <ll_transmit+0xca>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 8008ca0:	4b23      	ldr	r3, [pc, #140]	; (8008d30 <ll_transmit+0x13c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6979      	ldr	r1, [r7, #20]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fd60 	bl	800876c <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fbe5 	bl	800947c <free>
			free(holder);
 8008cb2:	6938      	ldr	r0, [r7, #16]
 8008cb4:	f000 fbe2 	bl	800947c <free>
			free(node) ;
 8008cb8:	6978      	ldr	r0, [r7, #20]
 8008cba:	f000 fbdf 	bl	800947c <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	dd17      	ble.n	8008cf6 <ll_transmit+0x102>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <ll_transmit+0x13c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6979      	ldr	r1, [r7, #20]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fd4d 	bl	800876c <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d104      	bne.n	8008ce4 <ll_transmit+0xf0>
			{
				free(pack->payload) ;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fbcc 	bl	800947c <free>
			}

			free(pack) ;
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fbc9 	bl	800947c <free>
			free(holder);
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f000 fbc6 	bl	800947c <free>
			free(node);
 8008cf0:	6978      	ldr	r0, [r7, #20]
 8008cf2:	f000 fbc3 	bl	800947c <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 8008cf6:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <ll_transmit+0x13c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fdd6 	bl	80088ac <list_size>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <ll_transmit+0x140>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d881      	bhi.n	8008c0e <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 8008d0a:	4b09      	ldr	r3, [pc, #36]	; (8008d30 <ll_transmit+0x13c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fdcc 	bl	80088ac <list_size>
 8008d14:	4602      	mov	r2, r0
 8008d16:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <ll_transmit+0x140>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d804      	bhi.n	8008d28 <ll_transmit+0x134>
	{
		network_transmit_index = 0 ;	
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <ll_transmit+0x140>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e000      	b.n	8008d28 <ll_transmit+0x134>
		return ;
 8008d26:	bf00      	nop
	}
}
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200005f4 	.word	0x200005f4
 8008d34:	20000464 	.word	0x20000464
 8008d38:	0800e450 	.word	0x0800e450
 8008d3c:	20000470 	.word	0x20000470
 8008d40:	0800e2ac 	.word	0x0800e2ac

08008d44 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b08f      	sub	sp, #60	; 0x3c
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 8008d4e:	f107 0320 	add.w	r3, r7, #32
 8008d52:	461a      	mov	r2, r3
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 faac 	bl	80092b4 <packet_desirialize>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d152      	bne.n	8008e08 <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 8008d62:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d66:	4b2e      	ldr	r3, [pc, #184]	; (8008e20 <ll_receive+0xdc>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d14f      	bne.n	8008e0e <ll_receive+0xca>
 8008d6e:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <ll_receive+0xe0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fd9a 	bl	80088ac <list_size>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d847      	bhi.n	8008e0e <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 8008d7e:	4b29      	ldr	r3, [pc, #164]	; (8008e24 <ll_receive+0xe0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fd92 	bl	80088ac <list_size>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d021      	beq.n	8008dd2 <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 8008d8e:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <ll_receive+0xe0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d96:	4611      	mov	r1, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fcbf 	bl	800871c <list_search>
 8008d9e:	6378      	str	r0, [r7, #52]	; 0x34
				if(n != NULL )
 8008da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d015      	beq.n	8008dd2 <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	633b      	str	r3, [r7, #48]	; 0x30
					packet_t * pack = (packet_t*) &(holder)->packet ;
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	78da      	ldrb	r2, [r3, #3]
 8008db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d10a      	bne.n	8008dd2 <ll_receive+0x8e>
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	791a      	ldrb	r2, [r3, #4]
 8008dc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d104      	bne.n	8008dd2 <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fb56 	bl	800947c <free>
 8008dd0:	e022      	b.n	8008e18 <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	f107 0220 	add.w	r2, r7, #32
 8008dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 8008de0:	f7f8 fadf 	bl	80013a2 <sys_get_tick>
 8008de4:	4603      	mov	r3, r0
 8008de6:	61bb      	str	r3, [r7, #24]
			packet_holder.number_of_transmition = 0 ;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <ll_receive+0xe0>)
 8008dee:	681c      	ldr	r4, [r3, #0]
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	2118      	movs	r1, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fd94 	bl	8008924 <list_node_new>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff fcd5 	bl	80087b0 <list_push_back>
 8008e06:	e002      	b.n	8008e0e <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 8008e08:	4807      	ldr	r0, [pc, #28]	; (8008e28 <ll_receive+0xe4>)
 8008e0a:	f001 f981 	bl	800a110 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <ll_receive+0xe8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	4a05      	ldr	r2, [pc, #20]	; (8008e2c <ll_receive+0xe8>)
 8008e16:	6013      	str	r3, [r2, #0]

}
 8008e18:	373c      	adds	r7, #60	; 0x3c
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd90      	pop	{r4, r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	2000000a 	.word	0x2000000a
 8008e24:	200005f0 	.word	0x200005f0
 8008e28:	0800e2c8 	.word	0x0800e2c8
 8008e2c:	2000046c 	.word	0x2000046c

08008e30 <ll_process_received>:

void ll_process_received()
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	; 0x28
 8008e34:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008e36:	e0a4      	b.n	8008f82 <ll_process_received+0x152>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8008e38:	4b60      	ldr	r3, [pc, #384]	; (8008fbc <ll_process_received+0x18c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a60      	ldr	r2, [pc, #384]	; (8008fc0 <ll_process_received+0x190>)
 8008e3e:	6812      	ldr	r2, [r2, #0]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fcf0 	bl	8008828 <list_index>
 8008e48:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	61fb      	str	r3, [r7, #28]

		//debug_packet(packet) ;


		if(packet->type == PACK_TYPE_DATA)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	78db      	ldrb	r3, [r3, #3]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d110      	bne.n	8008e7e <ll_process_received+0x4e>
			// ASK packet should be sent ,the data will be read later
			// by recv_from function ,also packet should be removed after certain time

			//number_of_transmition used to assure that a ASK has been send to confirm data recv
			//data packet will be removed by ll_get_recv_from
			if( holder->number_of_transmition == 0)
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f040 8089 	bne.w	8008f78 <ll_process_received+0x148>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	789b      	ldrb	r3, [r3, #2]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7ff fe7b 	bl	8008b6c <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	615a      	str	r2, [r3, #20]
 8008e7c:	e07c      	b.n	8008f78 <ll_process_received+0x148>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	78db      	ldrb	r3, [r3, #3]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d141      	bne.n	8008f0a <ll_process_received+0xda>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008e86:	4b4f      	ldr	r3, [pc, #316]	; (8008fc4 <ll_process_received+0x194>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	789b      	ldrb	r3, [r3, #2]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f7ff fc43 	bl	800871c <list_search>
 8008e96:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10f      	bne.n	8008ebe <ll_process_received+0x8e>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 8008e9e:	4b47      	ldr	r3, [pc, #284]	; (8008fbc <ll_process_received+0x18c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fc61 	bl	800876c <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 8008eaa:	69f8      	ldr	r0, [r7, #28]
 8008eac:	f000 fae6 	bl	800947c <free>
				free(holder) ;
 8008eb0:	6a38      	ldr	r0, [r7, #32]
 8008eb2:	f000 fae3 	bl	800947c <free>
				free(n);
 8008eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eb8:	f000 fae0 	bl	800947c <free>
 8008ebc:	e05c      	b.n	8008f78 <ll_process_received+0x148>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	78db      	ldrb	r3, [r3, #3]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d153      	bne.n	8008f78 <ll_process_received+0x148>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	789b      	ldrb	r3, [r3, #2]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7ff fe5b 	bl	8008b96 <ll_send_NANK>
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 8008ee0:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <ll_process_received+0x194>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fc40 	bl	800876c <list_remove>
					//free memory
					free(pack_p->payload) ;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fac3 	bl	800947c <free>
					free(pack_p) ;
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fac0 	bl	800947c <free>
					free(h);
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f000 fabd 	bl	800947c <free>
					free(tx_data_node) ;
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 faba 	bl	800947c <free>
 8008f08:	e036      	b.n	8008f78 <ll_process_received+0x148>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	78db      	ldrb	r3, [r3, #3]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d132      	bne.n	8008f78 <ll_process_received+0x148>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008f12:	4b2c      	ldr	r3, [pc, #176]	; (8008fc4 <ll_process_received+0x194>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	789b      	ldrb	r3, [r3, #2]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7ff fbfd 	bl	800871c <list_search>
 8008f22:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d017      	beq.n	8008f5a <ll_process_received+0x12a>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	78db      	ldrb	r3, [r3, #3]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d10e      	bne.n	8008f5a <ll_process_received+0x12a>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 8008f3c:	4b21      	ldr	r3, [pc, #132]	; (8008fc4 <ll_process_received+0x194>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69b9      	ldr	r1, [r7, #24]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fc12 	bl	800876c <list_remove>

					//release memory

					free(ask_packet);
 8008f48:	6938      	ldr	r0, [r7, #16]
 8008f4a:	f000 fa97 	bl	800947c <free>
					free(p_holder) ;
 8008f4e:	6978      	ldr	r0, [r7, #20]
 8008f50:	f000 fa94 	bl	800947c <free>
					free(tx_ask_node) ;
 8008f54:	69b8      	ldr	r0, [r7, #24]
 8008f56:	f000 fa91 	bl	800947c <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <ll_process_received+0x18c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fc03 	bl	800876c <list_remove>
			free(packet);
 8008f66:	69f8      	ldr	r0, [r7, #28]
 8008f68:	f000 fa88 	bl	800947c <free>
			free(holder);
 8008f6c:	6a38      	ldr	r0, [r7, #32]
 8008f6e:	f000 fa85 	bl	800947c <free>
			free(n);
 8008f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f74:	f000 fa82 	bl	800947c <free>
		}

		rx_packet_index++;
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <ll_process_received+0x190>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <ll_process_received+0x190>)
 8008f80:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008f82:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <ll_process_received+0x18c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fc90 	bl	80088ac <list_size>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <ll_process_received+0x190>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	f63f af50 	bhi.w	8008e38 <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index > list_size(Rx_packet_list))
 8008f98:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <ll_process_received+0x18c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fc85 	bl	80088ac <list_size>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <ll_process_received+0x190>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d202      	bcs.n	8008fb2 <ll_process_received+0x182>
	{
		rx_packet_index = 0;
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <ll_process_received+0x190>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
	}

}
 8008fb2:	bf00      	nop
 8008fb4:	3728      	adds	r7, #40	; 0x28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	200005f0 	.word	0x200005f0
 8008fc0:	20000468 	.word	0x20000468
 8008fc4:	200005f4 	.word	0x200005f4

08008fc8 <ll_get_recv_from>:

int  ll_get_recv_from(u8 src ,u8 *data )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]


	int rx_list_size = list_size(Rx_packet_list) ;
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	; (800908c <ll_get_recv_from+0xc4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fc67 	bl	80088ac <list_size>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	61bb      	str	r3, [r7, #24]



	if(rx_list_size == 0)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <ll_get_recv_from+0x24>
		return 0 ;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e04b      	b.n	8009084 <ll_get_recv_from+0xbc>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	e043      	b.n	800907a <ll_get_recv_from+0xb2>
	{
		node = list_index(Rx_packet_list , i) ;
 8008ff2:	4b26      	ldr	r3, [pc, #152]	; (800908c <ll_get_recv_from+0xc4>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69f9      	ldr	r1, [r7, #28]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fc15 	bl	8008828 <list_index>
 8008ffe:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	60fb      	str	r3, [r7, #12]

		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	78db      	ldrb	r3, [r3, #3]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d130      	bne.n	8009074 <ll_get_recv_from+0xac>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	79fa      	ldrb	r2, [r7, #7]
 8009018:	429a      	cmp	r2, r3
 800901a:	d12b      	bne.n	8009074 <ll_get_recv_from+0xac>
		{
			int data_length =  pack->payload_length ;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	791b      	ldrb	r3, [r3, #4]
 8009020:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4619      	mov	r1, r3
 800902a:	6838      	ldr	r0, [r7, #0]
 800902c:	f000 fa2e 	bl	800948c <memcpy>

			if( holder->number_of_transmition == 0)
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d107      	bne.n	8009048 <ll_get_recv_from+0x80>
			{
#ifdef PROT_DEBUG
				printf("ASK send From ll_get_recv_from\n");
#endif
				ll_send_ASK(pack->src , pack->id) ;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	781a      	ldrb	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7ff fd92 	bl	8008b6c <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <ll_get_recv_from+0xc4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6979      	ldr	r1, [r7, #20]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fb8c 	bl	800876c <list_remove>
			free(pack->payload) ;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fa0f 	bl	800947c <free>
			free(pack) ;
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fa0c 	bl	800947c <free>
			free(holder) ;
 8009064:	6938      	ldr	r0, [r7, #16]
 8009066:	f000 fa09 	bl	800947c <free>
			free(node) ;
 800906a:	6978      	ldr	r0, [r7, #20]
 800906c:	f000 fa06 	bl	800947c <free>
			return data_length ;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	e007      	b.n	8009084 <ll_get_recv_from+0xbc>
	for(int i = 0 ; i < rx_list_size ; i++)
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	429a      	cmp	r2, r3
 8009080:	dbb7      	blt.n	8008ff2 <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3720      	adds	r7, #32
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	200005f0 	.word	0x200005f0

08009090 <ll_process>:


u32 process_tmr = 0;
//this function should manage send and receive operations
void ll_process(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0

	ll_process_received();
 8009094:	f7ff fecc 	bl	8008e30 <ll_process_received>
    if(sys_get_tick() - process_tmr > 1000)
 8009098:	f7f8 f983 	bl	80013a2 <sys_get_tick>
 800909c:	4602      	mov	r2, r0
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <ll_process+0x38>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090a8:	d90b      	bls.n	80090c2 <ll_process+0x32>
    {
	    ll_transmit() ;
 80090aa:	f7ff fda3 	bl	8008bf4 <ll_transmit>
	    Radio.Rx(1000);
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <ll_process+0x3c>)
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090b6:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 80090b8:	f7f8 f973 	bl	80013a2 <sys_get_tick>
 80090bc:	4603      	mov	r3, r0
 80090be:	4a02      	ldr	r2, [pc, #8]	; (80090c8 <ll_process+0x38>)
 80090c0:	6013      	str	r3, [r2, #0]

		default:
			break ;
		}
	*/
}
 80090c2:	bf00      	nop
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000474 	.word	0x20000474
 80090cc:	0800e450 	.word	0x0800e450

080090d0 <ll_set_transmition_done>:


void ll_set_transmition_done()
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 80090d4:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <ll_set_transmition_done+0x14>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000470 	.word	0x20000470

080090e8 <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	70fb      	strb	r3, [r7, #3]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70bb      	strb	r3, [r7, #2]
 80090fe:	4613      	mov	r3, r2
 8009100:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f819 	bl	800913e <packet_set_src>
	packet_set_dest(pack  , dest) ;
 800910c:	78bb      	ldrb	r3, [r7, #2]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f822 	bl	800915a <packet_set_dest>
	packet_set_type(pack , type );
 8009116:	787b      	ldrb	r3, [r7, #1]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f82b 	bl	8009176 <packet_set_type>
	packet_set_id(pack ,id) ;
 8009120:	7c3b      	ldrb	r3, [r7, #16]
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f85a 	bl	80091de <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 800912a:	7e3b      	ldrb	r3, [r7, #24]
 800912c:	461a      	mov	r2, r3
 800912e:	6979      	ldr	r1, [r7, #20]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f82e 	bl	8009192 <packet_set_payload>
}
 8009136:	bf00      	nop
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	701a      	strb	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	bc80      	pop	{r7}
 8009158:	4770      	bx	lr

0800915a <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	705a      	strb	r2, [r3, #1]
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr

08009176 <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	70da      	strb	r2, [r3, #3]
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr

08009192 <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d016      	beq.n	80091d2 <packet_set_payload+0x40>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d013      	beq.n	80091d2 <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f95d 	bl	800946c <malloc>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f962 	bl	800948c <memcpy>
		pack->payload_length = len ;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	711a      	strb	r2, [r3, #4]
		return ;
 80091d0:	e002      	b.n	80091d8 <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	711a      	strb	r2, [r3, #4]
	
}
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	709a      	strb	r2, [r3, #2]
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr

080091fa <packet_serialize>:
	printf("\n");
	
}

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b086      	sub	sp, #24
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	3307      	adds	r3, #7
 800920a:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d04a      	beq.n	80092a8 <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	785a      	ldrb	r2, [r3, #1]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3301      	adds	r3, #1
 8009230:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	789a      	ldrb	r2, [r3, #2]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3301      	adds	r3, #1
 800923e:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	78da      	ldrb	r2, [r3, #3]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	3301      	adds	r3, #1
 800924c:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791a      	ldrb	r2, [r3, #4]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	3301      	adds	r3, #1
 800925a:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6899      	ldr	r1, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	461a      	mov	r2, r3
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f000 f910 	bl	800948c <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	3305      	adds	r3, #5
 8009272:	4619      	mov	r1, r3
 8009274:	6838      	ldr	r0, [r7, #0]
 8009276:	f000 f873 	bl	8009360 <check_sum>
 800927a:	4603      	mov	r3, r0
 800927c:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	461a      	mov	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	4413      	add	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 800928a:	89fb      	ldrh	r3, [r7, #14]
 800928c:	0a1b      	lsrs	r3, r3, #8
 800928e:	b29b      	uxth	r3, r3
 8009290:	b2da      	uxtb	r2, r3
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 800929c:	89fb      	ldrh	r3, [r7, #14]
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	e000      	b.n	80092aa <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 80092a8:	2300      	movs	r3, #0
	}
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	3b02      	subs	r3, #2
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4413      	add	r3, r2
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	8afb      	ldrh	r3, [r7, #22]
 80092dc:	4413      	add	r3, r2
 80092de:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	3b02      	subs	r3, #2
 80092e4:	4619      	mov	r1, r3
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 f83a 	bl	8009360 <check_sum>
 80092ec:	4603      	mov	r3, r0
 80092ee:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 80092f0:	8aba      	ldrh	r2, [r7, #20]
 80092f2:	8afb      	ldrh	r3, [r7, #22]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d005      	beq.n	8009304 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 80092f8:	4818      	ldr	r0, [pc, #96]	; (800935c <packet_desirialize+0xa8>)
 80092fa:	f000 ff09 	bl	800a110 <puts>
		return PACK_CHECKSUM_ERROR ;
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	e026      	b.n	8009352 <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	785a      	ldrb	r2, [r3, #1]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	78da      	ldrb	r2, [r3, #3]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	789a      	ldrb	r2, [r3, #2]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	791a      	ldrb	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	791b      	ldrb	r3, [r3, #4]
 8009330:	4618      	mov	r0, r3
 8009332:	f000 f89b 	bl	800946c <malloc>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6898      	ldr	r0, [r3, #8]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	1d59      	adds	r1, r3, #5
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	791b      	ldrb	r3, [r3, #4]
 800934a:	461a      	mov	r2, r3
 800934c:	f000 f89e 	bl	800948c <memcpy>
	
	return PACK_OK ;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	0800e378 	.word	0x0800e378

08009360 <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 8009372:	e017      	b.n	80093a4 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	b29b      	uxth	r3, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4413      	add	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	3301      	adds	r3, #1
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	461a      	mov	r2, r3
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4413      	add	r3, r2
 8009396:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	3b02      	subs	r3, #2
 800939c:	603b      	str	r3, [r7, #0]
		i += 2;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	3302      	adds	r3, #2
 80093a2:	617b      	str	r3, [r7, #20]
	while(len>1)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	dce4      	bgt.n	8009374 <check_sum+0x14>
	}
	
	if(len >0)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd13      	ble.n	80093d8 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4413      	add	r3, r2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	4413      	add	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 80093c2:	e009      	b.n	80093d8 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 80093d0:	89fb      	ldrh	r3, [r7, #14]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4413      	add	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093de:	daf1      	bge.n	80093c4 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	43db      	mvns	r3, r3
 80093e6:	b29b      	uxth	r3, r3
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr

080093f2 <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	791b      	ldrb	r3, [r3, #4]
 80093fe:	3307      	adds	r3, #7
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr

0800940a <atof>:
 800940a:	2100      	movs	r1, #0
 800940c:	f001 becc 	b.w	800b1a8 <strtod>

08009410 <atoi>:
 8009410:	220a      	movs	r2, #10
 8009412:	2100      	movs	r1, #0
 8009414:	f001 bf5a 	b.w	800b2cc <strtol>

08009418 <__errno>:
 8009418:	4b01      	ldr	r3, [pc, #4]	; (8009420 <__errno+0x8>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	2000000c 	.word	0x2000000c

08009424 <__libc_init_array>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	4d0d      	ldr	r5, [pc, #52]	; (800945c <__libc_init_array+0x38>)
 8009428:	4c0d      	ldr	r4, [pc, #52]	; (8009460 <__libc_init_array+0x3c>)
 800942a:	1b64      	subs	r4, r4, r5
 800942c:	10a4      	asrs	r4, r4, #2
 800942e:	2600      	movs	r6, #0
 8009430:	42a6      	cmp	r6, r4
 8009432:	d109      	bne.n	8009448 <__libc_init_array+0x24>
 8009434:	4d0b      	ldr	r5, [pc, #44]	; (8009464 <__libc_init_array+0x40>)
 8009436:	4c0c      	ldr	r4, [pc, #48]	; (8009468 <__libc_init_array+0x44>)
 8009438:	f004 fd7a 	bl	800df30 <_init>
 800943c:	1b64      	subs	r4, r4, r5
 800943e:	10a4      	asrs	r4, r4, #2
 8009440:	2600      	movs	r6, #0
 8009442:	42a6      	cmp	r6, r4
 8009444:	d105      	bne.n	8009452 <__libc_init_array+0x2e>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f855 3b04 	ldr.w	r3, [r5], #4
 800944c:	4798      	blx	r3
 800944e:	3601      	adds	r6, #1
 8009450:	e7ee      	b.n	8009430 <__libc_init_array+0xc>
 8009452:	f855 3b04 	ldr.w	r3, [r5], #4
 8009456:	4798      	blx	r3
 8009458:	3601      	adds	r6, #1
 800945a:	e7f2      	b.n	8009442 <__libc_init_array+0x1e>
 800945c:	0800f0d4 	.word	0x0800f0d4
 8009460:	0800f0d4 	.word	0x0800f0d4
 8009464:	0800f0d4 	.word	0x0800f0d4
 8009468:	0800f0d8 	.word	0x0800f0d8

0800946c <malloc>:
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <malloc+0xc>)
 800946e:	4601      	mov	r1, r0
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	f000 b86f 	b.w	8009554 <_malloc_r>
 8009476:	bf00      	nop
 8009478:	2000000c 	.word	0x2000000c

0800947c <free>:
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <free+0xc>)
 800947e:	4601      	mov	r1, r0
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	f000 b819 	b.w	80094b8 <_free_r>
 8009486:	bf00      	nop
 8009488:	2000000c 	.word	0x2000000c

0800948c <memcpy>:
 800948c:	440a      	add	r2, r1
 800948e:	4291      	cmp	r1, r2
 8009490:	f100 33ff 	add.w	r3, r0, #4294967295
 8009494:	d100      	bne.n	8009498 <memcpy+0xc>
 8009496:	4770      	bx	lr
 8009498:	b510      	push	{r4, lr}
 800949a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800949e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094a2:	4291      	cmp	r1, r2
 80094a4:	d1f9      	bne.n	800949a <memcpy+0xe>
 80094a6:	bd10      	pop	{r4, pc}

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <_free_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4605      	mov	r5, r0
 80094bc:	2900      	cmp	r1, #0
 80094be:	d045      	beq.n	800954c <_free_r+0x94>
 80094c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c4:	1f0c      	subs	r4, r1, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfb8      	it	lt
 80094ca:	18e4      	addlt	r4, r4, r3
 80094cc:	f003 fc2c 	bl	800cd28 <__malloc_lock>
 80094d0:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <_free_r+0x98>)
 80094d2:	6813      	ldr	r3, [r2, #0]
 80094d4:	4610      	mov	r0, r2
 80094d6:	b933      	cbnz	r3, 80094e6 <_free_r+0x2e>
 80094d8:	6063      	str	r3, [r4, #4]
 80094da:	6014      	str	r4, [r2, #0]
 80094dc:	4628      	mov	r0, r5
 80094de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094e2:	f003 bc27 	b.w	800cd34 <__malloc_unlock>
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	d90b      	bls.n	8009502 <_free_r+0x4a>
 80094ea:	6821      	ldr	r1, [r4, #0]
 80094ec:	1862      	adds	r2, r4, r1
 80094ee:	4293      	cmp	r3, r2
 80094f0:	bf04      	itt	eq
 80094f2:	681a      	ldreq	r2, [r3, #0]
 80094f4:	685b      	ldreq	r3, [r3, #4]
 80094f6:	6063      	str	r3, [r4, #4]
 80094f8:	bf04      	itt	eq
 80094fa:	1852      	addeq	r2, r2, r1
 80094fc:	6022      	streq	r2, [r4, #0]
 80094fe:	6004      	str	r4, [r0, #0]
 8009500:	e7ec      	b.n	80094dc <_free_r+0x24>
 8009502:	461a      	mov	r2, r3
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	b10b      	cbz	r3, 800950c <_free_r+0x54>
 8009508:	42a3      	cmp	r3, r4
 800950a:	d9fa      	bls.n	8009502 <_free_r+0x4a>
 800950c:	6811      	ldr	r1, [r2, #0]
 800950e:	1850      	adds	r0, r2, r1
 8009510:	42a0      	cmp	r0, r4
 8009512:	d10b      	bne.n	800952c <_free_r+0x74>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	4401      	add	r1, r0
 8009518:	1850      	adds	r0, r2, r1
 800951a:	4283      	cmp	r3, r0
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	d1dd      	bne.n	80094dc <_free_r+0x24>
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	6053      	str	r3, [r2, #4]
 8009526:	4401      	add	r1, r0
 8009528:	6011      	str	r1, [r2, #0]
 800952a:	e7d7      	b.n	80094dc <_free_r+0x24>
 800952c:	d902      	bls.n	8009534 <_free_r+0x7c>
 800952e:	230c      	movs	r3, #12
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	e7d3      	b.n	80094dc <_free_r+0x24>
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	1821      	adds	r1, r4, r0
 8009538:	428b      	cmp	r3, r1
 800953a:	bf04      	itt	eq
 800953c:	6819      	ldreq	r1, [r3, #0]
 800953e:	685b      	ldreq	r3, [r3, #4]
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	bf04      	itt	eq
 8009544:	1809      	addeq	r1, r1, r0
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	6054      	str	r4, [r2, #4]
 800954a:	e7c7      	b.n	80094dc <_free_r+0x24>
 800954c:	bd38      	pop	{r3, r4, r5, pc}
 800954e:	bf00      	nop
 8009550:	20000478 	.word	0x20000478

08009554 <_malloc_r>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	1ccd      	adds	r5, r1, #3
 8009558:	f025 0503 	bic.w	r5, r5, #3
 800955c:	3508      	adds	r5, #8
 800955e:	2d0c      	cmp	r5, #12
 8009560:	bf38      	it	cc
 8009562:	250c      	movcc	r5, #12
 8009564:	2d00      	cmp	r5, #0
 8009566:	4606      	mov	r6, r0
 8009568:	db01      	blt.n	800956e <_malloc_r+0x1a>
 800956a:	42a9      	cmp	r1, r5
 800956c:	d903      	bls.n	8009576 <_malloc_r+0x22>
 800956e:	230c      	movs	r3, #12
 8009570:	6033      	str	r3, [r6, #0]
 8009572:	2000      	movs	r0, #0
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009576:	f003 fbd7 	bl	800cd28 <__malloc_lock>
 800957a:	4921      	ldr	r1, [pc, #132]	; (8009600 <_malloc_r+0xac>)
 800957c:	680a      	ldr	r2, [r1, #0]
 800957e:	4614      	mov	r4, r2
 8009580:	b99c      	cbnz	r4, 80095aa <_malloc_r+0x56>
 8009582:	4f20      	ldr	r7, [pc, #128]	; (8009604 <_malloc_r+0xb0>)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	b923      	cbnz	r3, 8009592 <_malloc_r+0x3e>
 8009588:	4621      	mov	r1, r4
 800958a:	4630      	mov	r0, r6
 800958c:	f000 fdc8 	bl	800a120 <_sbrk_r>
 8009590:	6038      	str	r0, [r7, #0]
 8009592:	4629      	mov	r1, r5
 8009594:	4630      	mov	r0, r6
 8009596:	f000 fdc3 	bl	800a120 <_sbrk_r>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d123      	bne.n	80095e6 <_malloc_r+0x92>
 800959e:	230c      	movs	r3, #12
 80095a0:	6033      	str	r3, [r6, #0]
 80095a2:	4630      	mov	r0, r6
 80095a4:	f003 fbc6 	bl	800cd34 <__malloc_unlock>
 80095a8:	e7e3      	b.n	8009572 <_malloc_r+0x1e>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	1b5b      	subs	r3, r3, r5
 80095ae:	d417      	bmi.n	80095e0 <_malloc_r+0x8c>
 80095b0:	2b0b      	cmp	r3, #11
 80095b2:	d903      	bls.n	80095bc <_malloc_r+0x68>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	441c      	add	r4, r3
 80095b8:	6025      	str	r5, [r4, #0]
 80095ba:	e004      	b.n	80095c6 <_malloc_r+0x72>
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	42a2      	cmp	r2, r4
 80095c0:	bf0c      	ite	eq
 80095c2:	600b      	streq	r3, [r1, #0]
 80095c4:	6053      	strne	r3, [r2, #4]
 80095c6:	4630      	mov	r0, r6
 80095c8:	f003 fbb4 	bl	800cd34 <__malloc_unlock>
 80095cc:	f104 000b 	add.w	r0, r4, #11
 80095d0:	1d23      	adds	r3, r4, #4
 80095d2:	f020 0007 	bic.w	r0, r0, #7
 80095d6:	1ac2      	subs	r2, r0, r3
 80095d8:	d0cc      	beq.n	8009574 <_malloc_r+0x20>
 80095da:	1a1b      	subs	r3, r3, r0
 80095dc:	50a3      	str	r3, [r4, r2]
 80095de:	e7c9      	b.n	8009574 <_malloc_r+0x20>
 80095e0:	4622      	mov	r2, r4
 80095e2:	6864      	ldr	r4, [r4, #4]
 80095e4:	e7cc      	b.n	8009580 <_malloc_r+0x2c>
 80095e6:	1cc4      	adds	r4, r0, #3
 80095e8:	f024 0403 	bic.w	r4, r4, #3
 80095ec:	42a0      	cmp	r0, r4
 80095ee:	d0e3      	beq.n	80095b8 <_malloc_r+0x64>
 80095f0:	1a21      	subs	r1, r4, r0
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 fd94 	bl	800a120 <_sbrk_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d1dd      	bne.n	80095b8 <_malloc_r+0x64>
 80095fc:	e7cf      	b.n	800959e <_malloc_r+0x4a>
 80095fe:	bf00      	nop
 8009600:	20000478 	.word	0x20000478
 8009604:	2000047c 	.word	0x2000047c

08009608 <__cvt>:
 8009608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800960c:	b088      	sub	sp, #32
 800960e:	2b00      	cmp	r3, #0
 8009610:	461f      	mov	r7, r3
 8009612:	4614      	mov	r4, r2
 8009614:	bfb8      	it	lt
 8009616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800961a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800961c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800961e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009622:	bfb6      	itet	lt
 8009624:	461f      	movlt	r7, r3
 8009626:	2300      	movge	r3, #0
 8009628:	232d      	movlt	r3, #45	; 0x2d
 800962a:	7013      	strb	r3, [r2, #0]
 800962c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800962e:	f023 0820 	bic.w	r8, r3, #32
 8009632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009636:	d005      	beq.n	8009644 <__cvt+0x3c>
 8009638:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800963c:	d100      	bne.n	8009640 <__cvt+0x38>
 800963e:	3501      	adds	r5, #1
 8009640:	2302      	movs	r3, #2
 8009642:	e000      	b.n	8009646 <__cvt+0x3e>
 8009644:	2303      	movs	r3, #3
 8009646:	aa07      	add	r2, sp, #28
 8009648:	9204      	str	r2, [sp, #16]
 800964a:	aa06      	add	r2, sp, #24
 800964c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009650:	e9cd 3500 	strd	r3, r5, [sp]
 8009654:	4622      	mov	r2, r4
 8009656:	463b      	mov	r3, r7
 8009658:	f001 ffa2 	bl	800b5a0 <_dtoa_r>
 800965c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009660:	4606      	mov	r6, r0
 8009662:	d102      	bne.n	800966a <__cvt+0x62>
 8009664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009666:	07db      	lsls	r3, r3, #31
 8009668:	d522      	bpl.n	80096b0 <__cvt+0xa8>
 800966a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800966e:	eb06 0905 	add.w	r9, r6, r5
 8009672:	d110      	bne.n	8009696 <__cvt+0x8e>
 8009674:	7833      	ldrb	r3, [r6, #0]
 8009676:	2b30      	cmp	r3, #48	; 0x30
 8009678:	d10a      	bne.n	8009690 <__cvt+0x88>
 800967a:	2200      	movs	r2, #0
 800967c:	2300      	movs	r3, #0
 800967e:	4620      	mov	r0, r4
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 fa09 	bl	8000a98 <__aeabi_dcmpeq>
 8009686:	b918      	cbnz	r0, 8009690 <__cvt+0x88>
 8009688:	f1c5 0501 	rsb	r5, r5, #1
 800968c:	f8ca 5000 	str.w	r5, [sl]
 8009690:	f8da 3000 	ldr.w	r3, [sl]
 8009694:	4499      	add	r9, r3
 8009696:	2200      	movs	r2, #0
 8009698:	2300      	movs	r3, #0
 800969a:	4620      	mov	r0, r4
 800969c:	4639      	mov	r1, r7
 800969e:	f7f7 f9fb 	bl	8000a98 <__aeabi_dcmpeq>
 80096a2:	b108      	cbz	r0, 80096a8 <__cvt+0xa0>
 80096a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80096a8:	2230      	movs	r2, #48	; 0x30
 80096aa:	9b07      	ldr	r3, [sp, #28]
 80096ac:	454b      	cmp	r3, r9
 80096ae:	d307      	bcc.n	80096c0 <__cvt+0xb8>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096b4:	1b9b      	subs	r3, r3, r6
 80096b6:	4630      	mov	r0, r6
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	b008      	add	sp, #32
 80096bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c0:	1c59      	adds	r1, r3, #1
 80096c2:	9107      	str	r1, [sp, #28]
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	e7f0      	b.n	80096aa <__cvt+0xa2>

080096c8 <__exponent>:
 80096c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ca:	4603      	mov	r3, r0
 80096cc:	2900      	cmp	r1, #0
 80096ce:	bfb8      	it	lt
 80096d0:	4249      	neglt	r1, r1
 80096d2:	f803 2b02 	strb.w	r2, [r3], #2
 80096d6:	bfb4      	ite	lt
 80096d8:	222d      	movlt	r2, #45	; 0x2d
 80096da:	222b      	movge	r2, #43	; 0x2b
 80096dc:	2909      	cmp	r1, #9
 80096de:	7042      	strb	r2, [r0, #1]
 80096e0:	dd2a      	ble.n	8009738 <__exponent+0x70>
 80096e2:	f10d 0407 	add.w	r4, sp, #7
 80096e6:	46a4      	mov	ip, r4
 80096e8:	270a      	movs	r7, #10
 80096ea:	46a6      	mov	lr, r4
 80096ec:	460a      	mov	r2, r1
 80096ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80096f2:	fb07 1516 	mls	r5, r7, r6, r1
 80096f6:	3530      	adds	r5, #48	; 0x30
 80096f8:	2a63      	cmp	r2, #99	; 0x63
 80096fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80096fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009702:	4631      	mov	r1, r6
 8009704:	dcf1      	bgt.n	80096ea <__exponent+0x22>
 8009706:	3130      	adds	r1, #48	; 0x30
 8009708:	f1ae 0502 	sub.w	r5, lr, #2
 800970c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009710:	1c44      	adds	r4, r0, #1
 8009712:	4629      	mov	r1, r5
 8009714:	4561      	cmp	r1, ip
 8009716:	d30a      	bcc.n	800972e <__exponent+0x66>
 8009718:	f10d 0209 	add.w	r2, sp, #9
 800971c:	eba2 020e 	sub.w	r2, r2, lr
 8009720:	4565      	cmp	r5, ip
 8009722:	bf88      	it	hi
 8009724:	2200      	movhi	r2, #0
 8009726:	4413      	add	r3, r2
 8009728:	1a18      	subs	r0, r3, r0
 800972a:	b003      	add	sp, #12
 800972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009736:	e7ed      	b.n	8009714 <__exponent+0x4c>
 8009738:	2330      	movs	r3, #48	; 0x30
 800973a:	3130      	adds	r1, #48	; 0x30
 800973c:	7083      	strb	r3, [r0, #2]
 800973e:	70c1      	strb	r1, [r0, #3]
 8009740:	1d03      	adds	r3, r0, #4
 8009742:	e7f1      	b.n	8009728 <__exponent+0x60>

08009744 <_printf_float>:
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	b091      	sub	sp, #68	; 0x44
 800974a:	460c      	mov	r4, r1
 800974c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009750:	4616      	mov	r6, r2
 8009752:	461f      	mov	r7, r3
 8009754:	4605      	mov	r5, r0
 8009756:	f003 fa69 	bl	800cc2c <_localeconv_r>
 800975a:	6803      	ldr	r3, [r0, #0]
 800975c:	9309      	str	r3, [sp, #36]	; 0x24
 800975e:	4618      	mov	r0, r3
 8009760:	f7f6 fd18 	bl	8000194 <strlen>
 8009764:	2300      	movs	r3, #0
 8009766:	930e      	str	r3, [sp, #56]	; 0x38
 8009768:	f8d8 3000 	ldr.w	r3, [r8]
 800976c:	900a      	str	r0, [sp, #40]	; 0x28
 800976e:	3307      	adds	r3, #7
 8009770:	f023 0307 	bic.w	r3, r3, #7
 8009774:	f103 0208 	add.w	r2, r3, #8
 8009778:	f894 9018 	ldrb.w	r9, [r4, #24]
 800977c:	f8d4 b000 	ldr.w	fp, [r4]
 8009780:	f8c8 2000 	str.w	r2, [r8]
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800978c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009790:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009794:	930b      	str	r3, [sp, #44]	; 0x2c
 8009796:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009798:	4b9c      	ldr	r3, [pc, #624]	; (8009a0c <_printf_float+0x2c8>)
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	4640      	mov	r0, r8
 80097a0:	f7f7 f9ac 	bl	8000afc <__aeabi_dcmpun>
 80097a4:	bb70      	cbnz	r0, 8009804 <_printf_float+0xc0>
 80097a6:	4b99      	ldr	r3, [pc, #612]	; (8009a0c <_printf_float+0x2c8>)
 80097a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	4640      	mov	r0, r8
 80097b0:	f7f7 f986 	bl	8000ac0 <__aeabi_dcmple>
 80097b4:	bb30      	cbnz	r0, 8009804 <_printf_float+0xc0>
 80097b6:	2200      	movs	r2, #0
 80097b8:	2300      	movs	r3, #0
 80097ba:	4640      	mov	r0, r8
 80097bc:	4651      	mov	r1, sl
 80097be:	f7f7 f975 	bl	8000aac <__aeabi_dcmplt>
 80097c2:	b110      	cbz	r0, 80097ca <_printf_float+0x86>
 80097c4:	232d      	movs	r3, #45	; 0x2d
 80097c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ca:	4b91      	ldr	r3, [pc, #580]	; (8009a10 <_printf_float+0x2cc>)
 80097cc:	4891      	ldr	r0, [pc, #580]	; (8009a14 <_printf_float+0x2d0>)
 80097ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80097d2:	bf94      	ite	ls
 80097d4:	4698      	movls	r8, r3
 80097d6:	4680      	movhi	r8, r0
 80097d8:	2303      	movs	r3, #3
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	f02b 0304 	bic.w	r3, fp, #4
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	f04f 0a00 	mov.w	sl, #0
 80097e6:	9700      	str	r7, [sp, #0]
 80097e8:	4633      	mov	r3, r6
 80097ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80097ec:	4621      	mov	r1, r4
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 f9d2 	bl	8009b98 <_printf_common>
 80097f4:	3001      	adds	r0, #1
 80097f6:	f040 808f 	bne.w	8009918 <_printf_float+0x1d4>
 80097fa:	f04f 30ff 	mov.w	r0, #4294967295
 80097fe:	b011      	add	sp, #68	; 0x44
 8009800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009804:	4642      	mov	r2, r8
 8009806:	4653      	mov	r3, sl
 8009808:	4640      	mov	r0, r8
 800980a:	4651      	mov	r1, sl
 800980c:	f7f7 f976 	bl	8000afc <__aeabi_dcmpun>
 8009810:	b140      	cbz	r0, 8009824 <_printf_float+0xe0>
 8009812:	f1ba 0f00 	cmp.w	sl, #0
 8009816:	bfbc      	itt	lt
 8009818:	232d      	movlt	r3, #45	; 0x2d
 800981a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800981e:	487e      	ldr	r0, [pc, #504]	; (8009a18 <_printf_float+0x2d4>)
 8009820:	4b7e      	ldr	r3, [pc, #504]	; (8009a1c <_printf_float+0x2d8>)
 8009822:	e7d4      	b.n	80097ce <_printf_float+0x8a>
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800982c:	d142      	bne.n	80098b4 <_printf_float+0x170>
 800982e:	2306      	movs	r3, #6
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	9206      	str	r2, [sp, #24]
 8009836:	aa0e      	add	r2, sp, #56	; 0x38
 8009838:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800983c:	aa0d      	add	r2, sp, #52	; 0x34
 800983e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009848:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	6863      	ldr	r3, [r4, #4]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4642      	mov	r2, r8
 8009854:	4653      	mov	r3, sl
 8009856:	4628      	mov	r0, r5
 8009858:	910b      	str	r1, [sp, #44]	; 0x2c
 800985a:	f7ff fed5 	bl	8009608 <__cvt>
 800985e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009860:	2947      	cmp	r1, #71	; 0x47
 8009862:	4680      	mov	r8, r0
 8009864:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009866:	d108      	bne.n	800987a <_printf_float+0x136>
 8009868:	1cc8      	adds	r0, r1, #3
 800986a:	db02      	blt.n	8009872 <_printf_float+0x12e>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	4299      	cmp	r1, r3
 8009870:	dd40      	ble.n	80098f4 <_printf_float+0x1b0>
 8009872:	f1a9 0902 	sub.w	r9, r9, #2
 8009876:	fa5f f989 	uxtb.w	r9, r9
 800987a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800987e:	d81f      	bhi.n	80098c0 <_printf_float+0x17c>
 8009880:	3901      	subs	r1, #1
 8009882:	464a      	mov	r2, r9
 8009884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009888:	910d      	str	r1, [sp, #52]	; 0x34
 800988a:	f7ff ff1d 	bl	80096c8 <__exponent>
 800988e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009890:	1813      	adds	r3, r2, r0
 8009892:	2a01      	cmp	r2, #1
 8009894:	4682      	mov	sl, r0
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	dc02      	bgt.n	80098a0 <_printf_float+0x15c>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	07d2      	lsls	r2, r2, #31
 800989e:	d501      	bpl.n	80098a4 <_printf_float+0x160>
 80098a0:	3301      	adds	r3, #1
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d09c      	beq.n	80097e6 <_printf_float+0xa2>
 80098ac:	232d      	movs	r3, #45	; 0x2d
 80098ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b2:	e798      	b.n	80097e6 <_printf_float+0xa2>
 80098b4:	2947      	cmp	r1, #71	; 0x47
 80098b6:	d1bc      	bne.n	8009832 <_printf_float+0xee>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1ba      	bne.n	8009832 <_printf_float+0xee>
 80098bc:	2301      	movs	r3, #1
 80098be:	e7b7      	b.n	8009830 <_printf_float+0xec>
 80098c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80098c4:	d118      	bne.n	80098f8 <_printf_float+0x1b4>
 80098c6:	2900      	cmp	r1, #0
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	dd0b      	ble.n	80098e4 <_printf_float+0x1a0>
 80098cc:	6121      	str	r1, [r4, #16]
 80098ce:	b913      	cbnz	r3, 80098d6 <_printf_float+0x192>
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	07d0      	lsls	r0, r2, #31
 80098d4:	d502      	bpl.n	80098dc <_printf_float+0x198>
 80098d6:	3301      	adds	r3, #1
 80098d8:	440b      	add	r3, r1
 80098da:	6123      	str	r3, [r4, #16]
 80098dc:	65a1      	str	r1, [r4, #88]	; 0x58
 80098de:	f04f 0a00 	mov.w	sl, #0
 80098e2:	e7df      	b.n	80098a4 <_printf_float+0x160>
 80098e4:	b913      	cbnz	r3, 80098ec <_printf_float+0x1a8>
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	07d2      	lsls	r2, r2, #31
 80098ea:	d501      	bpl.n	80098f0 <_printf_float+0x1ac>
 80098ec:	3302      	adds	r3, #2
 80098ee:	e7f4      	b.n	80098da <_printf_float+0x196>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e7f2      	b.n	80098da <_printf_float+0x196>
 80098f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80098f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098fa:	4299      	cmp	r1, r3
 80098fc:	db05      	blt.n	800990a <_printf_float+0x1c6>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	6121      	str	r1, [r4, #16]
 8009902:	07d8      	lsls	r0, r3, #31
 8009904:	d5ea      	bpl.n	80098dc <_printf_float+0x198>
 8009906:	1c4b      	adds	r3, r1, #1
 8009908:	e7e7      	b.n	80098da <_printf_float+0x196>
 800990a:	2900      	cmp	r1, #0
 800990c:	bfd4      	ite	le
 800990e:	f1c1 0202 	rsble	r2, r1, #2
 8009912:	2201      	movgt	r2, #1
 8009914:	4413      	add	r3, r2
 8009916:	e7e0      	b.n	80098da <_printf_float+0x196>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	055a      	lsls	r2, r3, #21
 800991c:	d407      	bmi.n	800992e <_printf_float+0x1ea>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	4642      	mov	r2, r8
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	d12b      	bne.n	8009984 <_printf_float+0x240>
 800992c:	e765      	b.n	80097fa <_printf_float+0xb6>
 800992e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009932:	f240 80dc 	bls.w	8009aee <_printf_float+0x3aa>
 8009936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800993a:	2200      	movs	r2, #0
 800993c:	2300      	movs	r3, #0
 800993e:	f7f7 f8ab 	bl	8000a98 <__aeabi_dcmpeq>
 8009942:	2800      	cmp	r0, #0
 8009944:	d033      	beq.n	80099ae <_printf_float+0x26a>
 8009946:	4a36      	ldr	r2, [pc, #216]	; (8009a20 <_printf_float+0x2dc>)
 8009948:	2301      	movs	r3, #1
 800994a:	4631      	mov	r1, r6
 800994c:	4628      	mov	r0, r5
 800994e:	47b8      	blx	r7
 8009950:	3001      	adds	r0, #1
 8009952:	f43f af52 	beq.w	80097fa <_printf_float+0xb6>
 8009956:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800995a:	429a      	cmp	r2, r3
 800995c:	db02      	blt.n	8009964 <_printf_float+0x220>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	07d8      	lsls	r0, r3, #31
 8009962:	d50f      	bpl.n	8009984 <_printf_float+0x240>
 8009964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af43 	beq.w	80097fa <_printf_float+0xb6>
 8009974:	f04f 0800 	mov.w	r8, #0
 8009978:	f104 091a 	add.w	r9, r4, #26
 800997c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800997e:	3b01      	subs	r3, #1
 8009980:	4543      	cmp	r3, r8
 8009982:	dc09      	bgt.n	8009998 <_printf_float+0x254>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	079b      	lsls	r3, r3, #30
 8009988:	f100 8101 	bmi.w	8009b8e <_printf_float+0x44a>
 800998c:	68e0      	ldr	r0, [r4, #12]
 800998e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009990:	4298      	cmp	r0, r3
 8009992:	bfb8      	it	lt
 8009994:	4618      	movlt	r0, r3
 8009996:	e732      	b.n	80097fe <_printf_float+0xba>
 8009998:	2301      	movs	r3, #1
 800999a:	464a      	mov	r2, r9
 800999c:	4631      	mov	r1, r6
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f af29 	beq.w	80097fa <_printf_float+0xb6>
 80099a8:	f108 0801 	add.w	r8, r8, #1
 80099ac:	e7e6      	b.n	800997c <_printf_float+0x238>
 80099ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dc37      	bgt.n	8009a24 <_printf_float+0x2e0>
 80099b4:	4a1a      	ldr	r2, [pc, #104]	; (8009a20 <_printf_float+0x2dc>)
 80099b6:	2301      	movs	r3, #1
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f af1b 	beq.w	80097fa <_printf_float+0xb6>
 80099c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099c8:	4313      	orrs	r3, r2
 80099ca:	d102      	bne.n	80099d2 <_printf_float+0x28e>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	d5d8      	bpl.n	8009984 <_printf_float+0x240>
 80099d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	f43f af0c 	beq.w	80097fa <_printf_float+0xb6>
 80099e2:	f04f 0900 	mov.w	r9, #0
 80099e6:	f104 0a1a 	add.w	sl, r4, #26
 80099ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ec:	425b      	negs	r3, r3
 80099ee:	454b      	cmp	r3, r9
 80099f0:	dc01      	bgt.n	80099f6 <_printf_float+0x2b2>
 80099f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f4:	e794      	b.n	8009920 <_printf_float+0x1dc>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4652      	mov	r2, sl
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f aefa 	beq.w	80097fa <_printf_float+0xb6>
 8009a06:	f109 0901 	add.w	r9, r9, #1
 8009a0a:	e7ee      	b.n	80099ea <_printf_float+0x2a6>
 8009a0c:	7fefffff 	.word	0x7fefffff
 8009a10:	0800e58c 	.word	0x0800e58c
 8009a14:	0800e590 	.word	0x0800e590
 8009a18:	0800e598 	.word	0x0800e598
 8009a1c:	0800e594 	.word	0x0800e594
 8009a20:	0800e59c 	.word	0x0800e59c
 8009a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bfa8      	it	ge
 8009a2c:	461a      	movge	r2, r3
 8009a2e:	2a00      	cmp	r2, #0
 8009a30:	4691      	mov	r9, r2
 8009a32:	dc37      	bgt.n	8009aa4 <_printf_float+0x360>
 8009a34:	f04f 0b00 	mov.w	fp, #0
 8009a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a3c:	f104 021a 	add.w	r2, r4, #26
 8009a40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a44:	ebaa 0309 	sub.w	r3, sl, r9
 8009a48:	455b      	cmp	r3, fp
 8009a4a:	dc33      	bgt.n	8009ab4 <_printf_float+0x370>
 8009a4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a50:	429a      	cmp	r2, r3
 8009a52:	db3b      	blt.n	8009acc <_printf_float+0x388>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	07da      	lsls	r2, r3, #31
 8009a58:	d438      	bmi.n	8009acc <_printf_float+0x388>
 8009a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a5e:	eba2 030a 	sub.w	r3, r2, sl
 8009a62:	eba2 0901 	sub.w	r9, r2, r1
 8009a66:	4599      	cmp	r9, r3
 8009a68:	bfa8      	it	ge
 8009a6a:	4699      	movge	r9, r3
 8009a6c:	f1b9 0f00 	cmp.w	r9, #0
 8009a70:	dc34      	bgt.n	8009adc <_printf_float+0x398>
 8009a72:	f04f 0800 	mov.w	r8, #0
 8009a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a7a:	f104 0a1a 	add.w	sl, r4, #26
 8009a7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a82:	1a9b      	subs	r3, r3, r2
 8009a84:	eba3 0309 	sub.w	r3, r3, r9
 8009a88:	4543      	cmp	r3, r8
 8009a8a:	f77f af7b 	ble.w	8009984 <_printf_float+0x240>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4652      	mov	r2, sl
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f aeae 	beq.w	80097fa <_printf_float+0xb6>
 8009a9e:	f108 0801 	add.w	r8, r8, #1
 8009aa2:	e7ec      	b.n	8009a7e <_printf_float+0x33a>
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4642      	mov	r2, r8
 8009aaa:	4628      	mov	r0, r5
 8009aac:	47b8      	blx	r7
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d1c0      	bne.n	8009a34 <_printf_float+0x2f0>
 8009ab2:	e6a2      	b.n	80097fa <_printf_float+0xb6>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	920b      	str	r2, [sp, #44]	; 0x2c
 8009abc:	47b8      	blx	r7
 8009abe:	3001      	adds	r0, #1
 8009ac0:	f43f ae9b 	beq.w	80097fa <_printf_float+0xb6>
 8009ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ac6:	f10b 0b01 	add.w	fp, fp, #1
 8009aca:	e7b9      	b.n	8009a40 <_printf_float+0x2fc>
 8009acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	47b8      	blx	r7
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d1bf      	bne.n	8009a5a <_printf_float+0x316>
 8009ada:	e68e      	b.n	80097fa <_printf_float+0xb6>
 8009adc:	464b      	mov	r3, r9
 8009ade:	eb08 020a 	add.w	r2, r8, sl
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	47b8      	blx	r7
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d1c2      	bne.n	8009a72 <_printf_float+0x32e>
 8009aec:	e685      	b.n	80097fa <_printf_float+0xb6>
 8009aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af0:	2a01      	cmp	r2, #1
 8009af2:	dc01      	bgt.n	8009af8 <_printf_float+0x3b4>
 8009af4:	07db      	lsls	r3, r3, #31
 8009af6:	d537      	bpl.n	8009b68 <_printf_float+0x424>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4642      	mov	r2, r8
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f ae79 	beq.w	80097fa <_printf_float+0xb6>
 8009b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f ae71 	beq.w	80097fa <_printf_float+0xb6>
 8009b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f7f6 ffba 	bl	8000a98 <__aeabi_dcmpeq>
 8009b24:	b9d8      	cbnz	r0, 8009b5e <_printf_float+0x41a>
 8009b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b28:	f108 0201 	add.w	r2, r8, #1
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	d10e      	bne.n	8009b56 <_printf_float+0x412>
 8009b38:	e65f      	b.n	80097fa <_printf_float+0xb6>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	464a      	mov	r2, r9
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f ae58 	beq.w	80097fa <_printf_float+0xb6>
 8009b4a:	f108 0801 	add.w	r8, r8, #1
 8009b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b50:	3b01      	subs	r3, #1
 8009b52:	4543      	cmp	r3, r8
 8009b54:	dcf1      	bgt.n	8009b3a <_printf_float+0x3f6>
 8009b56:	4653      	mov	r3, sl
 8009b58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b5c:	e6e1      	b.n	8009922 <_printf_float+0x1de>
 8009b5e:	f04f 0800 	mov.w	r8, #0
 8009b62:	f104 091a 	add.w	r9, r4, #26
 8009b66:	e7f2      	b.n	8009b4e <_printf_float+0x40a>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4642      	mov	r2, r8
 8009b6c:	e7df      	b.n	8009b2e <_printf_float+0x3ea>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	464a      	mov	r2, r9
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f ae3e 	beq.w	80097fa <_printf_float+0xb6>
 8009b7e:	f108 0801 	add.w	r8, r8, #1
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b86:	1a5b      	subs	r3, r3, r1
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	dcf0      	bgt.n	8009b6e <_printf_float+0x42a>
 8009b8c:	e6fe      	b.n	800998c <_printf_float+0x248>
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	f104 0919 	add.w	r9, r4, #25
 8009b96:	e7f4      	b.n	8009b82 <_printf_float+0x43e>

08009b98 <_printf_common>:
 8009b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	4699      	mov	r9, r3
 8009ba0:	688a      	ldr	r2, [r1, #8]
 8009ba2:	690b      	ldr	r3, [r1, #16]
 8009ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bfb8      	it	lt
 8009bac:	4613      	movlt	r3, r2
 8009bae:	6033      	str	r3, [r6, #0]
 8009bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	b10a      	cbz	r2, 8009bbe <_printf_common+0x26>
 8009bba:	3301      	adds	r3, #1
 8009bbc:	6033      	str	r3, [r6, #0]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	0699      	lsls	r1, r3, #26
 8009bc2:	bf42      	ittt	mi
 8009bc4:	6833      	ldrmi	r3, [r6, #0]
 8009bc6:	3302      	addmi	r3, #2
 8009bc8:	6033      	strmi	r3, [r6, #0]
 8009bca:	6825      	ldr	r5, [r4, #0]
 8009bcc:	f015 0506 	ands.w	r5, r5, #6
 8009bd0:	d106      	bne.n	8009be0 <_printf_common+0x48>
 8009bd2:	f104 0a19 	add.w	sl, r4, #25
 8009bd6:	68e3      	ldr	r3, [r4, #12]
 8009bd8:	6832      	ldr	r2, [r6, #0]
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	42ab      	cmp	r3, r5
 8009bde:	dc26      	bgt.n	8009c2e <_printf_common+0x96>
 8009be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009be4:	1e13      	subs	r3, r2, #0
 8009be6:	6822      	ldr	r2, [r4, #0]
 8009be8:	bf18      	it	ne
 8009bea:	2301      	movne	r3, #1
 8009bec:	0692      	lsls	r2, r2, #26
 8009bee:	d42b      	bmi.n	8009c48 <_printf_common+0xb0>
 8009bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	47c0      	blx	r8
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d01e      	beq.n	8009c3c <_printf_common+0xa4>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	68e5      	ldr	r5, [r4, #12]
 8009c02:	6832      	ldr	r2, [r6, #0]
 8009c04:	f003 0306 	and.w	r3, r3, #6
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	bf08      	it	eq
 8009c0c:	1aad      	subeq	r5, r5, r2
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	6922      	ldr	r2, [r4, #16]
 8009c12:	bf0c      	ite	eq
 8009c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c18:	2500      	movne	r5, #0
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	bfc4      	itt	gt
 8009c1e:	1a9b      	subgt	r3, r3, r2
 8009c20:	18ed      	addgt	r5, r5, r3
 8009c22:	2600      	movs	r6, #0
 8009c24:	341a      	adds	r4, #26
 8009c26:	42b5      	cmp	r5, r6
 8009c28:	d11a      	bne.n	8009c60 <_printf_common+0xc8>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e008      	b.n	8009c40 <_printf_common+0xa8>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	4652      	mov	r2, sl
 8009c32:	4649      	mov	r1, r9
 8009c34:	4638      	mov	r0, r7
 8009c36:	47c0      	blx	r8
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d103      	bne.n	8009c44 <_printf_common+0xac>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	3501      	adds	r5, #1
 8009c46:	e7c6      	b.n	8009bd6 <_printf_common+0x3e>
 8009c48:	18e1      	adds	r1, r4, r3
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	2030      	movs	r0, #48	; 0x30
 8009c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c52:	4422      	add	r2, r4
 8009c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	e7c7      	b.n	8009bf0 <_printf_common+0x58>
 8009c60:	2301      	movs	r3, #1
 8009c62:	4622      	mov	r2, r4
 8009c64:	4649      	mov	r1, r9
 8009c66:	4638      	mov	r0, r7
 8009c68:	47c0      	blx	r8
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d0e6      	beq.n	8009c3c <_printf_common+0xa4>
 8009c6e:	3601      	adds	r6, #1
 8009c70:	e7d9      	b.n	8009c26 <_printf_common+0x8e>
	...

08009c74 <_printf_i>:
 8009c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	4691      	mov	r9, r2
 8009c7c:	7e27      	ldrb	r7, [r4, #24]
 8009c7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c80:	2f78      	cmp	r7, #120	; 0x78
 8009c82:	4680      	mov	r8, r0
 8009c84:	469a      	mov	sl, r3
 8009c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c8a:	d807      	bhi.n	8009c9c <_printf_i+0x28>
 8009c8c:	2f62      	cmp	r7, #98	; 0x62
 8009c8e:	d80a      	bhi.n	8009ca6 <_printf_i+0x32>
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	f000 80d8 	beq.w	8009e46 <_printf_i+0x1d2>
 8009c96:	2f58      	cmp	r7, #88	; 0x58
 8009c98:	f000 80a3 	beq.w	8009de2 <_printf_i+0x16e>
 8009c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ca4:	e03a      	b.n	8009d1c <_printf_i+0xa8>
 8009ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009caa:	2b15      	cmp	r3, #21
 8009cac:	d8f6      	bhi.n	8009c9c <_printf_i+0x28>
 8009cae:	a001      	add	r0, pc, #4	; (adr r0, 8009cb4 <_printf_i+0x40>)
 8009cb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009cb4:	08009d0d 	.word	0x08009d0d
 8009cb8:	08009d21 	.word	0x08009d21
 8009cbc:	08009c9d 	.word	0x08009c9d
 8009cc0:	08009c9d 	.word	0x08009c9d
 8009cc4:	08009c9d 	.word	0x08009c9d
 8009cc8:	08009c9d 	.word	0x08009c9d
 8009ccc:	08009d21 	.word	0x08009d21
 8009cd0:	08009c9d 	.word	0x08009c9d
 8009cd4:	08009c9d 	.word	0x08009c9d
 8009cd8:	08009c9d 	.word	0x08009c9d
 8009cdc:	08009c9d 	.word	0x08009c9d
 8009ce0:	08009e2d 	.word	0x08009e2d
 8009ce4:	08009d51 	.word	0x08009d51
 8009ce8:	08009e0f 	.word	0x08009e0f
 8009cec:	08009c9d 	.word	0x08009c9d
 8009cf0:	08009c9d 	.word	0x08009c9d
 8009cf4:	08009e4f 	.word	0x08009e4f
 8009cf8:	08009c9d 	.word	0x08009c9d
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009c9d 	.word	0x08009c9d
 8009d04:	08009c9d 	.word	0x08009c9d
 8009d08:	08009e17 	.word	0x08009e17
 8009d0c:	680b      	ldr	r3, [r1, #0]
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	600a      	str	r2, [r1, #0]
 8009d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e0a3      	b.n	8009e68 <_printf_i+0x1f4>
 8009d20:	6825      	ldr	r5, [r4, #0]
 8009d22:	6808      	ldr	r0, [r1, #0]
 8009d24:	062e      	lsls	r6, r5, #24
 8009d26:	f100 0304 	add.w	r3, r0, #4
 8009d2a:	d50a      	bpl.n	8009d42 <_printf_i+0xce>
 8009d2c:	6805      	ldr	r5, [r0, #0]
 8009d2e:	600b      	str	r3, [r1, #0]
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	da03      	bge.n	8009d3c <_printf_i+0xc8>
 8009d34:	232d      	movs	r3, #45	; 0x2d
 8009d36:	426d      	negs	r5, r5
 8009d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d3c:	485e      	ldr	r0, [pc, #376]	; (8009eb8 <_printf_i+0x244>)
 8009d3e:	230a      	movs	r3, #10
 8009d40:	e019      	b.n	8009d76 <_printf_i+0x102>
 8009d42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d46:	6805      	ldr	r5, [r0, #0]
 8009d48:	600b      	str	r3, [r1, #0]
 8009d4a:	bf18      	it	ne
 8009d4c:	b22d      	sxthne	r5, r5
 8009d4e:	e7ef      	b.n	8009d30 <_printf_i+0xbc>
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	6825      	ldr	r5, [r4, #0]
 8009d54:	1d18      	adds	r0, r3, #4
 8009d56:	6008      	str	r0, [r1, #0]
 8009d58:	0628      	lsls	r0, r5, #24
 8009d5a:	d501      	bpl.n	8009d60 <_printf_i+0xec>
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	e002      	b.n	8009d66 <_printf_i+0xf2>
 8009d60:	0669      	lsls	r1, r5, #25
 8009d62:	d5fb      	bpl.n	8009d5c <_printf_i+0xe8>
 8009d64:	881d      	ldrh	r5, [r3, #0]
 8009d66:	4854      	ldr	r0, [pc, #336]	; (8009eb8 <_printf_i+0x244>)
 8009d68:	2f6f      	cmp	r7, #111	; 0x6f
 8009d6a:	bf0c      	ite	eq
 8009d6c:	2308      	moveq	r3, #8
 8009d6e:	230a      	movne	r3, #10
 8009d70:	2100      	movs	r1, #0
 8009d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d76:	6866      	ldr	r6, [r4, #4]
 8009d78:	60a6      	str	r6, [r4, #8]
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	bfa2      	ittt	ge
 8009d7e:	6821      	ldrge	r1, [r4, #0]
 8009d80:	f021 0104 	bicge.w	r1, r1, #4
 8009d84:	6021      	strge	r1, [r4, #0]
 8009d86:	b90d      	cbnz	r5, 8009d8c <_printf_i+0x118>
 8009d88:	2e00      	cmp	r6, #0
 8009d8a:	d04d      	beq.n	8009e28 <_printf_i+0x1b4>
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d92:	fb03 5711 	mls	r7, r3, r1, r5
 8009d96:	5dc7      	ldrb	r7, [r0, r7]
 8009d98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d9c:	462f      	mov	r7, r5
 8009d9e:	42bb      	cmp	r3, r7
 8009da0:	460d      	mov	r5, r1
 8009da2:	d9f4      	bls.n	8009d8e <_printf_i+0x11a>
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d10b      	bne.n	8009dc0 <_printf_i+0x14c>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	07df      	lsls	r7, r3, #31
 8009dac:	d508      	bpl.n	8009dc0 <_printf_i+0x14c>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	6861      	ldr	r1, [r4, #4]
 8009db2:	4299      	cmp	r1, r3
 8009db4:	bfde      	ittt	le
 8009db6:	2330      	movle	r3, #48	; 0x30
 8009db8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dc0:	1b92      	subs	r2, r2, r6
 8009dc2:	6122      	str	r2, [r4, #16]
 8009dc4:	f8cd a000 	str.w	sl, [sp]
 8009dc8:	464b      	mov	r3, r9
 8009dca:	aa03      	add	r2, sp, #12
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7ff fee2 	bl	8009b98 <_printf_common>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d14c      	bne.n	8009e72 <_printf_i+0x1fe>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	b004      	add	sp, #16
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	4835      	ldr	r0, [pc, #212]	; (8009eb8 <_printf_i+0x244>)
 8009de4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	680e      	ldr	r6, [r1, #0]
 8009dec:	061f      	lsls	r7, r3, #24
 8009dee:	f856 5b04 	ldr.w	r5, [r6], #4
 8009df2:	600e      	str	r6, [r1, #0]
 8009df4:	d514      	bpl.n	8009e20 <_printf_i+0x1ac>
 8009df6:	07d9      	lsls	r1, r3, #31
 8009df8:	bf44      	itt	mi
 8009dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8009dfe:	6023      	strmi	r3, [r4, #0]
 8009e00:	b91d      	cbnz	r5, 8009e0a <_printf_i+0x196>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	f023 0320 	bic.w	r3, r3, #32
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	2310      	movs	r3, #16
 8009e0c:	e7b0      	b.n	8009d70 <_printf_i+0xfc>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	f043 0320 	orr.w	r3, r3, #32
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	2378      	movs	r3, #120	; 0x78
 8009e18:	4828      	ldr	r0, [pc, #160]	; (8009ebc <_printf_i+0x248>)
 8009e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e1e:	e7e3      	b.n	8009de8 <_printf_i+0x174>
 8009e20:	065e      	lsls	r6, r3, #25
 8009e22:	bf48      	it	mi
 8009e24:	b2ad      	uxthmi	r5, r5
 8009e26:	e7e6      	b.n	8009df6 <_printf_i+0x182>
 8009e28:	4616      	mov	r6, r2
 8009e2a:	e7bb      	b.n	8009da4 <_printf_i+0x130>
 8009e2c:	680b      	ldr	r3, [r1, #0]
 8009e2e:	6826      	ldr	r6, [r4, #0]
 8009e30:	6960      	ldr	r0, [r4, #20]
 8009e32:	1d1d      	adds	r5, r3, #4
 8009e34:	600d      	str	r5, [r1, #0]
 8009e36:	0635      	lsls	r5, r6, #24
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	d501      	bpl.n	8009e40 <_printf_i+0x1cc>
 8009e3c:	6018      	str	r0, [r3, #0]
 8009e3e:	e002      	b.n	8009e46 <_printf_i+0x1d2>
 8009e40:	0671      	lsls	r1, r6, #25
 8009e42:	d5fb      	bpl.n	8009e3c <_printf_i+0x1c8>
 8009e44:	8018      	strh	r0, [r3, #0]
 8009e46:	2300      	movs	r3, #0
 8009e48:	6123      	str	r3, [r4, #16]
 8009e4a:	4616      	mov	r6, r2
 8009e4c:	e7ba      	b.n	8009dc4 <_printf_i+0x150>
 8009e4e:	680b      	ldr	r3, [r1, #0]
 8009e50:	1d1a      	adds	r2, r3, #4
 8009e52:	600a      	str	r2, [r1, #0]
 8009e54:	681e      	ldr	r6, [r3, #0]
 8009e56:	6862      	ldr	r2, [r4, #4]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7f6 f9a8 	bl	80001b0 <memchr>
 8009e60:	b108      	cbz	r0, 8009e66 <_printf_i+0x1f2>
 8009e62:	1b80      	subs	r0, r0, r6
 8009e64:	6060      	str	r0, [r4, #4]
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	6123      	str	r3, [r4, #16]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e70:	e7a8      	b.n	8009dc4 <_printf_i+0x150>
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	4632      	mov	r2, r6
 8009e76:	4649      	mov	r1, r9
 8009e78:	4640      	mov	r0, r8
 8009e7a:	47d0      	blx	sl
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d0ab      	beq.n	8009dd8 <_printf_i+0x164>
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	079b      	lsls	r3, r3, #30
 8009e84:	d413      	bmi.n	8009eae <_printf_i+0x23a>
 8009e86:	68e0      	ldr	r0, [r4, #12]
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	4298      	cmp	r0, r3
 8009e8c:	bfb8      	it	lt
 8009e8e:	4618      	movlt	r0, r3
 8009e90:	e7a4      	b.n	8009ddc <_printf_i+0x168>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4632      	mov	r2, r6
 8009e96:	4649      	mov	r1, r9
 8009e98:	4640      	mov	r0, r8
 8009e9a:	47d0      	blx	sl
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d09b      	beq.n	8009dd8 <_printf_i+0x164>
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	68e3      	ldr	r3, [r4, #12]
 8009ea4:	9903      	ldr	r1, [sp, #12]
 8009ea6:	1a5b      	subs	r3, r3, r1
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	dcf2      	bgt.n	8009e92 <_printf_i+0x21e>
 8009eac:	e7eb      	b.n	8009e86 <_printf_i+0x212>
 8009eae:	2500      	movs	r5, #0
 8009eb0:	f104 0619 	add.w	r6, r4, #25
 8009eb4:	e7f5      	b.n	8009ea2 <_printf_i+0x22e>
 8009eb6:	bf00      	nop
 8009eb8:	0800e59e 	.word	0x0800e59e
 8009ebc:	0800e5af 	.word	0x0800e5af

08009ec0 <_perror_r>:
 8009ec0:	6983      	ldr	r3, [r0, #24]
 8009ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ec4:	68c4      	ldr	r4, [r0, #12]
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	460e      	mov	r6, r1
 8009eca:	b90b      	cbnz	r3, 8009ed0 <_perror_r+0x10>
 8009ecc:	f002 faae 	bl	800c42c <__sinit>
 8009ed0:	4b43      	ldr	r3, [pc, #268]	; (8009fe0 <_perror_r+0x120>)
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	d132      	bne.n	8009f3c <_perror_r+0x7c>
 8009ed6:	686c      	ldr	r4, [r5, #4]
 8009ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eda:	07d8      	lsls	r0, r3, #31
 8009edc:	d405      	bmi.n	8009eea <_perror_r+0x2a>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	0599      	lsls	r1, r3, #22
 8009ee2:	d402      	bmi.n	8009eea <_perror_r+0x2a>
 8009ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee6:	f002 fea6 	bl	800cc36 <__retarget_lock_acquire_recursive>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f002 f9cb 	bl	800c288 <_fflush_r>
 8009ef2:	bb6e      	cbnz	r6, 8009f50 <_perror_r+0x90>
 8009ef4:	6829      	ldr	r1, [r5, #0]
 8009ef6:	ab01      	add	r3, sp, #4
 8009ef8:	2201      	movs	r2, #1
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f940 	bl	800a180 <_strerror_r>
 8009f00:	4607      	mov	r7, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d14f      	bne.n	8009fa6 <_perror_r+0xe6>
 8009f06:	4837      	ldr	r0, [pc, #220]	; (8009fe4 <_perror_r+0x124>)
 8009f08:	4f36      	ldr	r7, [pc, #216]	; (8009fe4 <_perror_r+0x124>)
 8009f0a:	f7f6 f943 	bl	8000194 <strlen>
 8009f0e:	4606      	mov	r6, r0
 8009f10:	b156      	cbz	r6, 8009f28 <_perror_r+0x68>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f002 f9f4 	bl	800c300 <fileno>
 8009f18:	4633      	mov	r3, r6
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	463a      	mov	r2, r7
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f001 fa32 	bl	800b388 <_write_r>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	da51      	bge.n	8009fcc <_perror_r+0x10c>
 8009f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f32:	07d2      	lsls	r2, r2, #31
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	d54c      	bpl.n	8009fd2 <_perror_r+0x112>
 8009f38:	b003      	add	sp, #12
 8009f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f3c:	4b2a      	ldr	r3, [pc, #168]	; (8009fe8 <_perror_r+0x128>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d101      	bne.n	8009f46 <_perror_r+0x86>
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	e7c8      	b.n	8009ed8 <_perror_r+0x18>
 8009f46:	4b29      	ldr	r3, [pc, #164]	; (8009fec <_perror_r+0x12c>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	bf08      	it	eq
 8009f4c:	68ec      	ldreq	r4, [r5, #12]
 8009f4e:	e7c3      	b.n	8009ed8 <_perror_r+0x18>
 8009f50:	7833      	ldrb	r3, [r6, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0ce      	beq.n	8009ef4 <_perror_r+0x34>
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7f6 f91c 	bl	8000194 <strlen>
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	b157      	cbz	r7, 8009f76 <_perror_r+0xb6>
 8009f60:	4620      	mov	r0, r4
 8009f62:	f002 f9cd 	bl	800c300 <fileno>
 8009f66:	463b      	mov	r3, r7
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f001 fa0b 	bl	800b388 <_write_r>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	da14      	bge.n	8009fa0 <_perror_r+0xe0>
 8009f76:	481e      	ldr	r0, [pc, #120]	; (8009ff0 <_perror_r+0x130>)
 8009f78:	4f1d      	ldr	r7, [pc, #116]	; (8009ff0 <_perror_r+0x130>)
 8009f7a:	f7f6 f90b 	bl	8000194 <strlen>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	d0b7      	beq.n	8009ef4 <_perror_r+0x34>
 8009f84:	4620      	mov	r0, r4
 8009f86:	f002 f9bb 	bl	800c300 <fileno>
 8009f8a:	4633      	mov	r3, r6
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	463a      	mov	r2, r7
 8009f90:	4628      	mov	r0, r5
 8009f92:	f001 f9f9 	bl	800b388 <_write_r>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	dbac      	blt.n	8009ef4 <_perror_r+0x34>
 8009f9a:	1a36      	subs	r6, r6, r0
 8009f9c:	4407      	add	r7, r0
 8009f9e:	e7ef      	b.n	8009f80 <_perror_r+0xc0>
 8009fa0:	1a3f      	subs	r7, r7, r0
 8009fa2:	4406      	add	r6, r0
 8009fa4:	e7db      	b.n	8009f5e <_perror_r+0x9e>
 8009fa6:	f7f6 f8f5 	bl	8000194 <strlen>
 8009faa:	4606      	mov	r6, r0
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	d0aa      	beq.n	8009f06 <_perror_r+0x46>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f002 f9a5 	bl	800c300 <fileno>
 8009fb6:	4633      	mov	r3, r6
 8009fb8:	4601      	mov	r1, r0
 8009fba:	463a      	mov	r2, r7
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f001 f9e3 	bl	800b388 <_write_r>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	db9f      	blt.n	8009f06 <_perror_r+0x46>
 8009fc6:	1a36      	subs	r6, r6, r0
 8009fc8:	4407      	add	r7, r0
 8009fca:	e7ef      	b.n	8009fac <_perror_r+0xec>
 8009fcc:	1a36      	subs	r6, r6, r0
 8009fce:	4407      	add	r7, r0
 8009fd0:	e79e      	b.n	8009f10 <_perror_r+0x50>
 8009fd2:	059b      	lsls	r3, r3, #22
 8009fd4:	d4b0      	bmi.n	8009f38 <_perror_r+0x78>
 8009fd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd8:	f002 fe2e 	bl	800cc38 <__retarget_lock_release_recursive>
 8009fdc:	e7ac      	b.n	8009f38 <_perror_r+0x78>
 8009fde:	bf00      	nop
 8009fe0:	0800ee60 	.word	0x0800ee60
 8009fe4:	0800f0c7 	.word	0x0800f0c7
 8009fe8:	0800ee80 	.word	0x0800ee80
 8009fec:	0800ee40 	.word	0x0800ee40
 8009ff0:	0800f097 	.word	0x0800f097

08009ff4 <perror>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <perror+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f7ff bf61 	b.w	8009ec0 <_perror_r>
 8009ffe:	bf00      	nop
 800a000:	2000000c 	.word	0x2000000c

0800a004 <iprintf>:
 800a004:	b40f      	push	{r0, r1, r2, r3}
 800a006:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <iprintf+0x2c>)
 800a008:	b513      	push	{r0, r1, r4, lr}
 800a00a:	681c      	ldr	r4, [r3, #0]
 800a00c:	b124      	cbz	r4, 800a018 <iprintf+0x14>
 800a00e:	69a3      	ldr	r3, [r4, #24]
 800a010:	b913      	cbnz	r3, 800a018 <iprintf+0x14>
 800a012:	4620      	mov	r0, r4
 800a014:	f002 fa0a 	bl	800c42c <__sinit>
 800a018:	ab05      	add	r3, sp, #20
 800a01a:	9a04      	ldr	r2, [sp, #16]
 800a01c:	68a1      	ldr	r1, [r4, #8]
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	4620      	mov	r0, r4
 800a022:	f003 fcd3 	bl	800d9cc <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02c:	b004      	add	sp, #16
 800a02e:	4770      	bx	lr
 800a030:	2000000c 	.word	0x2000000c

0800a034 <_puts_r>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	460e      	mov	r6, r1
 800a038:	4605      	mov	r5, r0
 800a03a:	b118      	cbz	r0, 800a044 <_puts_r+0x10>
 800a03c:	6983      	ldr	r3, [r0, #24]
 800a03e:	b90b      	cbnz	r3, 800a044 <_puts_r+0x10>
 800a040:	f002 f9f4 	bl	800c42c <__sinit>
 800a044:	69ab      	ldr	r3, [r5, #24]
 800a046:	68ac      	ldr	r4, [r5, #8]
 800a048:	b913      	cbnz	r3, 800a050 <_puts_r+0x1c>
 800a04a:	4628      	mov	r0, r5
 800a04c:	f002 f9ee 	bl	800c42c <__sinit>
 800a050:	4b2c      	ldr	r3, [pc, #176]	; (800a104 <_puts_r+0xd0>)
 800a052:	429c      	cmp	r4, r3
 800a054:	d120      	bne.n	800a098 <_puts_r+0x64>
 800a056:	686c      	ldr	r4, [r5, #4]
 800a058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a05a:	07db      	lsls	r3, r3, #31
 800a05c:	d405      	bmi.n	800a06a <_puts_r+0x36>
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	0598      	lsls	r0, r3, #22
 800a062:	d402      	bmi.n	800a06a <_puts_r+0x36>
 800a064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a066:	f002 fde6 	bl	800cc36 <__retarget_lock_acquire_recursive>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	0719      	lsls	r1, r3, #28
 800a06e:	d51d      	bpl.n	800a0ac <_puts_r+0x78>
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	b1db      	cbz	r3, 800a0ac <_puts_r+0x78>
 800a074:	3e01      	subs	r6, #1
 800a076:	68a3      	ldr	r3, [r4, #8]
 800a078:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a07c:	3b01      	subs	r3, #1
 800a07e:	60a3      	str	r3, [r4, #8]
 800a080:	bb39      	cbnz	r1, 800a0d2 <_puts_r+0x9e>
 800a082:	2b00      	cmp	r3, #0
 800a084:	da38      	bge.n	800a0f8 <_puts_r+0xc4>
 800a086:	4622      	mov	r2, r4
 800a088:	210a      	movs	r1, #10
 800a08a:	4628      	mov	r0, r5
 800a08c:	f001 f92a 	bl	800b2e4 <__swbuf_r>
 800a090:	3001      	adds	r0, #1
 800a092:	d011      	beq.n	800a0b8 <_puts_r+0x84>
 800a094:	250a      	movs	r5, #10
 800a096:	e011      	b.n	800a0bc <_puts_r+0x88>
 800a098:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <_puts_r+0xd4>)
 800a09a:	429c      	cmp	r4, r3
 800a09c:	d101      	bne.n	800a0a2 <_puts_r+0x6e>
 800a09e:	68ac      	ldr	r4, [r5, #8]
 800a0a0:	e7da      	b.n	800a058 <_puts_r+0x24>
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	; (800a10c <_puts_r+0xd8>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	bf08      	it	eq
 800a0a8:	68ec      	ldreq	r4, [r5, #12]
 800a0aa:	e7d5      	b.n	800a058 <_puts_r+0x24>
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f001 f97c 	bl	800b3ac <__swsetup_r>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d0dd      	beq.n	800a074 <_puts_r+0x40>
 800a0b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a0bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0be:	07da      	lsls	r2, r3, #31
 800a0c0:	d405      	bmi.n	800a0ce <_puts_r+0x9a>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	059b      	lsls	r3, r3, #22
 800a0c6:	d402      	bmi.n	800a0ce <_puts_r+0x9a>
 800a0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ca:	f002 fdb5 	bl	800cc38 <__retarget_lock_release_recursive>
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	bd70      	pop	{r4, r5, r6, pc}
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da04      	bge.n	800a0e0 <_puts_r+0xac>
 800a0d6:	69a2      	ldr	r2, [r4, #24]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	dc06      	bgt.n	800a0ea <_puts_r+0xb6>
 800a0dc:	290a      	cmp	r1, #10
 800a0de:	d004      	beq.n	800a0ea <_puts_r+0xb6>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	7019      	strb	r1, [r3, #0]
 800a0e8:	e7c5      	b.n	800a076 <_puts_r+0x42>
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f001 f8f9 	bl	800b2e4 <__swbuf_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d1bf      	bne.n	800a076 <_puts_r+0x42>
 800a0f6:	e7df      	b.n	800a0b8 <_puts_r+0x84>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	250a      	movs	r5, #10
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	6022      	str	r2, [r4, #0]
 800a100:	701d      	strb	r5, [r3, #0]
 800a102:	e7db      	b.n	800a0bc <_puts_r+0x88>
 800a104:	0800ee60 	.word	0x0800ee60
 800a108:	0800ee80 	.word	0x0800ee80
 800a10c:	0800ee40 	.word	0x0800ee40

0800a110 <puts>:
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <puts+0xc>)
 800a112:	4601      	mov	r1, r0
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	f7ff bf8d 	b.w	800a034 <_puts_r>
 800a11a:	bf00      	nop
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d06      	ldr	r5, [pc, #24]	; (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f7 fe2a 	bl	8001d84 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000604 	.word	0x20000604

0800a140 <siprintf>:
 800a140:	b40e      	push	{r1, r2, r3}
 800a142:	b500      	push	{lr}
 800a144:	b09c      	sub	sp, #112	; 0x70
 800a146:	ab1d      	add	r3, sp, #116	; 0x74
 800a148:	9002      	str	r0, [sp, #8]
 800a14a:	9006      	str	r0, [sp, #24]
 800a14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a150:	4809      	ldr	r0, [pc, #36]	; (800a178 <siprintf+0x38>)
 800a152:	9107      	str	r1, [sp, #28]
 800a154:	9104      	str	r1, [sp, #16]
 800a156:	4909      	ldr	r1, [pc, #36]	; (800a17c <siprintf+0x3c>)
 800a158:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15c:	9105      	str	r1, [sp, #20]
 800a15e:	6800      	ldr	r0, [r0, #0]
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	a902      	add	r1, sp, #8
 800a164:	f003 fb0a 	bl	800d77c <_svfiprintf_r>
 800a168:	9b02      	ldr	r3, [sp, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	b01c      	add	sp, #112	; 0x70
 800a170:	f85d eb04 	ldr.w	lr, [sp], #4
 800a174:	b003      	add	sp, #12
 800a176:	4770      	bx	lr
 800a178:	2000000c 	.word	0x2000000c
 800a17c:	ffff0208 	.word	0xffff0208

0800a180 <_strerror_r>:
 800a180:	b510      	push	{r4, lr}
 800a182:	4604      	mov	r4, r0
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	288e      	cmp	r0, #142	; 0x8e
 800a18a:	f200 812f 	bhi.w	800a3ec <_strerror_r+0x26c>
 800a18e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a192:	0138      	.short	0x0138
 800a194:	0091008f 	.word	0x0091008f
 800a198:	00950093 	.word	0x00950093
 800a19c:	00990097 	.word	0x00990097
 800a1a0:	009d009b 	.word	0x009d009b
 800a1a4:	00a300a1 	.word	0x00a300a1
 800a1a8:	00a900a7 	.word	0x00a900a7
 800a1ac:	00ad00ab 	.word	0x00ad00ab
 800a1b0:	00af012d 	.word	0x00af012d
 800a1b4:	00b300b1 	.word	0x00b300b1
 800a1b8:	00b700b5 	.word	0x00b700b5
 800a1bc:	00bf00bd 	.word	0x00bf00bd
 800a1c0:	00c700c5 	.word	0x00c700c5
 800a1c4:	00cb00c9 	.word	0x00cb00c9
 800a1c8:	00d100cd 	.word	0x00d100cd
 800a1cc:	00d700d5 	.word	0x00d700d5
 800a1d0:	00db00d9 	.word	0x00db00d9
 800a1d4:	00df00dd 	.word	0x00df00dd
 800a1d8:	00e300e1 	.word	0x00e300e1
 800a1dc:	012d012d 	.word	0x012d012d
 800a1e0:	012d012d 	.word	0x012d012d
 800a1e4:	012d012d 	.word	0x012d012d
 800a1e8:	012d012d 	.word	0x012d012d
 800a1ec:	00eb00e7 	.word	0x00eb00e7
 800a1f0:	012d012d 	.word	0x012d012d
 800a1f4:	012d012d 	.word	0x012d012d
 800a1f8:	012d012d 	.word	0x012d012d
 800a1fc:	012d012d 	.word	0x012d012d
 800a200:	012d012d 	.word	0x012d012d
 800a204:	012d012d 	.word	0x012d012d
 800a208:	00ed012d 	.word	0x00ed012d
 800a20c:	00ef0107 	.word	0x00ef0107
 800a210:	012d00f1 	.word	0x012d00f1
 800a214:	012d012d 	.word	0x012d012d
 800a218:	012d00f3 	.word	0x012d00f3
 800a21c:	012d012d 	.word	0x012d012d
 800a220:	012d00f5 	.word	0x012d00f5
 800a224:	00f9012d 	.word	0x00f9012d
 800a228:	012d012d 	.word	0x012d012d
 800a22c:	012d00fb 	.word	0x012d00fb
 800a230:	012d012d 	.word	0x012d012d
 800a234:	012d012d 	.word	0x012d012d
 800a238:	012d012d 	.word	0x012d012d
 800a23c:	012d012d 	.word	0x012d012d
 800a240:	00fd012d 	.word	0x00fd012d
 800a244:	00ff012d 	.word	0x00ff012d
 800a248:	01030101 	.word	0x01030101
 800a24c:	012d012d 	.word	0x012d012d
 800a250:	012d0125 	.word	0x012d0125
 800a254:	012d012d 	.word	0x012d012d
 800a258:	012d012d 	.word	0x012d012d
 800a25c:	012d012d 	.word	0x012d012d
 800a260:	0113012d 	.word	0x0113012d
 800a264:	01090105 	.word	0x01090105
 800a268:	010d010b 	.word	0x010d010b
 800a26c:	012d010f 	.word	0x012d010f
 800a270:	01150111 	.word	0x01150111
 800a274:	00e90119 	.word	0x00e90119
 800a278:	012b00c1 	.word	0x012b00c1
 800a27c:	00cf00b9 	.word	0x00cf00b9
 800a280:	009f00bb 	.word	0x009f00bb
 800a284:	012900a5 	.word	0x012900a5
 800a288:	012d00f7 	.word	0x012d00f7
 800a28c:	00c30117 	.word	0x00c30117
 800a290:	011b011d 	.word	0x011b011d
 800a294:	012d012d 	.word	0x012d012d
 800a298:	012d012d 	.word	0x012d012d
 800a29c:	00d3012d 	.word	0x00d3012d
 800a2a0:	012d012d 	.word	0x012d012d
 800a2a4:	00e5012d 	.word	0x00e5012d
 800a2a8:	011f0127 	.word	0x011f0127
 800a2ac:	01230121 	.word	0x01230121
 800a2b0:	4855      	ldr	r0, [pc, #340]	; (800a408 <_strerror_r+0x288>)
 800a2b2:	bd10      	pop	{r4, pc}
 800a2b4:	4855      	ldr	r0, [pc, #340]	; (800a40c <_strerror_r+0x28c>)
 800a2b6:	e7fc      	b.n	800a2b2 <_strerror_r+0x132>
 800a2b8:	4855      	ldr	r0, [pc, #340]	; (800a410 <_strerror_r+0x290>)
 800a2ba:	e7fa      	b.n	800a2b2 <_strerror_r+0x132>
 800a2bc:	4855      	ldr	r0, [pc, #340]	; (800a414 <_strerror_r+0x294>)
 800a2be:	e7f8      	b.n	800a2b2 <_strerror_r+0x132>
 800a2c0:	4855      	ldr	r0, [pc, #340]	; (800a418 <_strerror_r+0x298>)
 800a2c2:	e7f6      	b.n	800a2b2 <_strerror_r+0x132>
 800a2c4:	4855      	ldr	r0, [pc, #340]	; (800a41c <_strerror_r+0x29c>)
 800a2c6:	e7f4      	b.n	800a2b2 <_strerror_r+0x132>
 800a2c8:	4855      	ldr	r0, [pc, #340]	; (800a420 <_strerror_r+0x2a0>)
 800a2ca:	e7f2      	b.n	800a2b2 <_strerror_r+0x132>
 800a2cc:	4855      	ldr	r0, [pc, #340]	; (800a424 <_strerror_r+0x2a4>)
 800a2ce:	e7f0      	b.n	800a2b2 <_strerror_r+0x132>
 800a2d0:	4855      	ldr	r0, [pc, #340]	; (800a428 <_strerror_r+0x2a8>)
 800a2d2:	e7ee      	b.n	800a2b2 <_strerror_r+0x132>
 800a2d4:	4855      	ldr	r0, [pc, #340]	; (800a42c <_strerror_r+0x2ac>)
 800a2d6:	e7ec      	b.n	800a2b2 <_strerror_r+0x132>
 800a2d8:	4855      	ldr	r0, [pc, #340]	; (800a430 <_strerror_r+0x2b0>)
 800a2da:	e7ea      	b.n	800a2b2 <_strerror_r+0x132>
 800a2dc:	4855      	ldr	r0, [pc, #340]	; (800a434 <_strerror_r+0x2b4>)
 800a2de:	e7e8      	b.n	800a2b2 <_strerror_r+0x132>
 800a2e0:	4855      	ldr	r0, [pc, #340]	; (800a438 <_strerror_r+0x2b8>)
 800a2e2:	e7e6      	b.n	800a2b2 <_strerror_r+0x132>
 800a2e4:	4855      	ldr	r0, [pc, #340]	; (800a43c <_strerror_r+0x2bc>)
 800a2e6:	e7e4      	b.n	800a2b2 <_strerror_r+0x132>
 800a2e8:	4855      	ldr	r0, [pc, #340]	; (800a440 <_strerror_r+0x2c0>)
 800a2ea:	e7e2      	b.n	800a2b2 <_strerror_r+0x132>
 800a2ec:	4855      	ldr	r0, [pc, #340]	; (800a444 <_strerror_r+0x2c4>)
 800a2ee:	e7e0      	b.n	800a2b2 <_strerror_r+0x132>
 800a2f0:	4855      	ldr	r0, [pc, #340]	; (800a448 <_strerror_r+0x2c8>)
 800a2f2:	e7de      	b.n	800a2b2 <_strerror_r+0x132>
 800a2f4:	4855      	ldr	r0, [pc, #340]	; (800a44c <_strerror_r+0x2cc>)
 800a2f6:	e7dc      	b.n	800a2b2 <_strerror_r+0x132>
 800a2f8:	4855      	ldr	r0, [pc, #340]	; (800a450 <_strerror_r+0x2d0>)
 800a2fa:	e7da      	b.n	800a2b2 <_strerror_r+0x132>
 800a2fc:	4855      	ldr	r0, [pc, #340]	; (800a454 <_strerror_r+0x2d4>)
 800a2fe:	e7d8      	b.n	800a2b2 <_strerror_r+0x132>
 800a300:	4855      	ldr	r0, [pc, #340]	; (800a458 <_strerror_r+0x2d8>)
 800a302:	e7d6      	b.n	800a2b2 <_strerror_r+0x132>
 800a304:	4855      	ldr	r0, [pc, #340]	; (800a45c <_strerror_r+0x2dc>)
 800a306:	e7d4      	b.n	800a2b2 <_strerror_r+0x132>
 800a308:	4855      	ldr	r0, [pc, #340]	; (800a460 <_strerror_r+0x2e0>)
 800a30a:	e7d2      	b.n	800a2b2 <_strerror_r+0x132>
 800a30c:	4855      	ldr	r0, [pc, #340]	; (800a464 <_strerror_r+0x2e4>)
 800a30e:	e7d0      	b.n	800a2b2 <_strerror_r+0x132>
 800a310:	4855      	ldr	r0, [pc, #340]	; (800a468 <_strerror_r+0x2e8>)
 800a312:	e7ce      	b.n	800a2b2 <_strerror_r+0x132>
 800a314:	4855      	ldr	r0, [pc, #340]	; (800a46c <_strerror_r+0x2ec>)
 800a316:	e7cc      	b.n	800a2b2 <_strerror_r+0x132>
 800a318:	4855      	ldr	r0, [pc, #340]	; (800a470 <_strerror_r+0x2f0>)
 800a31a:	e7ca      	b.n	800a2b2 <_strerror_r+0x132>
 800a31c:	4855      	ldr	r0, [pc, #340]	; (800a474 <_strerror_r+0x2f4>)
 800a31e:	e7c8      	b.n	800a2b2 <_strerror_r+0x132>
 800a320:	4855      	ldr	r0, [pc, #340]	; (800a478 <_strerror_r+0x2f8>)
 800a322:	e7c6      	b.n	800a2b2 <_strerror_r+0x132>
 800a324:	4855      	ldr	r0, [pc, #340]	; (800a47c <_strerror_r+0x2fc>)
 800a326:	e7c4      	b.n	800a2b2 <_strerror_r+0x132>
 800a328:	4855      	ldr	r0, [pc, #340]	; (800a480 <_strerror_r+0x300>)
 800a32a:	e7c2      	b.n	800a2b2 <_strerror_r+0x132>
 800a32c:	4855      	ldr	r0, [pc, #340]	; (800a484 <_strerror_r+0x304>)
 800a32e:	e7c0      	b.n	800a2b2 <_strerror_r+0x132>
 800a330:	4855      	ldr	r0, [pc, #340]	; (800a488 <_strerror_r+0x308>)
 800a332:	e7be      	b.n	800a2b2 <_strerror_r+0x132>
 800a334:	4855      	ldr	r0, [pc, #340]	; (800a48c <_strerror_r+0x30c>)
 800a336:	e7bc      	b.n	800a2b2 <_strerror_r+0x132>
 800a338:	4855      	ldr	r0, [pc, #340]	; (800a490 <_strerror_r+0x310>)
 800a33a:	e7ba      	b.n	800a2b2 <_strerror_r+0x132>
 800a33c:	4855      	ldr	r0, [pc, #340]	; (800a494 <_strerror_r+0x314>)
 800a33e:	e7b8      	b.n	800a2b2 <_strerror_r+0x132>
 800a340:	4855      	ldr	r0, [pc, #340]	; (800a498 <_strerror_r+0x318>)
 800a342:	e7b6      	b.n	800a2b2 <_strerror_r+0x132>
 800a344:	4855      	ldr	r0, [pc, #340]	; (800a49c <_strerror_r+0x31c>)
 800a346:	e7b4      	b.n	800a2b2 <_strerror_r+0x132>
 800a348:	4855      	ldr	r0, [pc, #340]	; (800a4a0 <_strerror_r+0x320>)
 800a34a:	e7b2      	b.n	800a2b2 <_strerror_r+0x132>
 800a34c:	4855      	ldr	r0, [pc, #340]	; (800a4a4 <_strerror_r+0x324>)
 800a34e:	e7b0      	b.n	800a2b2 <_strerror_r+0x132>
 800a350:	4855      	ldr	r0, [pc, #340]	; (800a4a8 <_strerror_r+0x328>)
 800a352:	e7ae      	b.n	800a2b2 <_strerror_r+0x132>
 800a354:	4855      	ldr	r0, [pc, #340]	; (800a4ac <_strerror_r+0x32c>)
 800a356:	e7ac      	b.n	800a2b2 <_strerror_r+0x132>
 800a358:	4855      	ldr	r0, [pc, #340]	; (800a4b0 <_strerror_r+0x330>)
 800a35a:	e7aa      	b.n	800a2b2 <_strerror_r+0x132>
 800a35c:	4855      	ldr	r0, [pc, #340]	; (800a4b4 <_strerror_r+0x334>)
 800a35e:	e7a8      	b.n	800a2b2 <_strerror_r+0x132>
 800a360:	4855      	ldr	r0, [pc, #340]	; (800a4b8 <_strerror_r+0x338>)
 800a362:	e7a6      	b.n	800a2b2 <_strerror_r+0x132>
 800a364:	4855      	ldr	r0, [pc, #340]	; (800a4bc <_strerror_r+0x33c>)
 800a366:	e7a4      	b.n	800a2b2 <_strerror_r+0x132>
 800a368:	4855      	ldr	r0, [pc, #340]	; (800a4c0 <_strerror_r+0x340>)
 800a36a:	e7a2      	b.n	800a2b2 <_strerror_r+0x132>
 800a36c:	4855      	ldr	r0, [pc, #340]	; (800a4c4 <_strerror_r+0x344>)
 800a36e:	e7a0      	b.n	800a2b2 <_strerror_r+0x132>
 800a370:	4855      	ldr	r0, [pc, #340]	; (800a4c8 <_strerror_r+0x348>)
 800a372:	e79e      	b.n	800a2b2 <_strerror_r+0x132>
 800a374:	4855      	ldr	r0, [pc, #340]	; (800a4cc <_strerror_r+0x34c>)
 800a376:	e79c      	b.n	800a2b2 <_strerror_r+0x132>
 800a378:	4855      	ldr	r0, [pc, #340]	; (800a4d0 <_strerror_r+0x350>)
 800a37a:	e79a      	b.n	800a2b2 <_strerror_r+0x132>
 800a37c:	4855      	ldr	r0, [pc, #340]	; (800a4d4 <_strerror_r+0x354>)
 800a37e:	e798      	b.n	800a2b2 <_strerror_r+0x132>
 800a380:	4855      	ldr	r0, [pc, #340]	; (800a4d8 <_strerror_r+0x358>)
 800a382:	e796      	b.n	800a2b2 <_strerror_r+0x132>
 800a384:	4855      	ldr	r0, [pc, #340]	; (800a4dc <_strerror_r+0x35c>)
 800a386:	e794      	b.n	800a2b2 <_strerror_r+0x132>
 800a388:	4855      	ldr	r0, [pc, #340]	; (800a4e0 <_strerror_r+0x360>)
 800a38a:	e792      	b.n	800a2b2 <_strerror_r+0x132>
 800a38c:	4855      	ldr	r0, [pc, #340]	; (800a4e4 <_strerror_r+0x364>)
 800a38e:	e790      	b.n	800a2b2 <_strerror_r+0x132>
 800a390:	4855      	ldr	r0, [pc, #340]	; (800a4e8 <_strerror_r+0x368>)
 800a392:	e78e      	b.n	800a2b2 <_strerror_r+0x132>
 800a394:	4855      	ldr	r0, [pc, #340]	; (800a4ec <_strerror_r+0x36c>)
 800a396:	e78c      	b.n	800a2b2 <_strerror_r+0x132>
 800a398:	4855      	ldr	r0, [pc, #340]	; (800a4f0 <_strerror_r+0x370>)
 800a39a:	e78a      	b.n	800a2b2 <_strerror_r+0x132>
 800a39c:	4855      	ldr	r0, [pc, #340]	; (800a4f4 <_strerror_r+0x374>)
 800a39e:	e788      	b.n	800a2b2 <_strerror_r+0x132>
 800a3a0:	4855      	ldr	r0, [pc, #340]	; (800a4f8 <_strerror_r+0x378>)
 800a3a2:	e786      	b.n	800a2b2 <_strerror_r+0x132>
 800a3a4:	4855      	ldr	r0, [pc, #340]	; (800a4fc <_strerror_r+0x37c>)
 800a3a6:	e784      	b.n	800a2b2 <_strerror_r+0x132>
 800a3a8:	4855      	ldr	r0, [pc, #340]	; (800a500 <_strerror_r+0x380>)
 800a3aa:	e782      	b.n	800a2b2 <_strerror_r+0x132>
 800a3ac:	4855      	ldr	r0, [pc, #340]	; (800a504 <_strerror_r+0x384>)
 800a3ae:	e780      	b.n	800a2b2 <_strerror_r+0x132>
 800a3b0:	4855      	ldr	r0, [pc, #340]	; (800a508 <_strerror_r+0x388>)
 800a3b2:	e77e      	b.n	800a2b2 <_strerror_r+0x132>
 800a3b4:	4855      	ldr	r0, [pc, #340]	; (800a50c <_strerror_r+0x38c>)
 800a3b6:	e77c      	b.n	800a2b2 <_strerror_r+0x132>
 800a3b8:	4855      	ldr	r0, [pc, #340]	; (800a510 <_strerror_r+0x390>)
 800a3ba:	e77a      	b.n	800a2b2 <_strerror_r+0x132>
 800a3bc:	4855      	ldr	r0, [pc, #340]	; (800a514 <_strerror_r+0x394>)
 800a3be:	e778      	b.n	800a2b2 <_strerror_r+0x132>
 800a3c0:	4855      	ldr	r0, [pc, #340]	; (800a518 <_strerror_r+0x398>)
 800a3c2:	e776      	b.n	800a2b2 <_strerror_r+0x132>
 800a3c4:	4855      	ldr	r0, [pc, #340]	; (800a51c <_strerror_r+0x39c>)
 800a3c6:	e774      	b.n	800a2b2 <_strerror_r+0x132>
 800a3c8:	4855      	ldr	r0, [pc, #340]	; (800a520 <_strerror_r+0x3a0>)
 800a3ca:	e772      	b.n	800a2b2 <_strerror_r+0x132>
 800a3cc:	4855      	ldr	r0, [pc, #340]	; (800a524 <_strerror_r+0x3a4>)
 800a3ce:	e770      	b.n	800a2b2 <_strerror_r+0x132>
 800a3d0:	4855      	ldr	r0, [pc, #340]	; (800a528 <_strerror_r+0x3a8>)
 800a3d2:	e76e      	b.n	800a2b2 <_strerror_r+0x132>
 800a3d4:	4855      	ldr	r0, [pc, #340]	; (800a52c <_strerror_r+0x3ac>)
 800a3d6:	e76c      	b.n	800a2b2 <_strerror_r+0x132>
 800a3d8:	4855      	ldr	r0, [pc, #340]	; (800a530 <_strerror_r+0x3b0>)
 800a3da:	e76a      	b.n	800a2b2 <_strerror_r+0x132>
 800a3dc:	4855      	ldr	r0, [pc, #340]	; (800a534 <_strerror_r+0x3b4>)
 800a3de:	e768      	b.n	800a2b2 <_strerror_r+0x132>
 800a3e0:	4855      	ldr	r0, [pc, #340]	; (800a538 <_strerror_r+0x3b8>)
 800a3e2:	e766      	b.n	800a2b2 <_strerror_r+0x132>
 800a3e4:	4855      	ldr	r0, [pc, #340]	; (800a53c <_strerror_r+0x3bc>)
 800a3e6:	e764      	b.n	800a2b2 <_strerror_r+0x132>
 800a3e8:	4855      	ldr	r0, [pc, #340]	; (800a540 <_strerror_r+0x3c0>)
 800a3ea:	e762      	b.n	800a2b2 <_strerror_r+0x132>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bf14      	ite	ne
 800a3f0:	461a      	movne	r2, r3
 800a3f2:	4622      	moveq	r2, r4
 800a3f4:	f000 ff74 	bl	800b2e0 <_user_strerror>
 800a3f8:	4b52      	ldr	r3, [pc, #328]	; (800a544 <_strerror_r+0x3c4>)
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	bf08      	it	eq
 800a3fe:	4618      	moveq	r0, r3
 800a400:	e757      	b.n	800a2b2 <_strerror_r+0x132>
 800a402:	4851      	ldr	r0, [pc, #324]	; (800a548 <_strerror_r+0x3c8>)
 800a404:	e755      	b.n	800a2b2 <_strerror_r+0x132>
 800a406:	bf00      	nop
 800a408:	0800e5c0 	.word	0x0800e5c0
 800a40c:	0800e5ca 	.word	0x0800e5ca
 800a410:	0800e5e4 	.word	0x0800e5e4
 800a414:	0800e5f4 	.word	0x0800e5f4
 800a418:	0800e60c 	.word	0x0800e60c
 800a41c:	0800e616 	.word	0x0800e616
 800a420:	0800e630 	.word	0x0800e630
 800a424:	0800e642 	.word	0x0800e642
 800a428:	0800e654 	.word	0x0800e654
 800a42c:	0800e66d 	.word	0x0800e66d
 800a430:	0800e67d 	.word	0x0800e67d
 800a434:	0800e689 	.word	0x0800e689
 800a438:	0800e6a6 	.word	0x0800e6a6
 800a43c:	0800e6b8 	.word	0x0800e6b8
 800a440:	0800e6c9 	.word	0x0800e6c9
 800a444:	0800e6db 	.word	0x0800e6db
 800a448:	0800e6e7 	.word	0x0800e6e7
 800a44c:	0800e6ff 	.word	0x0800e6ff
 800a450:	0800e70b 	.word	0x0800e70b
 800a454:	0800e71d 	.word	0x0800e71d
 800a458:	0800e72c 	.word	0x0800e72c
 800a45c:	0800e73c 	.word	0x0800e73c
 800a460:	0800e749 	.word	0x0800e749
 800a464:	0800e768 	.word	0x0800e768
 800a468:	0800e777 	.word	0x0800e777
 800a46c:	0800e788 	.word	0x0800e788
 800a470:	0800e7ac 	.word	0x0800e7ac
 800a474:	0800e7ca 	.word	0x0800e7ca
 800a478:	0800e7e8 	.word	0x0800e7e8
 800a47c:	0800e808 	.word	0x0800e808
 800a480:	0800e81f 	.word	0x0800e81f
 800a484:	0800e82e 	.word	0x0800e82e
 800a488:	0800e83d 	.word	0x0800e83d
 800a48c:	0800e851 	.word	0x0800e851
 800a490:	0800e869 	.word	0x0800e869
 800a494:	0800e877 	.word	0x0800e877
 800a498:	0800e884 	.word	0x0800e884
 800a49c:	0800e89a 	.word	0x0800e89a
 800a4a0:	0800e8a9 	.word	0x0800e8a9
 800a4a4:	0800e8b5 	.word	0x0800e8b5
 800a4a8:	0800e8e4 	.word	0x0800e8e4
 800a4ac:	0800e8f5 	.word	0x0800e8f5
 800a4b0:	0800e910 	.word	0x0800e910
 800a4b4:	0800e923 	.word	0x0800e923
 800a4b8:	0800e939 	.word	0x0800e939
 800a4bc:	0800e942 	.word	0x0800e942
 800a4c0:	0800e959 	.word	0x0800e959
 800a4c4:	0800e961 	.word	0x0800e961
 800a4c8:	0800e96e 	.word	0x0800e96e
 800a4cc:	0800e983 	.word	0x0800e983
 800a4d0:	0800e997 	.word	0x0800e997
 800a4d4:	0800e9af 	.word	0x0800e9af
 800a4d8:	0800e9be 	.word	0x0800e9be
 800a4dc:	0800e9cf 	.word	0x0800e9cf
 800a4e0:	0800e9e2 	.word	0x0800e9e2
 800a4e4:	0800e9ee 	.word	0x0800e9ee
 800a4e8:	0800ea07 	.word	0x0800ea07
 800a4ec:	0800ea1b 	.word	0x0800ea1b
 800a4f0:	0800ea36 	.word	0x0800ea36
 800a4f4:	0800ea4e 	.word	0x0800ea4e
 800a4f8:	0800ea68 	.word	0x0800ea68
 800a4fc:	0800ea70 	.word	0x0800ea70
 800a500:	0800eaa0 	.word	0x0800eaa0
 800a504:	0800eabf 	.word	0x0800eabf
 800a508:	0800eade 	.word	0x0800eade
 800a50c:	0800eaf5 	.word	0x0800eaf5
 800a510:	0800eb08 	.word	0x0800eb08
 800a514:	0800eb21 	.word	0x0800eb21
 800a518:	0800eb38 	.word	0x0800eb38
 800a51c:	0800eb4e 	.word	0x0800eb4e
 800a520:	0800eb6f 	.word	0x0800eb6f
 800a524:	0800eb87 	.word	0x0800eb87
 800a528:	0800eba3 	.word	0x0800eba3
 800a52c:	0800ebb6 	.word	0x0800ebb6
 800a530:	0800ebcc 	.word	0x0800ebcc
 800a534:	0800ebe0 	.word	0x0800ebe0
 800a538:	0800ec02 	.word	0x0800ec02
 800a53c:	0800ec28 	.word	0x0800ec28
 800a540:	0800ec39 	.word	0x0800ec39
 800a544:	0800f0c8 	.word	0x0800f0c8
 800a548:	0800ec4e 	.word	0x0800ec4e

0800a54c <strstr>:
 800a54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54e:	780c      	ldrb	r4, [r1, #0]
 800a550:	b164      	cbz	r4, 800a56c <strstr+0x20>
 800a552:	4603      	mov	r3, r0
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	1c5e      	adds	r6, r3, #1
 800a55a:	b90a      	cbnz	r2, 800a560 <strstr+0x14>
 800a55c:	4610      	mov	r0, r2
 800a55e:	e005      	b.n	800a56c <strstr+0x20>
 800a560:	4294      	cmp	r4, r2
 800a562:	d108      	bne.n	800a576 <strstr+0x2a>
 800a564:	460d      	mov	r5, r1
 800a566:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a56a:	b902      	cbnz	r2, 800a56e <strstr+0x22>
 800a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a572:	4297      	cmp	r7, r2
 800a574:	d0f7      	beq.n	800a566 <strstr+0x1a>
 800a576:	4633      	mov	r3, r6
 800a578:	e7ec      	b.n	800a554 <strstr+0x8>

0800a57a <sulp>:
 800a57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57e:	460f      	mov	r7, r1
 800a580:	4690      	mov	r8, r2
 800a582:	f002 ff49 	bl	800d418 <__ulp>
 800a586:	4604      	mov	r4, r0
 800a588:	460d      	mov	r5, r1
 800a58a:	f1b8 0f00 	cmp.w	r8, #0
 800a58e:	d011      	beq.n	800a5b4 <sulp+0x3a>
 800a590:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a594:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dd0b      	ble.n	800a5b4 <sulp+0x3a>
 800a59c:	051b      	lsls	r3, r3, #20
 800a59e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5a2:	2400      	movs	r4, #0
 800a5a4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	f7f6 f80c 	bl	80005c8 <__aeabi_dmul>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	0000      	movs	r0, r0
	...

0800a5c0 <_strtod_l>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b0a1      	sub	sp, #132	; 0x84
 800a5c6:	469b      	mov	fp, r3
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	931c      	str	r3, [sp, #112]	; 0x70
 800a5cc:	4ba1      	ldr	r3, [pc, #644]	; (800a854 <_strtod_l+0x294>)
 800a5ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5d0:	681f      	ldr	r7, [r3, #0]
 800a5d2:	4682      	mov	sl, r0
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	f7f5 fddc 	bl	8000194 <strlen>
 800a5dc:	f04f 0800 	mov.w	r8, #0
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	961b      	str	r6, [sp, #108]	; 0x6c
 800a5e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ea:	781a      	ldrb	r2, [r3, #0]
 800a5ec:	2a2b      	cmp	r2, #43	; 0x2b
 800a5ee:	d04c      	beq.n	800a68a <_strtod_l+0xca>
 800a5f0:	d83a      	bhi.n	800a668 <_strtod_l+0xa8>
 800a5f2:	2a0d      	cmp	r2, #13
 800a5f4:	d833      	bhi.n	800a65e <_strtod_l+0x9e>
 800a5f6:	2a08      	cmp	r2, #8
 800a5f8:	d833      	bhi.n	800a662 <_strtod_l+0xa2>
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	d03d      	beq.n	800a67a <_strtod_l+0xba>
 800a5fe:	2300      	movs	r3, #0
 800a600:	930c      	str	r3, [sp, #48]	; 0x30
 800a602:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a604:	782b      	ldrb	r3, [r5, #0]
 800a606:	2b30      	cmp	r3, #48	; 0x30
 800a608:	f040 80af 	bne.w	800a76a <_strtod_l+0x1aa>
 800a60c:	786b      	ldrb	r3, [r5, #1]
 800a60e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a612:	2b58      	cmp	r3, #88	; 0x58
 800a614:	d16c      	bne.n	800a6f0 <_strtod_l+0x130>
 800a616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	ab1c      	add	r3, sp, #112	; 0x70
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	4a8e      	ldr	r2, [pc, #568]	; (800a858 <_strtod_l+0x298>)
 800a620:	f8cd b008 	str.w	fp, [sp, #8]
 800a624:	ab1d      	add	r3, sp, #116	; 0x74
 800a626:	a91b      	add	r1, sp, #108	; 0x6c
 800a628:	4650      	mov	r0, sl
 800a62a:	f002 f803 	bl	800c634 <__gethex>
 800a62e:	f010 0607 	ands.w	r6, r0, #7
 800a632:	4604      	mov	r4, r0
 800a634:	d005      	beq.n	800a642 <_strtod_l+0x82>
 800a636:	2e06      	cmp	r6, #6
 800a638:	d129      	bne.n	800a68e <_strtod_l+0xce>
 800a63a:	3501      	adds	r5, #1
 800a63c:	2300      	movs	r3, #0
 800a63e:	951b      	str	r5, [sp, #108]	; 0x6c
 800a640:	930c      	str	r3, [sp, #48]	; 0x30
 800a642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 8596 	bne.w	800b176 <_strtod_l+0xbb6>
 800a64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a64c:	b1d3      	cbz	r3, 800a684 <_strtod_l+0xc4>
 800a64e:	4642      	mov	r2, r8
 800a650:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	b021      	add	sp, #132	; 0x84
 800a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65e:	2a20      	cmp	r2, #32
 800a660:	d1cd      	bne.n	800a5fe <_strtod_l+0x3e>
 800a662:	3301      	adds	r3, #1
 800a664:	931b      	str	r3, [sp, #108]	; 0x6c
 800a666:	e7bf      	b.n	800a5e8 <_strtod_l+0x28>
 800a668:	2a2d      	cmp	r2, #45	; 0x2d
 800a66a:	d1c8      	bne.n	800a5fe <_strtod_l+0x3e>
 800a66c:	2201      	movs	r2, #1
 800a66e:	920c      	str	r2, [sp, #48]	; 0x30
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	921b      	str	r2, [sp, #108]	; 0x6c
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1c3      	bne.n	800a602 <_strtod_l+0x42>
 800a67a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a67c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f040 8577 	bne.w	800b172 <_strtod_l+0xbb2>
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	e7e4      	b.n	800a654 <_strtod_l+0x94>
 800a68a:	2200      	movs	r2, #0
 800a68c:	e7ef      	b.n	800a66e <_strtod_l+0xae>
 800a68e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a690:	b13a      	cbz	r2, 800a6a2 <_strtod_l+0xe2>
 800a692:	2135      	movs	r1, #53	; 0x35
 800a694:	a81e      	add	r0, sp, #120	; 0x78
 800a696:	f002 ffc3 	bl	800d620 <__copybits>
 800a69a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a69c:	4650      	mov	r0, sl
 800a69e:	f002 fb8f 	bl	800cdc0 <_Bfree>
 800a6a2:	3e01      	subs	r6, #1
 800a6a4:	2e05      	cmp	r6, #5
 800a6a6:	d807      	bhi.n	800a6b8 <_strtod_l+0xf8>
 800a6a8:	e8df f006 	tbb	[pc, r6]
 800a6ac:	1d180b0e 	.word	0x1d180b0e
 800a6b0:	030e      	.short	0x030e
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	46c8      	mov	r8, r9
 800a6b8:	0721      	lsls	r1, r4, #28
 800a6ba:	d5c2      	bpl.n	800a642 <_strtod_l+0x82>
 800a6bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a6c0:	e7bf      	b.n	800a642 <_strtod_l+0x82>
 800a6c2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a6c6:	e7f7      	b.n	800a6b8 <_strtod_l+0xf8>
 800a6c8:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a6cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a6ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a6da:	e7ed      	b.n	800a6b8 <_strtod_l+0xf8>
 800a6dc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a85c <_strtod_l+0x29c>
 800a6e0:	f04f 0800 	mov.w	r8, #0
 800a6e4:	e7e8      	b.n	800a6b8 <_strtod_l+0xf8>
 800a6e6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a6ea:	f04f 38ff 	mov.w	r8, #4294967295
 800a6ee:	e7e3      	b.n	800a6b8 <_strtod_l+0xf8>
 800a6f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d0f9      	beq.n	800a6f0 <_strtod_l+0x130>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0a0      	beq.n	800a642 <_strtod_l+0x82>
 800a700:	2301      	movs	r3, #1
 800a702:	9307      	str	r3, [sp, #28]
 800a704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a706:	9308      	str	r3, [sp, #32]
 800a708:	2300      	movs	r3, #0
 800a70a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a70e:	469b      	mov	fp, r3
 800a710:	220a      	movs	r2, #10
 800a712:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a714:	7805      	ldrb	r5, [r0, #0]
 800a716:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a71a:	b2d9      	uxtb	r1, r3
 800a71c:	2909      	cmp	r1, #9
 800a71e:	d926      	bls.n	800a76e <_strtod_l+0x1ae>
 800a720:	4622      	mov	r2, r4
 800a722:	4639      	mov	r1, r7
 800a724:	f003 facb 	bl	800dcbe <strncmp>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d032      	beq.n	800a792 <_strtod_l+0x1d2>
 800a72c:	2000      	movs	r0, #0
 800a72e:	462b      	mov	r3, r5
 800a730:	465c      	mov	r4, fp
 800a732:	9004      	str	r0, [sp, #16]
 800a734:	4602      	mov	r2, r0
 800a736:	2b65      	cmp	r3, #101	; 0x65
 800a738:	d001      	beq.n	800a73e <_strtod_l+0x17e>
 800a73a:	2b45      	cmp	r3, #69	; 0x45
 800a73c:	d113      	bne.n	800a766 <_strtod_l+0x1a6>
 800a73e:	b91c      	cbnz	r4, 800a748 <_strtod_l+0x188>
 800a740:	9b07      	ldr	r3, [sp, #28]
 800a742:	4303      	orrs	r3, r0
 800a744:	d099      	beq.n	800a67a <_strtod_l+0xba>
 800a746:	2400      	movs	r4, #0
 800a748:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a74a:	1c73      	adds	r3, r6, #1
 800a74c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a74e:	7873      	ldrb	r3, [r6, #1]
 800a750:	2b2b      	cmp	r3, #43	; 0x2b
 800a752:	d078      	beq.n	800a846 <_strtod_l+0x286>
 800a754:	2b2d      	cmp	r3, #45	; 0x2d
 800a756:	d07b      	beq.n	800a850 <_strtod_l+0x290>
 800a758:	2700      	movs	r7, #0
 800a75a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a75e:	2909      	cmp	r1, #9
 800a760:	f240 8082 	bls.w	800a868 <_strtod_l+0x2a8>
 800a764:	961b      	str	r6, [sp, #108]	; 0x6c
 800a766:	2500      	movs	r5, #0
 800a768:	e09e      	b.n	800a8a8 <_strtod_l+0x2e8>
 800a76a:	2300      	movs	r3, #0
 800a76c:	e7c9      	b.n	800a702 <_strtod_l+0x142>
 800a76e:	f1bb 0f08 	cmp.w	fp, #8
 800a772:	bfd5      	itete	le
 800a774:	9906      	ldrle	r1, [sp, #24]
 800a776:	9905      	ldrgt	r1, [sp, #20]
 800a778:	fb02 3301 	mlale	r3, r2, r1, r3
 800a77c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a780:	f100 0001 	add.w	r0, r0, #1
 800a784:	bfd4      	ite	le
 800a786:	9306      	strle	r3, [sp, #24]
 800a788:	9305      	strgt	r3, [sp, #20]
 800a78a:	f10b 0b01 	add.w	fp, fp, #1
 800a78e:	901b      	str	r0, [sp, #108]	; 0x6c
 800a790:	e7bf      	b.n	800a712 <_strtod_l+0x152>
 800a792:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a794:	191a      	adds	r2, r3, r4
 800a796:	921b      	str	r2, [sp, #108]	; 0x6c
 800a798:	5d1b      	ldrb	r3, [r3, r4]
 800a79a:	f1bb 0f00 	cmp.w	fp, #0
 800a79e:	d036      	beq.n	800a80e <_strtod_l+0x24e>
 800a7a0:	9004      	str	r0, [sp, #16]
 800a7a2:	465c      	mov	r4, fp
 800a7a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a7a8:	2a09      	cmp	r2, #9
 800a7aa:	d912      	bls.n	800a7d2 <_strtod_l+0x212>
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	e7c2      	b.n	800a736 <_strtod_l+0x176>
 800a7b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7b6:	785b      	ldrb	r3, [r3, #1]
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	2b30      	cmp	r3, #48	; 0x30
 800a7bc:	d0f8      	beq.n	800a7b0 <_strtod_l+0x1f0>
 800a7be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a7c2:	2a08      	cmp	r2, #8
 800a7c4:	f200 84dc 	bhi.w	800b180 <_strtod_l+0xbc0>
 800a7c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a7ca:	9004      	str	r0, [sp, #16]
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	9208      	str	r2, [sp, #32]
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	3b30      	subs	r3, #48	; 0x30
 800a7d4:	f100 0201 	add.w	r2, r0, #1
 800a7d8:	d013      	beq.n	800a802 <_strtod_l+0x242>
 800a7da:	9904      	ldr	r1, [sp, #16]
 800a7dc:	4411      	add	r1, r2
 800a7de:	9104      	str	r1, [sp, #16]
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	1905      	adds	r5, r0, r4
 800a7e4:	210a      	movs	r1, #10
 800a7e6:	42aa      	cmp	r2, r5
 800a7e8:	d113      	bne.n	800a812 <_strtod_l+0x252>
 800a7ea:	1822      	adds	r2, r4, r0
 800a7ec:	2a08      	cmp	r2, #8
 800a7ee:	f104 0401 	add.w	r4, r4, #1
 800a7f2:	4404      	add	r4, r0
 800a7f4:	dc1b      	bgt.n	800a82e <_strtod_l+0x26e>
 800a7f6:	9906      	ldr	r1, [sp, #24]
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	fb02 3301 	mla	r3, r2, r1, r3
 800a7fe:	9306      	str	r3, [sp, #24]
 800a800:	2200      	movs	r2, #0
 800a802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a804:	1c59      	adds	r1, r3, #1
 800a806:	911b      	str	r1, [sp, #108]	; 0x6c
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	4610      	mov	r0, r2
 800a80c:	e7ca      	b.n	800a7a4 <_strtod_l+0x1e4>
 800a80e:	4658      	mov	r0, fp
 800a810:	e7d3      	b.n	800a7ba <_strtod_l+0x1fa>
 800a812:	2a08      	cmp	r2, #8
 800a814:	dc04      	bgt.n	800a820 <_strtod_l+0x260>
 800a816:	9f06      	ldr	r7, [sp, #24]
 800a818:	434f      	muls	r7, r1
 800a81a:	9706      	str	r7, [sp, #24]
 800a81c:	3201      	adds	r2, #1
 800a81e:	e7e2      	b.n	800a7e6 <_strtod_l+0x226>
 800a820:	1c57      	adds	r7, r2, #1
 800a822:	2f10      	cmp	r7, #16
 800a824:	bfde      	ittt	le
 800a826:	9f05      	ldrle	r7, [sp, #20]
 800a828:	434f      	mulle	r7, r1
 800a82a:	9705      	strle	r7, [sp, #20]
 800a82c:	e7f6      	b.n	800a81c <_strtod_l+0x25c>
 800a82e:	2c10      	cmp	r4, #16
 800a830:	bfdf      	itttt	le
 800a832:	9905      	ldrle	r1, [sp, #20]
 800a834:	220a      	movle	r2, #10
 800a836:	fb02 3301 	mlale	r3, r2, r1, r3
 800a83a:	9305      	strle	r3, [sp, #20]
 800a83c:	e7e0      	b.n	800a800 <_strtod_l+0x240>
 800a83e:	2300      	movs	r3, #0
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	2201      	movs	r2, #1
 800a844:	e77c      	b.n	800a740 <_strtod_l+0x180>
 800a846:	2700      	movs	r7, #0
 800a848:	1cb3      	adds	r3, r6, #2
 800a84a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a84c:	78b3      	ldrb	r3, [r6, #2]
 800a84e:	e784      	b.n	800a75a <_strtod_l+0x19a>
 800a850:	2701      	movs	r7, #1
 800a852:	e7f9      	b.n	800a848 <_strtod_l+0x288>
 800a854:	0800ef0c 	.word	0x0800ef0c
 800a858:	0800ec58 	.word	0x0800ec58
 800a85c:	7ff00000 	.word	0x7ff00000
 800a860:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a862:	1c59      	adds	r1, r3, #1
 800a864:	911b      	str	r1, [sp, #108]	; 0x6c
 800a866:	785b      	ldrb	r3, [r3, #1]
 800a868:	2b30      	cmp	r3, #48	; 0x30
 800a86a:	d0f9      	beq.n	800a860 <_strtod_l+0x2a0>
 800a86c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a870:	2908      	cmp	r1, #8
 800a872:	f63f af78 	bhi.w	800a766 <_strtod_l+0x1a6>
 800a876:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	f04f 0e0a 	mov.w	lr, #10
 800a882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a884:	1c59      	adds	r1, r3, #1
 800a886:	911b      	str	r1, [sp, #108]	; 0x6c
 800a888:	785b      	ldrb	r3, [r3, #1]
 800a88a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a88e:	2d09      	cmp	r5, #9
 800a890:	d935      	bls.n	800a8fe <_strtod_l+0x33e>
 800a892:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a894:	1b49      	subs	r1, r1, r5
 800a896:	2908      	cmp	r1, #8
 800a898:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a89c:	dc02      	bgt.n	800a8a4 <_strtod_l+0x2e4>
 800a89e:	4565      	cmp	r5, ip
 800a8a0:	bfa8      	it	ge
 800a8a2:	4665      	movge	r5, ip
 800a8a4:	b107      	cbz	r7, 800a8a8 <_strtod_l+0x2e8>
 800a8a6:	426d      	negs	r5, r5
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	d14c      	bne.n	800a946 <_strtod_l+0x386>
 800a8ac:	9907      	ldr	r1, [sp, #28]
 800a8ae:	4301      	orrs	r1, r0
 800a8b0:	f47f aec7 	bne.w	800a642 <_strtod_l+0x82>
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	f47f aee0 	bne.w	800a67a <_strtod_l+0xba>
 800a8ba:	2b69      	cmp	r3, #105	; 0x69
 800a8bc:	d026      	beq.n	800a90c <_strtod_l+0x34c>
 800a8be:	dc23      	bgt.n	800a908 <_strtod_l+0x348>
 800a8c0:	2b49      	cmp	r3, #73	; 0x49
 800a8c2:	d023      	beq.n	800a90c <_strtod_l+0x34c>
 800a8c4:	2b4e      	cmp	r3, #78	; 0x4e
 800a8c6:	f47f aed8 	bne.w	800a67a <_strtod_l+0xba>
 800a8ca:	499c      	ldr	r1, [pc, #624]	; (800ab3c <_strtod_l+0x57c>)
 800a8cc:	a81b      	add	r0, sp, #108	; 0x6c
 800a8ce:	f002 f8fd 	bl	800cacc <__match>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f43f aed1 	beq.w	800a67a <_strtod_l+0xba>
 800a8d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b28      	cmp	r3, #40	; 0x28
 800a8de:	d12c      	bne.n	800a93a <_strtod_l+0x37a>
 800a8e0:	4997      	ldr	r1, [pc, #604]	; (800ab40 <_strtod_l+0x580>)
 800a8e2:	aa1e      	add	r2, sp, #120	; 0x78
 800a8e4:	a81b      	add	r0, sp, #108	; 0x6c
 800a8e6:	f002 f905 	bl	800caf4 <__hexnan>
 800a8ea:	2805      	cmp	r0, #5
 800a8ec:	d125      	bne.n	800a93a <_strtod_l+0x37a>
 800a8ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8f0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a8f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a8f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a8fc:	e6a1      	b.n	800a642 <_strtod_l+0x82>
 800a8fe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a902:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a906:	e7bc      	b.n	800a882 <_strtod_l+0x2c2>
 800a908:	2b6e      	cmp	r3, #110	; 0x6e
 800a90a:	e7dc      	b.n	800a8c6 <_strtod_l+0x306>
 800a90c:	498d      	ldr	r1, [pc, #564]	; (800ab44 <_strtod_l+0x584>)
 800a90e:	a81b      	add	r0, sp, #108	; 0x6c
 800a910:	f002 f8dc 	bl	800cacc <__match>
 800a914:	2800      	cmp	r0, #0
 800a916:	f43f aeb0 	beq.w	800a67a <_strtod_l+0xba>
 800a91a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a91c:	498a      	ldr	r1, [pc, #552]	; (800ab48 <_strtod_l+0x588>)
 800a91e:	3b01      	subs	r3, #1
 800a920:	a81b      	add	r0, sp, #108	; 0x6c
 800a922:	931b      	str	r3, [sp, #108]	; 0x6c
 800a924:	f002 f8d2 	bl	800cacc <__match>
 800a928:	b910      	cbnz	r0, 800a930 <_strtod_l+0x370>
 800a92a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a92c:	3301      	adds	r3, #1
 800a92e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a930:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800ab58 <_strtod_l+0x598>
 800a934:	f04f 0800 	mov.w	r8, #0
 800a938:	e683      	b.n	800a642 <_strtod_l+0x82>
 800a93a:	4884      	ldr	r0, [pc, #528]	; (800ab4c <_strtod_l+0x58c>)
 800a93c:	f003 f976 	bl	800dc2c <nan>
 800a940:	4680      	mov	r8, r0
 800a942:	4689      	mov	r9, r1
 800a944:	e67d      	b.n	800a642 <_strtod_l+0x82>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	9806      	ldr	r0, [sp, #24]
 800a94a:	1aeb      	subs	r3, r5, r3
 800a94c:	f1bb 0f00 	cmp.w	fp, #0
 800a950:	bf08      	it	eq
 800a952:	46a3      	moveq	fp, r4
 800a954:	2c10      	cmp	r4, #16
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	4626      	mov	r6, r4
 800a95a:	bfa8      	it	ge
 800a95c:	2610      	movge	r6, #16
 800a95e:	f7f5 fdb9 	bl	80004d4 <__aeabi_ui2d>
 800a962:	2c09      	cmp	r4, #9
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	dd13      	ble.n	800a992 <_strtod_l+0x3d2>
 800a96a:	4b79      	ldr	r3, [pc, #484]	; (800ab50 <_strtod_l+0x590>)
 800a96c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a970:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a974:	f7f5 fe28 	bl	80005c8 <__aeabi_dmul>
 800a978:	4680      	mov	r8, r0
 800a97a:	9805      	ldr	r0, [sp, #20]
 800a97c:	4689      	mov	r9, r1
 800a97e:	f7f5 fda9 	bl	80004d4 <__aeabi_ui2d>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f5 fc67 	bl	800025c <__adddf3>
 800a98e:	4680      	mov	r8, r0
 800a990:	4689      	mov	r9, r1
 800a992:	2c0f      	cmp	r4, #15
 800a994:	dc36      	bgt.n	800aa04 <_strtod_l+0x444>
 800a996:	9b07      	ldr	r3, [sp, #28]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f43f ae52 	beq.w	800a642 <_strtod_l+0x82>
 800a99e:	dd22      	ble.n	800a9e6 <_strtod_l+0x426>
 800a9a0:	2b16      	cmp	r3, #22
 800a9a2:	dc09      	bgt.n	800a9b8 <_strtod_l+0x3f8>
 800a9a4:	4c6a      	ldr	r4, [pc, #424]	; (800ab50 <_strtod_l+0x590>)
 800a9a6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a9aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	f7f5 fe09 	bl	80005c8 <__aeabi_dmul>
 800a9b6:	e7c3      	b.n	800a940 <_strtod_l+0x380>
 800a9b8:	9a07      	ldr	r2, [sp, #28]
 800a9ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	db20      	blt.n	800aa04 <_strtod_l+0x444>
 800a9c2:	4d63      	ldr	r5, [pc, #396]	; (800ab50 <_strtod_l+0x590>)
 800a9c4:	f1c4 040f 	rsb	r4, r4, #15
 800a9c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a9cc:	4642      	mov	r2, r8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d4:	f7f5 fdf8 	bl	80005c8 <__aeabi_dmul>
 800a9d8:	9b07      	ldr	r3, [sp, #28]
 800a9da:	1b1c      	subs	r4, r3, r4
 800a9dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a9e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9e4:	e7e5      	b.n	800a9b2 <_strtod_l+0x3f2>
 800a9e6:	9b07      	ldr	r3, [sp, #28]
 800a9e8:	3316      	adds	r3, #22
 800a9ea:	db0b      	blt.n	800aa04 <_strtod_l+0x444>
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	4a58      	ldr	r2, [pc, #352]	; (800ab50 <_strtod_l+0x590>)
 800a9f0:	1b5d      	subs	r5, r3, r5
 800a9f2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a9f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	f7f5 ff0d 	bl	800081c <__aeabi_ddiv>
 800aa02:	e79d      	b.n	800a940 <_strtod_l+0x380>
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	1ba6      	subs	r6, r4, r6
 800aa08:	441e      	add	r6, r3
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	dd71      	ble.n	800aaf2 <_strtod_l+0x532>
 800aa0e:	f016 030f 	ands.w	r3, r6, #15
 800aa12:	d00a      	beq.n	800aa2a <_strtod_l+0x46a>
 800aa14:	494e      	ldr	r1, [pc, #312]	; (800ab50 <_strtod_l+0x590>)
 800aa16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa1a:	4642      	mov	r2, r8
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa22:	f7f5 fdd1 	bl	80005c8 <__aeabi_dmul>
 800aa26:	4680      	mov	r8, r0
 800aa28:	4689      	mov	r9, r1
 800aa2a:	f036 060f 	bics.w	r6, r6, #15
 800aa2e:	d050      	beq.n	800aad2 <_strtod_l+0x512>
 800aa30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800aa34:	dd27      	ble.n	800aa86 <_strtod_l+0x4c6>
 800aa36:	f04f 0b00 	mov.w	fp, #0
 800aa3a:	f8cd b010 	str.w	fp, [sp, #16]
 800aa3e:	f8cd b020 	str.w	fp, [sp, #32]
 800aa42:	f8cd b018 	str.w	fp, [sp, #24]
 800aa46:	2322      	movs	r3, #34	; 0x22
 800aa48:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ab58 <_strtod_l+0x598>
 800aa4c:	f8ca 3000 	str.w	r3, [sl]
 800aa50:	f04f 0800 	mov.w	r8, #0
 800aa54:	9b08      	ldr	r3, [sp, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f43f adf3 	beq.w	800a642 <_strtod_l+0x82>
 800aa5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa5e:	4650      	mov	r0, sl
 800aa60:	f002 f9ae 	bl	800cdc0 <_Bfree>
 800aa64:	9906      	ldr	r1, [sp, #24]
 800aa66:	4650      	mov	r0, sl
 800aa68:	f002 f9aa 	bl	800cdc0 <_Bfree>
 800aa6c:	9904      	ldr	r1, [sp, #16]
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f002 f9a6 	bl	800cdc0 <_Bfree>
 800aa74:	9908      	ldr	r1, [sp, #32]
 800aa76:	4650      	mov	r0, sl
 800aa78:	f002 f9a2 	bl	800cdc0 <_Bfree>
 800aa7c:	4659      	mov	r1, fp
 800aa7e:	4650      	mov	r0, sl
 800aa80:	f002 f99e 	bl	800cdc0 <_Bfree>
 800aa84:	e5dd      	b.n	800a642 <_strtod_l+0x82>
 800aa86:	2300      	movs	r3, #0
 800aa88:	1136      	asrs	r6, r6, #4
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	461f      	mov	r7, r3
 800aa90:	2e01      	cmp	r6, #1
 800aa92:	dc21      	bgt.n	800aad8 <_strtod_l+0x518>
 800aa94:	b10b      	cbz	r3, 800aa9a <_strtod_l+0x4da>
 800aa96:	4680      	mov	r8, r0
 800aa98:	4689      	mov	r9, r1
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <_strtod_l+0x594>)
 800aa9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aaa0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaac:	f7f5 fd8c 	bl	80005c8 <__aeabi_dmul>
 800aab0:	4b29      	ldr	r3, [pc, #164]	; (800ab58 <_strtod_l+0x598>)
 800aab2:	460a      	mov	r2, r1
 800aab4:	400b      	ands	r3, r1
 800aab6:	4929      	ldr	r1, [pc, #164]	; (800ab5c <_strtod_l+0x59c>)
 800aab8:	428b      	cmp	r3, r1
 800aaba:	4680      	mov	r8, r0
 800aabc:	d8bb      	bhi.n	800aa36 <_strtod_l+0x476>
 800aabe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aac2:	428b      	cmp	r3, r1
 800aac4:	bf86      	itte	hi
 800aac6:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800ab60 <_strtod_l+0x5a0>
 800aaca:	f04f 38ff 	movhi.w	r8, #4294967295
 800aace:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aad2:	2300      	movs	r3, #0
 800aad4:	9305      	str	r3, [sp, #20]
 800aad6:	e07e      	b.n	800abd6 <_strtod_l+0x616>
 800aad8:	07f2      	lsls	r2, r6, #31
 800aada:	d507      	bpl.n	800aaec <_strtod_l+0x52c>
 800aadc:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <_strtod_l+0x594>)
 800aade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f7f5 fd6f 	bl	80005c8 <__aeabi_dmul>
 800aaea:	2301      	movs	r3, #1
 800aaec:	3701      	adds	r7, #1
 800aaee:	1076      	asrs	r6, r6, #1
 800aaf0:	e7ce      	b.n	800aa90 <_strtod_l+0x4d0>
 800aaf2:	d0ee      	beq.n	800aad2 <_strtod_l+0x512>
 800aaf4:	4276      	negs	r6, r6
 800aaf6:	f016 020f 	ands.w	r2, r6, #15
 800aafa:	d00a      	beq.n	800ab12 <_strtod_l+0x552>
 800aafc:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <_strtod_l+0x590>)
 800aafe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f7f5 fe87 	bl	800081c <__aeabi_ddiv>
 800ab0e:	4680      	mov	r8, r0
 800ab10:	4689      	mov	r9, r1
 800ab12:	1136      	asrs	r6, r6, #4
 800ab14:	d0dd      	beq.n	800aad2 <_strtod_l+0x512>
 800ab16:	2e1f      	cmp	r6, #31
 800ab18:	dd24      	ble.n	800ab64 <_strtod_l+0x5a4>
 800ab1a:	f04f 0b00 	mov.w	fp, #0
 800ab1e:	f8cd b010 	str.w	fp, [sp, #16]
 800ab22:	f8cd b020 	str.w	fp, [sp, #32]
 800ab26:	f8cd b018 	str.w	fp, [sp, #24]
 800ab2a:	2322      	movs	r3, #34	; 0x22
 800ab2c:	f04f 0800 	mov.w	r8, #0
 800ab30:	f04f 0900 	mov.w	r9, #0
 800ab34:	f8ca 3000 	str.w	r3, [sl]
 800ab38:	e78c      	b.n	800aa54 <_strtod_l+0x494>
 800ab3a:	bf00      	nop
 800ab3c:	0800e599 	.word	0x0800e599
 800ab40:	0800ec6c 	.word	0x0800ec6c
 800ab44:	0800e591 	.word	0x0800e591
 800ab48:	0800edac 	.word	0x0800edac
 800ab4c:	0800f0c8 	.word	0x0800f0c8
 800ab50:	0800efa8 	.word	0x0800efa8
 800ab54:	0800ef80 	.word	0x0800ef80
 800ab58:	7ff00000 	.word	0x7ff00000
 800ab5c:	7ca00000 	.word	0x7ca00000
 800ab60:	7fefffff 	.word	0x7fefffff
 800ab64:	f016 0310 	ands.w	r3, r6, #16
 800ab68:	bf18      	it	ne
 800ab6a:	236a      	movne	r3, #106	; 0x6a
 800ab6c:	4fb3      	ldr	r7, [pc, #716]	; (800ae3c <_strtod_l+0x87c>)
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	4640      	mov	r0, r8
 800ab72:	4649      	mov	r1, r9
 800ab74:	2300      	movs	r3, #0
 800ab76:	07f2      	lsls	r2, r6, #31
 800ab78:	d504      	bpl.n	800ab84 <_strtod_l+0x5c4>
 800ab7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab7e:	f7f5 fd23 	bl	80005c8 <__aeabi_dmul>
 800ab82:	2301      	movs	r3, #1
 800ab84:	1076      	asrs	r6, r6, #1
 800ab86:	f107 0708 	add.w	r7, r7, #8
 800ab8a:	d1f4      	bne.n	800ab76 <_strtod_l+0x5b6>
 800ab8c:	b10b      	cbz	r3, 800ab92 <_strtod_l+0x5d2>
 800ab8e:	4680      	mov	r8, r0
 800ab90:	4689      	mov	r9, r1
 800ab92:	9b05      	ldr	r3, [sp, #20]
 800ab94:	b1bb      	cbz	r3, 800abc6 <_strtod_l+0x606>
 800ab96:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800ab9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	4649      	mov	r1, r9
 800aba2:	dd10      	ble.n	800abc6 <_strtod_l+0x606>
 800aba4:	2b1f      	cmp	r3, #31
 800aba6:	f340 8128 	ble.w	800adfa <_strtod_l+0x83a>
 800abaa:	2b34      	cmp	r3, #52	; 0x34
 800abac:	bfde      	ittt	le
 800abae:	3b20      	suble	r3, #32
 800abb0:	f04f 32ff 	movle.w	r2, #4294967295
 800abb4:	fa02 f303 	lslle.w	r3, r2, r3
 800abb8:	f04f 0800 	mov.w	r8, #0
 800abbc:	bfcc      	ite	gt
 800abbe:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800abc2:	ea03 0901 	andle.w	r9, r3, r1
 800abc6:	2200      	movs	r2, #0
 800abc8:	2300      	movs	r3, #0
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 ff63 	bl	8000a98 <__aeabi_dcmpeq>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d1a1      	bne.n	800ab1a <_strtod_l+0x55a>
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	9908      	ldr	r1, [sp, #32]
 800abdc:	4623      	mov	r3, r4
 800abde:	465a      	mov	r2, fp
 800abe0:	4650      	mov	r0, sl
 800abe2:	f002 f959 	bl	800ce98 <__s2b>
 800abe6:	9008      	str	r0, [sp, #32]
 800abe8:	2800      	cmp	r0, #0
 800abea:	f43f af24 	beq.w	800aa36 <_strtod_l+0x476>
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	1b5d      	subs	r5, r3, r5
 800abf2:	9b07      	ldr	r3, [sp, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfb4      	ite	lt
 800abf8:	462b      	movlt	r3, r5
 800abfa:	2300      	movge	r3, #0
 800abfc:	930e      	str	r3, [sp, #56]	; 0x38
 800abfe:	9b07      	ldr	r3, [sp, #28]
 800ac00:	f04f 0b00 	mov.w	fp, #0
 800ac04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac08:	9316      	str	r3, [sp, #88]	; 0x58
 800ac0a:	f8cd b010 	str.w	fp, [sp, #16]
 800ac0e:	9b08      	ldr	r3, [sp, #32]
 800ac10:	4650      	mov	r0, sl
 800ac12:	6859      	ldr	r1, [r3, #4]
 800ac14:	f002 f894 	bl	800cd40 <_Balloc>
 800ac18:	9006      	str	r0, [sp, #24]
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f43f af13 	beq.w	800aa46 <_strtod_l+0x486>
 800ac20:	9b08      	ldr	r3, [sp, #32]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	3202      	adds	r2, #2
 800ac26:	f103 010c 	add.w	r1, r3, #12
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	300c      	adds	r0, #12
 800ac2e:	f7fe fc2d 	bl	800948c <memcpy>
 800ac32:	ab1e      	add	r3, sp, #120	; 0x78
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	ab1d      	add	r3, sp, #116	; 0x74
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	4650      	mov	r0, sl
 800ac40:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ac44:	f002 fc62 	bl	800d50c <__d2b>
 800ac48:	901c      	str	r0, [sp, #112]	; 0x70
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	f43f aefb 	beq.w	800aa46 <_strtod_l+0x486>
 800ac50:	2101      	movs	r1, #1
 800ac52:	4650      	mov	r0, sl
 800ac54:	f002 f9b8 	bl	800cfc8 <__i2b>
 800ac58:	9004      	str	r0, [sp, #16]
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f43f aef2 	beq.w	800aa46 <_strtod_l+0x486>
 800ac62:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ac64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	bfab      	itete	ge
 800ac6a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ac6c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ac6e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ac70:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ac72:	bfac      	ite	ge
 800ac74:	18ee      	addge	r6, r5, r3
 800ac76:	1b5c      	sublt	r4, r3, r5
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	1aed      	subs	r5, r5, r3
 800ac7c:	4415      	add	r5, r2
 800ac7e:	4b70      	ldr	r3, [pc, #448]	; (800ae40 <_strtod_l+0x880>)
 800ac80:	3d01      	subs	r5, #1
 800ac82:	429d      	cmp	r5, r3
 800ac84:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac88:	f280 80c9 	bge.w	800ae1e <_strtod_l+0x85e>
 800ac8c:	1b5b      	subs	r3, r3, r5
 800ac8e:	2b1f      	cmp	r3, #31
 800ac90:	eba2 0203 	sub.w	r2, r2, r3
 800ac94:	f04f 0701 	mov.w	r7, #1
 800ac98:	f300 80b6 	bgt.w	800ae08 <_strtod_l+0x848>
 800ac9c:	fa07 f303 	lsl.w	r3, r7, r3
 800aca0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aca2:	2500      	movs	r5, #0
 800aca4:	18b7      	adds	r7, r6, r2
 800aca6:	9b05      	ldr	r3, [sp, #20]
 800aca8:	42be      	cmp	r6, r7
 800acaa:	4414      	add	r4, r2
 800acac:	441c      	add	r4, r3
 800acae:	4633      	mov	r3, r6
 800acb0:	bfa8      	it	ge
 800acb2:	463b      	movge	r3, r7
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	bfa8      	it	ge
 800acb8:	4623      	movge	r3, r4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	bfc2      	ittt	gt
 800acbe:	1aff      	subgt	r7, r7, r3
 800acc0:	1ae4      	subgt	r4, r4, r3
 800acc2:	1af6      	subgt	r6, r6, r3
 800acc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dd17      	ble.n	800acfa <_strtod_l+0x73a>
 800acca:	9904      	ldr	r1, [sp, #16]
 800accc:	461a      	mov	r2, r3
 800acce:	4650      	mov	r0, sl
 800acd0:	f002 fa36 	bl	800d140 <__pow5mult>
 800acd4:	9004      	str	r0, [sp, #16]
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f43f aeb5 	beq.w	800aa46 <_strtod_l+0x486>
 800acdc:	4601      	mov	r1, r0
 800acde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ace0:	4650      	mov	r0, sl
 800ace2:	f002 f987 	bl	800cff4 <__multiply>
 800ace6:	9009      	str	r0, [sp, #36]	; 0x24
 800ace8:	2800      	cmp	r0, #0
 800acea:	f43f aeac 	beq.w	800aa46 <_strtod_l+0x486>
 800acee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acf0:	4650      	mov	r0, sl
 800acf2:	f002 f865 	bl	800cdc0 <_Bfree>
 800acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf8:	931c      	str	r3, [sp, #112]	; 0x70
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	f300 8093 	bgt.w	800ae26 <_strtod_l+0x866>
 800ad00:	9b07      	ldr	r3, [sp, #28]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dd08      	ble.n	800ad18 <_strtod_l+0x758>
 800ad06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad08:	9906      	ldr	r1, [sp, #24]
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	f002 fa18 	bl	800d140 <__pow5mult>
 800ad10:	9006      	str	r0, [sp, #24]
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f43f ae97 	beq.w	800aa46 <_strtod_l+0x486>
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	dd08      	ble.n	800ad2e <_strtod_l+0x76e>
 800ad1c:	9906      	ldr	r1, [sp, #24]
 800ad1e:	4622      	mov	r2, r4
 800ad20:	4650      	mov	r0, sl
 800ad22:	f002 fa67 	bl	800d1f4 <__lshift>
 800ad26:	9006      	str	r0, [sp, #24]
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f43f ae8c 	beq.w	800aa46 <_strtod_l+0x486>
 800ad2e:	2e00      	cmp	r6, #0
 800ad30:	dd08      	ble.n	800ad44 <_strtod_l+0x784>
 800ad32:	9904      	ldr	r1, [sp, #16]
 800ad34:	4632      	mov	r2, r6
 800ad36:	4650      	mov	r0, sl
 800ad38:	f002 fa5c 	bl	800d1f4 <__lshift>
 800ad3c:	9004      	str	r0, [sp, #16]
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f43f ae81 	beq.w	800aa46 <_strtod_l+0x486>
 800ad44:	9a06      	ldr	r2, [sp, #24]
 800ad46:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad48:	4650      	mov	r0, sl
 800ad4a:	f002 fadb 	bl	800d304 <__mdiff>
 800ad4e:	4683      	mov	fp, r0
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f43f ae78 	beq.w	800aa46 <_strtod_l+0x486>
 800ad56:	2400      	movs	r4, #0
 800ad58:	68c3      	ldr	r3, [r0, #12]
 800ad5a:	9904      	ldr	r1, [sp, #16]
 800ad5c:	60c4      	str	r4, [r0, #12]
 800ad5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad60:	f002 fab4 	bl	800d2cc <__mcmp>
 800ad64:	42a0      	cmp	r0, r4
 800ad66:	da71      	bge.n	800ae4c <_strtod_l+0x88c>
 800ad68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad6a:	ea53 0308 	orrs.w	r3, r3, r8
 800ad6e:	f040 8097 	bne.w	800aea0 <_strtod_l+0x8e0>
 800ad72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f040 8092 	bne.w	800aea0 <_strtod_l+0x8e0>
 800ad7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad80:	0d1b      	lsrs	r3, r3, #20
 800ad82:	051b      	lsls	r3, r3, #20
 800ad84:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad88:	f240 808a 	bls.w	800aea0 <_strtod_l+0x8e0>
 800ad8c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ad90:	b923      	cbnz	r3, 800ad9c <_strtod_l+0x7dc>
 800ad92:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	f340 8082 	ble.w	800aea0 <_strtod_l+0x8e0>
 800ad9c:	4659      	mov	r1, fp
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4650      	mov	r0, sl
 800ada2:	f002 fa27 	bl	800d1f4 <__lshift>
 800ada6:	9904      	ldr	r1, [sp, #16]
 800ada8:	4683      	mov	fp, r0
 800adaa:	f002 fa8f 	bl	800d2cc <__mcmp>
 800adae:	2800      	cmp	r0, #0
 800adb0:	dd76      	ble.n	800aea0 <_strtod_l+0x8e0>
 800adb2:	9905      	ldr	r1, [sp, #20]
 800adb4:	4a23      	ldr	r2, [pc, #140]	; (800ae44 <_strtod_l+0x884>)
 800adb6:	464b      	mov	r3, r9
 800adb8:	2900      	cmp	r1, #0
 800adba:	f000 8092 	beq.w	800aee2 <_strtod_l+0x922>
 800adbe:	ea02 0109 	and.w	r1, r2, r9
 800adc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800adc6:	f300 808c 	bgt.w	800aee2 <_strtod_l+0x922>
 800adca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800adce:	f77f aeac 	ble.w	800ab2a <_strtod_l+0x56a>
 800add2:	4a1d      	ldr	r2, [pc, #116]	; (800ae48 <_strtod_l+0x888>)
 800add4:	2300      	movs	r3, #0
 800add6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800adda:	4640      	mov	r0, r8
 800addc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ade0:	4649      	mov	r1, r9
 800ade2:	f7f5 fbf1 	bl	80005c8 <__aeabi_dmul>
 800ade6:	460b      	mov	r3, r1
 800ade8:	4303      	orrs	r3, r0
 800adea:	bf08      	it	eq
 800adec:	2322      	moveq	r3, #34	; 0x22
 800adee:	4680      	mov	r8, r0
 800adf0:	4689      	mov	r9, r1
 800adf2:	bf08      	it	eq
 800adf4:	f8ca 3000 	streq.w	r3, [sl]
 800adf8:	e630      	b.n	800aa5c <_strtod_l+0x49c>
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ae02:	ea03 0808 	and.w	r8, r3, r8
 800ae06:	e6de      	b.n	800abc6 <_strtod_l+0x606>
 800ae08:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ae0c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ae10:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ae14:	35e2      	adds	r5, #226	; 0xe2
 800ae16:	fa07 f505 	lsl.w	r5, r7, r5
 800ae1a:	970f      	str	r7, [sp, #60]	; 0x3c
 800ae1c:	e742      	b.n	800aca4 <_strtod_l+0x6e4>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	2500      	movs	r5, #0
 800ae22:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae24:	e73e      	b.n	800aca4 <_strtod_l+0x6e4>
 800ae26:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae28:	463a      	mov	r2, r7
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f002 f9e2 	bl	800d1f4 <__lshift>
 800ae30:	901c      	str	r0, [sp, #112]	; 0x70
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f47f af64 	bne.w	800ad00 <_strtod_l+0x740>
 800ae38:	e605      	b.n	800aa46 <_strtod_l+0x486>
 800ae3a:	bf00      	nop
 800ae3c:	0800ec80 	.word	0x0800ec80
 800ae40:	fffffc02 	.word	0xfffffc02
 800ae44:	7ff00000 	.word	0x7ff00000
 800ae48:	39500000 	.word	0x39500000
 800ae4c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ae50:	d166      	bne.n	800af20 <_strtod_l+0x960>
 800ae52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae58:	b35a      	cbz	r2, 800aeb2 <_strtod_l+0x8f2>
 800ae5a:	4a9d      	ldr	r2, [pc, #628]	; (800b0d0 <_strtod_l+0xb10>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d12c      	bne.n	800aeba <_strtod_l+0x8fa>
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	4640      	mov	r0, r8
 800ae64:	b303      	cbz	r3, 800aea8 <_strtod_l+0x8e8>
 800ae66:	4a9b      	ldr	r2, [pc, #620]	; (800b0d4 <_strtod_l+0xb14>)
 800ae68:	464b      	mov	r3, r9
 800ae6a:	401a      	ands	r2, r3
 800ae6c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae70:	f04f 31ff 	mov.w	r1, #4294967295
 800ae74:	d81b      	bhi.n	800aeae <_strtod_l+0x8ee>
 800ae76:	0d12      	lsrs	r2, r2, #20
 800ae78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	4298      	cmp	r0, r3
 800ae82:	d11a      	bne.n	800aeba <_strtod_l+0x8fa>
 800ae84:	4b94      	ldr	r3, [pc, #592]	; (800b0d8 <_strtod_l+0xb18>)
 800ae86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d102      	bne.n	800ae92 <_strtod_l+0x8d2>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f43f adda 	beq.w	800aa46 <_strtod_l+0x486>
 800ae92:	4b90      	ldr	r3, [pc, #576]	; (800b0d4 <_strtod_l+0xb14>)
 800ae94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae96:	401a      	ands	r2, r3
 800ae98:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ae9c:	f04f 0800 	mov.w	r8, #0
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d195      	bne.n	800add2 <_strtod_l+0x812>
 800aea6:	e5d9      	b.n	800aa5c <_strtod_l+0x49c>
 800aea8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeac:	e7e8      	b.n	800ae80 <_strtod_l+0x8c0>
 800aeae:	460b      	mov	r3, r1
 800aeb0:	e7e6      	b.n	800ae80 <_strtod_l+0x8c0>
 800aeb2:	ea53 0308 	orrs.w	r3, r3, r8
 800aeb6:	f43f af7c 	beq.w	800adb2 <_strtod_l+0x7f2>
 800aeba:	b1e5      	cbz	r5, 800aef6 <_strtod_l+0x936>
 800aebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aebe:	421d      	tst	r5, r3
 800aec0:	d0ee      	beq.n	800aea0 <_strtod_l+0x8e0>
 800aec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec4:	9a05      	ldr	r2, [sp, #20]
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	b1c3      	cbz	r3, 800aefe <_strtod_l+0x93e>
 800aecc:	f7ff fb55 	bl	800a57a <sulp>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aed8:	f7f5 f9c0 	bl	800025c <__adddf3>
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	e7de      	b.n	800aea0 <_strtod_l+0x8e0>
 800aee2:	4013      	ands	r3, r2
 800aee4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aee8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aeec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aef0:	f04f 38ff 	mov.w	r8, #4294967295
 800aef4:	e7d4      	b.n	800aea0 <_strtod_l+0x8e0>
 800aef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef8:	ea13 0f08 	tst.w	r3, r8
 800aefc:	e7e0      	b.n	800aec0 <_strtod_l+0x900>
 800aefe:	f7ff fb3c 	bl	800a57a <sulp>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af0a:	f7f5 f9a5 	bl	8000258 <__aeabi_dsub>
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	4680      	mov	r8, r0
 800af14:	4689      	mov	r9, r1
 800af16:	f7f5 fdbf 	bl	8000a98 <__aeabi_dcmpeq>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d0c0      	beq.n	800aea0 <_strtod_l+0x8e0>
 800af1e:	e604      	b.n	800ab2a <_strtod_l+0x56a>
 800af20:	9904      	ldr	r1, [sp, #16]
 800af22:	4658      	mov	r0, fp
 800af24:	f002 fb4e 	bl	800d5c4 <__ratio>
 800af28:	2200      	movs	r2, #0
 800af2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af2e:	4606      	mov	r6, r0
 800af30:	460f      	mov	r7, r1
 800af32:	f7f5 fdc5 	bl	8000ac0 <__aeabi_dcmple>
 800af36:	2800      	cmp	r0, #0
 800af38:	d075      	beq.n	800b026 <_strtod_l+0xa66>
 800af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d047      	beq.n	800afd0 <_strtod_l+0xa10>
 800af40:	4f66      	ldr	r7, [pc, #408]	; (800b0dc <_strtod_l+0xb1c>)
 800af42:	2600      	movs	r6, #0
 800af44:	4d65      	ldr	r5, [pc, #404]	; (800b0dc <_strtod_l+0xb1c>)
 800af46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af4c:	0d1b      	lsrs	r3, r3, #20
 800af4e:	051b      	lsls	r3, r3, #20
 800af50:	930f      	str	r3, [sp, #60]	; 0x3c
 800af52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af54:	4b62      	ldr	r3, [pc, #392]	; (800b0e0 <_strtod_l+0xb20>)
 800af56:	429a      	cmp	r2, r3
 800af58:	f040 80ca 	bne.w	800b0f0 <_strtod_l+0xb30>
 800af5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800af64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af66:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f002 fa53 	bl	800d418 <__ulp>
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	4630      	mov	r0, r6
 800af78:	4639      	mov	r1, r7
 800af7a:	f7f5 fb25 	bl	80005c8 <__aeabi_dmul>
 800af7e:	4642      	mov	r2, r8
 800af80:	464b      	mov	r3, r9
 800af82:	f7f5 f96b 	bl	800025c <__adddf3>
 800af86:	460b      	mov	r3, r1
 800af88:	4952      	ldr	r1, [pc, #328]	; (800b0d4 <_strtod_l+0xb14>)
 800af8a:	4a56      	ldr	r2, [pc, #344]	; (800b0e4 <_strtod_l+0xb24>)
 800af8c:	4019      	ands	r1, r3
 800af8e:	4291      	cmp	r1, r2
 800af90:	4680      	mov	r8, r0
 800af92:	d95e      	bls.n	800b052 <_strtod_l+0xa92>
 800af94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af96:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d103      	bne.n	800afa6 <_strtod_l+0x9e6>
 800af9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa0:	3301      	adds	r3, #1
 800afa2:	f43f ad50 	beq.w	800aa46 <_strtod_l+0x486>
 800afa6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800b0d8 <_strtod_l+0xb18>
 800afaa:	f04f 38ff 	mov.w	r8, #4294967295
 800afae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afb0:	4650      	mov	r0, sl
 800afb2:	f001 ff05 	bl	800cdc0 <_Bfree>
 800afb6:	9906      	ldr	r1, [sp, #24]
 800afb8:	4650      	mov	r0, sl
 800afba:	f001 ff01 	bl	800cdc0 <_Bfree>
 800afbe:	9904      	ldr	r1, [sp, #16]
 800afc0:	4650      	mov	r0, sl
 800afc2:	f001 fefd 	bl	800cdc0 <_Bfree>
 800afc6:	4659      	mov	r1, fp
 800afc8:	4650      	mov	r0, sl
 800afca:	f001 fef9 	bl	800cdc0 <_Bfree>
 800afce:	e61e      	b.n	800ac0e <_strtod_l+0x64e>
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	d119      	bne.n	800b00a <_strtod_l+0xa4a>
 800afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afdc:	b9e3      	cbnz	r3, 800b018 <_strtod_l+0xa58>
 800afde:	4b3f      	ldr	r3, [pc, #252]	; (800b0dc <_strtod_l+0xb1c>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	4630      	mov	r0, r6
 800afe4:	4639      	mov	r1, r7
 800afe6:	f7f5 fd61 	bl	8000aac <__aeabi_dcmplt>
 800afea:	b9c8      	cbnz	r0, 800b020 <_strtod_l+0xa60>
 800afec:	4b3e      	ldr	r3, [pc, #248]	; (800b0e8 <_strtod_l+0xb28>)
 800afee:	2200      	movs	r2, #0
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 fae8 	bl	80005c8 <__aeabi_dmul>
 800aff8:	4604      	mov	r4, r0
 800affa:	460d      	mov	r5, r1
 800affc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b000:	9418      	str	r4, [sp, #96]	; 0x60
 800b002:	9319      	str	r3, [sp, #100]	; 0x64
 800b004:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b008:	e79d      	b.n	800af46 <_strtod_l+0x986>
 800b00a:	f1b8 0f01 	cmp.w	r8, #1
 800b00e:	d103      	bne.n	800b018 <_strtod_l+0xa58>
 800b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b012:	2b00      	cmp	r3, #0
 800b014:	f43f ad89 	beq.w	800ab2a <_strtod_l+0x56a>
 800b018:	4f34      	ldr	r7, [pc, #208]	; (800b0ec <_strtod_l+0xb2c>)
 800b01a:	2600      	movs	r6, #0
 800b01c:	2400      	movs	r4, #0
 800b01e:	e791      	b.n	800af44 <_strtod_l+0x984>
 800b020:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b022:	4d31      	ldr	r5, [pc, #196]	; (800b0e8 <_strtod_l+0xb28>)
 800b024:	e7ea      	b.n	800affc <_strtod_l+0xa3c>
 800b026:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <_strtod_l+0xb28>)
 800b028:	2200      	movs	r2, #0
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 facb 	bl	80005c8 <__aeabi_dmul>
 800b032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	b933      	cbnz	r3, 800b048 <_strtod_l+0xa88>
 800b03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b03e:	9010      	str	r0, [sp, #64]	; 0x40
 800b040:	9311      	str	r3, [sp, #68]	; 0x44
 800b042:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b046:	e77e      	b.n	800af46 <_strtod_l+0x986>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b050:	e7f7      	b.n	800b042 <_strtod_l+0xa82>
 800b052:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b056:	9b05      	ldr	r3, [sp, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1a8      	bne.n	800afae <_strtod_l+0x9ee>
 800b05c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b062:	0d1b      	lsrs	r3, r3, #20
 800b064:	051b      	lsls	r3, r3, #20
 800b066:	429a      	cmp	r2, r3
 800b068:	d1a1      	bne.n	800afae <_strtod_l+0x9ee>
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	f7f5 ff19 	bl	8000ea4 <__aeabi_d2lz>
 800b072:	f7f5 fa7b 	bl	800056c <__aeabi_l2d>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4620      	mov	r0, r4
 800b07c:	4629      	mov	r1, r5
 800b07e:	f7f5 f8eb 	bl	8000258 <__aeabi_dsub>
 800b082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b088:	ea43 0308 	orr.w	r3, r3, r8
 800b08c:	4313      	orrs	r3, r2
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	d068      	beq.n	800b166 <_strtod_l+0xba6>
 800b094:	a30a      	add	r3, pc, #40	; (adr r3, 800b0c0 <_strtod_l+0xb00>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	f7f5 fd07 	bl	8000aac <__aeabi_dcmplt>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f47f acdc 	bne.w	800aa5c <_strtod_l+0x49c>
 800b0a4:	a308      	add	r3, pc, #32	; (adr r3, 800b0c8 <_strtod_l+0xb08>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	f7f5 fd1b 	bl	8000ae8 <__aeabi_dcmpgt>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	f43f af7b 	beq.w	800afae <_strtod_l+0x9ee>
 800b0b8:	e4d0      	b.n	800aa5c <_strtod_l+0x49c>
 800b0ba:	bf00      	nop
 800b0bc:	f3af 8000 	nop.w
 800b0c0:	94a03595 	.word	0x94a03595
 800b0c4:	3fdfffff 	.word	0x3fdfffff
 800b0c8:	35afe535 	.word	0x35afe535
 800b0cc:	3fe00000 	.word	0x3fe00000
 800b0d0:	000fffff 	.word	0x000fffff
 800b0d4:	7ff00000 	.word	0x7ff00000
 800b0d8:	7fefffff 	.word	0x7fefffff
 800b0dc:	3ff00000 	.word	0x3ff00000
 800b0e0:	7fe00000 	.word	0x7fe00000
 800b0e4:	7c9fffff 	.word	0x7c9fffff
 800b0e8:	3fe00000 	.word	0x3fe00000
 800b0ec:	bff00000 	.word	0xbff00000
 800b0f0:	9b05      	ldr	r3, [sp, #20]
 800b0f2:	b313      	cbz	r3, 800b13a <_strtod_l+0xb7a>
 800b0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0fa:	d81e      	bhi.n	800b13a <_strtod_l+0xb7a>
 800b0fc:	a326      	add	r3, pc, #152	; (adr r3, 800b198 <_strtod_l+0xbd8>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 fcdb 	bl	8000ac0 <__aeabi_dcmple>
 800b10a:	b190      	cbz	r0, 800b132 <_strtod_l+0xb72>
 800b10c:	4629      	mov	r1, r5
 800b10e:	4620      	mov	r0, r4
 800b110:	f7f5 fd32 	bl	8000b78 <__aeabi_d2uiz>
 800b114:	2801      	cmp	r0, #1
 800b116:	bf38      	it	cc
 800b118:	2001      	movcc	r0, #1
 800b11a:	f7f5 f9db 	bl	80004d4 <__aeabi_ui2d>
 800b11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b120:	4604      	mov	r4, r0
 800b122:	460d      	mov	r5, r1
 800b124:	b9d3      	cbnz	r3, 800b15c <_strtod_l+0xb9c>
 800b126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b12a:	9012      	str	r0, [sp, #72]	; 0x48
 800b12c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b12e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b134:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b138:	1a9f      	subs	r7, r3, r2
 800b13a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b13e:	f002 f96b 	bl	800d418 <__ulp>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 fa3d 	bl	80005c8 <__aeabi_dmul>
 800b14e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b152:	f7f5 f883 	bl	800025c <__adddf3>
 800b156:	4680      	mov	r8, r0
 800b158:	4689      	mov	r9, r1
 800b15a:	e77c      	b.n	800b056 <_strtod_l+0xa96>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b164:	e7e3      	b.n	800b12e <_strtod_l+0xb6e>
 800b166:	a30e      	add	r3, pc, #56	; (adr r3, 800b1a0 <_strtod_l+0xbe0>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f7f5 fc9e 	bl	8000aac <__aeabi_dcmplt>
 800b170:	e79f      	b.n	800b0b2 <_strtod_l+0xaf2>
 800b172:	2300      	movs	r3, #0
 800b174:	930c      	str	r3, [sp, #48]	; 0x30
 800b176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b178:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	f7ff ba65 	b.w	800a64a <_strtod_l+0x8a>
 800b180:	2b65      	cmp	r3, #101	; 0x65
 800b182:	f43f ab5c 	beq.w	800a83e <_strtod_l+0x27e>
 800b186:	2b45      	cmp	r3, #69	; 0x45
 800b188:	f43f ab59 	beq.w	800a83e <_strtod_l+0x27e>
 800b18c:	2201      	movs	r2, #1
 800b18e:	f7ff bb8d 	b.w	800a8ac <_strtod_l+0x2ec>
 800b192:	bf00      	nop
 800b194:	f3af 8000 	nop.w
 800b198:	ffc00000 	.word	0xffc00000
 800b19c:	41dfffff 	.word	0x41dfffff
 800b1a0:	94a03595 	.word	0x94a03595
 800b1a4:	3fcfffff 	.word	0x3fcfffff

0800b1a8 <strtod>:
 800b1a8:	460a      	mov	r2, r1
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4802      	ldr	r0, [pc, #8]	; (800b1b8 <strtod+0x10>)
 800b1ae:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <strtod+0x14>)
 800b1b0:	6800      	ldr	r0, [r0, #0]
 800b1b2:	f7ff ba05 	b.w	800a5c0 <_strtod_l>
 800b1b6:	bf00      	nop
 800b1b8:	2000000c 	.word	0x2000000c
 800b1bc:	20000074 	.word	0x20000074

0800b1c0 <_strtol_l.isra.0>:
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c6:	4686      	mov	lr, r0
 800b1c8:	d001      	beq.n	800b1ce <_strtol_l.isra.0+0xe>
 800b1ca:	2b24      	cmp	r3, #36	; 0x24
 800b1cc:	d906      	bls.n	800b1dc <_strtol_l.isra.0+0x1c>
 800b1ce:	f7fe f923 	bl	8009418 <__errno>
 800b1d2:	2316      	movs	r3, #22
 800b1d4:	6003      	str	r3, [r0, #0]
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1dc:	4e3a      	ldr	r6, [pc, #232]	; (800b2c8 <_strtol_l.isra.0+0x108>)
 800b1de:	468c      	mov	ip, r1
 800b1e0:	4660      	mov	r0, ip
 800b1e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b1e6:	5da5      	ldrb	r5, [r4, r6]
 800b1e8:	f015 0508 	ands.w	r5, r5, #8
 800b1ec:	d1f8      	bne.n	800b1e0 <_strtol_l.isra.0+0x20>
 800b1ee:	2c2d      	cmp	r4, #45	; 0x2d
 800b1f0:	d133      	bne.n	800b25a <_strtol_l.isra.0+0x9a>
 800b1f2:	f89c 4000 	ldrb.w	r4, [ip]
 800b1f6:	f04f 0801 	mov.w	r8, #1
 800b1fa:	f100 0c02 	add.w	ip, r0, #2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d05d      	beq.n	800b2be <_strtol_l.isra.0+0xfe>
 800b202:	2b10      	cmp	r3, #16
 800b204:	d10c      	bne.n	800b220 <_strtol_l.isra.0+0x60>
 800b206:	2c30      	cmp	r4, #48	; 0x30
 800b208:	d10a      	bne.n	800b220 <_strtol_l.isra.0+0x60>
 800b20a:	f89c 0000 	ldrb.w	r0, [ip]
 800b20e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b212:	2858      	cmp	r0, #88	; 0x58
 800b214:	d14e      	bne.n	800b2b4 <_strtol_l.isra.0+0xf4>
 800b216:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b21a:	2310      	movs	r3, #16
 800b21c:	f10c 0c02 	add.w	ip, ip, #2
 800b220:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b224:	3f01      	subs	r7, #1
 800b226:	2500      	movs	r5, #0
 800b228:	fbb7 f9f3 	udiv	r9, r7, r3
 800b22c:	4628      	mov	r0, r5
 800b22e:	fb03 7a19 	mls	sl, r3, r9, r7
 800b232:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b236:	2e09      	cmp	r6, #9
 800b238:	d818      	bhi.n	800b26c <_strtol_l.isra.0+0xac>
 800b23a:	4634      	mov	r4, r6
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	dd24      	ble.n	800b28a <_strtol_l.isra.0+0xca>
 800b240:	2d00      	cmp	r5, #0
 800b242:	db1f      	blt.n	800b284 <_strtol_l.isra.0+0xc4>
 800b244:	4581      	cmp	r9, r0
 800b246:	d31d      	bcc.n	800b284 <_strtol_l.isra.0+0xc4>
 800b248:	d101      	bne.n	800b24e <_strtol_l.isra.0+0x8e>
 800b24a:	45a2      	cmp	sl, r4
 800b24c:	db1a      	blt.n	800b284 <_strtol_l.isra.0+0xc4>
 800b24e:	fb00 4003 	mla	r0, r0, r3, r4
 800b252:	2501      	movs	r5, #1
 800b254:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b258:	e7eb      	b.n	800b232 <_strtol_l.isra.0+0x72>
 800b25a:	2c2b      	cmp	r4, #43	; 0x2b
 800b25c:	bf08      	it	eq
 800b25e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b262:	46a8      	mov	r8, r5
 800b264:	bf08      	it	eq
 800b266:	f100 0c02 	addeq.w	ip, r0, #2
 800b26a:	e7c8      	b.n	800b1fe <_strtol_l.isra.0+0x3e>
 800b26c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b270:	2e19      	cmp	r6, #25
 800b272:	d801      	bhi.n	800b278 <_strtol_l.isra.0+0xb8>
 800b274:	3c37      	subs	r4, #55	; 0x37
 800b276:	e7e1      	b.n	800b23c <_strtol_l.isra.0+0x7c>
 800b278:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b27c:	2e19      	cmp	r6, #25
 800b27e:	d804      	bhi.n	800b28a <_strtol_l.isra.0+0xca>
 800b280:	3c57      	subs	r4, #87	; 0x57
 800b282:	e7db      	b.n	800b23c <_strtol_l.isra.0+0x7c>
 800b284:	f04f 35ff 	mov.w	r5, #4294967295
 800b288:	e7e4      	b.n	800b254 <_strtol_l.isra.0+0x94>
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	da08      	bge.n	800b2a0 <_strtol_l.isra.0+0xe0>
 800b28e:	2322      	movs	r3, #34	; 0x22
 800b290:	f8ce 3000 	str.w	r3, [lr]
 800b294:	4638      	mov	r0, r7
 800b296:	2a00      	cmp	r2, #0
 800b298:	d09e      	beq.n	800b1d8 <_strtol_l.isra.0+0x18>
 800b29a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b29e:	e007      	b.n	800b2b0 <_strtol_l.isra.0+0xf0>
 800b2a0:	f1b8 0f00 	cmp.w	r8, #0
 800b2a4:	d000      	beq.n	800b2a8 <_strtol_l.isra.0+0xe8>
 800b2a6:	4240      	negs	r0, r0
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	d095      	beq.n	800b1d8 <_strtol_l.isra.0+0x18>
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	d1f4      	bne.n	800b29a <_strtol_l.isra.0+0xda>
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	e791      	b.n	800b1d8 <_strtol_l.isra.0+0x18>
 800b2b4:	2430      	movs	r4, #48	; 0x30
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1b2      	bne.n	800b220 <_strtol_l.isra.0+0x60>
 800b2ba:	2308      	movs	r3, #8
 800b2bc:	e7b0      	b.n	800b220 <_strtol_l.isra.0+0x60>
 800b2be:	2c30      	cmp	r4, #48	; 0x30
 800b2c0:	d0a3      	beq.n	800b20a <_strtol_l.isra.0+0x4a>
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	e7ac      	b.n	800b220 <_strtol_l.isra.0+0x60>
 800b2c6:	bf00      	nop
 800b2c8:	0800eca9 	.word	0x0800eca9

0800b2cc <strtol>:
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	4802      	ldr	r0, [pc, #8]	; (800b2dc <strtol+0x10>)
 800b2d4:	6800      	ldr	r0, [r0, #0]
 800b2d6:	f7ff bf73 	b.w	800b1c0 <_strtol_l.isra.0>
 800b2da:	bf00      	nop
 800b2dc:	2000000c 	.word	0x2000000c

0800b2e0 <_user_strerror>:
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	4770      	bx	lr

0800b2e4 <__swbuf_r>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b118      	cbz	r0, 800b2f6 <__swbuf_r+0x12>
 800b2ee:	6983      	ldr	r3, [r0, #24]
 800b2f0:	b90b      	cbnz	r3, 800b2f6 <__swbuf_r+0x12>
 800b2f2:	f001 f89b 	bl	800c42c <__sinit>
 800b2f6:	4b21      	ldr	r3, [pc, #132]	; (800b37c <__swbuf_r+0x98>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d12b      	bne.n	800b354 <__swbuf_r+0x70>
 800b2fc:	686c      	ldr	r4, [r5, #4]
 800b2fe:	69a3      	ldr	r3, [r4, #24]
 800b300:	60a3      	str	r3, [r4, #8]
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	071a      	lsls	r2, r3, #28
 800b306:	d52f      	bpl.n	800b368 <__swbuf_r+0x84>
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	b36b      	cbz	r3, 800b368 <__swbuf_r+0x84>
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	6820      	ldr	r0, [r4, #0]
 800b310:	1ac0      	subs	r0, r0, r3
 800b312:	6963      	ldr	r3, [r4, #20]
 800b314:	b2f6      	uxtb	r6, r6
 800b316:	4283      	cmp	r3, r0
 800b318:	4637      	mov	r7, r6
 800b31a:	dc04      	bgt.n	800b326 <__swbuf_r+0x42>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f000 ffb2 	bl	800c288 <_fflush_r>
 800b324:	bb30      	cbnz	r0, 800b374 <__swbuf_r+0x90>
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	3b01      	subs	r3, #1
 800b32a:	60a3      	str	r3, [r4, #8]
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	6022      	str	r2, [r4, #0]
 800b332:	701e      	strb	r6, [r3, #0]
 800b334:	6963      	ldr	r3, [r4, #20]
 800b336:	3001      	adds	r0, #1
 800b338:	4283      	cmp	r3, r0
 800b33a:	d004      	beq.n	800b346 <__swbuf_r+0x62>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	07db      	lsls	r3, r3, #31
 800b340:	d506      	bpl.n	800b350 <__swbuf_r+0x6c>
 800b342:	2e0a      	cmp	r6, #10
 800b344:	d104      	bne.n	800b350 <__swbuf_r+0x6c>
 800b346:	4621      	mov	r1, r4
 800b348:	4628      	mov	r0, r5
 800b34a:	f000 ff9d 	bl	800c288 <_fflush_r>
 800b34e:	b988      	cbnz	r0, 800b374 <__swbuf_r+0x90>
 800b350:	4638      	mov	r0, r7
 800b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b354:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <__swbuf_r+0x9c>)
 800b356:	429c      	cmp	r4, r3
 800b358:	d101      	bne.n	800b35e <__swbuf_r+0x7a>
 800b35a:	68ac      	ldr	r4, [r5, #8]
 800b35c:	e7cf      	b.n	800b2fe <__swbuf_r+0x1a>
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <__swbuf_r+0xa0>)
 800b360:	429c      	cmp	r4, r3
 800b362:	bf08      	it	eq
 800b364:	68ec      	ldreq	r4, [r5, #12]
 800b366:	e7ca      	b.n	800b2fe <__swbuf_r+0x1a>
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 f81e 	bl	800b3ac <__swsetup_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	d0cb      	beq.n	800b30c <__swbuf_r+0x28>
 800b374:	f04f 37ff 	mov.w	r7, #4294967295
 800b378:	e7ea      	b.n	800b350 <__swbuf_r+0x6c>
 800b37a:	bf00      	nop
 800b37c:	0800ee60 	.word	0x0800ee60
 800b380:	0800ee80 	.word	0x0800ee80
 800b384:	0800ee40 	.word	0x0800ee40

0800b388 <_write_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d07      	ldr	r5, [pc, #28]	; (800b3a8 <_write_r+0x20>)
 800b38c:	4604      	mov	r4, r0
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	2200      	movs	r2, #0
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f6 fca8 	bl	8001cec <_write>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_write_r+0x1e>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_write_r+0x1e>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20000604 	.word	0x20000604

0800b3ac <__swsetup_r>:
 800b3ac:	4b32      	ldr	r3, [pc, #200]	; (800b478 <__swsetup_r+0xcc>)
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	681d      	ldr	r5, [r3, #0]
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	b125      	cbz	r5, 800b3c2 <__swsetup_r+0x16>
 800b3b8:	69ab      	ldr	r3, [r5, #24]
 800b3ba:	b913      	cbnz	r3, 800b3c2 <__swsetup_r+0x16>
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f001 f835 	bl	800c42c <__sinit>
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <__swsetup_r+0xd0>)
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	d10f      	bne.n	800b3e8 <__swsetup_r+0x3c>
 800b3c8:	686c      	ldr	r4, [r5, #4]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d0:	0719      	lsls	r1, r3, #28
 800b3d2:	d42c      	bmi.n	800b42e <__swsetup_r+0x82>
 800b3d4:	06dd      	lsls	r5, r3, #27
 800b3d6:	d411      	bmi.n	800b3fc <__swsetup_r+0x50>
 800b3d8:	2309      	movs	r3, #9
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	e03e      	b.n	800b466 <__swsetup_r+0xba>
 800b3e8:	4b25      	ldr	r3, [pc, #148]	; (800b480 <__swsetup_r+0xd4>)
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d101      	bne.n	800b3f2 <__swsetup_r+0x46>
 800b3ee:	68ac      	ldr	r4, [r5, #8]
 800b3f0:	e7eb      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3f2:	4b24      	ldr	r3, [pc, #144]	; (800b484 <__swsetup_r+0xd8>)
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	bf08      	it	eq
 800b3f8:	68ec      	ldreq	r4, [r5, #12]
 800b3fa:	e7e6      	b.n	800b3ca <__swsetup_r+0x1e>
 800b3fc:	0758      	lsls	r0, r3, #29
 800b3fe:	d512      	bpl.n	800b426 <__swsetup_r+0x7a>
 800b400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b402:	b141      	cbz	r1, 800b416 <__swsetup_r+0x6a>
 800b404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b408:	4299      	cmp	r1, r3
 800b40a:	d002      	beq.n	800b412 <__swsetup_r+0x66>
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fe f853 	bl	80094b8 <_free_r>
 800b412:	2300      	movs	r3, #0
 800b414:	6363      	str	r3, [r4, #52]	; 0x34
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	2300      	movs	r3, #0
 800b420:	6063      	str	r3, [r4, #4]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	f043 0308 	orr.w	r3, r3, #8
 800b42c:	81a3      	strh	r3, [r4, #12]
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	b94b      	cbnz	r3, 800b446 <__swsetup_r+0x9a>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b43c:	d003      	beq.n	800b446 <__swsetup_r+0x9a>
 800b43e:	4621      	mov	r1, r4
 800b440:	4630      	mov	r0, r6
 800b442:	f001 fc1f 	bl	800cc84 <__smakebuf_r>
 800b446:	89a0      	ldrh	r0, [r4, #12]
 800b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44c:	f010 0301 	ands.w	r3, r0, #1
 800b450:	d00a      	beq.n	800b468 <__swsetup_r+0xbc>
 800b452:	2300      	movs	r3, #0
 800b454:	60a3      	str	r3, [r4, #8]
 800b456:	6963      	ldr	r3, [r4, #20]
 800b458:	425b      	negs	r3, r3
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	b943      	cbnz	r3, 800b472 <__swsetup_r+0xc6>
 800b460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b464:	d1ba      	bne.n	800b3dc <__swsetup_r+0x30>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	0781      	lsls	r1, r0, #30
 800b46a:	bf58      	it	pl
 800b46c:	6963      	ldrpl	r3, [r4, #20]
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	e7f4      	b.n	800b45c <__swsetup_r+0xb0>
 800b472:	2000      	movs	r0, #0
 800b474:	e7f7      	b.n	800b466 <__swsetup_r+0xba>
 800b476:	bf00      	nop
 800b478:	2000000c 	.word	0x2000000c
 800b47c:	0800ee60 	.word	0x0800ee60
 800b480:	0800ee80 	.word	0x0800ee80
 800b484:	0800ee40 	.word	0x0800ee40

0800b488 <quorem>:
 800b488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	6903      	ldr	r3, [r0, #16]
 800b48e:	690c      	ldr	r4, [r1, #16]
 800b490:	42a3      	cmp	r3, r4
 800b492:	4607      	mov	r7, r0
 800b494:	f2c0 8081 	blt.w	800b59a <quorem+0x112>
 800b498:	3c01      	subs	r4, #1
 800b49a:	f101 0814 	add.w	r8, r1, #20
 800b49e:	f100 0514 	add.w	r5, r0, #20
 800b4a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4c0:	d331      	bcc.n	800b526 <quorem+0x9e>
 800b4c2:	f04f 0e00 	mov.w	lr, #0
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	46ac      	mov	ip, r5
 800b4ca:	46f2      	mov	sl, lr
 800b4cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4d0:	b293      	uxth	r3, r2
 800b4d2:	fb06 e303 	mla	r3, r6, r3, lr
 800b4d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b4e0:	0c12      	lsrs	r2, r2, #16
 800b4e2:	f8dc a000 	ldr.w	sl, [ip]
 800b4e6:	fb06 e202 	mla	r2, r6, r2, lr
 800b4ea:	fa13 f38a 	uxtah	r3, r3, sl
 800b4ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4f2:	fa1f fa82 	uxth.w	sl, r2
 800b4f6:	f8dc 2000 	ldr.w	r2, [ip]
 800b4fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b508:	4581      	cmp	r9, r0
 800b50a:	f84c 3b04 	str.w	r3, [ip], #4
 800b50e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b512:	d2db      	bcs.n	800b4cc <quorem+0x44>
 800b514:	f855 300b 	ldr.w	r3, [r5, fp]
 800b518:	b92b      	cbnz	r3, 800b526 <quorem+0x9e>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	3b04      	subs	r3, #4
 800b51e:	429d      	cmp	r5, r3
 800b520:	461a      	mov	r2, r3
 800b522:	d32e      	bcc.n	800b582 <quorem+0xfa>
 800b524:	613c      	str	r4, [r7, #16]
 800b526:	4638      	mov	r0, r7
 800b528:	f001 fed0 	bl	800d2cc <__mcmp>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	db24      	blt.n	800b57a <quorem+0xf2>
 800b530:	3601      	adds	r6, #1
 800b532:	4628      	mov	r0, r5
 800b534:	f04f 0c00 	mov.w	ip, #0
 800b538:	f858 2b04 	ldr.w	r2, [r8], #4
 800b53c:	f8d0 e000 	ldr.w	lr, [r0]
 800b540:	b293      	uxth	r3, r2
 800b542:	ebac 0303 	sub.w	r3, ip, r3
 800b546:	0c12      	lsrs	r2, r2, #16
 800b548:	fa13 f38e 	uxtah	r3, r3, lr
 800b54c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b55a:	45c1      	cmp	r9, r8
 800b55c:	f840 3b04 	str.w	r3, [r0], #4
 800b560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b564:	d2e8      	bcs.n	800b538 <quorem+0xb0>
 800b566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b56a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b56e:	b922      	cbnz	r2, 800b57a <quorem+0xf2>
 800b570:	3b04      	subs	r3, #4
 800b572:	429d      	cmp	r5, r3
 800b574:	461a      	mov	r2, r3
 800b576:	d30a      	bcc.n	800b58e <quorem+0x106>
 800b578:	613c      	str	r4, [r7, #16]
 800b57a:	4630      	mov	r0, r6
 800b57c:	b003      	add	sp, #12
 800b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	3b04      	subs	r3, #4
 800b586:	2a00      	cmp	r2, #0
 800b588:	d1cc      	bne.n	800b524 <quorem+0x9c>
 800b58a:	3c01      	subs	r4, #1
 800b58c:	e7c7      	b.n	800b51e <quorem+0x96>
 800b58e:	6812      	ldr	r2, [r2, #0]
 800b590:	3b04      	subs	r3, #4
 800b592:	2a00      	cmp	r2, #0
 800b594:	d1f0      	bne.n	800b578 <quorem+0xf0>
 800b596:	3c01      	subs	r4, #1
 800b598:	e7eb      	b.n	800b572 <quorem+0xea>
 800b59a:	2000      	movs	r0, #0
 800b59c:	e7ee      	b.n	800b57c <quorem+0xf4>
	...

0800b5a0 <_dtoa_r>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5a6:	b099      	sub	sp, #100	; 0x64
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	461f      	mov	r7, r3
 800b5ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	b974      	cbnz	r4, 800b5d6 <_dtoa_r+0x36>
 800b5b8:	2010      	movs	r0, #16
 800b5ba:	f7fd ff57 	bl	800946c <malloc>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c2:	b920      	cbnz	r0, 800b5ce <_dtoa_r+0x2e>
 800b5c4:	4ba8      	ldr	r3, [pc, #672]	; (800b868 <_dtoa_r+0x2c8>)
 800b5c6:	21ea      	movs	r1, #234	; 0xea
 800b5c8:	48a8      	ldr	r0, [pc, #672]	; (800b86c <_dtoa_r+0x2cc>)
 800b5ca:	f002 fb97 	bl	800dcfc <__assert_func>
 800b5ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5d2:	6004      	str	r4, [r0, #0]
 800b5d4:	60c4      	str	r4, [r0, #12]
 800b5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5d8:	6819      	ldr	r1, [r3, #0]
 800b5da:	b151      	cbz	r1, 800b5f2 <_dtoa_r+0x52>
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	604a      	str	r2, [r1, #4]
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4093      	lsls	r3, r2
 800b5e4:	608b      	str	r3, [r1, #8]
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f001 fbea 	bl	800cdc0 <_Bfree>
 800b5ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	1e3b      	subs	r3, r7, #0
 800b5f4:	bfb9      	ittee	lt
 800b5f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5fa:	9305      	strlt	r3, [sp, #20]
 800b5fc:	2300      	movge	r3, #0
 800b5fe:	f8c8 3000 	strge.w	r3, [r8]
 800b602:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b606:	4b9a      	ldr	r3, [pc, #616]	; (800b870 <_dtoa_r+0x2d0>)
 800b608:	bfbc      	itt	lt
 800b60a:	2201      	movlt	r2, #1
 800b60c:	f8c8 2000 	strlt.w	r2, [r8]
 800b610:	ea33 0309 	bics.w	r3, r3, r9
 800b614:	d119      	bne.n	800b64a <_dtoa_r+0xaa>
 800b616:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b618:	f242 730f 	movw	r3, #9999	; 0x270f
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b622:	4333      	orrs	r3, r6
 800b624:	f000 8581 	beq.w	800c12a <_dtoa_r+0xb8a>
 800b628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b62a:	b953      	cbnz	r3, 800b642 <_dtoa_r+0xa2>
 800b62c:	4b91      	ldr	r3, [pc, #580]	; (800b874 <_dtoa_r+0x2d4>)
 800b62e:	e022      	b.n	800b676 <_dtoa_r+0xd6>
 800b630:	4b91      	ldr	r3, [pc, #580]	; (800b878 <_dtoa_r+0x2d8>)
 800b632:	9308      	str	r3, [sp, #32]
 800b634:	3308      	adds	r3, #8
 800b636:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	9808      	ldr	r0, [sp, #32]
 800b63c:	b019      	add	sp, #100	; 0x64
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b642:	4b8c      	ldr	r3, [pc, #560]	; (800b874 <_dtoa_r+0x2d4>)
 800b644:	9308      	str	r3, [sp, #32]
 800b646:	3303      	adds	r3, #3
 800b648:	e7f5      	b.n	800b636 <_dtoa_r+0x96>
 800b64a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b64e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b656:	2200      	movs	r2, #0
 800b658:	2300      	movs	r3, #0
 800b65a:	f7f5 fa1d 	bl	8000a98 <__aeabi_dcmpeq>
 800b65e:	4680      	mov	r8, r0
 800b660:	b158      	cbz	r0, 800b67a <_dtoa_r+0xda>
 800b662:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b664:	2301      	movs	r3, #1
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 855a 	beq.w	800c124 <_dtoa_r+0xb84>
 800b670:	4882      	ldr	r0, [pc, #520]	; (800b87c <_dtoa_r+0x2dc>)
 800b672:	6018      	str	r0, [r3, #0]
 800b674:	1e43      	subs	r3, r0, #1
 800b676:	9308      	str	r3, [sp, #32]
 800b678:	e7df      	b.n	800b63a <_dtoa_r+0x9a>
 800b67a:	ab16      	add	r3, sp, #88	; 0x58
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	ab17      	add	r3, sp, #92	; 0x5c
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	4628      	mov	r0, r5
 800b684:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b688:	f001 ff40 	bl	800d50c <__d2b>
 800b68c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b690:	4682      	mov	sl, r0
 800b692:	2c00      	cmp	r4, #0
 800b694:	d07e      	beq.n	800b794 <_dtoa_r+0x1f4>
 800b696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b698:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b6a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b6ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b6b0:	4b73      	ldr	r3, [pc, #460]	; (800b880 <_dtoa_r+0x2e0>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f7f4 fdd0 	bl	8000258 <__aeabi_dsub>
 800b6b8:	a365      	add	r3, pc, #404	; (adr r3, 800b850 <_dtoa_r+0x2b0>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 ff83 	bl	80005c8 <__aeabi_dmul>
 800b6c2:	a365      	add	r3, pc, #404	; (adr r3, 800b858 <_dtoa_r+0x2b8>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fdc8 	bl	800025c <__adddf3>
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	f7f4 ff0f 	bl	80004f4 <__aeabi_i2d>
 800b6d6:	a362      	add	r3, pc, #392	; (adr r3, 800b860 <_dtoa_r+0x2c0>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	f7f4 ff74 	bl	80005c8 <__aeabi_dmul>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f7f4 fdb8 	bl	800025c <__adddf3>
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	460f      	mov	r7, r1
 800b6f0:	f7f5 fa1a 	bl	8000b28 <__aeabi_d2iz>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	4681      	mov	r9, r0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f5 f9d5 	bl	8000aac <__aeabi_dcmplt>
 800b702:	b148      	cbz	r0, 800b718 <_dtoa_r+0x178>
 800b704:	4648      	mov	r0, r9
 800b706:	f7f4 fef5 	bl	80004f4 <__aeabi_i2d>
 800b70a:	4632      	mov	r2, r6
 800b70c:	463b      	mov	r3, r7
 800b70e:	f7f5 f9c3 	bl	8000a98 <__aeabi_dcmpeq>
 800b712:	b908      	cbnz	r0, 800b718 <_dtoa_r+0x178>
 800b714:	f109 39ff 	add.w	r9, r9, #4294967295
 800b718:	f1b9 0f16 	cmp.w	r9, #22
 800b71c:	d857      	bhi.n	800b7ce <_dtoa_r+0x22e>
 800b71e:	4b59      	ldr	r3, [pc, #356]	; (800b884 <_dtoa_r+0x2e4>)
 800b720:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b72c:	f7f5 f9be 	bl	8000aac <__aeabi_dcmplt>
 800b730:	2800      	cmp	r0, #0
 800b732:	d04e      	beq.n	800b7d2 <_dtoa_r+0x232>
 800b734:	f109 39ff 	add.w	r9, r9, #4294967295
 800b738:	2300      	movs	r3, #0
 800b73a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b73c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b73e:	1b1c      	subs	r4, r3, r4
 800b740:	1e63      	subs	r3, r4, #1
 800b742:	9309      	str	r3, [sp, #36]	; 0x24
 800b744:	bf45      	ittet	mi
 800b746:	f1c4 0301 	rsbmi	r3, r4, #1
 800b74a:	9306      	strmi	r3, [sp, #24]
 800b74c:	2300      	movpl	r3, #0
 800b74e:	2300      	movmi	r3, #0
 800b750:	bf4c      	ite	mi
 800b752:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b754:	9306      	strpl	r3, [sp, #24]
 800b756:	f1b9 0f00 	cmp.w	r9, #0
 800b75a:	db3c      	blt.n	800b7d6 <_dtoa_r+0x236>
 800b75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b762:	444b      	add	r3, r9
 800b764:	9309      	str	r3, [sp, #36]	; 0x24
 800b766:	2300      	movs	r3, #0
 800b768:	930a      	str	r3, [sp, #40]	; 0x28
 800b76a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b76c:	2b09      	cmp	r3, #9
 800b76e:	f200 808d 	bhi.w	800b88c <_dtoa_r+0x2ec>
 800b772:	2b05      	cmp	r3, #5
 800b774:	bfc4      	itt	gt
 800b776:	3b04      	subgt	r3, #4
 800b778:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b77a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b77c:	f1a3 0302 	sub.w	r3, r3, #2
 800b780:	bfcc      	ite	gt
 800b782:	2400      	movgt	r4, #0
 800b784:	2401      	movle	r4, #1
 800b786:	2b03      	cmp	r3, #3
 800b788:	f200 808c 	bhi.w	800b8a4 <_dtoa_r+0x304>
 800b78c:	e8df f003 	tbb	[pc, r3]
 800b790:	5b4d4f2d 	.word	0x5b4d4f2d
 800b794:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b798:	441c      	add	r4, r3
 800b79a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	bfc3      	ittte	gt
 800b7a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7a6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b7aa:	fa09 f303 	lslgt.w	r3, r9, r3
 800b7ae:	f1c3 0320 	rsble	r3, r3, #32
 800b7b2:	bfc6      	itte	gt
 800b7b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7b8:	4318      	orrgt	r0, r3
 800b7ba:	fa06 f003 	lslle.w	r0, r6, r3
 800b7be:	f7f4 fe89 	bl	80004d4 <__aeabi_ui2d>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b7c8:	3c01      	subs	r4, #1
 800b7ca:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7cc:	e770      	b.n	800b6b0 <_dtoa_r+0x110>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e7b3      	b.n	800b73a <_dtoa_r+0x19a>
 800b7d2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b7d4:	e7b2      	b.n	800b73c <_dtoa_r+0x19c>
 800b7d6:	9b06      	ldr	r3, [sp, #24]
 800b7d8:	eba3 0309 	sub.w	r3, r3, r9
 800b7dc:	9306      	str	r3, [sp, #24]
 800b7de:	f1c9 0300 	rsb	r3, r9, #0
 800b7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e8:	e7bf      	b.n	800b76a <_dtoa_r+0x1ca>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	dc5a      	bgt.n	800b8aa <_dtoa_r+0x30a>
 800b7f4:	f04f 0b01 	mov.w	fp, #1
 800b7f8:	f8cd b008 	str.w	fp, [sp, #8]
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b802:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b804:	2200      	movs	r2, #0
 800b806:	6042      	str	r2, [r0, #4]
 800b808:	2204      	movs	r2, #4
 800b80a:	f102 0614 	add.w	r6, r2, #20
 800b80e:	429e      	cmp	r6, r3
 800b810:	6841      	ldr	r1, [r0, #4]
 800b812:	d950      	bls.n	800b8b6 <_dtoa_r+0x316>
 800b814:	4628      	mov	r0, r5
 800b816:	f001 fa93 	bl	800cd40 <_Balloc>
 800b81a:	9008      	str	r0, [sp, #32]
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d14e      	bne.n	800b8be <_dtoa_r+0x31e>
 800b820:	4b19      	ldr	r3, [pc, #100]	; (800b888 <_dtoa_r+0x2e8>)
 800b822:	4602      	mov	r2, r0
 800b824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b828:	e6ce      	b.n	800b5c8 <_dtoa_r+0x28>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e7de      	b.n	800b7ec <_dtoa_r+0x24c>
 800b82e:	2300      	movs	r3, #0
 800b830:	930b      	str	r3, [sp, #44]	; 0x2c
 800b832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b834:	eb09 0b03 	add.w	fp, r9, r3
 800b838:	f10b 0301 	add.w	r3, fp, #1
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	bfb8      	it	lt
 800b842:	2301      	movlt	r3, #1
 800b844:	e7dd      	b.n	800b802 <_dtoa_r+0x262>
 800b846:	2301      	movs	r3, #1
 800b848:	e7f2      	b.n	800b830 <_dtoa_r+0x290>
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w
 800b850:	636f4361 	.word	0x636f4361
 800b854:	3fd287a7 	.word	0x3fd287a7
 800b858:	8b60c8b3 	.word	0x8b60c8b3
 800b85c:	3fc68a28 	.word	0x3fc68a28
 800b860:	509f79fb 	.word	0x509f79fb
 800b864:	3fd34413 	.word	0x3fd34413
 800b868:	0800edb6 	.word	0x0800edb6
 800b86c:	0800edcd 	.word	0x0800edcd
 800b870:	7ff00000 	.word	0x7ff00000
 800b874:	0800edb2 	.word	0x0800edb2
 800b878:	0800eda9 	.word	0x0800eda9
 800b87c:	0800e59d 	.word	0x0800e59d
 800b880:	3ff80000 	.word	0x3ff80000
 800b884:	0800efa8 	.word	0x0800efa8
 800b888:	0800ee2c 	.word	0x0800ee2c
 800b88c:	2401      	movs	r4, #1
 800b88e:	2300      	movs	r3, #0
 800b890:	9322      	str	r3, [sp, #136]	; 0x88
 800b892:	940b      	str	r4, [sp, #44]	; 0x2c
 800b894:	f04f 3bff 	mov.w	fp, #4294967295
 800b898:	2200      	movs	r2, #0
 800b89a:	f8cd b008 	str.w	fp, [sp, #8]
 800b89e:	2312      	movs	r3, #18
 800b8a0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b8a2:	e7ae      	b.n	800b802 <_dtoa_r+0x262>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a8:	e7f4      	b.n	800b894 <_dtoa_r+0x2f4>
 800b8aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b8ae:	f8cd b008 	str.w	fp, [sp, #8]
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	e7a5      	b.n	800b802 <_dtoa_r+0x262>
 800b8b6:	3101      	adds	r1, #1
 800b8b8:	6041      	str	r1, [r0, #4]
 800b8ba:	0052      	lsls	r2, r2, #1
 800b8bc:	e7a5      	b.n	800b80a <_dtoa_r+0x26a>
 800b8be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8c0:	9a08      	ldr	r2, [sp, #32]
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	9b02      	ldr	r3, [sp, #8]
 800b8c6:	2b0e      	cmp	r3, #14
 800b8c8:	f200 80a8 	bhi.w	800ba1c <_dtoa_r+0x47c>
 800b8cc:	2c00      	cmp	r4, #0
 800b8ce:	f000 80a5 	beq.w	800ba1c <_dtoa_r+0x47c>
 800b8d2:	f1b9 0f00 	cmp.w	r9, #0
 800b8d6:	dd34      	ble.n	800b942 <_dtoa_r+0x3a2>
 800b8d8:	4a9a      	ldr	r2, [pc, #616]	; (800bb44 <_dtoa_r+0x5a4>)
 800b8da:	f009 030f 	and.w	r3, r9, #15
 800b8de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8e6:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b8ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b8ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b8f2:	d016      	beq.n	800b922 <_dtoa_r+0x382>
 800b8f4:	4b94      	ldr	r3, [pc, #592]	; (800bb48 <_dtoa_r+0x5a8>)
 800b8f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8fe:	f7f4 ff8d 	bl	800081c <__aeabi_ddiv>
 800b902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b906:	f004 040f 	and.w	r4, r4, #15
 800b90a:	2703      	movs	r7, #3
 800b90c:	4e8e      	ldr	r6, [pc, #568]	; (800bb48 <_dtoa_r+0x5a8>)
 800b90e:	b954      	cbnz	r4, 800b926 <_dtoa_r+0x386>
 800b910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b918:	f7f4 ff80 	bl	800081c <__aeabi_ddiv>
 800b91c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b920:	e029      	b.n	800b976 <_dtoa_r+0x3d6>
 800b922:	2702      	movs	r7, #2
 800b924:	e7f2      	b.n	800b90c <_dtoa_r+0x36c>
 800b926:	07e1      	lsls	r1, r4, #31
 800b928:	d508      	bpl.n	800b93c <_dtoa_r+0x39c>
 800b92a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b92e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b932:	f7f4 fe49 	bl	80005c8 <__aeabi_dmul>
 800b936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b93a:	3701      	adds	r7, #1
 800b93c:	1064      	asrs	r4, r4, #1
 800b93e:	3608      	adds	r6, #8
 800b940:	e7e5      	b.n	800b90e <_dtoa_r+0x36e>
 800b942:	f000 80a5 	beq.w	800ba90 <_dtoa_r+0x4f0>
 800b946:	f1c9 0400 	rsb	r4, r9, #0
 800b94a:	4b7e      	ldr	r3, [pc, #504]	; (800bb44 <_dtoa_r+0x5a4>)
 800b94c:	4e7e      	ldr	r6, [pc, #504]	; (800bb48 <_dtoa_r+0x5a8>)
 800b94e:	f004 020f 	and.w	r2, r4, #15
 800b952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b95e:	f7f4 fe33 	bl	80005c8 <__aeabi_dmul>
 800b962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b966:	1124      	asrs	r4, r4, #4
 800b968:	2300      	movs	r3, #0
 800b96a:	2702      	movs	r7, #2
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	f040 8084 	bne.w	800ba7a <_dtoa_r+0x4da>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1d2      	bne.n	800b91c <_dtoa_r+0x37c>
 800b976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 808b 	beq.w	800ba94 <_dtoa_r+0x4f4>
 800b97e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b982:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b98a:	4b70      	ldr	r3, [pc, #448]	; (800bb4c <_dtoa_r+0x5ac>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	f7f5 f88d 	bl	8000aac <__aeabi_dcmplt>
 800b992:	2800      	cmp	r0, #0
 800b994:	d07e      	beq.n	800ba94 <_dtoa_r+0x4f4>
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d07b      	beq.n	800ba94 <_dtoa_r+0x4f4>
 800b99c:	f1bb 0f00 	cmp.w	fp, #0
 800b9a0:	dd38      	ble.n	800ba14 <_dtoa_r+0x474>
 800b9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9a6:	4b6a      	ldr	r3, [pc, #424]	; (800bb50 <_dtoa_r+0x5b0>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f7f4 fe0d 	bl	80005c8 <__aeabi_dmul>
 800b9ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9b2:	f109 38ff 	add.w	r8, r9, #4294967295
 800b9b6:	3701      	adds	r7, #1
 800b9b8:	465c      	mov	r4, fp
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f7f4 fd9a 	bl	80004f4 <__aeabi_i2d>
 800b9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9c4:	f7f4 fe00 	bl	80005c8 <__aeabi_dmul>
 800b9c8:	4b62      	ldr	r3, [pc, #392]	; (800bb54 <_dtoa_r+0x5b4>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f7f4 fc46 	bl	800025c <__adddf3>
 800b9d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b9d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9d8:	9611      	str	r6, [sp, #68]	; 0x44
 800b9da:	2c00      	cmp	r4, #0
 800b9dc:	d15d      	bne.n	800ba9a <_dtoa_r+0x4fa>
 800b9de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9e2:	4b5d      	ldr	r3, [pc, #372]	; (800bb58 <_dtoa_r+0x5b8>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f7f4 fc37 	bl	8000258 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9f4:	4633      	mov	r3, r6
 800b9f6:	f7f5 f877 	bl	8000ae8 <__aeabi_dcmpgt>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	f040 829e 	bne.w	800bf3c <_dtoa_r+0x99c>
 800ba00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba0a:	f7f5 f84f 	bl	8000aac <__aeabi_dcmplt>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f040 8292 	bne.w	800bf38 <_dtoa_r+0x998>
 800ba14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ba18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f2c0 8153 	blt.w	800bcca <_dtoa_r+0x72a>
 800ba24:	f1b9 0f0e 	cmp.w	r9, #14
 800ba28:	f300 814f 	bgt.w	800bcca <_dtoa_r+0x72a>
 800ba2c:	4b45      	ldr	r3, [pc, #276]	; (800bb44 <_dtoa_r+0x5a4>)
 800ba2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ba32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ba3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f280 80db 	bge.w	800bbf8 <_dtoa_r+0x658>
 800ba42:	9b02      	ldr	r3, [sp, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f300 80d7 	bgt.w	800bbf8 <_dtoa_r+0x658>
 800ba4a:	f040 8274 	bne.w	800bf36 <_dtoa_r+0x996>
 800ba4e:	4b42      	ldr	r3, [pc, #264]	; (800bb58 <_dtoa_r+0x5b8>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba56:	f7f4 fdb7 	bl	80005c8 <__aeabi_dmul>
 800ba5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba5e:	f7f5 f839 	bl	8000ad4 <__aeabi_dcmpge>
 800ba62:	9c02      	ldr	r4, [sp, #8]
 800ba64:	4626      	mov	r6, r4
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f040 824a 	bne.w	800bf00 <_dtoa_r+0x960>
 800ba6c:	9f08      	ldr	r7, [sp, #32]
 800ba6e:	2331      	movs	r3, #49	; 0x31
 800ba70:	f807 3b01 	strb.w	r3, [r7], #1
 800ba74:	f109 0901 	add.w	r9, r9, #1
 800ba78:	e246      	b.n	800bf08 <_dtoa_r+0x968>
 800ba7a:	07e2      	lsls	r2, r4, #31
 800ba7c:	d505      	bpl.n	800ba8a <_dtoa_r+0x4ea>
 800ba7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba82:	f7f4 fda1 	bl	80005c8 <__aeabi_dmul>
 800ba86:	3701      	adds	r7, #1
 800ba88:	2301      	movs	r3, #1
 800ba8a:	1064      	asrs	r4, r4, #1
 800ba8c:	3608      	adds	r6, #8
 800ba8e:	e76d      	b.n	800b96c <_dtoa_r+0x3cc>
 800ba90:	2702      	movs	r7, #2
 800ba92:	e770      	b.n	800b976 <_dtoa_r+0x3d6>
 800ba94:	9c02      	ldr	r4, [sp, #8]
 800ba96:	46c8      	mov	r8, r9
 800ba98:	e78f      	b.n	800b9ba <_dtoa_r+0x41a>
 800ba9a:	9908      	ldr	r1, [sp, #32]
 800ba9c:	4b29      	ldr	r3, [pc, #164]	; (800bb44 <_dtoa_r+0x5a4>)
 800ba9e:	4421      	add	r1, r4
 800baa0:	9112      	str	r1, [sp, #72]	; 0x48
 800baa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800baa8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800baac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bab0:	2900      	cmp	r1, #0
 800bab2:	d055      	beq.n	800bb60 <_dtoa_r+0x5c0>
 800bab4:	4929      	ldr	r1, [pc, #164]	; (800bb5c <_dtoa_r+0x5bc>)
 800bab6:	2000      	movs	r0, #0
 800bab8:	f7f4 feb0 	bl	800081c <__aeabi_ddiv>
 800babc:	463b      	mov	r3, r7
 800babe:	4632      	mov	r2, r6
 800bac0:	f7f4 fbca 	bl	8000258 <__aeabi_dsub>
 800bac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bac8:	9f08      	ldr	r7, [sp, #32]
 800baca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bace:	f7f5 f82b 	bl	8000b28 <__aeabi_d2iz>
 800bad2:	4604      	mov	r4, r0
 800bad4:	f7f4 fd0e 	bl	80004f4 <__aeabi_i2d>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bae0:	f7f4 fbba 	bl	8000258 <__aeabi_dsub>
 800bae4:	3430      	adds	r4, #48	; 0x30
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800baee:	f807 4b01 	strb.w	r4, [r7], #1
 800baf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800baf6:	f7f4 ffd9 	bl	8000aac <__aeabi_dcmplt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d174      	bne.n	800bbe8 <_dtoa_r+0x648>
 800bafe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb02:	4912      	ldr	r1, [pc, #72]	; (800bb4c <_dtoa_r+0x5ac>)
 800bb04:	2000      	movs	r0, #0
 800bb06:	f7f4 fba7 	bl	8000258 <__aeabi_dsub>
 800bb0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb0e:	f7f4 ffcd 	bl	8000aac <__aeabi_dcmplt>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f040 80b6 	bne.w	800bc84 <_dtoa_r+0x6e4>
 800bb18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb1a:	429f      	cmp	r7, r3
 800bb1c:	f43f af7a 	beq.w	800ba14 <_dtoa_r+0x474>
 800bb20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb24:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <_dtoa_r+0x5b0>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	f7f4 fd4e 	bl	80005c8 <__aeabi_dmul>
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <_dtoa_r+0x5b0>)
 800bb2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb32:	2200      	movs	r2, #0
 800bb34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb38:	f7f4 fd46 	bl	80005c8 <__aeabi_dmul>
 800bb3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb40:	e7c3      	b.n	800baca <_dtoa_r+0x52a>
 800bb42:	bf00      	nop
 800bb44:	0800efa8 	.word	0x0800efa8
 800bb48:	0800ef80 	.word	0x0800ef80
 800bb4c:	3ff00000 	.word	0x3ff00000
 800bb50:	40240000 	.word	0x40240000
 800bb54:	401c0000 	.word	0x401c0000
 800bb58:	40140000 	.word	0x40140000
 800bb5c:	3fe00000 	.word	0x3fe00000
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fd30 	bl	80005c8 <__aeabi_dmul>
 800bb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb6e:	9c08      	ldr	r4, [sp, #32]
 800bb70:	9314      	str	r3, [sp, #80]	; 0x50
 800bb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb76:	f7f4 ffd7 	bl	8000b28 <__aeabi_d2iz>
 800bb7a:	9015      	str	r0, [sp, #84]	; 0x54
 800bb7c:	f7f4 fcba 	bl	80004f4 <__aeabi_i2d>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb88:	f7f4 fb66 	bl	8000258 <__aeabi_dsub>
 800bb8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb8e:	3330      	adds	r3, #48	; 0x30
 800bb90:	f804 3b01 	strb.w	r3, [r4], #1
 800bb94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb96:	429c      	cmp	r4, r3
 800bb98:	4606      	mov	r6, r0
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	f04f 0200 	mov.w	r2, #0
 800bba0:	d124      	bne.n	800bbec <_dtoa_r+0x64c>
 800bba2:	4bb2      	ldr	r3, [pc, #712]	; (800be6c <_dtoa_r+0x8cc>)
 800bba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bba8:	f7f4 fb58 	bl	800025c <__adddf3>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 ff98 	bl	8000ae8 <__aeabi_dcmpgt>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d162      	bne.n	800bc82 <_dtoa_r+0x6e2>
 800bbbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbc0:	49aa      	ldr	r1, [pc, #680]	; (800be6c <_dtoa_r+0x8cc>)
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f7f4 fb48 	bl	8000258 <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f7f4 ff6c 	bl	8000aac <__aeabi_dcmplt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f43f af1d 	beq.w	800ba14 <_dtoa_r+0x474>
 800bbda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bbdc:	1e7b      	subs	r3, r7, #1
 800bbde:	9314      	str	r3, [sp, #80]	; 0x50
 800bbe0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bbe4:	2b30      	cmp	r3, #48	; 0x30
 800bbe6:	d0f8      	beq.n	800bbda <_dtoa_r+0x63a>
 800bbe8:	46c1      	mov	r9, r8
 800bbea:	e03a      	b.n	800bc62 <_dtoa_r+0x6c2>
 800bbec:	4ba0      	ldr	r3, [pc, #640]	; (800be70 <_dtoa_r+0x8d0>)
 800bbee:	f7f4 fceb 	bl	80005c8 <__aeabi_dmul>
 800bbf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbf6:	e7bc      	b.n	800bb72 <_dtoa_r+0x5d2>
 800bbf8:	9f08      	ldr	r7, [sp, #32]
 800bbfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc02:	f7f4 fe0b 	bl	800081c <__aeabi_ddiv>
 800bc06:	f7f4 ff8f 	bl	8000b28 <__aeabi_d2iz>
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	f7f4 fc72 	bl	80004f4 <__aeabi_i2d>
 800bc10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc14:	f7f4 fcd8 	bl	80005c8 <__aeabi_dmul>
 800bc18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4602      	mov	r2, r0
 800bc20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc24:	f7f4 fb18 	bl	8000258 <__aeabi_dsub>
 800bc28:	f807 6b01 	strb.w	r6, [r7], #1
 800bc2c:	9e08      	ldr	r6, [sp, #32]
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	1bbe      	subs	r6, r7, r6
 800bc32:	42b3      	cmp	r3, r6
 800bc34:	d13a      	bne.n	800bcac <_dtoa_r+0x70c>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	f7f4 fb0f 	bl	800025c <__adddf3>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc4a:	f7f4 ff4d 	bl	8000ae8 <__aeabi_dcmpgt>
 800bc4e:	bb58      	cbnz	r0, 800bca8 <_dtoa_r+0x708>
 800bc50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc58:	f7f4 ff1e 	bl	8000a98 <__aeabi_dcmpeq>
 800bc5c:	b108      	cbz	r0, 800bc62 <_dtoa_r+0x6c2>
 800bc5e:	07e1      	lsls	r1, r4, #31
 800bc60:	d422      	bmi.n	800bca8 <_dtoa_r+0x708>
 800bc62:	4628      	mov	r0, r5
 800bc64:	4651      	mov	r1, sl
 800bc66:	f001 f8ab 	bl	800cdc0 <_Bfree>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	703b      	strb	r3, [r7, #0]
 800bc6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc70:	f109 0001 	add.w	r0, r9, #1
 800bc74:	6018      	str	r0, [r3, #0]
 800bc76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f43f acde 	beq.w	800b63a <_dtoa_r+0x9a>
 800bc7e:	601f      	str	r7, [r3, #0]
 800bc80:	e4db      	b.n	800b63a <_dtoa_r+0x9a>
 800bc82:	4627      	mov	r7, r4
 800bc84:	463b      	mov	r3, r7
 800bc86:	461f      	mov	r7, r3
 800bc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc8c:	2a39      	cmp	r2, #57	; 0x39
 800bc8e:	d107      	bne.n	800bca0 <_dtoa_r+0x700>
 800bc90:	9a08      	ldr	r2, [sp, #32]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d1f7      	bne.n	800bc86 <_dtoa_r+0x6e6>
 800bc96:	9908      	ldr	r1, [sp, #32]
 800bc98:	2230      	movs	r2, #48	; 0x30
 800bc9a:	f108 0801 	add.w	r8, r8, #1
 800bc9e:	700a      	strb	r2, [r1, #0]
 800bca0:	781a      	ldrb	r2, [r3, #0]
 800bca2:	3201      	adds	r2, #1
 800bca4:	701a      	strb	r2, [r3, #0]
 800bca6:	e79f      	b.n	800bbe8 <_dtoa_r+0x648>
 800bca8:	46c8      	mov	r8, r9
 800bcaa:	e7eb      	b.n	800bc84 <_dtoa_r+0x6e4>
 800bcac:	4b70      	ldr	r3, [pc, #448]	; (800be70 <_dtoa_r+0x8d0>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f7f4 fc8a 	bl	80005c8 <__aeabi_dmul>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f7f4 feea 	bl	8000a98 <__aeabi_dcmpeq>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d098      	beq.n	800bbfa <_dtoa_r+0x65a>
 800bcc8:	e7cb      	b.n	800bc62 <_dtoa_r+0x6c2>
 800bcca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	f000 80d1 	beq.w	800be74 <_dtoa_r+0x8d4>
 800bcd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bcd4:	2a01      	cmp	r2, #1
 800bcd6:	f300 80af 	bgt.w	800be38 <_dtoa_r+0x898>
 800bcda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bcdc:	2a00      	cmp	r2, #0
 800bcde:	f000 80a7 	beq.w	800be30 <_dtoa_r+0x890>
 800bce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bce6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bce8:	9f06      	ldr	r7, [sp, #24]
 800bcea:	9a06      	ldr	r2, [sp, #24]
 800bcec:	441a      	add	r2, r3
 800bcee:	9206      	str	r2, [sp, #24]
 800bcf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf2:	2101      	movs	r1, #1
 800bcf4:	441a      	add	r2, r3
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfa:	f001 f965 	bl	800cfc8 <__i2b>
 800bcfe:	4606      	mov	r6, r0
 800bd00:	2f00      	cmp	r7, #0
 800bd02:	dd0c      	ble.n	800bd1e <_dtoa_r+0x77e>
 800bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd09      	ble.n	800bd1e <_dtoa_r+0x77e>
 800bd0a:	42bb      	cmp	r3, r7
 800bd0c:	9a06      	ldr	r2, [sp, #24]
 800bd0e:	bfa8      	it	ge
 800bd10:	463b      	movge	r3, r7
 800bd12:	1ad2      	subs	r2, r2, r3
 800bd14:	9206      	str	r2, [sp, #24]
 800bd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd18:	1aff      	subs	r7, r7, r3
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	b1f3      	cbz	r3, 800bd60 <_dtoa_r+0x7c0>
 800bd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 80a9 	beq.w	800be7c <_dtoa_r+0x8dc>
 800bd2a:	2c00      	cmp	r4, #0
 800bd2c:	dd10      	ble.n	800bd50 <_dtoa_r+0x7b0>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4622      	mov	r2, r4
 800bd32:	4628      	mov	r0, r5
 800bd34:	f001 fa04 	bl	800d140 <__pow5mult>
 800bd38:	4652      	mov	r2, sl
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f001 f958 	bl	800cff4 <__multiply>
 800bd44:	4651      	mov	r1, sl
 800bd46:	4680      	mov	r8, r0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f001 f839 	bl	800cdc0 <_Bfree>
 800bd4e:	46c2      	mov	sl, r8
 800bd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd52:	1b1a      	subs	r2, r3, r4
 800bd54:	d004      	beq.n	800bd60 <_dtoa_r+0x7c0>
 800bd56:	4651      	mov	r1, sl
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f001 f9f1 	bl	800d140 <__pow5mult>
 800bd5e:	4682      	mov	sl, r0
 800bd60:	2101      	movs	r1, #1
 800bd62:	4628      	mov	r0, r5
 800bd64:	f001 f930 	bl	800cfc8 <__i2b>
 800bd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	f340 8087 	ble.w	800be80 <_dtoa_r+0x8e0>
 800bd72:	461a      	mov	r2, r3
 800bd74:	4601      	mov	r1, r0
 800bd76:	4628      	mov	r0, r5
 800bd78:	f001 f9e2 	bl	800d140 <__pow5mult>
 800bd7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	4604      	mov	r4, r0
 800bd82:	f340 8080 	ble.w	800be86 <_dtoa_r+0x8e6>
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd90:	6918      	ldr	r0, [r3, #16]
 800bd92:	f001 f8cb 	bl	800cf2c <__hi0bits>
 800bd96:	f1c0 0020 	rsb	r0, r0, #32
 800bd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9c:	4418      	add	r0, r3
 800bd9e:	f010 001f 	ands.w	r0, r0, #31
 800bda2:	f000 8092 	beq.w	800beca <_dtoa_r+0x92a>
 800bda6:	f1c0 0320 	rsb	r3, r0, #32
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	f340 808a 	ble.w	800bec4 <_dtoa_r+0x924>
 800bdb0:	f1c0 001c 	rsb	r0, r0, #28
 800bdb4:	9b06      	ldr	r3, [sp, #24]
 800bdb6:	4403      	add	r3, r0
 800bdb8:	9306      	str	r3, [sp, #24]
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	4403      	add	r3, r0
 800bdbe:	4407      	add	r7, r0
 800bdc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc2:	9b06      	ldr	r3, [sp, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	dd05      	ble.n	800bdd4 <_dtoa_r+0x834>
 800bdc8:	4651      	mov	r1, sl
 800bdca:	461a      	mov	r2, r3
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f001 fa11 	bl	800d1f4 <__lshift>
 800bdd2:	4682      	mov	sl, r0
 800bdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	dd05      	ble.n	800bde6 <_dtoa_r+0x846>
 800bdda:	4621      	mov	r1, r4
 800bddc:	461a      	mov	r2, r3
 800bdde:	4628      	mov	r0, r5
 800bde0:	f001 fa08 	bl	800d1f4 <__lshift>
 800bde4:	4604      	mov	r4, r0
 800bde6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d070      	beq.n	800bece <_dtoa_r+0x92e>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4650      	mov	r0, sl
 800bdf0:	f001 fa6c 	bl	800d2cc <__mcmp>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	da6a      	bge.n	800bece <_dtoa_r+0x92e>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4651      	mov	r1, sl
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	4628      	mov	r0, r5
 800be00:	f001 f800 	bl	800ce04 <__multadd>
 800be04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be06:	f109 39ff 	add.w	r9, r9, #4294967295
 800be0a:	4682      	mov	sl, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 8193 	beq.w	800c138 <_dtoa_r+0xb98>
 800be12:	4631      	mov	r1, r6
 800be14:	2300      	movs	r3, #0
 800be16:	220a      	movs	r2, #10
 800be18:	4628      	mov	r0, r5
 800be1a:	f000 fff3 	bl	800ce04 <__multadd>
 800be1e:	f1bb 0f00 	cmp.w	fp, #0
 800be22:	4606      	mov	r6, r0
 800be24:	f300 8093 	bgt.w	800bf4e <_dtoa_r+0x9ae>
 800be28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	dc57      	bgt.n	800bede <_dtoa_r+0x93e>
 800be2e:	e08e      	b.n	800bf4e <_dtoa_r+0x9ae>
 800be30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be36:	e756      	b.n	800bce6 <_dtoa_r+0x746>
 800be38:	9b02      	ldr	r3, [sp, #8]
 800be3a:	1e5c      	subs	r4, r3, #1
 800be3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3e:	42a3      	cmp	r3, r4
 800be40:	bfbf      	itttt	lt
 800be42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be44:	940a      	strlt	r4, [sp, #40]	; 0x28
 800be46:	1ae2      	sublt	r2, r4, r3
 800be48:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be4a:	bfb6      	itet	lt
 800be4c:	189b      	addlt	r3, r3, r2
 800be4e:	1b1c      	subge	r4, r3, r4
 800be50:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	bfb8      	it	lt
 800be56:	2400      	movlt	r4, #0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	bfb9      	ittee	lt
 800be5c:	9b06      	ldrlt	r3, [sp, #24]
 800be5e:	9a02      	ldrlt	r2, [sp, #8]
 800be60:	9f06      	ldrge	r7, [sp, #24]
 800be62:	9b02      	ldrge	r3, [sp, #8]
 800be64:	bfbc      	itt	lt
 800be66:	1a9f      	sublt	r7, r3, r2
 800be68:	2300      	movlt	r3, #0
 800be6a:	e73e      	b.n	800bcea <_dtoa_r+0x74a>
 800be6c:	3fe00000 	.word	0x3fe00000
 800be70:	40240000 	.word	0x40240000
 800be74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be76:	9f06      	ldr	r7, [sp, #24]
 800be78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be7a:	e741      	b.n	800bd00 <_dtoa_r+0x760>
 800be7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be7e:	e76a      	b.n	800bd56 <_dtoa_r+0x7b6>
 800be80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be82:	2b01      	cmp	r3, #1
 800be84:	dc19      	bgt.n	800beba <_dtoa_r+0x91a>
 800be86:	9b04      	ldr	r3, [sp, #16]
 800be88:	b9bb      	cbnz	r3, 800beba <_dtoa_r+0x91a>
 800be8a:	9b05      	ldr	r3, [sp, #20]
 800be8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be90:	b99b      	cbnz	r3, 800beba <_dtoa_r+0x91a>
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be98:	0d1b      	lsrs	r3, r3, #20
 800be9a:	051b      	lsls	r3, r3, #20
 800be9c:	b183      	cbz	r3, 800bec0 <_dtoa_r+0x920>
 800be9e:	9b06      	ldr	r3, [sp, #24]
 800bea0:	3301      	adds	r3, #1
 800bea2:	9306      	str	r3, [sp, #24]
 800bea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea6:	3301      	adds	r3, #1
 800bea8:	9309      	str	r3, [sp, #36]	; 0x24
 800beaa:	f04f 0801 	mov.w	r8, #1
 800beae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f47f af6a 	bne.w	800bd8a <_dtoa_r+0x7ea>
 800beb6:	2001      	movs	r0, #1
 800beb8:	e76f      	b.n	800bd9a <_dtoa_r+0x7fa>
 800beba:	f04f 0800 	mov.w	r8, #0
 800bebe:	e7f6      	b.n	800beae <_dtoa_r+0x90e>
 800bec0:	4698      	mov	r8, r3
 800bec2:	e7f4      	b.n	800beae <_dtoa_r+0x90e>
 800bec4:	f43f af7d 	beq.w	800bdc2 <_dtoa_r+0x822>
 800bec8:	4618      	mov	r0, r3
 800beca:	301c      	adds	r0, #28
 800becc:	e772      	b.n	800bdb4 <_dtoa_r+0x814>
 800bece:	9b02      	ldr	r3, [sp, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc36      	bgt.n	800bf42 <_dtoa_r+0x9a2>
 800bed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	dd33      	ble.n	800bf42 <_dtoa_r+0x9a2>
 800beda:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bede:	f1bb 0f00 	cmp.w	fp, #0
 800bee2:	d10d      	bne.n	800bf00 <_dtoa_r+0x960>
 800bee4:	4621      	mov	r1, r4
 800bee6:	465b      	mov	r3, fp
 800bee8:	2205      	movs	r2, #5
 800beea:	4628      	mov	r0, r5
 800beec:	f000 ff8a 	bl	800ce04 <__multadd>
 800bef0:	4601      	mov	r1, r0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4650      	mov	r0, sl
 800bef6:	f001 f9e9 	bl	800d2cc <__mcmp>
 800befa:	2800      	cmp	r0, #0
 800befc:	f73f adb6 	bgt.w	800ba6c <_dtoa_r+0x4cc>
 800bf00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf02:	9f08      	ldr	r7, [sp, #32]
 800bf04:	ea6f 0903 	mvn.w	r9, r3
 800bf08:	f04f 0800 	mov.w	r8, #0
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 ff56 	bl	800cdc0 <_Bfree>
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	f43f aea4 	beq.w	800bc62 <_dtoa_r+0x6c2>
 800bf1a:	f1b8 0f00 	cmp.w	r8, #0
 800bf1e:	d005      	beq.n	800bf2c <_dtoa_r+0x98c>
 800bf20:	45b0      	cmp	r8, r6
 800bf22:	d003      	beq.n	800bf2c <_dtoa_r+0x98c>
 800bf24:	4641      	mov	r1, r8
 800bf26:	4628      	mov	r0, r5
 800bf28:	f000 ff4a 	bl	800cdc0 <_Bfree>
 800bf2c:	4631      	mov	r1, r6
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f000 ff46 	bl	800cdc0 <_Bfree>
 800bf34:	e695      	b.n	800bc62 <_dtoa_r+0x6c2>
 800bf36:	2400      	movs	r4, #0
 800bf38:	4626      	mov	r6, r4
 800bf3a:	e7e1      	b.n	800bf00 <_dtoa_r+0x960>
 800bf3c:	46c1      	mov	r9, r8
 800bf3e:	4626      	mov	r6, r4
 800bf40:	e594      	b.n	800ba6c <_dtoa_r+0x4cc>
 800bf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf44:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80fc 	beq.w	800c146 <_dtoa_r+0xba6>
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	dd05      	ble.n	800bf5e <_dtoa_r+0x9be>
 800bf52:	4631      	mov	r1, r6
 800bf54:	463a      	mov	r2, r7
 800bf56:	4628      	mov	r0, r5
 800bf58:	f001 f94c 	bl	800d1f4 <__lshift>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	f1b8 0f00 	cmp.w	r8, #0
 800bf62:	d05c      	beq.n	800c01e <_dtoa_r+0xa7e>
 800bf64:	6871      	ldr	r1, [r6, #4]
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 feea 	bl	800cd40 <_Balloc>
 800bf6c:	4607      	mov	r7, r0
 800bf6e:	b928      	cbnz	r0, 800bf7c <_dtoa_r+0x9dc>
 800bf70:	4b7f      	ldr	r3, [pc, #508]	; (800c170 <_dtoa_r+0xbd0>)
 800bf72:	4602      	mov	r2, r0
 800bf74:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf78:	f7ff bb26 	b.w	800b5c8 <_dtoa_r+0x28>
 800bf7c:	6932      	ldr	r2, [r6, #16]
 800bf7e:	3202      	adds	r2, #2
 800bf80:	0092      	lsls	r2, r2, #2
 800bf82:	f106 010c 	add.w	r1, r6, #12
 800bf86:	300c      	adds	r0, #12
 800bf88:	f7fd fa80 	bl	800948c <memcpy>
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	4639      	mov	r1, r7
 800bf90:	4628      	mov	r0, r5
 800bf92:	f001 f92f 	bl	800d1f4 <__lshift>
 800bf96:	9b08      	ldr	r3, [sp, #32]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9302      	str	r3, [sp, #8]
 800bf9c:	9b08      	ldr	r3, [sp, #32]
 800bf9e:	445b      	add	r3, fp
 800bfa0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa2:	9b04      	ldr	r3, [sp, #16]
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	46b0      	mov	r8, r6
 800bfaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bfac:	4606      	mov	r6, r0
 800bfae:	9b02      	ldr	r3, [sp, #8]
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bfb8:	f7ff fa66 	bl	800b488 <quorem>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	3330      	adds	r3, #48	; 0x30
 800bfc0:	9004      	str	r0, [sp, #16]
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	4650      	mov	r0, sl
 800bfc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfc8:	f001 f980 	bl	800d2cc <__mcmp>
 800bfcc:	4632      	mov	r2, r6
 800bfce:	9006      	str	r0, [sp, #24]
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f001 f996 	bl	800d304 <__mdiff>
 800bfd8:	68c2      	ldr	r2, [r0, #12]
 800bfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfdc:	4607      	mov	r7, r0
 800bfde:	bb02      	cbnz	r2, 800c022 <_dtoa_r+0xa82>
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	f001 f972 	bl	800d2cc <__mcmp>
 800bfe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfea:	4602      	mov	r2, r0
 800bfec:	4639      	mov	r1, r7
 800bfee:	4628      	mov	r0, r5
 800bff0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bff4:	f000 fee4 	bl	800cdc0 <_Bfree>
 800bff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bffc:	9f02      	ldr	r7, [sp, #8]
 800bffe:	ea43 0102 	orr.w	r1, r3, r2
 800c002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c004:	430b      	orrs	r3, r1
 800c006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c008:	d10d      	bne.n	800c026 <_dtoa_r+0xa86>
 800c00a:	2b39      	cmp	r3, #57	; 0x39
 800c00c:	d027      	beq.n	800c05e <_dtoa_r+0xabe>
 800c00e:	9a06      	ldr	r2, [sp, #24]
 800c010:	2a00      	cmp	r2, #0
 800c012:	dd01      	ble.n	800c018 <_dtoa_r+0xa78>
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	3331      	adds	r3, #49	; 0x31
 800c018:	f88b 3000 	strb.w	r3, [fp]
 800c01c:	e776      	b.n	800bf0c <_dtoa_r+0x96c>
 800c01e:	4630      	mov	r0, r6
 800c020:	e7b9      	b.n	800bf96 <_dtoa_r+0x9f6>
 800c022:	2201      	movs	r2, #1
 800c024:	e7e2      	b.n	800bfec <_dtoa_r+0xa4c>
 800c026:	9906      	ldr	r1, [sp, #24]
 800c028:	2900      	cmp	r1, #0
 800c02a:	db04      	blt.n	800c036 <_dtoa_r+0xa96>
 800c02c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c02e:	4301      	orrs	r1, r0
 800c030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c032:	4301      	orrs	r1, r0
 800c034:	d120      	bne.n	800c078 <_dtoa_r+0xad8>
 800c036:	2a00      	cmp	r2, #0
 800c038:	ddee      	ble.n	800c018 <_dtoa_r+0xa78>
 800c03a:	4651      	mov	r1, sl
 800c03c:	2201      	movs	r2, #1
 800c03e:	4628      	mov	r0, r5
 800c040:	9302      	str	r3, [sp, #8]
 800c042:	f001 f8d7 	bl	800d1f4 <__lshift>
 800c046:	4621      	mov	r1, r4
 800c048:	4682      	mov	sl, r0
 800c04a:	f001 f93f 	bl	800d2cc <__mcmp>
 800c04e:	2800      	cmp	r0, #0
 800c050:	9b02      	ldr	r3, [sp, #8]
 800c052:	dc02      	bgt.n	800c05a <_dtoa_r+0xaba>
 800c054:	d1e0      	bne.n	800c018 <_dtoa_r+0xa78>
 800c056:	07da      	lsls	r2, r3, #31
 800c058:	d5de      	bpl.n	800c018 <_dtoa_r+0xa78>
 800c05a:	2b39      	cmp	r3, #57	; 0x39
 800c05c:	d1da      	bne.n	800c014 <_dtoa_r+0xa74>
 800c05e:	2339      	movs	r3, #57	; 0x39
 800c060:	f88b 3000 	strb.w	r3, [fp]
 800c064:	463b      	mov	r3, r7
 800c066:	461f      	mov	r7, r3
 800c068:	3b01      	subs	r3, #1
 800c06a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c06e:	2a39      	cmp	r2, #57	; 0x39
 800c070:	d050      	beq.n	800c114 <_dtoa_r+0xb74>
 800c072:	3201      	adds	r2, #1
 800c074:	701a      	strb	r2, [r3, #0]
 800c076:	e749      	b.n	800bf0c <_dtoa_r+0x96c>
 800c078:	2a00      	cmp	r2, #0
 800c07a:	dd03      	ble.n	800c084 <_dtoa_r+0xae4>
 800c07c:	2b39      	cmp	r3, #57	; 0x39
 800c07e:	d0ee      	beq.n	800c05e <_dtoa_r+0xabe>
 800c080:	3301      	adds	r3, #1
 800c082:	e7c9      	b.n	800c018 <_dtoa_r+0xa78>
 800c084:	9a02      	ldr	r2, [sp, #8]
 800c086:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c088:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c08c:	428a      	cmp	r2, r1
 800c08e:	d02a      	beq.n	800c0e6 <_dtoa_r+0xb46>
 800c090:	4651      	mov	r1, sl
 800c092:	2300      	movs	r3, #0
 800c094:	220a      	movs	r2, #10
 800c096:	4628      	mov	r0, r5
 800c098:	f000 feb4 	bl	800ce04 <__multadd>
 800c09c:	45b0      	cmp	r8, r6
 800c09e:	4682      	mov	sl, r0
 800c0a0:	f04f 0300 	mov.w	r3, #0
 800c0a4:	f04f 020a 	mov.w	r2, #10
 800c0a8:	4641      	mov	r1, r8
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	d107      	bne.n	800c0be <_dtoa_r+0xb1e>
 800c0ae:	f000 fea9 	bl	800ce04 <__multadd>
 800c0b2:	4680      	mov	r8, r0
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	e777      	b.n	800bfae <_dtoa_r+0xa0e>
 800c0be:	f000 fea1 	bl	800ce04 <__multadd>
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4680      	mov	r8, r0
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 fe9a 	bl	800ce04 <__multadd>
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	e7f0      	b.n	800c0b6 <_dtoa_r+0xb16>
 800c0d4:	f1bb 0f00 	cmp.w	fp, #0
 800c0d8:	9a08      	ldr	r2, [sp, #32]
 800c0da:	bfcc      	ite	gt
 800c0dc:	465f      	movgt	r7, fp
 800c0de:	2701      	movle	r7, #1
 800c0e0:	4417      	add	r7, r2
 800c0e2:	f04f 0800 	mov.w	r8, #0
 800c0e6:	4651      	mov	r1, sl
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	9302      	str	r3, [sp, #8]
 800c0ee:	f001 f881 	bl	800d1f4 <__lshift>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4682      	mov	sl, r0
 800c0f6:	f001 f8e9 	bl	800d2cc <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	dcb2      	bgt.n	800c064 <_dtoa_r+0xac4>
 800c0fe:	d102      	bne.n	800c106 <_dtoa_r+0xb66>
 800c100:	9b02      	ldr	r3, [sp, #8]
 800c102:	07db      	lsls	r3, r3, #31
 800c104:	d4ae      	bmi.n	800c064 <_dtoa_r+0xac4>
 800c106:	463b      	mov	r3, r7
 800c108:	461f      	mov	r7, r3
 800c10a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c10e:	2a30      	cmp	r2, #48	; 0x30
 800c110:	d0fa      	beq.n	800c108 <_dtoa_r+0xb68>
 800c112:	e6fb      	b.n	800bf0c <_dtoa_r+0x96c>
 800c114:	9a08      	ldr	r2, [sp, #32]
 800c116:	429a      	cmp	r2, r3
 800c118:	d1a5      	bne.n	800c066 <_dtoa_r+0xac6>
 800c11a:	2331      	movs	r3, #49	; 0x31
 800c11c:	f109 0901 	add.w	r9, r9, #1
 800c120:	7013      	strb	r3, [r2, #0]
 800c122:	e6f3      	b.n	800bf0c <_dtoa_r+0x96c>
 800c124:	4b13      	ldr	r3, [pc, #76]	; (800c174 <_dtoa_r+0xbd4>)
 800c126:	f7ff baa6 	b.w	800b676 <_dtoa_r+0xd6>
 800c12a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f47f aa7f 	bne.w	800b630 <_dtoa_r+0x90>
 800c132:	4b11      	ldr	r3, [pc, #68]	; (800c178 <_dtoa_r+0xbd8>)
 800c134:	f7ff ba9f 	b.w	800b676 <_dtoa_r+0xd6>
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	dc03      	bgt.n	800c146 <_dtoa_r+0xba6>
 800c13e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c140:	2b02      	cmp	r3, #2
 800c142:	f73f aecc 	bgt.w	800bede <_dtoa_r+0x93e>
 800c146:	9f08      	ldr	r7, [sp, #32]
 800c148:	4621      	mov	r1, r4
 800c14a:	4650      	mov	r0, sl
 800c14c:	f7ff f99c 	bl	800b488 <quorem>
 800c150:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c154:	f807 3b01 	strb.w	r3, [r7], #1
 800c158:	9a08      	ldr	r2, [sp, #32]
 800c15a:	1aba      	subs	r2, r7, r2
 800c15c:	4593      	cmp	fp, r2
 800c15e:	ddb9      	ble.n	800c0d4 <_dtoa_r+0xb34>
 800c160:	4651      	mov	r1, sl
 800c162:	2300      	movs	r3, #0
 800c164:	220a      	movs	r2, #10
 800c166:	4628      	mov	r0, r5
 800c168:	f000 fe4c 	bl	800ce04 <__multadd>
 800c16c:	4682      	mov	sl, r0
 800c16e:	e7eb      	b.n	800c148 <_dtoa_r+0xba8>
 800c170:	0800ee2c 	.word	0x0800ee2c
 800c174:	0800e59c 	.word	0x0800e59c
 800c178:	0800eda9 	.word	0x0800eda9

0800c17c <__sflush_r>:
 800c17c:	898a      	ldrh	r2, [r1, #12]
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	4605      	mov	r5, r0
 800c184:	0710      	lsls	r0, r2, #28
 800c186:	460c      	mov	r4, r1
 800c188:	d458      	bmi.n	800c23c <__sflush_r+0xc0>
 800c18a:	684b      	ldr	r3, [r1, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	dc05      	bgt.n	800c19c <__sflush_r+0x20>
 800c190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	dc02      	bgt.n	800c19c <__sflush_r+0x20>
 800c196:	2000      	movs	r0, #0
 800c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d0f9      	beq.n	800c196 <__sflush_r+0x1a>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1a8:	682f      	ldr	r7, [r5, #0]
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	d032      	beq.n	800c214 <__sflush_r+0x98>
 800c1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	075a      	lsls	r2, r3, #29
 800c1b4:	d505      	bpl.n	800c1c2 <__sflush_r+0x46>
 800c1b6:	6863      	ldr	r3, [r4, #4]
 800c1b8:	1ac0      	subs	r0, r0, r3
 800c1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1bc:	b10b      	cbz	r3, 800c1c2 <__sflush_r+0x46>
 800c1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1c0:	1ac0      	subs	r0, r0, r3
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1c8:	6a21      	ldr	r1, [r4, #32]
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b0      	blx	r6
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	d106      	bne.n	800c1e2 <__sflush_r+0x66>
 800c1d4:	6829      	ldr	r1, [r5, #0]
 800c1d6:	291d      	cmp	r1, #29
 800c1d8:	d82c      	bhi.n	800c234 <__sflush_r+0xb8>
 800c1da:	4a2a      	ldr	r2, [pc, #168]	; (800c284 <__sflush_r+0x108>)
 800c1dc:	40ca      	lsrs	r2, r1
 800c1de:	07d6      	lsls	r6, r2, #31
 800c1e0:	d528      	bpl.n	800c234 <__sflush_r+0xb8>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	6062      	str	r2, [r4, #4]
 800c1e6:	04d9      	lsls	r1, r3, #19
 800c1e8:	6922      	ldr	r2, [r4, #16]
 800c1ea:	6022      	str	r2, [r4, #0]
 800c1ec:	d504      	bpl.n	800c1f8 <__sflush_r+0x7c>
 800c1ee:	1c42      	adds	r2, r0, #1
 800c1f0:	d101      	bne.n	800c1f6 <__sflush_r+0x7a>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	b903      	cbnz	r3, 800c1f8 <__sflush_r+0x7c>
 800c1f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1fa:	602f      	str	r7, [r5, #0]
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	d0ca      	beq.n	800c196 <__sflush_r+0x1a>
 800c200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c204:	4299      	cmp	r1, r3
 800c206:	d002      	beq.n	800c20e <__sflush_r+0x92>
 800c208:	4628      	mov	r0, r5
 800c20a:	f7fd f955 	bl	80094b8 <_free_r>
 800c20e:	2000      	movs	r0, #0
 800c210:	6360      	str	r0, [r4, #52]	; 0x34
 800c212:	e7c1      	b.n	800c198 <__sflush_r+0x1c>
 800c214:	6a21      	ldr	r1, [r4, #32]
 800c216:	2301      	movs	r3, #1
 800c218:	4628      	mov	r0, r5
 800c21a:	47b0      	blx	r6
 800c21c:	1c41      	adds	r1, r0, #1
 800c21e:	d1c7      	bne.n	800c1b0 <__sflush_r+0x34>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0c4      	beq.n	800c1b0 <__sflush_r+0x34>
 800c226:	2b1d      	cmp	r3, #29
 800c228:	d001      	beq.n	800c22e <__sflush_r+0xb2>
 800c22a:	2b16      	cmp	r3, #22
 800c22c:	d101      	bne.n	800c232 <__sflush_r+0xb6>
 800c22e:	602f      	str	r7, [r5, #0]
 800c230:	e7b1      	b.n	800c196 <__sflush_r+0x1a>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c238:	81a3      	strh	r3, [r4, #12]
 800c23a:	e7ad      	b.n	800c198 <__sflush_r+0x1c>
 800c23c:	690f      	ldr	r7, [r1, #16]
 800c23e:	2f00      	cmp	r7, #0
 800c240:	d0a9      	beq.n	800c196 <__sflush_r+0x1a>
 800c242:	0793      	lsls	r3, r2, #30
 800c244:	680e      	ldr	r6, [r1, #0]
 800c246:	bf08      	it	eq
 800c248:	694b      	ldreq	r3, [r1, #20]
 800c24a:	600f      	str	r7, [r1, #0]
 800c24c:	bf18      	it	ne
 800c24e:	2300      	movne	r3, #0
 800c250:	eba6 0807 	sub.w	r8, r6, r7
 800c254:	608b      	str	r3, [r1, #8]
 800c256:	f1b8 0f00 	cmp.w	r8, #0
 800c25a:	dd9c      	ble.n	800c196 <__sflush_r+0x1a>
 800c25c:	6a21      	ldr	r1, [r4, #32]
 800c25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c260:	4643      	mov	r3, r8
 800c262:	463a      	mov	r2, r7
 800c264:	4628      	mov	r0, r5
 800c266:	47b0      	blx	r6
 800c268:	2800      	cmp	r0, #0
 800c26a:	dc06      	bgt.n	800c27a <__sflush_r+0xfe>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	e78e      	b.n	800c198 <__sflush_r+0x1c>
 800c27a:	4407      	add	r7, r0
 800c27c:	eba8 0800 	sub.w	r8, r8, r0
 800c280:	e7e9      	b.n	800c256 <__sflush_r+0xda>
 800c282:	bf00      	nop
 800c284:	20400001 	.word	0x20400001

0800c288 <_fflush_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	690b      	ldr	r3, [r1, #16]
 800c28c:	4605      	mov	r5, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	b913      	cbnz	r3, 800c298 <_fflush_r+0x10>
 800c292:	2500      	movs	r5, #0
 800c294:	4628      	mov	r0, r5
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	b118      	cbz	r0, 800c2a2 <_fflush_r+0x1a>
 800c29a:	6983      	ldr	r3, [r0, #24]
 800c29c:	b90b      	cbnz	r3, 800c2a2 <_fflush_r+0x1a>
 800c29e:	f000 f8c5 	bl	800c42c <__sinit>
 800c2a2:	4b14      	ldr	r3, [pc, #80]	; (800c2f4 <_fflush_r+0x6c>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d11b      	bne.n	800c2e0 <_fflush_r+0x58>
 800c2a8:	686c      	ldr	r4, [r5, #4]
 800c2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0ef      	beq.n	800c292 <_fflush_r+0xa>
 800c2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2b4:	07d0      	lsls	r0, r2, #31
 800c2b6:	d404      	bmi.n	800c2c2 <_fflush_r+0x3a>
 800c2b8:	0599      	lsls	r1, r3, #22
 800c2ba:	d402      	bmi.n	800c2c2 <_fflush_r+0x3a>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2be:	f000 fcba 	bl	800cc36 <__retarget_lock_acquire_recursive>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f7ff ff59 	bl	800c17c <__sflush_r>
 800c2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2cc:	07da      	lsls	r2, r3, #31
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	d4e0      	bmi.n	800c294 <_fflush_r+0xc>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	059b      	lsls	r3, r3, #22
 800c2d6:	d4dd      	bmi.n	800c294 <_fflush_r+0xc>
 800c2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2da:	f000 fcad 	bl	800cc38 <__retarget_lock_release_recursive>
 800c2de:	e7d9      	b.n	800c294 <_fflush_r+0xc>
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <_fflush_r+0x70>)
 800c2e2:	429c      	cmp	r4, r3
 800c2e4:	d101      	bne.n	800c2ea <_fflush_r+0x62>
 800c2e6:	68ac      	ldr	r4, [r5, #8]
 800c2e8:	e7df      	b.n	800c2aa <_fflush_r+0x22>
 800c2ea:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <_fflush_r+0x74>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	bf08      	it	eq
 800c2f0:	68ec      	ldreq	r4, [r5, #12]
 800c2f2:	e7da      	b.n	800c2aa <_fflush_r+0x22>
 800c2f4:	0800ee60 	.word	0x0800ee60
 800c2f8:	0800ee80 	.word	0x0800ee80
 800c2fc:	0800ee40 	.word	0x0800ee40

0800c300 <fileno>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	4e1a      	ldr	r6, [pc, #104]	; (800c36c <fileno+0x6c>)
 800c304:	6835      	ldr	r5, [r6, #0]
 800c306:	4604      	mov	r4, r0
 800c308:	b125      	cbz	r5, 800c314 <fileno+0x14>
 800c30a:	69ab      	ldr	r3, [r5, #24]
 800c30c:	b913      	cbnz	r3, 800c314 <fileno+0x14>
 800c30e:	4628      	mov	r0, r5
 800c310:	f000 f88c 	bl	800c42c <__sinit>
 800c314:	4b16      	ldr	r3, [pc, #88]	; (800c370 <fileno+0x70>)
 800c316:	429c      	cmp	r4, r3
 800c318:	d118      	bne.n	800c34c <fileno+0x4c>
 800c31a:	686c      	ldr	r4, [r5, #4]
 800c31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31e:	07d8      	lsls	r0, r3, #31
 800c320:	d405      	bmi.n	800c32e <fileno+0x2e>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	0599      	lsls	r1, r3, #22
 800c326:	d402      	bmi.n	800c32e <fileno+0x2e>
 800c328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32a:	f000 fc84 	bl	800cc36 <__retarget_lock_acquire_recursive>
 800c32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c332:	b1ab      	cbz	r3, 800c360 <fileno+0x60>
 800c334:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800c338:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c33a:	07d2      	lsls	r2, r2, #31
 800c33c:	d404      	bmi.n	800c348 <fileno+0x48>
 800c33e:	059b      	lsls	r3, r3, #22
 800c340:	d402      	bmi.n	800c348 <fileno+0x48>
 800c342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c344:	f000 fc78 	bl	800cc38 <__retarget_lock_release_recursive>
 800c348:	4628      	mov	r0, r5
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	4b09      	ldr	r3, [pc, #36]	; (800c374 <fileno+0x74>)
 800c34e:	429c      	cmp	r4, r3
 800c350:	d101      	bne.n	800c356 <fileno+0x56>
 800c352:	68ac      	ldr	r4, [r5, #8]
 800c354:	e7e2      	b.n	800c31c <fileno+0x1c>
 800c356:	4b08      	ldr	r3, [pc, #32]	; (800c378 <fileno+0x78>)
 800c358:	429c      	cmp	r4, r3
 800c35a:	bf08      	it	eq
 800c35c:	68ec      	ldreq	r4, [r5, #12]
 800c35e:	e7dd      	b.n	800c31c <fileno+0x1c>
 800c360:	6832      	ldr	r2, [r6, #0]
 800c362:	2109      	movs	r1, #9
 800c364:	6011      	str	r1, [r2, #0]
 800c366:	f04f 35ff 	mov.w	r5, #4294967295
 800c36a:	e7e5      	b.n	800c338 <fileno+0x38>
 800c36c:	2000000c 	.word	0x2000000c
 800c370:	0800ee60 	.word	0x0800ee60
 800c374:	0800ee80 	.word	0x0800ee80
 800c378:	0800ee40 	.word	0x0800ee40

0800c37c <std>:
 800c37c:	2300      	movs	r3, #0
 800c37e:	b510      	push	{r4, lr}
 800c380:	4604      	mov	r4, r0
 800c382:	e9c0 3300 	strd	r3, r3, [r0]
 800c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c38a:	6083      	str	r3, [r0, #8]
 800c38c:	8181      	strh	r1, [r0, #12]
 800c38e:	6643      	str	r3, [r0, #100]	; 0x64
 800c390:	81c2      	strh	r2, [r0, #14]
 800c392:	6183      	str	r3, [r0, #24]
 800c394:	4619      	mov	r1, r3
 800c396:	2208      	movs	r2, #8
 800c398:	305c      	adds	r0, #92	; 0x5c
 800c39a:	f7fd f885 	bl	80094a8 <memset>
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <std+0x38>)
 800c3a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c3a2:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <std+0x3c>)
 800c3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <std+0x40>)
 800c3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <std+0x44>)
 800c3ac:	6224      	str	r4, [r4, #32]
 800c3ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800dc39 	.word	0x0800dc39
 800c3b8:	0800dc5b 	.word	0x0800dc5b
 800c3bc:	0800dc93 	.word	0x0800dc93
 800c3c0:	0800dcb7 	.word	0x0800dcb7

0800c3c4 <_cleanup_r>:
 800c3c4:	4901      	ldr	r1, [pc, #4]	; (800c3cc <_cleanup_r+0x8>)
 800c3c6:	f000 b8af 	b.w	800c528 <_fwalk_reent>
 800c3ca:	bf00      	nop
 800c3cc:	0800c289 	.word	0x0800c289

0800c3d0 <__sfmoreglue>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	1e4a      	subs	r2, r1, #1
 800c3d4:	2568      	movs	r5, #104	; 0x68
 800c3d6:	4355      	muls	r5, r2
 800c3d8:	460e      	mov	r6, r1
 800c3da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3de:	f7fd f8b9 	bl	8009554 <_malloc_r>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b140      	cbz	r0, 800c3f8 <__sfmoreglue+0x28>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	60a0      	str	r0, [r4, #8]
 800c3f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3f4:	f7fd f858 	bl	80094a8 <memset>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}

0800c3fc <__sfp_lock_acquire>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sfp_lock_acquire+0x8>)
 800c3fe:	f000 bc1a 	b.w	800cc36 <__retarget_lock_acquire_recursive>
 800c402:	bf00      	nop
 800c404:	20000600 	.word	0x20000600

0800c408 <__sfp_lock_release>:
 800c408:	4801      	ldr	r0, [pc, #4]	; (800c410 <__sfp_lock_release+0x8>)
 800c40a:	f000 bc15 	b.w	800cc38 <__retarget_lock_release_recursive>
 800c40e:	bf00      	nop
 800c410:	20000600 	.word	0x20000600

0800c414 <__sinit_lock_acquire>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__sinit_lock_acquire+0x8>)
 800c416:	f000 bc0e 	b.w	800cc36 <__retarget_lock_acquire_recursive>
 800c41a:	bf00      	nop
 800c41c:	200005fb 	.word	0x200005fb

0800c420 <__sinit_lock_release>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__sinit_lock_release+0x8>)
 800c422:	f000 bc09 	b.w	800cc38 <__retarget_lock_release_recursive>
 800c426:	bf00      	nop
 800c428:	200005fb 	.word	0x200005fb

0800c42c <__sinit>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4604      	mov	r4, r0
 800c430:	f7ff fff0 	bl	800c414 <__sinit_lock_acquire>
 800c434:	69a3      	ldr	r3, [r4, #24]
 800c436:	b11b      	cbz	r3, 800c440 <__sinit+0x14>
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43c:	f7ff bff0 	b.w	800c420 <__sinit_lock_release>
 800c440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c444:	6523      	str	r3, [r4, #80]	; 0x50
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <__sinit+0x68>)
 800c448:	4a13      	ldr	r2, [pc, #76]	; (800c498 <__sinit+0x6c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c44e:	42a3      	cmp	r3, r4
 800c450:	bf04      	itt	eq
 800c452:	2301      	moveq	r3, #1
 800c454:	61a3      	streq	r3, [r4, #24]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 f820 	bl	800c49c <__sfp>
 800c45c:	6060      	str	r0, [r4, #4]
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 f81c 	bl	800c49c <__sfp>
 800c464:	60a0      	str	r0, [r4, #8]
 800c466:	4620      	mov	r0, r4
 800c468:	f000 f818 	bl	800c49c <__sfp>
 800c46c:	2200      	movs	r2, #0
 800c46e:	60e0      	str	r0, [r4, #12]
 800c470:	2104      	movs	r1, #4
 800c472:	6860      	ldr	r0, [r4, #4]
 800c474:	f7ff ff82 	bl	800c37c <std>
 800c478:	68a0      	ldr	r0, [r4, #8]
 800c47a:	2201      	movs	r2, #1
 800c47c:	2109      	movs	r1, #9
 800c47e:	f7ff ff7d 	bl	800c37c <std>
 800c482:	68e0      	ldr	r0, [r4, #12]
 800c484:	2202      	movs	r2, #2
 800c486:	2112      	movs	r1, #18
 800c488:	f7ff ff78 	bl	800c37c <std>
 800c48c:	2301      	movs	r3, #1
 800c48e:	61a3      	str	r3, [r4, #24]
 800c490:	e7d2      	b.n	800c438 <__sinit+0xc>
 800c492:	bf00      	nop
 800c494:	0800e588 	.word	0x0800e588
 800c498:	0800c3c5 	.word	0x0800c3c5

0800c49c <__sfp>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	4607      	mov	r7, r0
 800c4a0:	f7ff ffac 	bl	800c3fc <__sfp_lock_acquire>
 800c4a4:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <__sfp+0x84>)
 800c4a6:	681e      	ldr	r6, [r3, #0]
 800c4a8:	69b3      	ldr	r3, [r6, #24]
 800c4aa:	b913      	cbnz	r3, 800c4b2 <__sfp+0x16>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff ffbd 	bl	800c42c <__sinit>
 800c4b2:	3648      	adds	r6, #72	; 0x48
 800c4b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	d503      	bpl.n	800c4c4 <__sfp+0x28>
 800c4bc:	6833      	ldr	r3, [r6, #0]
 800c4be:	b30b      	cbz	r3, 800c504 <__sfp+0x68>
 800c4c0:	6836      	ldr	r6, [r6, #0]
 800c4c2:	e7f7      	b.n	800c4b4 <__sfp+0x18>
 800c4c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4c8:	b9d5      	cbnz	r5, 800c500 <__sfp+0x64>
 800c4ca:	4b16      	ldr	r3, [pc, #88]	; (800c524 <__sfp+0x88>)
 800c4cc:	60e3      	str	r3, [r4, #12]
 800c4ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c4d4:	f000 fbae 	bl	800cc34 <__retarget_lock_init_recursive>
 800c4d8:	f7ff ff96 	bl	800c408 <__sfp_lock_release>
 800c4dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4e4:	6025      	str	r5, [r4, #0]
 800c4e6:	61a5      	str	r5, [r4, #24]
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4f0:	f7fc ffda 	bl	80094a8 <memset>
 800c4f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c500:	3468      	adds	r4, #104	; 0x68
 800c502:	e7d9      	b.n	800c4b8 <__sfp+0x1c>
 800c504:	2104      	movs	r1, #4
 800c506:	4638      	mov	r0, r7
 800c508:	f7ff ff62 	bl	800c3d0 <__sfmoreglue>
 800c50c:	4604      	mov	r4, r0
 800c50e:	6030      	str	r0, [r6, #0]
 800c510:	2800      	cmp	r0, #0
 800c512:	d1d5      	bne.n	800c4c0 <__sfp+0x24>
 800c514:	f7ff ff78 	bl	800c408 <__sfp_lock_release>
 800c518:	230c      	movs	r3, #12
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	e7ee      	b.n	800c4fc <__sfp+0x60>
 800c51e:	bf00      	nop
 800c520:	0800e588 	.word	0x0800e588
 800c524:	ffff0001 	.word	0xffff0001

0800c528 <_fwalk_reent>:
 800c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4606      	mov	r6, r0
 800c52e:	4688      	mov	r8, r1
 800c530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c534:	2700      	movs	r7, #0
 800c536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c53a:	f1b9 0901 	subs.w	r9, r9, #1
 800c53e:	d505      	bpl.n	800c54c <_fwalk_reent+0x24>
 800c540:	6824      	ldr	r4, [r4, #0]
 800c542:	2c00      	cmp	r4, #0
 800c544:	d1f7      	bne.n	800c536 <_fwalk_reent+0xe>
 800c546:	4638      	mov	r0, r7
 800c548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c54c:	89ab      	ldrh	r3, [r5, #12]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d907      	bls.n	800c562 <_fwalk_reent+0x3a>
 800c552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c556:	3301      	adds	r3, #1
 800c558:	d003      	beq.n	800c562 <_fwalk_reent+0x3a>
 800c55a:	4629      	mov	r1, r5
 800c55c:	4630      	mov	r0, r6
 800c55e:	47c0      	blx	r8
 800c560:	4307      	orrs	r7, r0
 800c562:	3568      	adds	r5, #104	; 0x68
 800c564:	e7e9      	b.n	800c53a <_fwalk_reent+0x12>

0800c566 <rshift>:
 800c566:	6903      	ldr	r3, [r0, #16]
 800c568:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c570:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c574:	f100 0414 	add.w	r4, r0, #20
 800c578:	dd45      	ble.n	800c606 <rshift+0xa0>
 800c57a:	f011 011f 	ands.w	r1, r1, #31
 800c57e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c582:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c586:	d10c      	bne.n	800c5a2 <rshift+0x3c>
 800c588:	f100 0710 	add.w	r7, r0, #16
 800c58c:	4629      	mov	r1, r5
 800c58e:	42b1      	cmp	r1, r6
 800c590:	d334      	bcc.n	800c5fc <rshift+0x96>
 800c592:	1a9b      	subs	r3, r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	1eea      	subs	r2, r5, #3
 800c598:	4296      	cmp	r6, r2
 800c59a:	bf38      	it	cc
 800c59c:	2300      	movcc	r3, #0
 800c59e:	4423      	add	r3, r4
 800c5a0:	e015      	b.n	800c5ce <rshift+0x68>
 800c5a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5a6:	f1c1 0820 	rsb	r8, r1, #32
 800c5aa:	40cf      	lsrs	r7, r1
 800c5ac:	f105 0e04 	add.w	lr, r5, #4
 800c5b0:	46a1      	mov	r9, r4
 800c5b2:	4576      	cmp	r6, lr
 800c5b4:	46f4      	mov	ip, lr
 800c5b6:	d815      	bhi.n	800c5e4 <rshift+0x7e>
 800c5b8:	1a9b      	subs	r3, r3, r2
 800c5ba:	009a      	lsls	r2, r3, #2
 800c5bc:	3a04      	subs	r2, #4
 800c5be:	3501      	adds	r5, #1
 800c5c0:	42ae      	cmp	r6, r5
 800c5c2:	bf38      	it	cc
 800c5c4:	2200      	movcc	r2, #0
 800c5c6:	18a3      	adds	r3, r4, r2
 800c5c8:	50a7      	str	r7, [r4, r2]
 800c5ca:	b107      	cbz	r7, 800c5ce <rshift+0x68>
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	1b1a      	subs	r2, r3, r4
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5d6:	bf08      	it	eq
 800c5d8:	2300      	moveq	r3, #0
 800c5da:	6102      	str	r2, [r0, #16]
 800c5dc:	bf08      	it	eq
 800c5de:	6143      	streq	r3, [r0, #20]
 800c5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	f8dc c000 	ldr.w	ip, [ip]
 800c5e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ec:	ea4c 0707 	orr.w	r7, ip, r7
 800c5f0:	f849 7b04 	str.w	r7, [r9], #4
 800c5f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5f8:	40cf      	lsrs	r7, r1
 800c5fa:	e7da      	b.n	800c5b2 <rshift+0x4c>
 800c5fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c600:	f847 cf04 	str.w	ip, [r7, #4]!
 800c604:	e7c3      	b.n	800c58e <rshift+0x28>
 800c606:	4623      	mov	r3, r4
 800c608:	e7e1      	b.n	800c5ce <rshift+0x68>

0800c60a <__hexdig_fun>:
 800c60a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c60e:	2b09      	cmp	r3, #9
 800c610:	d802      	bhi.n	800c618 <__hexdig_fun+0xe>
 800c612:	3820      	subs	r0, #32
 800c614:	b2c0      	uxtb	r0, r0
 800c616:	4770      	bx	lr
 800c618:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c61c:	2b05      	cmp	r3, #5
 800c61e:	d801      	bhi.n	800c624 <__hexdig_fun+0x1a>
 800c620:	3847      	subs	r0, #71	; 0x47
 800c622:	e7f7      	b.n	800c614 <__hexdig_fun+0xa>
 800c624:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c628:	2b05      	cmp	r3, #5
 800c62a:	d801      	bhi.n	800c630 <__hexdig_fun+0x26>
 800c62c:	3827      	subs	r0, #39	; 0x27
 800c62e:	e7f1      	b.n	800c614 <__hexdig_fun+0xa>
 800c630:	2000      	movs	r0, #0
 800c632:	4770      	bx	lr

0800c634 <__gethex>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	b08b      	sub	sp, #44	; 0x2c
 800c63a:	468b      	mov	fp, r1
 800c63c:	9306      	str	r3, [sp, #24]
 800c63e:	4bb9      	ldr	r3, [pc, #740]	; (800c924 <__gethex+0x2f0>)
 800c640:	9002      	str	r0, [sp, #8]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	9303      	str	r3, [sp, #12]
 800c646:	4618      	mov	r0, r3
 800c648:	4690      	mov	r8, r2
 800c64a:	f7f3 fda3 	bl	8000194 <strlen>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	f8db 2000 	ldr.w	r2, [fp]
 800c654:	4403      	add	r3, r0
 800c656:	4682      	mov	sl, r0
 800c658:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c65c:	9307      	str	r3, [sp, #28]
 800c65e:	1c93      	adds	r3, r2, #2
 800c660:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c664:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c668:	32fe      	adds	r2, #254	; 0xfe
 800c66a:	18d1      	adds	r1, r2, r3
 800c66c:	461f      	mov	r7, r3
 800c66e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c672:	9101      	str	r1, [sp, #4]
 800c674:	2830      	cmp	r0, #48	; 0x30
 800c676:	d0f8      	beq.n	800c66a <__gethex+0x36>
 800c678:	f7ff ffc7 	bl	800c60a <__hexdig_fun>
 800c67c:	4604      	mov	r4, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d13a      	bne.n	800c6f8 <__gethex+0xc4>
 800c682:	9903      	ldr	r1, [sp, #12]
 800c684:	4652      	mov	r2, sl
 800c686:	4638      	mov	r0, r7
 800c688:	f001 fb19 	bl	800dcbe <strncmp>
 800c68c:	4605      	mov	r5, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d166      	bne.n	800c760 <__gethex+0x12c>
 800c692:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c696:	eb07 060a 	add.w	r6, r7, sl
 800c69a:	f7ff ffb6 	bl	800c60a <__hexdig_fun>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d060      	beq.n	800c764 <__gethex+0x130>
 800c6a2:	4633      	mov	r3, r6
 800c6a4:	7818      	ldrb	r0, [r3, #0]
 800c6a6:	2830      	cmp	r0, #48	; 0x30
 800c6a8:	461f      	mov	r7, r3
 800c6aa:	f103 0301 	add.w	r3, r3, #1
 800c6ae:	d0f9      	beq.n	800c6a4 <__gethex+0x70>
 800c6b0:	f7ff ffab 	bl	800c60a <__hexdig_fun>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	fab0 f480 	clz	r4, r0
 800c6ba:	0964      	lsrs	r4, r4, #5
 800c6bc:	4635      	mov	r5, r6
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	4616      	mov	r6, r2
 800c6c4:	3201      	adds	r2, #1
 800c6c6:	7830      	ldrb	r0, [r6, #0]
 800c6c8:	f7ff ff9f 	bl	800c60a <__hexdig_fun>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	d1f8      	bne.n	800c6c2 <__gethex+0x8e>
 800c6d0:	9903      	ldr	r1, [sp, #12]
 800c6d2:	4652      	mov	r2, sl
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f001 faf2 	bl	800dcbe <strncmp>
 800c6da:	b980      	cbnz	r0, 800c6fe <__gethex+0xca>
 800c6dc:	b94d      	cbnz	r5, 800c6f2 <__gethex+0xbe>
 800c6de:	eb06 050a 	add.w	r5, r6, sl
 800c6e2:	462a      	mov	r2, r5
 800c6e4:	4616      	mov	r6, r2
 800c6e6:	3201      	adds	r2, #1
 800c6e8:	7830      	ldrb	r0, [r6, #0]
 800c6ea:	f7ff ff8e 	bl	800c60a <__hexdig_fun>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d1f8      	bne.n	800c6e4 <__gethex+0xb0>
 800c6f2:	1bad      	subs	r5, r5, r6
 800c6f4:	00ad      	lsls	r5, r5, #2
 800c6f6:	e004      	b.n	800c702 <__gethex+0xce>
 800c6f8:	2400      	movs	r4, #0
 800c6fa:	4625      	mov	r5, r4
 800c6fc:	e7e0      	b.n	800c6c0 <__gethex+0x8c>
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	d1f7      	bne.n	800c6f2 <__gethex+0xbe>
 800c702:	7833      	ldrb	r3, [r6, #0]
 800c704:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c708:	2b50      	cmp	r3, #80	; 0x50
 800c70a:	d139      	bne.n	800c780 <__gethex+0x14c>
 800c70c:	7873      	ldrb	r3, [r6, #1]
 800c70e:	2b2b      	cmp	r3, #43	; 0x2b
 800c710:	d02a      	beq.n	800c768 <__gethex+0x134>
 800c712:	2b2d      	cmp	r3, #45	; 0x2d
 800c714:	d02c      	beq.n	800c770 <__gethex+0x13c>
 800c716:	1c71      	adds	r1, r6, #1
 800c718:	f04f 0900 	mov.w	r9, #0
 800c71c:	7808      	ldrb	r0, [r1, #0]
 800c71e:	f7ff ff74 	bl	800c60a <__hexdig_fun>
 800c722:	1e43      	subs	r3, r0, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b18      	cmp	r3, #24
 800c728:	d82a      	bhi.n	800c780 <__gethex+0x14c>
 800c72a:	f1a0 0210 	sub.w	r2, r0, #16
 800c72e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c732:	f7ff ff6a 	bl	800c60a <__hexdig_fun>
 800c736:	1e43      	subs	r3, r0, #1
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b18      	cmp	r3, #24
 800c73c:	d91b      	bls.n	800c776 <__gethex+0x142>
 800c73e:	f1b9 0f00 	cmp.w	r9, #0
 800c742:	d000      	beq.n	800c746 <__gethex+0x112>
 800c744:	4252      	negs	r2, r2
 800c746:	4415      	add	r5, r2
 800c748:	f8cb 1000 	str.w	r1, [fp]
 800c74c:	b1d4      	cbz	r4, 800c784 <__gethex+0x150>
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	bf14      	ite	ne
 800c754:	2700      	movne	r7, #0
 800c756:	2706      	moveq	r7, #6
 800c758:	4638      	mov	r0, r7
 800c75a:	b00b      	add	sp, #44	; 0x2c
 800c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c760:	463e      	mov	r6, r7
 800c762:	4625      	mov	r5, r4
 800c764:	2401      	movs	r4, #1
 800c766:	e7cc      	b.n	800c702 <__gethex+0xce>
 800c768:	f04f 0900 	mov.w	r9, #0
 800c76c:	1cb1      	adds	r1, r6, #2
 800c76e:	e7d5      	b.n	800c71c <__gethex+0xe8>
 800c770:	f04f 0901 	mov.w	r9, #1
 800c774:	e7fa      	b.n	800c76c <__gethex+0x138>
 800c776:	230a      	movs	r3, #10
 800c778:	fb03 0202 	mla	r2, r3, r2, r0
 800c77c:	3a10      	subs	r2, #16
 800c77e:	e7d6      	b.n	800c72e <__gethex+0xfa>
 800c780:	4631      	mov	r1, r6
 800c782:	e7e1      	b.n	800c748 <__gethex+0x114>
 800c784:	1bf3      	subs	r3, r6, r7
 800c786:	3b01      	subs	r3, #1
 800c788:	4621      	mov	r1, r4
 800c78a:	2b07      	cmp	r3, #7
 800c78c:	dc0a      	bgt.n	800c7a4 <__gethex+0x170>
 800c78e:	9802      	ldr	r0, [sp, #8]
 800c790:	f000 fad6 	bl	800cd40 <_Balloc>
 800c794:	4604      	mov	r4, r0
 800c796:	b940      	cbnz	r0, 800c7aa <__gethex+0x176>
 800c798:	4b63      	ldr	r3, [pc, #396]	; (800c928 <__gethex+0x2f4>)
 800c79a:	4602      	mov	r2, r0
 800c79c:	21de      	movs	r1, #222	; 0xde
 800c79e:	4863      	ldr	r0, [pc, #396]	; (800c92c <__gethex+0x2f8>)
 800c7a0:	f001 faac 	bl	800dcfc <__assert_func>
 800c7a4:	3101      	adds	r1, #1
 800c7a6:	105b      	asrs	r3, r3, #1
 800c7a8:	e7ef      	b.n	800c78a <__gethex+0x156>
 800c7aa:	f100 0914 	add.w	r9, r0, #20
 800c7ae:	f04f 0b00 	mov.w	fp, #0
 800c7b2:	f1ca 0301 	rsb	r3, sl, #1
 800c7b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800c7ba:	f8cd b004 	str.w	fp, [sp, #4]
 800c7be:	9308      	str	r3, [sp, #32]
 800c7c0:	42b7      	cmp	r7, r6
 800c7c2:	d33f      	bcc.n	800c844 <__gethex+0x210>
 800c7c4:	9f04      	ldr	r7, [sp, #16]
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	f847 3b04 	str.w	r3, [r7], #4
 800c7cc:	eba7 0709 	sub.w	r7, r7, r9
 800c7d0:	10bf      	asrs	r7, r7, #2
 800c7d2:	6127      	str	r7, [r4, #16]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fba9 	bl	800cf2c <__hi0bits>
 800c7da:	017f      	lsls	r7, r7, #5
 800c7dc:	f8d8 6000 	ldr.w	r6, [r8]
 800c7e0:	1a3f      	subs	r7, r7, r0
 800c7e2:	42b7      	cmp	r7, r6
 800c7e4:	dd62      	ble.n	800c8ac <__gethex+0x278>
 800c7e6:	1bbf      	subs	r7, r7, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 ff3b 	bl	800d666 <__any_on>
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	b1a8      	cbz	r0, 800c820 <__gethex+0x1ec>
 800c7f4:	1e7b      	subs	r3, r7, #1
 800c7f6:	1159      	asrs	r1, r3, #5
 800c7f8:	f003 021f 	and.w	r2, r3, #31
 800c7fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c800:	f04f 0a01 	mov.w	sl, #1
 800c804:	fa0a f202 	lsl.w	r2, sl, r2
 800c808:	420a      	tst	r2, r1
 800c80a:	d009      	beq.n	800c820 <__gethex+0x1ec>
 800c80c:	4553      	cmp	r3, sl
 800c80e:	dd05      	ble.n	800c81c <__gethex+0x1e8>
 800c810:	1eb9      	subs	r1, r7, #2
 800c812:	4620      	mov	r0, r4
 800c814:	f000 ff27 	bl	800d666 <__any_on>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d144      	bne.n	800c8a6 <__gethex+0x272>
 800c81c:	f04f 0a02 	mov.w	sl, #2
 800c820:	4639      	mov	r1, r7
 800c822:	4620      	mov	r0, r4
 800c824:	f7ff fe9f 	bl	800c566 <rshift>
 800c828:	443d      	add	r5, r7
 800c82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c82e:	42ab      	cmp	r3, r5
 800c830:	da4a      	bge.n	800c8c8 <__gethex+0x294>
 800c832:	9802      	ldr	r0, [sp, #8]
 800c834:	4621      	mov	r1, r4
 800c836:	f000 fac3 	bl	800cdc0 <_Bfree>
 800c83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c83c:	2300      	movs	r3, #0
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	27a3      	movs	r7, #163	; 0xa3
 800c842:	e789      	b.n	800c758 <__gethex+0x124>
 800c844:	1e73      	subs	r3, r6, #1
 800c846:	9a07      	ldr	r2, [sp, #28]
 800c848:	9305      	str	r3, [sp, #20]
 800c84a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c84e:	4293      	cmp	r3, r2
 800c850:	d019      	beq.n	800c886 <__gethex+0x252>
 800c852:	f1bb 0f20 	cmp.w	fp, #32
 800c856:	d107      	bne.n	800c868 <__gethex+0x234>
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	9a01      	ldr	r2, [sp, #4]
 800c85c:	f843 2b04 	str.w	r2, [r3], #4
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	2300      	movs	r3, #0
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	469b      	mov	fp, r3
 800c868:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c86c:	f7ff fecd 	bl	800c60a <__hexdig_fun>
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	f000 000f 	and.w	r0, r0, #15
 800c876:	fa00 f00b 	lsl.w	r0, r0, fp
 800c87a:	4303      	orrs	r3, r0
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	f10b 0b04 	add.w	fp, fp, #4
 800c882:	9b05      	ldr	r3, [sp, #20]
 800c884:	e00d      	b.n	800c8a2 <__gethex+0x26e>
 800c886:	9b05      	ldr	r3, [sp, #20]
 800c888:	9a08      	ldr	r2, [sp, #32]
 800c88a:	4413      	add	r3, r2
 800c88c:	42bb      	cmp	r3, r7
 800c88e:	d3e0      	bcc.n	800c852 <__gethex+0x21e>
 800c890:	4618      	mov	r0, r3
 800c892:	9903      	ldr	r1, [sp, #12]
 800c894:	9309      	str	r3, [sp, #36]	; 0x24
 800c896:	4652      	mov	r2, sl
 800c898:	f001 fa11 	bl	800dcbe <strncmp>
 800c89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d1d7      	bne.n	800c852 <__gethex+0x21e>
 800c8a2:	461e      	mov	r6, r3
 800c8a4:	e78c      	b.n	800c7c0 <__gethex+0x18c>
 800c8a6:	f04f 0a03 	mov.w	sl, #3
 800c8aa:	e7b9      	b.n	800c820 <__gethex+0x1ec>
 800c8ac:	da09      	bge.n	800c8c2 <__gethex+0x28e>
 800c8ae:	1bf7      	subs	r7, r6, r7
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	9802      	ldr	r0, [sp, #8]
 800c8b4:	463a      	mov	r2, r7
 800c8b6:	f000 fc9d 	bl	800d1f4 <__lshift>
 800c8ba:	1bed      	subs	r5, r5, r7
 800c8bc:	4604      	mov	r4, r0
 800c8be:	f100 0914 	add.w	r9, r0, #20
 800c8c2:	f04f 0a00 	mov.w	sl, #0
 800c8c6:	e7b0      	b.n	800c82a <__gethex+0x1f6>
 800c8c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8cc:	42a8      	cmp	r0, r5
 800c8ce:	dd70      	ble.n	800c9b2 <__gethex+0x37e>
 800c8d0:	1b45      	subs	r5, r0, r5
 800c8d2:	42ae      	cmp	r6, r5
 800c8d4:	dc34      	bgt.n	800c940 <__gethex+0x30c>
 800c8d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d028      	beq.n	800c930 <__gethex+0x2fc>
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d02a      	beq.n	800c938 <__gethex+0x304>
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d115      	bne.n	800c912 <__gethex+0x2de>
 800c8e6:	42ae      	cmp	r6, r5
 800c8e8:	d113      	bne.n	800c912 <__gethex+0x2de>
 800c8ea:	2e01      	cmp	r6, #1
 800c8ec:	d10b      	bne.n	800c906 <__gethex+0x2d2>
 800c8ee:	9a06      	ldr	r2, [sp, #24]
 800c8f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	6123      	str	r3, [r4, #16]
 800c8fa:	f8c9 3000 	str.w	r3, [r9]
 800c8fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c900:	2762      	movs	r7, #98	; 0x62
 800c902:	601c      	str	r4, [r3, #0]
 800c904:	e728      	b.n	800c758 <__gethex+0x124>
 800c906:	1e71      	subs	r1, r6, #1
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 feac 	bl	800d666 <__any_on>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d1ed      	bne.n	800c8ee <__gethex+0x2ba>
 800c912:	9802      	ldr	r0, [sp, #8]
 800c914:	4621      	mov	r1, r4
 800c916:	f000 fa53 	bl	800cdc0 <_Bfree>
 800c91a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c91c:	2300      	movs	r3, #0
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	2750      	movs	r7, #80	; 0x50
 800c922:	e719      	b.n	800c758 <__gethex+0x124>
 800c924:	0800ef0c 	.word	0x0800ef0c
 800c928:	0800ee2c 	.word	0x0800ee2c
 800c92c:	0800eea0 	.word	0x0800eea0
 800c930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1ed      	bne.n	800c912 <__gethex+0x2de>
 800c936:	e7da      	b.n	800c8ee <__gethex+0x2ba>
 800c938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1d7      	bne.n	800c8ee <__gethex+0x2ba>
 800c93e:	e7e8      	b.n	800c912 <__gethex+0x2de>
 800c940:	1e6f      	subs	r7, r5, #1
 800c942:	f1ba 0f00 	cmp.w	sl, #0
 800c946:	d131      	bne.n	800c9ac <__gethex+0x378>
 800c948:	b127      	cbz	r7, 800c954 <__gethex+0x320>
 800c94a:	4639      	mov	r1, r7
 800c94c:	4620      	mov	r0, r4
 800c94e:	f000 fe8a 	bl	800d666 <__any_on>
 800c952:	4682      	mov	sl, r0
 800c954:	117b      	asrs	r3, r7, #5
 800c956:	2101      	movs	r1, #1
 800c958:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c95c:	f007 071f 	and.w	r7, r7, #31
 800c960:	fa01 f707 	lsl.w	r7, r1, r7
 800c964:	421f      	tst	r7, r3
 800c966:	4629      	mov	r1, r5
 800c968:	4620      	mov	r0, r4
 800c96a:	bf18      	it	ne
 800c96c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c970:	1b76      	subs	r6, r6, r5
 800c972:	f7ff fdf8 	bl	800c566 <rshift>
 800c976:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c97a:	2702      	movs	r7, #2
 800c97c:	f1ba 0f00 	cmp.w	sl, #0
 800c980:	d048      	beq.n	800ca14 <__gethex+0x3e0>
 800c982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c986:	2b02      	cmp	r3, #2
 800c988:	d015      	beq.n	800c9b6 <__gethex+0x382>
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d017      	beq.n	800c9be <__gethex+0x38a>
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d109      	bne.n	800c9a6 <__gethex+0x372>
 800c992:	f01a 0f02 	tst.w	sl, #2
 800c996:	d006      	beq.n	800c9a6 <__gethex+0x372>
 800c998:	f8d9 0000 	ldr.w	r0, [r9]
 800c99c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c9a0:	f01a 0f01 	tst.w	sl, #1
 800c9a4:	d10e      	bne.n	800c9c4 <__gethex+0x390>
 800c9a6:	f047 0710 	orr.w	r7, r7, #16
 800c9aa:	e033      	b.n	800ca14 <__gethex+0x3e0>
 800c9ac:	f04f 0a01 	mov.w	sl, #1
 800c9b0:	e7d0      	b.n	800c954 <__gethex+0x320>
 800c9b2:	2701      	movs	r7, #1
 800c9b4:	e7e2      	b.n	800c97c <__gethex+0x348>
 800c9b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9b8:	f1c3 0301 	rsb	r3, r3, #1
 800c9bc:	9315      	str	r3, [sp, #84]	; 0x54
 800c9be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0f0      	beq.n	800c9a6 <__gethex+0x372>
 800c9c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9c8:	f104 0314 	add.w	r3, r4, #20
 800c9cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9d4:	f04f 0c00 	mov.w	ip, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9de:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9e2:	d01c      	beq.n	800ca1e <__gethex+0x3ea>
 800c9e4:	3201      	adds	r2, #1
 800c9e6:	6002      	str	r2, [r0, #0]
 800c9e8:	2f02      	cmp	r7, #2
 800c9ea:	f104 0314 	add.w	r3, r4, #20
 800c9ee:	d13d      	bne.n	800ca6c <__gethex+0x438>
 800c9f0:	f8d8 2000 	ldr.w	r2, [r8]
 800c9f4:	3a01      	subs	r2, #1
 800c9f6:	42b2      	cmp	r2, r6
 800c9f8:	d10a      	bne.n	800ca10 <__gethex+0x3dc>
 800c9fa:	1171      	asrs	r1, r6, #5
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca02:	f006 061f 	and.w	r6, r6, #31
 800ca06:	fa02 f606 	lsl.w	r6, r2, r6
 800ca0a:	421e      	tst	r6, r3
 800ca0c:	bf18      	it	ne
 800ca0e:	4617      	movne	r7, r2
 800ca10:	f047 0720 	orr.w	r7, r7, #32
 800ca14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca16:	601c      	str	r4, [r3, #0]
 800ca18:	9b06      	ldr	r3, [sp, #24]
 800ca1a:	601d      	str	r5, [r3, #0]
 800ca1c:	e69c      	b.n	800c758 <__gethex+0x124>
 800ca1e:	4299      	cmp	r1, r3
 800ca20:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca24:	d8d8      	bhi.n	800c9d8 <__gethex+0x3a4>
 800ca26:	68a3      	ldr	r3, [r4, #8]
 800ca28:	459b      	cmp	fp, r3
 800ca2a:	db17      	blt.n	800ca5c <__gethex+0x428>
 800ca2c:	6861      	ldr	r1, [r4, #4]
 800ca2e:	9802      	ldr	r0, [sp, #8]
 800ca30:	3101      	adds	r1, #1
 800ca32:	f000 f985 	bl	800cd40 <_Balloc>
 800ca36:	4681      	mov	r9, r0
 800ca38:	b918      	cbnz	r0, 800ca42 <__gethex+0x40e>
 800ca3a:	4b1a      	ldr	r3, [pc, #104]	; (800caa4 <__gethex+0x470>)
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	2184      	movs	r1, #132	; 0x84
 800ca40:	e6ad      	b.n	800c79e <__gethex+0x16a>
 800ca42:	6922      	ldr	r2, [r4, #16]
 800ca44:	3202      	adds	r2, #2
 800ca46:	f104 010c 	add.w	r1, r4, #12
 800ca4a:	0092      	lsls	r2, r2, #2
 800ca4c:	300c      	adds	r0, #12
 800ca4e:	f7fc fd1d 	bl	800948c <memcpy>
 800ca52:	4621      	mov	r1, r4
 800ca54:	9802      	ldr	r0, [sp, #8]
 800ca56:	f000 f9b3 	bl	800cdc0 <_Bfree>
 800ca5a:	464c      	mov	r4, r9
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca64:	6122      	str	r2, [r4, #16]
 800ca66:	2201      	movs	r2, #1
 800ca68:	615a      	str	r2, [r3, #20]
 800ca6a:	e7bd      	b.n	800c9e8 <__gethex+0x3b4>
 800ca6c:	6922      	ldr	r2, [r4, #16]
 800ca6e:	455a      	cmp	r2, fp
 800ca70:	dd0b      	ble.n	800ca8a <__gethex+0x456>
 800ca72:	2101      	movs	r1, #1
 800ca74:	4620      	mov	r0, r4
 800ca76:	f7ff fd76 	bl	800c566 <rshift>
 800ca7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca7e:	3501      	adds	r5, #1
 800ca80:	42ab      	cmp	r3, r5
 800ca82:	f6ff aed6 	blt.w	800c832 <__gethex+0x1fe>
 800ca86:	2701      	movs	r7, #1
 800ca88:	e7c2      	b.n	800ca10 <__gethex+0x3dc>
 800ca8a:	f016 061f 	ands.w	r6, r6, #31
 800ca8e:	d0fa      	beq.n	800ca86 <__gethex+0x452>
 800ca90:	449a      	add	sl, r3
 800ca92:	f1c6 0620 	rsb	r6, r6, #32
 800ca96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ca9a:	f000 fa47 	bl	800cf2c <__hi0bits>
 800ca9e:	42b0      	cmp	r0, r6
 800caa0:	dbe7      	blt.n	800ca72 <__gethex+0x43e>
 800caa2:	e7f0      	b.n	800ca86 <__gethex+0x452>
 800caa4:	0800ee2c 	.word	0x0800ee2c

0800caa8 <L_shift>:
 800caa8:	f1c2 0208 	rsb	r2, r2, #8
 800caac:	0092      	lsls	r2, r2, #2
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	f1c2 0620 	rsb	r6, r2, #32
 800cab4:	6843      	ldr	r3, [r0, #4]
 800cab6:	6804      	ldr	r4, [r0, #0]
 800cab8:	fa03 f506 	lsl.w	r5, r3, r6
 800cabc:	432c      	orrs	r4, r5
 800cabe:	40d3      	lsrs	r3, r2
 800cac0:	6004      	str	r4, [r0, #0]
 800cac2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cac6:	4288      	cmp	r0, r1
 800cac8:	d3f4      	bcc.n	800cab4 <L_shift+0xc>
 800caca:	bd70      	pop	{r4, r5, r6, pc}

0800cacc <__match>:
 800cacc:	b530      	push	{r4, r5, lr}
 800cace:	6803      	ldr	r3, [r0, #0]
 800cad0:	3301      	adds	r3, #1
 800cad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cad6:	b914      	cbnz	r4, 800cade <__match+0x12>
 800cad8:	6003      	str	r3, [r0, #0]
 800cada:	2001      	movs	r0, #1
 800cadc:	bd30      	pop	{r4, r5, pc}
 800cade:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cae6:	2d19      	cmp	r5, #25
 800cae8:	bf98      	it	ls
 800caea:	3220      	addls	r2, #32
 800caec:	42a2      	cmp	r2, r4
 800caee:	d0f0      	beq.n	800cad2 <__match+0x6>
 800caf0:	2000      	movs	r0, #0
 800caf2:	e7f3      	b.n	800cadc <__match+0x10>

0800caf4 <__hexnan>:
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	680b      	ldr	r3, [r1, #0]
 800cafa:	6801      	ldr	r1, [r0, #0]
 800cafc:	115e      	asrs	r6, r3, #5
 800cafe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb02:	f013 031f 	ands.w	r3, r3, #31
 800cb06:	b087      	sub	sp, #28
 800cb08:	bf18      	it	ne
 800cb0a:	3604      	addne	r6, #4
 800cb0c:	2500      	movs	r5, #0
 800cb0e:	1f37      	subs	r7, r6, #4
 800cb10:	4682      	mov	sl, r0
 800cb12:	4690      	mov	r8, r2
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb1a:	46b9      	mov	r9, r7
 800cb1c:	463c      	mov	r4, r7
 800cb1e:	9502      	str	r5, [sp, #8]
 800cb20:	46ab      	mov	fp, r5
 800cb22:	784a      	ldrb	r2, [r1, #1]
 800cb24:	1c4b      	adds	r3, r1, #1
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	b342      	cbz	r2, 800cb7c <__hexnan+0x88>
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	9105      	str	r1, [sp, #20]
 800cb2e:	9204      	str	r2, [sp, #16]
 800cb30:	f7ff fd6b 	bl	800c60a <__hexdig_fun>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d14f      	bne.n	800cbd8 <__hexnan+0xe4>
 800cb38:	9a04      	ldr	r2, [sp, #16]
 800cb3a:	9905      	ldr	r1, [sp, #20]
 800cb3c:	2a20      	cmp	r2, #32
 800cb3e:	d818      	bhi.n	800cb72 <__hexnan+0x7e>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	459b      	cmp	fp, r3
 800cb44:	dd13      	ble.n	800cb6e <__hexnan+0x7a>
 800cb46:	454c      	cmp	r4, r9
 800cb48:	d206      	bcs.n	800cb58 <__hexnan+0x64>
 800cb4a:	2d07      	cmp	r5, #7
 800cb4c:	dc04      	bgt.n	800cb58 <__hexnan+0x64>
 800cb4e:	462a      	mov	r2, r5
 800cb50:	4649      	mov	r1, r9
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7ff ffa8 	bl	800caa8 <L_shift>
 800cb58:	4544      	cmp	r4, r8
 800cb5a:	d950      	bls.n	800cbfe <__hexnan+0x10a>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f1a4 0904 	sub.w	r9, r4, #4
 800cb62:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb66:	f8cd b008 	str.w	fp, [sp, #8]
 800cb6a:	464c      	mov	r4, r9
 800cb6c:	461d      	mov	r5, r3
 800cb6e:	9903      	ldr	r1, [sp, #12]
 800cb70:	e7d7      	b.n	800cb22 <__hexnan+0x2e>
 800cb72:	2a29      	cmp	r2, #41	; 0x29
 800cb74:	d156      	bne.n	800cc24 <__hexnan+0x130>
 800cb76:	3102      	adds	r1, #2
 800cb78:	f8ca 1000 	str.w	r1, [sl]
 800cb7c:	f1bb 0f00 	cmp.w	fp, #0
 800cb80:	d050      	beq.n	800cc24 <__hexnan+0x130>
 800cb82:	454c      	cmp	r4, r9
 800cb84:	d206      	bcs.n	800cb94 <__hexnan+0xa0>
 800cb86:	2d07      	cmp	r5, #7
 800cb88:	dc04      	bgt.n	800cb94 <__hexnan+0xa0>
 800cb8a:	462a      	mov	r2, r5
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f7ff ff8a 	bl	800caa8 <L_shift>
 800cb94:	4544      	cmp	r4, r8
 800cb96:	d934      	bls.n	800cc02 <__hexnan+0x10e>
 800cb98:	f1a8 0204 	sub.w	r2, r8, #4
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cba2:	f842 1f04 	str.w	r1, [r2, #4]!
 800cba6:	429f      	cmp	r7, r3
 800cba8:	d2f9      	bcs.n	800cb9e <__hexnan+0xaa>
 800cbaa:	1b3b      	subs	r3, r7, r4
 800cbac:	f023 0303 	bic.w	r3, r3, #3
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	3401      	adds	r4, #1
 800cbb4:	3e03      	subs	r6, #3
 800cbb6:	42b4      	cmp	r4, r6
 800cbb8:	bf88      	it	hi
 800cbba:	2304      	movhi	r3, #4
 800cbbc:	4443      	add	r3, r8
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f843 2b04 	str.w	r2, [r3], #4
 800cbc4:	429f      	cmp	r7, r3
 800cbc6:	d2fb      	bcs.n	800cbc0 <__hexnan+0xcc>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	b91b      	cbnz	r3, 800cbd4 <__hexnan+0xe0>
 800cbcc:	4547      	cmp	r7, r8
 800cbce:	d127      	bne.n	800cc20 <__hexnan+0x12c>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	2005      	movs	r0, #5
 800cbd6:	e026      	b.n	800cc26 <__hexnan+0x132>
 800cbd8:	3501      	adds	r5, #1
 800cbda:	2d08      	cmp	r5, #8
 800cbdc:	f10b 0b01 	add.w	fp, fp, #1
 800cbe0:	dd06      	ble.n	800cbf0 <__hexnan+0xfc>
 800cbe2:	4544      	cmp	r4, r8
 800cbe4:	d9c3      	bls.n	800cb6e <__hexnan+0x7a>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbec:	2501      	movs	r5, #1
 800cbee:	3c04      	subs	r4, #4
 800cbf0:	6822      	ldr	r2, [r4, #0]
 800cbf2:	f000 000f 	and.w	r0, r0, #15
 800cbf6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cbfa:	6022      	str	r2, [r4, #0]
 800cbfc:	e7b7      	b.n	800cb6e <__hexnan+0x7a>
 800cbfe:	2508      	movs	r5, #8
 800cc00:	e7b5      	b.n	800cb6e <__hexnan+0x7a>
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0df      	beq.n	800cbc8 <__hexnan+0xd4>
 800cc08:	f04f 32ff 	mov.w	r2, #4294967295
 800cc0c:	f1c3 0320 	rsb	r3, r3, #32
 800cc10:	fa22 f303 	lsr.w	r3, r2, r3
 800cc14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc18:	401a      	ands	r2, r3
 800cc1a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cc1e:	e7d3      	b.n	800cbc8 <__hexnan+0xd4>
 800cc20:	3f04      	subs	r7, #4
 800cc22:	e7d1      	b.n	800cbc8 <__hexnan+0xd4>
 800cc24:	2004      	movs	r0, #4
 800cc26:	b007      	add	sp, #28
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc2c <_localeconv_r>:
 800cc2c:	4800      	ldr	r0, [pc, #0]	; (800cc30 <_localeconv_r+0x4>)
 800cc2e:	4770      	bx	lr
 800cc30:	20000164 	.word	0x20000164

0800cc34 <__retarget_lock_init_recursive>:
 800cc34:	4770      	bx	lr

0800cc36 <__retarget_lock_acquire_recursive>:
 800cc36:	4770      	bx	lr

0800cc38 <__retarget_lock_release_recursive>:
 800cc38:	4770      	bx	lr

0800cc3a <__swhatbuf_r>:
 800cc3a:	b570      	push	{r4, r5, r6, lr}
 800cc3c:	460e      	mov	r6, r1
 800cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc42:	2900      	cmp	r1, #0
 800cc44:	b096      	sub	sp, #88	; 0x58
 800cc46:	4614      	mov	r4, r2
 800cc48:	461d      	mov	r5, r3
 800cc4a:	da07      	bge.n	800cc5c <__swhatbuf_r+0x22>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	89b3      	ldrh	r3, [r6, #12]
 800cc52:	061a      	lsls	r2, r3, #24
 800cc54:	d410      	bmi.n	800cc78 <__swhatbuf_r+0x3e>
 800cc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc5a:	e00e      	b.n	800cc7a <__swhatbuf_r+0x40>
 800cc5c:	466a      	mov	r2, sp
 800cc5e:	f001 f88d 	bl	800dd7c <_fstat_r>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	dbf2      	blt.n	800cc4c <__swhatbuf_r+0x12>
 800cc66:	9a01      	ldr	r2, [sp, #4]
 800cc68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc70:	425a      	negs	r2, r3
 800cc72:	415a      	adcs	r2, r3
 800cc74:	602a      	str	r2, [r5, #0]
 800cc76:	e7ee      	b.n	800cc56 <__swhatbuf_r+0x1c>
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	b016      	add	sp, #88	; 0x58
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc84 <__smakebuf_r>:
 800cc84:	898b      	ldrh	r3, [r1, #12]
 800cc86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc88:	079d      	lsls	r5, r3, #30
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	d507      	bpl.n	800cca0 <__smakebuf_r+0x1c>
 800cc90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	6123      	str	r3, [r4, #16]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	6163      	str	r3, [r4, #20]
 800cc9c:	b002      	add	sp, #8
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	ab01      	add	r3, sp, #4
 800cca2:	466a      	mov	r2, sp
 800cca4:	f7ff ffc9 	bl	800cc3a <__swhatbuf_r>
 800cca8:	9900      	ldr	r1, [sp, #0]
 800ccaa:	4605      	mov	r5, r0
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7fc fc51 	bl	8009554 <_malloc_r>
 800ccb2:	b948      	cbnz	r0, 800ccc8 <__smakebuf_r+0x44>
 800ccb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb8:	059a      	lsls	r2, r3, #22
 800ccba:	d4ef      	bmi.n	800cc9c <__smakebuf_r+0x18>
 800ccbc:	f023 0303 	bic.w	r3, r3, #3
 800ccc0:	f043 0302 	orr.w	r3, r3, #2
 800ccc4:	81a3      	strh	r3, [r4, #12]
 800ccc6:	e7e3      	b.n	800cc90 <__smakebuf_r+0xc>
 800ccc8:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <__smakebuf_r+0x7c>)
 800ccca:	62b3      	str	r3, [r6, #40]	; 0x28
 800cccc:	89a3      	ldrh	r3, [r4, #12]
 800ccce:	6020      	str	r0, [r4, #0]
 800ccd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	9b00      	ldr	r3, [sp, #0]
 800ccd8:	6163      	str	r3, [r4, #20]
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	6120      	str	r0, [r4, #16]
 800ccde:	b15b      	cbz	r3, 800ccf8 <__smakebuf_r+0x74>
 800cce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cce4:	4630      	mov	r0, r6
 800cce6:	f001 f85b 	bl	800dda0 <_isatty_r>
 800ccea:	b128      	cbz	r0, 800ccf8 <__smakebuf_r+0x74>
 800ccec:	89a3      	ldrh	r3, [r4, #12]
 800ccee:	f023 0303 	bic.w	r3, r3, #3
 800ccf2:	f043 0301 	orr.w	r3, r3, #1
 800ccf6:	81a3      	strh	r3, [r4, #12]
 800ccf8:	89a0      	ldrh	r0, [r4, #12]
 800ccfa:	4305      	orrs	r5, r0
 800ccfc:	81a5      	strh	r5, [r4, #12]
 800ccfe:	e7cd      	b.n	800cc9c <__smakebuf_r+0x18>
 800cd00:	0800c3c5 	.word	0x0800c3c5

0800cd04 <__ascii_mbtowc>:
 800cd04:	b082      	sub	sp, #8
 800cd06:	b901      	cbnz	r1, 800cd0a <__ascii_mbtowc+0x6>
 800cd08:	a901      	add	r1, sp, #4
 800cd0a:	b142      	cbz	r2, 800cd1e <__ascii_mbtowc+0x1a>
 800cd0c:	b14b      	cbz	r3, 800cd22 <__ascii_mbtowc+0x1e>
 800cd0e:	7813      	ldrb	r3, [r2, #0]
 800cd10:	600b      	str	r3, [r1, #0]
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	1e10      	subs	r0, r2, #0
 800cd16:	bf18      	it	ne
 800cd18:	2001      	movne	r0, #1
 800cd1a:	b002      	add	sp, #8
 800cd1c:	4770      	bx	lr
 800cd1e:	4610      	mov	r0, r2
 800cd20:	e7fb      	b.n	800cd1a <__ascii_mbtowc+0x16>
 800cd22:	f06f 0001 	mvn.w	r0, #1
 800cd26:	e7f8      	b.n	800cd1a <__ascii_mbtowc+0x16>

0800cd28 <__malloc_lock>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__malloc_lock+0x8>)
 800cd2a:	f7ff bf84 	b.w	800cc36 <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	200005fc 	.word	0x200005fc

0800cd34 <__malloc_unlock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_unlock+0x8>)
 800cd36:	f7ff bf7f 	b.w	800cc38 <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	200005fc 	.word	0x200005fc

0800cd40 <_Balloc>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	b976      	cbnz	r6, 800cd68 <_Balloc+0x28>
 800cd4a:	2010      	movs	r0, #16
 800cd4c:	f7fc fb8e 	bl	800946c <malloc>
 800cd50:	4602      	mov	r2, r0
 800cd52:	6260      	str	r0, [r4, #36]	; 0x24
 800cd54:	b920      	cbnz	r0, 800cd60 <_Balloc+0x20>
 800cd56:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <_Balloc+0x78>)
 800cd58:	4818      	ldr	r0, [pc, #96]	; (800cdbc <_Balloc+0x7c>)
 800cd5a:	2166      	movs	r1, #102	; 0x66
 800cd5c:	f000 ffce 	bl	800dcfc <__assert_func>
 800cd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd64:	6006      	str	r6, [r0, #0]
 800cd66:	60c6      	str	r6, [r0, #12]
 800cd68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd6a:	68f3      	ldr	r3, [r6, #12]
 800cd6c:	b183      	cbz	r3, 800cd90 <_Balloc+0x50>
 800cd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd76:	b9b8      	cbnz	r0, 800cda8 <_Balloc+0x68>
 800cd78:	2101      	movs	r1, #1
 800cd7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd7e:	1d72      	adds	r2, r6, #5
 800cd80:	0092      	lsls	r2, r2, #2
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fc90 	bl	800d6a8 <_calloc_r>
 800cd88:	b160      	cbz	r0, 800cda4 <_Balloc+0x64>
 800cd8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd8e:	e00e      	b.n	800cdae <_Balloc+0x6e>
 800cd90:	2221      	movs	r2, #33	; 0x21
 800cd92:	2104      	movs	r1, #4
 800cd94:	4620      	mov	r0, r4
 800cd96:	f000 fc87 	bl	800d6a8 <_calloc_r>
 800cd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd9c:	60f0      	str	r0, [r6, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e4      	bne.n	800cd6e <_Balloc+0x2e>
 800cda4:	2000      	movs	r0, #0
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	6802      	ldr	r2, [r0, #0]
 800cdaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdb4:	e7f7      	b.n	800cda6 <_Balloc+0x66>
 800cdb6:	bf00      	nop
 800cdb8:	0800edb6 	.word	0x0800edb6
 800cdbc:	0800ef20 	.word	0x0800ef20

0800cdc0 <_Bfree>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b976      	cbnz	r6, 800cde8 <_Bfree+0x28>
 800cdca:	2010      	movs	r0, #16
 800cdcc:	f7fc fb4e 	bl	800946c <malloc>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	6268      	str	r0, [r5, #36]	; 0x24
 800cdd4:	b920      	cbnz	r0, 800cde0 <_Bfree+0x20>
 800cdd6:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <_Bfree+0x3c>)
 800cdd8:	4809      	ldr	r0, [pc, #36]	; (800ce00 <_Bfree+0x40>)
 800cdda:	218a      	movs	r1, #138	; 0x8a
 800cddc:	f000 ff8e 	bl	800dcfc <__assert_func>
 800cde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde4:	6006      	str	r6, [r0, #0]
 800cde6:	60c6      	str	r6, [r0, #12]
 800cde8:	b13c      	cbz	r4, 800cdfa <_Bfree+0x3a>
 800cdea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdec:	6862      	ldr	r2, [r4, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdf4:	6021      	str	r1, [r4, #0]
 800cdf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	0800edb6 	.word	0x0800edb6
 800ce00:	0800ef20 	.word	0x0800ef20

0800ce04 <__multadd>:
 800ce04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	690e      	ldr	r6, [r1, #16]
 800ce0a:	4607      	mov	r7, r0
 800ce0c:	4698      	mov	r8, r3
 800ce0e:	460c      	mov	r4, r1
 800ce10:	f101 0014 	add.w	r0, r1, #20
 800ce14:	2300      	movs	r3, #0
 800ce16:	6805      	ldr	r5, [r0, #0]
 800ce18:	b2a9      	uxth	r1, r5
 800ce1a:	fb02 8101 	mla	r1, r2, r1, r8
 800ce1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ce22:	0c2d      	lsrs	r5, r5, #16
 800ce24:	fb02 c505 	mla	r5, r2, r5, ip
 800ce28:	b289      	uxth	r1, r1
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ce30:	429e      	cmp	r6, r3
 800ce32:	f840 1b04 	str.w	r1, [r0], #4
 800ce36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ce3a:	dcec      	bgt.n	800ce16 <__multadd+0x12>
 800ce3c:	f1b8 0f00 	cmp.w	r8, #0
 800ce40:	d022      	beq.n	800ce88 <__multadd+0x84>
 800ce42:	68a3      	ldr	r3, [r4, #8]
 800ce44:	42b3      	cmp	r3, r6
 800ce46:	dc19      	bgt.n	800ce7c <__multadd+0x78>
 800ce48:	6861      	ldr	r1, [r4, #4]
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	3101      	adds	r1, #1
 800ce4e:	f7ff ff77 	bl	800cd40 <_Balloc>
 800ce52:	4605      	mov	r5, r0
 800ce54:	b928      	cbnz	r0, 800ce62 <__multadd+0x5e>
 800ce56:	4602      	mov	r2, r0
 800ce58:	4b0d      	ldr	r3, [pc, #52]	; (800ce90 <__multadd+0x8c>)
 800ce5a:	480e      	ldr	r0, [pc, #56]	; (800ce94 <__multadd+0x90>)
 800ce5c:	21b5      	movs	r1, #181	; 0xb5
 800ce5e:	f000 ff4d 	bl	800dcfc <__assert_func>
 800ce62:	6922      	ldr	r2, [r4, #16]
 800ce64:	3202      	adds	r2, #2
 800ce66:	f104 010c 	add.w	r1, r4, #12
 800ce6a:	0092      	lsls	r2, r2, #2
 800ce6c:	300c      	adds	r0, #12
 800ce6e:	f7fc fb0d 	bl	800948c <memcpy>
 800ce72:	4621      	mov	r1, r4
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7ff ffa3 	bl	800cdc0 <_Bfree>
 800ce7a:	462c      	mov	r4, r5
 800ce7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ce80:	3601      	adds	r6, #1
 800ce82:	f8c3 8014 	str.w	r8, [r3, #20]
 800ce86:	6126      	str	r6, [r4, #16]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8e:	bf00      	nop
 800ce90:	0800ee2c 	.word	0x0800ee2c
 800ce94:	0800ef20 	.word	0x0800ef20

0800ce98 <__s2b>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4615      	mov	r5, r2
 800cea0:	461f      	mov	r7, r3
 800cea2:	2209      	movs	r2, #9
 800cea4:	3308      	adds	r3, #8
 800cea6:	4606      	mov	r6, r0
 800cea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceac:	2100      	movs	r1, #0
 800ceae:	2201      	movs	r2, #1
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	db09      	blt.n	800cec8 <__s2b+0x30>
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7ff ff43 	bl	800cd40 <_Balloc>
 800ceba:	b940      	cbnz	r0, 800cece <__s2b+0x36>
 800cebc:	4602      	mov	r2, r0
 800cebe:	4b19      	ldr	r3, [pc, #100]	; (800cf24 <__s2b+0x8c>)
 800cec0:	4819      	ldr	r0, [pc, #100]	; (800cf28 <__s2b+0x90>)
 800cec2:	21ce      	movs	r1, #206	; 0xce
 800cec4:	f000 ff1a 	bl	800dcfc <__assert_func>
 800cec8:	0052      	lsls	r2, r2, #1
 800ceca:	3101      	adds	r1, #1
 800cecc:	e7f0      	b.n	800ceb0 <__s2b+0x18>
 800cece:	9b08      	ldr	r3, [sp, #32]
 800ced0:	6143      	str	r3, [r0, #20]
 800ced2:	2d09      	cmp	r5, #9
 800ced4:	f04f 0301 	mov.w	r3, #1
 800ced8:	6103      	str	r3, [r0, #16]
 800ceda:	dd16      	ble.n	800cf0a <__s2b+0x72>
 800cedc:	f104 0909 	add.w	r9, r4, #9
 800cee0:	46c8      	mov	r8, r9
 800cee2:	442c      	add	r4, r5
 800cee4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cee8:	4601      	mov	r1, r0
 800ceea:	3b30      	subs	r3, #48	; 0x30
 800ceec:	220a      	movs	r2, #10
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7ff ff88 	bl	800ce04 <__multadd>
 800cef4:	45a0      	cmp	r8, r4
 800cef6:	d1f5      	bne.n	800cee4 <__s2b+0x4c>
 800cef8:	f1a5 0408 	sub.w	r4, r5, #8
 800cefc:	444c      	add	r4, r9
 800cefe:	1b2d      	subs	r5, r5, r4
 800cf00:	1963      	adds	r3, r4, r5
 800cf02:	42bb      	cmp	r3, r7
 800cf04:	db04      	blt.n	800cf10 <__s2b+0x78>
 800cf06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0a:	340a      	adds	r4, #10
 800cf0c:	2509      	movs	r5, #9
 800cf0e:	e7f6      	b.n	800cefe <__s2b+0x66>
 800cf10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf14:	4601      	mov	r1, r0
 800cf16:	3b30      	subs	r3, #48	; 0x30
 800cf18:	220a      	movs	r2, #10
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff ff72 	bl	800ce04 <__multadd>
 800cf20:	e7ee      	b.n	800cf00 <__s2b+0x68>
 800cf22:	bf00      	nop
 800cf24:	0800ee2c 	.word	0x0800ee2c
 800cf28:	0800ef20 	.word	0x0800ef20

0800cf2c <__hi0bits>:
 800cf2c:	0c02      	lsrs	r2, r0, #16
 800cf2e:	0412      	lsls	r2, r2, #16
 800cf30:	4603      	mov	r3, r0
 800cf32:	b9ca      	cbnz	r2, 800cf68 <__hi0bits+0x3c>
 800cf34:	0403      	lsls	r3, r0, #16
 800cf36:	2010      	movs	r0, #16
 800cf38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cf3c:	bf04      	itt	eq
 800cf3e:	021b      	lsleq	r3, r3, #8
 800cf40:	3008      	addeq	r0, #8
 800cf42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cf46:	bf04      	itt	eq
 800cf48:	011b      	lsleq	r3, r3, #4
 800cf4a:	3004      	addeq	r0, #4
 800cf4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cf50:	bf04      	itt	eq
 800cf52:	009b      	lsleq	r3, r3, #2
 800cf54:	3002      	addeq	r0, #2
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	db05      	blt.n	800cf66 <__hi0bits+0x3a>
 800cf5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cf5e:	f100 0001 	add.w	r0, r0, #1
 800cf62:	bf08      	it	eq
 800cf64:	2020      	moveq	r0, #32
 800cf66:	4770      	bx	lr
 800cf68:	2000      	movs	r0, #0
 800cf6a:	e7e5      	b.n	800cf38 <__hi0bits+0xc>

0800cf6c <__lo0bits>:
 800cf6c:	6803      	ldr	r3, [r0, #0]
 800cf6e:	4602      	mov	r2, r0
 800cf70:	f013 0007 	ands.w	r0, r3, #7
 800cf74:	d00b      	beq.n	800cf8e <__lo0bits+0x22>
 800cf76:	07d9      	lsls	r1, r3, #31
 800cf78:	d422      	bmi.n	800cfc0 <__lo0bits+0x54>
 800cf7a:	0798      	lsls	r0, r3, #30
 800cf7c:	bf49      	itett	mi
 800cf7e:	085b      	lsrmi	r3, r3, #1
 800cf80:	089b      	lsrpl	r3, r3, #2
 800cf82:	2001      	movmi	r0, #1
 800cf84:	6013      	strmi	r3, [r2, #0]
 800cf86:	bf5c      	itt	pl
 800cf88:	6013      	strpl	r3, [r2, #0]
 800cf8a:	2002      	movpl	r0, #2
 800cf8c:	4770      	bx	lr
 800cf8e:	b299      	uxth	r1, r3
 800cf90:	b909      	cbnz	r1, 800cf96 <__lo0bits+0x2a>
 800cf92:	0c1b      	lsrs	r3, r3, #16
 800cf94:	2010      	movs	r0, #16
 800cf96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cf9a:	bf04      	itt	eq
 800cf9c:	0a1b      	lsreq	r3, r3, #8
 800cf9e:	3008      	addeq	r0, #8
 800cfa0:	0719      	lsls	r1, r3, #28
 800cfa2:	bf04      	itt	eq
 800cfa4:	091b      	lsreq	r3, r3, #4
 800cfa6:	3004      	addeq	r0, #4
 800cfa8:	0799      	lsls	r1, r3, #30
 800cfaa:	bf04      	itt	eq
 800cfac:	089b      	lsreq	r3, r3, #2
 800cfae:	3002      	addeq	r0, #2
 800cfb0:	07d9      	lsls	r1, r3, #31
 800cfb2:	d403      	bmi.n	800cfbc <__lo0bits+0x50>
 800cfb4:	085b      	lsrs	r3, r3, #1
 800cfb6:	f100 0001 	add.w	r0, r0, #1
 800cfba:	d003      	beq.n	800cfc4 <__lo0bits+0x58>
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	4770      	bx	lr
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4770      	bx	lr
 800cfc4:	2020      	movs	r0, #32
 800cfc6:	4770      	bx	lr

0800cfc8 <__i2b>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	460c      	mov	r4, r1
 800cfcc:	2101      	movs	r1, #1
 800cfce:	f7ff feb7 	bl	800cd40 <_Balloc>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	b928      	cbnz	r0, 800cfe2 <__i2b+0x1a>
 800cfd6:	4b05      	ldr	r3, [pc, #20]	; (800cfec <__i2b+0x24>)
 800cfd8:	4805      	ldr	r0, [pc, #20]	; (800cff0 <__i2b+0x28>)
 800cfda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cfde:	f000 fe8d 	bl	800dcfc <__assert_func>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	6144      	str	r4, [r0, #20]
 800cfe6:	6103      	str	r3, [r0, #16]
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	bf00      	nop
 800cfec:	0800ee2c 	.word	0x0800ee2c
 800cff0:	0800ef20 	.word	0x0800ef20

0800cff4 <__multiply>:
 800cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	4614      	mov	r4, r2
 800cffa:	690a      	ldr	r2, [r1, #16]
 800cffc:	6923      	ldr	r3, [r4, #16]
 800cffe:	429a      	cmp	r2, r3
 800d000:	bfb8      	it	lt
 800d002:	460b      	movlt	r3, r1
 800d004:	460d      	mov	r5, r1
 800d006:	bfbc      	itt	lt
 800d008:	4625      	movlt	r5, r4
 800d00a:	461c      	movlt	r4, r3
 800d00c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d010:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d014:	68ab      	ldr	r3, [r5, #8]
 800d016:	6869      	ldr	r1, [r5, #4]
 800d018:	eb0a 0709 	add.w	r7, sl, r9
 800d01c:	42bb      	cmp	r3, r7
 800d01e:	b085      	sub	sp, #20
 800d020:	bfb8      	it	lt
 800d022:	3101      	addlt	r1, #1
 800d024:	f7ff fe8c 	bl	800cd40 <_Balloc>
 800d028:	b930      	cbnz	r0, 800d038 <__multiply+0x44>
 800d02a:	4602      	mov	r2, r0
 800d02c:	4b42      	ldr	r3, [pc, #264]	; (800d138 <__multiply+0x144>)
 800d02e:	4843      	ldr	r0, [pc, #268]	; (800d13c <__multiply+0x148>)
 800d030:	f240 115d 	movw	r1, #349	; 0x15d
 800d034:	f000 fe62 	bl	800dcfc <__assert_func>
 800d038:	f100 0614 	add.w	r6, r0, #20
 800d03c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d040:	4633      	mov	r3, r6
 800d042:	2200      	movs	r2, #0
 800d044:	4543      	cmp	r3, r8
 800d046:	d31e      	bcc.n	800d086 <__multiply+0x92>
 800d048:	f105 0c14 	add.w	ip, r5, #20
 800d04c:	f104 0314 	add.w	r3, r4, #20
 800d050:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d054:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d058:	9202      	str	r2, [sp, #8]
 800d05a:	ebac 0205 	sub.w	r2, ip, r5
 800d05e:	3a15      	subs	r2, #21
 800d060:	f022 0203 	bic.w	r2, r2, #3
 800d064:	3204      	adds	r2, #4
 800d066:	f105 0115 	add.w	r1, r5, #21
 800d06a:	458c      	cmp	ip, r1
 800d06c:	bf38      	it	cc
 800d06e:	2204      	movcc	r2, #4
 800d070:	9201      	str	r2, [sp, #4]
 800d072:	9a02      	ldr	r2, [sp, #8]
 800d074:	9303      	str	r3, [sp, #12]
 800d076:	429a      	cmp	r2, r3
 800d078:	d808      	bhi.n	800d08c <__multiply+0x98>
 800d07a:	2f00      	cmp	r7, #0
 800d07c:	dc55      	bgt.n	800d12a <__multiply+0x136>
 800d07e:	6107      	str	r7, [r0, #16]
 800d080:	b005      	add	sp, #20
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	f843 2b04 	str.w	r2, [r3], #4
 800d08a:	e7db      	b.n	800d044 <__multiply+0x50>
 800d08c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d090:	f1ba 0f00 	cmp.w	sl, #0
 800d094:	d020      	beq.n	800d0d8 <__multiply+0xe4>
 800d096:	f105 0e14 	add.w	lr, r5, #20
 800d09a:	46b1      	mov	r9, r6
 800d09c:	2200      	movs	r2, #0
 800d09e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d0a2:	f8d9 b000 	ldr.w	fp, [r9]
 800d0a6:	b2a1      	uxth	r1, r4
 800d0a8:	fa1f fb8b 	uxth.w	fp, fp
 800d0ac:	fb0a b101 	mla	r1, sl, r1, fp
 800d0b0:	4411      	add	r1, r2
 800d0b2:	f8d9 2000 	ldr.w	r2, [r9]
 800d0b6:	0c24      	lsrs	r4, r4, #16
 800d0b8:	0c12      	lsrs	r2, r2, #16
 800d0ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800d0be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d0c2:	b289      	uxth	r1, r1
 800d0c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0c8:	45f4      	cmp	ip, lr
 800d0ca:	f849 1b04 	str.w	r1, [r9], #4
 800d0ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d0d2:	d8e4      	bhi.n	800d09e <__multiply+0xaa>
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	5072      	str	r2, [r6, r1]
 800d0d8:	9a03      	ldr	r2, [sp, #12]
 800d0da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	f1b9 0f00 	cmp.w	r9, #0
 800d0e4:	d01f      	beq.n	800d126 <__multiply+0x132>
 800d0e6:	6834      	ldr	r4, [r6, #0]
 800d0e8:	f105 0114 	add.w	r1, r5, #20
 800d0ec:	46b6      	mov	lr, r6
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	880a      	ldrh	r2, [r1, #0]
 800d0f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d0f8:	fb09 b202 	mla	r2, r9, r2, fp
 800d0fc:	4492      	add	sl, r2
 800d0fe:	b2a4      	uxth	r4, r4
 800d100:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d104:	f84e 4b04 	str.w	r4, [lr], #4
 800d108:	f851 4b04 	ldr.w	r4, [r1], #4
 800d10c:	f8be 2000 	ldrh.w	r2, [lr]
 800d110:	0c24      	lsrs	r4, r4, #16
 800d112:	fb09 2404 	mla	r4, r9, r4, r2
 800d116:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d11a:	458c      	cmp	ip, r1
 800d11c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d120:	d8e7      	bhi.n	800d0f2 <__multiply+0xfe>
 800d122:	9a01      	ldr	r2, [sp, #4]
 800d124:	50b4      	str	r4, [r6, r2]
 800d126:	3604      	adds	r6, #4
 800d128:	e7a3      	b.n	800d072 <__multiply+0x7e>
 800d12a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1a5      	bne.n	800d07e <__multiply+0x8a>
 800d132:	3f01      	subs	r7, #1
 800d134:	e7a1      	b.n	800d07a <__multiply+0x86>
 800d136:	bf00      	nop
 800d138:	0800ee2c 	.word	0x0800ee2c
 800d13c:	0800ef20 	.word	0x0800ef20

0800d140 <__pow5mult>:
 800d140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d144:	4615      	mov	r5, r2
 800d146:	f012 0203 	ands.w	r2, r2, #3
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	d007      	beq.n	800d160 <__pow5mult+0x20>
 800d150:	4c25      	ldr	r4, [pc, #148]	; (800d1e8 <__pow5mult+0xa8>)
 800d152:	3a01      	subs	r2, #1
 800d154:	2300      	movs	r3, #0
 800d156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d15a:	f7ff fe53 	bl	800ce04 <__multadd>
 800d15e:	4607      	mov	r7, r0
 800d160:	10ad      	asrs	r5, r5, #2
 800d162:	d03d      	beq.n	800d1e0 <__pow5mult+0xa0>
 800d164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d166:	b97c      	cbnz	r4, 800d188 <__pow5mult+0x48>
 800d168:	2010      	movs	r0, #16
 800d16a:	f7fc f97f 	bl	800946c <malloc>
 800d16e:	4602      	mov	r2, r0
 800d170:	6270      	str	r0, [r6, #36]	; 0x24
 800d172:	b928      	cbnz	r0, 800d180 <__pow5mult+0x40>
 800d174:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <__pow5mult+0xac>)
 800d176:	481e      	ldr	r0, [pc, #120]	; (800d1f0 <__pow5mult+0xb0>)
 800d178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d17c:	f000 fdbe 	bl	800dcfc <__assert_func>
 800d180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d184:	6004      	str	r4, [r0, #0]
 800d186:	60c4      	str	r4, [r0, #12]
 800d188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d18c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d190:	b94c      	cbnz	r4, 800d1a6 <__pow5mult+0x66>
 800d192:	f240 2171 	movw	r1, #625	; 0x271
 800d196:	4630      	mov	r0, r6
 800d198:	f7ff ff16 	bl	800cfc8 <__i2b>
 800d19c:	2300      	movs	r3, #0
 800d19e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	f04f 0900 	mov.w	r9, #0
 800d1aa:	07eb      	lsls	r3, r5, #31
 800d1ac:	d50a      	bpl.n	800d1c4 <__pow5mult+0x84>
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ff1e 	bl	800cff4 <__multiply>
 800d1b8:	4639      	mov	r1, r7
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f7ff fdff 	bl	800cdc0 <_Bfree>
 800d1c2:	4647      	mov	r7, r8
 800d1c4:	106d      	asrs	r5, r5, #1
 800d1c6:	d00b      	beq.n	800d1e0 <__pow5mult+0xa0>
 800d1c8:	6820      	ldr	r0, [r4, #0]
 800d1ca:	b938      	cbnz	r0, 800d1dc <__pow5mult+0x9c>
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7ff ff0f 	bl	800cff4 <__multiply>
 800d1d6:	6020      	str	r0, [r4, #0]
 800d1d8:	f8c0 9000 	str.w	r9, [r0]
 800d1dc:	4604      	mov	r4, r0
 800d1de:	e7e4      	b.n	800d1aa <__pow5mult+0x6a>
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e6:	bf00      	nop
 800d1e8:	0800f070 	.word	0x0800f070
 800d1ec:	0800edb6 	.word	0x0800edb6
 800d1f0:	0800ef20 	.word	0x0800ef20

0800d1f4 <__lshift>:
 800d1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f8:	460c      	mov	r4, r1
 800d1fa:	6849      	ldr	r1, [r1, #4]
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d202:	68a3      	ldr	r3, [r4, #8]
 800d204:	4607      	mov	r7, r0
 800d206:	4691      	mov	r9, r2
 800d208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d20c:	f108 0601 	add.w	r6, r8, #1
 800d210:	42b3      	cmp	r3, r6
 800d212:	db0b      	blt.n	800d22c <__lshift+0x38>
 800d214:	4638      	mov	r0, r7
 800d216:	f7ff fd93 	bl	800cd40 <_Balloc>
 800d21a:	4605      	mov	r5, r0
 800d21c:	b948      	cbnz	r0, 800d232 <__lshift+0x3e>
 800d21e:	4602      	mov	r2, r0
 800d220:	4b28      	ldr	r3, [pc, #160]	; (800d2c4 <__lshift+0xd0>)
 800d222:	4829      	ldr	r0, [pc, #164]	; (800d2c8 <__lshift+0xd4>)
 800d224:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d228:	f000 fd68 	bl	800dcfc <__assert_func>
 800d22c:	3101      	adds	r1, #1
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	e7ee      	b.n	800d210 <__lshift+0x1c>
 800d232:	2300      	movs	r3, #0
 800d234:	f100 0114 	add.w	r1, r0, #20
 800d238:	f100 0210 	add.w	r2, r0, #16
 800d23c:	4618      	mov	r0, r3
 800d23e:	4553      	cmp	r3, sl
 800d240:	db33      	blt.n	800d2aa <__lshift+0xb6>
 800d242:	6920      	ldr	r0, [r4, #16]
 800d244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d248:	f104 0314 	add.w	r3, r4, #20
 800d24c:	f019 091f 	ands.w	r9, r9, #31
 800d250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d254:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d258:	d02b      	beq.n	800d2b2 <__lshift+0xbe>
 800d25a:	f1c9 0e20 	rsb	lr, r9, #32
 800d25e:	468a      	mov	sl, r1
 800d260:	2200      	movs	r2, #0
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	fa00 f009 	lsl.w	r0, r0, r9
 800d268:	4302      	orrs	r2, r0
 800d26a:	f84a 2b04 	str.w	r2, [sl], #4
 800d26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d272:	459c      	cmp	ip, r3
 800d274:	fa22 f20e 	lsr.w	r2, r2, lr
 800d278:	d8f3      	bhi.n	800d262 <__lshift+0x6e>
 800d27a:	ebac 0304 	sub.w	r3, ip, r4
 800d27e:	3b15      	subs	r3, #21
 800d280:	f023 0303 	bic.w	r3, r3, #3
 800d284:	3304      	adds	r3, #4
 800d286:	f104 0015 	add.w	r0, r4, #21
 800d28a:	4584      	cmp	ip, r0
 800d28c:	bf38      	it	cc
 800d28e:	2304      	movcc	r3, #4
 800d290:	50ca      	str	r2, [r1, r3]
 800d292:	b10a      	cbz	r2, 800d298 <__lshift+0xa4>
 800d294:	f108 0602 	add.w	r6, r8, #2
 800d298:	3e01      	subs	r6, #1
 800d29a:	4638      	mov	r0, r7
 800d29c:	612e      	str	r6, [r5, #16]
 800d29e:	4621      	mov	r1, r4
 800d2a0:	f7ff fd8e 	bl	800cdc0 <_Bfree>
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	e7c5      	b.n	800d23e <__lshift+0x4a>
 800d2b2:	3904      	subs	r1, #4
 800d2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2bc:	459c      	cmp	ip, r3
 800d2be:	d8f9      	bhi.n	800d2b4 <__lshift+0xc0>
 800d2c0:	e7ea      	b.n	800d298 <__lshift+0xa4>
 800d2c2:	bf00      	nop
 800d2c4:	0800ee2c 	.word	0x0800ee2c
 800d2c8:	0800ef20 	.word	0x0800ef20

0800d2cc <__mcmp>:
 800d2cc:	690a      	ldr	r2, [r1, #16]
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	6900      	ldr	r0, [r0, #16]
 800d2d2:	1a80      	subs	r0, r0, r2
 800d2d4:	b530      	push	{r4, r5, lr}
 800d2d6:	d10d      	bne.n	800d2f4 <__mcmp+0x28>
 800d2d8:	3314      	adds	r3, #20
 800d2da:	3114      	adds	r1, #20
 800d2dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2ec:	4295      	cmp	r5, r2
 800d2ee:	d002      	beq.n	800d2f6 <__mcmp+0x2a>
 800d2f0:	d304      	bcc.n	800d2fc <__mcmp+0x30>
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	bd30      	pop	{r4, r5, pc}
 800d2f6:	42a3      	cmp	r3, r4
 800d2f8:	d3f4      	bcc.n	800d2e4 <__mcmp+0x18>
 800d2fa:	e7fb      	b.n	800d2f4 <__mcmp+0x28>
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d300:	e7f8      	b.n	800d2f4 <__mcmp+0x28>
	...

0800d304 <__mdiff>:
 800d304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	460c      	mov	r4, r1
 800d30a:	4606      	mov	r6, r0
 800d30c:	4611      	mov	r1, r2
 800d30e:	4620      	mov	r0, r4
 800d310:	4617      	mov	r7, r2
 800d312:	f7ff ffdb 	bl	800d2cc <__mcmp>
 800d316:	1e05      	subs	r5, r0, #0
 800d318:	d111      	bne.n	800d33e <__mdiff+0x3a>
 800d31a:	4629      	mov	r1, r5
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff fd0f 	bl	800cd40 <_Balloc>
 800d322:	4602      	mov	r2, r0
 800d324:	b928      	cbnz	r0, 800d332 <__mdiff+0x2e>
 800d326:	4b3a      	ldr	r3, [pc, #232]	; (800d410 <__mdiff+0x10c>)
 800d328:	f240 2132 	movw	r1, #562	; 0x232
 800d32c:	4839      	ldr	r0, [pc, #228]	; (800d414 <__mdiff+0x110>)
 800d32e:	f000 fce5 	bl	800dcfc <__assert_func>
 800d332:	2301      	movs	r3, #1
 800d334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d338:	4610      	mov	r0, r2
 800d33a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	bfa4      	itt	ge
 800d340:	463b      	movge	r3, r7
 800d342:	4627      	movge	r7, r4
 800d344:	4630      	mov	r0, r6
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	bfa6      	itte	ge
 800d34a:	461c      	movge	r4, r3
 800d34c:	2500      	movge	r5, #0
 800d34e:	2501      	movlt	r5, #1
 800d350:	f7ff fcf6 	bl	800cd40 <_Balloc>
 800d354:	4602      	mov	r2, r0
 800d356:	b918      	cbnz	r0, 800d360 <__mdiff+0x5c>
 800d358:	4b2d      	ldr	r3, [pc, #180]	; (800d410 <__mdiff+0x10c>)
 800d35a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d35e:	e7e5      	b.n	800d32c <__mdiff+0x28>
 800d360:	693e      	ldr	r6, [r7, #16]
 800d362:	60c5      	str	r5, [r0, #12]
 800d364:	6925      	ldr	r5, [r4, #16]
 800d366:	f107 0114 	add.w	r1, r7, #20
 800d36a:	f100 0e14 	add.w	lr, r0, #20
 800d36e:	f104 0914 	add.w	r9, r4, #20
 800d372:	f107 0010 	add.w	r0, r7, #16
 800d376:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d37a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d37e:	46f2      	mov	sl, lr
 800d380:	2700      	movs	r7, #0
 800d382:	f859 3b04 	ldr.w	r3, [r9], #4
 800d386:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d38a:	fa1f f883 	uxth.w	r8, r3
 800d38e:	fa17 f78b 	uxtah	r7, r7, fp
 800d392:	0c1b      	lsrs	r3, r3, #16
 800d394:	eba7 0808 	sub.w	r8, r7, r8
 800d398:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d39c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3a0:	fa1f f888 	uxth.w	r8, r8
 800d3a4:	141f      	asrs	r7, r3, #16
 800d3a6:	454d      	cmp	r5, r9
 800d3a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3ac:	f84a 3b04 	str.w	r3, [sl], #4
 800d3b0:	d8e7      	bhi.n	800d382 <__mdiff+0x7e>
 800d3b2:	1b2b      	subs	r3, r5, r4
 800d3b4:	3b15      	subs	r3, #21
 800d3b6:	f023 0303 	bic.w	r3, r3, #3
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	3415      	adds	r4, #21
 800d3be:	42a5      	cmp	r5, r4
 800d3c0:	bf38      	it	cc
 800d3c2:	2304      	movcc	r3, #4
 800d3c4:	4419      	add	r1, r3
 800d3c6:	4473      	add	r3, lr
 800d3c8:	469e      	mov	lr, r3
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	4565      	cmp	r5, ip
 800d3ce:	d30e      	bcc.n	800d3ee <__mdiff+0xea>
 800d3d0:	f10c 0003 	add.w	r0, ip, #3
 800d3d4:	1a40      	subs	r0, r0, r1
 800d3d6:	f020 0003 	bic.w	r0, r0, #3
 800d3da:	3903      	subs	r1, #3
 800d3dc:	458c      	cmp	ip, r1
 800d3de:	bf38      	it	cc
 800d3e0:	2000      	movcc	r0, #0
 800d3e2:	4418      	add	r0, r3
 800d3e4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d3e8:	b17b      	cbz	r3, 800d40a <__mdiff+0x106>
 800d3ea:	6116      	str	r6, [r2, #16]
 800d3ec:	e7a4      	b.n	800d338 <__mdiff+0x34>
 800d3ee:	f855 8b04 	ldr.w	r8, [r5], #4
 800d3f2:	fa17 f488 	uxtah	r4, r7, r8
 800d3f6:	1420      	asrs	r0, r4, #16
 800d3f8:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d3fc:	b2a4      	uxth	r4, r4
 800d3fe:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800d402:	f84e 4b04 	str.w	r4, [lr], #4
 800d406:	1407      	asrs	r7, r0, #16
 800d408:	e7e0      	b.n	800d3cc <__mdiff+0xc8>
 800d40a:	3e01      	subs	r6, #1
 800d40c:	e7ea      	b.n	800d3e4 <__mdiff+0xe0>
 800d40e:	bf00      	nop
 800d410:	0800ee2c 	.word	0x0800ee2c
 800d414:	0800ef20 	.word	0x0800ef20

0800d418 <__ulp>:
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <__ulp+0x48>)
 800d41a:	400b      	ands	r3, r1
 800d41c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d420:	2b00      	cmp	r3, #0
 800d422:	dd02      	ble.n	800d42a <__ulp+0x12>
 800d424:	2000      	movs	r0, #0
 800d426:	4619      	mov	r1, r3
 800d428:	4770      	bx	lr
 800d42a:	425b      	negs	r3, r3
 800d42c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d430:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d434:	f04f 0000 	mov.w	r0, #0
 800d438:	f04f 0100 	mov.w	r1, #0
 800d43c:	da04      	bge.n	800d448 <__ulp+0x30>
 800d43e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d442:	fa43 f102 	asr.w	r1, r3, r2
 800d446:	4770      	bx	lr
 800d448:	f1a2 0314 	sub.w	r3, r2, #20
 800d44c:	2b1e      	cmp	r3, #30
 800d44e:	bfda      	itte	le
 800d450:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d454:	fa22 f303 	lsrle.w	r3, r2, r3
 800d458:	2301      	movgt	r3, #1
 800d45a:	4618      	mov	r0, r3
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	7ff00000 	.word	0x7ff00000

0800d464 <__b2d>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	6907      	ldr	r7, [r0, #16]
 800d46a:	f100 0914 	add.w	r9, r0, #20
 800d46e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d472:	f1a7 0804 	sub.w	r8, r7, #4
 800d476:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7ff fd56 	bl	800cf2c <__hi0bits>
 800d480:	f1c0 0320 	rsb	r3, r0, #32
 800d484:	280a      	cmp	r0, #10
 800d486:	600b      	str	r3, [r1, #0]
 800d488:	491f      	ldr	r1, [pc, #124]	; (800d508 <__b2d+0xa4>)
 800d48a:	dc17      	bgt.n	800d4bc <__b2d+0x58>
 800d48c:	f1c0 0c0b 	rsb	ip, r0, #11
 800d490:	45c1      	cmp	r9, r8
 800d492:	fa26 f30c 	lsr.w	r3, r6, ip
 800d496:	bf38      	it	cc
 800d498:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d49c:	ea43 0501 	orr.w	r5, r3, r1
 800d4a0:	bf28      	it	cs
 800d4a2:	2200      	movcs	r2, #0
 800d4a4:	f100 0315 	add.w	r3, r0, #21
 800d4a8:	fa06 f303 	lsl.w	r3, r6, r3
 800d4ac:	fa22 f20c 	lsr.w	r2, r2, ip
 800d4b0:	ea43 0402 	orr.w	r4, r3, r2
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4bc:	45c1      	cmp	r9, r8
 800d4be:	bf3a      	itte	cc
 800d4c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d4c4:	f1a7 0808 	subcc.w	r8, r7, #8
 800d4c8:	2200      	movcs	r2, #0
 800d4ca:	f1b0 030b 	subs.w	r3, r0, #11
 800d4ce:	d016      	beq.n	800d4fe <__b2d+0x9a>
 800d4d0:	f1c3 0720 	rsb	r7, r3, #32
 800d4d4:	fa22 f107 	lsr.w	r1, r2, r7
 800d4d8:	45c8      	cmp	r8, r9
 800d4da:	fa06 f603 	lsl.w	r6, r6, r3
 800d4de:	ea46 0601 	orr.w	r6, r6, r1
 800d4e2:	bf8c      	ite	hi
 800d4e4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d4e8:	2100      	movls	r1, #0
 800d4ea:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d4ee:	fa02 f003 	lsl.w	r0, r2, r3
 800d4f2:	40f9      	lsrs	r1, r7
 800d4f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d4f8:	ea40 0401 	orr.w	r4, r0, r1
 800d4fc:	e7da      	b.n	800d4b4 <__b2d+0x50>
 800d4fe:	ea46 0501 	orr.w	r5, r6, r1
 800d502:	4614      	mov	r4, r2
 800d504:	e7d6      	b.n	800d4b4 <__b2d+0x50>
 800d506:	bf00      	nop
 800d508:	3ff00000 	.word	0x3ff00000

0800d50c <__d2b>:
 800d50c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d510:	2101      	movs	r1, #1
 800d512:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d516:	4690      	mov	r8, r2
 800d518:	461d      	mov	r5, r3
 800d51a:	f7ff fc11 	bl	800cd40 <_Balloc>
 800d51e:	4604      	mov	r4, r0
 800d520:	b930      	cbnz	r0, 800d530 <__d2b+0x24>
 800d522:	4602      	mov	r2, r0
 800d524:	4b25      	ldr	r3, [pc, #148]	; (800d5bc <__d2b+0xb0>)
 800d526:	4826      	ldr	r0, [pc, #152]	; (800d5c0 <__d2b+0xb4>)
 800d528:	f240 310a 	movw	r1, #778	; 0x30a
 800d52c:	f000 fbe6 	bl	800dcfc <__assert_func>
 800d530:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d534:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d538:	bb2d      	cbnz	r5, 800d586 <__d2b+0x7a>
 800d53a:	9301      	str	r3, [sp, #4]
 800d53c:	f1b8 0300 	subs.w	r3, r8, #0
 800d540:	d026      	beq.n	800d590 <__d2b+0x84>
 800d542:	4668      	mov	r0, sp
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	f7ff fd11 	bl	800cf6c <__lo0bits>
 800d54a:	9900      	ldr	r1, [sp, #0]
 800d54c:	b1f0      	cbz	r0, 800d58c <__d2b+0x80>
 800d54e:	9a01      	ldr	r2, [sp, #4]
 800d550:	f1c0 0320 	rsb	r3, r0, #32
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	430b      	orrs	r3, r1
 800d55a:	40c2      	lsrs	r2, r0
 800d55c:	6163      	str	r3, [r4, #20]
 800d55e:	9201      	str	r2, [sp, #4]
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	61a3      	str	r3, [r4, #24]
 800d564:	2b00      	cmp	r3, #0
 800d566:	bf14      	ite	ne
 800d568:	2102      	movne	r1, #2
 800d56a:	2101      	moveq	r1, #1
 800d56c:	6121      	str	r1, [r4, #16]
 800d56e:	b1c5      	cbz	r5, 800d5a2 <__d2b+0x96>
 800d570:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d574:	4405      	add	r5, r0
 800d576:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d57a:	603d      	str	r5, [r7, #0]
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	4620      	mov	r0, r4
 800d580:	b002      	add	sp, #8
 800d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d58a:	e7d6      	b.n	800d53a <__d2b+0x2e>
 800d58c:	6161      	str	r1, [r4, #20]
 800d58e:	e7e7      	b.n	800d560 <__d2b+0x54>
 800d590:	a801      	add	r0, sp, #4
 800d592:	f7ff fceb 	bl	800cf6c <__lo0bits>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	6163      	str	r3, [r4, #20]
 800d59a:	2101      	movs	r1, #1
 800d59c:	6121      	str	r1, [r4, #16]
 800d59e:	3020      	adds	r0, #32
 800d5a0:	e7e5      	b.n	800d56e <__d2b+0x62>
 800d5a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d5a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d5aa:	6038      	str	r0, [r7, #0]
 800d5ac:	6918      	ldr	r0, [r3, #16]
 800d5ae:	f7ff fcbd 	bl	800cf2c <__hi0bits>
 800d5b2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d5b6:	6031      	str	r1, [r6, #0]
 800d5b8:	e7e1      	b.n	800d57e <__d2b+0x72>
 800d5ba:	bf00      	nop
 800d5bc:	0800ee2c 	.word	0x0800ee2c
 800d5c0:	0800ef20 	.word	0x0800ef20

0800d5c4 <__ratio>:
 800d5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	4688      	mov	r8, r1
 800d5ca:	4669      	mov	r1, sp
 800d5cc:	4681      	mov	r9, r0
 800d5ce:	f7ff ff49 	bl	800d464 <__b2d>
 800d5d2:	460f      	mov	r7, r1
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	4640      	mov	r0, r8
 800d5da:	a901      	add	r1, sp, #4
 800d5dc:	f7ff ff42 	bl	800d464 <__b2d>
 800d5e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d5e8:	eba3 0c02 	sub.w	ip, r3, r2
 800d5ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	bfd5      	itete	le
 800d5fa:	460a      	movle	r2, r1
 800d5fc:	462a      	movgt	r2, r5
 800d5fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d602:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d606:	468b      	mov	fp, r1
 800d608:	bfd8      	it	le
 800d60a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d60e:	465b      	mov	r3, fp
 800d610:	4602      	mov	r2, r0
 800d612:	4639      	mov	r1, r7
 800d614:	4620      	mov	r0, r4
 800d616:	f7f3 f901 	bl	800081c <__aeabi_ddiv>
 800d61a:	b003      	add	sp, #12
 800d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d620 <__copybits>:
 800d620:	3901      	subs	r1, #1
 800d622:	b570      	push	{r4, r5, r6, lr}
 800d624:	1149      	asrs	r1, r1, #5
 800d626:	6914      	ldr	r4, [r2, #16]
 800d628:	3101      	adds	r1, #1
 800d62a:	f102 0314 	add.w	r3, r2, #20
 800d62e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d632:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d636:	1f05      	subs	r5, r0, #4
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d30c      	bcc.n	800d656 <__copybits+0x36>
 800d63c:	1aa3      	subs	r3, r4, r2
 800d63e:	3b11      	subs	r3, #17
 800d640:	f023 0303 	bic.w	r3, r3, #3
 800d644:	3211      	adds	r2, #17
 800d646:	42a2      	cmp	r2, r4
 800d648:	bf88      	it	hi
 800d64a:	2300      	movhi	r3, #0
 800d64c:	4418      	add	r0, r3
 800d64e:	2300      	movs	r3, #0
 800d650:	4288      	cmp	r0, r1
 800d652:	d305      	bcc.n	800d660 <__copybits+0x40>
 800d654:	bd70      	pop	{r4, r5, r6, pc}
 800d656:	f853 6b04 	ldr.w	r6, [r3], #4
 800d65a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d65e:	e7eb      	b.n	800d638 <__copybits+0x18>
 800d660:	f840 3b04 	str.w	r3, [r0], #4
 800d664:	e7f4      	b.n	800d650 <__copybits+0x30>

0800d666 <__any_on>:
 800d666:	f100 0214 	add.w	r2, r0, #20
 800d66a:	6900      	ldr	r0, [r0, #16]
 800d66c:	114b      	asrs	r3, r1, #5
 800d66e:	4298      	cmp	r0, r3
 800d670:	b510      	push	{r4, lr}
 800d672:	db11      	blt.n	800d698 <__any_on+0x32>
 800d674:	dd0a      	ble.n	800d68c <__any_on+0x26>
 800d676:	f011 011f 	ands.w	r1, r1, #31
 800d67a:	d007      	beq.n	800d68c <__any_on+0x26>
 800d67c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d680:	fa24 f001 	lsr.w	r0, r4, r1
 800d684:	fa00 f101 	lsl.w	r1, r0, r1
 800d688:	428c      	cmp	r4, r1
 800d68a:	d10b      	bne.n	800d6a4 <__any_on+0x3e>
 800d68c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d690:	4293      	cmp	r3, r2
 800d692:	d803      	bhi.n	800d69c <__any_on+0x36>
 800d694:	2000      	movs	r0, #0
 800d696:	bd10      	pop	{r4, pc}
 800d698:	4603      	mov	r3, r0
 800d69a:	e7f7      	b.n	800d68c <__any_on+0x26>
 800d69c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6a0:	2900      	cmp	r1, #0
 800d6a2:	d0f5      	beq.n	800d690 <__any_on+0x2a>
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	e7f6      	b.n	800d696 <__any_on+0x30>

0800d6a8 <_calloc_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	fb02 f501 	mul.w	r5, r2, r1
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	f7fb ff50 	bl	8009554 <_malloc_r>
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	b118      	cbz	r0, 800d6c0 <_calloc_r+0x18>
 800d6b8:	462a      	mov	r2, r5
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	f7fb fef4 	bl	80094a8 <memset>
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}

0800d6c4 <__ssputs_r>:
 800d6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	688e      	ldr	r6, [r1, #8]
 800d6ca:	429e      	cmp	r6, r3
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	4690      	mov	r8, r2
 800d6d2:	461f      	mov	r7, r3
 800d6d4:	d838      	bhi.n	800d748 <__ssputs_r+0x84>
 800d6d6:	898a      	ldrh	r2, [r1, #12]
 800d6d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6dc:	d032      	beq.n	800d744 <__ssputs_r+0x80>
 800d6de:	6825      	ldr	r5, [r4, #0]
 800d6e0:	6909      	ldr	r1, [r1, #16]
 800d6e2:	eba5 0901 	sub.w	r9, r5, r1
 800d6e6:	6965      	ldr	r5, [r4, #20]
 800d6e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	444b      	add	r3, r9
 800d6f4:	106d      	asrs	r5, r5, #1
 800d6f6:	429d      	cmp	r5, r3
 800d6f8:	bf38      	it	cc
 800d6fa:	461d      	movcc	r5, r3
 800d6fc:	0553      	lsls	r3, r2, #21
 800d6fe:	d531      	bpl.n	800d764 <__ssputs_r+0xa0>
 800d700:	4629      	mov	r1, r5
 800d702:	f7fb ff27 	bl	8009554 <_malloc_r>
 800d706:	4606      	mov	r6, r0
 800d708:	b950      	cbnz	r0, 800d720 <__ssputs_r+0x5c>
 800d70a:	230c      	movs	r3, #12
 800d70c:	f8ca 3000 	str.w	r3, [sl]
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	f04f 30ff 	mov.w	r0, #4294967295
 800d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d720:	6921      	ldr	r1, [r4, #16]
 800d722:	464a      	mov	r2, r9
 800d724:	f7fb feb2 	bl	800948c <memcpy>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	6126      	str	r6, [r4, #16]
 800d736:	6165      	str	r5, [r4, #20]
 800d738:	444e      	add	r6, r9
 800d73a:	eba5 0509 	sub.w	r5, r5, r9
 800d73e:	6026      	str	r6, [r4, #0]
 800d740:	60a5      	str	r5, [r4, #8]
 800d742:	463e      	mov	r6, r7
 800d744:	42be      	cmp	r6, r7
 800d746:	d900      	bls.n	800d74a <__ssputs_r+0x86>
 800d748:	463e      	mov	r6, r7
 800d74a:	4632      	mov	r2, r6
 800d74c:	6820      	ldr	r0, [r4, #0]
 800d74e:	4641      	mov	r1, r8
 800d750:	f000 fb48 	bl	800dde4 <memmove>
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	6822      	ldr	r2, [r4, #0]
 800d758:	1b9b      	subs	r3, r3, r6
 800d75a:	4432      	add	r2, r6
 800d75c:	60a3      	str	r3, [r4, #8]
 800d75e:	6022      	str	r2, [r4, #0]
 800d760:	2000      	movs	r0, #0
 800d762:	e7db      	b.n	800d71c <__ssputs_r+0x58>
 800d764:	462a      	mov	r2, r5
 800d766:	f000 fb57 	bl	800de18 <_realloc_r>
 800d76a:	4606      	mov	r6, r0
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d1e1      	bne.n	800d734 <__ssputs_r+0x70>
 800d770:	6921      	ldr	r1, [r4, #16]
 800d772:	4650      	mov	r0, sl
 800d774:	f7fb fea0 	bl	80094b8 <_free_r>
 800d778:	e7c7      	b.n	800d70a <__ssputs_r+0x46>
	...

0800d77c <_svfiprintf_r>:
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	4698      	mov	r8, r3
 800d782:	898b      	ldrh	r3, [r1, #12]
 800d784:	061b      	lsls	r3, r3, #24
 800d786:	b09d      	sub	sp, #116	; 0x74
 800d788:	4607      	mov	r7, r0
 800d78a:	460d      	mov	r5, r1
 800d78c:	4614      	mov	r4, r2
 800d78e:	d50e      	bpl.n	800d7ae <_svfiprintf_r+0x32>
 800d790:	690b      	ldr	r3, [r1, #16]
 800d792:	b963      	cbnz	r3, 800d7ae <_svfiprintf_r+0x32>
 800d794:	2140      	movs	r1, #64	; 0x40
 800d796:	f7fb fedd 	bl	8009554 <_malloc_r>
 800d79a:	6028      	str	r0, [r5, #0]
 800d79c:	6128      	str	r0, [r5, #16]
 800d79e:	b920      	cbnz	r0, 800d7aa <_svfiprintf_r+0x2e>
 800d7a0:	230c      	movs	r3, #12
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a8:	e0d1      	b.n	800d94e <_svfiprintf_r+0x1d2>
 800d7aa:	2340      	movs	r3, #64	; 0x40
 800d7ac:	616b      	str	r3, [r5, #20]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b2:	2320      	movs	r3, #32
 800d7b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7bc:	2330      	movs	r3, #48	; 0x30
 800d7be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d968 <_svfiprintf_r+0x1ec>
 800d7c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7c6:	f04f 0901 	mov.w	r9, #1
 800d7ca:	4623      	mov	r3, r4
 800d7cc:	469a      	mov	sl, r3
 800d7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7d2:	b10a      	cbz	r2, 800d7d8 <_svfiprintf_r+0x5c>
 800d7d4:	2a25      	cmp	r2, #37	; 0x25
 800d7d6:	d1f9      	bne.n	800d7cc <_svfiprintf_r+0x50>
 800d7d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d7dc:	d00b      	beq.n	800d7f6 <_svfiprintf_r+0x7a>
 800d7de:	465b      	mov	r3, fp
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f7ff ff6d 	bl	800d6c4 <__ssputs_r>
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	f000 80aa 	beq.w	800d944 <_svfiprintf_r+0x1c8>
 800d7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f2:	445a      	add	r2, fp
 800d7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 80a2 	beq.w	800d944 <_svfiprintf_r+0x1c8>
 800d800:	2300      	movs	r3, #0
 800d802:	f04f 32ff 	mov.w	r2, #4294967295
 800d806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d80a:	f10a 0a01 	add.w	sl, sl, #1
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	9307      	str	r3, [sp, #28]
 800d812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d816:	931a      	str	r3, [sp, #104]	; 0x68
 800d818:	4654      	mov	r4, sl
 800d81a:	2205      	movs	r2, #5
 800d81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d820:	4851      	ldr	r0, [pc, #324]	; (800d968 <_svfiprintf_r+0x1ec>)
 800d822:	f7f2 fcc5 	bl	80001b0 <memchr>
 800d826:	9a04      	ldr	r2, [sp, #16]
 800d828:	b9d8      	cbnz	r0, 800d862 <_svfiprintf_r+0xe6>
 800d82a:	06d0      	lsls	r0, r2, #27
 800d82c:	bf44      	itt	mi
 800d82e:	2320      	movmi	r3, #32
 800d830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d834:	0711      	lsls	r1, r2, #28
 800d836:	bf44      	itt	mi
 800d838:	232b      	movmi	r3, #43	; 0x2b
 800d83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d83e:	f89a 3000 	ldrb.w	r3, [sl]
 800d842:	2b2a      	cmp	r3, #42	; 0x2a
 800d844:	d015      	beq.n	800d872 <_svfiprintf_r+0xf6>
 800d846:	9a07      	ldr	r2, [sp, #28]
 800d848:	4654      	mov	r4, sl
 800d84a:	2000      	movs	r0, #0
 800d84c:	f04f 0c0a 	mov.w	ip, #10
 800d850:	4621      	mov	r1, r4
 800d852:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d856:	3b30      	subs	r3, #48	; 0x30
 800d858:	2b09      	cmp	r3, #9
 800d85a:	d94e      	bls.n	800d8fa <_svfiprintf_r+0x17e>
 800d85c:	b1b0      	cbz	r0, 800d88c <_svfiprintf_r+0x110>
 800d85e:	9207      	str	r2, [sp, #28]
 800d860:	e014      	b.n	800d88c <_svfiprintf_r+0x110>
 800d862:	eba0 0308 	sub.w	r3, r0, r8
 800d866:	fa09 f303 	lsl.w	r3, r9, r3
 800d86a:	4313      	orrs	r3, r2
 800d86c:	9304      	str	r3, [sp, #16]
 800d86e:	46a2      	mov	sl, r4
 800d870:	e7d2      	b.n	800d818 <_svfiprintf_r+0x9c>
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	1d19      	adds	r1, r3, #4
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	9103      	str	r1, [sp, #12]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	bfbb      	ittet	lt
 800d87e:	425b      	neglt	r3, r3
 800d880:	f042 0202 	orrlt.w	r2, r2, #2
 800d884:	9307      	strge	r3, [sp, #28]
 800d886:	9307      	strlt	r3, [sp, #28]
 800d888:	bfb8      	it	lt
 800d88a:	9204      	strlt	r2, [sp, #16]
 800d88c:	7823      	ldrb	r3, [r4, #0]
 800d88e:	2b2e      	cmp	r3, #46	; 0x2e
 800d890:	d10c      	bne.n	800d8ac <_svfiprintf_r+0x130>
 800d892:	7863      	ldrb	r3, [r4, #1]
 800d894:	2b2a      	cmp	r3, #42	; 0x2a
 800d896:	d135      	bne.n	800d904 <_svfiprintf_r+0x188>
 800d898:	9b03      	ldr	r3, [sp, #12]
 800d89a:	1d1a      	adds	r2, r3, #4
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	9203      	str	r2, [sp, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	bfb8      	it	lt
 800d8a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8a8:	3402      	adds	r4, #2
 800d8aa:	9305      	str	r3, [sp, #20]
 800d8ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d978 <_svfiprintf_r+0x1fc>
 800d8b0:	7821      	ldrb	r1, [r4, #0]
 800d8b2:	2203      	movs	r2, #3
 800d8b4:	4650      	mov	r0, sl
 800d8b6:	f7f2 fc7b 	bl	80001b0 <memchr>
 800d8ba:	b140      	cbz	r0, 800d8ce <_svfiprintf_r+0x152>
 800d8bc:	2340      	movs	r3, #64	; 0x40
 800d8be:	eba0 000a 	sub.w	r0, r0, sl
 800d8c2:	fa03 f000 	lsl.w	r0, r3, r0
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	4303      	orrs	r3, r0
 800d8ca:	3401      	adds	r4, #1
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d2:	4826      	ldr	r0, [pc, #152]	; (800d96c <_svfiprintf_r+0x1f0>)
 800d8d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8d8:	2206      	movs	r2, #6
 800d8da:	f7f2 fc69 	bl	80001b0 <memchr>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d038      	beq.n	800d954 <_svfiprintf_r+0x1d8>
 800d8e2:	4b23      	ldr	r3, [pc, #140]	; (800d970 <_svfiprintf_r+0x1f4>)
 800d8e4:	bb1b      	cbnz	r3, 800d92e <_svfiprintf_r+0x1b2>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	3307      	adds	r3, #7
 800d8ea:	f023 0307 	bic.w	r3, r3, #7
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	9303      	str	r3, [sp, #12]
 800d8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f4:	4433      	add	r3, r6
 800d8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8f8:	e767      	b.n	800d7ca <_svfiprintf_r+0x4e>
 800d8fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8fe:	460c      	mov	r4, r1
 800d900:	2001      	movs	r0, #1
 800d902:	e7a5      	b.n	800d850 <_svfiprintf_r+0xd4>
 800d904:	2300      	movs	r3, #0
 800d906:	3401      	adds	r4, #1
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	4619      	mov	r1, r3
 800d90c:	f04f 0c0a 	mov.w	ip, #10
 800d910:	4620      	mov	r0, r4
 800d912:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d916:	3a30      	subs	r2, #48	; 0x30
 800d918:	2a09      	cmp	r2, #9
 800d91a:	d903      	bls.n	800d924 <_svfiprintf_r+0x1a8>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0c5      	beq.n	800d8ac <_svfiprintf_r+0x130>
 800d920:	9105      	str	r1, [sp, #20]
 800d922:	e7c3      	b.n	800d8ac <_svfiprintf_r+0x130>
 800d924:	fb0c 2101 	mla	r1, ip, r1, r2
 800d928:	4604      	mov	r4, r0
 800d92a:	2301      	movs	r3, #1
 800d92c:	e7f0      	b.n	800d910 <_svfiprintf_r+0x194>
 800d92e:	ab03      	add	r3, sp, #12
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	462a      	mov	r2, r5
 800d934:	4b0f      	ldr	r3, [pc, #60]	; (800d974 <_svfiprintf_r+0x1f8>)
 800d936:	a904      	add	r1, sp, #16
 800d938:	4638      	mov	r0, r7
 800d93a:	f7fb ff03 	bl	8009744 <_printf_float>
 800d93e:	1c42      	adds	r2, r0, #1
 800d940:	4606      	mov	r6, r0
 800d942:	d1d6      	bne.n	800d8f2 <_svfiprintf_r+0x176>
 800d944:	89ab      	ldrh	r3, [r5, #12]
 800d946:	065b      	lsls	r3, r3, #25
 800d948:	f53f af2c 	bmi.w	800d7a4 <_svfiprintf_r+0x28>
 800d94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d94e:	b01d      	add	sp, #116	; 0x74
 800d950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d954:	ab03      	add	r3, sp, #12
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	462a      	mov	r2, r5
 800d95a:	4b06      	ldr	r3, [pc, #24]	; (800d974 <_svfiprintf_r+0x1f8>)
 800d95c:	a904      	add	r1, sp, #16
 800d95e:	4638      	mov	r0, r7
 800d960:	f7fc f988 	bl	8009c74 <_printf_i>
 800d964:	e7eb      	b.n	800d93e <_svfiprintf_r+0x1c2>
 800d966:	bf00      	nop
 800d968:	0800f07c 	.word	0x0800f07c
 800d96c:	0800f086 	.word	0x0800f086
 800d970:	08009745 	.word	0x08009745
 800d974:	0800d6c5 	.word	0x0800d6c5
 800d978:	0800f082 	.word	0x0800f082

0800d97c <__sfputc_r>:
 800d97c:	6893      	ldr	r3, [r2, #8]
 800d97e:	3b01      	subs	r3, #1
 800d980:	2b00      	cmp	r3, #0
 800d982:	b410      	push	{r4}
 800d984:	6093      	str	r3, [r2, #8]
 800d986:	da07      	bge.n	800d998 <__sfputc_r+0x1c>
 800d988:	6994      	ldr	r4, [r2, #24]
 800d98a:	42a3      	cmp	r3, r4
 800d98c:	db01      	blt.n	800d992 <__sfputc_r+0x16>
 800d98e:	290a      	cmp	r1, #10
 800d990:	d102      	bne.n	800d998 <__sfputc_r+0x1c>
 800d992:	bc10      	pop	{r4}
 800d994:	f7fd bca6 	b.w	800b2e4 <__swbuf_r>
 800d998:	6813      	ldr	r3, [r2, #0]
 800d99a:	1c58      	adds	r0, r3, #1
 800d99c:	6010      	str	r0, [r2, #0]
 800d99e:	7019      	strb	r1, [r3, #0]
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	bc10      	pop	{r4}
 800d9a4:	4770      	bx	lr

0800d9a6 <__sfputs_r>:
 800d9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	18d5      	adds	r5, r2, r3
 800d9b0:	42ac      	cmp	r4, r5
 800d9b2:	d101      	bne.n	800d9b8 <__sfputs_r+0x12>
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	e007      	b.n	800d9c8 <__sfputs_r+0x22>
 800d9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9bc:	463a      	mov	r2, r7
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f7ff ffdc 	bl	800d97c <__sfputc_r>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d1f3      	bne.n	800d9b0 <__sfputs_r+0xa>
 800d9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9cc <_vfiprintf_r>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	b09d      	sub	sp, #116	; 0x74
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	4698      	mov	r8, r3
 800d9d8:	4606      	mov	r6, r0
 800d9da:	b118      	cbz	r0, 800d9e4 <_vfiprintf_r+0x18>
 800d9dc:	6983      	ldr	r3, [r0, #24]
 800d9de:	b90b      	cbnz	r3, 800d9e4 <_vfiprintf_r+0x18>
 800d9e0:	f7fe fd24 	bl	800c42c <__sinit>
 800d9e4:	4b89      	ldr	r3, [pc, #548]	; (800dc0c <_vfiprintf_r+0x240>)
 800d9e6:	429d      	cmp	r5, r3
 800d9e8:	d11b      	bne.n	800da22 <_vfiprintf_r+0x56>
 800d9ea:	6875      	ldr	r5, [r6, #4]
 800d9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9ee:	07d9      	lsls	r1, r3, #31
 800d9f0:	d405      	bmi.n	800d9fe <_vfiprintf_r+0x32>
 800d9f2:	89ab      	ldrh	r3, [r5, #12]
 800d9f4:	059a      	lsls	r2, r3, #22
 800d9f6:	d402      	bmi.n	800d9fe <_vfiprintf_r+0x32>
 800d9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9fa:	f7ff f91c 	bl	800cc36 <__retarget_lock_acquire_recursive>
 800d9fe:	89ab      	ldrh	r3, [r5, #12]
 800da00:	071b      	lsls	r3, r3, #28
 800da02:	d501      	bpl.n	800da08 <_vfiprintf_r+0x3c>
 800da04:	692b      	ldr	r3, [r5, #16]
 800da06:	b9eb      	cbnz	r3, 800da44 <_vfiprintf_r+0x78>
 800da08:	4629      	mov	r1, r5
 800da0a:	4630      	mov	r0, r6
 800da0c:	f7fd fcce 	bl	800b3ac <__swsetup_r>
 800da10:	b1c0      	cbz	r0, 800da44 <_vfiprintf_r+0x78>
 800da12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da14:	07dc      	lsls	r4, r3, #31
 800da16:	d50e      	bpl.n	800da36 <_vfiprintf_r+0x6a>
 800da18:	f04f 30ff 	mov.w	r0, #4294967295
 800da1c:	b01d      	add	sp, #116	; 0x74
 800da1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da22:	4b7b      	ldr	r3, [pc, #492]	; (800dc10 <_vfiprintf_r+0x244>)
 800da24:	429d      	cmp	r5, r3
 800da26:	d101      	bne.n	800da2c <_vfiprintf_r+0x60>
 800da28:	68b5      	ldr	r5, [r6, #8]
 800da2a:	e7df      	b.n	800d9ec <_vfiprintf_r+0x20>
 800da2c:	4b79      	ldr	r3, [pc, #484]	; (800dc14 <_vfiprintf_r+0x248>)
 800da2e:	429d      	cmp	r5, r3
 800da30:	bf08      	it	eq
 800da32:	68f5      	ldreq	r5, [r6, #12]
 800da34:	e7da      	b.n	800d9ec <_vfiprintf_r+0x20>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	0598      	lsls	r0, r3, #22
 800da3a:	d4ed      	bmi.n	800da18 <_vfiprintf_r+0x4c>
 800da3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da3e:	f7ff f8fb 	bl	800cc38 <__retarget_lock_release_recursive>
 800da42:	e7e9      	b.n	800da18 <_vfiprintf_r+0x4c>
 800da44:	2300      	movs	r3, #0
 800da46:	9309      	str	r3, [sp, #36]	; 0x24
 800da48:	2320      	movs	r3, #32
 800da4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da52:	2330      	movs	r3, #48	; 0x30
 800da54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc18 <_vfiprintf_r+0x24c>
 800da58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da5c:	f04f 0901 	mov.w	r9, #1
 800da60:	4623      	mov	r3, r4
 800da62:	469a      	mov	sl, r3
 800da64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da68:	b10a      	cbz	r2, 800da6e <_vfiprintf_r+0xa2>
 800da6a:	2a25      	cmp	r2, #37	; 0x25
 800da6c:	d1f9      	bne.n	800da62 <_vfiprintf_r+0x96>
 800da6e:	ebba 0b04 	subs.w	fp, sl, r4
 800da72:	d00b      	beq.n	800da8c <_vfiprintf_r+0xc0>
 800da74:	465b      	mov	r3, fp
 800da76:	4622      	mov	r2, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	4630      	mov	r0, r6
 800da7c:	f7ff ff93 	bl	800d9a6 <__sfputs_r>
 800da80:	3001      	adds	r0, #1
 800da82:	f000 80aa 	beq.w	800dbda <_vfiprintf_r+0x20e>
 800da86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da88:	445a      	add	r2, fp
 800da8a:	9209      	str	r2, [sp, #36]	; 0x24
 800da8c:	f89a 3000 	ldrb.w	r3, [sl]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 80a2 	beq.w	800dbda <_vfiprintf_r+0x20e>
 800da96:	2300      	movs	r3, #0
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daa0:	f10a 0a01 	add.w	sl, sl, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	9307      	str	r3, [sp, #28]
 800daa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daac:	931a      	str	r3, [sp, #104]	; 0x68
 800daae:	4654      	mov	r4, sl
 800dab0:	2205      	movs	r2, #5
 800dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab6:	4858      	ldr	r0, [pc, #352]	; (800dc18 <_vfiprintf_r+0x24c>)
 800dab8:	f7f2 fb7a 	bl	80001b0 <memchr>
 800dabc:	9a04      	ldr	r2, [sp, #16]
 800dabe:	b9d8      	cbnz	r0, 800daf8 <_vfiprintf_r+0x12c>
 800dac0:	06d1      	lsls	r1, r2, #27
 800dac2:	bf44      	itt	mi
 800dac4:	2320      	movmi	r3, #32
 800dac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daca:	0713      	lsls	r3, r2, #28
 800dacc:	bf44      	itt	mi
 800dace:	232b      	movmi	r3, #43	; 0x2b
 800dad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dad4:	f89a 3000 	ldrb.w	r3, [sl]
 800dad8:	2b2a      	cmp	r3, #42	; 0x2a
 800dada:	d015      	beq.n	800db08 <_vfiprintf_r+0x13c>
 800dadc:	9a07      	ldr	r2, [sp, #28]
 800dade:	4654      	mov	r4, sl
 800dae0:	2000      	movs	r0, #0
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4621      	mov	r1, r4
 800dae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daec:	3b30      	subs	r3, #48	; 0x30
 800daee:	2b09      	cmp	r3, #9
 800daf0:	d94e      	bls.n	800db90 <_vfiprintf_r+0x1c4>
 800daf2:	b1b0      	cbz	r0, 800db22 <_vfiprintf_r+0x156>
 800daf4:	9207      	str	r2, [sp, #28]
 800daf6:	e014      	b.n	800db22 <_vfiprintf_r+0x156>
 800daf8:	eba0 0308 	sub.w	r3, r0, r8
 800dafc:	fa09 f303 	lsl.w	r3, r9, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	46a2      	mov	sl, r4
 800db06:	e7d2      	b.n	800daae <_vfiprintf_r+0xe2>
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	1d19      	adds	r1, r3, #4
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	9103      	str	r1, [sp, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	bfbb      	ittet	lt
 800db14:	425b      	neglt	r3, r3
 800db16:	f042 0202 	orrlt.w	r2, r2, #2
 800db1a:	9307      	strge	r3, [sp, #28]
 800db1c:	9307      	strlt	r3, [sp, #28]
 800db1e:	bfb8      	it	lt
 800db20:	9204      	strlt	r2, [sp, #16]
 800db22:	7823      	ldrb	r3, [r4, #0]
 800db24:	2b2e      	cmp	r3, #46	; 0x2e
 800db26:	d10c      	bne.n	800db42 <_vfiprintf_r+0x176>
 800db28:	7863      	ldrb	r3, [r4, #1]
 800db2a:	2b2a      	cmp	r3, #42	; 0x2a
 800db2c:	d135      	bne.n	800db9a <_vfiprintf_r+0x1ce>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	1d1a      	adds	r2, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	9203      	str	r2, [sp, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	bfb8      	it	lt
 800db3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800db3e:	3402      	adds	r4, #2
 800db40:	9305      	str	r3, [sp, #20]
 800db42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc28 <_vfiprintf_r+0x25c>
 800db46:	7821      	ldrb	r1, [r4, #0]
 800db48:	2203      	movs	r2, #3
 800db4a:	4650      	mov	r0, sl
 800db4c:	f7f2 fb30 	bl	80001b0 <memchr>
 800db50:	b140      	cbz	r0, 800db64 <_vfiprintf_r+0x198>
 800db52:	2340      	movs	r3, #64	; 0x40
 800db54:	eba0 000a 	sub.w	r0, r0, sl
 800db58:	fa03 f000 	lsl.w	r0, r3, r0
 800db5c:	9b04      	ldr	r3, [sp, #16]
 800db5e:	4303      	orrs	r3, r0
 800db60:	3401      	adds	r4, #1
 800db62:	9304      	str	r3, [sp, #16]
 800db64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db68:	482c      	ldr	r0, [pc, #176]	; (800dc1c <_vfiprintf_r+0x250>)
 800db6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db6e:	2206      	movs	r2, #6
 800db70:	f7f2 fb1e 	bl	80001b0 <memchr>
 800db74:	2800      	cmp	r0, #0
 800db76:	d03f      	beq.n	800dbf8 <_vfiprintf_r+0x22c>
 800db78:	4b29      	ldr	r3, [pc, #164]	; (800dc20 <_vfiprintf_r+0x254>)
 800db7a:	bb1b      	cbnz	r3, 800dbc4 <_vfiprintf_r+0x1f8>
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	3307      	adds	r3, #7
 800db80:	f023 0307 	bic.w	r3, r3, #7
 800db84:	3308      	adds	r3, #8
 800db86:	9303      	str	r3, [sp, #12]
 800db88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8a:	443b      	add	r3, r7
 800db8c:	9309      	str	r3, [sp, #36]	; 0x24
 800db8e:	e767      	b.n	800da60 <_vfiprintf_r+0x94>
 800db90:	fb0c 3202 	mla	r2, ip, r2, r3
 800db94:	460c      	mov	r4, r1
 800db96:	2001      	movs	r0, #1
 800db98:	e7a5      	b.n	800dae6 <_vfiprintf_r+0x11a>
 800db9a:	2300      	movs	r3, #0
 800db9c:	3401      	adds	r4, #1
 800db9e:	9305      	str	r3, [sp, #20]
 800dba0:	4619      	mov	r1, r3
 800dba2:	f04f 0c0a 	mov.w	ip, #10
 800dba6:	4620      	mov	r0, r4
 800dba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbac:	3a30      	subs	r2, #48	; 0x30
 800dbae:	2a09      	cmp	r2, #9
 800dbb0:	d903      	bls.n	800dbba <_vfiprintf_r+0x1ee>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d0c5      	beq.n	800db42 <_vfiprintf_r+0x176>
 800dbb6:	9105      	str	r1, [sp, #20]
 800dbb8:	e7c3      	b.n	800db42 <_vfiprintf_r+0x176>
 800dbba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e7f0      	b.n	800dba6 <_vfiprintf_r+0x1da>
 800dbc4:	ab03      	add	r3, sp, #12
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	462a      	mov	r2, r5
 800dbca:	4b16      	ldr	r3, [pc, #88]	; (800dc24 <_vfiprintf_r+0x258>)
 800dbcc:	a904      	add	r1, sp, #16
 800dbce:	4630      	mov	r0, r6
 800dbd0:	f7fb fdb8 	bl	8009744 <_printf_float>
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	1c78      	adds	r0, r7, #1
 800dbd8:	d1d6      	bne.n	800db88 <_vfiprintf_r+0x1bc>
 800dbda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbdc:	07d9      	lsls	r1, r3, #31
 800dbde:	d405      	bmi.n	800dbec <_vfiprintf_r+0x220>
 800dbe0:	89ab      	ldrh	r3, [r5, #12]
 800dbe2:	059a      	lsls	r2, r3, #22
 800dbe4:	d402      	bmi.n	800dbec <_vfiprintf_r+0x220>
 800dbe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbe8:	f7ff f826 	bl	800cc38 <__retarget_lock_release_recursive>
 800dbec:	89ab      	ldrh	r3, [r5, #12]
 800dbee:	065b      	lsls	r3, r3, #25
 800dbf0:	f53f af12 	bmi.w	800da18 <_vfiprintf_r+0x4c>
 800dbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf6:	e711      	b.n	800da1c <_vfiprintf_r+0x50>
 800dbf8:	ab03      	add	r3, sp, #12
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	462a      	mov	r2, r5
 800dbfe:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <_vfiprintf_r+0x258>)
 800dc00:	a904      	add	r1, sp, #16
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7fc f836 	bl	8009c74 <_printf_i>
 800dc08:	e7e4      	b.n	800dbd4 <_vfiprintf_r+0x208>
 800dc0a:	bf00      	nop
 800dc0c:	0800ee60 	.word	0x0800ee60
 800dc10:	0800ee80 	.word	0x0800ee80
 800dc14:	0800ee40 	.word	0x0800ee40
 800dc18:	0800f07c 	.word	0x0800f07c
 800dc1c:	0800f086 	.word	0x0800f086
 800dc20:	08009745 	.word	0x08009745
 800dc24:	0800d9a7 	.word	0x0800d9a7
 800dc28:	0800f082 	.word	0x0800f082

0800dc2c <nan>:
 800dc2c:	4901      	ldr	r1, [pc, #4]	; (800dc34 <nan+0x8>)
 800dc2e:	2000      	movs	r0, #0
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	7ff80000 	.word	0x7ff80000

0800dc38 <__sread>:
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc40:	f000 f910 	bl	800de64 <_read_r>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	bfab      	itete	ge
 800dc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc4c:	181b      	addge	r3, r3, r0
 800dc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc52:	bfac      	ite	ge
 800dc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc56:	81a3      	strhlt	r3, [r4, #12]
 800dc58:	bd10      	pop	{r4, pc}

0800dc5a <__swrite>:
 800dc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5e:	461f      	mov	r7, r3
 800dc60:	898b      	ldrh	r3, [r1, #12]
 800dc62:	05db      	lsls	r3, r3, #23
 800dc64:	4605      	mov	r5, r0
 800dc66:	460c      	mov	r4, r1
 800dc68:	4616      	mov	r6, r2
 800dc6a:	d505      	bpl.n	800dc78 <__swrite+0x1e>
 800dc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc70:	2302      	movs	r3, #2
 800dc72:	2200      	movs	r2, #0
 800dc74:	f000 f8a4 	bl	800ddc0 <_lseek_r>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc82:	81a3      	strh	r3, [r4, #12]
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	4628      	mov	r0, r5
 800dc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	f7fd bb7b 	b.w	800b388 <_write_r>

0800dc92 <__sseek>:
 800dc92:	b510      	push	{r4, lr}
 800dc94:	460c      	mov	r4, r1
 800dc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9a:	f000 f891 	bl	800ddc0 <_lseek_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	bf15      	itete	ne
 800dca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcae:	81a3      	strheq	r3, [r4, #12]
 800dcb0:	bf18      	it	ne
 800dcb2:	81a3      	strhne	r3, [r4, #12]
 800dcb4:	bd10      	pop	{r4, pc}

0800dcb6 <__sclose>:
 800dcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcba:	f000 b83d 	b.w	800dd38 <_close_r>

0800dcbe <strncmp>:
 800dcbe:	b510      	push	{r4, lr}
 800dcc0:	b16a      	cbz	r2, 800dcde <strncmp+0x20>
 800dcc2:	3901      	subs	r1, #1
 800dcc4:	1884      	adds	r4, r0, r2
 800dcc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dcca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d103      	bne.n	800dcda <strncmp+0x1c>
 800dcd2:	42a0      	cmp	r0, r4
 800dcd4:	d001      	beq.n	800dcda <strncmp+0x1c>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1f5      	bne.n	800dcc6 <strncmp+0x8>
 800dcda:	1a98      	subs	r0, r3, r2
 800dcdc:	bd10      	pop	{r4, pc}
 800dcde:	4610      	mov	r0, r2
 800dce0:	e7fc      	b.n	800dcdc <strncmp+0x1e>

0800dce2 <__ascii_wctomb>:
 800dce2:	4603      	mov	r3, r0
 800dce4:	4608      	mov	r0, r1
 800dce6:	b141      	cbz	r1, 800dcfa <__ascii_wctomb+0x18>
 800dce8:	2aff      	cmp	r2, #255	; 0xff
 800dcea:	d904      	bls.n	800dcf6 <__ascii_wctomb+0x14>
 800dcec:	228a      	movs	r2, #138	; 0x8a
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf4:	4770      	bx	lr
 800dcf6:	700a      	strb	r2, [r1, #0]
 800dcf8:	2001      	movs	r0, #1
 800dcfa:	4770      	bx	lr

0800dcfc <__assert_func>:
 800dcfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcfe:	4614      	mov	r4, r2
 800dd00:	461a      	mov	r2, r3
 800dd02:	4b09      	ldr	r3, [pc, #36]	; (800dd28 <__assert_func+0x2c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4605      	mov	r5, r0
 800dd08:	68d8      	ldr	r0, [r3, #12]
 800dd0a:	b14c      	cbz	r4, 800dd20 <__assert_func+0x24>
 800dd0c:	4b07      	ldr	r3, [pc, #28]	; (800dd2c <__assert_func+0x30>)
 800dd0e:	9100      	str	r1, [sp, #0]
 800dd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd14:	4906      	ldr	r1, [pc, #24]	; (800dd30 <__assert_func+0x34>)
 800dd16:	462b      	mov	r3, r5
 800dd18:	f000 f81e 	bl	800dd58 <fiprintf>
 800dd1c:	f000 f8b4 	bl	800de88 <abort>
 800dd20:	4b04      	ldr	r3, [pc, #16]	; (800dd34 <__assert_func+0x38>)
 800dd22:	461c      	mov	r4, r3
 800dd24:	e7f3      	b.n	800dd0e <__assert_func+0x12>
 800dd26:	bf00      	nop
 800dd28:	2000000c 	.word	0x2000000c
 800dd2c:	0800f08d 	.word	0x0800f08d
 800dd30:	0800f09a 	.word	0x0800f09a
 800dd34:	0800f0c8 	.word	0x0800f0c8

0800dd38 <_close_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	; (800dd54 <_close_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f3 ffee 	bl	8001d24 <_close>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_close_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_close_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	20000604 	.word	0x20000604

0800dd58 <fiprintf>:
 800dd58:	b40e      	push	{r1, r2, r3}
 800dd5a:	b503      	push	{r0, r1, lr}
 800dd5c:	4601      	mov	r1, r0
 800dd5e:	ab03      	add	r3, sp, #12
 800dd60:	4805      	ldr	r0, [pc, #20]	; (800dd78 <fiprintf+0x20>)
 800dd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd66:	6800      	ldr	r0, [r0, #0]
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	f7ff fe2f 	bl	800d9cc <_vfiprintf_r>
 800dd6e:	b002      	add	sp, #8
 800dd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd74:	b003      	add	sp, #12
 800dd76:	4770      	bx	lr
 800dd78:	2000000c 	.word	0x2000000c

0800dd7c <_fstat_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d07      	ldr	r5, [pc, #28]	; (800dd9c <_fstat_r+0x20>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	4611      	mov	r1, r2
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	f7f3 ffd6 	bl	8001d3a <_fstat>
 800dd8e:	1c43      	adds	r3, r0, #1
 800dd90:	d102      	bne.n	800dd98 <_fstat_r+0x1c>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	b103      	cbz	r3, 800dd98 <_fstat_r+0x1c>
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	bd38      	pop	{r3, r4, r5, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20000604 	.word	0x20000604

0800dda0 <_isatty_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d06      	ldr	r5, [pc, #24]	; (800ddbc <_isatty_r+0x1c>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	602b      	str	r3, [r5, #0]
 800ddac:	f7f3 ffd4 	bl	8001d58 <_isatty>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d102      	bne.n	800ddba <_isatty_r+0x1a>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	b103      	cbz	r3, 800ddba <_isatty_r+0x1a>
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	20000604 	.word	0x20000604

0800ddc0 <_lseek_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	; (800dde0 <_lseek_r+0x20>)
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	4608      	mov	r0, r1
 800ddc8:	4611      	mov	r1, r2
 800ddca:	2200      	movs	r2, #0
 800ddcc:	602a      	str	r2, [r5, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f7f3 ffcc 	bl	8001d6c <_lseek>
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	d102      	bne.n	800ddde <_lseek_r+0x1e>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	b103      	cbz	r3, 800ddde <_lseek_r+0x1e>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	bd38      	pop	{r3, r4, r5, pc}
 800dde0:	20000604 	.word	0x20000604

0800dde4 <memmove>:
 800dde4:	4288      	cmp	r0, r1
 800dde6:	b510      	push	{r4, lr}
 800dde8:	eb01 0402 	add.w	r4, r1, r2
 800ddec:	d902      	bls.n	800ddf4 <memmove+0x10>
 800ddee:	4284      	cmp	r4, r0
 800ddf0:	4623      	mov	r3, r4
 800ddf2:	d807      	bhi.n	800de04 <memmove+0x20>
 800ddf4:	1e43      	subs	r3, r0, #1
 800ddf6:	42a1      	cmp	r1, r4
 800ddf8:	d008      	beq.n	800de0c <memmove+0x28>
 800ddfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de02:	e7f8      	b.n	800ddf6 <memmove+0x12>
 800de04:	4402      	add	r2, r0
 800de06:	4601      	mov	r1, r0
 800de08:	428a      	cmp	r2, r1
 800de0a:	d100      	bne.n	800de0e <memmove+0x2a>
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de16:	e7f7      	b.n	800de08 <memmove+0x24>

0800de18 <_realloc_r>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	4607      	mov	r7, r0
 800de1c:	4614      	mov	r4, r2
 800de1e:	460e      	mov	r6, r1
 800de20:	b921      	cbnz	r1, 800de2c <_realloc_r+0x14>
 800de22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de26:	4611      	mov	r1, r2
 800de28:	f7fb bb94 	b.w	8009554 <_malloc_r>
 800de2c:	b922      	cbnz	r2, 800de38 <_realloc_r+0x20>
 800de2e:	f7fb fb43 	bl	80094b8 <_free_r>
 800de32:	4625      	mov	r5, r4
 800de34:	4628      	mov	r0, r5
 800de36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de38:	f000 f82d 	bl	800de96 <_malloc_usable_size_r>
 800de3c:	42a0      	cmp	r0, r4
 800de3e:	d20f      	bcs.n	800de60 <_realloc_r+0x48>
 800de40:	4621      	mov	r1, r4
 800de42:	4638      	mov	r0, r7
 800de44:	f7fb fb86 	bl	8009554 <_malloc_r>
 800de48:	4605      	mov	r5, r0
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d0f2      	beq.n	800de34 <_realloc_r+0x1c>
 800de4e:	4631      	mov	r1, r6
 800de50:	4622      	mov	r2, r4
 800de52:	f7fb fb1b 	bl	800948c <memcpy>
 800de56:	4631      	mov	r1, r6
 800de58:	4638      	mov	r0, r7
 800de5a:	f7fb fb2d 	bl	80094b8 <_free_r>
 800de5e:	e7e9      	b.n	800de34 <_realloc_r+0x1c>
 800de60:	4635      	mov	r5, r6
 800de62:	e7e7      	b.n	800de34 <_realloc_r+0x1c>

0800de64 <_read_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	; (800de84 <_read_r+0x20>)
 800de68:	4604      	mov	r4, r0
 800de6a:	4608      	mov	r0, r1
 800de6c:	4611      	mov	r1, r2
 800de6e:	2200      	movs	r2, #0
 800de70:	602a      	str	r2, [r5, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	f7f3 ff1d 	bl	8001cb2 <_read>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d102      	bne.n	800de82 <_read_r+0x1e>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b103      	cbz	r3, 800de82 <_read_r+0x1e>
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	20000604 	.word	0x20000604

0800de88 <abort>:
 800de88:	b508      	push	{r3, lr}
 800de8a:	2006      	movs	r0, #6
 800de8c:	f000 f834 	bl	800def8 <raise>
 800de90:	2001      	movs	r0, #1
 800de92:	f7f3 ff04 	bl	8001c9e <_exit>

0800de96 <_malloc_usable_size_r>:
 800de96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9a:	1f18      	subs	r0, r3, #4
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfbc      	itt	lt
 800dea0:	580b      	ldrlt	r3, [r1, r0]
 800dea2:	18c0      	addlt	r0, r0, r3
 800dea4:	4770      	bx	lr

0800dea6 <_raise_r>:
 800dea6:	291f      	cmp	r1, #31
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4604      	mov	r4, r0
 800deac:	460d      	mov	r5, r1
 800deae:	d904      	bls.n	800deba <_raise_r+0x14>
 800deb0:	2316      	movs	r3, #22
 800deb2:	6003      	str	r3, [r0, #0]
 800deb4:	f04f 30ff 	mov.w	r0, #4294967295
 800deb8:	bd38      	pop	{r3, r4, r5, pc}
 800deba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800debc:	b112      	cbz	r2, 800dec4 <_raise_r+0x1e>
 800debe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dec2:	b94b      	cbnz	r3, 800ded8 <_raise_r+0x32>
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 f831 	bl	800df2c <_getpid_r>
 800deca:	462a      	mov	r2, r5
 800decc:	4601      	mov	r1, r0
 800dece:	4620      	mov	r0, r4
 800ded0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded4:	f000 b818 	b.w	800df08 <_kill_r>
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d00a      	beq.n	800def2 <_raise_r+0x4c>
 800dedc:	1c59      	adds	r1, r3, #1
 800dede:	d103      	bne.n	800dee8 <_raise_r+0x42>
 800dee0:	2316      	movs	r3, #22
 800dee2:	6003      	str	r3, [r0, #0]
 800dee4:	2001      	movs	r0, #1
 800dee6:	e7e7      	b.n	800deb8 <_raise_r+0x12>
 800dee8:	2400      	movs	r4, #0
 800deea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800deee:	4628      	mov	r0, r5
 800def0:	4798      	blx	r3
 800def2:	2000      	movs	r0, #0
 800def4:	e7e0      	b.n	800deb8 <_raise_r+0x12>
	...

0800def8 <raise>:
 800def8:	4b02      	ldr	r3, [pc, #8]	; (800df04 <raise+0xc>)
 800defa:	4601      	mov	r1, r0
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	f7ff bfd2 	b.w	800dea6 <_raise_r>
 800df02:	bf00      	nop
 800df04:	2000000c 	.word	0x2000000c

0800df08 <_kill_r>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	4d07      	ldr	r5, [pc, #28]	; (800df28 <_kill_r+0x20>)
 800df0c:	2300      	movs	r3, #0
 800df0e:	4604      	mov	r4, r0
 800df10:	4608      	mov	r0, r1
 800df12:	4611      	mov	r1, r2
 800df14:	602b      	str	r3, [r5, #0]
 800df16:	f7f3 feb2 	bl	8001c7e <_kill>
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	d102      	bne.n	800df24 <_kill_r+0x1c>
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	b103      	cbz	r3, 800df24 <_kill_r+0x1c>
 800df22:	6023      	str	r3, [r4, #0]
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	bf00      	nop
 800df28:	20000604 	.word	0x20000604

0800df2c <_getpid_r>:
 800df2c:	f7f3 bea0 	b.w	8001c70 <_getpid>

0800df30 <_init>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	bf00      	nop
 800df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df36:	bc08      	pop	{r3}
 800df38:	469e      	mov	lr, r3
 800df3a:	4770      	bx	lr

0800df3c <_fini>:
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3e:	bf00      	nop
 800df40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df42:	bc08      	pop	{r3}
 800df44:	469e      	mov	lr, r3
 800df46:	4770      	bx	lr
