
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddb8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000120c  0800def8  0800def8  0001def8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f104  0800f104  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f104  0800f104  0001f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f10c  0800f10c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f110  0800f110  0001f110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001e4  0800f2f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800f2f8  00020600  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024393  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a7e  00000000  00000000  000445a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00049020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  0004a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e08a  00000000  00000000  0004c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aee  00000000  00000000  0006a24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7061  00000000  00000000  00083d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ad99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f68  00000000  00000000  0012adec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dee0 	.word	0x0800dee0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	0800dee0 	.word	0x0800dee0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b9a4 	b.w	80011d4 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f83e 	bl	8000f14 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_d2lz>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4605      	mov	r5, r0
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	4628      	mov	r0, r5
 8000eac:	4621      	mov	r1, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f7ff fdfb 	bl	8000aac <__aeabi_dcmplt>
 8000eb6:	b928      	cbnz	r0, 8000ec4 <__aeabi_d2lz+0x20>
 8000eb8:	4628      	mov	r0, r5
 8000eba:	4621      	mov	r1, r4
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f000 b80a 	b.w	8000ed8 <__aeabi_d2ulz>
 8000ec4:	4628      	mov	r0, r5
 8000ec6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eca:	f000 f805 	bl	8000ed8 <__aeabi_d2ulz>
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_d2ulz>:
 8000ed8:	b5d0      	push	{r4, r6, r7, lr}
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__aeabi_d2ulz+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	4606      	mov	r6, r0
 8000ee0:	460f      	mov	r7, r1
 8000ee2:	f7ff fb71 	bl	80005c8 <__aeabi_dmul>
 8000ee6:	f7ff fe47 	bl	8000b78 <__aeabi_d2uiz>
 8000eea:	4604      	mov	r4, r0
 8000eec:	f7ff faf2 	bl	80004d4 <__aeabi_ui2d>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <__aeabi_d2ulz+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f7ff fb68 	bl	80005c8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4630      	mov	r0, r6
 8000efe:	4639      	mov	r1, r7
 8000f00:	f7ff f9aa 	bl	8000258 <__aeabi_dsub>
 8000f04:	f7ff fe38 	bl	8000b78 <__aeabi_d2uiz>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f0c:	3df00000 	.word	0x3df00000
 8000f10:	41f00000 	.word	0x41f00000

08000f14 <__udivmoddi4>:
 8000f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f18:	9e08      	ldr	r6, [sp, #32]
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	468e      	mov	lr, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 8082 	bne.w	800102a <__udivmoddi4+0x116>
 8000f26:	428a      	cmp	r2, r1
 8000f28:	4617      	mov	r7, r2
 8000f2a:	d946      	bls.n	8000fba <__udivmoddi4+0xa6>
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b14a      	cbz	r2, 8000f46 <__udivmoddi4+0x32>
 8000f32:	f1c2 0120 	rsb	r1, r2, #32
 8000f36:	fa05 f302 	lsl.w	r3, r5, r2
 8000f3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f3e:	4097      	lsls	r7, r2
 8000f40:	ea41 0e03 	orr.w	lr, r1, r3
 8000f44:	4094      	lsls	r4, r2
 8000f46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f4a:	0c23      	lsrs	r3, r4, #16
 8000f4c:	fbbe fcf8 	udiv	ip, lr, r8
 8000f50:	b2b9      	uxth	r1, r7
 8000f52:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000f56:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f5a:	fb0c f001 	mul.w	r0, ip, r1
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	d90a      	bls.n	8000f78 <__udivmoddi4+0x64>
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000f68:	f080 8116 	bcs.w	8001198 <__udivmoddi4+0x284>
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	f240 8113 	bls.w	8001198 <__udivmoddi4+0x284>
 8000f72:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f76:	443b      	add	r3, r7
 8000f78:	1a1b      	subs	r3, r3, r0
 8000f7a:	b2a4      	uxth	r4, r4
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3310 	mls	r3, r8, r0, r3
 8000f84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f88:	fb00 f101 	mul.w	r1, r0, r1
 8000f8c:	42a1      	cmp	r1, r4
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x90>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f96:	f080 8101 	bcs.w	800119c <__udivmoddi4+0x288>
 8000f9a:	42a1      	cmp	r1, r4
 8000f9c:	f240 80fe 	bls.w	800119c <__udivmoddi4+0x288>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	1a64      	subs	r4, r4, r1
 8000fa6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000faa:	2100      	movs	r1, #0
 8000fac:	b11e      	cbz	r6, 8000fb6 <__udivmoddi4+0xa2>
 8000fae:	40d4      	lsrs	r4, r2
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e9c6 4300 	strd	r4, r3, [r6]
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	b902      	cbnz	r2, 8000fbe <__udivmoddi4+0xaa>
 8000fbc:	deff      	udf	#255	; 0xff
 8000fbe:	fab2 f282 	clz	r2, r2
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d14f      	bne.n	8001066 <__udivmoddi4+0x152>
 8000fc6:	1bcb      	subs	r3, r1, r7
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	fa1f f887 	uxth.w	r8, r7
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fd6:	0c25      	lsrs	r5, r4, #16
 8000fd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fdc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000fe0:	fb08 f30c 	mul.w	r3, r8, ip
 8000fe4:	42ab      	cmp	r3, r5
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0xe4>
 8000fe8:	197d      	adds	r5, r7, r5
 8000fea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0xe2>
 8000ff0:	42ab      	cmp	r3, r5
 8000ff2:	f200 80e7 	bhi.w	80011c4 <__udivmoddi4+0x2b0>
 8000ff6:	4684      	mov	ip, r0
 8000ff8:	1aed      	subs	r5, r5, r3
 8000ffa:	b2a3      	uxth	r3, r4
 8000ffc:	fbb5 f0fe 	udiv	r0, r5, lr
 8001000:	fb0e 5510 	mls	r5, lr, r0, r5
 8001004:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8001008:	fb08 f800 	mul.w	r8, r8, r0
 800100c:	45a0      	cmp	r8, r4
 800100e:	d907      	bls.n	8001020 <__udivmoddi4+0x10c>
 8001010:	193c      	adds	r4, r7, r4
 8001012:	f100 33ff 	add.w	r3, r0, #4294967295
 8001016:	d202      	bcs.n	800101e <__udivmoddi4+0x10a>
 8001018:	45a0      	cmp	r8, r4
 800101a:	f200 80d7 	bhi.w	80011cc <__udivmoddi4+0x2b8>
 800101e:	4618      	mov	r0, r3
 8001020:	eba4 0408 	sub.w	r4, r4, r8
 8001024:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001028:	e7c0      	b.n	8000fac <__udivmoddi4+0x98>
 800102a:	428b      	cmp	r3, r1
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x12c>
 800102e:	2e00      	cmp	r6, #0
 8001030:	f000 80af 	beq.w	8001192 <__udivmoddi4+0x27e>
 8001034:	2100      	movs	r1, #0
 8001036:	e9c6 0500 	strd	r0, r5, [r6]
 800103a:	4608      	mov	r0, r1
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	fab3 f183 	clz	r1, r3
 8001044:	2900      	cmp	r1, #0
 8001046:	d14b      	bne.n	80010e0 <__udivmoddi4+0x1cc>
 8001048:	42ab      	cmp	r3, r5
 800104a:	d302      	bcc.n	8001052 <__udivmoddi4+0x13e>
 800104c:	4282      	cmp	r2, r0
 800104e:	f200 80b7 	bhi.w	80011c0 <__udivmoddi4+0x2ac>
 8001052:	1a84      	subs	r4, r0, r2
 8001054:	eb65 0303 	sbc.w	r3, r5, r3
 8001058:	2001      	movs	r0, #1
 800105a:	469e      	mov	lr, r3
 800105c:	2e00      	cmp	r6, #0
 800105e:	d0aa      	beq.n	8000fb6 <__udivmoddi4+0xa2>
 8001060:	e9c6 4e00 	strd	r4, lr, [r6]
 8001064:	e7a7      	b.n	8000fb6 <__udivmoddi4+0xa2>
 8001066:	f1c2 0c20 	rsb	ip, r2, #32
 800106a:	fa01 f302 	lsl.w	r3, r1, r2
 800106e:	4097      	lsls	r7, r2
 8001070:	fa20 f00c 	lsr.w	r0, r0, ip
 8001074:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001078:	fa21 fc0c 	lsr.w	ip, r1, ip
 800107c:	4318      	orrs	r0, r3
 800107e:	fbbc f1fe 	udiv	r1, ip, lr
 8001082:	0c05      	lsrs	r5, r0, #16
 8001084:	fb0e cc11 	mls	ip, lr, r1, ip
 8001088:	fa1f f887 	uxth.w	r8, r7
 800108c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001090:	fb01 f308 	mul.w	r3, r1, r8
 8001094:	42ab      	cmp	r3, r5
 8001096:	fa04 f402 	lsl.w	r4, r4, r2
 800109a:	d909      	bls.n	80010b0 <__udivmoddi4+0x19c>
 800109c:	197d      	adds	r5, r7, r5
 800109e:	f101 3cff 	add.w	ip, r1, #4294967295
 80010a2:	f080 808b 	bcs.w	80011bc <__udivmoddi4+0x2a8>
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	f240 8088 	bls.w	80011bc <__udivmoddi4+0x2a8>
 80010ac:	3902      	subs	r1, #2
 80010ae:	443d      	add	r5, r7
 80010b0:	1aeb      	subs	r3, r5, r3
 80010b2:	b285      	uxth	r5, r0
 80010b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80010b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80010bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010c0:	fb00 f308 	mul.w	r3, r0, r8
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	d907      	bls.n	80010d8 <__udivmoddi4+0x1c4>
 80010c8:	197d      	adds	r5, r7, r5
 80010ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80010ce:	d271      	bcs.n	80011b4 <__udivmoddi4+0x2a0>
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d96f      	bls.n	80011b4 <__udivmoddi4+0x2a0>
 80010d4:	3802      	subs	r0, #2
 80010d6:	443d      	add	r5, r7
 80010d8:	1aeb      	subs	r3, r5, r3
 80010da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010de:	e778      	b.n	8000fd2 <__udivmoddi4+0xbe>
 80010e0:	f1c1 0c20 	rsb	ip, r1, #32
 80010e4:	408b      	lsls	r3, r1
 80010e6:	fa22 f70c 	lsr.w	r7, r2, ip
 80010ea:	431f      	orrs	r7, r3
 80010ec:	fa20 f40c 	lsr.w	r4, r0, ip
 80010f0:	fa05 f301 	lsl.w	r3, r5, r1
 80010f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010f8:	fa25 f50c 	lsr.w	r5, r5, ip
 80010fc:	431c      	orrs	r4, r3
 80010fe:	0c23      	lsrs	r3, r4, #16
 8001100:	fbb5 f9fe 	udiv	r9, r5, lr
 8001104:	fa1f f887 	uxth.w	r8, r7
 8001108:	fb0e 5519 	mls	r5, lr, r9, r5
 800110c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8001110:	fb09 fa08 	mul.w	sl, r9, r8
 8001114:	45aa      	cmp	sl, r5
 8001116:	fa02 f201 	lsl.w	r2, r2, r1
 800111a:	fa00 f301 	lsl.w	r3, r0, r1
 800111e:	d908      	bls.n	8001132 <__udivmoddi4+0x21e>
 8001120:	197d      	adds	r5, r7, r5
 8001122:	f109 30ff 	add.w	r0, r9, #4294967295
 8001126:	d247      	bcs.n	80011b8 <__udivmoddi4+0x2a4>
 8001128:	45aa      	cmp	sl, r5
 800112a:	d945      	bls.n	80011b8 <__udivmoddi4+0x2a4>
 800112c:	f1a9 0902 	sub.w	r9, r9, #2
 8001130:	443d      	add	r5, r7
 8001132:	eba5 050a 	sub.w	r5, r5, sl
 8001136:	b2a4      	uxth	r4, r4
 8001138:	fbb5 f0fe 	udiv	r0, r5, lr
 800113c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001140:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001144:	fb00 f808 	mul.w	r8, r0, r8
 8001148:	45a0      	cmp	r8, r4
 800114a:	d907      	bls.n	800115c <__udivmoddi4+0x248>
 800114c:	193c      	adds	r4, r7, r4
 800114e:	f100 35ff 	add.w	r5, r0, #4294967295
 8001152:	d22d      	bcs.n	80011b0 <__udivmoddi4+0x29c>
 8001154:	45a0      	cmp	r8, r4
 8001156:	d92b      	bls.n	80011b0 <__udivmoddi4+0x29c>
 8001158:	3802      	subs	r0, #2
 800115a:	443c      	add	r4, r7
 800115c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001160:	eba4 0408 	sub.w	r4, r4, r8
 8001164:	fba0 8902 	umull	r8, r9, r0, r2
 8001168:	454c      	cmp	r4, r9
 800116a:	46c6      	mov	lr, r8
 800116c:	464d      	mov	r5, r9
 800116e:	d319      	bcc.n	80011a4 <__udivmoddi4+0x290>
 8001170:	d016      	beq.n	80011a0 <__udivmoddi4+0x28c>
 8001172:	b15e      	cbz	r6, 800118c <__udivmoddi4+0x278>
 8001174:	ebb3 020e 	subs.w	r2, r3, lr
 8001178:	eb64 0405 	sbc.w	r4, r4, r5
 800117c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001180:	40ca      	lsrs	r2, r1
 8001182:	ea4c 0202 	orr.w	r2, ip, r2
 8001186:	40cc      	lsrs	r4, r1
 8001188:	e9c6 2400 	strd	r2, r4, [r6]
 800118c:	2100      	movs	r1, #0
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	4631      	mov	r1, r6
 8001194:	4630      	mov	r0, r6
 8001196:	e70e      	b.n	8000fb6 <__udivmoddi4+0xa2>
 8001198:	46ac      	mov	ip, r5
 800119a:	e6ed      	b.n	8000f78 <__udivmoddi4+0x64>
 800119c:	4618      	mov	r0, r3
 800119e:	e701      	b.n	8000fa4 <__udivmoddi4+0x90>
 80011a0:	4543      	cmp	r3, r8
 80011a2:	d2e6      	bcs.n	8001172 <__udivmoddi4+0x25e>
 80011a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80011a8:	eb69 0507 	sbc.w	r5, r9, r7
 80011ac:	3801      	subs	r0, #1
 80011ae:	e7e0      	b.n	8001172 <__udivmoddi4+0x25e>
 80011b0:	4628      	mov	r0, r5
 80011b2:	e7d3      	b.n	800115c <__udivmoddi4+0x248>
 80011b4:	4660      	mov	r0, ip
 80011b6:	e78f      	b.n	80010d8 <__udivmoddi4+0x1c4>
 80011b8:	4681      	mov	r9, r0
 80011ba:	e7ba      	b.n	8001132 <__udivmoddi4+0x21e>
 80011bc:	4661      	mov	r1, ip
 80011be:	e777      	b.n	80010b0 <__udivmoddi4+0x19c>
 80011c0:	4608      	mov	r0, r1
 80011c2:	e74b      	b.n	800105c <__udivmoddi4+0x148>
 80011c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80011c8:	443d      	add	r5, r7
 80011ca:	e715      	b.n	8000ff8 <__udivmoddi4+0xe4>
 80011cc:	3802      	subs	r0, #2
 80011ce:	443c      	add	r4, r7
 80011d0:	e726      	b.n	8001020 <__udivmoddi4+0x10c>
 80011d2:	bf00      	nop

080011d4 <__aeabi_idiv0>:
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <config_init>:
#include "config.h"
#include "string.h"
#include "stdlib.h"

void config_init()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  FLASH_WaitForLastOperation(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f001 f90e 	bl	8002400 <FLASH_WaitForLastOperation>
  HAL_FLASH_Unlock() ;
 80011e4:	f001 f8ea 	bl	80023bc <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <config_init+0x1c>)
 80011ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ee:	611a      	str	r2, [r3, #16]
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58004000 	.word	0x58004000

080011f8 <config_load>:
	  }

}

void config_load(config_t * param)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	uint8_t * p_mydata = malloc(sizeof(config_t)) ;
 8001200:	2008      	movs	r0, #8
 8001202:	f008 f8b1 	bl	8009368 <malloc>
 8001206:	4603      	mov	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]

	uint32_t adress = FLASH_USER_START_ADDR ;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <config_load+0x54>)
 800120c:	617b      	str	r3, [r7, #20]

	for(int i = 0 ; i<sizeof(config_t) ; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	e00b      	b.n	800122c <config_load+0x34>
	{
	  p_mydata[i] =*(uint8_t*)(adress);
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	440b      	add	r3, r1
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	701a      	strb	r2, [r3, #0]

	  adress++ ;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i<sizeof(config_t) ; i++)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	3301      	adds	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d9f0      	bls.n	8001214 <config_load+0x1c>
	}
	memcpy(param , p_mydata ,sizeof(config_t) ) ;
 8001232:	2208      	movs	r2, #8
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f008 f8a6 	bl	8009388 <memcpy>

	free(p_mydata) ;
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f008 f89b 	bl	8009378 <free>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0803f800 	.word	0x0803f800

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <__NVIC_EnableIRQ+0x34>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ec:	f023 0218 	bic.w	r2, r3, #24
 80012f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <sys_get_tick>:
{
	HAL_Delay(x);
}

extern u32 sys_get_tick()
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
	return HAL_GetTick() ;
 800133a:	f000 ff05 	bl	8002148 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}

08001344 <sys_random>:

extern u8  sys_random()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	return get_random() % 255 ;
 8001348:	f000 fbc8 	bl	8001adc <get_random>
 800134c:	4601      	mov	r1, r0
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <sys_random+0x20>)
 8001350:	fba3 2301 	umull	r2, r3, r3, r1
 8001354:	09da      	lsrs	r2, r3, #7
 8001356:	4613      	mov	r3, r2
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	1aca      	subs	r2, r1, r3
 800135e:	b2d3      	uxtb	r3, r2
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}
 8001364:	80808081 	.word	0x80808081

08001368 <callBack>:

int number_of_pulses  = 0;


void  callBack()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	printf("Ask CallBack reset counter\n");
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <callBack+0x14>)
 800136e:	f008 fe61 	bl	800a034 <puts>
	number_of_pulses = 0 ;
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <callBack+0x18>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0800def8 	.word	0x0800def8
 8001380:	20000200 	.word	0x20000200

08001384 <main>:
#endif


int main(void)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b0a7      	sub	sp, #156	; 0x9c
 8001388:	af02      	add	r7, sp, #8

  HAL_Init();
 800138a:	f000 fe71 	bl	8002070 <HAL_Init>

  SystemClock_Config();
 800138e:	f000 f95b 	bl	8001648 <SystemClock_Config>

  MX_GPIO_Init();
 8001392:	f000 fa07 	bl	80017a4 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8001396:	f000 f9b1 	bl	80016fc <MX_USART1_UART_Init>

  SubghzApp_Init();
 800139a:	f000 fba9 	bl	8001af0 <SubghzApp_Init>

#ifdef RECEIVER

  config_t param ;

  config_init();
 800139e:	f7ff ff1b 	bl	80011d8 <config_init>

  config_load(&param) ;
 80013a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff26 	bl	80011f8 <config_load>

  printf("saved param seuil %f , periode %d\n",param.seuil , param.periode) ;
 80013ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8b2 	bl	8000518 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013ba:	9100      	str	r1, [sp, #0]
 80013bc:	4862      	ldr	r0, [pc, #392]	; (8001548 <main+0x1c4>)
 80013be:	f008 fd9f 	bl	8009f00 <iprintf>

  printf("Node receiver \n");
 80013c2:	4862      	ldr	r0, [pc, #392]	; (800154c <main+0x1c8>)
 80013c4:	f008 fe36 	bl	800a034 <puts>

  ll_init(RECEIVER_ADDRESS) ;
 80013c8:	204d      	movs	r0, #77	; 0x4d
 80013ca:	f007 f9ed 	bl	80087a8 <ll_init>

  char feedback[50];
  u8 recv[50] ;
  u8 send_feedback = 0 ;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t feedback_timer = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int feedback_periode = 0 ;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t pulse_tmr =  HAL_GetTick() ;
 80013e0:	f000 feb2 	bl	8002148 <HAL_GetTick>
 80013e4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  u8 recv_data[50] ;


#endif

  uint32_t tx_monitor = HAL_GetTick() ;
 80013e8:	f000 feae 	bl	8002148 <HAL_GetTick>
 80013ec:	67f8      	str	r0, [r7, #124]	; 0x7c
  {


#ifdef RECEIVER

	  int len = ll_get_recv_from( TRANSMITTER_ADDRESS , recv) ;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	2034      	movs	r0, #52	; 0x34
 80013f4:	f007 fcca 	bl	8008d8c <ll_get_recv_from>
 80013f8:	67b8      	str	r0, [r7, #120]	; 0x78

	  if(len>0)
 80013fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd2d      	ble.n	800145c <main+0xd8>
	  {
		  recv[len] = 0 ;
 8001400:	1d3a      	adds	r2, r7, #4
 8001402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001404:	4413      	add	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		  printf("data from %d: %s$\n" , 52 ,recv) ;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	461a      	mov	r2, r3
 800140e:	2134      	movs	r1, #52	; 0x34
 8001410:	484f      	ldr	r0, [pc, #316]	; (8001550 <main+0x1cc>)
 8001412:	f008 fd75 	bl	8009f00 <iprintf>
		  //float seuil ;
		  //int periode ;
		  parse_transmetter_data((char*)recv , len ,&param.seuil,&param.periode ) ;
 8001416:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800141a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800141e:	1d1a      	adds	r2, r3, #4
 8001420:	1d38      	adds	r0, r7, #4
 8001422:	460b      	mov	r3, r1
 8001424:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001426:	f000 f8a3 	bl	8001570 <parse_transmetter_data>
		  printf("config seuil :%0.2f, per :%d\n",param.seuil , param.periode);
 800142a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f873 	bl	8000518 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001438:	9100      	str	r1, [sp, #0]
 800143a:	4846      	ldr	r0, [pc, #280]	; (8001554 <main+0x1d0>)
 800143c:	f008 fd60 	bl	8009f00 <iprintf>

		  //save to the flash
		  //config_save(&param) ;

		  send_feedback = 1 ;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		  feedback_periode = param.periode * 1000;
 8001446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  feedback_timer =  HAL_GetTick() ;
 8001454:	f000 fe78 	bl	8002148 <HAL_GetTick>
 8001458:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

		  //save config
	  }

	  if(send_feedback == 1)
 800145c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001460:	2b01      	cmp	r3, #1
 8001462:	d13e      	bne.n	80014e2 <main+0x15e>
	  {
		  if(HAL_GetTick() - feedback_timer >= feedback_periode )
 8001464:	f000 fe70 	bl	8002148 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146e:	1ad2      	subs	r2, r2, r3
 8001470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001474:	429a      	cmp	r2, r3
 8001476:	d334      	bcc.n	80014e2 <main+0x15e>
		  {
			  float flow = get_flow(feedback_periode /1000) ;
 8001478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147c:	4a36      	ldr	r2, [pc, #216]	; (8001558 <main+0x1d4>)
 800147e:	fb82 1203 	smull	r1, r2, r2, r3
 8001482:	1192      	asrs	r2, r2, #6
 8001484:	17db      	asrs	r3, r3, #31
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f8c9 	bl	8001620 <get_flow>
 800148e:	6778      	str	r0, [r7, #116]	; 0x74
			  sprintf(feedback ,"seuil :%f" ,flow);
 8001490:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001492:	f7ff f841 	bl	8000518 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800149e:	492f      	ldr	r1, [pc, #188]	; (800155c <main+0x1d8>)
 80014a0:	f008 fde0 	bl	800a064 <siprintf>
			  printf("nb pulse %d ,debit %f ,periode %d\n" ,number_of_pulses ,flow ,feedback_periode) ;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <main+0x1dc>)
 80014a6:	681c      	ldr	r4, [r3, #0]
 80014a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80014aa:	f7ff f835 	bl	8000518 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80014b6:	9100      	str	r1, [sp, #0]
 80014b8:	4621      	mov	r1, r4
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <main+0x1e0>)
 80014bc:	f008 fd20 	bl	8009f00 <iprintf>
			  ll_send_to(TRANSMITTER_ADDRESS ,(u8*) feedback , strlen(feedback) ,&callBack );
 80014c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe65 	bl	8000194 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <main+0x1e4>)
 80014d4:	2034      	movs	r0, #52	; 0x34
 80014d6:	f007 fa09 	bl	80088ec <ll_send_to>
			  feedback_timer =  HAL_GetTick() ;
 80014da:	f000 fe35 	bl	8002148 <HAL_GetTick>
 80014de:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		  }
	  }

	  if(HAL_GetTick() - pulse_tmr >= 10 )
 80014e2:	f000 fe31 	bl	8002148 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d908      	bls.n	8001504 <main+0x180>
	  {
		  number_of_pulses++ ;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <main+0x1dc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <main+0x1dc>)
 80014fa:	6013      	str	r3, [r2, #0]
		  pulse_tmr = HAL_GetTick();
 80014fc:	f000 fe24 	bl	8002148 <HAL_GetTick>
 8001500:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  	  }


#endif

	  if(HAL_GetTick() - tx_monitor >= 5000 )
 8001504:	f000 fe20 	bl	8002148 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001512:	4293      	cmp	r3, r2
 8001514:	d914      	bls.n	8001540 <main+0x1bc>
	  {
		printf("tx buffer size :%d , rx buffer size :%d\n",get_tx_size(),get_rx_size() );
 8001516:	f007 fa07 	bl	8008928 <get_tx_size>
 800151a:	4604      	mov	r4, r0
 800151c:	f007 fa10 	bl	8008940 <get_rx_size>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	4621      	mov	r1, r4
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <main+0x1e8>)
 8001528:	f008 fcea 	bl	8009f00 <iprintf>
		tx_monitor = HAL_GetTick() ;
 800152c:	f000 fe0c 	bl	8002148 <HAL_GetTick>
 8001530:	67f8      	str	r0, [r7, #124]	; 0x7c
		if(get_rx_size() == 10)
 8001532:	f007 fa05 	bl	8008940 <get_rx_size>
 8001536:	4603      	mov	r3, r0
 8001538:	2b0a      	cmp	r3, #10
 800153a:	d101      	bne.n	8001540 <main+0x1bc>
		  {
			  ll_debug_Rx_list() ;
 800153c:	f007 fcb4 	bl	8008ea8 <ll_debug_Rx_list>
		  }
	  }

	  ll_process() ;
 8001540:	f007 fc88 	bl	8008e54 <ll_process>
  {
 8001544:	e753      	b.n	80013ee <main+0x6a>
 8001546:	bf00      	nop
 8001548:	0800df14 	.word	0x0800df14
 800154c:	0800df38 	.word	0x0800df38
 8001550:	0800df48 	.word	0x0800df48
 8001554:	0800df5c 	.word	0x0800df5c
 8001558:	10624dd3 	.word	0x10624dd3
 800155c:	0800df7c 	.word	0x0800df7c
 8001560:	20000200 	.word	0x20000200
 8001564:	0800df88 	.word	0x0800df88
 8001568:	08001369 	.word	0x08001369
 800156c:	0800dfac 	.word	0x0800dfac

08001570 <parse_transmetter_data>:
	(void) tmp ;
	return 0 ;
}
#else
int parse_transmetter_data(char * t_data , int len , float *seuil , int *periode)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
	char tmp[6] ;

	//seuil :%0.2f , periode : %d
	char * per = strstr(t_data , ", periode :");
 800157e:	4926      	ldr	r1, [pc, #152]	; (8001618 <parse_transmetter_data+0xa8>)
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f008 ff75 	bl	800a470 <strstr>
 8001586:	61f8      	str	r0, [r7, #28]

	if(per == NULL)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <parse_transmetter_data+0x24>
	{
		return -1 ;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e03c      	b.n	800160e <parse_transmetter_data+0x9e>
	}

	char * se = strstr(t_data , "seuil :");
 8001594:	4921      	ldr	r1, [pc, #132]	; (800161c <parse_transmetter_data+0xac>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f008 ff6a 	bl	800a470 <strstr>
 800159c:	61b8      	str	r0, [r7, #24]

	if(se == NULL)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <parse_transmetter_data+0x3a>
	{
		return -1;
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e031      	b.n	800160e <parse_transmetter_data+0x9e>
	}

	se += 7 ;
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	3307      	adds	r3, #7
 80015ae:	61bb      	str	r3, [r7, #24]
	memcpy(tmp , se, per - se);
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	69b9      	ldr	r1, [r7, #24]
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fee2 	bl	8009388 <memcpy>
	*seuil = atof(tmp) ;
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 fe9c 	bl	8009306 <atof>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff faef 	bl	8000bb8 <__aeabi_d2f>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	601a      	str	r2, [r3, #0]

	per += 12;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	330c      	adds	r3, #12
 80015e4:	61fb      	str	r3, [r7, #28]
	memcpy(tmp , per ,(t_data+len - 1) - per) ;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	441a      	add	r2, r3
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	69f9      	ldr	r1, [r7, #28]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f007 fec4 	bl	8009388 <memcpy>

	*periode = atoi(per) ;
 8001600:	69f8      	ldr	r0, [r7, #28]
 8001602:	f007 fe83 	bl	800930c <atoi>
 8001606:	4602      	mov	r2, r0
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	601a      	str	r2, [r3, #0]

	return 0 ;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	0800dfd8 	.word	0x0800dfd8
 800161c:	0800dfe4 	.word	0x0800dfe4

08001620 <get_flow>:

//debit
float get_flow(int periode)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	return (float) (number_of_pulses / periode) ;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <get_flow+0x24>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fbca 	bl	8000dcc <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000200 	.word	0x20000200

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09a      	sub	sp, #104	; 0x68
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2248      	movs	r2, #72	; 0x48
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f007 fea4 	bl	80093a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800166e:	f001 f8a1 	bl	80027b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fe32 	bl	80012dc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <SystemClock_Config+0xb0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <SystemClock_Config+0xb0>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <SystemClock_Config+0xb0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001694:	2324      	movs	r3, #36	; 0x24
 8001696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001698:	2381      	movs	r3, #129	; 0x81
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80016a4:	23b0      	movs	r3, #176	; 0xb0
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fb29 	bl	8002d08 <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016bc:	f000 f879 	bl	80017b2 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016c0:	234f      	movs	r3, #79	; 0x4f
 80016c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2102      	movs	r1, #2
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 feac 	bl	800343c <HAL_RCC_ClockConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016ea:	f000 f862 	bl	80017b2 <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3768      	adds	r7, #104	; 0x68
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	58000400 	.word	0x58000400

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <MX_USART1_UART_Init+0xa4>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <MX_USART1_UART_Init+0xa0>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_USART1_UART_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_USART1_UART_Init+0xa0>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001744:	4815      	ldr	r0, [pc, #84]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001746:	f003 f80e 	bl	8004766 <HAL_UART_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001750:	f000 f82f 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <MX_USART1_UART_Init+0xa0>)
 8001758:	f003 fdfa 	bl	8005350 <HAL_UARTEx_SetTxFifoThreshold>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001762:	f000 f826 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_USART1_UART_Init+0xa0>)
 800176a:	f003 fe2f 	bl	80053cc <HAL_UARTEx_SetRxFifoThreshold>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001774:	f000 f81d 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_USART1_UART_Init+0xa0>)
 800177a:	f003 fdb1 	bl	80052e0 <HAL_UARTEx_DisableFifoMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001784:	f000 f815 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __NVIC_EnableIRQ(USART1_IRQn);
 8001788:	2024      	movs	r0, #36	; 0x24
 800178a:	f7ff fd61 	bl	8001250 <__NVIC_EnableIRQ>
  __NVIC_SetPriority(USART1_IRQn , 0x1);
 800178e:	2101      	movs	r1, #1
 8001790:	2024      	movs	r0, #36	; 0x24
 8001792:	f7ff fd79 	bl	8001288 <__NVIC_SetPriority>
  /* USER CODE END USART1_Init 2 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000478 	.word	0x20000478
 80017a0:	40013800 	.word	0x40013800

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fdac 	bl	8001306 <LL_AHB2_GRP1_EnableClock>

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
}
 80017b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ba:	e7fe      	b.n	80017ba <Error_Handler+0x8>

080017bc <__io_getchar>:
  }
  /* USER CODE END Error_Handler_Debug */
}

int __io_getchar(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
	int ch ;
	HAL_UART_Receive(&huart1 , (uint8_t*)&ch , 1 ,0xffff);
 80017c2:	1d39      	adds	r1, r7, #4
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	2201      	movs	r2, #1
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <__io_getchar+0x20>)
 80017cc:	f003 f8b1 	bl	8004932 <HAL_UART_Receive>
	return ch ;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000478 	.word	0x20000478

080017e0 <__io_putchar>:

int __io_putchar(int ch)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	230a      	movs	r3, #10
 80017ec:	2201      	movs	r2, #1
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <__io_putchar+0x20>)
 80017f0:	f003 f809 	bl	8004806 <HAL_UART_Transmit>
	return ch ;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000478 	.word	0x20000478

08001804 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8001808:	f000 fb82 	bl	8001f10 <BSP_RADIO_Init>
 800180c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}

08001812 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fbb4 	bl	8001f8c <BSP_RADIO_ConfigRFSwitch>
 8001824:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8001832:	f000 fc07 	bl	8002044 <BSP_RADIO_GetTxConfig>
 8001836:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}

0800183c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8001840:	f000 fc07 	bl	8002052 <BSP_RADIO_IsTCXO>
 8001844:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}

0800184a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800184e:	f000 fc07 	bl	8002060 <BSP_RADIO_IsDCDC>
 8001852:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}

08001858 <ring_pushOver>:
    
    return 0;
}

bool ring_pushOver(Ring_t *ring, uint8_t data)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
    //push without hesitation
    *ring->write = data;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	701a      	strb	r2, [r3, #0]
    ring->write = RING_INC_ROLL_OVER(ring->write, ring->buf, ring->end);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <ring_pushOver+0x28>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e002      	b.n	8001886 <ring_pushOver+0x2e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6093      	str	r3, [r2, #8]
    
    //advance read pointer if old data has been overwritten
    //so the buffer doesn't look empty (write==read)
    if(ring->read == ring->write)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	429a      	cmp	r2, r3
 8001894:	d110      	bne.n	80018b8 <ring_pushOver+0x60>
    {
        ring->read = RING_INC_ROLL_OVER(ring->read, ring->buf, ring->end);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d302      	bcc.n	80018aa <ring_pushOver+0x52>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e002      	b.n	80018b0 <ring_pushOver+0x58>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	60d3      	str	r3, [r2, #12]
        return 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <ring_pushOver+0x62>
    }
    
    return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <LL_AHB2_GRP1_EnableClock>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e8:	68fb      	ldr	r3, [r7, #12]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4313      	orrs	r3, r2
 800190a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b096      	sub	sp, #88	; 0x58
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2238      	movs	r2, #56	; 0x38
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f007 fd27 	bl	80093a4 <memset>
  if(huart->Instance==USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_MspInit+0x94>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d12d      	bne.n	80019bc <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001960:	2301      	movs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001964:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001968:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	4618      	mov	r0, r3
 8001970:	f002 f90a 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800197a:	f7ff ff1a 	bl	80017b2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001982:	f7ff ffb7 	bl	80018f4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2002      	movs	r0, #2
 8001988:	f7ff ff9c 	bl	80018c4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019a4:	4619      	mov	r1, r3
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <HAL_UART_MspInit+0x98>)
 80019a8:	f000 fd8c 	bl	80024c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2024      	movs	r0, #36	; 0x24
 80019b2:	f000 fcce 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	2024      	movs	r0, #36	; 0x24
 80019b8:	f000 fce5 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3758      	adds	r7, #88	; 0x58
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013800 	.word	0x40013800
 80019c8:	48000400 	.word	0x48000400

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a12:	f000 fb87 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_IT(&huart1 , UART_IT_RXNE) == SET)
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <USART1_IRQHandler+0x2c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <USART1_IRQHandler+0x24>
	{
		uint8_t recv = huart1.Instance->RDR ;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <USART1_IRQHandler+0x2c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	71fb      	strb	r3, [r7, #7]
		uart_RX_interrupt_hanlder(recv) ;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fa10 	bl	8001e60 <uart_RX_interrupt_hanlder>
	}

  //HAL_UART_IRQHandler(&huart1);

}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000478 	.word	0x20000478

08001a4c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a52:	f002 fcc9 	bl	80043e8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000508 	.word	0x20000508

08001a60 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_SUBGHZ_Init+0x20>)
 8001a96:	2208      	movs	r2, #8
 8001a98:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_SUBGHZ_Init+0x20>)
 8001a9c:	f002 fa28 	bl	8003ef0 <HAL_SUBGHZ_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001aa6:	f7ff fe84 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000508 	.word	0x20000508

08001ab4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff ffcf 	bl	8001a60 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2032      	movs	r0, #50	; 0x32
 8001ac8:	f000 fc43 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f000 fc5a 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <get_random>:
  * @brief PingPong state machine implementation
  */

/* USER CODE END PFP */
uint32_t get_random()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	return Radio.Random() ;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <get_random+0x10>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	4798      	blx	r3
 8001ae6:	4603      	mov	r3, r0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0800e484 	.word	0x0800e484

08001af0 <SubghzApp_Init>:
/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  //printf( "\n\rPING PONG\n\r");
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 8001af6:	2300      	movs	r3, #0
 8001af8:	2201      	movs	r2, #1
 8001afa:	2101      	movs	r1, #1
 8001afc:	483d      	ldr	r0, [pc, #244]	; (8001bf4 <SubghzApp_Init+0x104>)
 8001afe:	f008 f9ff 	bl	8009f00 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b04:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <SubghzApp_Init+0x10c>)
 8001b06:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b0a:	4a3d      	ldr	r2, [pc, #244]	; (8001c00 <SubghzApp_Init+0x110>)
 8001b0c:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b10:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <SubghzApp_Init+0x114>)
 8001b12:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <SubghzApp_Init+0x118>)
 8001b18:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	; (8001c0c <SubghzApp_Init+0x11c>)
 8001b1e:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <SubghzApp_Init+0x120>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4834      	ldr	r0, [pc, #208]	; (8001bf8 <SubghzApp_Init+0x108>)
 8001b26:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <SubghzApp_Init+0x120>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4839      	ldr	r0, [pc, #228]	; (8001c14 <SubghzApp_Init+0x124>)
 8001b2e:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 8001b30:	4839      	ldr	r0, [pc, #228]	; (8001c18 <SubghzApp_Init+0x128>)
 8001b32:	f008 f9e5 	bl	8009f00 <iprintf>
  printf("LORA_MODULATION\n\r");
 8001b36:	4839      	ldr	r0, [pc, #228]	; (8001c1c <SubghzApp_Init+0x12c>)
 8001b38:	f008 f9e2 	bl	8009f00 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8001b3c:	217d      	movs	r1, #125	; 0x7d
 8001b3e:	4838      	ldr	r0, [pc, #224]	; (8001c20 <SubghzApp_Init+0x130>)
 8001b40:	f008 f9de 	bl	8009f00 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8001b44:	2107      	movs	r1, #7
 8001b46:	4837      	ldr	r0, [pc, #220]	; (8001c24 <SubghzApp_Init+0x134>)
 8001b48:	f008 f9da 	bl	8009f00 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <SubghzApp_Init+0x120>)
 8001b4e:	69dc      	ldr	r4, [r3, #28]
 8001b50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b54:	9308      	str	r3, [sp, #32]
 8001b56:	2300      	movs	r3, #0
 8001b58:	9307      	str	r3, [sp, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9306      	str	r3, [sp, #24]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9305      	str	r3, [sp, #20]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9304      	str	r3, [sp, #16]
 8001b66:	2300      	movs	r3, #0
 8001b68:	9303      	str	r3, [sp, #12]
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2307      	movs	r3, #7
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2114      	movs	r1, #20
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <SubghzApp_Init+0x120>)
 8001b82:	699c      	ldr	r4, [r3, #24]
 8001b84:	2301      	movs	r3, #1
 8001b86:	9309      	str	r3, [sp, #36]	; 0x24
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9308      	str	r3, [sp, #32]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9307      	str	r3, [sp, #28]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9306      	str	r3, [sp, #24]
 8001b94:	2301      	movs	r3, #1
 8001b96:	9305      	str	r3, [sp, #20]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9304      	str	r3, [sp, #16]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	2207      	movs	r2, #7
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <SubghzApp_Init+0x120>)
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	21ff      	movs	r1, #255	; 0xff
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <SubghzApp_Init+0x120>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4798      	blx	r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	0d9b      	lsrs	r3, r3, #22
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <SubghzApp_Init+0x138>)
 8001bce:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8001bd0:	22ff      	movs	r2, #255	; 0xff
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4815      	ldr	r0, [pc, #84]	; (8001c2c <SubghzApp_Init+0x13c>)
 8001bd6:	f007 fbe5 	bl	80093a4 <memset>

  //printf( "rand=%ld\n\r", random_delay);
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <SubghzApp_Init+0x120>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <SubghzApp_Init+0x138>)
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8001be6:	4610      	mov	r0, r2
 8001be8:	4798      	blx	r3

}
 8001bea:	bf00      	nop
 8001bec:	3704      	adds	r7, #4
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	0800dfec 	.word	0x0800dfec
 8001bf8:	20000204 	.word	0x20000204
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001c3d 	.word	0x08001c3d
 8001c04:	08001c69 	.word	0x08001c69
 8001c08:	08001c85 	.word	0x08001c85
 8001c0c:	08001ca1 	.word	0x08001ca1
 8001c10:	0800e484 	.word	0x0800e484
 8001c14:	33bca100 	.word	0x33bca100
 8001c18:	0800e008 	.word	0x0800e008
 8001c1c:	0800e01c 	.word	0x0800e01c
 8001c20:	0800e030 	.word	0x0800e030
 8001c24:	0800e044 	.word	0x0800e044
 8001c28:	20000324 	.word	0x20000324
 8001c2c:	20000224 	.word	0x20000224

08001c30 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

  ll_set_transmition_done() ;
 8001c34:	f007 f95e 	bl	8008ef4 <ll_set_transmition_done>
  //State = TX;
#ifdef PROT_DEBUG
  printf( "OnTxDone\n\r");
#endif

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <OnRxDone>:



static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	813b      	strh	r3, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
#ifdef PROT_DEBUG
	printf("RxDone\n");
#endif
	ll_receive(payload , size) ;
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f006 ff24 	bl	8008aa8 <ll_receive>
	}

	RssiValue = rssi;
	*/

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <OnTxTimeout+0x14>)
 8001c6e:	f008 f947 	bl	8009f00 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <OnTxTimeout+0x18>)
 8001c74:	2204      	movs	r2, #4
 8001c76:	701a      	strb	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800e054 	.word	0x0800e054
 8001c80:	20000220 	.word	0x20000220

08001c84 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <OnRxTimeout+0x14>)
 8001c8a:	f008 f939 	bl	8009f00 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <OnRxTimeout+0x18>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800e064 	.word	0x0800e064
 8001c9c:	20000220 	.word	0x20000220

08001ca0 <OnRxError>:

static void OnRxError(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <OnRxError+0x14>)
 8001ca6:	f008 f92b 	bl	8009f00 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <OnRxError+0x18>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	0800e074 	.word	0x0800e074
 8001cb8:	20000220 	.word	0x20000220

08001cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
	return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_kill>:

int _kill(int pid, int sig)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cd4:	f007 fb1e 	bl	8009314 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2216      	movs	r2, #22
 8001cdc:	601a      	str	r2, [r3, #0]
	return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_exit>:

void _exit (int status)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffe7 	bl	8001cca <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cfc:	e7fe      	b.n	8001cfc <_exit+0x12>

08001cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e00a      	b.n	8001d26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d10:	f7ff fd54 	bl	80017bc <__io_getchar>
 8001d14:	4601      	mov	r1, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	60ba      	str	r2, [r7, #8]
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf0      	blt.n	8001d10 <_read+0x12>
	}

return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e009      	b.n	8001d5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fd44 	bl	80017e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbf1      	blt.n	8001d4a <_write+0x12>
	}
	return len;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_close>:

int _close(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d96:	605a      	str	r2, [r3, #4]
	return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_isatty>:

int _isatty(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f007 fa88 	bl	8009314 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20008000 	.word	0x20008000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000328 	.word	0x20000328
 8001e38:	20000600 	.word	0x20000600

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <set_NL_detection>:

bool NL_Detection = false ;


void set_NL_detection()
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	NL_Detection = true ;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <set_NL_detection+0x14>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000032c 	.word	0x2000032c

08001e60 <uart_RX_interrupt_hanlder>:
	//enable uart Rx-interrupt
	__HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
}

void uart_RX_interrupt_hanlder(uint8_t rx)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
	if(rx == '\n')
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d101      	bne.n	8001e74 <uart_RX_interrupt_hanlder+0x14>
		set_NL_detection() ;
 8001e70:	f7ff ffea 	bl	8001e48 <set_NL_detection>

	ring_pushOver(&uart_fifo , rx) ;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <uart_RX_interrupt_hanlder+0x28>)
 8001e7a:	f7ff fced 	bl	8001858 <ring_pushOver>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000514 	.word	0x20000514

08001e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e90:	f7ff ffd4 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eba:	f007 fa31 	bl	8009320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff fa61 	bl	8001384 <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   r0, =_estack
 8001ec4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ed0:	0800f114 	.word	0x0800f114
  ldr r2, =_sbss
 8001ed4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ed8:	20000600 	.word	0x20000600

08001edc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>

08001ede <LL_AHB2_GRP1_EnableClock>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
	...

08001f10 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001f24:	2004      	movs	r0, #4
 8001f26:	f7ff ffda 	bl	8001ede <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f40:	f000 fac0 	bl	80024c4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001f44:	2320      	movs	r3, #32
 8001f46:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480e      	ldr	r0, [pc, #56]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f4e:	f000 fab9 	bl	80024c4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001f52:	2308      	movs	r3, #8
 8001f54:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f5c:	f000 fab2 	bl	80024c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001f60:	2200      	movs	r2, #0
 8001f62:	2120      	movs	r1, #32
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f66:	f000 fc0d 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f70:	f000 fc08 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001f74:	2200      	movs	r2, #0
 8001f76:	2108      	movs	r1, #8
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <BSP_RADIO_Init+0x78>)
 8001f7a:	f000 fc03 	bl	8002784 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	48000800 	.word	0x48000800

08001f8c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d84b      	bhi.n	8002034 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	08001ff5 	.word	0x08001ff5
 8001fb0:	08002015 	.word	0x08002015
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4821      	ldr	r0, [pc, #132]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fba:	f000 fbe3 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	481f      	ldr	r0, [pc, #124]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fc4:	f000 fbde 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2120      	movs	r1, #32
 8001fcc:	481c      	ldr	r0, [pc, #112]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fce:	f000 fbd9 	bl	8002784 <HAL_GPIO_WritePin>
      break;      
 8001fd2:	e030      	b.n	8002036 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	4819      	ldr	r0, [pc, #100]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fda:	f000 fbd3 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2110      	movs	r1, #16
 8001fe2:	4817      	ldr	r0, [pc, #92]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fe4:	f000 fbce 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2120      	movs	r1, #32
 8001fec:	4814      	ldr	r0, [pc, #80]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001fee:	f000 fbc9 	bl	8002784 <HAL_GPIO_WritePin>
      break;
 8001ff2:	e020      	b.n	8002036 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2108      	movs	r1, #8
 8001ff8:	4811      	ldr	r0, [pc, #68]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ffa:	f000 fbc3 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ffe:	2201      	movs	r2, #1
 8002000:	2110      	movs	r1, #16
 8002002:	480f      	ldr	r0, [pc, #60]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002004:	f000 fbbe 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002008:	2201      	movs	r2, #1
 800200a:	2120      	movs	r1, #32
 800200c:	480c      	ldr	r0, [pc, #48]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800200e:	f000 fbb9 	bl	8002784 <HAL_GPIO_WritePin>
      break;
 8002012:	e010      	b.n	8002036 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2108      	movs	r1, #8
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800201a:	f000 fbb3 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800201e:	2200      	movs	r2, #0
 8002020:	2110      	movs	r1, #16
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002024:	f000 fbae 	bl	8002784 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002028:	2201      	movs	r2, #1
 800202a:	2120      	movs	r1, #32
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800202e:	f000 fba9 	bl	8002784 <HAL_GPIO_WritePin>
      break;
 8002032:	e000      	b.n	8002036 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002034:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	48000800 	.word	0x48000800

08002044 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207a:	2003      	movs	r0, #3
 800207c:	f000 f95e 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002080:	f001 fba0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8002084:	4603      	mov	r3, r0
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_Init+0x3c>)
 8002088:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800208a:	200f      	movs	r0, #15
 800208c:	f000 f810 	bl	80020b0 <HAL_InitTick>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	e001      	b.n	80020a0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800209c:	f7ff fc42 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_InitTick+0x6c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d024      	beq.n	800210e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020c4:	f001 fb7e 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_InitTick+0x6c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f960 	bl	80023a2 <HAL_SYSTICK_Config>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d809      	bhi.n	8002102 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ee:	2200      	movs	r2, #0
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	f04f 30ff 	mov.w	r0, #4294967295
 80020f6:	f000 f92c 	bl	8002352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_InitTick+0x70>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e007      	b.n	8002112 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e004      	b.n	8002112 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e001      	b.n	8002112 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000008 	.word	0x20000008
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000008 	.word	0x20000008
 8002144:	20000588 	.word	0x20000588

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	20000588 	.word	0x20000588

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fff0 	bl	8002148 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffe0 	bl	8002148 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008

080021a4 <__NVIC_SetPriorityGrouping>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_EnableIRQ>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	db0b      	blt.n	8002232 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4906      	ldr	r1, [pc, #24]	; (800223c <__NVIC_EnableIRQ+0x34>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2001      	movs	r0, #1
 800222a:	fa00 f202 	lsl.w	r2, r0, r2
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff90 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff2d 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002360:	f7ff ff44 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ff92 	bl	8002294 <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff61 	bl	8002240 <__NVIC_SetPriority>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff37 	bl	8002208 <__NVIC_EnableIRQ>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffa4 	bl	80022f8 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_FLASH_Unlock+0x38>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da0b      	bge.n	80023e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_FLASH_Unlock+0x38>)
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_FLASH_Unlock+0x3c>)
 80023d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_FLASH_Unlock+0x38>)
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_FLASH_Unlock+0x40>)
 80023d8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_FLASH_Unlock+0x38>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da01      	bge.n	80023e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	58004000 	.word	0x58004000
 80023f8:	45670123 	.word	0x45670123
 80023fc:	cdef89ab 	.word	0xcdef89ab

08002400 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fe9e 	bl	8002148 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800240e:	e009      	b.n	8002424 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002410:	f7ff fe9a 	bl	8002148 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d801      	bhi.n	8002424 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e047      	b.n	80024b4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d0ee      	beq.n	8002410 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 8002444:	2201      	movs	r2, #1
 8002446:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800244e:	4013      	ands	r3, r2
 8002450:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <FLASH_WaitForLastOperation+0x6c>
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002466:	4915      	ldr	r1, [pc, #84]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	618b      	str	r3, [r1, #24]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <FLASH_WaitForLastOperation+0x80>
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800247e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002486:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <FLASH_WaitForLastOperation+0xc0>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e011      	b.n	80024b4 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002490:	f7ff fe5a 	bl	8002148 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d801      	bhi.n	80024a4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e007      	b.n	80024b4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <FLASH_WaitForLastOperation+0xbc>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b0:	d0ee      	beq.n	8002490 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	58004000 	.word	0x58004000
 80024c0:	20000330 	.word	0x20000330

080024c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	e140      	b.n	8002756 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8132 	beq.w	8002750 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d005      	beq.n	8002504 <HAL_GPIO_Init+0x40>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d123      	bne.n	80025f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 808c 	beq.w	8002750 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002638:	4a4e      	ldr	r2, [pc, #312]	; (8002774 <HAL_GPIO_Init+0x2b0>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	2207      	movs	r2, #7
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002662:	d00d      	beq.n	8002680 <HAL_GPIO_Init+0x1bc>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a44      	ldr	r2, [pc, #272]	; (8002778 <HAL_GPIO_Init+0x2b4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x1b8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a43      	ldr	r2, [pc, #268]	; (800277c <HAL_GPIO_Init+0x2b8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_Init+0x1b4>
 8002674:	2302      	movs	r3, #2
 8002676:	e004      	b.n	8002682 <HAL_GPIO_Init+0x1be>
 8002678:	2307      	movs	r3, #7
 800267a:	e002      	b.n	8002682 <HAL_GPIO_Init+0x1be>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_GPIO_Init+0x1be>
 8002680:	2300      	movs	r3, #0
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	0092      	lsls	r2, r2, #2
 800268a:	4093      	lsls	r3, r2
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <HAL_GPIO_Init+0x2b0>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80026c6:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800274a:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_GPIO_Init+0x2bc>)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3301      	adds	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f aeb7 	bne.w	80024d4 <HAL_GPIO_Init+0x10>
  }
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	48000400 	.word	0x48000400
 800277c:	48000800 	.word	0x48000800
 8002780:	58000800 	.word	0x58000800

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	58000400 	.word	0x58000400

080027d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_PWREx_GetVoltageRange+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	58000400 	.word	0x58000400

080027e8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f8:	d101      	bne.n	80027fe <LL_PWR_IsEnabledBkUpAccess+0x16>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	58000400 	.word	0x58000400

0800280c <LL_RCC_HSE_EnableTcxo>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_RCC_HSE_DisableTcxo>:
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002856:	d101      	bne.n	800285c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_RCC_HSE_Enable>:
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_HSE_Disable>:
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <LL_RCC_HSE_IsReady>:
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d101      	bne.n	80028b6 <LL_RCC_HSE_IsReady+0x18>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <LL_RCC_HSE_IsReady+0x1a>
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_HSI_Enable>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <LL_RCC_HSI_Disable>:
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <LL_RCC_HSI_IsReady>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d101      	bne.n	8002910 <LL_RCC_HSI_IsReady+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_RCC_HSI_IsReady+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_HSI_SetCalibTrimming>:
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d101      	bne.n	800295a <LL_RCC_LSE_IsReady+0x18>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <LL_RCC_LSE_IsReady+0x1a>
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d101      	bne.n	80029bc <LL_RCC_LSI_IsReady+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_RCC_LSI_IsReady+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6013      	str	r3, [r2, #0]
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d101      	bne.n	8002a14 <LL_RCC_MSI_IsReady+0x16>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <LL_RCC_MSI_IsReady+0x18>
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d101      	bne.n	8002a34 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c14:	d101      	bne.n	8002c1a <LL_RCC_PLL_IsReady+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_RCC_PLL_IsReady+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d101      	bne.n	8002c96 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d101      	bne.n	8002cba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd6:	d101      	bne.n	8002cdc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf8:	d101      	bne.n	8002cfe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e38a      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	f7ff fece 	bl	8002aba <LL_RCC_GetSysClkSource>
 8002d1e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d20:	f7ff ffa2 	bl	8002c68 <LL_RCC_PLL_GetMainSource>
 8002d24:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80c9 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x3e>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d17b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d178      	bne.n	8002e38 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d46:	f7ff fe5a 	bl	80029fe <LL_RCC_MSI_IsReady>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x54>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e369      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x72>
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	e006      	b.n	8002d88 <HAL_RCC_OscConfig+0x80>
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d222      	bcs.n	8002dd2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd4f 	bl	8003834 <RCC_SetFlashLatencyFromMSIRange>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e347      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002daa:	f043 0308 	orr.w	r3, r3, #8
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe4e 	bl	8002a6c <LL_RCC_MSI_SetCalibTrimming>
 8002dd0:	e021      	b.n	8002e16 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe35 	bl	8002a6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fd14 	bl	8003834 <RCC_SetFlashLatencyFromMSIRange>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e30c      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e16:	f000 fcd5 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4ab4      	ldr	r2, [pc, #720]	; (80030f0 <HAL_RCC_OscConfig+0x3e8>)
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e20:	4bb4      	ldr	r3, [pc, #720]	; (80030f4 <HAL_RCC_OscConfig+0x3ec>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f943 	bl	80020b0 <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d047      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	e2fb      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e40:	f7ff fdc1 	bl	80029c6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7ff f980 	bl	8002148 <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f97c 	bl	8002148 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e2e8      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e5e:	f7ff fdce 	bl	80029fe <LL_RCC_MSI_IsReady>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f1      	beq.n	8002e4c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fdea 	bl	8002a6c <LL_RCC_MSI_SetCalibTrimming>
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e9a:	f7ff fda2 	bl	80029e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e9e:	f7ff f953 	bl	8002148 <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea6:	f7ff f94f 	bl	8002148 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e2bb      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eb8:	f7ff fda1 	bl	80029fe <LL_RCC_MSI_IsReady>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f1      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x19e>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ec4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d05f      	beq.n	8002f92 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x1dc>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d10d      	bne.n	8002efa <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d10a      	bne.n	8002efa <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	f7ff fcdb 	bl	800289e <LL_RCC_HSE_IsReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d050      	beq.n	8002f90 <HAL_RCC_OscConfig+0x288>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d14c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e29a      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_OscConfig+0x218>
 8002f1a:	f7ff fca4 	bl	8002866 <LL_RCC_HSE_Enable>
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCC_OscConfig+0x234>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f28:	d104      	bne.n	8002f34 <HAL_RCC_OscConfig+0x22c>
 8002f2a:	f7ff fc6f 	bl	800280c <LL_RCC_HSE_EnableTcxo>
 8002f2e:	f7ff fc9a 	bl	8002866 <LL_RCC_HSE_Enable>
 8002f32:	e003      	b.n	8002f3c <HAL_RCC_OscConfig+0x234>
 8002f34:	f7ff fca5 	bl	8002882 <LL_RCC_HSE_Disable>
 8002f38:	f7ff fc76 	bl	8002828 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7ff f900 	bl	8002148 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff f8fc 	bl	8002148 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e268      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f5e:	f7ff fc9e 	bl	800289e <LL_RCC_HSE_IsReady>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f1      	beq.n	8002f4c <HAL_RCC_OscConfig+0x244>
 8002f68:	e013      	b.n	8002f92 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7ff f8ed 	bl	8002148 <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f72:	f7ff f8e9 	bl	8002148 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e255      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f84:	f7ff fc8b 	bl	800289e <LL_RCC_HSE_IsReady>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f1      	bne.n	8002f72 <HAL_RCC_OscConfig+0x26a>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04b      	beq.n	8003036 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2a8>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d113      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d110      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	f7ff fca2 	bl	80028f8 <LL_RCC_HSI_IsReady>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2be>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e234      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fca5 	bl	800291a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd0:	e031      	b.n	8003036 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fda:	f7ff fc71 	bl	80028c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7ff f8b3 	bl	8002148 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7ff f8af 	bl	8002148 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e21b      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ff8:	f7ff fc7e 	bl	80028f8 <LL_RCC_HSI_IsReady>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f1      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fc87 	bl	800291a <LL_RCC_HSI_SetCalibTrimming>
 800300c:	e013      	b.n	8003036 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	f7ff fc65 	bl	80028dc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7ff f899 	bl	8002148 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7ff f895 	bl	8002148 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e201      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800302c:	f7ff fc64 	bl	80028f8 <LL_RCC_HSI_IsReady>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f1      	bne.n	800301a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d06e      	beq.n	8003120 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d056      	beq.n	80030f8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003052:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	429a      	cmp	r2, r3
 8003060:	d031      	beq.n	80030c6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1da      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003084:	f7ff fc7e 	bl	8002984 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003088:	f7ff f85e 	bl	8002148 <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7ff f85a 	bl	8002148 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b11      	cmp	r3, #17
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1c6      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030a2:	f7ff fc7f 	bl	80029a4 <LL_RCC_LSI_IsReady>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f1      	bne.n	8003090 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	f023 0210 	bic.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c6:	f7ff fc4d 	bl	8002964 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7ff f83d 	bl	8002148 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7ff f839 	bl	8002148 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b11      	cmp	r3, #17
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1a5      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030e4:	f7ff fc5e 	bl	80029a4 <LL_RCC_LSI_IsReady>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f1      	beq.n	80030d2 <HAL_RCC_OscConfig+0x3ca>
 80030ee:	e017      	b.n	8003120 <HAL_RCC_OscConfig+0x418>
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	f7ff fc44 	bl	8002984 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7ff f824 	bl	8002148 <HAL_GetTick>
 8003100:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff f820 	bl	8002148 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b11      	cmp	r3, #17
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e18c      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003116:	f7ff fc45 	bl	80029a4 <LL_RCC_LSI_IsReady>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f1      	bne.n	8003104 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80d8 	beq.w	80032de <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800312e:	f7ff fb5b 	bl	80027e8 <LL_PWR_IsEnabledBkUpAccess>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d113      	bne.n	8003160 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003138:	f7ff fb3c 	bl	80027b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7ff f804 	bl	8002148 <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7ff f800 	bl	8002148 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e16c      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003156:	f7ff fb47 	bl	80027e8 <LL_PWR_IsEnabledBkUpAccess>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f1      	beq.n	8003144 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d07b      	beq.n	8003260 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b85      	cmp	r3, #133	; 0x85
 800316e:	d003      	beq.n	8003178 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d109      	bne.n	800318c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe ffdc 	bl	8002148 <HAL_GetTick>
 8003190:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe ffce 	bl	8002148 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e138      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031be:	f7ff fbc0 	bl	8002942 <LL_RCC_LSE_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b81      	cmp	r3, #129	; 0x81
 80031ce:	d003      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b85      	cmp	r3, #133	; 0x85
 80031d6:	d121      	bne.n	800321c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe ffb6 	bl	8002148 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe ffa8 	bl	8002148 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e112      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ec      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800321a:	e060      	b.n	80032de <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe ff94 	bl	8002148 <HAL_GetTick>
 8003220:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe ff86 	bl	8002148 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0f0      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ec      	bne.n	8003238 <HAL_RCC_OscConfig+0x530>
 800325e:	e03e      	b.n	80032de <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe ff72 	bl	8002148 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fe ff64 	bl	8002148 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0ce      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ec      	bne.n	800327c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe ff51 	bl	8002148 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe ff43 	bl	8002148 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ad      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032d4:	f7ff fb35 	bl	8002942 <LL_RCC_LSE_IsReady>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ef      	bne.n	80032be <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a3 	beq.w	800342e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d076      	beq.n	80033dc <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d14b      	bne.n	800338e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	f7ff fc76 	bl	8002be6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe ff25 	bl	8002148 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe ff21 	bl	8002148 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b0a      	cmp	r3, #10
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e08d      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003314:	f7ff fc75 	bl	8002c02 <LL_RCC_PLL_IsReady>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f1      	bne.n	8003302 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_RCC_OscConfig+0x730>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003336:	0212      	lsls	r2, r2, #8
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800334a:	430a      	orrs	r2, r1
 800334c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003350:	4313      	orrs	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003354:	f7ff fc39 	bl	8002bca <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe feee 	bl	8002148 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe feea 	bl	8002148 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b0a      	cmp	r3, #10
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e056      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003382:	f7ff fc3e 	bl	8002c02 <LL_RCC_PLL_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x668>
 800338c:	e04f      	b.n	800342e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	f7ff fc2a 	bl	8002be6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339c:	f023 0303 	bic.w	r3, r3, #3
 80033a0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ac:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fe fec7 	bl	8002148 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fe fec3 	bl	8002148 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b0a      	cmp	r3, #10
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e02f      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033d0:	f7ff fc17 	bl	8002c02 <LL_RCC_PLL_IsReady>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f1      	bne.n	80033be <HAL_RCC_OscConfig+0x6b6>
 80033da:	e028      	b.n	800342e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e023      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d115      	bne.n	800342a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	429a      	cmp	r2, r3
 800340a:	d10e      	bne.n	800342a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	429a      	cmp	r2, r3
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	11c1808c 	.word	0x11c1808c

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e10f      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d91b      	bls.n	8003496 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b86      	ldr	r3, [pc, #536]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4984      	ldr	r1, [pc, #528]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346e:	f7fe fe6b 	bl	8002148 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	e008      	b.n	8003488 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003476:	f7fe fe67 	bl	8002148 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0f3      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fb12 	bl	8002ad0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fe4c 	bl	8002148 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b4:	f7fe fe48 	bl	8002148 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0d4      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034c6:	f7ff fbda 	bl	8002c7e <LL_RCC_IsActiveFlag_HPRE>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f1      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fb08 	bl	8002af6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034e6:	f7fe fe2f 	bl	8002148 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ee:	f7fe fe2b 	bl	8002148 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0b7      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003500:	f7ff fbce 	bl	8002ca0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f1      	beq.n	80034ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fb01 	bl	8002b22 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003520:	f7fe fe12 	bl	8002148 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003528:	f7fe fe0e 	bl	8002148 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e09a      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800353a:	f7ff fbc3 	bl	8002cc4 <LL_RCC_IsActiveFlag_PPRE1>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f1      	beq.n	8003528 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d017      	beq.n	8003580 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff faf6 	bl	8002b48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800355c:	f7fe fdf4 	bl	8002148 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003564:	f7fe fdf0 	bl	8002148 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e07c      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003576:	f7ff fbb6 	bl	8002ce6 <LL_RCC_IsActiveFlag_PPRE2>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f1      	beq.n	8003564 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d043      	beq.n	8003614 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003594:	f7ff f983 	bl	800289e <LL_RCC_HSE_IsReady>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11e      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e066      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035aa:	f7ff fb2a 	bl	8002c02 <LL_RCC_PLL_IsReady>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e05b      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035c0:	f7ff fa1d 	bl	80029fe <LL_RCC_MSI_IsReady>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e050      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035ce:	f7ff f993 	bl	80028f8 <LL_RCC_HSI_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e049      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fa57 	bl	8002a94 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e6:	f7fe fdaf 	bl	8002148 <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ee:	f7fe fdab 	bl	8002148 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e035      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	f7ff fa59 	bl	8002aba <LL_RCC_GetSysClkSource>
 8003608:	4602      	mov	r2, r0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1ec      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d21b      	bcs.n	800365a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4913      	ldr	r1, [pc, #76]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fe fd89 	bl	8002148 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	e008      	b.n	800364c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800363a:	f7fe fd85 	bl	8002148 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e011      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800365a:	f000 f8b3 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800365e:	4603      	mov	r3, r0
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_RCC_ClockConfig+0x240>)
 8003662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fd21 	bl	80020b0 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	58004000 	.word	0x58004000
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	f7ff fa12 	bl	8002aba <LL_RCC_GetSysClkSource>
 8003696:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	f7ff fae6 	bl	8002c68 <LL_RCC_PLL_GetMainSource>
 800369c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d139      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d136      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b0:	f7ff f9b5 	bl	8002a1e <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x62>
 80036ba:	f7ff f9b0 	bl	8002a1e <LL_RCC_MSI_IsEnabledRangeSelect>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x4e>
 80036c4:	f7ff f9bb 	bl	8002a3e <LL_RCC_MSI_GetRange>
 80036c8:	4603      	mov	r3, r0
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	e005      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x5a>
 80036d2:	f7ff f9bf 	bl	8002a54 <LL_RCC_MSI_GetRangeAfterStandby>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80036e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e4:	e014      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x8c>
 80036e6:	f7ff f99a 	bl	8002a1e <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x7a>
 80036f0:	f7ff f9a5 	bl	8002a3e <LL_RCC_MSI_GetRange>
 80036f4:	4603      	mov	r3, r0
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x86>
 80036fe:	f7ff f9a9 	bl	8002a54 <LL_RCC_MSI_GetRangeAfterStandby>
 8003702:	4603      	mov	r3, r0
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003710:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800371c:	e012      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d102      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d109      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003730:	f7ff f888 	bl	8002844 <LL_RCC_HSE_IsEnabledDiv2>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e001      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003742:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	f7ff f9b9 	bl	8002aba <LL_RCC_GetSysClkSource>
 8003748:	4603      	mov	r3, r0
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d12f      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800374e:	f7ff fa8b 	bl	8002c68 <LL_RCC_PLL_GetMainSource>
 8003752:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0xde>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0xe4>
 8003760:	e00d      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003764:	60fb      	str	r3, [r7, #12]
        break;
 8003766:	e00d      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003768:	f7ff f86c 	bl	8002844 <LL_RCC_HSE_IsEnabledDiv2>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003774:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800377a:	60fb      	str	r3, [r7, #12]
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	60fb      	str	r3, [r7, #12]
        break;
 8003782:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003784:	f7ff fa4e 	bl	8002c24 <LL_RCC_PLL_GetN>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	fb03 f402 	mul.w	r4, r3, r2
 8003790:	f7ff fa5f 	bl	8002c52 <LL_RCC_PLL_GetDivider>
 8003794:	4603      	mov	r3, r0
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	3301      	adds	r3, #1
 800379a:	fbb4 f4f3 	udiv	r4, r4, r3
 800379e:	f7ff fa4d 	bl	8002c3c <LL_RCC_PLL_GetR>
 80037a2:	4603      	mov	r3, r0
 80037a4:	0f5b      	lsrs	r3, r3, #29
 80037a6:	3301      	adds	r3, #1
 80037a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80037ac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	0800e41c 	.word	0x0800e41c
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	01e84800 	.word	0x01e84800

080037c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b598      	push	{r3, r4, r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037c8:	f7ff ff5c 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80037cc:	4604      	mov	r4, r0
 80037ce:	f7ff f9ce 	bl	8002b6e <LL_RCC_GetAHBPrescaler>
 80037d2:	4603      	mov	r3, r0
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd98      	pop	{r3, r4, r7, pc}
 80037e8:	0800e3bc 	.word	0x0800e3bc

080037ec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b598      	push	{r3, r4, r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037f0:	f7ff ffe8 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4604      	mov	r4, r0
 80037f6:	f7ff f9d2 	bl	8002b9e <LL_RCC_GetAPB1Prescaler>
 80037fa:	4603      	mov	r3, r0
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd98      	pop	{r3, r4, r7, pc}
 800380c:	0800e3fc 	.word	0x0800e3fc

08003810 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b598      	push	{r3, r4, r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003814:	f7ff ffd6 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8003818:	4604      	mov	r4, r0
 800381a:	f7ff f9cb 	bl	8002bb4 <LL_RCC_GetAPB2Prescaler>
 800381e:	4603      	mov	r3, r0
 8003820:	0adb      	lsrs	r3, r3, #11
 8003822:	4a03      	ldr	r2, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	fa24 f303 	lsr.w	r3, r4, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd98      	pop	{r3, r4, r7, pc}
 8003830:	0800e3fc 	.word	0x0800e3fc

08003834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	4a10      	ldr	r2, [pc, #64]	; (8003888 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800384c:	f7ff f99a 	bl	8002b84 <LL_RCC_GetAHB3Prescaler>
 8003850:	4603      	mov	r3, r0
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	4a0c      	ldr	r2, [pc, #48]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	0c9c      	lsrs	r4, r3, #18
 8003870:	f7fe ffae 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003874:	4603      	mov	r3, r0
 8003876:	4619      	mov	r1, r3
 8003878:	4620      	mov	r0, r4
 800387a:	f000 f80b 	bl	8003894 <RCC_SetFlashLatency>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	0800e41c 	.word	0x0800e41c
 800388c:	0800e3bc 	.word	0x0800e3bc
 8003890:	431bde83 	.word	0x431bde83

08003894 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08e      	sub	sp, #56	; 0x38
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <RCC_SetFlashLatency+0xfc>)
 80038a0:	f107 0320 	add.w	r3, r7, #32
 80038a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a8:	6018      	str	r0, [r3, #0]
 80038aa:	3304      	adds	r3, #4
 80038ac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038ae:	4a39      	ldr	r2, [pc, #228]	; (8003994 <RCC_SetFlashLatency+0x100>)
 80038b0:	f107 0318 	add.w	r3, r7, #24
 80038b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038b8:	6018      	str	r0, [r3, #0]
 80038ba:	3304      	adds	r3, #4
 80038bc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038be:	4a36      	ldr	r2, [pc, #216]	; (8003998 <RCC_SetFlashLatency+0x104>)
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80038c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d11d      	bne.n	8003912 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	e016      	b.n	800390a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038e4:	4413      	add	r3, r2
 80038e6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d808      	bhi.n	8003904 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038fa:	4413      	add	r3, r2
 80038fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003902:	e023      	b.n	800394c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3301      	adds	r3, #1
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2b02      	cmp	r3, #2
 800390e:	d9e5      	bls.n	80038dc <RCC_SetFlashLatency+0x48>
 8003910:	e01c      	b.n	800394c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003916:	e016      	b.n	8003946 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003920:	4413      	add	r3, r2
 8003922:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003926:	461a      	mov	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4293      	cmp	r3, r2
 800392c:	d808      	bhi.n	8003940 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003936:	4413      	add	r3, r2
 8003938:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800393e:	e005      	b.n	800394c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	3301      	adds	r3, #1
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b02      	cmp	r3, #2
 800394a:	d9e5      	bls.n	8003918 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <RCC_SetFlashLatency+0x108>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 0207 	bic.w	r2, r3, #7
 8003954:	4911      	ldr	r1, [pc, #68]	; (800399c <RCC_SetFlashLatency+0x108>)
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800395c:	f7fe fbf4 	bl	8002148 <HAL_GetTick>
 8003960:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003962:	e008      	b.n	8003976 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003964:	f7fe fbf0 	bl	8002148 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e007      	b.n	8003986 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <RCC_SetFlashLatency+0x108>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003980:	429a      	cmp	r2, r3
 8003982:	d1ef      	bne.n	8003964 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3738      	adds	r7, #56	; 0x38
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	0800e0b4 	.word	0x0800e0b4
 8003994:	0800e0bc 	.word	0x0800e0bc
 8003998:	0800e0c4 	.word	0x0800e0c4
 800399c:	58004000 	.word	0x58004000

080039a0 <LL_RCC_LSE_IsReady>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d101      	bne.n	80039b8 <LL_RCC_LSE_IsReady+0x18>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <LL_RCC_LSE_IsReady+0x1a>
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <LL_RCC_SetUSARTClockSource>:
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	43db      	mvns	r3, r3
 80039d8:	401a      	ands	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_SetI2SClockSource>:
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_SetLPUARTClockSource>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_SetI2CClockSource>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	401a      	ands	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_SetLPTIMClockSource>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetRNGClockSource>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_SetADCClockSource>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <LL_RCC_SetRTCClockSource>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <LL_RCC_GetRTCClockSource>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_ForceBackupDomainReset>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b94:	2300      	movs	r3, #0
 8003b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d058      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ba8:	f7fe fe04 	bl	80027b4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bac:	f7fe facc 	bl	8002148 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fe fac8 	bl	8002148 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc6:	e006      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd4:	d1ee      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d13c      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003bdc:	f7ff ffa7 	bl	8003b2e <LL_RCC_GetRTCClockSource>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d00f      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf8:	f7ff ffa5 	bl	8003b46 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfc:	f7ff ffb3 	bl	8003b66 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d014      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fe fa98 	bl	8002148 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fa94 	bl	8002148 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	74fb      	strb	r3, [r7, #19]
            break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c34:	f7ff feb4 	bl	80039a0 <LL_RCC_LSE_IsReady>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff5b 	bl	8003b04 <LL_RCC_SetRTCClockSource>
 8003c4e:	e004      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fea9 	bl	80039c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fe9e 	bl	80039c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fec0 	bl	8003a1c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fee6 	bl	8003a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fedb 	bl	8003a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fed0 	bl	8003a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fea9 	bl	8003a46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fe9e 	bl	8003a46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe93 	bl	8003a46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d011      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fe5e 	bl	80039f2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fea5 	bl	8003ab0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fea3 	bl	8003ada <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d107      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	58000400 	.word	0x58000400

08003dbc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	58000400 	.word	0x58000400

08003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	58000400 	.word	0x58000400

08003e04 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	58000400 	.word	0x58000400

08003e24 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e2e:	619a      	str	r2, [r3, #24]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	58000400 	.word	0x58000400

08003e3c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d101      	bne.n	8003e50 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	58000400 	.word	0x58000400

08003e60 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d101      	bne.n	8003e74 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58000400 	.word	0x58000400

08003e84 <LL_RCC_RF_DisableReset>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_IsRFUnderReset>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb8:	d101      	bne.n	8003ebe <LL_RCC_IsRFUnderReset+0x1a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <LL_RCC_IsRFUnderReset+0x1c>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <LL_EXTI_EnableIT_32_63+0x24>)
 8003ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ed6:	4905      	ldr	r1, [pc, #20]	; (8003eec <LL_EXTI_EnableIT_32_63+0x24>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	58000800 	.word	0x58000800

08003ef0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
    return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	e04b      	b.n	8003f9e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	799b      	ldrb	r3, [r3, #6]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fdca 	bl	8001ab4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003f26:	f7ff ffad 	bl	8003e84 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_SUBGHZ_Init+0xb8>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	0cdb      	lsrs	r3, r3, #19
 8003f38:	2264      	movs	r2, #100	; 0x64
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e007      	b.n	8003f62 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003f58:	f7ff ffa4 	bl	8003ea4 <LL_RCC_IsRFUnderReset>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ee      	bne.n	8003f40 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f62:	f7ff ff3f 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003f66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f6a:	f7ff ffad 	bl	8003ec8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003f6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f72:	f7ff ff23 	bl	8003dbc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003f76:	f7ff ff55 	bl	8003e24 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 faad 	bl	80044e4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	719a      	strb	r2, [r3, #6]

  return status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000000 	.word	0x20000000

08003fac <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	460b      	mov	r3, r1
 8003fba:	817b      	strh	r3, [r7, #10]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	799b      	ldrb	r3, [r3, #6]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d14a      	bne.n	8004060 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	795b      	ldrb	r3, [r3, #5]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e045      	b.n	8004062 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fb4c 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003fe8:	f7ff ff0c 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003fec:	210d      	movs	r1, #13
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa98 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fa90 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fa8a 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	82bb      	strh	r3, [r7, #20]
 8004014:	e00a      	b.n	800402c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004016:	8abb      	ldrh	r3, [r7, #20]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa7f 	bl	8004524 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004026:	8abb      	ldrh	r3, [r7, #20]
 8004028:	3301      	adds	r3, #1
 800402a:	82bb      	strh	r3, [r7, #20]
 800402c:	8aba      	ldrh	r2, [r7, #20]
 800402e:	893b      	ldrh	r3, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	d3f0      	bcc.n	8004016 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004034:	f7ff fed6 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fb45 	bl	80046c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
 800404a:	e001      	b.n	8004050 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	715a      	strb	r2, [r3, #5]

    return status;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	e000      	b.n	8004062 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b088      	sub	sp, #32
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	461a      	mov	r2, r3
 8004076:	460b      	mov	r3, r1
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	4613      	mov	r3, r2
 800407c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	799b      	ldrb	r3, [r3, #6]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d14a      	bne.n	8004122 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	795b      	ldrb	r3, [r3, #5]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004094:	2302      	movs	r3, #2
 8004096:	e045      	b.n	8004124 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 faee 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040a4:	f7ff feae 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80040a8:	211d      	movs	r1, #29
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fa3a 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa32 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fa2c 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80040cc:	2100      	movs	r1, #0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa28 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	82fb      	strh	r3, [r7, #22]
 80040d8:	e009      	b.n	80040ee <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80040da:	69b9      	ldr	r1, [r7, #24]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fa77 	bl	80045d0 <SUBGHZSPI_Receive>
      pData++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80040e8:	8afb      	ldrh	r3, [r7, #22]
 80040ea:	3301      	adds	r3, #1
 80040ec:	82fb      	strh	r3, [r7, #22]
 80040ee:	8afa      	ldrh	r2, [r7, #22]
 80040f0:	893b      	ldrh	r3, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3f1      	bcc.n	80040da <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040f6:	f7ff fe75 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fae4 	bl	80046c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e001      	b.n	8004112 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	715a      	strb	r2, [r3, #5]

    return status;
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	e000      	b.n	8004124 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	461a      	mov	r2, r3
 8004138:	460b      	mov	r3, r1
 800413a:	72fb      	strb	r3, [r7, #11]
 800413c:	4613      	mov	r3, r2
 800413e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	799b      	ldrb	r3, [r3, #6]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d14a      	bne.n	80041e0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	795b      	ldrb	r3, [r3, #5]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004152:	2302      	movs	r3, #2
 8004154:	e045      	b.n	80041e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fa8f 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004162:	7afb      	ldrb	r3, [r7, #11]
 8004164:	2b84      	cmp	r3, #132	; 0x84
 8004166:	d002      	beq.n	800416e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	2b94      	cmp	r3, #148	; 0x94
 800416c:	d103      	bne.n	8004176 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	711a      	strb	r2, [r3, #4]
 8004174:	e002      	b.n	800417c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800417c:	f7ff fe42 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004180:	7afb      	ldrb	r3, [r7, #11]
 8004182:	4619      	mov	r1, r3
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f9cd 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	82bb      	strh	r3, [r7, #20]
 800418e:	e00a      	b.n	80041a6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004190:	8abb      	ldrh	r3, [r7, #20]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f9c2 	bl	8004524 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80041a0:	8abb      	ldrh	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	82bb      	strh	r3, [r7, #20]
 80041a6:	8aba      	ldrh	r2, [r7, #20]
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3f0      	bcc.n	8004190 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041ae:	f7ff fe19 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	2b84      	cmp	r3, #132	; 0x84
 80041b6:	d002      	beq.n	80041be <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fa85 	bl	80046c8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
 80041ca:	e001      	b.n	80041d0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	715a      	strb	r2, [r3, #5]

    return status;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	e000      	b.n	80041e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	461a      	mov	r2, r3
 80041f6:	460b      	mov	r3, r1
 80041f8:	72fb      	strb	r3, [r7, #11]
 80041fa:	4613      	mov	r3, r2
 80041fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	799b      	ldrb	r3, [r3, #6]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d13d      	bne.n	8004288 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	795b      	ldrb	r3, [r3, #5]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004214:	2302      	movs	r3, #2
 8004216:	e038      	b.n	800428a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fa2e 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004224:	f7ff fdee 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	4619      	mov	r1, r3
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f979 	bl	8004524 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004232:	2100      	movs	r1, #0
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f975 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800423a:	2300      	movs	r3, #0
 800423c:	82fb      	strh	r3, [r7, #22]
 800423e:	e009      	b.n	8004254 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f9c4 	bl	80045d0 <SUBGHZSPI_Receive>
      pData++;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	3301      	adds	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800424e:	8afb      	ldrh	r3, [r7, #22]
 8004250:	3301      	adds	r3, #1
 8004252:	82fb      	strh	r3, [r7, #22]
 8004254:	8afa      	ldrh	r2, [r7, #22]
 8004256:	893b      	ldrh	r3, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d3f1      	bcc.n	8004240 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800425c:	f7ff fdc2 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa31 	bl	80046c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e001      	b.n	8004278 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	715a      	strb	r2, [r3, #5]

    return status;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
 8004286:	e000      	b.n	800428a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	461a      	mov	r2, r3
 800429e:	460b      	mov	r3, r1
 80042a0:	72fb      	strb	r3, [r7, #11]
 80042a2:	4613      	mov	r3, r2
 80042a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	799b      	ldrb	r3, [r3, #6]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d13e      	bne.n	800432e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	795b      	ldrb	r3, [r3, #5]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e039      	b.n	8004330 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f9dc 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042c8:	f7ff fd9c 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80042cc:	210e      	movs	r1, #14
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f928 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	4619      	mov	r1, r3
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f923 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80042de:	2300      	movs	r3, #0
 80042e0:	82bb      	strh	r3, [r7, #20]
 80042e2:	e00a      	b.n	80042fa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80042e4:	8abb      	ldrh	r3, [r7, #20]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f918 	bl	8004524 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80042f4:	8abb      	ldrh	r3, [r7, #20]
 80042f6:	3301      	adds	r3, #1
 80042f8:	82bb      	strh	r3, [r7, #20]
 80042fa:	8aba      	ldrh	r2, [r7, #20]
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3f0      	bcc.n	80042e4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004302:	f7ff fd6f 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f9de 	bl	80046c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	e001      	b.n	800431e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	715a      	strb	r2, [r3, #5]

    return status;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	e000      	b.n	8004330 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	461a      	mov	r2, r3
 8004344:	460b      	mov	r3, r1
 8004346:	72fb      	strb	r3, [r7, #11]
 8004348:	4613      	mov	r3, r2
 800434a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	799b      	ldrb	r3, [r3, #6]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d141      	bne.n	80043de <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	795b      	ldrb	r3, [r3, #5]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004362:	2302      	movs	r3, #2
 8004364:	e03c      	b.n	80043e0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f987 	bl	8004680 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004372:	f7ff fd47 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004376:	211e      	movs	r1, #30
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f8d3 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	4619      	mov	r1, r3
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8ce 	bl	8004524 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004388:	2100      	movs	r1, #0
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f8ca 	bl	8004524 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	82fb      	strh	r3, [r7, #22]
 8004394:	e009      	b.n	80043aa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004396:	69b9      	ldr	r1, [r7, #24]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f919 	bl	80045d0 <SUBGHZSPI_Receive>
      pData++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	3301      	adds	r3, #1
 80043a8:	82fb      	strh	r3, [r7, #22]
 80043aa:	8afa      	ldrh	r2, [r7, #22]
 80043ac:	893b      	ldrh	r3, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3f1      	bcc.n	8004396 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043b2:	f7ff fd17 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f986 	bl	80046c8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e001      	b.n	80043ce <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	715a      	strb	r2, [r3, #5]

    return status;
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	e000      	b.n	80043e0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80043f0:	2300      	movs	r3, #0
 80043f2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80043f4:	f107 020c 	add.w	r2, r7, #12
 80043f8:	2302      	movs	r3, #2
 80043fa:	2112      	movs	r1, #18
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fef4 	bl	80041ea <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004402:	7b3b      	ldrb	r3, [r7, #12]
 8004404:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	b21a      	sxth	r2, r3
 800440c:	7b7b      	ldrb	r3, [r7, #13]
 800440e:	b21b      	sxth	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b21b      	sxth	r3, r3
 8004414:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f003 fdd3 	bl	8007fcc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004426:	89fb      	ldrh	r3, [r7, #14]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
     //printf("rx callback\n\r");
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f003 fdd8 	bl	8007fe8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f003 fe27 	bl	8008098 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800444a:	89fb      	ldrh	r3, [r7, #14]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f003 fe2c 	bl	80080b4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f003 fe31 	bl	80080d0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f003 fdfe 	bl	800807c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f003 fdb9 	bl	8008004 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004492:	89fb      	ldrh	r3, [r7, #14]
 8004494:	09db      	lsrs	r3, r3, #7
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800449e:	89fb      	ldrh	r3, [r7, #14]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f003 fdb7 	bl	8008020 <HAL_SUBGHZ_CADStatusCallback>
 80044b2:	e003      	b.n	80044bc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80044b4:	2100      	movs	r1, #0
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f003 fdb2 	bl	8008020 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	0a5b      	lsrs	r3, r3, #9
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f003 fdc7 	bl	800805c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80044ce:	f107 020c 	add.w	r2, r7, #12
 80044d2:	2302      	movs	r3, #2
 80044d4:	2102      	movs	r1, #2
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fe28 	bl	800412c <HAL_SUBGHZ_ExecSetCmd>
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 80044f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004500:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 8004504:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004508:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <SUBGHZSPI_Init+0x3c>)
 8004510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004514:	6013      	str	r3, [r2, #0]
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	58010000 	.word	0x58010000

08004524 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <SUBGHZSPI_Transmit+0xa0>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	0cdb      	lsrs	r3, r3, #19
 8004542:	2264      	movs	r2, #100	; 0x64
 8004544:	fb02 f303 	mul.w	r3, r2, r3
 8004548:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e008      	b.n	800456e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3b01      	subs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <SUBGHZSPI_Transmit+0xa4>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d1ed      	bne.n	800454a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800456e:	4b17      	ldr	r3, [pc, #92]	; (80045cc <SUBGHZSPI_Transmit+0xa8>)
 8004570:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <SUBGHZSPI_Transmit+0xa0>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	0cdb      	lsrs	r3, r3, #19
 8004586:	2264      	movs	r2, #100	; 0x64
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e008      	b.n	80045b2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <SUBGHZSPI_Transmit+0xa4>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d1ed      	bne.n	800458e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <SUBGHZSPI_Transmit+0xa4>)
 80045b4:	68db      	ldr	r3, [r3, #12]

  return status;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000000 	.word	0x20000000
 80045c8:	58010000 	.word	0x58010000
 80045cc:	5801000c 	.word	0x5801000c

080045d0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <SUBGHZSPI_Receive+0xa4>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	0cdb      	lsrs	r3, r3, #19
 80045ec:	2264      	movs	r2, #100	; 0x64
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e008      	b.n	8004618 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b01      	subs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <SUBGHZSPI_Receive+0xa8>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d1ed      	bne.n	80045f4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <SUBGHZSPI_Receive+0xac>)
 800461a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <SUBGHZSPI_Receive+0xa4>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	0cdb      	lsrs	r3, r3, #19
 8004630:	2264      	movs	r2, #100	; 0x64
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e008      	b.n	800465c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3b01      	subs	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <SUBGHZSPI_Receive+0xa8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d1ed      	bne.n	8004638 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <SUBGHZSPI_Receive+0xa8>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	701a      	strb	r2, [r3, #0]

  return status;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000
 8004678:	58010000 	.word	0x58010000
 800467c:	5801000c 	.word	0x5801000c

08004680 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	791b      	ldrb	r3, [r3, #4]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d111      	bne.n	80046b4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <SUBGHZ_CheckDeviceReady+0x44>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046a0:	f7ff fbb0 	bl	8003e04 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f9      	bne.n	80046a4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046b0:	f7ff fb98 	bl	8003de4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f807 	bl	80046c8 <SUBGHZ_WaitOnBusy>
 80046ba:	4603      	mov	r3, r0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000000 	.word	0x20000000

080046c8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <SUBGHZ_WaitOnBusy+0x58>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	0d1b      	lsrs	r3, r3, #20
 80046e2:	2264      	movs	r2, #100	; 0x64
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80046ea:	f7ff fbb9 	bl	8003e60 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80046ee:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	609a      	str	r2, [r3, #8]
      break;
 8004700:	e009      	b.n	8004716 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3b01      	subs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004708:	f7ff fb98 	bl	8003e3c <LL_PWR_IsActiveFlag_RFBUSYS>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4013      	ands	r3, r2
 8004712:	2b01      	cmp	r3, #1
 8004714:	d0e9      	beq.n	80046ea <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000000 	.word	0x20000000

08004724 <LL_RCC_GetUSARTClockSource>:
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	4313      	orrs	r3, r2
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <LL_RCC_GetLPUARTClockSource>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4013      	ands	r3, r2
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e042      	b.n	80047fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f8d0 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f995 	bl	8004ad8 <UART_SetConfig>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e022      	b.n	80047fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fbd9 	bl	8004f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fc5f 	bl	80050ba <UART_CheckIdleState>
 80047fc:	4603      	mov	r3, r0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b08a      	sub	sp, #40	; 0x28
 800480a:	af02      	add	r7, sp, #8
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	2b20      	cmp	r3, #32
 800481e:	f040 8083 	bne.w	8004928 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Transmit+0x28>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07b      	b.n	800492a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_UART_Transmit+0x3a>
 800483c:	2302      	movs	r3, #2
 800483e:	e074      	b.n	800492a <HAL_UART_Transmit+0x124>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2221      	movs	r2, #33	; 0x21
 8004854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004858:	f7fd fc76 	bl	8002148 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d108      	bne.n	800488a <HAL_UART_Transmit+0x84>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e003      	b.n	8004892 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800489a:	e02c      	b.n	80048f6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2200      	movs	r2, #0
 80048a4:	2180      	movs	r1, #128	; 0x80
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fc52 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e039      	b.n	800492a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3302      	adds	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e007      	b.n	80048e4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1cc      	bne.n	800489c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	2140      	movs	r1, #64	; 0x40
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fc1f 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e006      	b.n	800492a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	; 0x28
 8004936:	af02      	add	r7, sp, #8
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	2b20      	cmp	r3, #32
 800494a:	f040 80c0 	bne.w	8004ace <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UART_Receive+0x28>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0b8      	b.n	8004ad0 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_UART_Receive+0x3a>
 8004968:	2302      	movs	r3, #2
 800496a:	e0b1      	b.n	8004ad0 <HAL_UART_Receive+0x19e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2222      	movs	r2, #34	; 0x22
 8004980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fd fbdd 	bl	8002148 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d10e      	bne.n	80049c8 <HAL_UART_Receive+0x96>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_UART_Receive+0x8c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049bc:	e02d      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049c6:	e028      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_UART_Receive+0xba>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <HAL_UART_Receive+0xb0>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e0:	e01b      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	227f      	movs	r2, #127	; 0x7f
 80049e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049ea:	e016      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f4:	d10d      	bne.n	8004a12 <HAL_UART_Receive+0xe0>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_UART_Receive+0xd6>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	227f      	movs	r2, #127	; 0x7f
 8004a02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a06:	e008      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	223f      	movs	r2, #63	; 0x3f
 8004a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a10:	e003      	b.n	8004a1a <HAL_UART_Receive+0xe8>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d108      	bne.n	8004a3e <HAL_UART_Receive+0x10c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e003      	b.n	8004a46 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a4e:	e032      	b.n	8004ab6 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2120      	movs	r1, #32
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fb78 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e032      	b.n	8004ad0 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10c      	bne.n	8004a8a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	8a7b      	ldrh	r3, [r7, #18]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3302      	adds	r3, #2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e00c      	b.n	8004aa4 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	8a7b      	ldrh	r3, [r7, #18]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4013      	ands	r3, r2
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1c6      	bne.n	8004a50 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4bab      	ldr	r3, [pc, #684]	; (8004db0 <UART_SetConfig+0x2d8>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	69f9      	ldr	r1, [r7, #28]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4aa0      	ldr	r2, [pc, #640]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	69f9      	ldr	r1, [r7, #28]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f023 010f 	bic.w	r1, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a91      	ldr	r2, [pc, #580]	; (8004db8 <UART_SetConfig+0x2e0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d122      	bne.n	8004bbe <UART_SetConfig+0xe6>
 8004b78:	2003      	movs	r0, #3
 8004b7a:	f7ff fdd3 	bl	8004724 <LL_RCC_GetUSARTClockSource>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d817      	bhi.n	8004bb8 <UART_SetConfig+0xe0>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0xb8>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bad 	.word	0x08004bad
 8004b98:	08004ba7 	.word	0x08004ba7
 8004b9c:	08004bb3 	.word	0x08004bb3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e072      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e06f      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004bac:	2304      	movs	r3, #4
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e06c      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e069      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e066      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7e      	ldr	r2, [pc, #504]	; (8004dbc <UART_SetConfig+0x2e4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d134      	bne.n	8004c32 <UART_SetConfig+0x15a>
 8004bc8:	200c      	movs	r0, #12
 8004bca:	f7ff fdab 	bl	8004724 <LL_RCC_GetUSARTClockSource>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d829      	bhi.n	8004c2c <UART_SetConfig+0x154>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x108>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c2d 	.word	0x08004c2d
 8004c00:	08004c1b 	.word	0x08004c1b
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c2d 	.word	0x08004c2d
 8004c10:	08004c27 	.word	0x08004c27
 8004c14:	2300      	movs	r3, #0
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e038      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	76fb      	strb	r3, [r7, #27]
 8004c1e:	e035      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c20:	2304      	movs	r3, #4
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e032      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c26:	2308      	movs	r3, #8
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e02f      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e02c      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a5f      	ldr	r2, [pc, #380]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d125      	bne.n	8004c88 <UART_SetConfig+0x1b0>
 8004c3c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004c40:	f7ff fd82 	bl	8004748 <LL_RCC_GetLPUARTClockSource>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c4a:	d017      	beq.n	8004c7c <UART_SetConfig+0x1a4>
 8004c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c50:	d817      	bhi.n	8004c82 <UART_SetConfig+0x1aa>
 8004c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c56:	d00b      	beq.n	8004c70 <UART_SetConfig+0x198>
 8004c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5c:	d811      	bhi.n	8004c82 <UART_SetConfig+0x1aa>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <UART_SetConfig+0x192>
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d006      	beq.n	8004c76 <UART_SetConfig+0x19e>
 8004c68:	e00b      	b.n	8004c82 <UART_SetConfig+0x1aa>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e00d      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c70:	2302      	movs	r3, #2
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e00a      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c76:	2304      	movs	r3, #4
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e007      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	e004      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c82:	2310      	movs	r3, #16
 8004c84:	76fb      	strb	r3, [r7, #27]
 8004c86:	e001      	b.n	8004c8c <UART_SetConfig+0x1b4>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a48      	ldr	r2, [pc, #288]	; (8004db4 <UART_SetConfig+0x2dc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	f040 8098 	bne.w	8004dc8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c98:	7efb      	ldrb	r3, [r7, #27]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d823      	bhi.n	8004ce6 <UART_SetConfig+0x20e>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x1cc>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004cd7 	.word	0x08004cd7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004ce7 	.word	0x08004ce7
 8004cc4:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc8:	f7fe fd90 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004ccc:	6178      	str	r0, [r7, #20]
        break;
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <UART_SetConfig+0x2e8>)
 8004cd2:	617b      	str	r3, [r7, #20]
        break;
 8004cd4:	e00c      	b.n	8004cf0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fe fcd5 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8004cda:	6178      	str	r0, [r7, #20]
        break;
 8004cdc:	e008      	b.n	8004cf0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce2:	617b      	str	r3, [r7, #20]
        break;
 8004ce4:	e004      	b.n	8004cf0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	76bb      	strb	r3, [r7, #26]
        break;
 8004cee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8128 	beq.w	8004f48 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <UART_SetConfig+0x2ec>)
 8004cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d02:	461a      	mov	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4413      	add	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d305      	bcc.n	8004d28 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d902      	bls.n	8004d2e <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	76bb      	strb	r3, [r7, #26]
 8004d2c:	e10c      	b.n	8004f48 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <UART_SetConfig+0x2ec>)
 8004d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f7fc f895 	bl	8000e74 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	020b      	lsls	r3, r1, #8
 8004d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d60:	0202      	lsls	r2, r0, #8
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	6849      	ldr	r1, [r1, #4]
 8004d66:	0849      	lsrs	r1, r1, #1
 8004d68:	4608      	mov	r0, r1
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	1814      	adds	r4, r2, r0
 8004d70:	eb43 0501 	adc.w	r5, r3, r1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fc f877 	bl	8000e74 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d94:	d308      	bcc.n	8004da8 <UART_SetConfig+0x2d0>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	d204      	bcs.n	8004da8 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e0cf      	b.n	8004f48 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	76bb      	strb	r3, [r7, #26]
 8004dac:	e0cc      	b.n	8004f48 <UART_SetConfig+0x470>
 8004dae:	bf00      	nop
 8004db0:	cfff69f3 	.word	0xcfff69f3
 8004db4:	40008000 	.word	0x40008000
 8004db8:	40013800 	.word	0x40013800
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	00f42400 	.word	0x00f42400
 8004dc4:	0800e45c 	.word	0x0800e45c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	d165      	bne.n	8004e9e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004dd2:	7efb      	ldrb	r3, [r7, #27]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d828      	bhi.n	8004e2a <UART_SetConfig+0x352>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x308>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fe fcf2 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004e08:	6178      	str	r0, [r7, #20]
        break;
 8004e0a:	e013      	b.n	8004e34 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fe fd00 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004e10:	6178      	str	r0, [r7, #20]
        break;
 8004e12:	e00f      	b.n	8004e34 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b56      	ldr	r3, [pc, #344]	; (8004f70 <UART_SetConfig+0x498>)
 8004e16:	617b      	str	r3, [r7, #20]
        break;
 8004e18:	e00c      	b.n	8004e34 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe fc33 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8004e1e:	6178      	str	r0, [r7, #20]
        break;
 8004e20:	e008      	b.n	8004e34 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	617b      	str	r3, [r7, #20]
        break;
 8004e28:	e004      	b.n	8004e34 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	76bb      	strb	r3, [r7, #26]
        break;
 8004e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8086 	beq.w	8004f48 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	4a4c      	ldr	r2, [pc, #304]	; (8004f74 <UART_SetConfig+0x49c>)
 8004e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e46:	461a      	mov	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e4e:	005a      	lsls	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d916      	bls.n	8004e98 <UART_SetConfig+0x3c0>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d212      	bcs.n	8004e98 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f023 030f 	bic.w	r3, r3, #15
 8004e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	89fb      	ldrh	r3, [r7, #14]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	89fa      	ldrh	r2, [r7, #14]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e057      	b.n	8004f48 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	76bb      	strb	r3, [r7, #26]
 8004e9c:	e054      	b.n	8004f48 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e9e:	7efb      	ldrb	r3, [r7, #27]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d828      	bhi.n	8004ef6 <UART_SetConfig+0x41e>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x3d4>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ef7 	.word	0x08004ef7
 8004ebc:	08004ee7 	.word	0x08004ee7
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004ef7 	.word	0x08004ef7
 8004ec8:	08004ef7 	.word	0x08004ef7
 8004ecc:	08004eef 	.word	0x08004eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fe fc8c 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004ed4:	6178      	str	r0, [r7, #20]
        break;
 8004ed6:	e013      	b.n	8004f00 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed8:	f7fe fc9a 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004edc:	6178      	str	r0, [r7, #20]
        break;
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee0:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <UART_SetConfig+0x498>)
 8004ee2:	617b      	str	r3, [r7, #20]
        break;
 8004ee4:	e00c      	b.n	8004f00 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee6:	f7fe fbcd 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8004eea:	6178      	str	r0, [r7, #20]
        break;
 8004eec:	e008      	b.n	8004f00 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef2:	617b      	str	r3, [r7, #20]
        break;
 8004ef4:	e004      	b.n	8004f00 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	76bb      	strb	r3, [r7, #26]
        break;
 8004efe:	bf00      	nop
    }

    if (pclk != 0U)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <UART_SetConfig+0x49c>)
 8004f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f10:	461a      	mov	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	441a      	add	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	d908      	bls.n	8004f44 <UART_SetConfig+0x46c>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f38:	d204      	bcs.n	8004f44 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	e001      	b.n	8004f48 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f64:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	0800e45c 	.word	0x0800e45c

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005076:	d10a      	bne.n	800508e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af02      	add	r7, sp, #8
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ca:	f7fd f83d 	bl	8002148 <HAL_GetTick>
 80050ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d10e      	bne.n	80050fc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f82f 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e025      	b.n	8005148 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d10e      	bne.n	8005128 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f819 	bl	8005150 <UART_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e00f      	b.n	8005148 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b09c      	sub	sp, #112	; 0x70
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	e0a9      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	f000 80a5 	beq.w	80052b6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516c:	f7fc ffec 	bl	8002148 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <UART_WaitOnFlagUntilTimeout+0x32>
 800517c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517e:	2b00      	cmp	r3, #0
 8005180:	d140      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005196:	667b      	str	r3, [r7, #100]	; 0x64
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a2:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	663b      	str	r3, [r7, #96]	; 0x60
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e069      	b.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d051      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005220:	d149      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800522a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	613b      	str	r3, [r7, #16]
   return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	66bb      	str	r3, [r7, #104]	; 0x68
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800527e:	623a      	str	r2, [r7, #32]
 8005280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	61bb      	str	r3, [r7, #24]
   return(result);
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e010      	b.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f43f af46 	beq.w	8005162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3770      	adds	r7, #112	; 0x70
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e027      	b.n	8005346 <HAL_UARTEx_DisableFifoMode+0x66>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2224      	movs	r2, #36	; 0x24
 8005302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005364:	2302      	movs	r3, #2
 8005366:	e02d      	b.n	80053c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f84f 	bl	8005448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e02d      	b.n	8005440 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f811 	bl	8005448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005468:	e031      	b.n	80054ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800546a:	2308      	movs	r3, #8
 800546c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800546e:	2308      	movs	r3, #8
 8005470:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	0e5b      	lsrs	r3, r3, #25
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0f5b      	lsrs	r3, r3, #29
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	7b3a      	ldrb	r2, [r7, #12]
 8005496:	4910      	ldr	r1, [pc, #64]	; (80054d8 <UARTEx_SetNbDataToProcess+0x90>)
 8005498:	5c8a      	ldrb	r2, [r1, r2]
 800549a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800549e:	7b3a      	ldrb	r2, [r7, #12]
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <UARTEx_SetNbDataToProcess+0x94>)
 80054a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	7b7a      	ldrb	r2, [r7, #13]
 80054b4:	4908      	ldr	r1, [pc, #32]	; (80054d8 <UARTEx_SetNbDataToProcess+0x90>)
 80054b6:	5c8a      	ldrb	r2, [r1, r2]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054bc:	7b7a      	ldrb	r2, [r7, #13]
 80054be:	4907      	ldr	r1, [pc, #28]	; (80054dc <UARTEx_SetNbDataToProcess+0x94>)
 80054c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	0800e474 	.word	0x0800e474
 80054dc:	0800e47c 	.word	0x0800e47c

080054e0 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80054e8:	4a15      	ldr	r2, [pc, #84]	; (8005540 <RadioInit+0x60>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <RadioInit+0x64>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <RadioInit+0x64>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <RadioInit+0x64>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005500:	4811      	ldr	r0, [pc, #68]	; (8005548 <RadioInit+0x68>)
 8005502:	f001 fdc1 	bl	8007088 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8005506:	2000      	movs	r0, #0
 8005508:	f000 ffb0 	bl	800646c <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800550c:	f002 f852 	bl	80075b4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005510:	2100      	movs	r1, #0
 8005512:	2000      	movs	r0, #0
 8005514:	f002 fba8 	bl	8007c68 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005518:	2204      	movs	r2, #4
 800551a:	2100      	movs	r1, #0
 800551c:	2001      	movs	r0, #1
 800551e:	f002 f9d3 	bl	80078c8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005522:	2300      	movs	r3, #0
 8005524:	2200      	movs	r2, #0
 8005526:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800552a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800552e:	f002 f907 	bl	8007740 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005532:	f000 fe4f 	bl	80061d4 <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000448 	.word	0x20000448
 8005544:	2000058c 	.word	0x2000058c
 8005548:	080064d9 	.word	0x080064d9

0800554c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005550:	f001 fddc 	bl	800710c <SUBGRF_GetOperatingMode>
 8005554:	4603      	mov	r3, r0
 8005556:	2b07      	cmp	r3, #7
 8005558:	d00a      	beq.n	8005570 <RadioGetStatus+0x24>
 800555a:	2b07      	cmp	r3, #7
 800555c:	dc0a      	bgt.n	8005574 <RadioGetStatus+0x28>
 800555e:	2b04      	cmp	r3, #4
 8005560:	d002      	beq.n	8005568 <RadioGetStatus+0x1c>
 8005562:	2b05      	cmp	r3, #5
 8005564:	d002      	beq.n	800556c <RadioGetStatus+0x20>
 8005566:	e005      	b.n	8005574 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005568:	2302      	movs	r3, #2
 800556a:	e004      	b.n	8005576 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800556c:	2301      	movs	r3, #1
 800556e:	e002      	b.n	8005576 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005570:	2303      	movs	r3, #3
 8005572:	e000      	b.n	8005576 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005574:	2300      	movs	r3, #0
    }
}
 8005576:	4618      	mov	r0, r3
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <RadioSetModem+0xa0>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4618      	mov	r0, r3
 8005590:	f002 fedf 	bl	8008352 <RFW_SetRadioModem>
    switch( modem )
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	3b01      	subs	r3, #1
 8005598:	2b03      	cmp	r3, #3
 800559a:	d80b      	bhi.n	80055b4 <RadioSetModem+0x38>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <RadioSetModem+0x28>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c3 	.word	0x080055c3
 80055a8:	080055e9 	.word	0x080055e9
 80055ac:	080055f7 	.word	0x080055f7
 80055b0:	08005605 	.word	0x08005605
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80055b4:	2000      	movs	r0, #0
 80055b6:	f002 f961 	bl	800787c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <RadioSetModem+0xa0>)
 80055bc:	2200      	movs	r2, #0
 80055be:	735a      	strb	r2, [r3, #13]
        break;
 80055c0:	e028      	b.n	8005614 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80055c2:	2001      	movs	r0, #1
 80055c4:	f002 f95a 	bl	800787c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <RadioSetModem+0xa0>)
 80055ca:	7b5a      	ldrb	r2, [r3, #13]
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <RadioSetModem+0xa0>)
 80055ce:	7b1b      	ldrb	r3, [r3, #12]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d01e      	beq.n	8005612 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <RadioSetModem+0xa0>)
 80055d6:	7b1a      	ldrb	r2, [r3, #12]
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <RadioSetModem+0xa0>)
 80055da:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <RadioSetModem+0xa0>)
 80055de:	7b5b      	ldrb	r3, [r3, #13]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 ff43 	bl	800646c <RadioSetPublicNetwork>
        }
        break;
 80055e6:	e014      	b.n	8005612 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80055e8:	2002      	movs	r0, #2
 80055ea:	f002 f947 	bl	800787c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <RadioSetModem+0xa0>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	735a      	strb	r2, [r3, #13]
        break;
 80055f4:	e00e      	b.n	8005614 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80055f6:	2002      	movs	r0, #2
 80055f8:	f002 f940 	bl	800787c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <RadioSetModem+0xa0>)
 80055fe:	2200      	movs	r2, #0
 8005600:	735a      	strb	r2, [r3, #13]
        break;
 8005602:	e007      	b.n	8005614 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005604:	2000      	movs	r0, #0
 8005606:	f002 f939 	bl	800787c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <RadioSetModem+0xa0>)
 800560c:	2200      	movs	r2, #0
 800560e:	735a      	strb	r2, [r3, #13]
        break;
 8005610:	e000      	b.n	8005614 <RadioSetModem+0x98>
        break;
 8005612:	bf00      	nop
    }
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	2000058c 	.word	0x2000058c

08005620 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f002 f8e5 	bl	80077f8 <SUBGRF_SetRfFrequency>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b090      	sub	sp, #64	; 0x40
 800563a:	af0a      	add	r7, sp, #40	; 0x28
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8005652:	f000 fdd2 	bl	80061fa <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8005656:	2000      	movs	r0, #0
 8005658:	f7ff ff90 	bl	800557c <RadioSetModem>

    RadioSetChannel( freq );
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ffdf 	bl	8005620 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8005662:	2301      	movs	r3, #1
 8005664:	9309      	str	r3, [sp, #36]	; 0x24
 8005666:	2300      	movs	r3, #0
 8005668:	9308      	str	r3, [sp, #32]
 800566a:	2300      	movs	r3, #0
 800566c:	9307      	str	r3, [sp, #28]
 800566e:	2300      	movs	r3, #0
 8005670:	9306      	str	r3, [sp, #24]
 8005672:	2300      	movs	r3, #0
 8005674:	9305      	str	r3, [sp, #20]
 8005676:	2300      	movs	r3, #0
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	2300      	movs	r3, #0
 800567c:	9303      	str	r3, [sp, #12]
 800567e:	2300      	movs	r3, #0
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	2303      	movs	r3, #3
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	2000      	movs	r0, #0
 8005694:	f000 f826 	bl	80056e4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005698:	2000      	movs	r0, #0
 800569a:	f000 fdb5 	bl	8006208 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800569e:	f000 ff13 	bl	80064c8 <RadioGetWakeupTime>
 80056a2:	4603      	mov	r3, r0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fc fd59 	bl	800215c <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80056aa:	f000 fda6 	bl	80061fa <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7ff ff5a 	bl	800557c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80056c8:	2300      	movs	r3, #0
 80056ca:	2200      	movs	r2, #0
 80056cc:	2100      	movs	r1, #0
 80056ce:	2000      	movs	r0, #0
 80056d0:	f002 f836 	bl	8007740 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80056d4:	f001 fdeb 	bl	80072ae <SUBGRF_GetRandom>
 80056d8:	6078      	str	r0, [r7, #4]

    return rnd;
 80056da:	687b      	ldr	r3, [r7, #4]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	; 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
 80056f4:	4613      	mov	r3, r2
 80056f6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80056f8:	4abd      	ldr	r2, [pc, #756]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80056fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80056fe:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005700:	f002 fde5 	bl	80082ce <RFW_DeInit>
    if( rxContinuous == true )
 8005704:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8005710:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8005718:	4ab6      	ldr	r2, [pc, #728]	; (80059f4 <RadioSetRxConfig+0x310>)
 800571a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800571e:	7013      	strb	r3, [r2, #0]
 8005720:	e002      	b.n	8005728 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005722:	4bb4      	ldr	r3, [pc, #720]	; (80059f4 <RadioSetRxConfig+0x310>)
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d009      	beq.n	8005742 <RadioSetRxConfig+0x5e>
 800572e:	2b04      	cmp	r3, #4
 8005730:	f300 81da 	bgt.w	8005ae8 <RadioSetRxConfig+0x404>
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80bf 	beq.w	80058b8 <RadioSetRxConfig+0x1d4>
 800573a:	2b01      	cmp	r3, #1
 800573c:	f000 812c 	beq.w	8005998 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005740:	e1d2      	b.n	8005ae8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005742:	2001      	movs	r0, #1
 8005744:	f001 fef8 	bl	8007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005748:	4ba9      	ldr	r3, [pc, #676]	; (80059f0 <RadioSetRxConfig+0x30c>)
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005750:	4aa7      	ldr	r2, [pc, #668]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8005756:	4ba6      	ldr	r3, [pc, #664]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005758:	2209      	movs	r2, #9
 800575a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800575e:	4ba4      	ldr	r3, [pc, #656]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005760:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005766:	68b8      	ldr	r0, [r7, #8]
 8005768:	f002 fce2 	bl	8008130 <SUBGRF_GetFskBandwidthRegValue>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	4b9f      	ldr	r3, [pc, #636]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005776:	4b9e      	ldr	r3, [pc, #632]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005778:	2200      	movs	r2, #0
 800577a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800577c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	b29a      	uxth	r2, r3
 8005782:	4b9b      	ldr	r3, [pc, #620]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005784:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8005786:	4b9a      	ldr	r3, [pc, #616]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005788:	2200      	movs	r2, #0
 800578a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800578c:	4b98      	ldr	r3, [pc, #608]	; (80059f0 <RadioSetRxConfig+0x30c>)
 800578e:	2210      	movs	r2, #16
 8005790:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005792:	4b97      	ldr	r3, [pc, #604]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005794:	2200      	movs	r2, #0
 8005796:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8005798:	4b95      	ldr	r3, [pc, #596]	; (80059f0 <RadioSetRxConfig+0x30c>)
 800579a:	2200      	movs	r2, #0
 800579c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800579e:	4b95      	ldr	r3, [pc, #596]	; (80059f4 <RadioSetRxConfig+0x310>)
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80057a4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80057a6:	4b92      	ldr	r3, [pc, #584]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80057ac:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80057b2:	2004      	movs	r0, #4
 80057b4:	f7ff fee2 	bl	800557c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057b8:	488f      	ldr	r0, [pc, #572]	; (80059f8 <RadioSetRxConfig+0x314>)
 80057ba:	f002 f8eb 	bl	8007994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057be:	488f      	ldr	r0, [pc, #572]	; (80059fc <RadioSetRxConfig+0x318>)
 80057c0:	f002 f9b4 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80057c4:	4a8e      	ldr	r2, [pc, #568]	; (8005a00 <RadioSetRxConfig+0x31c>)
 80057c6:	f107 031c 	add.w	r3, r7, #28
 80057ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80057d2:	f107 031c 	add.w	r3, r7, #28
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fce7 	bl	80071aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80057dc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057e0:	f001 fd32 	bl	8007248 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80057e4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80057e8:	f000 fdde 	bl	80063a8 <RadioRead>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80057f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80057fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005802:	4619      	mov	r1, r3
 8005804:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8005808:	f000 fdbc 	bl	8006384 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800580c:	2104      	movs	r1, #4
 800580e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8005812:	f000 fdb7 	bl	8006384 <RadioWrite>
            modReg= RadioRead(0x89b);
 8005816:	f640 009b 	movw	r0, #2203	; 0x89b
 800581a:	f000 fdc5 	bl	80063a8 <RadioRead>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005828:	f023 031c 	bic.w	r3, r3, #28
 800582c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8005830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005834:	f043 0308 	orr.w	r3, r3, #8
 8005838:	b2db      	uxtb	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	f640 009b 	movw	r0, #2203	; 0x89b
 8005840:	f000 fda0 	bl	8006384 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8005844:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005848:	f000 fdae 	bl	80063a8 <RadioRead>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005856:	f023 0318 	bic.w	r3, r3, #24
 800585a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800585e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005862:	f043 0318 	orr.w	r3, r3, #24
 8005866:	b2db      	uxtb	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800586e:	f000 fd89 	bl	8006384 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8005872:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005876:	f000 fd97 	bl	80063a8 <RadioRead>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005890:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005894:	b2db      	uxtb	r3, r3
 8005896:	4619      	mov	r1, r3
 8005898:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800589c:	f000 fd72 	bl	8006384 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80058a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	4a4f      	ldr	r2, [pc, #316]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058b4:	6093      	str	r3, [r2, #8]
            break;
 80058b6:	e118      	b.n	8005aea <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80058b8:	2000      	movs	r0, #0
 80058ba:	f001 fe3d 	bl	8007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80058be:	4b4c      	ldr	r3, [pc, #304]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80058c6:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80058cc:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058ce:	220b      	movs	r2, #11
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f002 fc2b 	bl	8008130 <SUBGRF_GetFskBandwidthRegValue>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80058e4:	4b42      	ldr	r3, [pc, #264]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80058ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058f2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80058f4:	4b3e      	ldr	r3, [pc, #248]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058f6:	2204      	movs	r2, #4
 80058f8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80058fc:	2218      	movs	r2, #24
 80058fe:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005900:	4b3b      	ldr	r3, [pc, #236]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005902:	2200      	movs	r2, #0
 8005904:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005906:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800590a:	f083 0301 	eor.w	r3, r3, #1
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005914:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005916:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <RadioSetRxConfig+0x310>)
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <RadioSetRxConfig+0x30c>)
 800591c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800591e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005926:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005928:	22f2      	movs	r2, #242	; 0xf2
 800592a:	75da      	strb	r2, [r3, #23]
 800592c:	e002      	b.n	8005934 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005930:	2201      	movs	r2, #1
 8005932:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005934:	4b2e      	ldr	r3, [pc, #184]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005936:	2201      	movs	r2, #1
 8005938:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800593a:	f000 fc5e 	bl	80061fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fe14 	bl	800557c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005954:	4828      	ldr	r0, [pc, #160]	; (80059f8 <RadioSetRxConfig+0x314>)
 8005956:	f002 f81d 	bl	8007994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800595a:	4828      	ldr	r0, [pc, #160]	; (80059fc <RadioSetRxConfig+0x318>)
 800595c:	f002 f8e6 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005960:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <RadioSetRxConfig+0x320>)
 8005962:	f107 0314 	add.w	r3, r7, #20
 8005966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800596a:	e883 0003 	stmia.w	r3, {r0, r1}
 800596e:	f107 0314 	add.w	r3, r7, #20
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fc19 	bl	80071aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005978:	f240 10ff 	movw	r0, #511	; 0x1ff
 800597c:	f001 fc64 	bl	8007248 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005980:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005982:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	461a      	mov	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <RadioSetRxConfig+0x30c>)
 8005994:	6093      	str	r3, [r2, #8]
            break;
 8005996:	e0a8      	b.n	8005aea <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8005998:	2000      	movs	r0, #0
 800599a:	f001 fdcd 	bl	8007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800599e:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80059ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80059b0:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <RadioSetRxConfig+0x324>)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4413      	add	r3, r2
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80059ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <RadioSetRxConfig+0x2f4>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b0b      	cmp	r3, #11
 80059d0:	d008      	beq.n	80059e4 <RadioSetRxConfig+0x300>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d005      	beq.n	80059e4 <RadioSetRxConfig+0x300>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d116      	bne.n	8005a0c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	d113      	bne.n	8005a0c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80059e4:	4b02      	ldr	r3, [pc, #8]	; (80059f0 <RadioSetRxConfig+0x30c>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80059ec:	e012      	b.n	8005a14 <RadioSetRxConfig+0x330>
 80059ee:	bf00      	nop
 80059f0:	2000058c 	.word	0x2000058c
 80059f4:	20000009 	.word	0x20000009
 80059f8:	200005c4 	.word	0x200005c4
 80059fc:	2000059a 	.word	0x2000059a
 8005a00:	0800e0d0 	.word	0x0800e0d0
 8005a04:	0800e0d8 	.word	0x0800e0d8
 8005a08:	0800e508 	.word	0x0800e508
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005a14:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a20:	2b05      	cmp	r3, #5
 8005a22:	d004      	beq.n	8005a2e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005a24:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d10a      	bne.n	8005a44 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005a2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a30:	2b0b      	cmp	r3, #11
 8005a32:	d803      	bhi.n	8005a3c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005a34:	4b2f      	ldr	r3, [pc, #188]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a36:	220c      	movs	r2, #12
 8005a38:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005a3a:	e006      	b.n	8005a4a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005a3c:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a40:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005a42:	e002      	b.n	8005a4a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a48:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005a4a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005a4e:	4b29      	ldr	r3, [pc, #164]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a50:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <RadioSetRxConfig+0x414>)
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a58:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005a5a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a60:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005a64:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8005a68:	4b22      	ldr	r3, [pc, #136]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005a6e:	f000 fbc4 	bl	80061fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005a72:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fd7a 	bl	800557c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a88:	481c      	ldr	r0, [pc, #112]	; (8005afc <RadioSetRxConfig+0x418>)
 8005a8a:	f001 ff83 	bl	8007994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a8e:	481c      	ldr	r0, [pc, #112]	; (8005b00 <RadioSetRxConfig+0x41c>)
 8005a90:	f002 f84c 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005a94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fd5c 	bl	8007556 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10d      	bne.n	8005ac4 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8005aa8:	f240 7036 	movw	r0, #1846	; 0x736
 8005aac:	f002 f99a 	bl	8007de4 <SUBGRF_ReadRegister>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f023 0304 	bic.w	r3, r3, #4
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f240 7036 	movw	r0, #1846	; 0x736
 8005abe:	f002 f97d 	bl	8007dbc <SUBGRF_WriteRegister>
 8005ac2:	e00c      	b.n	8005ade <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8005ac4:	f240 7036 	movw	r0, #1846	; 0x736
 8005ac8:	f002 f98c 	bl	8007de4 <SUBGRF_ReadRegister>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f240 7036 	movw	r0, #1846	; 0x736
 8005ada:	f002 f96f 	bl	8007dbc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <RadioSetRxConfig+0x410>)
 8005ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae4:	609a      	str	r2, [r3, #8]
            break;
 8005ae6:	e000      	b.n	8005aea <RadioSetRxConfig+0x406>
            break;
 8005ae8:	bf00      	nop
    }
}
 8005aea:	bf00      	nop
 8005aec:	3728      	adds	r7, #40	; 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	2000058c 	.word	0x2000058c
 8005af8:	20000009 	.word	0x20000009
 8005afc:	200005c4 	.word	0x200005c4
 8005b00:	2000059a 	.word	0x2000059a

08005b04 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60ba      	str	r2, [r7, #8]
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
 8005b12:	460b      	mov	r3, r1
 8005b14:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8005b16:	f002 fbda 	bl	80082ce <RFW_DeInit>
    switch( modem )
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f000 80d7 	beq.w	8005cd0 <RadioSetTxConfig+0x1cc>
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f300 80e6 	bgt.w	8005cf4 <RadioSetTxConfig+0x1f0>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <RadioSetTxConfig+0x2e>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d061      	beq.n	8005bf4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005b30:	e0e0      	b.n	8005cf4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005b32:	4b7c      	ldr	r3, [pc, #496]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005b3a:	4a7a      	ldr	r2, [pc, #488]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005b40:	4b78      	ldr	r3, [pc, #480]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b42:	220b      	movs	r2, #11
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f002 faf1 	bl	8008130 <SUBGRF_GetFskBandwidthRegValue>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	4b74      	ldr	r3, [pc, #464]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005b58:	4a72      	ldr	r2, [pc, #456]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005b5e:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005b64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	4b6e      	ldr	r3, [pc, #440]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b6c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005b6e:	4b6d      	ldr	r3, [pc, #436]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b70:	2204      	movs	r2, #4
 8005b72:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005b74:	4b6b      	ldr	r3, [pc, #428]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b76:	2218      	movs	r2, #24
 8005b78:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005b7a:	4b6a      	ldr	r3, [pc, #424]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005b80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b84:	f083 0301 	eor.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	4b65      	ldr	r3, [pc, #404]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b8e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8005b90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005b98:	4b62      	ldr	r3, [pc, #392]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005b9a:	22f2      	movs	r2, #242	; 0xf2
 8005b9c:	75da      	strb	r2, [r3, #23]
 8005b9e:	e002      	b.n	8005ba6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005ba0:	4b60      	ldr	r3, [pc, #384]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005ba6:	4b5f      	ldr	r3, [pc, #380]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005bac:	f000 fb25 	bl	80061fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005bb0:	4b5c      	ldr	r3, [pc, #368]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fcdb 	bl	800557c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005bc6:	4858      	ldr	r0, [pc, #352]	; (8005d28 <RadioSetTxConfig+0x224>)
 8005bc8:	f001 fee4 	bl	8007994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005bcc:	4857      	ldr	r0, [pc, #348]	; (8005d2c <RadioSetTxConfig+0x228>)
 8005bce:	f001 ffad 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005bd2:	4a57      	ldr	r2, [pc, #348]	; (8005d30 <RadioSetTxConfig+0x22c>)
 8005bd4:	f107 0310 	add.w	r3, r7, #16
 8005bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8005be0:	f107 0310 	add.w	r3, r7, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fae0 	bl	80071aa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bee:	f001 fb2b 	bl	8007248 <SUBGRF_SetWhiteningSeed>
            break;
 8005bf2:	e080      	b.n	8005cf6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005bf4:	4b4b      	ldr	r3, [pc, #300]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005c06:	4a4b      	ldr	r2, [pc, #300]	; (8005d34 <RadioSetTxConfig+0x230>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	4b45      	ldr	r3, [pc, #276]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005c14:	4a43      	ldr	r2, [pc, #268]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c1a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <RadioSetTxConfig+0x12c>
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2b0b      	cmp	r3, #11
 8005c28:	d008      	beq.n	8005c3c <RadioSetTxConfig+0x138>
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d005      	beq.n	8005c3c <RadioSetTxConfig+0x138>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d107      	bne.n	8005c46 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d104      	bne.n	8005c46 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005c3c:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005c44:	e003      	b.n	8005c4e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005c4e:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005c54:	4b33      	ldr	r3, [pc, #204]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d004      	beq.n	8005c68 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005c5e:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	d10a      	bne.n	8005c7e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c6a:	2b0b      	cmp	r3, #11
 8005c6c:	d803      	bhi.n	8005c76 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c70:	220c      	movs	r2, #12
 8005c72:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005c74:	e006      	b.n	8005c84 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005c76:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c7a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005c7c:	e002      	b.n	8005c84 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005c7e:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c82:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005c84:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005c88:	4b26      	ldr	r3, [pc, #152]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c8a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <RadioSetTxConfig+0x234>)
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c92:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005c94:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005c98:	4b22      	ldr	r3, [pc, #136]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005c9a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005c9e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005ca2:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005ca8:	f000 faa7 	bl	80061fa <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fc5d 	bl	800557c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005cc2:	4819      	ldr	r0, [pc, #100]	; (8005d28 <RadioSetTxConfig+0x224>)
 8005cc4:	f001 fe66 	bl	8007994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cc8:	4818      	ldr	r0, [pc, #96]	; (8005d2c <RadioSetTxConfig+0x228>)
 8005cca:	f001 ff2f 	bl	8007b2c <SUBGRF_SetPacketParams>
            break;
 8005cce:	e012      	b.n	8005cf6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	f7ff fc53 	bl	800557c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005cde:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005ce6:	2216      	movs	r2, #22
 8005ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005cec:	480e      	ldr	r0, [pc, #56]	; (8005d28 <RadioSetTxConfig+0x224>)
 8005cee:	f001 fe51 	bl	8007994 <SUBGRF_SetModulationParams>
            break;
 8005cf2:	e000      	b.n	8005cf6 <RadioSetTxConfig+0x1f2>
            break;
 8005cf4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 f92a 	bl	8007f54 <SUBGRF_SetRfTxPower>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005d06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005d0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 faf0 	bl	80082f6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005d16:	4a03      	ldr	r2, [pc, #12]	; (8005d24 <RadioSetTxConfig+0x220>)
 8005d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1a:	6053      	str	r3, [r2, #4]
}
 8005d1c:	bf00      	nop
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	2000058c 	.word	0x2000058c
 8005d28:	200005c4 	.word	0x200005c4
 8005d2c:	2000059a 	.word	0x2000059a
 8005d30:	0800e0d8 	.word	0x0800e0d8
 8005d34:	0800e508 	.word	0x0800e508
 8005d38:	20000009 	.word	0x20000009

08005d3c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
    return true;
 8005d44:	2301      	movs	r3, #1
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	2b0a      	cmp	r3, #10
 8005d62:	d83e      	bhi.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <RadioGetLoRaBandwidthInHz+0x1c>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005db9 	.word	0x08005db9
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005dd7 	.word	0x08005dd7
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005de3 	.word	0x08005de3
 8005d8c:	08005da1 	.word	0x08005da1
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005dc1 	.word	0x08005dc1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8005d98:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005d9c:	60fb      	str	r3, [r7, #12]
        break;
 8005d9e:	e020      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005da0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8005da4:	60fb      	str	r3, [r7, #12]
        break;
 8005da6:	e01c      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8005da8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005dac:	60fb      	str	r3, [r7, #12]
        break;
 8005dae:	e018      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005db0:	f245 1361 	movw	r3, #20833	; 0x5161
 8005db4:	60fb      	str	r3, [r7, #12]
        break;
 8005db6:	e014      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8005db8:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005dbc:	60fb      	str	r3, [r7, #12]
        break;
 8005dbe:	e010      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005dc0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8005dc4:	60fb      	str	r3, [r7, #12]
        break;
 8005dc6:	e00c      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005dc8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005dcc:	60fb      	str	r3, [r7, #12]
        break;
 8005dce:	e008      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8005dd2:	60fb      	str	r3, [r7, #12]
        break;
 8005dd4:	e005      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8005dd8:	60fb      	str	r3, [r7, #12]
        break;
 8005dda:	e002      	b.n	8005de2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8005dde:	60fb      	str	r3, [r7, #12]
        break;
 8005de0:	bf00      	nop
    }

    return bandwidthInHz;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	0001e848 	.word	0x0001e848
 8005df4:	0003d090 	.word	0x0003d090
 8005df8:	0007a120 	.word	0x0007a120

08005dfc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	70fb      	strb	r3, [r7, #3]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	803b      	strh	r3, [r7, #0]
 8005e12:	4613      	mov	r3, r2
 8005e14:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8005e16:	883b      	ldrh	r3, [r7, #0]
 8005e18:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005e1a:	78ba      	ldrb	r2, [r7, #2]
 8005e1c:	f082 0201 	eor.w	r2, r2, #1
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	d001      	beq.n	8005e2a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8005e26:	2208      	movs	r2, #8
 8005e28:	e000      	b.n	8005e2c <RadioGetGfskTimeOnAirNumerator+0x30>
 8005e2a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005e2c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005e2e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005e32:	7c3b      	ldrb	r3, [r7, #16]
 8005e34:	7d39      	ldrb	r1, [r7, #20]
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d001      	beq.n	8005e3e <RadioGetGfskTimeOnAirNumerator+0x42>
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	e000      	b.n	8005e40 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005e3e:	2100      	movs	r1, #0
 8005e40:	440b      	add	r3, r1
 8005e42:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005e44:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b08b      	sub	sp, #44	; 0x2c
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	460b      	mov	r3, r1
 8005e60:	71fb      	strb	r3, [r7, #7]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d002      	beq.n	8005e7e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d104      	bne.n	8005e88 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	2b0b      	cmp	r3, #11
 8005e82:	d801      	bhi.n	8005e88 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005e84:	230c      	movs	r3, #12
 8005e86:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b0b      	cmp	r3, #11
 8005e92:	d008      	beq.n	8005ea6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d005      	beq.n	8005ea6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d105      	bne.n	8005eac <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d102      	bne.n	8005eac <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005eac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005eb0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005eb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	d001      	beq.n	8005ebe <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005eba:	2210      	movs	r2, #16
 8005ebc:	e000      	b.n	8005ec0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005ebe:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005ec0:	4413      	add	r3, r2
 8005ec2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005ec8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005eca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	d001      	beq.n	8005ed6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	e000      	b.n	8005ed8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005ed6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005ed8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005eda:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d803      	bhi.n	8005eea <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	e00e      	b.n	8005f08 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3308      	adds	r3, #8
 8005eee:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3b02      	subs	r3, #2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	623b      	str	r3, [r7, #32]
 8005f00:	e002      	b.n	8005f08 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da01      	bge.n	8005f12 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	4413      	add	r3, r2
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	fb02 f203 	mul.w	r2, r2, r3
 8005f26:	88bb      	ldrh	r3, [r7, #4]
 8005f28:	4413      	add	r3, r2
    int32_t intermediate =
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d802      	bhi.n	8005f3a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	3302      	adds	r3, #2
 8005f38:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3b02      	subs	r3, #2
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	372c      	adds	r7, #44	; 0x2c
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
	...

08005f54 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af04      	add	r7, sp, #16
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	4613      	mov	r3, r2
 8005f66:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <RadioTimeOnAir+0x28>
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d017      	beq.n	8005faa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005f7a:	e035      	b.n	8005fe8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005f7c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005f80:	8c3a      	ldrh	r2, [r7, #32]
 8005f82:	7bb9      	ldrb	r1, [r7, #14]
 8005f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4603      	mov	r3, r0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff32 	bl	8005dfc <RadioGetGfskTimeOnAirNumerator>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	613b      	str	r3, [r7, #16]
        break;
 8005fa8:	e01e      	b.n	8005fe8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005faa:	8c39      	ldrh	r1, [r7, #32]
 8005fac:	7bba      	ldrb	r2, [r7, #14]
 8005fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fb2:	9302      	str	r3, [sp, #8]
 8005fb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	68b8      	ldr	r0, [r7, #8]
 8005fc6:	f7ff ff43 	bl	8005e50 <RadioGetLoRaTimeOnAirNumerator>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <RadioTimeOnAir+0xac>)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4413      	add	r3, r2
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff feb6 	bl	8005d50 <RadioGetLoRaBandwidthInHz>
 8005fe4:	6138      	str	r0, [r7, #16]
        break;
 8005fe6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	0800e508 	.word	0x0800e508

08006004 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006010:	2300      	movs	r3, #0
 8006012:	2200      	movs	r2, #0
 8006014:	f240 2101 	movw	r1, #513	; 0x201
 8006018:	f240 2001 	movw	r0, #513	; 0x201
 800601c:	f001 fb90 	bl	8007740 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8006020:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <RadioSend+0x1c4>)
 8006022:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f001 ff6b 	bl	8007f04 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800602e:	4b66      	ldr	r3, [pc, #408]	; (80061c8 <RadioSend+0x1c4>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d112      	bne.n	800605c <RadioSend+0x58>
 8006036:	4b64      	ldr	r3, [pc, #400]	; (80061c8 <RadioSend+0x1c4>)
 8006038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603c:	2b06      	cmp	r3, #6
 800603e:	d10d      	bne.n	800605c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006040:	f640 0089 	movw	r0, #2185	; 0x889
 8006044:	f001 fece 	bl	8007de4 <SUBGRF_ReadRegister>
 8006048:	4603      	mov	r3, r0
 800604a:	f023 0304 	bic.w	r3, r3, #4
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	f640 0089 	movw	r0, #2185	; 0x889
 8006056:	f001 feb1 	bl	8007dbc <SUBGRF_WriteRegister>
 800605a:	e00c      	b.n	8006076 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800605c:	f640 0089 	movw	r0, #2185	; 0x889
 8006060:	f001 fec0 	bl	8007de4 <SUBGRF_ReadRegister>
 8006064:	4603      	mov	r3, r0
 8006066:	f043 0304 	orr.w	r3, r3, #4
 800606a:	b2db      	uxtb	r3, r3
 800606c:	4619      	mov	r1, r3
 800606e:	f640 0089 	movw	r0, #2185	; 0x889
 8006072:	f001 fea3 	bl	8007dbc <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8006076:	4b54      	ldr	r3, [pc, #336]	; (80061c8 <RadioSend+0x1c4>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b03      	cmp	r3, #3
 800607c:	f200 809e 	bhi.w	80061bc <RadioSend+0x1b8>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <RadioSend+0x84>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060b3 	.word	0x080060b3
 800608c:	08006099 	.word	0x08006099
 8006090:	08006105 	.word	0x08006105
 8006094:	08006125 	.word	0x08006125
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006098:	4a4b      	ldr	r2, [pc, #300]	; (80061c8 <RadioSend+0x1c4>)
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800609e:	484b      	ldr	r0, [pc, #300]	; (80061cc <RadioSend+0x1c8>)
 80060a0:	f001 fd44 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	2200      	movs	r2, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f86a 	bl	8007184 <SUBGRF_SendPayload>
            break;
 80060b0:	e087      	b.n	80061c2 <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80060b2:	f002 f912 	bl	80082da <RFW_Is_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d116      	bne.n	80060ea <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80060bc:	f107 020d 	add.w	r2, r7, #13
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f002 f920 	bl	800830a <RFW_TransmitInit>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d177      	bne.n	80061c0 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80060d0:	7b7a      	ldrb	r2, [r7, #13]
 80060d2:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <RadioSend+0x1c4>)
 80060d4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060d6:	483d      	ldr	r0, [pc, #244]	; (80061cc <RadioSend+0x1c8>)
 80060d8:	f001 fd28 	bl	8007b2c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80060dc:	7b7b      	ldrb	r3, [r7, #13]
 80060de:	2200      	movs	r2, #0
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 f84e 	bl	8007184 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80060e8:	e06b      	b.n	80061c2 <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80060ea:	4a37      	ldr	r2, [pc, #220]	; (80061c8 <RadioSend+0x1c4>)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060f0:	4836      	ldr	r0, [pc, #216]	; (80061cc <RadioSend+0x1c8>)
 80060f2:	f001 fd1b 	bl	8007b2c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	2200      	movs	r2, #0
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f841 	bl	8007184 <SUBGRF_SendPayload>
            break;
 8006102:	e05e      	b.n	80061c2 <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006104:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <RadioSend+0x1c4>)
 8006106:	2202      	movs	r2, #2
 8006108:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800610a:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <RadioSend+0x1c4>)
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006110:	482e      	ldr	r0, [pc, #184]	; (80061cc <RadioSend+0x1c8>)
 8006112:	f001 fd0b 	bl	8007b2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	2200      	movs	r2, #0
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 f831 	bl	8007184 <SUBGRF_SendPayload>
            break;
 8006122:	e04e      	b.n	80061c2 <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	461a      	mov	r2, r3
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4829      	ldr	r0, [pc, #164]	; (80061d0 <RadioSend+0x1cc>)
 800612c:	f000 fbb1 	bl	8006892 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <RadioSend+0x1c4>)
 8006132:	2202      	movs	r2, #2
 8006134:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	3301      	adds	r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <RadioSend+0x1c4>)
 800613e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006140:	4822      	ldr	r0, [pc, #136]	; (80061cc <RadioSend+0x1c8>)
 8006142:	f001 fcf3 	bl	8007b2c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8006146:	2100      	movs	r1, #0
 8006148:	20f1      	movs	r0, #241	; 0xf1
 800614a:	f000 f91b 	bl	8006384 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800614e:	2100      	movs	r1, #0
 8006150:	20f0      	movs	r0, #240	; 0xf0
 8006152:	f000 f917 	bl	8006384 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <RadioSend+0x1c4>)
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	d108      	bne.n	8006170 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800615e:	2170      	movs	r1, #112	; 0x70
 8006160:	20f3      	movs	r0, #243	; 0xf3
 8006162:	f000 f90f 	bl	8006384 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8006166:	211d      	movs	r1, #29
 8006168:	20f2      	movs	r0, #242	; 0xf2
 800616a:	f000 f90b 	bl	8006384 <RadioWrite>
 800616e:	e007      	b.n	8006180 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8006170:	21e1      	movs	r1, #225	; 0xe1
 8006172:	20f3      	movs	r0, #243	; 0xf3
 8006174:	f000 f906 	bl	8006384 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8006178:	2104      	movs	r1, #4
 800617a:	20f2      	movs	r0, #242	; 0xf2
 800617c:	f000 f902 	bl	8006384 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	b29b      	uxth	r3, r3
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	b29b      	uxth	r3, r3
 8006188:	3302      	adds	r3, #2
 800618a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800618c:	89fb      	ldrh	r3, [r7, #14]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	b29b      	uxth	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	20f4      	movs	r0, #244	; 0xf4
 8006198:	f000 f8f4 	bl	8006384 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800619c:	89fb      	ldrh	r3, [r7, #14]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	20f5      	movs	r0, #245	; 0xf5
 80061a4:	f000 f8ee 	bl	8006384 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3301      	adds	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80061b2:	4619      	mov	r1, r3
 80061b4:	4806      	ldr	r0, [pc, #24]	; (80061d0 <RadioSend+0x1cc>)
 80061b6:	f000 ffe5 	bl	8007184 <SUBGRF_SendPayload>
            break;
 80061ba:	e002      	b.n	80061c2 <RadioSend+0x1be>
        }
        default:
            break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <RadioSend+0x1be>
                return;
 80061c0:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	2000058c 	.word	0x2000058c
 80061cc:	2000059a 	.word	0x2000059a
 80061d0:	20000348 	.word	0x20000348

080061d4 <RadioSleep>:

static void RadioSleep( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80061da:	2300      	movs	r3, #0
 80061dc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80061de:	793b      	ldrb	r3, [r7, #4]
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80061e6:	7938      	ldrb	r0, [r7, #4]
 80061e8:	f001 f8a8 	bl	800733c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80061ec:	2002      	movs	r0, #2
 80061ee:	f7fb ffb5 	bl	800215c <HAL_Delay>
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <RadioStandby>:

static void RadioStandby( void )
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80061fe:	2000      	movs	r0, #0
 8006200:	f001 f8ce 	bl	80073a0 <SUBGRF_SetStandby>
}
 8006204:	bf00      	nop
 8006206:	bd80      	pop	{r7, pc}

08006208 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8006210:	f002 f863 	bl	80082da <RFW_Is_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d102      	bne.n	8006220 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800621a:	f002 f886 	bl	800832a <RFW_ReceiveInit>
 800621e:	e007      	b.n	8006230 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006220:	2300      	movs	r3, #0
 8006222:	2200      	movs	r2, #0
 8006224:	f240 2162 	movw	r1, #610	; 0x262
 8006228:	f240 2062 	movw	r0, #610	; 0x262
 800622c:	f001 fa88 	bl	8007740 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <RadioRx+0x5c>)
 8006232:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fe63 	bl	8007f04 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <RadioRx+0x5c>)
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006246:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800624a:	f001 f8e5 	bl	8007418 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800624e:	e005      	b.n	800625c <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <RadioRx+0x5c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	4618      	mov	r0, r3
 8006258:	f001 f8de 	bl	8007418 <SUBGRF_SetRx>
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000058c 	.word	0x2000058c

08006268 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006270:	f002 f833 	bl	80082da <RFW_Is_Init>
 8006274:	4603      	mov	r3, r0
 8006276:	2b01      	cmp	r3, #1
 8006278:	d102      	bne.n	8006280 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800627a:	f002 f856 	bl	800832a <RFW_ReceiveInit>
 800627e:	e007      	b.n	8006290 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	f240 2162 	movw	r1, #610	; 0x262
 8006288:	f240 2062 	movw	r0, #610	; 0x262
 800628c:	f001 fa58 	bl	8007740 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <RadioRxBoosted+0x5c>)
 8006292:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f001 fe33 	bl	8007f04 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <RadioRxBoosted+0x5c>)
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80062a6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80062aa:	f001 f8d5 	bl	8007458 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80062ae:	e005      	b.n	80062bc <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <RadioRxBoosted+0x5c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	019b      	lsls	r3, r3, #6
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f8ce 	bl	8007458 <SUBGRF_SetRxBoosted>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2000058c 	.word	0x2000058c

080062c8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <RadioSetRxDutyCycle+0x28>)
 80062d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fe12 	bl	8007f04 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f8dc 	bl	80074a0 <SUBGRF_SetRxDutyCycle>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000058c 	.word	0x2000058c

080062f4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <RadioStartCad+0x2c>)
 80062fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fdff 	bl	8007f04 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006306:	2300      	movs	r3, #0
 8006308:	2200      	movs	r2, #0
 800630a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800630e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8006312:	f001 fa15 	bl	8007740 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006316:	f001 f8ef 	bl	80074f8 <SUBGRF_SetCad>
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	2000058c 	.word	0x2000058c

08006324 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
 8006330:	4613      	mov	r3, r2
 8006332:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006334:	883b      	ldrh	r3, [r7, #0]
 8006336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fa59 	bl	80077f8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fe02 	bl	8007f54 <SUBGRF_SetRfTxPower>
 8006350:	4603      	mov	r3, r0
 8006352:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006354:	7afb      	ldrb	r3, [r7, #11]
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fdd3 	bl	8007f04 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800635e:	f001 f8d9 	bl	8007514 <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006374:	f001 fc8f 	bl	8007c96 <SUBGRF_GetRssiInst>
 8006378:	4603      	mov	r3, r0
 800637a:	b21b      	sxth	r3, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	460a      	mov	r2, r1
 800638e:	80fb      	strh	r3, [r7, #6]
 8006390:	4613      	mov	r3, r2
 8006392:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006394:	797a      	ldrb	r2, [r7, #5]
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f001 fd0e 	bl	8007dbc <SUBGRF_WriteRegister>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fd15 	bl	8007de4 <SUBGRF_ReadRegister>
 80063ba:	4603      	mov	r3, r0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	6039      	str	r1, [r7, #0]
 80063ce:	80fb      	strh	r3, [r7, #6]
 80063d0:	4613      	mov	r3, r2
 80063d2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80063d4:	797b      	ldrb	r3, [r7, #5]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fd15 	bl	8007e0c <SUBGRF_WriteRegisters>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	4603      	mov	r3, r0
 80063f2:	6039      	str	r1, [r7, #0]
 80063f4:	80fb      	strh	r3, [r7, #6]
 80063f6:	4613      	mov	r3, r2
 80063f8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80063fa:	797b      	ldrb	r3, [r7, #5]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fd16 	bl	8007e34 <SUBGRF_ReadRegisters>
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	460a      	mov	r2, r1
 800641a:	71fb      	strb	r3, [r7, #7]
 800641c:	4613      	mov	r3, r2
 800641e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10a      	bne.n	800643c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006426:	4a0e      	ldr	r2, [pc, #56]	; (8006460 <RadioSetMaxPayloadLength+0x50>)
 8006428:	79bb      	ldrb	r3, [r7, #6]
 800642a:	7013      	strb	r3, [r2, #0]
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <RadioSetMaxPayloadLength+0x50>)
 800642e:	781a      	ldrb	r2, [r3, #0]
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <RadioSetMaxPayloadLength+0x54>)
 8006432:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006434:	480c      	ldr	r0, [pc, #48]	; (8006468 <RadioSetMaxPayloadLength+0x58>)
 8006436:	f001 fb79 	bl	8007b2c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800643a:	e00d      	b.n	8006458 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <RadioSetMaxPayloadLength+0x54>)
 800643e:	7d5b      	ldrb	r3, [r3, #21]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d109      	bne.n	8006458 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006444:	4a06      	ldr	r2, [pc, #24]	; (8006460 <RadioSetMaxPayloadLength+0x50>)
 8006446:	79bb      	ldrb	r3, [r7, #6]
 8006448:	7013      	strb	r3, [r2, #0]
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <RadioSetMaxPayloadLength+0x50>)
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <RadioSetMaxPayloadLength+0x54>)
 8006450:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006452:	4805      	ldr	r0, [pc, #20]	; (8006468 <RadioSetMaxPayloadLength+0x58>)
 8006454:	f001 fb6a 	bl	8007b2c <SUBGRF_SetPacketParams>
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000009 	.word	0x20000009
 8006464:	2000058c 	.word	0x2000058c
 8006468:	2000059a 	.word	0x2000059a

0800646c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <RadioSetPublicNetwork+0x58>)
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	7313      	strb	r3, [r2, #12]
 800647c:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <RadioSetPublicNetwork+0x58>)
 800647e:	7b1a      	ldrb	r2, [r3, #12]
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <RadioSetPublicNetwork+0x58>)
 8006482:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006484:	2001      	movs	r0, #1
 8006486:	f7ff f879 	bl	800557c <RadioSetModem>
    if( enable == true )
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006490:	2134      	movs	r1, #52	; 0x34
 8006492:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006496:	f001 fc91 	bl	8007dbc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800649a:	2144      	movs	r1, #68	; 0x44
 800649c:	f240 7041 	movw	r0, #1857	; 0x741
 80064a0:	f001 fc8c 	bl	8007dbc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80064a4:	e009      	b.n	80064ba <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80064a6:	2114      	movs	r1, #20
 80064a8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80064ac:	f001 fc86 	bl	8007dbc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80064b0:	2124      	movs	r1, #36	; 0x24
 80064b2:	f240 7041 	movw	r0, #1857	; 0x741
 80064b6:	f001 fc81 	bl	8007dbc <SUBGRF_WriteRegister>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	2000058c 	.word	0x2000058c

080064c8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80064cc:	f001 fd76 	bl	8007fbc <SUBGRF_GetRadioWakeUpTime>
 80064d0:	4603      	mov	r3, r0
 80064d2:	3303      	adds	r3, #3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80064e2:	4a05      	ldr	r2, [pc, #20]	; (80064f8 <RadioOnDioIrq+0x20>)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80064ea:	f000 f807 	bl	80064fc <RadioIrqProcess>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2000058c 	.word	0x2000058c

080064fc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800650a:	4bab      	ldr	r3, [pc, #684]	; (80067b8 <RadioIrqProcess+0x2bc>)
 800650c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006514:	f000 8104 	beq.w	8006720 <RadioIrqProcess+0x224>
 8006518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651c:	f300 816e 	bgt.w	80067fc <RadioIrqProcess+0x300>
 8006520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006524:	f000 80ea 	beq.w	80066fc <RadioIrqProcess+0x200>
 8006528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652c:	f300 8166 	bgt.w	80067fc <RadioIrqProcess+0x300>
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	f000 80cf 	beq.w	80066d4 <RadioIrqProcess+0x1d8>
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	f300 8160 	bgt.w	80067fc <RadioIrqProcess+0x300>
 800653c:	2b20      	cmp	r3, #32
 800653e:	dc49      	bgt.n	80065d4 <RadioIrqProcess+0xd8>
 8006540:	2b00      	cmp	r3, #0
 8006542:	f340 815b 	ble.w	80067fc <RadioIrqProcess+0x300>
 8006546:	3b01      	subs	r3, #1
 8006548:	2b1f      	cmp	r3, #31
 800654a:	f200 8157 	bhi.w	80067fc <RadioIrqProcess+0x300>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <RadioIrqProcess+0x58>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	080065dd 	.word	0x080065dd
 8006558:	08006611 	.word	0x08006611
 800655c:	080067fd 	.word	0x080067fd
 8006560:	080067fd 	.word	0x080067fd
 8006564:	080067fd 	.word	0x080067fd
 8006568:	080067fd 	.word	0x080067fd
 800656c:	080067fd 	.word	0x080067fd
 8006570:	08006779 	.word	0x08006779
 8006574:	080067fd 	.word	0x080067fd
 8006578:	080067fd 	.word	0x080067fd
 800657c:	080067fd 	.word	0x080067fd
 8006580:	080067fd 	.word	0x080067fd
 8006584:	080067fd 	.word	0x080067fd
 8006588:	080067fd 	.word	0x080067fd
 800658c:	080067fd 	.word	0x080067fd
 8006590:	080067fd 	.word	0x080067fd
 8006594:	080067fd 	.word	0x080067fd
 8006598:	080067fd 	.word	0x080067fd
 800659c:	080067fd 	.word	0x080067fd
 80065a0:	080067fd 	.word	0x080067fd
 80065a4:	080067fd 	.word	0x080067fd
 80065a8:	080067fd 	.word	0x080067fd
 80065ac:	080067fd 	.word	0x080067fd
 80065b0:	080067fd 	.word	0x080067fd
 80065b4:	080067fd 	.word	0x080067fd
 80065b8:	080067fd 	.word	0x080067fd
 80065bc:	080067fd 	.word	0x080067fd
 80065c0:	080067fd 	.word	0x080067fd
 80065c4:	080067fd 	.word	0x080067fd
 80065c8:	080067fd 	.word	0x080067fd
 80065cc:	080067fd 	.word	0x080067fd
 80065d0:	08006789 	.word	0x08006789
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	f000 80f9 	beq.w	80067cc <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80065da:	e10f      	b.n	80067fc <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 80065dc:	2000      	movs	r0, #0
 80065de:	f000 fedf 	bl	80073a0 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80065e2:	f001 fe81 	bl	80082e8 <RFW_Is_LongPacketModeEnabled>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 80065ec:	f001 fea5 	bl	800833a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80065f0:	4b72      	ldr	r3, [pc, #456]	; (80067bc <RadioIrqProcess+0x2c0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8103 	beq.w	8006800 <RadioIrqProcess+0x304>
 80065fa:	4b70      	ldr	r3, [pc, #448]	; (80067bc <RadioIrqProcess+0x2c0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80fd 	beq.w	8006800 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 8006606:	4b6d      	ldr	r3, [pc, #436]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4798      	blx	r3
        break;
 800660e:	e0f7      	b.n	8006800 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8006610:	4b69      	ldr	r3, [pc, #420]	; (80067b8 <RadioIrqProcess+0x2bc>)
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	f083 0301 	eor.w	r3, r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 800661e:	2000      	movs	r0, #0
 8006620:	f000 febe 	bl	80073a0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8006624:	2100      	movs	r1, #0
 8006626:	f640 1002 	movw	r0, #2306	; 0x902
 800662a:	f001 fbc7 	bl	8007dbc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800662e:	f640 1044 	movw	r0, #2372	; 0x944
 8006632:	f001 fbd7 	bl	8007de4 <SUBGRF_ReadRegister>
 8006636:	4603      	mov	r3, r0
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	b2db      	uxtb	r3, r3
 800663e:	4619      	mov	r1, r3
 8006640:	f640 1044 	movw	r0, #2372	; 0x944
 8006644:	f001 fbba 	bl	8007dbc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8006648:	1dfb      	adds	r3, r7, #7
 800664a:	22ff      	movs	r2, #255	; 0xff
 800664c:	4619      	mov	r1, r3
 800664e:	485c      	ldr	r0, [pc, #368]	; (80067c0 <RadioIrqProcess+0x2c4>)
 8006650:	f000 fd76 	bl	8007140 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8006654:	485b      	ldr	r0, [pc, #364]	; (80067c4 <RadioIrqProcess+0x2c8>)
 8006656:	f001 fb5f 	bl	8007d18 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800665a:	4b58      	ldr	r3, [pc, #352]	; (80067bc <RadioIrqProcess+0x2c0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d036      	beq.n	80066d0 <RadioIrqProcess+0x1d4>
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d031      	beq.n	80066d0 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 800666c:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <RadioIrqProcess+0x2bc>)
 800666e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10e      	bne.n	8006694 <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8006676:	4b51      	ldr	r3, [pc, #324]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689c      	ldr	r4, [r3, #8]
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	b299      	uxth	r1, r3
 8006680:	4b4d      	ldr	r3, [pc, #308]	; (80067b8 <RadioIrqProcess+0x2bc>)
 8006682:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006686:	b21a      	sxth	r2, r3
 8006688:	4b4b      	ldr	r3, [pc, #300]	; (80067b8 <RadioIrqProcess+0x2bc>)
 800668a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800668e:	484c      	ldr	r0, [pc, #304]	; (80067c0 <RadioIrqProcess+0x2c4>)
 8006690:	47a0      	blx	r4
                break;
 8006692:	e01e      	b.n	80066d2 <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006694:	4b48      	ldr	r3, [pc, #288]	; (80067b8 <RadioIrqProcess+0x2bc>)
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	463a      	mov	r2, r7
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fd6f 	bl	8008180 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80066a2:	4b46      	ldr	r3, [pc, #280]	; (80067bc <RadioIrqProcess+0x2c0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689c      	ldr	r4, [r3, #8]
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	b299      	uxth	r1, r3
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <RadioIrqProcess+0x2bc>)
 80066ae:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80066b2:	b218      	sxth	r0, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80066ba:	4a43      	ldr	r2, [pc, #268]	; (80067c8 <RadioIrqProcess+0x2cc>)
 80066bc:	fb82 c203 	smull	ip, r2, r2, r3
 80066c0:	1192      	asrs	r2, r2, #6
 80066c2:	17db      	asrs	r3, r3, #31
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	4602      	mov	r2, r0
 80066ca:	483d      	ldr	r0, [pc, #244]	; (80067c0 <RadioIrqProcess+0x2c4>)
 80066cc:	47a0      	blx	r4
                break;
 80066ce:	e000      	b.n	80066d2 <RadioIrqProcess+0x1d6>
        }
 80066d0:	bf00      	nop
        break;
 80066d2:	e0a2      	b.n	800681a <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 80066d4:	2000      	movs	r0, #0
 80066d6:	f000 fe63 	bl	80073a0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80066da:	4b38      	ldr	r3, [pc, #224]	; (80067bc <RadioIrqProcess+0x2c0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8090 	beq.w	8006804 <RadioIrqProcess+0x308>
 80066e4:	4b35      	ldr	r3, [pc, #212]	; (80067bc <RadioIrqProcess+0x2c0>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 808a 	beq.w	8006804 <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <RadioIrqProcess+0x2c0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	2000      	movs	r0, #0
 80066f8:	4798      	blx	r3
        break;
 80066fa:	e083      	b.n	8006804 <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 80066fc:	2000      	movs	r0, #0
 80066fe:	f000 fe4f 	bl	80073a0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006702:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d07e      	beq.n	8006808 <RadioIrqProcess+0x30c>
 800670a:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <RadioIrqProcess+0x2c0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d079      	beq.n	8006808 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8006714:	4b29      	ldr	r3, [pc, #164]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2001      	movs	r0, #1
 800671c:	4798      	blx	r3
        break;
 800671e:	e073      	b.n	8006808 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8006720:	f000 fcf4 	bl	800710c <SUBGRF_GetOperatingMode>
 8006724:	4603      	mov	r3, r0
 8006726:	2b04      	cmp	r3, #4
 8006728:	d110      	bne.n	800674c <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 800672a:	2000      	movs	r0, #0
 800672c:	f000 fe38 	bl	80073a0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d069      	beq.n	800680c <RadioIrqProcess+0x310>
 8006738:	4b20      	ldr	r3, [pc, #128]	; (80067bc <RadioIrqProcess+0x2c0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d064      	beq.n	800680c <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4798      	blx	r3
        break;
 800674a:	e05f      	b.n	800680c <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800674c:	f000 fcde 	bl	800710c <SUBGRF_GetOperatingMode>
 8006750:	4603      	mov	r3, r0
 8006752:	2b05      	cmp	r3, #5
 8006754:	d15a      	bne.n	800680c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8006756:	2000      	movs	r0, #0
 8006758:	f000 fe22 	bl	80073a0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800675c:	4b17      	ldr	r3, [pc, #92]	; (80067bc <RadioIrqProcess+0x2c0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d053      	beq.n	800680c <RadioIrqProcess+0x310>
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04e      	beq.n	800680c <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <RadioIrqProcess+0x2c0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4798      	blx	r3
        break;
 8006776:	e049      	b.n	800680c <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8006778:	f001 fdaf 	bl	80082da <RFW_Is_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d146      	bne.n	8006810 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8006782:	f001 fde0 	bl	8008346 <RFW_ReceivePayload>
        break;
 8006786:	e043      	b.n	8006810 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <RadioIrqProcess+0x2bc>)
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	f083 0301 	eor.w	r3, r3, #1
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8006796:	2000      	movs	r0, #0
 8006798:	f000 fe02 	bl	80073a0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <RadioIrqProcess+0x2c0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d037      	beq.n	8006814 <RadioIrqProcess+0x318>
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <RadioIrqProcess+0x2c0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d032      	beq.n	8006814 <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <RadioIrqProcess+0x2c0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4798      	blx	r3
        break;
 80067b6:	e02d      	b.n	8006814 <RadioIrqProcess+0x318>
 80067b8:	2000058c 	.word	0x2000058c
 80067bc:	20000448 	.word	0x20000448
 80067c0:	20000348 	.word	0x20000348
 80067c4:	200005b0 	.word	0x200005b0
 80067c8:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <RadioIrqProcess+0x328>)
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	f083 0301 	eor.w	r3, r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 80067da:	2000      	movs	r0, #0
 80067dc:	f000 fde0 	bl	80073a0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80067e0:	4b11      	ldr	r3, [pc, #68]	; (8006828 <RadioIrqProcess+0x32c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <RadioIrqProcess+0x31c>
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <RadioIrqProcess+0x32c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d012      	beq.n	8006818 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 80067f2:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <RadioIrqProcess+0x32c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	4798      	blx	r3
        break;
 80067fa:	e00d      	b.n	8006818 <RadioIrqProcess+0x31c>
        break;
 80067fc:	bf00      	nop
 80067fe:	e00c      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006800:	bf00      	nop
 8006802:	e00a      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006804:	bf00      	nop
 8006806:	e008      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006808:	bf00      	nop
 800680a:	e006      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <RadioIrqProcess+0x31e>
        break;
 8006818:	bf00      	nop
  }
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bd90      	pop	{r4, r7, pc}
 8006822:	bf00      	nop
 8006824:	2000058c 	.word	0x2000058c
 8006828:	20000448 	.word	0x20000448

0800682c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <RadioTxPrbs+0x2c>)
 8006832:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006836:	2101      	movs	r1, #1
 8006838:	4618      	mov	r0, r3
 800683a:	f001 fb63 	bl	8007f04 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <RadioTxPrbs+0x30>)
 8006840:	212d      	movs	r1, #45	; 0x2d
 8006842:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006846:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8006848:	f000 fe6d 	bl	8007526 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800684c:	4804      	ldr	r0, [pc, #16]	; (8006860 <RadioTxPrbs+0x34>)
 800684e:	f000 fdc3 	bl	80073d8 <SUBGRF_SetTx>
}
 8006852:	bf00      	nop
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2000058c 	.word	0x2000058c
 800685c:	08006385 	.word	0x08006385
 8006860:	000fffff 	.word	0x000fffff

08006864 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800686e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fb6e 	bl	8007f54 <SUBGRF_SetRfTxPower>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fb3f 	bl	8007f04 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006886:	f000 fe45 	bl	8007514 <SUBGRF_SetTxContinuousWave>
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006892:	b480      	push	{r7}
 8006894:	b089      	sub	sp, #36	; 0x24
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e011      	b.n	80068d2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	4413      	add	r3, r2
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	440b      	add	r3, r1
 80068bc:	43d2      	mvns	r2, r2
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	dbe9      	blt.n	80068ae <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	e049      	b.n	8006974 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	425a      	negs	r2, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	f002 0207 	and.w	r2, r2, #7
 80068ec:	bf58      	it	pl
 80068ee:	4253      	negpl	r3, r2
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f1c3 0307 	rsb	r3, r3, #7
 80068f6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da00      	bge.n	8006900 <payload_integration+0x6e>
 80068fe:	3307      	adds	r3, #7
 8006900:	10db      	asrs	r3, r3, #3
 8006902:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	3301      	adds	r3, #1
 8006908:	425a      	negs	r2, r3
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	f002 0207 	and.w	r2, r2, #7
 8006912:	bf58      	it	pl
 8006914:	4253      	negpl	r3, r2
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f1c3 0307 	rsb	r3, r3, #7
 800691c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	3301      	adds	r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	da00      	bge.n	8006928 <payload_integration+0x96>
 8006926:	3307      	adds	r3, #7
 8006928:	10db      	asrs	r3, r3, #3
 800692a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800692c:	7dbb      	ldrb	r3, [r7, #22]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	fa42 f303 	asr.w	r3, r2, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8006944:	7ffa      	ldrb	r2, [r7, #31]
 8006946:	7cfb      	ldrb	r3, [r7, #19]
 8006948:	4053      	eors	r3, r2
 800694a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800694c:	7d3b      	ldrb	r3, [r7, #20]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b25a      	sxtb	r2, r3
 8006956:	7ff9      	ldrb	r1, [r7, #31]
 8006958:	7d7b      	ldrb	r3, [r7, #21]
 800695a:	fa01 f303 	lsl.w	r3, r1, r3
 800695e:	b25b      	sxtb	r3, r3
 8006960:	4313      	orrs	r3, r2
 8006962:	b259      	sxtb	r1, r3
 8006964:	7d3b      	ldrb	r3, [r7, #20]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	b2ca      	uxtb	r2, r1
 800696c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	3301      	adds	r3, #1
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	429a      	cmp	r2, r3
 800697c:	dbb0      	blt.n	80068e0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	01db      	lsls	r3, r3, #7
 8006982:	b25a      	sxtb	r2, r3
 8006984:	7ffb      	ldrb	r3, [r7, #31]
 8006986:	019b      	lsls	r3, r3, #6
 8006988:	b25b      	sxtb	r3, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	b25b      	sxtb	r3, r3
 800698e:	7ffa      	ldrb	r2, [r7, #31]
 8006990:	2a00      	cmp	r2, #0
 8006992:	d101      	bne.n	8006998 <payload_integration+0x106>
 8006994:	2220      	movs	r2, #32
 8006996:	e000      	b.n	800699a <payload_integration+0x108>
 8006998:	2200      	movs	r2, #0
 800699a:	4313      	orrs	r3, r2
 800699c:	b259      	sxtb	r1, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	b2ca      	uxtb	r2, r1
 80069a6:	701a      	strb	r2, [r3, #0]
}
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	; 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr
	...

080069b4 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08c      	sub	sp, #48	; 0x30
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	2300      	movs	r3, #0
 80069ce:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80069d0:	f001 fc7d 	bl	80082ce <RFW_DeInit>

    if( rxContinuous != 0 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	4ba9      	ldr	r3, [pc, #676]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 80069ec:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <RadioSetRxGenericConfig+0x48>
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	f000 80e8 	beq.w	8006bca <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80069fa:	e1a0      	b.n	8006d3e <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <RadioSetRxGenericConfig+0x58>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	e196      	b.n	8006d40 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7d5b      	ldrb	r3, [r3, #21]
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d902      	bls.n	8006a20 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1e:	e18f      	b.n	8006d40 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a24:	e00d      	b.n	8006a42 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	4413      	add	r3, r2
 8006a2e:	7819      	ldrb	r1, [r3, #0]
 8006a30:	f107 021c 	add.w	r2, r7, #28
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	4413      	add	r3, r2
 8006a38:	460a      	mov	r2, r1
 8006a3a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	3301      	adds	r3, #1
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7d5b      	ldrb	r3, [r3, #21]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	dbeb      	blt.n	8006a26 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fd6b 	bl	8007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006a62:	4b8b      	ldr	r3, [pc, #556]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	4a88      	ldr	r2, [pc, #544]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006a70:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	791a      	ldrb	r2, [r3, #4]
 8006a76:	4b86      	ldr	r3, [pc, #536]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fb55 	bl	8008130 <SUBGRF_GetFskBandwidthRegValue>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b81      	ldr	r3, [pc, #516]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006a90:	4b7f      	ldr	r3, [pc, #508]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	4b7b      	ldr	r3, [pc, #492]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006aa2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7d1a      	ldrb	r2, [r3, #20]
 8006aa8:	4b79      	ldr	r3, [pc, #484]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006aaa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	7d5b      	ldrb	r3, [r3, #21]
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	4b76      	ldr	r3, [pc, #472]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006ab6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006abe:	4b74      	ldr	r3, [pc, #464]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006ac0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	4b6f      	ldr	r3, [pc, #444]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006ad4:	759a      	strb	r2, [r3, #22]
 8006ad6:	e00b      	b.n	8006af0 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d103      	bne.n	8006aea <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006ae2:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	759a      	strb	r2, [r3, #22]
 8006ae8:	e002      	b.n	8006af0 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006aea:	4b69      	ldr	r3, [pc, #420]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d004      	beq.n	8006b04 <RadioSetRxGenericConfig+0x150>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d12d      	bne.n	8006b60 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b0a:	2bf1      	cmp	r3, #241	; 0xf1
 8006b0c:	d00c      	beq.n	8006b28 <RadioSetRxGenericConfig+0x174>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b14:	2bf2      	cmp	r3, #242	; 0xf2
 8006b16:	d007      	beq.n	8006b28 <RadioSetRxGenericConfig+0x174>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d002      	beq.n	8006b28 <RadioSetRxGenericConfig+0x174>
            return -1;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295
 8006b26:	e10b      	b.n	8006d40 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006b30:	4b58      	ldr	r3, [pc, #352]	; (8006c94 <RadioSetRxGenericConfig+0x2e0>)
 8006b32:	6819      	ldr	r1, [r3, #0]
 8006b34:	f107 0310 	add.w	r3, r7, #16
 8006b38:	4a57      	ldr	r2, [pc, #348]	; (8006c98 <RadioSetRxGenericConfig+0x2e4>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fbba 	bl	80082b4 <RFW_Init>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <RadioSetRxGenericConfig+0x198>
            return -1;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	e0f9      	b.n	8006d40 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006b4c:	4b50      	ldr	r3, [pc, #320]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006b52:	4b4f      	ldr	r3, [pc, #316]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006b58:	4b4d      	ldr	r3, [pc, #308]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	755a      	strb	r2, [r3, #21]
        {
 8006b5e:	e00e      	b.n	8006b7e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006b66:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b68:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006b70:	4b47      	ldr	r3, [pc, #284]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b72:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006b7a:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006b7c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006b7e:	f7ff fb3c 	bl	80061fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006b82:	2000      	movs	r0, #0
 8006b84:	f7fe fcfa 	bl	800557c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006b88:	4844      	ldr	r0, [pc, #272]	; (8006c9c <RadioSetRxGenericConfig+0x2e8>)
 8006b8a:	f000 ff03 	bl	8007994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b8e:	4844      	ldr	r0, [pc, #272]	; (8006ca0 <RadioSetRxGenericConfig+0x2ec>)
 8006b90:	f000 ffcc 	bl	8007b2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fb06 	bl	80071aa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	8c1b      	ldrh	r3, [r3, #32]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb50 	bl	8007248 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fb2b 	bl	8007208 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006bb8:	fb02 f203 	mul.w	r2, r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc4:	4a32      	ldr	r2, [pc, #200]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006bc6:	6093      	str	r3, [r2, #8]
        break;
 8006bc8:	e0b9      	b.n	8006d3e <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <RadioSetRxGenericConfig+0x224>
            return -1;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	e0b3      	b.n	8006d40 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d104      	bne.n	8006bec <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bea:	e002      	b.n	8006bf2 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006bec:	23ff      	movs	r3, #255	; 0xff
 8006bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fc99 	bl	8007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fca3 	bl	8007556 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006c10:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006c1e:	4b1c      	ldr	r3, [pc, #112]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006c2a:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c38:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d010      	beq.n	8006c68 <RadioSetRxGenericConfig+0x2b4>
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	dc2c      	bgt.n	8006ca4 <RadioSetRxGenericConfig+0x2f0>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <RadioSetRxGenericConfig+0x2a0>
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d005      	beq.n	8006c5e <RadioSetRxGenericConfig+0x2aa>
            break;
 8006c52:	e027      	b.n	8006ca4 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006c5c:	e023      	b.n	8006ca6 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006c66:	e01e      	b.n	8006ca6 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c6e:	2b0b      	cmp	r3, #11
 8006c70:	d004      	beq.n	8006c7c <RadioSetRxGenericConfig+0x2c8>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d104      	bne.n	8006c86 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006c84:	e00f      	b.n	8006ca6 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006c86:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <RadioSetRxGenericConfig+0x2dc>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006c8e:	e00a      	b.n	8006ca6 <RadioSetRxGenericConfig+0x2f2>
 8006c90:	2000058c 	.word	0x2000058c
 8006c94:	20000448 	.word	0x20000448
 8006c98:	200005e5 	.word	0x200005e5
 8006c9c:	200005c4 	.word	0x200005c4
 8006ca0:	2000059a 	.word	0x2000059a
            break;
 8006ca4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006ca6:	4b28      	ldr	r3, [pc, #160]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8006cb0:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cb2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cbc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006cbe:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cc4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cce:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006cde:	f7ff fa8c 	bl	80061fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	f7fe fc4a 	bl	800557c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ce8:	4818      	ldr	r0, [pc, #96]	; (8006d4c <RadioSetRxGenericConfig+0x398>)
 8006cea:	f000 fe53 	bl	8007994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cee:	4818      	ldr	r0, [pc, #96]	; (8006d50 <RadioSetRxGenericConfig+0x39c>)
 8006cf0:	f000 ff1c 	bl	8007b2c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d10d      	bne.n	8006d1a <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006cfe:	f240 7036 	movw	r0, #1846	; 0x736
 8006d02:	f001 f86f 	bl	8007de4 <SUBGRF_ReadRegister>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f240 7036 	movw	r0, #1846	; 0x736
 8006d14:	f001 f852 	bl	8007dbc <SUBGRF_WriteRegister>
 8006d18:	e00c      	b.n	8006d34 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8006d1a:	f240 7036 	movw	r0, #1846	; 0x736
 8006d1e:	f001 f861 	bl	8007de4 <SUBGRF_ReadRegister>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f240 7036 	movw	r0, #1846	; 0x736
 8006d30:	f001 f844 	bl	8007dbc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <RadioSetRxGenericConfig+0x394>)
 8006d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d3a:	609a      	str	r2, [r3, #8]
        break;
 8006d3c:	bf00      	nop
    }
    return status;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	2000058c 	.word	0x2000058c
 8006d4c:	200005c4 	.word	0x200005c4
 8006d50:	2000059a 	.word	0x2000059a

08006d54 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
 8006d62:	4613      	mov	r3, r2
 8006d64:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006d6e:	f001 faae 	bl	80082ce <RFW_DeInit>
    switch( modem )
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f000 8144 	beq.w	8007002 <RadioSetTxGenericConfig+0x2ae>
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f300 8160 	bgt.w	8007040 <RadioSetTxGenericConfig+0x2ec>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <RadioSetTxGenericConfig+0x38>
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	f000 80b7 	beq.w	8006ef8 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8006d8a:	e159      	b.n	8007040 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <RadioSetTxGenericConfig+0x48>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <RadioSetTxGenericConfig+0x4e>
            return -1;
 8006d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006da0:	e163      	b.n	800706a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	7d1b      	ldrb	r3, [r3, #20]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d902      	bls.n	8006db0 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295
 8006dae:	e15c      	b.n	800706a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
 8006db4:	e00d      	b.n	8006dd2 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	4413      	add	r3, r2
 8006dbe:	7819      	ldrb	r1, [r3, #0]
 8006dc0:	f107 021c 	add.w	r2, r7, #28
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	4413      	add	r3, r2
 8006dc8:	460a      	mov	r2, r1
 8006dca:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	3301      	adds	r3, #1
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	7d1b      	ldrb	r3, [r3, #20]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	dbeb      	blt.n	8006db6 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006dde:	4ba5      	ldr	r3, [pc, #660]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	4aa2      	ldr	r2, [pc, #648]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006dec:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	4ba0      	ldr	r3, [pc, #640]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 f997 	bl	8008130 <SUBGRF_GetFskBandwidthRegValue>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	4b9b      	ldr	r3, [pc, #620]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4a98      	ldr	r2, [pc, #608]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e12:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006e14:	4b97      	ldr	r3, [pc, #604]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	4b93      	ldr	r3, [pc, #588]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e26:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006e28:	4b92      	ldr	r3, [pc, #584]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	7d1b      	ldrb	r3, [r3, #20]
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	4b8f      	ldr	r3, [pc, #572]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e38:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006e3a:	4b8e      	ldr	r3, [pc, #568]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d003      	beq.n	8006e52 <RadioSetTxGenericConfig+0xfe>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	7f9b      	ldrb	r3, [r3, #30]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d12a      	bne.n	8006ea8 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	7fdb      	ldrb	r3, [r3, #31]
 8006e56:	2bf1      	cmp	r3, #241	; 0xf1
 8006e58:	d00a      	beq.n	8006e70 <RadioSetTxGenericConfig+0x11c>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	7fdb      	ldrb	r3, [r3, #31]
 8006e5e:	2bf2      	cmp	r3, #242	; 0xf2
 8006e60:	d006      	beq.n	8006e70 <RadioSetTxGenericConfig+0x11c>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7fdb      	ldrb	r3, [r3, #31]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d002      	beq.n	8006e70 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	e0fc      	b.n	800706a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8006e70:	2301      	movs	r3, #1
 8006e72:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006e78:	4b7f      	ldr	r3, [pc, #508]	; (8007078 <RadioSetTxGenericConfig+0x324>)
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	4a7e      	ldr	r2, [pc, #504]	; (800707c <RadioSetTxGenericConfig+0x328>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fa16 	bl	80082b4 <RFW_Init>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <RadioSetTxGenericConfig+0x140>
              return -1;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	e0ea      	b.n	800706a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006e94:	4b77      	ldr	r3, [pc, #476]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8006e9a:	4b76      	ldr	r3, [pc, #472]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006ea0:	4b74      	ldr	r3, [pc, #464]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	755a      	strb	r2, [r3, #21]
        {
 8006ea6:	e00c      	b.n	8006ec2 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	7fda      	ldrb	r2, [r3, #31]
 8006eac:	4b71      	ldr	r3, [pc, #452]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006eae:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006eb6:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006eb8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	7f9a      	ldrb	r2, [r3, #30]
 8006ebe:	4b6d      	ldr	r3, [pc, #436]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006ec0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006ec2:	f7ff f99a 	bl	80061fa <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7fe fb58 	bl	800557c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ecc:	486c      	ldr	r0, [pc, #432]	; (8007080 <RadioSetTxGenericConfig+0x32c>)
 8006ece:	f000 fd61 	bl	8007994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ed2:	486c      	ldr	r0, [pc, #432]	; (8007084 <RadioSetTxGenericConfig+0x330>)
 8006ed4:	f000 fe2a 	bl	8007b2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006ed8:	f107 031c 	add.w	r3, r7, #28
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f964 	bl	80071aa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	8b9b      	ldrh	r3, [r3, #28]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f9ae 	bl	8007248 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	8c1b      	ldrh	r3, [r3, #32]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f989 	bl	8007208 <SUBGRF_SetCrcPolynomial>
        break;
 8006ef6:	e0a4      	b.n	8007042 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ef8:	4b5e      	ldr	r3, [pc, #376]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006f06:	4b5b      	ldr	r3, [pc, #364]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006f12:	4b58      	ldr	r3, [pc, #352]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006f1e:	4b55      	ldr	r3, [pc, #340]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f20:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d010      	beq.n	8006f50 <RadioSetTxGenericConfig+0x1fc>
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	dc22      	bgt.n	8006f78 <RadioSetTxGenericConfig+0x224>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <RadioSetTxGenericConfig+0x1e8>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d005      	beq.n	8006f46 <RadioSetTxGenericConfig+0x1f2>
            break;
 8006f3a:	e01d      	b.n	8006f78 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006f3c:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f44:	e019      	b.n	8006f7a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006f46:	4b4b      	ldr	r3, [pc, #300]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f4e:	e014      	b.n	8006f7a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f56:	2b0b      	cmp	r3, #11
 8006f58:	d004      	beq.n	8006f64 <RadioSetTxGenericConfig+0x210>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f60:	2b0c      	cmp	r3, #12
 8006f62:	d104      	bne.n	8006f6e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006f64:	4b43      	ldr	r3, [pc, #268]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f6c:	e005      	b.n	8006f7a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006f6e:	4b41      	ldr	r3, [pc, #260]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006f76:	e000      	b.n	8006f7a <RadioSetTxGenericConfig+0x226>
            break;
 8006f78:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f84:	4b3b      	ldr	r3, [pc, #236]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f86:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006f8e:	4b39      	ldr	r3, [pc, #228]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f90:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f98:	4b36      	ldr	r3, [pc, #216]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006f9a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006fa4:	4b33      	ldr	r3, [pc, #204]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006faa:	f7ff f926 	bl	80061fa <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f7fe fae4 	bl	800557c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fb4:	4832      	ldr	r0, [pc, #200]	; (8007080 <RadioSetTxGenericConfig+0x32c>)
 8006fb6:	f000 fced 	bl	8007994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006fba:	4832      	ldr	r0, [pc, #200]	; (8007084 <RadioSetTxGenericConfig+0x330>)
 8006fbc:	f000 fdb6 	bl	8007b2c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006fc0:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8006fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d10d      	bne.n	8006fe6 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006fca:	f640 0089 	movw	r0, #2185	; 0x889
 8006fce:	f000 ff09 	bl	8007de4 <SUBGRF_ReadRegister>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f023 0304 	bic.w	r3, r3, #4
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f640 0089 	movw	r0, #2185	; 0x889
 8006fe0:	f000 feec 	bl	8007dbc <SUBGRF_WriteRegister>
        break;
 8006fe4:	e02d      	b.n	8007042 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006fe6:	f640 0089 	movw	r0, #2185	; 0x889
 8006fea:	f000 fefb 	bl	8007de4 <SUBGRF_ReadRegister>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f043 0304 	orr.w	r3, r3, #4
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f640 0089 	movw	r0, #2185	; 0x889
 8006ffc:	f000 fede 	bl	8007dbc <SUBGRF_WriteRegister>
        break;
 8007000:	e01f      	b.n	8007042 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <RadioSetTxGenericConfig+0x2c0>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007012:	d902      	bls.n	800701a <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
 8007018:	e027      	b.n	800706a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800701a:	2002      	movs	r0, #2
 800701c:	f7fe faae 	bl	800557c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702c:	4a11      	ldr	r2, [pc, #68]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 800702e:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8007032:	2216      	movs	r2, #22
 8007034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007038:	4811      	ldr	r0, [pc, #68]	; (8007080 <RadioSetTxGenericConfig+0x32c>)
 800703a:	f000 fcab 	bl	8007994 <SUBGRF_SetModulationParams>
        break;
 800703e:	e000      	b.n	8007042 <RadioSetTxGenericConfig+0x2ee>
        break;
 8007040:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 ff84 	bl	8007f54 <SUBGRF_SetRfTxPower>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	4b08      	ldr	r3, [pc, #32]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8007052:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8007058:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f94a 	bl	80082f6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007062:	4a04      	ldr	r2, [pc, #16]	; (8007074 <RadioSetTxGenericConfig+0x320>)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6053      	str	r3, [r2, #4]
    return 0;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	2000058c 	.word	0x2000058c
 8007078:	20000448 	.word	0x20000448
 800707c:	200005e4 	.word	0x200005e4
 8007080:	200005c4 	.word	0x200005c4
 8007084:	2000059a 	.word	0x2000059a

08007088 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8007096:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <SUBGRF_Init+0x78>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800709c:	f7fa fcf8 	bl	8001a90 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80070a0:	2002      	movs	r0, #2
 80070a2:	f001 f823 	bl	80080ec <Radio_SMPS_Set>

    ImageCalibrated = false;
 80070a6:	4b17      	ldr	r3, [pc, #92]	; (8007104 <SUBGRF_Init+0x7c>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80070ac:	2000      	movs	r0, #0
 80070ae:	f000 f977 	bl	80073a0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80070b2:	f7fa fbc3 	bl	800183c <RBI_IsTCXO>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10e      	bne.n	80070da <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80070bc:	2140      	movs	r1, #64	; 0x40
 80070be:	2001      	movs	r0, #1
 80070c0:	f000 fb78 	bl	80077b4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80070c4:	2100      	movs	r1, #0
 80070c6:	f640 1011 	movw	r0, #2321	; 0x911
 80070ca:	f000 fe77 	bl	8007dbc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80070ce:	237f      	movs	r3, #127	; 0x7f
 80070d0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80070d2:	7b38      	ldrb	r0, [r7, #12]
 80070d4:	f000 fa85 	bl	80075e2 <SUBGRF_Calibrate>
 80070d8:	e009      	b.n	80070ee <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80070da:	2120      	movs	r1, #32
 80070dc:	f640 1011 	movw	r0, #2321	; 0x911
 80070e0:	f000 fe6c 	bl	8007dbc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80070e4:	2120      	movs	r1, #32
 80070e6:	f640 1012 	movw	r0, #2322	; 0x912
 80070ea:	f000 fe67 	bl	8007dbc <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80070ee:	f7fa fb89 	bl	8001804 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <SUBGRF_Init+0x80>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20000458 	.word	0x20000458
 8007104:	20000454 	.word	0x20000454
 8007108:	2000044c 	.word	0x2000044c

0800710c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <SUBGRF_GetOperatingMode+0x10>)
 8007112:	781b      	ldrb	r3, [r3, #0]
}
 8007114:	4618      	mov	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr
 800711c:	2000044c 	.word	0x2000044c

08007120 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	461a      	mov	r2, r3
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	2000      	movs	r0, #0
 8007134:	f000 fe92 	bl	8007e5c <SUBGRF_WriteBuffer>
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007152:	f107 0317 	add.w	r3, r7, #23
 8007156:	4619      	mov	r1, r3
 8007158:	68b8      	ldr	r0, [r7, #8]
 800715a:	f000 fdb1 	bl	8007cc0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	429a      	cmp	r2, r3
 8007166:	d201      	bcs.n	800716c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007168:	2301      	movs	r3, #1
 800716a:	e007      	b.n	800717c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800716c:	7df8      	ldrb	r0, [r7, #23]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	68f9      	ldr	r1, [r7, #12]
 8007176:	f000 fe87 	bl	8007e88 <SUBGRF_ReadBuffer>

    return 0;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	460b      	mov	r3, r1
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	4619      	mov	r1, r3
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7ff ffc2 	bl	8007120 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f91b 	bl	80073d8 <SUBGRF_SetTx>
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80071b2:	2208      	movs	r2, #8
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80071ba:	f000 fe27 	bl	8007e0c <SUBGRF_WriteRegisters>
    return 0;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80071e2:	f000 fb67 	bl	80078b4 <SUBGRF_GetPacketType>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d108      	bne.n	80071fe <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	2202      	movs	r2, #2
 80071f2:	4619      	mov	r1, r3
 80071f4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80071f8:	f000 fe08 	bl	8007e0c <SUBGRF_WriteRegisters>
            break;
 80071fc:	e000      	b.n	8007200 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80071fe:	bf00      	nop
    }
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	0a1b      	lsrs	r3, r3, #8
 8007216:	b29b      	uxth	r3, r3
 8007218:	b2db      	uxtb	r3, r3
 800721a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007222:	f000 fb47 	bl	80078b4 <SUBGRF_GetPacketType>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	2202      	movs	r2, #2
 8007232:	4619      	mov	r1, r3
 8007234:	f240 60be 	movw	r0, #1726	; 0x6be
 8007238:	f000 fde8 	bl	8007e0c <SUBGRF_WriteRegisters>
            break;
 800723c:	e000      	b.n	8007240 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800723e:	bf00      	nop
    }
}
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007256:	f000 fb2d 	bl	80078b4 <SUBGRF_GetPacketType>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d121      	bne.n	80072a4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007260:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007264:	f000 fdbe 	bl	8007de4 <SUBGRF_ReadRegister>
 8007268:	4603      	mov	r3, r0
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007270:	88fb      	ldrh	r3, [r7, #6]
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	b29b      	uxth	r3, r3
 8007276:	b25b      	sxtb	r3, r3
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	b25a      	sxtb	r2, r3
 800727e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007282:	4313      	orrs	r3, r2
 8007284:	b25b      	sxtb	r3, r3
 8007286:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	4619      	mov	r1, r3
 800728c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007290:	f000 fd94 	bl	8007dbc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4619      	mov	r1, r3
 800729a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800729e:	f000 fd8d 	bl	8007dbc <SUBGRF_WriteRegister>
            break;
 80072a2:	e000      	b.n	80072a6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80072a4:	bf00      	nop
    }
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80072c0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80072c4:	f000 fd8e 	bl	8007de4 <SUBGRF_ReadRegister>
 80072c8:	4603      	mov	r3, r0
 80072ca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80072da:	f000 fd6f 	bl	8007dbc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80072de:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80072e2:	f000 fd7f 	bl	8007de4 <SUBGRF_ReadRegister>
 80072e6:	4603      	mov	r3, r0
 80072e8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80072ea:	79bb      	ldrb	r3, [r7, #6]
 80072ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	4619      	mov	r1, r3
 80072f4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80072f8:	f000 fd60 	bl	8007dbc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80072fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007300:	f000 f88a 	bl	8007418 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007304:	463b      	mov	r3, r7
 8007306:	2204      	movs	r2, #4
 8007308:	4619      	mov	r1, r3
 800730a:	f640 0019 	movw	r0, #2073	; 0x819
 800730e:	f000 fd91 	bl	8007e34 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8007312:	2000      	movs	r0, #0
 8007314:	f000 f844 	bl	80073a0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	4619      	mov	r1, r3
 800731c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007320:	f000 fd4c 	bl	8007dbc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007324:	79bb      	ldrb	r3, [r7, #6]
 8007326:	4619      	mov	r1, r3
 8007328:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800732c:	f000 fd46 	bl	8007dbc <SUBGRF_WriteRegister>

    return number;
 8007330:	683b      	ldr	r3, [r7, #0]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007344:	2000      	movs	r0, #0
 8007346:	f7fa fa64 	bl	8001812 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800734a:	2002      	movs	r0, #2
 800734c:	f000 fece 	bl	80080ec <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007350:	793b      	ldrb	r3, [r7, #4]
 8007352:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800735c:	793b      	ldrb	r3, [r7, #4]
 800735e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007366:	b25b      	sxtb	r3, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800736c:	793b      	ldrb	r3, [r7, #4]
 800736e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007376:	4313      	orrs	r3, r2
 8007378:	b25b      	sxtb	r3, r3
 800737a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800737c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800737e:	f107 030f 	add.w	r3, r7, #15
 8007382:	2201      	movs	r2, #1
 8007384:	4619      	mov	r1, r3
 8007386:	2084      	movs	r0, #132	; 0x84
 8007388:	f000 fd94 	bl	8007eb4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <SUBGRF_SetSleep+0x60>)
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	2000044c 	.word	0x2000044c

080073a0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80073aa:	1dfb      	adds	r3, r7, #7
 80073ac:	2201      	movs	r2, #1
 80073ae:	4619      	mov	r1, r3
 80073b0:	2080      	movs	r0, #128	; 0x80
 80073b2:	f000 fd7f 	bl	8007eb4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d103      	bne.n	80073c4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <SUBGRF_SetStandby+0x34>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80073c2:	e002      	b.n	80073ca <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80073c4:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <SUBGRF_SetStandby+0x34>)
 80073c6:	2202      	movs	r2, #2
 80073c8:	701a      	strb	r2, [r3, #0]
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000044c 	.word	0x2000044c

080073d8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80073e0:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <SUBGRF_SetTx+0x3c>)
 80073e2:	2204      	movs	r2, #4
 80073e4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	2203      	movs	r2, #3
 8007402:	4619      	mov	r1, r3
 8007404:	2083      	movs	r0, #131	; 0x83
 8007406:	f000 fd55 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000044c 	.word	0x2000044c

08007418 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <SUBGRF_SetRx+0x3c>)
 8007422:	2205      	movs	r2, #5
 8007424:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	b2db      	uxtb	r3, r3
 800742c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	b2db      	uxtb	r3, r3
 8007434:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800743c:	f107 030c 	add.w	r3, r7, #12
 8007440:	2203      	movs	r2, #3
 8007442:	4619      	mov	r1, r3
 8007444:	2082      	movs	r0, #130	; 0x82
 8007446:	f000 fd35 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	2000044c 	.word	0x2000044c

08007458 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007460:	4b0e      	ldr	r3, [pc, #56]	; (800749c <SUBGRF_SetRxBoosted+0x44>)
 8007462:	2205      	movs	r2, #5
 8007464:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8007466:	2197      	movs	r1, #151	; 0x97
 8007468:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800746c:	f000 fca6 	bl	8007dbc <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	b2db      	uxtb	r3, r3
 8007476:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	b2db      	uxtb	r3, r3
 800747e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	2203      	movs	r2, #3
 800748c:	4619      	mov	r1, r3
 800748e:	2082      	movs	r0, #130	; 0x82
 8007490:	f000 fd10 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	2000044c 	.word	0x2000044c

080074a0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	0c1b      	lsrs	r3, r3, #16
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	0a1b      	lsrs	r3, r3, #8
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	2206      	movs	r2, #6
 80074dc:	4619      	mov	r1, r3
 80074de:	2094      	movs	r0, #148	; 0x94
 80074e0:	f000 fce8 	bl	8007eb4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80074e4:	4b03      	ldr	r3, [pc, #12]	; (80074f4 <SUBGRF_SetRxDutyCycle+0x54>)
 80074e6:	2206      	movs	r2, #6
 80074e8:	701a      	strb	r2, [r3, #0]
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000044c 	.word	0x2000044c

080074f8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80074fc:	2200      	movs	r2, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	20c5      	movs	r0, #197	; 0xc5
 8007502:	f000 fcd7 	bl	8007eb4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8007506:	4b02      	ldr	r3, [pc, #8]	; (8007510 <SUBGRF_SetCad+0x18>)
 8007508:	2207      	movs	r2, #7
 800750a:	701a      	strb	r2, [r3, #0]
}
 800750c:	bf00      	nop
 800750e:	bd80      	pop	{r7, pc}
 8007510:	2000044c 	.word	0x2000044c

08007514 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	20d1      	movs	r0, #209	; 0xd1
 800751e:	f000 fcc9 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007522:	bf00      	nop
 8007524:	bd80      	pop	{r7, pc}

08007526 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8007526:	b580      	push	{r7, lr}
 8007528:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800752a:	2200      	movs	r2, #0
 800752c:	2100      	movs	r1, #0
 800752e:	20d2      	movs	r0, #210	; 0xd2
 8007530:	f000 fcc0 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007534:	bf00      	nop
 8007536:	bd80      	pop	{r7, pc}

08007538 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007542:	1dfb      	adds	r3, r7, #7
 8007544:	2201      	movs	r2, #1
 8007546:	4619      	mov	r1, r3
 8007548:	209f      	movs	r0, #159	; 0x9f
 800754a:	f000 fcb3 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	4603      	mov	r3, r0
 800755e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007560:	1dfb      	adds	r3, r7, #7
 8007562:	2201      	movs	r2, #1
 8007564:	4619      	mov	r1, r3
 8007566:	20a0      	movs	r0, #160	; 0xa0
 8007568:	f000 fca4 	bl	8007eb4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b3f      	cmp	r3, #63	; 0x3f
 8007570:	d91c      	bls.n	80075ac <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007580:	e005      	b.n	800758e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	089b      	lsrs	r3, r3, #2
 8007586:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	3301      	adds	r3, #1
 800758c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b1f      	cmp	r3, #31
 8007592:	d8f6      	bhi.n	8007582 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	b2da      	uxtb	r2, r3
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	4413      	add	r3, r2
 800759e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80075a0:	7b7b      	ldrb	r3, [r7, #13]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f240 7006 	movw	r0, #1798	; 0x706
 80075a8:	f000 fc08 	bl	8007dbc <SUBGRF_WriteRegister>
    }
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80075ba:	f7fa f946 	bl	800184a <RBI_IsDCDC>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d102      	bne.n	80075ca <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80075c4:	2301      	movs	r3, #1
 80075c6:	71fb      	strb	r3, [r7, #7]
 80075c8:	e001      	b.n	80075ce <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80075ca:	2300      	movs	r3, #0
 80075cc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80075ce:	1dfb      	adds	r3, r7, #7
 80075d0:	2201      	movs	r2, #1
 80075d2:	4619      	mov	r1, r3
 80075d4:	2096      	movs	r0, #150	; 0x96
 80075d6:	f000 fc6d 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80075ea:	793b      	ldrb	r3, [r7, #4]
 80075ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	019b      	lsls	r3, r3, #6
 80075f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80075f6:	793b      	ldrb	r3, [r7, #4]
 80075f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007600:	b25b      	sxtb	r3, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007606:	793b      	ldrb	r3, [r7, #4]
 8007608:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007610:	b25b      	sxtb	r3, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007616:	793b      	ldrb	r3, [r7, #4]
 8007618:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800761c:	b2db      	uxtb	r3, r3
 800761e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007620:	b25b      	sxtb	r3, r3
 8007622:	4313      	orrs	r3, r2
 8007624:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007626:	793b      	ldrb	r3, [r7, #4]
 8007628:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007630:	b25b      	sxtb	r3, r3
 8007632:	4313      	orrs	r3, r2
 8007634:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007636:	793b      	ldrb	r3, [r7, #4]
 8007638:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800763c:	b2db      	uxtb	r3, r3
 800763e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007640:	b25b      	sxtb	r3, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007646:	793b      	ldrb	r3, [r7, #4]
 8007648:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007650:	4313      	orrs	r3, r2
 8007652:	b25b      	sxtb	r3, r3
 8007654:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007656:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007658:	f107 030f 	add.w	r3, r7, #15
 800765c:	2201      	movs	r2, #1
 800765e:	4619      	mov	r1, r3
 8007660:	2089      	movs	r0, #137	; 0x89
 8007662:	f000 fc27 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <SUBGRF_CalibrateImage+0x78>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d904      	bls.n	800768a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007680:	23e1      	movs	r3, #225	; 0xe1
 8007682:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007684:	23e9      	movs	r3, #233	; 0xe9
 8007686:	737b      	strb	r3, [r7, #13]
 8007688:	e022      	b.n	80076d0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a17      	ldr	r2, [pc, #92]	; (80076ec <SUBGRF_CalibrateImage+0x7c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d904      	bls.n	800769c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007692:	23d7      	movs	r3, #215	; 0xd7
 8007694:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8007696:	23db      	movs	r3, #219	; 0xdb
 8007698:	737b      	strb	r3, [r7, #13]
 800769a:	e019      	b.n	80076d0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a14      	ldr	r2, [pc, #80]	; (80076f0 <SUBGRF_CalibrateImage+0x80>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d904      	bls.n	80076ae <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80076a4:	23c1      	movs	r3, #193	; 0xc1
 80076a6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80076a8:	23c5      	movs	r3, #197	; 0xc5
 80076aa:	737b      	strb	r3, [r7, #13]
 80076ac:	e010      	b.n	80076d0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <SUBGRF_CalibrateImage+0x84>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d904      	bls.n	80076c0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80076b6:	2375      	movs	r3, #117	; 0x75
 80076b8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80076ba:	2381      	movs	r3, #129	; 0x81
 80076bc:	737b      	strb	r3, [r7, #13]
 80076be:	e007      	b.n	80076d0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0d      	ldr	r2, [pc, #52]	; (80076f8 <SUBGRF_CalibrateImage+0x88>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d903      	bls.n	80076d0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80076c8:	236b      	movs	r3, #107	; 0x6b
 80076ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80076cc:	236f      	movs	r3, #111	; 0x6f
 80076ce:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80076d0:	f107 030c 	add.w	r3, r7, #12
 80076d4:	2202      	movs	r2, #2
 80076d6:	4619      	mov	r1, r3
 80076d8:	2098      	movs	r0, #152	; 0x98
 80076da:	f000 fbeb 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	35a4e900 	.word	0x35a4e900
 80076ec:	32a9f880 	.word	0x32a9f880
 80076f0:	2de54480 	.word	0x2de54480
 80076f4:	1b6b0b00 	.word	0x1b6b0b00
 80076f8:	1954fc40 	.word	0x1954fc40

080076fc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	4623      	mov	r3, r4
 800770c:	71fb      	strb	r3, [r7, #7]
 800770e:	4603      	mov	r3, r0
 8007710:	71bb      	strb	r3, [r7, #6]
 8007712:	460b      	mov	r3, r1
 8007714:	717b      	strb	r3, [r7, #5]
 8007716:	4613      	mov	r3, r2
 8007718:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800771e:	79bb      	ldrb	r3, [r7, #6]
 8007720:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007722:	797b      	ldrb	r3, [r7, #5]
 8007724:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007726:	793b      	ldrb	r3, [r7, #4]
 8007728:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800772a:	f107 030c 	add.w	r3, r7, #12
 800772e:	2204      	movs	r2, #4
 8007730:	4619      	mov	r1, r3
 8007732:	2095      	movs	r0, #149	; 0x95
 8007734:	f000 fbbe 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	bd90      	pop	{r4, r7, pc}

08007740 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	461a      	mov	r2, r3
 800774e:	4623      	mov	r3, r4
 8007750:	80fb      	strh	r3, [r7, #6]
 8007752:	4603      	mov	r3, r0
 8007754:	80bb      	strh	r3, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	807b      	strh	r3, [r7, #2]
 800775a:	4613      	mov	r3, r2
 800775c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	0a1b      	lsrs	r3, r3, #8
 8007762:	b29b      	uxth	r3, r3
 8007764:	b2db      	uxtb	r3, r3
 8007766:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007768:	88fb      	ldrh	r3, [r7, #6]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800776e:	88bb      	ldrh	r3, [r7, #4]
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	b29b      	uxth	r3, r3
 8007774:	b2db      	uxtb	r3, r3
 8007776:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007778:	88bb      	ldrh	r3, [r7, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	b29b      	uxth	r3, r3
 8007784:	b2db      	uxtb	r3, r3
 8007786:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007788:	887b      	ldrh	r3, [r7, #2]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800778e:	883b      	ldrh	r3, [r7, #0]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	b29b      	uxth	r3, r3
 8007794:	b2db      	uxtb	r3, r3
 8007796:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007798:	883b      	ldrh	r3, [r7, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800779e:	f107 0308 	add.w	r3, r7, #8
 80077a2:	2208      	movs	r2, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	2008      	movs	r0, #8
 80077a8:	f000 fb84 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 80077ac:	bf00      	nop
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd90      	pop	{r4, r7, pc}

080077b4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	0c1b      	lsrs	r3, r3, #16
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80077e0:	f107 030c 	add.w	r3, r7, #12
 80077e4:	2204      	movs	r2, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	2097      	movs	r0, #151	; 0x97
 80077ea:	f000 fb63 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80077f8:	b5b0      	push	{r4, r5, r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <SUBGRF_SetRfFrequency+0x7c>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f083 0301 	eor.w	r3, r3, #1
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff ff2c 	bl	8007670 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007818:	4b16      	ldr	r3, [pc, #88]	; (8007874 <SUBGRF_SetRfFrequency+0x7c>)
 800781a:	2201      	movs	r2, #1
 800781c:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	461a      	mov	r2, r3
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	09d5      	lsrs	r5, r2, #7
 8007828:	0654      	lsls	r4, r2, #25
 800782a:	4a13      	ldr	r2, [pc, #76]	; (8007878 <SUBGRF_SetRfFrequency+0x80>)
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	4620      	mov	r0, r4
 8007832:	4629      	mov	r1, r5
 8007834:	f7f9 fb1e 	bl	8000e74 <__aeabi_uldivmod>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4613      	mov	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0e1b      	lsrs	r3, r3, #24
 8007844:	b2db      	uxtb	r3, r3
 8007846:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	b2db      	uxtb	r3, r3
 800784e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	b2db      	uxtb	r3, r3
 8007856:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	2204      	movs	r2, #4
 8007864:	4619      	mov	r1, r3
 8007866:	2086      	movs	r0, #134	; 0x86
 8007868:	f000 fb24 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bdb0      	pop	{r4, r5, r7, pc}
 8007874:	20000454 	.word	0x20000454
 8007878:	01e84800 	.word	0x01e84800

0800787c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007886:	79fa      	ldrb	r2, [r7, #7]
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <SUBGRF_SetPacketType+0x34>)
 800788a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007892:	2100      	movs	r1, #0
 8007894:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007898:	f000 fa90 	bl	8007dbc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	2201      	movs	r2, #1
 80078a0:	4619      	mov	r1, r3
 80078a2:	208a      	movs	r0, #138	; 0x8a
 80078a4:	f000 fb06 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	2000044d 	.word	0x2000044d

080078b4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
    return PacketType;
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <SUBGRF_GetPacketType+0x10>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	2000044d 	.word	0x2000044d

080078c8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
 80078d2:	460b      	mov	r3, r1
 80078d4:	71bb      	strb	r3, [r7, #6]
 80078d6:	4613      	mov	r3, r2
 80078d8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d124      	bne.n	800792a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80078e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80078e4:	2b0f      	cmp	r3, #15
 80078e6:	d106      	bne.n	80078f6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80078e8:	2301      	movs	r3, #1
 80078ea:	2201      	movs	r2, #1
 80078ec:	2100      	movs	r1, #0
 80078ee:	2006      	movs	r0, #6
 80078f0:	f7ff ff04 	bl	80076fc <SUBGRF_SetPaConfig>
 80078f4:	e005      	b.n	8007902 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80078f6:	2301      	movs	r3, #1
 80078f8:	2201      	movs	r2, #1
 80078fa:	2100      	movs	r1, #0
 80078fc:	2004      	movs	r0, #4
 80078fe:	f7ff fefd 	bl	80076fc <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8007902:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007906:	2b0d      	cmp	r3, #13
 8007908:	dd02      	ble.n	8007910 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800790a:	230e      	movs	r3, #14
 800790c:	71bb      	strb	r3, [r7, #6]
 800790e:	e006      	b.n	800791e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007910:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007914:	f113 0f11 	cmn.w	r3, #17
 8007918:	da01      	bge.n	800791e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800791a:	23ef      	movs	r3, #239	; 0xef
 800791c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800791e:	2118      	movs	r1, #24
 8007920:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007924:	f000 fa4a 	bl	8007dbc <SUBGRF_WriteRegister>
 8007928:	e025      	b.n	8007976 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800792a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800792e:	f000 fa59 	bl	8007de4 <SUBGRF_ReadRegister>
 8007932:	4603      	mov	r3, r0
 8007934:	f043 031e 	orr.w	r3, r3, #30
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007940:	f000 fa3c 	bl	8007dbc <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007944:	2301      	movs	r3, #1
 8007946:	2200      	movs	r2, #0
 8007948:	2107      	movs	r1, #7
 800794a:	2004      	movs	r0, #4
 800794c:	f7ff fed6 	bl	80076fc <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007950:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007954:	2b16      	cmp	r3, #22
 8007956:	dd02      	ble.n	800795e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007958:	2316      	movs	r3, #22
 800795a:	71bb      	strb	r3, [r7, #6]
 800795c:	e006      	b.n	800796c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800795e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007962:	f113 0f09 	cmn.w	r3, #9
 8007966:	da01      	bge.n	800796c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007968:	23f7      	movs	r3, #247	; 0xf7
 800796a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800796c:	2138      	movs	r1, #56	; 0x38
 800796e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007972:	f000 fa23 	bl	8007dbc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007976:	79bb      	ldrb	r3, [r7, #6]
 8007978:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800797a:	797b      	ldrb	r3, [r7, #5]
 800797c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	2202      	movs	r2, #2
 8007984:	4619      	mov	r1, r3
 8007986:	208e      	movs	r0, #142	; 0x8e
 8007988:	f000 fa94 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007994:	b5b0      	push	{r4, r5, r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80079a0:	4a5e      	ldr	r2, [pc, #376]	; (8007b1c <SUBGRF_SetModulationParams+0x188>)
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079aa:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	4b5b      	ldr	r3, [pc, #364]	; (8007b20 <SUBGRF_SetModulationParams+0x18c>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d004      	beq.n	80079c4 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff ff5c 	bl	800787c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	f200 80a2 	bhi.w	8007b12 <SUBGRF_SetModulationParams+0x17e>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <SUBGRF_SetModulationParams+0x40>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	08007aa1 	.word	0x08007aa1
 80079dc:	08007a63 	.word	0x08007a63
 80079e0:	08007acf 	.word	0x08007acf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80079e4:	2308      	movs	r3, #8
 80079e6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a4d      	ldr	r2, [pc, #308]	; (8007b24 <SUBGRF_SetModulationParams+0x190>)
 80079ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	0c1b      	lsrs	r3, r3, #16
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	0a1b      	lsrs	r3, r3, #8
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7b1b      	ldrb	r3, [r3, #12]
 8007a0e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7b5b      	ldrb	r3, [r3, #13]
 8007a14:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	09d5      	lsrs	r5, r2, #7
 8007a22:	0654      	lsls	r4, r2, #25
 8007a24:	4a40      	ldr	r2, [pc, #256]	; (8007b28 <SUBGRF_SetModulationParams+0x194>)
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f9 fa21 	bl	8000e74 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4613      	mov	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4619      	mov	r1, r3
 8007a5a:	208b      	movs	r0, #139	; 0x8b
 8007a5c:	f000 fa2a 	bl	8007eb4 <SUBGRF_WriteCommand>
        break;
 8007a60:	e058      	b.n	8007b14 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007a62:	2304      	movs	r3, #4
 8007a64:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <SUBGRF_SetModulationParams+0x190>)
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	0c1b      	lsrs	r3, r3, #16
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	0a1b      	lsrs	r3, r3, #8
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7d1b      	ldrb	r3, [r3, #20]
 8007a8c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a8e:	7cfb      	ldrb	r3, [r7, #19]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f107 0308 	add.w	r3, r7, #8
 8007a96:	4619      	mov	r1, r3
 8007a98:	208b      	movs	r0, #139	; 0x8b
 8007a9a:	f000 fa0b 	bl	8007eb4 <SUBGRF_WriteCommand>
        break;
 8007a9e:	e039      	b.n	8007b14 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7e1b      	ldrb	r3, [r3, #24]
 8007aa8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7e5b      	ldrb	r3, [r3, #25]
 8007aae:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7e9b      	ldrb	r3, [r3, #26]
 8007ab4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7edb      	ldrb	r3, [r3, #27]
 8007aba:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	208b      	movs	r0, #139	; 0x8b
 8007ac8:	f000 f9f4 	bl	8007eb4 <SUBGRF_WriteCommand>

        break;
 8007acc:	e022      	b.n	8007b14 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007ace:	2305      	movs	r3, #5
 8007ad0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <SUBGRF_SetModulationParams+0x190>)
 8007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007adc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	0a1b      	lsrs	r3, r3, #8
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7b1b      	ldrb	r3, [r3, #12]
 8007af8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7b5b      	ldrb	r3, [r3, #13]
 8007afe:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007b00:	7cfb      	ldrb	r3, [r7, #19]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f107 0308 	add.w	r3, r7, #8
 8007b08:	4619      	mov	r1, r3
 8007b0a:	208b      	movs	r0, #139	; 0x8b
 8007b0c:	f000 f9d2 	bl	8007eb4 <SUBGRF_WriteCommand>
        break;
 8007b10:	e000      	b.n	8007b14 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007b12:	bf00      	nop
    }
}
 8007b14:	bf00      	nop
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1c:	0800e0e0 	.word	0x0800e0e0
 8007b20:	2000044d 	.word	0x2000044d
 8007b24:	3d090000 	.word	0x3d090000
 8007b28:	01e84800 	.word	0x01e84800

08007b2c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007b38:	4a48      	ldr	r2, [pc, #288]	; (8007c5c <SUBGRF_SetPacketParams+0x130>)
 8007b3a:	f107 030c 	add.w	r3, r7, #12
 8007b3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b40:	c303      	stmia	r3!, {r0, r1}
 8007b42:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	4b45      	ldr	r3, [pc, #276]	; (8007c60 <SUBGRF_SetPacketParams+0x134>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d004      	beq.n	8007b5a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fe91 	bl	800787c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d878      	bhi.n	8007c54 <SUBGRF_SetPacketParams+0x128>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <SUBGRF_SetPacketParams+0x3c>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007c09 	.word	0x08007c09
 8007b70:	08007bfd 	.word	0x08007bfd
 8007b74:	08007b79 	.word	0x08007b79
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7a5b      	ldrb	r3, [r3, #9]
 8007b7c:	2bf1      	cmp	r3, #241	; 0xf1
 8007b7e:	d10a      	bne.n	8007b96 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007b80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007b84:	f7ff fb20 	bl	80071c8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007b88:	f248 0005 	movw	r0, #32773	; 0x8005
 8007b8c:	f7ff fb3c 	bl	8007208 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007b90:	2302      	movs	r3, #2
 8007b92:	75bb      	strb	r3, [r7, #22]
 8007b94:	e011      	b.n	8007bba <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7a5b      	ldrb	r3, [r3, #9]
 8007b9a:	2bf2      	cmp	r3, #242	; 0xf2
 8007b9c:	d10a      	bne.n	8007bb4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007b9e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007ba2:	f7ff fb11 	bl	80071c8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007ba6:	f241 0021 	movw	r0, #4129	; 0x1021
 8007baa:	f7ff fb2d 	bl	8007208 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007bae:	2306      	movs	r3, #6
 8007bb0:	75bb      	strb	r3, [r7, #22]
 8007bb2:	e002      	b.n	8007bba <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7a5b      	ldrb	r3, [r3, #9]
 8007bb8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007bba:	2309      	movs	r3, #9
 8007bbc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	791b      	ldrb	r3, [r3, #4]
 8007bd6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	795b      	ldrb	r3, [r3, #5]
 8007bdc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	799b      	ldrb	r3, [r3, #6]
 8007be2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	79db      	ldrb	r3, [r3, #7]
 8007be8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7a1b      	ldrb	r3, [r3, #8]
 8007bee:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007bf0:	7dbb      	ldrb	r3, [r7, #22]
 8007bf2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7a9b      	ldrb	r3, [r3, #10]
 8007bf8:	753b      	strb	r3, [r7, #20]
        break;
 8007bfa:	e022      	b.n	8007c42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7b1b      	ldrb	r3, [r3, #12]
 8007c04:	733b      	strb	r3, [r7, #12]
        break;
 8007c06:	e01c      	b.n	8007c42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007c08:	2306      	movs	r3, #6
 8007c0a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	89db      	ldrh	r3, [r3, #14]
 8007c10:	0a1b      	lsrs	r3, r3, #8
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	89db      	ldrh	r3, [r3, #14]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7c1a      	ldrb	r2, [r3, #16]
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <SUBGRF_SetPacketParams+0x138>)
 8007c26:	4611      	mov	r1, r2
 8007c28:	7019      	strb	r1, [r3, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7c5b      	ldrb	r3, [r3, #17]
 8007c32:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	7c9b      	ldrb	r3, [r3, #18]
 8007c38:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	7cdb      	ldrb	r3, [r3, #19]
 8007c3e:	747b      	strb	r3, [r7, #17]
        break;
 8007c40:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f107 030c 	add.w	r3, r7, #12
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	208c      	movs	r0, #140	; 0x8c
 8007c4e:	f000 f931 	bl	8007eb4 <SUBGRF_WriteCommand>
 8007c52:	e000      	b.n	8007c56 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007c54:	bf00      	nop
}
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	0800e0e8 	.word	0x0800e0e8
 8007c60:	2000044d 	.word	0x2000044d
 8007c64:	2000044e 	.word	0x2000044e

08007c68 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	460a      	mov	r2, r1
 8007c72:	71fb      	strb	r3, [r7, #7]
 8007c74:	4613      	mov	r3, r2
 8007c76:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007c7c:	79bb      	ldrb	r3, [r7, #6]
 8007c7e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	2202      	movs	r2, #2
 8007c86:	4619      	mov	r1, r3
 8007c88:	208f      	movs	r0, #143	; 0x8f
 8007c8a:	f000 f913 	bl	8007eb4 <SUBGRF_WriteCommand>
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	2015      	movs	r0, #21
 8007ca8:	f000 f918 	bl	8007edc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007cac:	793b      	ldrb	r3, [r7, #4]
 8007cae:	425b      	negs	r3, r3
 8007cb0:	105b      	asrs	r3, r3, #1
 8007cb2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007cca:	f107 030c 	add.w	r3, r7, #12
 8007cce:	2202      	movs	r2, #2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2013      	movs	r0, #19
 8007cd4:	f000 f902 	bl	8007edc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007cd8:	f7ff fdec 	bl	80078b4 <SUBGRF_GetPacketType>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d10d      	bne.n	8007cfe <SUBGRF_GetRxBufferStatus+0x3e>
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <SUBGRF_GetRxBufferStatus+0x54>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d108      	bne.n	8007cfe <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007cec:	f240 7002 	movw	r0, #1794	; 0x702
 8007cf0:	f000 f878 	bl	8007de4 <SUBGRF_ReadRegister>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e002      	b.n	8007d04 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007cfe:	7b3a      	ldrb	r2, [r7, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007d04:	7b7a      	ldrb	r2, [r7, #13]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	701a      	strb	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2000044e 	.word	0x2000044e

08007d18 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	2203      	movs	r2, #3
 8007d26:	4619      	mov	r1, r3
 8007d28:	2014      	movs	r0, #20
 8007d2a:	f000 f8d7 	bl	8007edc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007d2e:	f7ff fdc1 	bl	80078b4 <SUBGRF_GetPacketType>
 8007d32:	4603      	mov	r3, r0
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <SUBGRF_GetPacketStatus+0x30>
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d013      	beq.n	8007d6e <SUBGRF_GetPacketStatus+0x56>
 8007d46:	e02a      	b.n	8007d9e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007d48:	7b3a      	ldrb	r2, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007d4e:	7b7b      	ldrb	r3, [r7, #13]
 8007d50:	425b      	negs	r3, r3
 8007d52:	105b      	asrs	r3, r3, #1
 8007d54:	b25a      	sxtb	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	425b      	negs	r3, r3
 8007d5e:	105b      	asrs	r3, r3, #1
 8007d60:	b25a      	sxtb	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	609a      	str	r2, [r3, #8]
            break;
 8007d6c:	e020      	b.n	8007db0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007d6e:	7b3b      	ldrb	r3, [r7, #12]
 8007d70:	425b      	negs	r3, r3
 8007d72:	105b      	asrs	r3, r3, #1
 8007d74:	b25a      	sxtb	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007d7a:	7b7b      	ldrb	r3, [r7, #13]
 8007d7c:	b25b      	sxtb	r3, r3
 8007d7e:	3302      	adds	r3, #2
 8007d80:	109b      	asrs	r3, r3, #2
 8007d82:	b25a      	sxtb	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	425b      	negs	r3, r3
 8007d8c:	105b      	asrs	r3, r3, #1
 8007d8e:	b25a      	sxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007d94:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <SUBGRF_GetPacketStatus+0xa0>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	611a      	str	r2, [r3, #16]
            break;
 8007d9c:	e008      	b.n	8007db0 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007d9e:	2214      	movs	r2, #20
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fafe 	bl	80093a4 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220f      	movs	r2, #15
 8007dac:	701a      	strb	r2, [r3, #0]
            break;
 8007dae:	bf00      	nop
    }
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000450 	.word	0x20000450

08007dbc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	80fb      	strh	r3, [r7, #6]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007dcc:	1d7a      	adds	r2, r7, #5
 8007dce:	88f9      	ldrh	r1, [r7, #6]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4803      	ldr	r0, [pc, #12]	; (8007de0 <SUBGRF_WriteRegister+0x24>)
 8007dd4:	f7fc f8ea 	bl	8003fac <HAL_SUBGHZ_WriteRegisters>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000508 	.word	0x20000508

08007de4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007dee:	f107 020f 	add.w	r2, r7, #15
 8007df2:	88f9      	ldrh	r1, [r7, #6]
 8007df4:	2301      	movs	r3, #1
 8007df6:	4804      	ldr	r0, [pc, #16]	; (8007e08 <SUBGRF_ReadRegister+0x24>)
 8007df8:	f7fc f937 	bl	800406a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000508 	.word	0x20000508

08007e0c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	80fb      	strh	r3, [r7, #6]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007e1c:	88bb      	ldrh	r3, [r7, #4]
 8007e1e:	88f9      	ldrh	r1, [r7, #6]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	4803      	ldr	r0, [pc, #12]	; (8007e30 <SUBGRF_WriteRegisters+0x24>)
 8007e24:	f7fc f8c2 	bl	8003fac <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000508 	.word	0x20000508

08007e34 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	80fb      	strh	r3, [r7, #6]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007e44:	88bb      	ldrh	r3, [r7, #4]
 8007e46:	88f9      	ldrh	r1, [r7, #6]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	4803      	ldr	r0, [pc, #12]	; (8007e58 <SUBGRF_ReadRegisters+0x24>)
 8007e4c:	f7fc f90d 	bl	800406a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000508 	.word	0x20000508

08007e5c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007e6c:	79bb      	ldrb	r3, [r7, #6]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	79f9      	ldrb	r1, [r7, #7]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4803      	ldr	r0, [pc, #12]	; (8007e84 <SUBGRF_WriteBuffer+0x28>)
 8007e76:	f7fc fa0c 	bl	8004292 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000508 	.word	0x20000508

08007e88 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
 8007e94:	4613      	mov	r3, r2
 8007e96:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007e98:	79bb      	ldrb	r3, [r7, #6]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	79f9      	ldrb	r1, [r7, #7]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	4803      	ldr	r0, [pc, #12]	; (8007eb0 <SUBGRF_ReadBuffer+0x28>)
 8007ea2:	f7fc fa49 	bl	8004338 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000508 	.word	0x20000508

08007eb4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6039      	str	r1, [r7, #0]
 8007ebe:	71fb      	strb	r3, [r7, #7]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007ec4:	88bb      	ldrh	r3, [r7, #4]
 8007ec6:	79f9      	ldrb	r1, [r7, #7]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	4803      	ldr	r0, [pc, #12]	; (8007ed8 <SUBGRF_WriteCommand+0x24>)
 8007ecc:	f7fc f92e 	bl	800412c <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000508 	.word	0x20000508

08007edc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007eec:	88bb      	ldrh	r3, [r7, #4]
 8007eee:	79f9      	ldrb	r1, [r7, #7]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	4803      	ldr	r0, [pc, #12]	; (8007f00 <SUBGRF_ReadCommand+0x24>)
 8007ef4:	f7fc f979 	bl	80041ea <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000508 	.word	0x20000508

08007f04 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	71fb      	strb	r3, [r7, #7]
 8007f10:	4613      	mov	r3, r2
 8007f12:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007f18:	79bb      	ldrb	r3, [r7, #6]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d10d      	bne.n	8007f3a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d104      	bne.n	8007f2e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007f24:	2302      	movs	r3, #2
 8007f26:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007f28:	2004      	movs	r0, #4
 8007f2a:	f000 f8df 	bl	80080ec <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d107      	bne.n	8007f44 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007f34:	2303      	movs	r3, #3
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	e004      	b.n	8007f44 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007f3a:	79bb      	ldrb	r3, [r7, #6]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7f9 fc63 	bl	8001812 <RBI_ConfigRFSwitch>
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007f62:	f7f9 fc64 	bl	800182e <RBI_GetTxConfig>
 8007f66:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d016      	beq.n	8007f9c <SUBGRF_SetRfTxPower+0x48>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	dc16      	bgt.n	8007fa2 <SUBGRF_SetRfTxPower+0x4e>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <SUBGRF_SetRfTxPower+0x2e>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d00a      	beq.n	8007f96 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007f80:	e00f      	b.n	8007fa2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8007f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f86:	2b0f      	cmp	r3, #15
 8007f88:	dd02      	ble.n	8007f90 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8007f8e:	e009      	b.n	8007fa4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
            break;
 8007f94:	e006      	b.n	8007fa4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8007f96:	2301      	movs	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
            break;
 8007f9a:	e003      	b.n	8007fa4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8007fa0:	e000      	b.n	8007fa4 <SUBGRF_SetRfTxPower+0x50>
            break;
 8007fa2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007fa4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	2202      	movs	r2, #2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fc8b 	bl	80078c8 <SUBGRF_SetTxParams>

    return paSelect;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8007fc0:	2301      	movs	r3, #1
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr
	...

08007fcc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2001      	movs	r0, #1
 8007fda:	4798      	blx	r3
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000458 	.word	0x20000458

08007fe8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007ff0:	4b03      	ldr	r3, [pc, #12]	; (8008000 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	4798      	blx	r3
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20000458 	.word	0x20000458

08008004 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800800c:	4b03      	ldr	r3, [pc, #12]	; (800801c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2040      	movs	r0, #64	; 0x40
 8008012:	4798      	blx	r3
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000458 	.word	0x20000458

08008020 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8008032:	2b01      	cmp	r3, #1
 8008034:	d005      	beq.n	8008042 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008036:	e00a      	b.n	800804e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008038:	4b07      	ldr	r3, [pc, #28]	; (8008058 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2080      	movs	r0, #128	; 0x80
 800803e:	4798      	blx	r3
            break;
 8008040:	e005      	b.n	800804e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f44f 7080 	mov.w	r0, #256	; 0x100
 800804a:	4798      	blx	r3
            break;
 800804c:	bf00      	nop
    }
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000458 	.word	0x20000458

0800805c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008064:	4b04      	ldr	r3, [pc, #16]	; (8008078 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f44f 7000 	mov.w	r0, #512	; 0x200
 800806c:	4798      	blx	r3
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000458 	.word	0x20000458

0800807c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008084:	4b03      	ldr	r3, [pc, #12]	; (8008094 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2020      	movs	r0, #32
 800808a:	4798      	blx	r3
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000458 	.word	0x20000458

08008098 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80080a0:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2004      	movs	r0, #4
 80080a6:	4798      	blx	r3
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000458 	.word	0x20000458

080080b4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2008      	movs	r0, #8
 80080c2:	4798      	blx	r3
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000458 	.word	0x20000458

080080d0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80080d8:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2010      	movs	r0, #16
 80080de:	4798      	blx	r3
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000458 	.word	0x20000458

080080ec <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80080f6:	f7f9 fba8 	bl	800184a <RBI_IsDCDC>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d112      	bne.n	8008126 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8008100:	f640 1023 	movw	r0, #2339	; 0x923
 8008104:	f7ff fe6e 	bl	8007de4 <SUBGRF_ReadRegister>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	f023 0306 	bic.w	r3, r3, #6
 8008112:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8008114:	7bfa      	ldrb	r2, [r7, #15]
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	4313      	orrs	r3, r2
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	f640 1023 	movw	r0, #2339	; 0x923
 8008122:	f7ff fe4b 	bl	8007dbc <SUBGRF_WriteRegister>
  }
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800813e:	231f      	movs	r3, #31
 8008140:	e016      	b.n	8008170 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
 8008146:	e00f      	b.n	8008168 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	4a0c      	ldr	r2, [pc, #48]	; (800817c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800814c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d205      	bcs.n	8008162 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	791b      	ldrb	r3, [r3, #4]
 8008160:	e006      	b.n	8008170 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	3301      	adds	r3, #1
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b15      	cmp	r3, #21
 800816c:	d9ec      	bls.n	8008148 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800816e:	e7fe      	b.n	800816e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	0800e50c 	.word	0x0800e50c

08008180 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800818a:	4b36      	ldr	r3, [pc, #216]	; (8008264 <SUBGRF_GetCFO+0xe4>)
 800818c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800818e:	f640 0007 	movw	r0, #2055	; 0x807
 8008192:	f7ff fe27 	bl	8007de4 <SUBGRF_ReadRegister>
 8008196:	4603      	mov	r3, r0
 8008198:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	08db      	lsrs	r3, r3, #3
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081a8:	4413      	add	r3, r2
 80081aa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80081ae:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80081b0:	7ffb      	ldrb	r3, [r7, #31]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80081b8:	7fba      	ldrb	r2, [r7, #30]
 80081ba:	7f7b      	ldrb	r3, [r7, #29]
 80081bc:	3b01      	subs	r3, #1
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	4b28      	ldr	r3, [pc, #160]	; (8008268 <SUBGRF_GetCFO+0xe8>)
 80081c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ca:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80081dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	2b07      	cmp	r3, #7
 80081e8:	d802      	bhi.n	80081f0 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80081ea:	2302      	movs	r3, #2
 80081ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80081f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	fb02 f303 	mul.w	r3, r2, r3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d802      	bhi.n	8008204 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80081fe:	2304      	movs	r3, #4
 8008200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008204:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8008210:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8008214:	f7ff fde6 	bl	8007de4 <SUBGRF_ReadRegister>
 8008218:	4603      	mov	r3, r0
 800821a:	021b      	lsls	r3, r3, #8
 800821c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008220:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8008222:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008226:	f7ff fddd 	bl	8007de4 <SUBGRF_ReadRegister>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	4313      	orrs	r3, r2
 8008232:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008244:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008248:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
 8008254:	11da      	asrs	r2, r3, #7
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	601a      	str	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	3728      	adds	r7, #40	; 0x28
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	0c0a0804 	.word	0x0c0a0804
 8008268:	01e84800 	.word	0x01e84800

0800826c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008284:	697b      	ldr	r3, [r7, #20]
}
 8008286:	4618      	mov	r0, r3
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr

08008290 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295
 80082a6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80082a8:	697b      	ldr	r3, [r7, #20]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <RFW_DeInit>:

void RFW_DeInit( void)
{
 80082ce:	b480      	push	{r7}
 80082d0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80082d2:	bf00      	nop
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr

080082da <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80082da:	b480      	push	{r7}
 80082dc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80082de:	2300      	movs	r3, #0
#endif
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr

080082e8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80082ec:	2300      	movs	r3, #0
#endif
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr

080082f6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	4603      	mov	r3, r0
 80082fe:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800830a:	b480      	push	{r7}
 800830c:	b087      	sub	sp, #28
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	460b      	mov	r3, r1
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
 800831c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800831e:	697b      	ldr	r3, [r7, #20]
}
 8008320:	4618      	mov	r0, r3
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr

0800832a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800832e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008332:	4618      	mov	r0, r3
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr

0800833a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800833a:	b480      	push	{r7}
 800833c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr

08008352 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	4603      	mov	r3, r0
 800835a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr
	...

08008368 <list_new>:
/*
 * Returns allocated list with uncounted sentinel element.
 */
struct list *list_new(bool (*compare)(void *a, void *b),
                      void (*delete_)(void *data))
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	struct list *l = malloc(sizeof(*l));
 8008372:	2010      	movs	r0, #16
 8008374:	f000 fff8 	bl	8009368 <malloc>
 8008378:	4603      	mov	r3, r0
 800837a:	60fb      	str	r3, [r7, #12]
	if (l == NULL) {
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <list_new+0x24>
		perror("list_new()");
 8008382:	4818      	ldr	r0, [pc, #96]	; (80083e4 <list_new+0x7c>)
 8008384:	f001 fdb4 	bl	8009ef0 <perror>
		return NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	e027      	b.n	80083dc <list_new+0x74>
	}

	/* A sentinel is used to elimnate edge cases everywhere else */
	struct list_node *sentinel = list_node_new(NULL ,0);
 800838c:	2100      	movs	r1, #0
 800838e:	2000      	movs	r0, #0
 8008390:	f000 f958 	bl	8008644 <list_node_new>
 8008394:	60b8      	str	r0, [r7, #8]
	if (sentinel == NULL) {
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <list_new+0x3e>
		free(l);
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 ffeb 	bl	8009378 <free>
		return NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e01a      	b.n	80083dc <list_new+0x74>
	}

	l->sentinel = sentinel;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	601a      	str	r2, [r3, #0]
	l->size = 0;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	605a      	str	r2, [r3, #4]

	sentinel->sentinel = true;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2201      	movs	r2, #1
 80083b6:	721a      	strb	r2, [r3, #8]
	sentinel->next = sentinel;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	601a      	str	r2, [r3, #0]
	sentinel->prev = sentinel;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	605a      	str	r2, [r3, #4]


	l->compare = (compare == NULL)
		? &list_default_compare
		: compare;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <list_new+0x66>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	e000      	b.n	80083d0 <list_new+0x68>
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <list_new+0x80>)
	l->compare = (compare == NULL)
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	6093      	str	r3, [r2, #8]

	l->delete_ = delete_;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	60da      	str	r2, [r3, #12]

	return l;
 80083da:	68fb      	ldr	r3, [r7, #12]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	0800e0f4 	.word	0x0800e0f4
 80083e8:	0800861d 	.word	0x0800861d

080083ec <list_insert>:
 * Inserts n at pos in O(n/2). Returns n if successful, else NULL.
 *
 * Position 0 inserts at the front and n inserts at the end in O(1).
 */
struct list_node *list_insert(struct list *self, int pos, struct list_node *n)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
	if (self == NULL) {
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <list_insert+0x1c>
		list_debug("list_insert(): self was NULL");
 80083fe:	480e      	ldr	r0, [pc, #56]	; (8008438 <list_insert+0x4c>)
 8008400:	f000 f99b 	bl	800873a <list_debug>
		return NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	e012      	b.n	800842e <list_insert+0x42>
	}

	n = list_node_link(n, list_index(self, pos));
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f89c 	bl	8008548 <list_index>
 8008410:	4603      	mov	r3, r0
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f945 	bl	80086a4 <list_node_link>
 800841a:	6078      	str	r0, [r7, #4]
	if (n)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <list_insert+0x40>
		++self->size;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	605a      	str	r2, [r3, #4]
	return n;
 800842c:	687b      	ldr	r3, [r7, #4]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	0800e100 	.word	0x0800e100

0800843c <list_search>:

/*
 * Use compare function to return found node, else NULL.
 */
struct list_node *list_search(struct list *self, void *data) 
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	struct list_node *n = list_head(self);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f856 	bl	80084f8 <list_head>
 800844c:	60f8      	str	r0, [r7, #12]
	
	while (!list_end(n)) {
 800844e:	e00e      	b.n	800846e <list_search+0x32>
		
		if (self->compare(data, n->data))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	68d2      	ldr	r2, [r2, #12]
 8008458:	4611      	mov	r1, r2
 800845a:	6838      	ldr	r0, [r7, #0]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <list_search+0x2c>
			return n;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e00c      	b.n	8008482 <list_search+0x46>
		n = n->next;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
	while (!list_end(n)) {
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f8c0 	bl	80085f4 <list_end>
 8008474:	4603      	mov	r3, r0
 8008476:	f083 0301 	eor.w	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e7      	bne.n	8008450 <list_search+0x14>
	}
	return NULL;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <list_remove>:
 * Unlinks node from list at pos, returns node (to be freed).
 *
 * 0 is front, -1 (or n - 1), both are done in O(1). Else O(n/2).
 */
void list_remove(struct list *self, struct list_node * node)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
	
	if (self == NULL) {
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <list_remove+0x18>
		//list_debug("list_delete(): self was NULL");
		printf("list_delete(): self was NULL");
 800849c:	480b      	ldr	r0, [pc, #44]	; (80084cc <list_remove+0x40>)
 800849e:	f001 fd2f 	bl	8009f00 <iprintf>
		return ;
 80084a2:	e010      	b.n	80084c6 <list_remove+0x3a>
	}

	if(node == NULL)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00c      	beq.n	80084c4 <list_remove+0x38>
	{
		
		return ;
	}
		
	struct list_node *n = list_node_unlink(node);
 80084aa:	6838      	ldr	r0, [r7, #0]
 80084ac:	f000 f928 	bl	8008700 <list_node_unlink>
 80084b0:	60f8      	str	r0, [r7, #12]
	if (n)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d006      	beq.n	80084c6 <list_remove+0x3a>
	{
		--self->size;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	1e5a      	subs	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	e000      	b.n	80084c6 <list_remove+0x3a>
		return ;
 80084c4:	bf00      	nop
	
	}

}
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	0800e120 	.word	0x0800e120

080084d0 <list_push_back>:

/*
 * Pushes n to back of list in O(1).
 */
struct list_node *list_push_back(struct list *self, struct list_node *n)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
	return list_insert(self, list_size(self), n);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f876 	bl	80085cc <list_size>
 80084e0:	4603      	mov	r3, r0
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff ff80 	bl	80083ec <list_insert>
 80084ec:	4603      	mov	r3, r0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <list_head>:

/*
 * Returns pointer to head node of list in O(1).
 */
struct list_node *list_head(struct list *self)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <list_head+0x18>
		list_debug("list_head(): self was NULL");
 8008506:	480e      	ldr	r0, [pc, #56]	; (8008540 <list_head+0x48>)
 8008508:	f000 f917 	bl	800873a <list_debug>
		return NULL;
 800850c:	2300      	movs	r3, #0
 800850e:	e012      	b.n	8008536 <list_head+0x3e>
	}

	if (!list_end(self->sentinel)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f86d 	bl	80085f4 <list_end>
 800851a:	4603      	mov	r3, r0
 800851c:	f083 0301 	eor.w	r3, r3, #1
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <list_head+0x38>
		list_debug("list_head(): sentinel was malformed");
 8008526:	4807      	ldr	r0, [pc, #28]	; (8008544 <list_head+0x4c>)
 8008528:	f000 f907 	bl	800873a <list_debug>
		return NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	e002      	b.n	8008536 <list_head+0x3e>
	}

	return self->sentinel->next;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	0800e140 	.word	0x0800e140
 8008544:	0800e15c 	.word	0x0800e15c

08008548 <list_index>:
 * Returns node at pos in O(n/2).
 *
 * Iterates from the closest end. Supports negative pos arguments.
 */
struct list_node *list_index(struct list *self, int pos)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	int s = list_size(self);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f83a 	bl	80085cc <list_size>
 8008558:	4603      	mov	r3, r0
 800855a:	60bb      	str	r3, [r7, #8]

	/* handle negative positions */
	if (pos < 0)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	da03      	bge.n	800856a <list_index+0x22>
		pos += s;
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4413      	add	r3, r2
 8008568:	603b      	str	r3, [r7, #0]

	struct list_node *n = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]


	if (pos <= s/2) {
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	0fda      	lsrs	r2, r3, #31
 8008572:	4413      	add	r3, r2
 8008574:	105b      	asrs	r3, r3, #1
 8008576:	461a      	mov	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	4293      	cmp	r3, r2
 800857c:	dc11      	bgt.n	80085a2 <list_index+0x5a>
		n = list_head(self);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ffba 	bl	80084f8 <list_head>
 8008584:	6178      	str	r0, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008586:	2300      	movs	r3, #0
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	e005      	b.n	8008598 <list_index+0x50>
			n = n->next;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < pos; ++i)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3301      	adds	r3, #1
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	dbf5      	blt.n	800858c <list_index+0x44>
 80085a0:	e00f      	b.n	80085c2 <list_index+0x7a>
	} else {
		n = self->sentinel; /* for push_back */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e005      	b.n	80085ba <list_index+0x72>
			n = n->prev;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	617b      	str	r3, [r7, #20]
		for (int i = s; i > pos; --i)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	dcf5      	bgt.n	80085ae <list_index+0x66>
	}

	return n;
 80085c2:	697b      	ldr	r3, [r7, #20]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <list_size>:

/*
 * Returns the number of nodes in list. Does not count the sentinel.
 */
size_t list_size(struct list *self)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	if (self == NULL) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <list_size+0x18>
		list_debug("list_size(): self was NULL");
 80085da:	4805      	ldr	r0, [pc, #20]	; (80085f0 <list_size+0x24>)
 80085dc:	f000 f8ad 	bl	800873a <list_debug>
		return 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e001      	b.n	80085e8 <list_size+0x1c>
	}

	return self->size;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	0800e1c0 	.word	0x0800e1c0

080085f4 <list_end>:
 *
 * This is an indication that an iteration has reached the end of the
 * list. *Not* the last data-carrying node of the list.
 */
bool list_end(struct list_node *n)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	if (n == NULL) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <list_end+0x18>
		list_debug("list_end(): n was NULL");
 8008602:	4805      	ldr	r0, [pc, #20]	; (8008618 <list_end+0x24>)
 8008604:	f000 f899 	bl	800873a <list_debug>
		return false;
 8008608:	2300      	movs	r3, #0
 800860a:	e001      	b.n	8008610 <list_end+0x1c>
	}

	return n->sentinel;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	7a1b      	ldrb	r3, [r3, #8]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800e1dc 	.word	0x0800e1dc

0800861c <list_default_compare>:

/*
 * Default comparison for list of strings.
 */
static bool list_default_compare(void *a, void *b)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	return (strcmp((char *)a, (char *)b) == 0);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f7 fda9 	bl	8000180 <strcmp>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <list_node_new>:
 * Allocates new list_node with data.
 *
 * Sentinel flag is false. The next and prev pointers are null.
 */
struct list_node *list_node_new(void *data , size_t siz)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
	struct list_node *n = malloc(sizeof(*n));
 800864e:	2010      	movs	r0, #16
 8008650:	f000 fe8a 	bl	8009368 <malloc>
 8008654:	4603      	mov	r3, r0
 8008656:	60fb      	str	r3, [r7, #12]
	if (n == NULL) {
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <list_node_new+0x24>
		perror("list_node_new()");
 800865e:	4810      	ldr	r0, [pc, #64]	; (80086a0 <list_node_new+0x5c>)
 8008660:	f001 fc46 	bl	8009ef0 <perror>
		return NULL;
 8008664:	2300      	movs	r3, #0
 8008666:	e017      	b.n	8008698 <list_node_new+0x54>
	}

	n->sentinel = false;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	721a      	strb	r2, [r3, #8]
	n->next = NULL;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
	n->prev = NULL;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	605a      	str	r2, [r3, #4]
	n->data =  malloc(siz) ;//data;
 800867a:	6838      	ldr	r0, [r7, #0]
 800867c:	f000 fe74 	bl	8009368 <malloc>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	60da      	str	r2, [r3, #12]
	memcpy(n->data , data , siz);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fe79 	bl	8009388 <memcpy>
	return n;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	0800e268 	.word	0x0800e268

080086a4 <list_node_link>:
 * prepends (think cons).
 *
 * Size is not incremented!
 */
struct list_node *list_node_link(struct list_node *b, struct list_node *c)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
	if (b == NULL) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <list_node_link+0x1a>
		list_debug("list_node_link(): b was NULL");
 80086b4:	4810      	ldr	r0, [pc, #64]	; (80086f8 <list_node_link+0x54>)
 80086b6:	f000 f840 	bl	800873a <list_debug>
		return NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e017      	b.n	80086ee <list_node_link+0x4a>
	}

	if (c == NULL) {
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <list_node_link+0x2a>
		list_debug("list_node_link(): c was NULL");
 80086c4:	480d      	ldr	r0, [pc, #52]	; (80086fc <list_node_link+0x58>)
 80086c6:	f000 f838 	bl	800873a <list_debug>
		return NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e00f      	b.n	80086ee <list_node_link+0x4a>
	}

	struct list_node *a = c->prev;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

	a->next = b;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	601a      	str	r2, [r3, #0]
	b->prev = a;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]
	b->next = c;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	601a      	str	r2, [r3, #0]
	c->prev = b;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	605a      	str	r2, [r3, #4]

	return b;
 80086ec:	687b      	ldr	r3, [r7, #4]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	0800e278 	.word	0x0800e278
 80086fc:	0800e298 	.word	0x0800e298

08008700 <list_node_unlink>:
 * Nodes a and c are found from b. Yay double links.
 *
 * Size is not decremented!
 */
struct list_node *list_node_unlink(struct list_node *b)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	if (list_end(b)) {
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff ff73 	bl	80085f4 <list_end>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <list_node_unlink+0x18>
		return NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	e00c      	b.n	8008732 <list_node_unlink+0x32>
	}

	struct list_node *a = b->prev;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	60fb      	str	r3, [r7, #12]
	struct list_node *c = b->next;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60bb      	str	r3, [r7, #8]

	a->next = c;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	601a      	str	r2, [r3, #0]
	c->prev = a;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	605a      	str	r2, [r3, #4]

	return b;
 8008730:	687b      	ldr	r3, [r7, #4]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <list_debug>:

static void list_debug(const char *format, ...)
{
 800873a:	b40f      	push	{r0, r1, r2, r3}
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	fprintf(stderr, "debug: ");
	vfprintf(stderr, format, ap);
	fprintf(stderr, "\n");

	va_end(ap);
}
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	b004      	add	sp, #16
 800874a:	4770      	bx	lr

0800874c <find_packet_by_Id>:
	State_tran_valide_packet = true ;
}
*/

bool find_packet_by_Id(void* packet_id ,void* arg2 )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
    int id = (int)packet_id;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60fb      	str	r3, [r7, #12]
    packet_t * p2 = (packet_t*)arg2;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	60bb      	str	r3, [r7, #8]

    if(id == p2->id)
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	789b      	ldrb	r3, [r3, #2]
 8008762:	461a      	mov	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4293      	cmp	r3, r2
 8008768:	d101      	bne.n	800876e <find_packet_by_Id+0x22>
    {
        return true ;
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <find_packet_by_Id+0x24>
    }
    else{
        return false ;
 800876e:	2300      	movs	r3, #0
    }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <rx_find_by_id>:

bool rx_find_by_id(void * pid , void * arg2)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
	int id = (int)pid;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60fb      	str	r3, [r7, #12]
	packet_t * p2 = (packet_t*)arg2;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	60bb      	str	r3, [r7, #8]

	if(id == p2->id)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	789b      	ldrb	r3, [r3, #2]
 8008790:	461a      	mov	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4293      	cmp	r3, r2
 8008796:	d101      	bne.n	800879c <rx_find_by_id+0x22>
	{
		return true ;
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <rx_find_by_id+0x24>
	}
	else{
		return false ;
 800879c:	2300      	movs	r3, #0
	}
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <ll_init>:
/**
 * initialize Rx and Tx lists of packets
 * and mode device in Receive Mode
 */
int ll_init(u8 addr)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
	device_address = addr ;
 80087b2:	4a0d      	ldr	r2, [pc, #52]	; (80087e8 <ll_init+0x40>)
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	7013      	strb	r3, [r2, #0]

	Tx_packet_list = list_new(&find_packet_by_Id , &free) ;//find packet by id to remove it later
 80087b8:	490c      	ldr	r1, [pc, #48]	; (80087ec <ll_init+0x44>)
 80087ba:	480d      	ldr	r0, [pc, #52]	; (80087f0 <ll_init+0x48>)
 80087bc:	f7ff fdd4 	bl	8008368 <list_new>
 80087c0:	4603      	mov	r3, r0
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <ll_init+0x4c>)
 80087c4:	6013      	str	r3, [r2, #0]
	Rx_packet_list = list_new(&rx_find_by_id , &free) ;//find packet by src
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <ll_init+0x44>)
 80087c8:	480b      	ldr	r0, [pc, #44]	; (80087f8 <ll_init+0x50>)
 80087ca:	f7ff fdcd 	bl	8008368 <list_new>
 80087ce:	4603      	mov	r3, r0
 80087d0:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <ll_init+0x54>)
 80087d2:	6013      	str	r3, [r2, #0]


	Radio.Rx(LL_RX_TIMEOUT);
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <ll_init+0x58>)
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087dc:	4798      	blx	r3

	return 0 ;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2000000a 	.word	0x2000000a
 80087ec:	08009379 	.word	0x08009379
 80087f0:	0800874d 	.word	0x0800874d
 80087f4:	200005ec 	.word	0x200005ec
 80087f8:	0800877b 	.word	0x0800877b
 80087fc:	200005e8 	.word	0x200005e8
 8008800:	0800e484 	.word	0x0800e484

08008804 <ll_send_packet>:

static int ll_send_packet(u8 dest,u8 type ,u8 id, u8 * data ,u8 len ,ask_received_callback CallBack)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b091      	sub	sp, #68	; 0x44
 8008808:	af04      	add	r7, sp, #16
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4603      	mov	r3, r0
 800880e:	71fb      	strb	r3, [r7, #7]
 8008810:	460b      	mov	r3, r1
 8008812:	71bb      	strb	r3, [r7, #6]
 8008814:	4613      	mov	r3, r2
 8008816:	717b      	strb	r3, [r7, #5]
	if(list_size(Tx_packet_list) >= TX_PACKET_LIST_SIZE )
 8008818:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <ll_send_packet+0x84>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fed5 	bl	80085cc <list_size>
 8008822:	4603      	mov	r3, r0
 8008824:	2b09      	cmp	r3, #9
 8008826:	d902      	bls.n	800882e <ll_send_packet+0x2a>
	{
		return BUFFER_FULL ;
 8008828:	f06f 0309 	mvn.w	r3, #9
 800882c:	e028      	b.n	8008880 <ll_send_packet+0x7c>
	}
	
	packet_t  tmp  ;
	packet_holder_t tmp_holder ;
	tmp_holder.Ask_callback = CallBack ;
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	623b      	str	r3, [r7, #32]
	
	packet(&tmp , device_address , dest , type ,id,data , len);
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <ll_send_packet+0x88>)
 8008834:	7819      	ldrb	r1, [r3, #0]
 8008836:	79bc      	ldrb	r4, [r7, #6]
 8008838:	79fa      	ldrb	r2, [r7, #7]
 800883a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800883e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	797b      	ldrb	r3, [r7, #5]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4623      	mov	r3, r4
 800884e:	f000 fb5d 	bl	8008f0c <packet>
	
	tmp_holder.packet = tmp ;
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800885a:	ca07      	ldmia	r2, {r0, r1, r2}
 800885c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tmp_holder.number_of_transmition = 0 ;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]
	
	list_push_back(Tx_packet_list , list_node_new(&tmp_holder ,sizeof(packet_holder_t))) ;
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <ll_send_packet+0x84>)
 8008866:	681c      	ldr	r4, [r3, #0]
 8008868:	f107 0308 	add.w	r3, r7, #8
 800886c:	211c      	movs	r1, #28
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fee8 	bl	8008644 <list_node_new>
 8008874:	4603      	mov	r3, r0
 8008876:	4619      	mov	r1, r3
 8008878:	4620      	mov	r0, r4
 800887a:	f7ff fe29 	bl	80084d0 <list_push_back>
	
	(void) tmp ;
	(void) tmp_holder ;

	return 0 ;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3734      	adds	r7, #52	; 0x34
 8008884:	46bd      	mov	sp, r7
 8008886:	bd90      	pop	{r4, r7, pc}
 8008888:	200005ec 	.word	0x200005ec
 800888c:	2000000a 	.word	0x2000000a

08008890 <ll_send_ASK>:

int ll_send_ASK(u8 dest ,u8 id)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af02      	add	r7, sp, #8
 8008896:	4603      	mov	r3, r0
 8008898:	460a      	mov	r2, r1
 800889a:	71fb      	strb	r3, [r7, #7]
 800889c:	4613      	mov	r3, r2
 800889e:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_ASK ,id ,NULL , 0 ,NULL);
 80088a0:	79ba      	ldrb	r2, [r7, #6]
 80088a2:	79f8      	ldrb	r0, [r7, #7]
 80088a4:	2300      	movs	r3, #0
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	2300      	movs	r3, #0
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	2300      	movs	r3, #0
 80088ae:	2102      	movs	r1, #2
 80088b0:	f7ff ffa8 	bl	8008804 <ll_send_packet>
 80088b4:	4603      	mov	r3, r0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <ll_send_NANK>:

int ll_send_NANK(u8 dest,u8 id)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af02      	add	r7, sp, #8
 80088c4:	4603      	mov	r3, r0
 80088c6:	460a      	mov	r2, r1
 80088c8:	71fb      	strb	r3, [r7, #7]
 80088ca:	4613      	mov	r3, r2
 80088cc:	71bb      	strb	r3, [r7, #6]
	return ll_send_packet(dest , PACK_TYPE_NANK,id ,NULL , 0 ,NULL);
 80088ce:	79ba      	ldrb	r2, [r7, #6]
 80088d0:	79f8      	ldrb	r0, [r7, #7]
 80088d2:	2300      	movs	r3, #0
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	2300      	movs	r3, #0
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	2103      	movs	r1, #3
 80088de:	f7ff ff91 	bl	8008804 <ll_send_packet>
 80088e2:	4603      	mov	r3, r0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <ll_send_to>:

int ll_send_to(u8 dest ,u8 *data ,int data_len ,ask_received_callback CallBack )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
	u8 id = sys_random() ;
 80088fc:	f7f8 fd22 	bl	8001344 <sys_random>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]

	return ll_send_packet(dest , PACK_TYPE_DATA,id ,data , data_len , CallBack);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	7df9      	ldrb	r1, [r7, #23]
 800890a:	7bf8      	ldrb	r0, [r7, #15]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	9201      	str	r2, [sp, #4]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	460a      	mov	r2, r1
 8008916:	2101      	movs	r1, #1
 8008918:	f7ff ff74 	bl	8008804 <ll_send_packet>
 800891c:	4603      	mov	r3, r0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <get_tx_size>:

int get_tx_size()
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
	return list_size(Tx_packet_list)  ;
 800892c:	4b03      	ldr	r3, [pc, #12]	; (800893c <get_tx_size+0x14>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fe4b 	bl	80085cc <list_size>
 8008936:	4603      	mov	r3, r0
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	200005ec 	.word	0x200005ec

08008940 <get_rx_size>:

int get_rx_size()
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
	return list_size(Rx_packet_list)  ;
 8008944:	4b03      	ldr	r3, [pc, #12]	; (8008954 <get_rx_size+0x14>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fe3f 	bl	80085cc <list_size>
 800894e:	4603      	mov	r3, r0
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	200005e8 	.word	0x200005e8

08008958 <ll_transmit>:

void ll_transmit(void) 
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
	//pop from TX queue , serialize and send to network
	// no data in tx list exit 
	if(list_size(Tx_packet_list) == 0)
 800895e:	4b4d      	ldr	r3, [pc, #308]	; (8008a94 <ll_transmit+0x13c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fe32 	bl	80085cc <list_size>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 808d 	beq.w	8008a8a <ll_transmit+0x132>
	// in case there is  data 
#ifdef PROT_DEBUG
	printf("\nNetwork Transmit number of Packet %d\n" ,list_size(Tx_packet_list) );
#endif
	// add timer here
	while(network_transmit_index < list_size(Tx_packet_list))
 8008970:	e073      	b.n	8008a5a <ll_transmit+0x102>
	{

		struct list_node * node = list_index(Tx_packet_list , network_transmit_index) ;
 8008972:	4b48      	ldr	r3, [pc, #288]	; (8008a94 <ll_transmit+0x13c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a48      	ldr	r2, [pc, #288]	; (8008a98 <ll_transmit+0x140>)
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fde3 	bl	8008548 <list_index>
 8008982:	6178      	str	r0, [r7, #20]
		packet_holder_t	* holder = (packet_holder_t*)node->data ;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	613b      	str	r3, [r7, #16]
		packet_t * pack = &(holder)->packet ;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	60fb      	str	r3, [r7, #12]
#ifdef PROT_DEBUG
		debug_packet(pack) ;
#endif
		//packet serialize and send to hardware 
		int packet_size = packet_get_size(pack) ;
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fcad 	bl	80092ee <packet_get_size>
 8008994:	60b8      	str	r0, [r7, #8]

		u8 * buff = (u8 *) malloc(sizeof(u8) * packet_size) ;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fce5 	bl	8009368 <malloc>
 800899e:	4603      	mov	r3, r0
 80089a0:	607b      	str	r3, [r7, #4]

		packet_serialize(pack , buff) ;
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fba7 	bl	80090f8 <packet_serialize>

		//send to network
		if(buff != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <ll_transmit+0x92>
		{
			network_transmit_index++;
 80089b0:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <ll_transmit+0x140>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3301      	adds	r3, #1
 80089b6:	4a38      	ldr	r2, [pc, #224]	; (8008a98 <ll_transmit+0x140>)
 80089b8:	6013      	str	r3, [r2, #0]
			holder->number_of_transmition++ ;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	615a      	str	r2, [r3, #20]
			Radio.Send(buff , packet_size) ;
 80089c4:	4b35      	ldr	r3, [pc, #212]	; (8008a9c <ll_transmit+0x144>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	4611      	mov	r1, r2
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
			//wait for the transmition to complete
			while(tarnsmition_done == false);
 80089d2:	bf00      	nop
 80089d4:	4b32      	ldr	r3, [pc, #200]	; (8008aa0 <ll_transmit+0x148>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f083 0301 	eor.w	r3, r3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f8      	bne.n	80089d4 <ll_transmit+0x7c>
			//break ;
			free(buff) ;
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fcc8 	bl	8009378 <free>
 80089e8:	e005      	b.n	80089f6 <ll_transmit+0x9e>
		}
		else if(buff == NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <ll_transmit+0x9e>
		{
			printf("\npacket_serialize FAILED\n");
 80089f0:	482c      	ldr	r0, [pc, #176]	; (8008aa4 <ll_transmit+0x14c>)
 80089f2:	f001 fb1f 	bl	800a034 <puts>
		}

		

		tarnsmition_done = false ;
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <ll_transmit+0x148>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
		/*
		 * if packet is a NANK then remove the packet from Tx list
		 */
		//printf("\nclear tx done for next packet\n");
		if(pack->type == PACK_TYPE_NANK)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	78db      	ldrb	r3, [r3, #3]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d10e      	bne.n	8008a22 <ll_transmit+0xca>
		{
#ifdef PROT_DEBUG
			printf("\rm NANK Packet\n");
#endif
			list_remove(Tx_packet_list ,node) ;
 8008a04:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <ll_transmit+0x13c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6979      	ldr	r1, [r7, #20]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fd3e 	bl	800848c <list_remove>
			//free(pack->payload) ;
			free(pack) ;
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fcb1 	bl	8009378 <free>
			free(holder);
 8008a16:	6938      	ldr	r0, [r7, #16]
 8008a18:	f000 fcae 	bl	8009378 <free>
			free(node) ;
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f000 fcab 	bl	8009378 <free>
		// should remove packets with number of transmition >= 2 (packet transmited 3 time) 
		
		// can define a time out for the packet to leave the list 

		// remove the packet that sent equal or more than the maximum
		if(holder->number_of_transmition >= MAX_NUMBER_OF_TRANSMITION)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	dd17      	ble.n	8008a5a <ll_transmit+0x102>
		{
#ifdef PROT_DEBUG

			printf("FREEING MEMORY :packet transmitted 5 remove from Tx\n");
#endif
			list_remove(Tx_packet_list , node) ;
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <ll_transmit+0x13c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6979      	ldr	r1, [r7, #20]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fd2b 	bl	800848c <list_remove>
			if(pack->type == PACK_TYPE_DATA)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	78db      	ldrb	r3, [r3, #3]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d104      	bne.n	8008a48 <ll_transmit+0xf0>
			{
				free(pack->payload) ;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fc98 	bl	8009378 <free>
			}

			free(pack) ;
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 fc95 	bl	8009378 <free>
			free(holder);
 8008a4e:	6938      	ldr	r0, [r7, #16]
 8008a50:	f000 fc92 	bl	8009378 <free>
			free(node);
 8008a54:	6978      	ldr	r0, [r7, #20]
 8008a56:	f000 fc8f 	bl	8009378 <free>
	while(network_transmit_index < list_size(Tx_packet_list))
 8008a5a:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <ll_transmit+0x13c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fdb4 	bl	80085cc <list_size>
 8008a64:	4602      	mov	r2, r0
 8008a66:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <ll_transmit+0x140>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d881      	bhi.n	8008972 <ll_transmit+0x1a>

#ifdef PROT_DEBUG
	printf("\nNetwork Transmit Done\n");
#endif

	if(network_transmit_index >= list_size(Tx_packet_list))
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <ll_transmit+0x13c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fdaa 	bl	80085cc <list_size>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <ll_transmit+0x140>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d804      	bhi.n	8008a8c <ll_transmit+0x134>
	{
		network_transmit_index = 0 ;	
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <ll_transmit+0x140>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	e000      	b.n	8008a8c <ll_transmit+0x134>
		return ;
 8008a8a:	bf00      	nop
	}
}
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200005ec 	.word	0x200005ec
 8008a98:	2000045c 	.word	0x2000045c
 8008a9c:	0800e484 	.word	0x0800e484
 8008aa0:	20000468 	.word	0x20000468
 8008aa4:	0800e2b8 	.word	0x0800e2b8

08008aa8 <ll_receive>:
	}
}


void ll_receive(u8 * payload , int size)
{
 8008aa8:	b590      	push	{r4, r7, lr}
 8008aaa:	b091      	sub	sp, #68	; 0x44
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]

	//should check packet for duplication and may be respond to corrupt packet
	packet_t p;
	if(packet_desirialize(payload , size , &p) == PACK_OK)
 8008ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fb78 	bl	80091b0 <packet_desirialize>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d152      	bne.n	8008b6c <ll_receive+0xc4>
	{
		//if the packet is for this device add it to rx list
		if(p.dest == device_address && list_size(Rx_packet_list) < RX_PACKET_LIST_SIZE )
 8008ac6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8008aca:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <ll_receive+0xdc>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d14f      	bne.n	8008b72 <ll_receive+0xca>
 8008ad2:	4b2d      	ldr	r3, [pc, #180]	; (8008b88 <ll_receive+0xe0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fd78 	bl	80085cc <list_size>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d847      	bhi.n	8008b72 <ll_receive+0xca>
		{
			//remove duplication
			if(list_size(Rx_packet_list) > 0)
 8008ae2:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <ll_receive+0xe0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fd70 	bl	80085cc <list_size>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d021      	beq.n	8008b36 <ll_receive+0x8e>
			{
				struct list_node *n = list_search(Rx_packet_list,(void*)p.id) ;
 8008af2:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <ll_receive+0xe0>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fc9d 	bl	800843c <list_search>
 8008b02:	63f8      	str	r0, [r7, #60]	; 0x3c
				if(n != NULL )
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d015      	beq.n	8008b36 <ll_receive+0x8e>
				{
					packet_holder_t * holder = n->data ;
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	63bb      	str	r3, [r7, #56]	; 0x38
					packet_t * pack = (packet_t*) &(holder)->packet ;
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34

					if((pack->type == p.type) && (pack->payload_length == p.payload_length))
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	78da      	ldrb	r2, [r3, #3]
 8008b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d10a      	bne.n	8008b36 <ll_receive+0x8e>
 8008b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b22:	791a      	ldrb	r2, [r3, #4]
 8008b24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d104      	bne.n	8008b36 <ll_receive+0x8e>
					{
						//duplication
#ifdef PROT_DEBUG
						printf("duplication \n");
#endif
						free(p.payload);
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fc22 	bl	8009378 <free>
 8008b34:	e022      	b.n	8008b7c <ll_receive+0xd4>
					}
				}
			}

			packet_holder_t packet_holder;
			packet_holder.packet = p ;
 8008b36:	f107 030c 	add.w	r3, r7, #12
 8008b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			packet_holder.recv_time = sys_get_tick() ;
 8008b44:	f7f8 fbf7 	bl	8001336 <sys_get_tick>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	61fb      	str	r3, [r7, #28]
			packet_holder.number_of_transmition = 0 ;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	623b      	str	r3, [r7, #32]
			list_push_back(Rx_packet_list , list_node_new(&packet_holder , sizeof(packet_holder_t))) ;
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <ll_receive+0xe0>)
 8008b52:	681c      	ldr	r4, [r3, #0]
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	211c      	movs	r1, #28
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fd72 	bl	8008644 <list_node_new>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4619      	mov	r1, r3
 8008b64:	4620      	mov	r0, r4
 8008b66:	f7ff fcb3 	bl	80084d0 <list_push_back>
 8008b6a:	e002      	b.n	8008b72 <ll_receive+0xca>
		}
	}

	else
	{
		printf("packet corrupt\n");
 8008b6c:	4807      	ldr	r0, [pc, #28]	; (8008b8c <ll_receive+0xe4>)
 8008b6e:	f001 fa61 	bl	800a034 <puts>
	}
	(void) p ;

	number_of_received_packet++; // this variable to count number of coming packet
 8008b72:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <ll_receive+0xe8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	4a05      	ldr	r2, [pc, #20]	; (8008b90 <ll_receive+0xe8>)
 8008b7a:	6013      	str	r3, [r2, #0]

}
 8008b7c:	3744      	adds	r7, #68	; 0x44
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd90      	pop	{r4, r7, pc}
 8008b82:	bf00      	nop
 8008b84:	2000000a 	.word	0x2000000a
 8008b88:	200005e8 	.word	0x200005e8
 8008b8c:	0800e2d4 	.word	0x0800e2d4
 8008b90:	20000464 	.word	0x20000464

08008b94 <ll_process_received>:

void ll_process_received()
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af00      	add	r7, sp, #0
	//can add a timer to break the loop
	//parse rx list for ask and nank packet or data packets
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008b9a:	e0d0      	b.n	8008d3e <ll_process_received+0x1aa>
	{

		struct list_node * n = list_index(Rx_packet_list ,rx_packet_index);
 8008b9c:	4b76      	ldr	r3, [pc, #472]	; (8008d78 <ll_process_received+0x1e4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a76      	ldr	r2, [pc, #472]	; (8008d7c <ll_process_received+0x1e8>)
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fcce 	bl	8008548 <list_index>
 8008bac:	6278      	str	r0, [r7, #36]	; 0x24
		packet_holder_t * holder = (packet_holder_t *) n->data ;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	623b      	str	r3, [r7, #32]

		packet_t * packet = (packet_t *) &(holder)->packet ;
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	61fb      	str	r3, [r7, #28]

		//debug_packet(packet) ;
		if(sys_get_tick() - holder->recv_time >= 5000 )
 8008bb8:	f7f8 fbbd 	bl	8001336 <sys_get_tick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	f241 3287 	movw	r2, #4999	; 0x1387
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d91a      	bls.n	8008c02 <ll_process_received+0x6e>
		{
			list_remove(Rx_packet_list , n);
 8008bcc:	4b6a      	ldr	r3, [pc, #424]	; (8008d78 <ll_process_received+0x1e4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fc5a 	bl	800848c <list_remove>
			printf("Rx packet timeout\n");
 8008bd8:	4869      	ldr	r0, [pc, #420]	; (8008d80 <ll_process_received+0x1ec>)
 8008bda:	f001 fa2b 	bl	800a034 <puts>
			if(packet->payload != NULL)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <ll_process_received+0x5c>
			{
				free(packet->payload) ;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fbc4 	bl	8009378 <free>
			}

			free(holder) ;
 8008bf0:	6a38      	ldr	r0, [r7, #32]
 8008bf2:	f000 fbc1 	bl	8009378 <free>
			free(n) ;
 8008bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bf8:	f000 fbbe 	bl	8009378 <free>
			printf("removed from list\n");
 8008bfc:	4861      	ldr	r0, [pc, #388]	; (8008d84 <ll_process_received+0x1f0>)
 8008bfe:	f001 fa19 	bl	800a034 <puts>
		}

		if(packet->type == PACK_TYPE_DATA)
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d110      	bne.n	8008c2c <ll_process_received+0x98>
			// ASK packet should be sent ,the data will be read later
			// by recv_from function ,also packet should be removed after certain time

			//number_of_transmition used to assure that a ASK has been send to confirm data recv
			//data packet will be removed by ll_get_recv_from
			if( holder->number_of_transmition == 0)
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 8090 	bne.w	8008d34 <ll_process_received+0x1a0>
			{
#ifdef PROT_DEBUG
				printf("ASK has been send for id = %d\n" , packet->id);
#endif

				ll_send_ASK(packet->src , packet->id) ;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	789b      	ldrb	r3, [r3, #2]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7ff fe36 	bl	8008890 <ll_send_ASK>
				holder->number_of_transmition = 1 ;
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2201      	movs	r2, #1
 8008c28:	615a      	str	r2, [r3, #20]
 8008c2a:	e083      	b.n	8008d34 <ll_process_received+0x1a0>
			}

		}

		//ASK confirm Data recv , so first look for a data match in tx list
		else if(packet->type == PACK_TYPE_ASK)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	78db      	ldrb	r3, [r3, #3]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d148      	bne.n	8008cc6 <ll_process_received+0x132>
		{
			// search for packet by id in tx list
			struct list_node * tx_data_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008c34:	4b54      	ldr	r3, [pc, #336]	; (8008d88 <ll_process_received+0x1f4>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	789b      	ldrb	r3, [r3, #2]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7ff fbfc 	bl	800843c <list_search>
 8008c44:	60f8      	str	r0, [r7, #12]

			//if no match in tx list drop the packet
			if(tx_data_node == NULL )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10f      	bne.n	8008c6c <ll_process_received+0xd8>
			{
				//drop the ASK packet from Rx list


				list_remove(Rx_packet_list , n);
 8008c4c:	4b4a      	ldr	r3, [pc, #296]	; (8008d78 <ll_process_received+0x1e4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fc1a 	bl	800848c <list_remove>

				//free memory
				//free(packet->payload) ;
				free(packet) ;
 8008c58:	69f8      	ldr	r0, [r7, #28]
 8008c5a:	f000 fb8d 	bl	8009378 <free>
				free(holder) ;
 8008c5e:	6a38      	ldr	r0, [r7, #32]
 8008c60:	f000 fb8a 	bl	8009378 <free>
				free(n);
 8008c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c66:	f000 fb87 	bl	8009378 <free>
 8008c6a:	e063      	b.n	8008d34 <ll_process_received+0x1a0>
			else
			{
#ifdef PROT_DEBUG
				printf("ASK match packet ");
#endif
				packet_holder_t* h =(packet_holder_t*)tx_data_node->data ;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	60bb      	str	r3, [r7, #8]
				packet_t * pack_p = (packet_t *)&(h->packet);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	607b      	str	r3, [r7, #4]
				if(pack_p->type == PACK_TYPE_DATA)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	78db      	ldrb	r3, [r3, #3]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d15a      	bne.n	8008d34 <ll_process_received+0x1a0>
				{
					//send NANK
					ll_send_NANK(packet->src , packet->id) ;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	781a      	ldrb	r2, [r3, #0]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	789b      	ldrb	r3, [r3, #2]
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7ff fe18 	bl	80088be <ll_send_NANK>

					//execute callback function
					if(h->Ask_callback != NULL)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <ll_process_received+0x108>
					{
						h->Ask_callback();
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	4798      	blx	r3
					}
					//remove data from Tx list to do not get send again

					list_remove( Tx_packet_list ,tx_data_node) ;
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <ll_process_received+0x1f4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff fbf2 	bl	800848c <list_remove>
					//free memory
					free(pack_p->payload) ;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fb63 	bl	8009378 <free>
					free(pack_p) ;
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fb60 	bl	8009378 <free>
					free(h);
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f000 fb5d 	bl	8009378 <free>
					free(tx_data_node) ;
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fb5a 	bl	8009378 <free>
 8008cc4:	e036      	b.n	8008d34 <ll_process_received+0x1a0>

			}

		}

		else if(packet->type == PACK_TYPE_NANK)
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	78db      	ldrb	r3, [r3, #3]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d132      	bne.n	8008d34 <ll_process_received+0x1a0>
			// check the packet id in Tx list if exist resent the data and remove the packet
			// NANK indicate data received by receiver
#ifdef PROT_DEBUG
			printf("\nNANK RECV  id %d\n" , packet->id);
#endif
			struct list_node * tx_ask_node = list_search(Tx_packet_list ,(void*) packet->id) ;
 8008cce:	4b2e      	ldr	r3, [pc, #184]	; (8008d88 <ll_process_received+0x1f4>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	789b      	ldrb	r3, [r3, #2]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4610      	mov	r0, r2
 8008cda:	f7ff fbaf 	bl	800843c <list_search>
 8008cde:	61b8      	str	r0, [r7, #24]

			if(tx_ask_node != NULL)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d017      	beq.n	8008d16 <ll_process_received+0x182>
			{
				packet_holder_t * p_holder = tx_ask_node->data ;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	617b      	str	r3, [r7, #20]
				packet_t * ask_packet = &(p_holder)->packet ;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	613b      	str	r3, [r7, #16]
				if( ask_packet->type == PACK_TYPE_ASK )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	78db      	ldrb	r3, [r3, #3]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d10e      	bne.n	8008d16 <ll_process_received+0x182>
				{
					//remove the ask packet from
#ifdef PROT_DEBUG
					printf("transmition end\n");
#endif
					list_remove(Tx_packet_list , tx_ask_node) ;
 8008cf8:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <ll_process_received+0x1f4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69b9      	ldr	r1, [r7, #24]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff fbc4 	bl	800848c <list_remove>

					//release memory

					free(ask_packet);
 8008d04:	6938      	ldr	r0, [r7, #16]
 8008d06:	f000 fb37 	bl	8009378 <free>
					free(p_holder) ;
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f000 fb34 	bl	8009378 <free>
					free(tx_ask_node) ;
 8008d10:	69b8      	ldr	r0, [r7, #24]
 8008d12:	f000 fb31 	bl	8009378 <free>
			{
				// in case of null remove the packet
			}

			// in case of NANK remove the packet from Rx list
			list_remove(Rx_packet_list , n) ;
 8008d16:	4b18      	ldr	r3, [pc, #96]	; (8008d78 <ll_process_received+0x1e4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff fbb5 	bl	800848c <list_remove>
			free(packet);
 8008d22:	69f8      	ldr	r0, [r7, #28]
 8008d24:	f000 fb28 	bl	8009378 <free>
			free(holder);
 8008d28:	6a38      	ldr	r0, [r7, #32]
 8008d2a:	f000 fb25 	bl	8009378 <free>
			free(n);
 8008d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d30:	f000 fb22 	bl	8009378 <free>
		}

		rx_packet_index++;
 8008d34:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <ll_process_received+0x1e8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a10      	ldr	r2, [pc, #64]	; (8008d7c <ll_process_received+0x1e8>)
 8008d3c:	6013      	str	r3, [r2, #0]
	while(list_size(Rx_packet_list) > rx_packet_index)
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <ll_process_received+0x1e4>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fc42 	bl	80085cc <list_size>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <ll_process_received+0x1e8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	f63f af24 	bhi.w	8008b9c <ll_process_received+0x8>
		(void) packet ;
		(void) holder ;
		(void) n ;
	}

	if(rx_packet_index >= list_size(Rx_packet_list))
 8008d54:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <ll_process_received+0x1e4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fc37 	bl	80085cc <list_size>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <ll_process_received+0x1e8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d802      	bhi.n	8008d6e <ll_process_received+0x1da>
	{
		rx_packet_index = 0;
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <ll_process_received+0x1e8>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
	}

}
 8008d6e:	bf00      	nop
 8008d70:	3728      	adds	r7, #40	; 0x28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	200005e8 	.word	0x200005e8
 8008d7c:	20000460 	.word	0x20000460
 8008d80:	0800e2e4 	.word	0x0800e2e4
 8008d84:	0800e2f8 	.word	0x0800e2f8
 8008d88:	200005ec 	.word	0x200005ec

08008d8c <ll_get_recv_from>:

int  ll_get_recv_from(u8 src ,u8 *data )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	71fb      	strb	r3, [r7, #7]


	int rx_list_size = list_size(Rx_packet_list) ;
 8008d98:	4b2d      	ldr	r3, [pc, #180]	; (8008e50 <ll_get_recv_from+0xc4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fc15 	bl	80085cc <list_size>
 8008da2:	4603      	mov	r3, r0
 8008da4:	61bb      	str	r3, [r7, #24]



	if(rx_list_size == 0)
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <ll_get_recv_from+0x24>
		return 0 ;
 8008dac:	2300      	movs	r3, #0
 8008dae:	e04b      	b.n	8008e48 <ll_get_recv_from+0xbc>

	struct list_node* node ;
	packet_holder_t * holder ;
	packet_t * pack ;

	for(int i = 0 ; i < rx_list_size ; i++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e043      	b.n	8008e3e <ll_get_recv_from+0xb2>
	{
		node = list_index(Rx_packet_list , i) ;
 8008db6:	4b26      	ldr	r3, [pc, #152]	; (8008e50 <ll_get_recv_from+0xc4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69f9      	ldr	r1, [r7, #28]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fbc3 	bl	8008548 <list_index>
 8008dc2:	6178      	str	r0, [r7, #20]
		holder = (packet_holder_t *) node->data ;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	613b      	str	r3, [r7, #16]
		pack = (packet_t*)&(holder)->packet ;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	60fb      	str	r3, [r7, #12]


		if(pack->type == PACK_TYPE_DATA && pack->src == src)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	78db      	ldrb	r3, [r3, #3]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d130      	bne.n	8008e38 <ll_get_recv_from+0xac>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	79fa      	ldrb	r2, [r7, #7]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d12b      	bne.n	8008e38 <ll_get_recv_from+0xac>
		{
			int data_length =  pack->payload_length ;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	791b      	ldrb	r3, [r3, #4]
 8008de4:	60bb      	str	r3, [r7, #8]
			memcpy(data , pack->payload , data_length) ;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6838      	ldr	r0, [r7, #0]
 8008df0:	f000 faca 	bl	8009388 <memcpy>

			if( holder->number_of_transmition == 0)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d107      	bne.n	8008e0c <ll_get_recv_from+0x80>
			{
#ifdef PROT_DEBUG
				printf("ASK send From ll_get_recv_from\n");
#endif
				ll_send_ASK(pack->src , pack->id) ;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	789b      	ldrb	r3, [r3, #2]
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f7ff fd42 	bl	8008890 <ll_send_ASK>
			}
			//remove the node and free memory
			list_remove(Rx_packet_list , node) ;
 8008e0c:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <ll_get_recv_from+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6979      	ldr	r1, [r7, #20]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fb3a 	bl	800848c <list_remove>
			free(pack->payload) ;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 faab 	bl	8009378 <free>
			free(pack) ;
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 faa8 	bl	8009378 <free>
			free(holder) ;
 8008e28:	6938      	ldr	r0, [r7, #16]
 8008e2a:	f000 faa5 	bl	8009378 <free>
			free(node) ;
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f000 faa2 	bl	8009378 <free>
			return data_length ;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	e007      	b.n	8008e48 <ll_get_recv_from+0xbc>
	for(int i = 0 ; i < rx_list_size ; i++)
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	dbb7      	blt.n	8008db6 <ll_get_recv_from+0x2a>
		}
	}
	// navigated the list and no data packet from src ,return 0
	return 0 ;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3720      	adds	r7, #32
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	200005e8 	.word	0x200005e8

08008e54 <ll_process>:

u32 process_tmr = 0;
uint32_t tx_trans_timer  = 1000 ;
//this function should manage send and receive operations
void ll_process(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0

	ll_process_received();
 8008e58:	f7ff fe9c 	bl	8008b94 <ll_process_received>
    if(sys_get_tick() - process_tmr >= tx_trans_timer)
 8008e5c:	f7f8 fa6b 	bl	8001336 <sys_get_tick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	4b0e      	ldr	r3, [pc, #56]	; (8008e9c <ll_process+0x48>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <ll_process+0x4c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d30b      	bcc.n	8008e88 <ll_process+0x34>
    {
	    ll_transmit() ;
 8008e70:	f7ff fd72 	bl	8008958 <ll_transmit>
	    Radio.Rx(1000);
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <ll_process+0x50>)
 8008e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e7c:	4798      	blx	r3
	    process_tmr = sys_get_tick() ;
 8008e7e:	f7f8 fa5a 	bl	8001336 <sys_get_tick>
 8008e82:	4603      	mov	r3, r0
 8008e84:	4a05      	ldr	r2, [pc, #20]	; (8008e9c <ll_process+0x48>)
 8008e86:	6013      	str	r3, [r2, #0]
    }

    if( get_tx_size() >= LL_TX_BUTTLE_NECK)
 8008e88:	f7ff fd4e 	bl	8008928 <get_tx_size>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	dd02      	ble.n	8008e98 <ll_process+0x44>
    {
    	tx_trans_timer = 200 ;
 8008e92:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <ll_process+0x4c>)
 8008e94:	22c8      	movs	r2, #200	; 0xc8
 8008e96:	601a      	str	r2, [r3, #0]

		default:
			break ;
		}
	*/
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	2000046c 	.word	0x2000046c
 8008ea0:	2000000c 	.word	0x2000000c
 8008ea4:	0800e484 	.word	0x0800e484

08008ea8 <ll_debug_Rx_list>:

void ll_debug_Rx_list()
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
	for(int i =0;i< get_rx_size() ;i++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e011      	b.n	8008ed8 <ll_debug_Rx_list+0x30>
	{
		struct list_node * node = list_index(Rx_packet_list , i) ;
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <ll_debug_Rx_list+0x48>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68f9      	ldr	r1, [r7, #12]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff fb44 	bl	8008548 <list_index>
 8008ec0:	60b8      	str	r0, [r7, #8]
		packet_holder_t *  hold = node->data ;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	607b      	str	r3, [r7, #4]
		packet_t * pp = (packet_t*)&(hold)->packet ;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	603b      	str	r3, [r7, #0]
		debug_packet(pp) ;
 8008ecc:	6838      	ldr	r0, [r7, #0]
 8008ece:	f000 f8a7 	bl	8009020 <debug_packet>
	for(int i =0;i< get_rx_size() ;i++)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	f7ff fd32 	bl	8008940 <get_rx_size>
 8008edc:	4602      	mov	r2, r0
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	dbe7      	blt.n	8008eb4 <ll_debug_Rx_list+0xc>
	}
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200005e8 	.word	0x200005e8

08008ef4 <ll_set_transmition_done>:

void ll_set_transmition_done()
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
	tarnsmition_done = true ;
 8008ef8:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <ll_set_transmition_done+0x14>)
 8008efa:	2201      	movs	r2, #1
 8008efc:	701a      	strb	r2, [r3, #0]
}
 8008efe:	bf00      	nop
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000468 	.word	0x20000468

08008f0c <packet>:
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

void packet(packet_t * pack ,u8 src ,u8 dest ,u8 type ,u8 id, u8* data ,u8 len)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	70fb      	strb	r3, [r7, #3]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70bb      	strb	r3, [r7, #2]
 8008f22:	4613      	mov	r3, r2
 8008f24:	707b      	strb	r3, [r7, #1]
	//set packet header
	packet_set_src (pack  , src) ;
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f819 	bl	8008f62 <packet_set_src>
	packet_set_dest(pack  , dest) ;
 8008f30:	78bb      	ldrb	r3, [r7, #2]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f822 	bl	8008f7e <packet_set_dest>
	packet_set_type(pack , type );
 8008f3a:	787b      	ldrb	r3, [r7, #1]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f82b 	bl	8008f9a <packet_set_type>
	packet_set_id(pack ,id) ;
 8008f44:	7c3b      	ldrb	r3, [r7, #16]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f85a 	bl	8009002 <packet_set_id>
	packet_set_payload(pack ,data , len) ;
 8008f4e:	7e3b      	ldrb	r3, [r7, #24]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6979      	ldr	r1, [r7, #20]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f82e 	bl	8008fb6 <packet_set_payload>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <packet_set_src>:

void packet_set_src(packet_t *pack ,u8 src)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
	pack->src = src ;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	701a      	strb	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <packet_set_dest>:

void packet_set_dest(packet_t *pack ,u8 dest)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
	pack->dest = dest ;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	705a      	strb	r2, [r3, #1]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr

08008f9a <packet_set_type>:

void packet_set_type(packet_t *pack ,u8 type) 
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
	pack->type = type ;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	70da      	strb	r2, [r3, #3]
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <packet_set_payload>:

void packet_set_payload(packet_t *pack ,u8 * payload , int len) 
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	607a      	str	r2, [r7, #4]
	if(payload != NULL && len != 0)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <packet_set_payload+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d013      	beq.n	8008ff6 <packet_set_payload+0x40>
	{
		pack->payload = (u8*) malloc(sizeof(u8) * len) ;//payload ;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f9c9 	bl	8009368 <malloc>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	609a      	str	r2, [r3, #8]
		memcpy(pack->payload , payload , len) ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f9ce 	bl	8009388 <memcpy>
		pack->payload_length = len ;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	711a      	strb	r2, [r3, #4]
		return ;
 8008ff4:	e002      	b.n	8008ffc <packet_set_payload+0x46>
	}
	pack->payload_length = 0 ;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	711a      	strb	r2, [r3, #4]
	
}
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <packet_set_id>:

void packet_set_id(packet_t *pack ,u8 id)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
	pack->id = id ;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	78fa      	ldrb	r2, [r7, #3]
 8009012:	709a      	strb	r2, [r3, #2]
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
	...

08009020 <debug_packet>:

void debug_packet(packet_t * pack)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	printf("PAcket :\n");
 8009028:	4829      	ldr	r0, [pc, #164]	; (80090d0 <debug_packet+0xb0>)
 800902a:	f001 f803 	bl	800a034 <puts>
	printf("src  ->%d\n" , pack->src);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	4619      	mov	r1, r3
 8009034:	4827      	ldr	r0, [pc, #156]	; (80090d4 <debug_packet+0xb4>)
 8009036:	f000 ff63 	bl	8009f00 <iprintf>
	printf("dest ->%d\n" , pack->dest);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	4619      	mov	r1, r3
 8009040:	4825      	ldr	r0, [pc, #148]	; (80090d8 <debug_packet+0xb8>)
 8009042:	f000 ff5d 	bl	8009f00 <iprintf>
	printf("id   ->%d\n" , pack->id) ;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	789b      	ldrb	r3, [r3, #2]
 800904a:	4619      	mov	r1, r3
 800904c:	4823      	ldr	r0, [pc, #140]	; (80090dc <debug_packet+0xbc>)
 800904e:	f000 ff57 	bl	8009f00 <iprintf>
	if(pack->type == PACK_TYPE_DATA)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d103      	bne.n	8009062 <debug_packet+0x42>
	{
		printf("packet type data\n") ;
 800905a:	4821      	ldr	r0, [pc, #132]	; (80090e0 <debug_packet+0xc0>)
 800905c:	f000 ffea 	bl	800a034 <puts>
 8009060:	e012      	b.n	8009088 <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_ASK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	78db      	ldrb	r3, [r3, #3]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d103      	bne.n	8009072 <debug_packet+0x52>
	{
		printf("packet type ask\n") ;
 800906a:	481e      	ldr	r0, [pc, #120]	; (80090e4 <debug_packet+0xc4>)
 800906c:	f000 ffe2 	bl	800a034 <puts>
 8009070:	e00a      	b.n	8009088 <debug_packet+0x68>
	}
	else if(pack->type == PACK_TYPE_NANK)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	78db      	ldrb	r3, [r3, #3]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d103      	bne.n	8009082 <debug_packet+0x62>
	{
		printf("packet type nank\n") ;
 800907a:	481b      	ldr	r0, [pc, #108]	; (80090e8 <debug_packet+0xc8>)
 800907c:	f000 ffda 	bl	800a034 <puts>
 8009080:	e002      	b.n	8009088 <debug_packet+0x68>
	}
	else{
		printf("packet type not defined\n") ;
 8009082:	481a      	ldr	r0, [pc, #104]	; (80090ec <debug_packet+0xcc>)
 8009084:	f000 ffd6 	bl	800a034 <puts>
	}
	
	
	printf("packet length :%d\n" , pack->payload_length );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	791b      	ldrb	r3, [r3, #4]
 800908c:	4619      	mov	r1, r3
 800908e:	4818      	ldr	r0, [pc, #96]	; (80090f0 <debug_packet+0xd0>)
 8009090:	f000 ff36 	bl	8009f00 <iprintf>
	printf("payload :");
 8009094:	4817      	ldr	r0, [pc, #92]	; (80090f4 <debug_packet+0xd4>)
 8009096:	f000 ff33 	bl	8009f00 <iprintf>
	for(int i = 0 ; i<pack->payload_length ;i++)
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e00a      	b.n	80090b6 <debug_packet+0x96>
	{
		printf("%c" , pack->payload[i]);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 ff40 	bl	8009f30 <putchar>
	for(int i = 0 ; i<pack->payload_length ;i++)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	461a      	mov	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4293      	cmp	r3, r2
 80090c0:	dbee      	blt.n	80090a0 <debug_packet+0x80>
	}
	printf("\n");
 80090c2:	200a      	movs	r0, #10
 80090c4:	f000 ff34 	bl	8009f30 <putchar>
	
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	0800e30c 	.word	0x0800e30c
 80090d4:	0800e318 	.word	0x0800e318
 80090d8:	0800e324 	.word	0x0800e324
 80090dc:	0800e330 	.word	0x0800e330
 80090e0:	0800e33c 	.word	0x0800e33c
 80090e4:	0800e350 	.word	0x0800e350
 80090e8:	0800e360 	.word	0x0800e360
 80090ec:	0800e374 	.word	0x0800e374
 80090f0:	0800e38c 	.word	0x0800e38c
 80090f4:	0800e3a0 	.word	0x0800e3a0

080090f8 <packet_serialize>:

int packet_serialize(packet_t * pack ,u8 * buffer ) 
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
	/* buffer size = 1 byte src + 1 byte dest + 1 byte type + 
	1 byte payload_length + payload_length + 2 byte checksum*/
	int buffer_size  = 7 + pack->payload_length ;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	791b      	ldrb	r3, [r3, #4]
 8009106:	3307      	adds	r3, #7
 8009108:	617b      	str	r3, [r7, #20]
	
	//buffer = (u8*)malloc(sizeof(u8) * buffer_size) ;
	if( buffer != NULL)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d04a      	beq.n	80091a6 <packet_serialize+0xae>
	{
		u8 *pbuffer = buffer ;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->dest ;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	785a      	ldrb	r2, [r3, #1]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3301      	adds	r3, #1
 8009120:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->src ;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->id ;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	789a      	ldrb	r2, [r3, #2]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	3301      	adds	r3, #1
 800913c:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->type ;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	78da      	ldrb	r2, [r3, #3]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	613b      	str	r3, [r7, #16]
		*pbuffer = pack->payload_length ;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	791a      	ldrb	r2, [r3, #4]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3301      	adds	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
		memcpy(pbuffer , pack->payload , pack->payload_length );
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6899      	ldr	r1, [r3, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	791b      	ldrb	r3, [r3, #4]
 8009162:	461a      	mov	r2, r3
 8009164:	6938      	ldr	r0, [r7, #16]
 8009166:	f000 f90f 	bl	8009388 <memcpy>
		u16 checksum = check_sum(buffer , 5 + pack->payload_length );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	791b      	ldrb	r3, [r3, #4]
 800916e:	3305      	adds	r3, #5
 8009170:	4619      	mov	r1, r3
 8009172:	6838      	ldr	r0, [r7, #0]
 8009174:	f000 f872 	bl	800925c <check_sum>
 8009178:	4603      	mov	r3, r0
 800917a:	81fb      	strh	r3, [r7, #14]
		pbuffer += pack->payload_length ;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	791b      	ldrb	r3, [r3, #4]
 8009180:	461a      	mov	r2, r3
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	613b      	str	r3, [r7, #16]
		*pbuffer = MSB16(checksum) ;
 8009188:	89fb      	ldrh	r3, [r7, #14]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b29b      	uxth	r3, r3
 800918e:	b2da      	uxtb	r2, r3
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	701a      	strb	r2, [r3, #0]
		pbuffer++;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3301      	adds	r3, #1
 8009198:	613b      	str	r3, [r7, #16]
		*pbuffer = LSB16(checksum) ;
 800919a:	89fb      	ldrh	r3, [r7, #14]
 800919c:	b2da      	uxtb	r2, r3
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	701a      	strb	r2, [r3, #0]
		return buffer_size ;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	e000      	b.n	80091a8 <packet_serialize+0xb0>
	}
	else
	{
		return 0;
 80091a6:	2300      	movs	r3, #0
	}
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <packet_desirialize>:

int packet_desirialize(u8 * buffer,int buffer_len , packet_t * pack) 
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
	u16 pack_checksum = (buffer[buffer_len -2] << 8)& 0xff00 ;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3b02      	subs	r3, #2
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	82fb      	strh	r3, [r7, #22]
	pack_checksum += buffer[buffer_len -1] ;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	8afb      	ldrh	r3, [r7, #22]
 80091d8:	4413      	add	r3, r2
 80091da:	82fb      	strh	r3, [r7, #22]
		
	u16 cal_checksum  = check_sum(buffer , buffer_len -2) ;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	3b02      	subs	r3, #2
 80091e0:	4619      	mov	r1, r3
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f83a 	bl	800925c <check_sum>
 80091e8:	4603      	mov	r3, r0
 80091ea:	82bb      	strh	r3, [r7, #20]
	
	//printf("cal %x , pac %x\n" , cal_checksum , pack_checksum);
	if(cal_checksum != pack_checksum)
 80091ec:	8aba      	ldrh	r2, [r7, #20]
 80091ee:	8afb      	ldrh	r3, [r7, #22]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d005      	beq.n	8009200 <packet_desirialize+0x50>
	{
		printf("\nCHECKSUM ERROR\n") ;
 80091f4:	4818      	ldr	r0, [pc, #96]	; (8009258 <packet_desirialize+0xa8>)
 80091f6:	f000 ff1d 	bl	800a034 <puts>
		return PACK_CHECKSUM_ERROR ;
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	e026      	b.n	800924e <packet_desirialize+0x9e>
	}

	
	pack->src  = buffer[1] ;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	785a      	ldrb	r2, [r3, #1]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	701a      	strb	r2, [r3, #0]
	pack->dest = buffer[0] ;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	705a      	strb	r2, [r3, #1]
	pack->type = buffer[3] ;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	78da      	ldrb	r2, [r3, #3]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	70da      	strb	r2, [r3, #3]
	pack->id   = buffer[2] ;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	789a      	ldrb	r2, [r3, #2]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	709a      	strb	r2, [r3, #2]
	pack->payload_length = buffer[4] ;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	791a      	ldrb	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	711a      	strb	r2, [r3, #4]
	pack->payload = (u8*) malloc(sizeof(u8) * pack->payload_length) ; 
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	791b      	ldrb	r3, [r3, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f89b 	bl	8009368 <malloc>
 8009232:	4603      	mov	r3, r0
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	609a      	str	r2, [r3, #8]
	memcpy(pack->payload , &buffer[5] , pack->payload_length ) ;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6898      	ldr	r0, [r3, #8]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1d59      	adds	r1, r3, #5
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	461a      	mov	r2, r3
 8009248:	f000 f89e 	bl	8009388 <memcpy>
	
	return PACK_OK ;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	0800e3ac 	.word	0x0800e3ac

0800925c <check_sum>:

u16 check_sum(u8 * buffer , int len)
{	
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	int i = 0 ;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
	
	int sum = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
	
	while(len>1)
 800926e:	e017      	b.n	80092a0 <check_sum+0x44>
	{
		sum += (buffer[i] << 8) & 0xff00 ;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	b29b      	uxth	r3, r3
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	4413      	add	r3, r2
 8009280:	613b      	str	r3, [r7, #16]
		sum +=  buffer[i+1] ;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	3301      	adds	r3, #1
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	4413      	add	r3, r2
 8009292:	613b      	str	r3, [r7, #16]
	
		len -= 2 ;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	3b02      	subs	r3, #2
 8009298:	603b      	str	r3, [r7, #0]
		i += 2;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	3302      	adds	r3, #2
 800929e:	617b      	str	r3, [r7, #20]
	while(len>1)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	dce4      	bgt.n	8009270 <check_sum+0x14>
	}
	
	if(len >0)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	dd13      	ble.n	80092d4 <check_sum+0x78>
	{
		sum += buffer[len -1 ] ;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	4413      	add	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]
	}
	
	while(sum > 0xffff)
 80092be:	e009      	b.n	80092d4 <check_sum+0x78>
	{
		sum = sum & 0x0000ffff ;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	613b      	str	r3, [r7, #16]
		unsigned short carry = 0xffff&(sum >> 16 );
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	81fb      	strh	r3, [r7, #14]
		sum += carry ;
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
	while(sum > 0xffff)
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092da:	daf1      	bge.n	80092c0 <check_sum+0x64>
	}
	
	return (u16)(0xffff - sum) ;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	b29b      	uxth	r3, r3
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <packet_get_size>:


int packet_get_size(packet_t * pack)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
	return PACK_HEADER_LENGTH + pack->payload_length ;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	3307      	adds	r3, #7
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr

08009306 <atof>:
 8009306:	2100      	movs	r1, #0
 8009308:	f001 bede 	b.w	800b0c8 <strtod>

0800930c <atoi>:
 800930c:	220a      	movs	r2, #10
 800930e:	2100      	movs	r1, #0
 8009310:	f001 bf6c 	b.w	800b1ec <strtol>

08009314 <__errno>:
 8009314:	4b01      	ldr	r3, [pc, #4]	; (800931c <__errno+0x8>)
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	20000010 	.word	0x20000010

08009320 <__libc_init_array>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4d0d      	ldr	r5, [pc, #52]	; (8009358 <__libc_init_array+0x38>)
 8009324:	4c0d      	ldr	r4, [pc, #52]	; (800935c <__libc_init_array+0x3c>)
 8009326:	1b64      	subs	r4, r4, r5
 8009328:	10a4      	asrs	r4, r4, #2
 800932a:	2600      	movs	r6, #0
 800932c:	42a6      	cmp	r6, r4
 800932e:	d109      	bne.n	8009344 <__libc_init_array+0x24>
 8009330:	4d0b      	ldr	r5, [pc, #44]	; (8009360 <__libc_init_array+0x40>)
 8009332:	4c0c      	ldr	r4, [pc, #48]	; (8009364 <__libc_init_array+0x44>)
 8009334:	f004 fdd4 	bl	800dee0 <_init>
 8009338:	1b64      	subs	r4, r4, r5
 800933a:	10a4      	asrs	r4, r4, #2
 800933c:	2600      	movs	r6, #0
 800933e:	42a6      	cmp	r6, r4
 8009340:	d105      	bne.n	800934e <__libc_init_array+0x2e>
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	f855 3b04 	ldr.w	r3, [r5], #4
 8009348:	4798      	blx	r3
 800934a:	3601      	adds	r6, #1
 800934c:	e7ee      	b.n	800932c <__libc_init_array+0xc>
 800934e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009352:	4798      	blx	r3
 8009354:	3601      	adds	r6, #1
 8009356:	e7f2      	b.n	800933e <__libc_init_array+0x1e>
 8009358:	0800f10c 	.word	0x0800f10c
 800935c:	0800f10c 	.word	0x0800f10c
 8009360:	0800f10c 	.word	0x0800f10c
 8009364:	0800f110 	.word	0x0800f110

08009368 <malloc>:
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <malloc+0xc>)
 800936a:	4601      	mov	r1, r0
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f000 b86f 	b.w	8009450 <_malloc_r>
 8009372:	bf00      	nop
 8009374:	20000010 	.word	0x20000010

08009378 <free>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <free+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 b819 	b.w	80093b4 <_free_r>
 8009382:	bf00      	nop
 8009384:	20000010 	.word	0x20000010

08009388 <memcpy>:
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009390:	d100      	bne.n	8009394 <memcpy+0xc>
 8009392:	4770      	bx	lr
 8009394:	b510      	push	{r4, lr}
 8009396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800939e:	4291      	cmp	r1, r2
 80093a0:	d1f9      	bne.n	8009396 <memcpy+0xe>
 80093a2:	bd10      	pop	{r4, pc}

080093a4 <memset>:
 80093a4:	4402      	add	r2, r0
 80093a6:	4603      	mov	r3, r0
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d100      	bne.n	80093ae <memset+0xa>
 80093ac:	4770      	bx	lr
 80093ae:	f803 1b01 	strb.w	r1, [r3], #1
 80093b2:	e7f9      	b.n	80093a8 <memset+0x4>

080093b4 <_free_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4605      	mov	r5, r0
 80093b8:	2900      	cmp	r1, #0
 80093ba:	d045      	beq.n	8009448 <_free_r+0x94>
 80093bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c0:	1f0c      	subs	r4, r1, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	18e4      	addlt	r4, r4, r3
 80093c8:	f003 fc3e 	bl	800cc48 <__malloc_lock>
 80093cc:	4a1f      	ldr	r2, [pc, #124]	; (800944c <_free_r+0x98>)
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	4610      	mov	r0, r2
 80093d2:	b933      	cbnz	r3, 80093e2 <_free_r+0x2e>
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	6014      	str	r4, [r2, #0]
 80093d8:	4628      	mov	r0, r5
 80093da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093de:	f003 bc39 	b.w	800cc54 <__malloc_unlock>
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	d90b      	bls.n	80093fe <_free_r+0x4a>
 80093e6:	6821      	ldr	r1, [r4, #0]
 80093e8:	1862      	adds	r2, r4, r1
 80093ea:	4293      	cmp	r3, r2
 80093ec:	bf04      	itt	eq
 80093ee:	681a      	ldreq	r2, [r3, #0]
 80093f0:	685b      	ldreq	r3, [r3, #4]
 80093f2:	6063      	str	r3, [r4, #4]
 80093f4:	bf04      	itt	eq
 80093f6:	1852      	addeq	r2, r2, r1
 80093f8:	6022      	streq	r2, [r4, #0]
 80093fa:	6004      	str	r4, [r0, #0]
 80093fc:	e7ec      	b.n	80093d8 <_free_r+0x24>
 80093fe:	461a      	mov	r2, r3
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	b10b      	cbz	r3, 8009408 <_free_r+0x54>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d9fa      	bls.n	80093fe <_free_r+0x4a>
 8009408:	6811      	ldr	r1, [r2, #0]
 800940a:	1850      	adds	r0, r2, r1
 800940c:	42a0      	cmp	r0, r4
 800940e:	d10b      	bne.n	8009428 <_free_r+0x74>
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	4401      	add	r1, r0
 8009414:	1850      	adds	r0, r2, r1
 8009416:	4283      	cmp	r3, r0
 8009418:	6011      	str	r1, [r2, #0]
 800941a:	d1dd      	bne.n	80093d8 <_free_r+0x24>
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	6053      	str	r3, [r2, #4]
 8009422:	4401      	add	r1, r0
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	e7d7      	b.n	80093d8 <_free_r+0x24>
 8009428:	d902      	bls.n	8009430 <_free_r+0x7c>
 800942a:	230c      	movs	r3, #12
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	e7d3      	b.n	80093d8 <_free_r+0x24>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	1821      	adds	r1, r4, r0
 8009434:	428b      	cmp	r3, r1
 8009436:	bf04      	itt	eq
 8009438:	6819      	ldreq	r1, [r3, #0]
 800943a:	685b      	ldreq	r3, [r3, #4]
 800943c:	6063      	str	r3, [r4, #4]
 800943e:	bf04      	itt	eq
 8009440:	1809      	addeq	r1, r1, r0
 8009442:	6021      	streq	r1, [r4, #0]
 8009444:	6054      	str	r4, [r2, #4]
 8009446:	e7c7      	b.n	80093d8 <_free_r+0x24>
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	20000470 	.word	0x20000470

08009450 <_malloc_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	1ccd      	adds	r5, r1, #3
 8009454:	f025 0503 	bic.w	r5, r5, #3
 8009458:	3508      	adds	r5, #8
 800945a:	2d0c      	cmp	r5, #12
 800945c:	bf38      	it	cc
 800945e:	250c      	movcc	r5, #12
 8009460:	2d00      	cmp	r5, #0
 8009462:	4606      	mov	r6, r0
 8009464:	db01      	blt.n	800946a <_malloc_r+0x1a>
 8009466:	42a9      	cmp	r1, r5
 8009468:	d903      	bls.n	8009472 <_malloc_r+0x22>
 800946a:	230c      	movs	r3, #12
 800946c:	6033      	str	r3, [r6, #0]
 800946e:	2000      	movs	r0, #0
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009472:	f003 fbe9 	bl	800cc48 <__malloc_lock>
 8009476:	4921      	ldr	r1, [pc, #132]	; (80094fc <_malloc_r+0xac>)
 8009478:	680a      	ldr	r2, [r1, #0]
 800947a:	4614      	mov	r4, r2
 800947c:	b99c      	cbnz	r4, 80094a6 <_malloc_r+0x56>
 800947e:	4f20      	ldr	r7, [pc, #128]	; (8009500 <_malloc_r+0xb0>)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	b923      	cbnz	r3, 800948e <_malloc_r+0x3e>
 8009484:	4621      	mov	r1, r4
 8009486:	4630      	mov	r0, r6
 8009488:	f000 fddc 	bl	800a044 <_sbrk_r>
 800948c:	6038      	str	r0, [r7, #0]
 800948e:	4629      	mov	r1, r5
 8009490:	4630      	mov	r0, r6
 8009492:	f000 fdd7 	bl	800a044 <_sbrk_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d123      	bne.n	80094e2 <_malloc_r+0x92>
 800949a:	230c      	movs	r3, #12
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	4630      	mov	r0, r6
 80094a0:	f003 fbd8 	bl	800cc54 <__malloc_unlock>
 80094a4:	e7e3      	b.n	800946e <_malloc_r+0x1e>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	1b5b      	subs	r3, r3, r5
 80094aa:	d417      	bmi.n	80094dc <_malloc_r+0x8c>
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d903      	bls.n	80094b8 <_malloc_r+0x68>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	441c      	add	r4, r3
 80094b4:	6025      	str	r5, [r4, #0]
 80094b6:	e004      	b.n	80094c2 <_malloc_r+0x72>
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	42a2      	cmp	r2, r4
 80094bc:	bf0c      	ite	eq
 80094be:	600b      	streq	r3, [r1, #0]
 80094c0:	6053      	strne	r3, [r2, #4]
 80094c2:	4630      	mov	r0, r6
 80094c4:	f003 fbc6 	bl	800cc54 <__malloc_unlock>
 80094c8:	f104 000b 	add.w	r0, r4, #11
 80094cc:	1d23      	adds	r3, r4, #4
 80094ce:	f020 0007 	bic.w	r0, r0, #7
 80094d2:	1ac2      	subs	r2, r0, r3
 80094d4:	d0cc      	beq.n	8009470 <_malloc_r+0x20>
 80094d6:	1a1b      	subs	r3, r3, r0
 80094d8:	50a3      	str	r3, [r4, r2]
 80094da:	e7c9      	b.n	8009470 <_malloc_r+0x20>
 80094dc:	4622      	mov	r2, r4
 80094de:	6864      	ldr	r4, [r4, #4]
 80094e0:	e7cc      	b.n	800947c <_malloc_r+0x2c>
 80094e2:	1cc4      	adds	r4, r0, #3
 80094e4:	f024 0403 	bic.w	r4, r4, #3
 80094e8:	42a0      	cmp	r0, r4
 80094ea:	d0e3      	beq.n	80094b4 <_malloc_r+0x64>
 80094ec:	1a21      	subs	r1, r4, r0
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 fda8 	bl	800a044 <_sbrk_r>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d1dd      	bne.n	80094b4 <_malloc_r+0x64>
 80094f8:	e7cf      	b.n	800949a <_malloc_r+0x4a>
 80094fa:	bf00      	nop
 80094fc:	20000470 	.word	0x20000470
 8009500:	20000474 	.word	0x20000474

08009504 <__cvt>:
 8009504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009508:	b088      	sub	sp, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	461f      	mov	r7, r3
 800950e:	4614      	mov	r4, r2
 8009510:	bfb8      	it	lt
 8009512:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009516:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009518:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800951a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800951e:	bfb6      	itet	lt
 8009520:	461f      	movlt	r7, r3
 8009522:	2300      	movge	r3, #0
 8009524:	232d      	movlt	r3, #45	; 0x2d
 8009526:	7013      	strb	r3, [r2, #0]
 8009528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800952a:	f023 0820 	bic.w	r8, r3, #32
 800952e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009532:	d005      	beq.n	8009540 <__cvt+0x3c>
 8009534:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009538:	d100      	bne.n	800953c <__cvt+0x38>
 800953a:	3501      	adds	r5, #1
 800953c:	2302      	movs	r3, #2
 800953e:	e000      	b.n	8009542 <__cvt+0x3e>
 8009540:	2303      	movs	r3, #3
 8009542:	aa07      	add	r2, sp, #28
 8009544:	9204      	str	r2, [sp, #16]
 8009546:	aa06      	add	r2, sp, #24
 8009548:	e9cd a202 	strd	sl, r2, [sp, #8]
 800954c:	e9cd 3500 	strd	r3, r5, [sp]
 8009550:	4622      	mov	r2, r4
 8009552:	463b      	mov	r3, r7
 8009554:	f001 ffb4 	bl	800b4c0 <_dtoa_r>
 8009558:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800955c:	4606      	mov	r6, r0
 800955e:	d102      	bne.n	8009566 <__cvt+0x62>
 8009560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009562:	07db      	lsls	r3, r3, #31
 8009564:	d522      	bpl.n	80095ac <__cvt+0xa8>
 8009566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800956a:	eb06 0905 	add.w	r9, r6, r5
 800956e:	d110      	bne.n	8009592 <__cvt+0x8e>
 8009570:	7833      	ldrb	r3, [r6, #0]
 8009572:	2b30      	cmp	r3, #48	; 0x30
 8009574:	d10a      	bne.n	800958c <__cvt+0x88>
 8009576:	2200      	movs	r2, #0
 8009578:	2300      	movs	r3, #0
 800957a:	4620      	mov	r0, r4
 800957c:	4639      	mov	r1, r7
 800957e:	f7f7 fa8b 	bl	8000a98 <__aeabi_dcmpeq>
 8009582:	b918      	cbnz	r0, 800958c <__cvt+0x88>
 8009584:	f1c5 0501 	rsb	r5, r5, #1
 8009588:	f8ca 5000 	str.w	r5, [sl]
 800958c:	f8da 3000 	ldr.w	r3, [sl]
 8009590:	4499      	add	r9, r3
 8009592:	2200      	movs	r2, #0
 8009594:	2300      	movs	r3, #0
 8009596:	4620      	mov	r0, r4
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 fa7d 	bl	8000a98 <__aeabi_dcmpeq>
 800959e:	b108      	cbz	r0, 80095a4 <__cvt+0xa0>
 80095a0:	f8cd 901c 	str.w	r9, [sp, #28]
 80095a4:	2230      	movs	r2, #48	; 0x30
 80095a6:	9b07      	ldr	r3, [sp, #28]
 80095a8:	454b      	cmp	r3, r9
 80095aa:	d307      	bcc.n	80095bc <__cvt+0xb8>
 80095ac:	9b07      	ldr	r3, [sp, #28]
 80095ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	4630      	mov	r0, r6
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	b008      	add	sp, #32
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	1c59      	adds	r1, r3, #1
 80095be:	9107      	str	r1, [sp, #28]
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e7f0      	b.n	80095a6 <__cvt+0xa2>

080095c4 <__exponent>:
 80095c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c6:	4603      	mov	r3, r0
 80095c8:	2900      	cmp	r1, #0
 80095ca:	bfb8      	it	lt
 80095cc:	4249      	neglt	r1, r1
 80095ce:	f803 2b02 	strb.w	r2, [r3], #2
 80095d2:	bfb4      	ite	lt
 80095d4:	222d      	movlt	r2, #45	; 0x2d
 80095d6:	222b      	movge	r2, #43	; 0x2b
 80095d8:	2909      	cmp	r1, #9
 80095da:	7042      	strb	r2, [r0, #1]
 80095dc:	dd2a      	ble.n	8009634 <__exponent+0x70>
 80095de:	f10d 0407 	add.w	r4, sp, #7
 80095e2:	46a4      	mov	ip, r4
 80095e4:	270a      	movs	r7, #10
 80095e6:	46a6      	mov	lr, r4
 80095e8:	460a      	mov	r2, r1
 80095ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80095ee:	fb07 1516 	mls	r5, r7, r6, r1
 80095f2:	3530      	adds	r5, #48	; 0x30
 80095f4:	2a63      	cmp	r2, #99	; 0x63
 80095f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80095fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095fe:	4631      	mov	r1, r6
 8009600:	dcf1      	bgt.n	80095e6 <__exponent+0x22>
 8009602:	3130      	adds	r1, #48	; 0x30
 8009604:	f1ae 0502 	sub.w	r5, lr, #2
 8009608:	f804 1c01 	strb.w	r1, [r4, #-1]
 800960c:	1c44      	adds	r4, r0, #1
 800960e:	4629      	mov	r1, r5
 8009610:	4561      	cmp	r1, ip
 8009612:	d30a      	bcc.n	800962a <__exponent+0x66>
 8009614:	f10d 0209 	add.w	r2, sp, #9
 8009618:	eba2 020e 	sub.w	r2, r2, lr
 800961c:	4565      	cmp	r5, ip
 800961e:	bf88      	it	hi
 8009620:	2200      	movhi	r2, #0
 8009622:	4413      	add	r3, r2
 8009624:	1a18      	subs	r0, r3, r0
 8009626:	b003      	add	sp, #12
 8009628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009632:	e7ed      	b.n	8009610 <__exponent+0x4c>
 8009634:	2330      	movs	r3, #48	; 0x30
 8009636:	3130      	adds	r1, #48	; 0x30
 8009638:	7083      	strb	r3, [r0, #2]
 800963a:	70c1      	strb	r1, [r0, #3]
 800963c:	1d03      	adds	r3, r0, #4
 800963e:	e7f1      	b.n	8009624 <__exponent+0x60>

08009640 <_printf_float>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	b091      	sub	sp, #68	; 0x44
 8009646:	460c      	mov	r4, r1
 8009648:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800964c:	4616      	mov	r6, r2
 800964e:	461f      	mov	r7, r3
 8009650:	4605      	mov	r5, r0
 8009652:	f003 fa7b 	bl	800cb4c <_localeconv_r>
 8009656:	6803      	ldr	r3, [r0, #0]
 8009658:	9309      	str	r3, [sp, #36]	; 0x24
 800965a:	4618      	mov	r0, r3
 800965c:	f7f6 fd9a 	bl	8000194 <strlen>
 8009660:	2300      	movs	r3, #0
 8009662:	930e      	str	r3, [sp, #56]	; 0x38
 8009664:	f8d8 3000 	ldr.w	r3, [r8]
 8009668:	900a      	str	r0, [sp, #40]	; 0x28
 800966a:	3307      	adds	r3, #7
 800966c:	f023 0307 	bic.w	r3, r3, #7
 8009670:	f103 0208 	add.w	r2, r3, #8
 8009674:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009678:	f8d4 b000 	ldr.w	fp, [r4]
 800967c:	f8c8 2000 	str.w	r2, [r8]
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009688:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800968c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009690:	930b      	str	r3, [sp, #44]	; 0x2c
 8009692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009694:	4b9c      	ldr	r3, [pc, #624]	; (8009908 <_printf_float+0x2c8>)
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	4640      	mov	r0, r8
 800969c:	f7f7 fa2e 	bl	8000afc <__aeabi_dcmpun>
 80096a0:	bb70      	cbnz	r0, 8009700 <_printf_float+0xc0>
 80096a2:	4b99      	ldr	r3, [pc, #612]	; (8009908 <_printf_float+0x2c8>)
 80096a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7f7 fa08 	bl	8000ac0 <__aeabi_dcmple>
 80096b0:	bb30      	cbnz	r0, 8009700 <_printf_float+0xc0>
 80096b2:	2200      	movs	r2, #0
 80096b4:	2300      	movs	r3, #0
 80096b6:	4640      	mov	r0, r8
 80096b8:	4651      	mov	r1, sl
 80096ba:	f7f7 f9f7 	bl	8000aac <__aeabi_dcmplt>
 80096be:	b110      	cbz	r0, 80096c6 <_printf_float+0x86>
 80096c0:	232d      	movs	r3, #45	; 0x2d
 80096c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c6:	4b91      	ldr	r3, [pc, #580]	; (800990c <_printf_float+0x2cc>)
 80096c8:	4891      	ldr	r0, [pc, #580]	; (8009910 <_printf_float+0x2d0>)
 80096ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096ce:	bf94      	ite	ls
 80096d0:	4698      	movls	r8, r3
 80096d2:	4680      	movhi	r8, r0
 80096d4:	2303      	movs	r3, #3
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	f02b 0304 	bic.w	r3, fp, #4
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	f04f 0a00 	mov.w	sl, #0
 80096e2:	9700      	str	r7, [sp, #0]
 80096e4:	4633      	mov	r3, r6
 80096e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80096e8:	4621      	mov	r1, r4
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f9d2 	bl	8009a94 <_printf_common>
 80096f0:	3001      	adds	r0, #1
 80096f2:	f040 808f 	bne.w	8009814 <_printf_float+0x1d4>
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295
 80096fa:	b011      	add	sp, #68	; 0x44
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	4642      	mov	r2, r8
 8009702:	4653      	mov	r3, sl
 8009704:	4640      	mov	r0, r8
 8009706:	4651      	mov	r1, sl
 8009708:	f7f7 f9f8 	bl	8000afc <__aeabi_dcmpun>
 800970c:	b140      	cbz	r0, 8009720 <_printf_float+0xe0>
 800970e:	f1ba 0f00 	cmp.w	sl, #0
 8009712:	bfbc      	itt	lt
 8009714:	232d      	movlt	r3, #45	; 0x2d
 8009716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800971a:	487e      	ldr	r0, [pc, #504]	; (8009914 <_printf_float+0x2d4>)
 800971c:	4b7e      	ldr	r3, [pc, #504]	; (8009918 <_printf_float+0x2d8>)
 800971e:	e7d4      	b.n	80096ca <_printf_float+0x8a>
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009728:	d142      	bne.n	80097b0 <_printf_float+0x170>
 800972a:	2306      	movs	r3, #6
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	9206      	str	r2, [sp, #24]
 8009732:	aa0e      	add	r2, sp, #56	; 0x38
 8009734:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009738:	aa0d      	add	r2, sp, #52	; 0x34
 800973a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009744:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4642      	mov	r2, r8
 8009750:	4653      	mov	r3, sl
 8009752:	4628      	mov	r0, r5
 8009754:	910b      	str	r1, [sp, #44]	; 0x2c
 8009756:	f7ff fed5 	bl	8009504 <__cvt>
 800975a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800975c:	2947      	cmp	r1, #71	; 0x47
 800975e:	4680      	mov	r8, r0
 8009760:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009762:	d108      	bne.n	8009776 <_printf_float+0x136>
 8009764:	1cc8      	adds	r0, r1, #3
 8009766:	db02      	blt.n	800976e <_printf_float+0x12e>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	4299      	cmp	r1, r3
 800976c:	dd40      	ble.n	80097f0 <_printf_float+0x1b0>
 800976e:	f1a9 0902 	sub.w	r9, r9, #2
 8009772:	fa5f f989 	uxtb.w	r9, r9
 8009776:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800977a:	d81f      	bhi.n	80097bc <_printf_float+0x17c>
 800977c:	3901      	subs	r1, #1
 800977e:	464a      	mov	r2, r9
 8009780:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009784:	910d      	str	r1, [sp, #52]	; 0x34
 8009786:	f7ff ff1d 	bl	80095c4 <__exponent>
 800978a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800978c:	1813      	adds	r3, r2, r0
 800978e:	2a01      	cmp	r2, #1
 8009790:	4682      	mov	sl, r0
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	dc02      	bgt.n	800979c <_printf_float+0x15c>
 8009796:	6822      	ldr	r2, [r4, #0]
 8009798:	07d2      	lsls	r2, r2, #31
 800979a:	d501      	bpl.n	80097a0 <_printf_float+0x160>
 800979c:	3301      	adds	r3, #1
 800979e:	6123      	str	r3, [r4, #16]
 80097a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d09c      	beq.n	80096e2 <_printf_float+0xa2>
 80097a8:	232d      	movs	r3, #45	; 0x2d
 80097aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ae:	e798      	b.n	80096e2 <_printf_float+0xa2>
 80097b0:	2947      	cmp	r1, #71	; 0x47
 80097b2:	d1bc      	bne.n	800972e <_printf_float+0xee>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1ba      	bne.n	800972e <_printf_float+0xee>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e7b7      	b.n	800972c <_printf_float+0xec>
 80097bc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097c0:	d118      	bne.n	80097f4 <_printf_float+0x1b4>
 80097c2:	2900      	cmp	r1, #0
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	dd0b      	ble.n	80097e0 <_printf_float+0x1a0>
 80097c8:	6121      	str	r1, [r4, #16]
 80097ca:	b913      	cbnz	r3, 80097d2 <_printf_float+0x192>
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	07d0      	lsls	r0, r2, #31
 80097d0:	d502      	bpl.n	80097d8 <_printf_float+0x198>
 80097d2:	3301      	adds	r3, #1
 80097d4:	440b      	add	r3, r1
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	65a1      	str	r1, [r4, #88]	; 0x58
 80097da:	f04f 0a00 	mov.w	sl, #0
 80097de:	e7df      	b.n	80097a0 <_printf_float+0x160>
 80097e0:	b913      	cbnz	r3, 80097e8 <_printf_float+0x1a8>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	07d2      	lsls	r2, r2, #31
 80097e6:	d501      	bpl.n	80097ec <_printf_float+0x1ac>
 80097e8:	3302      	adds	r3, #2
 80097ea:	e7f4      	b.n	80097d6 <_printf_float+0x196>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e7f2      	b.n	80097d6 <_printf_float+0x196>
 80097f0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f6:	4299      	cmp	r1, r3
 80097f8:	db05      	blt.n	8009806 <_printf_float+0x1c6>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	6121      	str	r1, [r4, #16]
 80097fe:	07d8      	lsls	r0, r3, #31
 8009800:	d5ea      	bpl.n	80097d8 <_printf_float+0x198>
 8009802:	1c4b      	adds	r3, r1, #1
 8009804:	e7e7      	b.n	80097d6 <_printf_float+0x196>
 8009806:	2900      	cmp	r1, #0
 8009808:	bfd4      	ite	le
 800980a:	f1c1 0202 	rsble	r2, r1, #2
 800980e:	2201      	movgt	r2, #1
 8009810:	4413      	add	r3, r2
 8009812:	e7e0      	b.n	80097d6 <_printf_float+0x196>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	055a      	lsls	r2, r3, #21
 8009818:	d407      	bmi.n	800982a <_printf_float+0x1ea>
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	4642      	mov	r2, r8
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	d12b      	bne.n	8009880 <_printf_float+0x240>
 8009828:	e765      	b.n	80096f6 <_printf_float+0xb6>
 800982a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800982e:	f240 80dc 	bls.w	80099ea <_printf_float+0x3aa>
 8009832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	f7f7 f92d 	bl	8000a98 <__aeabi_dcmpeq>
 800983e:	2800      	cmp	r0, #0
 8009840:	d033      	beq.n	80098aa <_printf_float+0x26a>
 8009842:	4a36      	ldr	r2, [pc, #216]	; (800991c <_printf_float+0x2dc>)
 8009844:	2301      	movs	r3, #1
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	47b8      	blx	r7
 800984c:	3001      	adds	r0, #1
 800984e:	f43f af52 	beq.w	80096f6 <_printf_float+0xb6>
 8009852:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009856:	429a      	cmp	r2, r3
 8009858:	db02      	blt.n	8009860 <_printf_float+0x220>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	07d8      	lsls	r0, r3, #31
 800985e:	d50f      	bpl.n	8009880 <_printf_float+0x240>
 8009860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009864:	4631      	mov	r1, r6
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	f43f af43 	beq.w	80096f6 <_printf_float+0xb6>
 8009870:	f04f 0800 	mov.w	r8, #0
 8009874:	f104 091a 	add.w	r9, r4, #26
 8009878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800987a:	3b01      	subs	r3, #1
 800987c:	4543      	cmp	r3, r8
 800987e:	dc09      	bgt.n	8009894 <_printf_float+0x254>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	079b      	lsls	r3, r3, #30
 8009884:	f100 8101 	bmi.w	8009a8a <_printf_float+0x44a>
 8009888:	68e0      	ldr	r0, [r4, #12]
 800988a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800988c:	4298      	cmp	r0, r3
 800988e:	bfb8      	it	lt
 8009890:	4618      	movlt	r0, r3
 8009892:	e732      	b.n	80096fa <_printf_float+0xba>
 8009894:	2301      	movs	r3, #1
 8009896:	464a      	mov	r2, r9
 8009898:	4631      	mov	r1, r6
 800989a:	4628      	mov	r0, r5
 800989c:	47b8      	blx	r7
 800989e:	3001      	adds	r0, #1
 80098a0:	f43f af29 	beq.w	80096f6 <_printf_float+0xb6>
 80098a4:	f108 0801 	add.w	r8, r8, #1
 80098a8:	e7e6      	b.n	8009878 <_printf_float+0x238>
 80098aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dc37      	bgt.n	8009920 <_printf_float+0x2e0>
 80098b0:	4a1a      	ldr	r2, [pc, #104]	; (800991c <_printf_float+0x2dc>)
 80098b2:	2301      	movs	r3, #1
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af1b 	beq.w	80096f6 <_printf_float+0xb6>
 80098c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098c4:	4313      	orrs	r3, r2
 80098c6:	d102      	bne.n	80098ce <_printf_float+0x28e>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d5d8      	bpl.n	8009880 <_printf_float+0x240>
 80098ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	f43f af0c 	beq.w	80096f6 <_printf_float+0xb6>
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	f104 0a1a 	add.w	sl, r4, #26
 80098e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e8:	425b      	negs	r3, r3
 80098ea:	454b      	cmp	r3, r9
 80098ec:	dc01      	bgt.n	80098f2 <_printf_float+0x2b2>
 80098ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f0:	e794      	b.n	800981c <_printf_float+0x1dc>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4652      	mov	r2, sl
 80098f6:	4631      	mov	r1, r6
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b8      	blx	r7
 80098fc:	3001      	adds	r0, #1
 80098fe:	f43f aefa 	beq.w	80096f6 <_printf_float+0xb6>
 8009902:	f109 0901 	add.w	r9, r9, #1
 8009906:	e7ee      	b.n	80098e6 <_printf_float+0x2a6>
 8009908:	7fefffff 	.word	0x7fefffff
 800990c:	0800e5c0 	.word	0x0800e5c0
 8009910:	0800e5c4 	.word	0x0800e5c4
 8009914:	0800e5cc 	.word	0x0800e5cc
 8009918:	0800e5c8 	.word	0x0800e5c8
 800991c:	0800e5d0 	.word	0x0800e5d0
 8009920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009924:	429a      	cmp	r2, r3
 8009926:	bfa8      	it	ge
 8009928:	461a      	movge	r2, r3
 800992a:	2a00      	cmp	r2, #0
 800992c:	4691      	mov	r9, r2
 800992e:	dc37      	bgt.n	80099a0 <_printf_float+0x360>
 8009930:	f04f 0b00 	mov.w	fp, #0
 8009934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009938:	f104 021a 	add.w	r2, r4, #26
 800993c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009940:	ebaa 0309 	sub.w	r3, sl, r9
 8009944:	455b      	cmp	r3, fp
 8009946:	dc33      	bgt.n	80099b0 <_printf_float+0x370>
 8009948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800994c:	429a      	cmp	r2, r3
 800994e:	db3b      	blt.n	80099c8 <_printf_float+0x388>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	07da      	lsls	r2, r3, #31
 8009954:	d438      	bmi.n	80099c8 <_printf_float+0x388>
 8009956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009958:	990d      	ldr	r1, [sp, #52]	; 0x34
 800995a:	eba2 030a 	sub.w	r3, r2, sl
 800995e:	eba2 0901 	sub.w	r9, r2, r1
 8009962:	4599      	cmp	r9, r3
 8009964:	bfa8      	it	ge
 8009966:	4699      	movge	r9, r3
 8009968:	f1b9 0f00 	cmp.w	r9, #0
 800996c:	dc34      	bgt.n	80099d8 <_printf_float+0x398>
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009976:	f104 0a1a 	add.w	sl, r4, #26
 800997a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800997e:	1a9b      	subs	r3, r3, r2
 8009980:	eba3 0309 	sub.w	r3, r3, r9
 8009984:	4543      	cmp	r3, r8
 8009986:	f77f af7b 	ble.w	8009880 <_printf_float+0x240>
 800998a:	2301      	movs	r3, #1
 800998c:	4652      	mov	r2, sl
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	f43f aeae 	beq.w	80096f6 <_printf_float+0xb6>
 800999a:	f108 0801 	add.w	r8, r8, #1
 800999e:	e7ec      	b.n	800997a <_printf_float+0x33a>
 80099a0:	4613      	mov	r3, r2
 80099a2:	4631      	mov	r1, r6
 80099a4:	4642      	mov	r2, r8
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	d1c0      	bne.n	8009930 <_printf_float+0x2f0>
 80099ae:	e6a2      	b.n	80096f6 <_printf_float+0xb6>
 80099b0:	2301      	movs	r3, #1
 80099b2:	4631      	mov	r1, r6
 80099b4:	4628      	mov	r0, r5
 80099b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	f43f ae9b 	beq.w	80096f6 <_printf_float+0xb6>
 80099c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099c2:	f10b 0b01 	add.w	fp, fp, #1
 80099c6:	e7b9      	b.n	800993c <_printf_float+0x2fc>
 80099c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1bf      	bne.n	8009956 <_printf_float+0x316>
 80099d6:	e68e      	b.n	80096f6 <_printf_float+0xb6>
 80099d8:	464b      	mov	r3, r9
 80099da:	eb08 020a 	add.w	r2, r8, sl
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1c2      	bne.n	800996e <_printf_float+0x32e>
 80099e8:	e685      	b.n	80096f6 <_printf_float+0xb6>
 80099ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	dc01      	bgt.n	80099f4 <_printf_float+0x3b4>
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d537      	bpl.n	8009a64 <_printf_float+0x424>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4642      	mov	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae79 	beq.w	80096f6 <_printf_float+0xb6>
 8009a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae71 	beq.w	80096f6 <_printf_float+0xb6>
 8009a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f7f7 f83c 	bl	8000a98 <__aeabi_dcmpeq>
 8009a20:	b9d8      	cbnz	r0, 8009a5a <_printf_float+0x41a>
 8009a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a24:	f108 0201 	add.w	r2, r8, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10e      	bne.n	8009a52 <_printf_float+0x412>
 8009a34:	e65f      	b.n	80096f6 <_printf_float+0xb6>
 8009a36:	2301      	movs	r3, #1
 8009a38:	464a      	mov	r2, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae58 	beq.w	80096f6 <_printf_float+0xb6>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4543      	cmp	r3, r8
 8009a50:	dcf1      	bgt.n	8009a36 <_printf_float+0x3f6>
 8009a52:	4653      	mov	r3, sl
 8009a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a58:	e6e1      	b.n	800981e <_printf_float+0x1de>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 091a 	add.w	r9, r4, #26
 8009a62:	e7f2      	b.n	8009a4a <_printf_float+0x40a>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4642      	mov	r2, r8
 8009a68:	e7df      	b.n	8009a2a <_printf_float+0x3ea>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae3e 	beq.w	80096f6 <_printf_float+0xb6>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	4543      	cmp	r3, r8
 8009a86:	dcf0      	bgt.n	8009a6a <_printf_float+0x42a>
 8009a88:	e6fe      	b.n	8009888 <_printf_float+0x248>
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f4      	b.n	8009a7e <_printf_float+0x43e>

08009a94 <_printf_common>:
 8009a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	4616      	mov	r6, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	688a      	ldr	r2, [r1, #8]
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bfb8      	it	lt
 8009aa8:	4613      	movlt	r3, r2
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b10a      	cbz	r2, 8009aba <_printf_common+0x26>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	6833      	ldrmi	r3, [r6, #0]
 8009ac2:	3302      	addmi	r3, #2
 8009ac4:	6033      	strmi	r3, [r6, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	f015 0506 	ands.w	r5, r5, #6
 8009acc:	d106      	bne.n	8009adc <_printf_common+0x48>
 8009ace:	f104 0a19 	add.w	sl, r4, #25
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dc26      	bgt.n	8009b2a <_printf_common+0x96>
 8009adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae0:	1e13      	subs	r3, r2, #0
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	0692      	lsls	r2, r2, #26
 8009aea:	d42b      	bmi.n	8009b44 <_printf_common+0xb0>
 8009aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d01e      	beq.n	8009b38 <_printf_common+0xa4>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	68e5      	ldr	r5, [r4, #12]
 8009afe:	6832      	ldr	r2, [r6, #0]
 8009b00:	f003 0306 	and.w	r3, r3, #6
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	bf08      	it	eq
 8009b08:	1aad      	subeq	r5, r5, r2
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	bf0c      	ite	eq
 8009b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b14:	2500      	movne	r5, #0
 8009b16:	4293      	cmp	r3, r2
 8009b18:	bfc4      	itt	gt
 8009b1a:	1a9b      	subgt	r3, r3, r2
 8009b1c:	18ed      	addgt	r5, r5, r3
 8009b1e:	2600      	movs	r6, #0
 8009b20:	341a      	adds	r4, #26
 8009b22:	42b5      	cmp	r5, r6
 8009b24:	d11a      	bne.n	8009b5c <_printf_common+0xc8>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e008      	b.n	8009b3c <_printf_common+0xa8>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4638      	mov	r0, r7
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d103      	bne.n	8009b40 <_printf_common+0xac>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	3501      	adds	r5, #1
 8009b42:	e7c6      	b.n	8009ad2 <_printf_common+0x3e>
 8009b44:	18e1      	adds	r1, r4, r3
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	2030      	movs	r0, #48	; 0x30
 8009b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b4e:	4422      	add	r2, r4
 8009b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b58:	3302      	adds	r3, #2
 8009b5a:	e7c7      	b.n	8009aec <_printf_common+0x58>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4649      	mov	r1, r9
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	3001      	adds	r0, #1
 8009b68:	d0e6      	beq.n	8009b38 <_printf_common+0xa4>
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	e7d9      	b.n	8009b22 <_printf_common+0x8e>
	...

08009b70 <_printf_i>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	4691      	mov	r9, r2
 8009b78:	7e27      	ldrb	r7, [r4, #24]
 8009b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b7c:	2f78      	cmp	r7, #120	; 0x78
 8009b7e:	4680      	mov	r8, r0
 8009b80:	469a      	mov	sl, r3
 8009b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b86:	d807      	bhi.n	8009b98 <_printf_i+0x28>
 8009b88:	2f62      	cmp	r7, #98	; 0x62
 8009b8a:	d80a      	bhi.n	8009ba2 <_printf_i+0x32>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	f000 80d8 	beq.w	8009d42 <_printf_i+0x1d2>
 8009b92:	2f58      	cmp	r7, #88	; 0x58
 8009b94:	f000 80a3 	beq.w	8009cde <_printf_i+0x16e>
 8009b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba0:	e03a      	b.n	8009c18 <_printf_i+0xa8>
 8009ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ba6:	2b15      	cmp	r3, #21
 8009ba8:	d8f6      	bhi.n	8009b98 <_printf_i+0x28>
 8009baa:	a001      	add	r0, pc, #4	; (adr r0, 8009bb0 <_printf_i+0x40>)
 8009bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009bb0:	08009c09 	.word	0x08009c09
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009b99 	.word	0x08009b99
 8009bbc:	08009b99 	.word	0x08009b99
 8009bc0:	08009b99 	.word	0x08009b99
 8009bc4:	08009b99 	.word	0x08009b99
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b99 	.word	0x08009b99
 8009bd0:	08009b99 	.word	0x08009b99
 8009bd4:	08009b99 	.word	0x08009b99
 8009bd8:	08009b99 	.word	0x08009b99
 8009bdc:	08009d29 	.word	0x08009d29
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009d0b 	.word	0x08009d0b
 8009be8:	08009b99 	.word	0x08009b99
 8009bec:	08009b99 	.word	0x08009b99
 8009bf0:	08009d4b 	.word	0x08009d4b
 8009bf4:	08009b99 	.word	0x08009b99
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009b99 	.word	0x08009b99
 8009c00:	08009b99 	.word	0x08009b99
 8009c04:	08009d13 	.word	0x08009d13
 8009c08:	680b      	ldr	r3, [r1, #0]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	600a      	str	r2, [r1, #0]
 8009c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0a3      	b.n	8009d64 <_printf_i+0x1f4>
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	6808      	ldr	r0, [r1, #0]
 8009c20:	062e      	lsls	r6, r5, #24
 8009c22:	f100 0304 	add.w	r3, r0, #4
 8009c26:	d50a      	bpl.n	8009c3e <_printf_i+0xce>
 8009c28:	6805      	ldr	r5, [r0, #0]
 8009c2a:	600b      	str	r3, [r1, #0]
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	da03      	bge.n	8009c38 <_printf_i+0xc8>
 8009c30:	232d      	movs	r3, #45	; 0x2d
 8009c32:	426d      	negs	r5, r5
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	485e      	ldr	r0, [pc, #376]	; (8009db4 <_printf_i+0x244>)
 8009c3a:	230a      	movs	r3, #10
 8009c3c:	e019      	b.n	8009c72 <_printf_i+0x102>
 8009c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c42:	6805      	ldr	r5, [r0, #0]
 8009c44:	600b      	str	r3, [r1, #0]
 8009c46:	bf18      	it	ne
 8009c48:	b22d      	sxthne	r5, r5
 8009c4a:	e7ef      	b.n	8009c2c <_printf_i+0xbc>
 8009c4c:	680b      	ldr	r3, [r1, #0]
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	1d18      	adds	r0, r3, #4
 8009c52:	6008      	str	r0, [r1, #0]
 8009c54:	0628      	lsls	r0, r5, #24
 8009c56:	d501      	bpl.n	8009c5c <_printf_i+0xec>
 8009c58:	681d      	ldr	r5, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <_printf_i+0xf2>
 8009c5c:	0669      	lsls	r1, r5, #25
 8009c5e:	d5fb      	bpl.n	8009c58 <_printf_i+0xe8>
 8009c60:	881d      	ldrh	r5, [r3, #0]
 8009c62:	4854      	ldr	r0, [pc, #336]	; (8009db4 <_printf_i+0x244>)
 8009c64:	2f6f      	cmp	r7, #111	; 0x6f
 8009c66:	bf0c      	ite	eq
 8009c68:	2308      	moveq	r3, #8
 8009c6a:	230a      	movne	r3, #10
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c72:	6866      	ldr	r6, [r4, #4]
 8009c74:	60a6      	str	r6, [r4, #8]
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	bfa2      	ittt	ge
 8009c7a:	6821      	ldrge	r1, [r4, #0]
 8009c7c:	f021 0104 	bicge.w	r1, r1, #4
 8009c80:	6021      	strge	r1, [r4, #0]
 8009c82:	b90d      	cbnz	r5, 8009c88 <_printf_i+0x118>
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	d04d      	beq.n	8009d24 <_printf_i+0x1b4>
 8009c88:	4616      	mov	r6, r2
 8009c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c92:	5dc7      	ldrb	r7, [r0, r7]
 8009c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c98:	462f      	mov	r7, r5
 8009c9a:	42bb      	cmp	r3, r7
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	d9f4      	bls.n	8009c8a <_printf_i+0x11a>
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d10b      	bne.n	8009cbc <_printf_i+0x14c>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	07df      	lsls	r7, r3, #31
 8009ca8:	d508      	bpl.n	8009cbc <_printf_i+0x14c>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4299      	cmp	r1, r3
 8009cb0:	bfde      	ittt	le
 8009cb2:	2330      	movle	r3, #48	; 0x30
 8009cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cbc:	1b92      	subs	r2, r2, r6
 8009cbe:	6122      	str	r2, [r4, #16]
 8009cc0:	f8cd a000 	str.w	sl, [sp]
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	aa03      	add	r2, sp, #12
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7ff fee2 	bl	8009a94 <_printf_common>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d14c      	bne.n	8009d6e <_printf_i+0x1fe>
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b004      	add	sp, #16
 8009cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cde:	4835      	ldr	r0, [pc, #212]	; (8009db4 <_printf_i+0x244>)
 8009ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	680e      	ldr	r6, [r1, #0]
 8009ce8:	061f      	lsls	r7, r3, #24
 8009cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cee:	600e      	str	r6, [r1, #0]
 8009cf0:	d514      	bpl.n	8009d1c <_printf_i+0x1ac>
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	bf44      	itt	mi
 8009cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cfa:	6023      	strmi	r3, [r4, #0]
 8009cfc:	b91d      	cbnz	r5, 8009d06 <_printf_i+0x196>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	f023 0320 	bic.w	r3, r3, #32
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	2310      	movs	r3, #16
 8009d08:	e7b0      	b.n	8009c6c <_printf_i+0xfc>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	2378      	movs	r3, #120	; 0x78
 8009d14:	4828      	ldr	r0, [pc, #160]	; (8009db8 <_printf_i+0x248>)
 8009d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d1a:	e7e3      	b.n	8009ce4 <_printf_i+0x174>
 8009d1c:	065e      	lsls	r6, r3, #25
 8009d1e:	bf48      	it	mi
 8009d20:	b2ad      	uxthmi	r5, r5
 8009d22:	e7e6      	b.n	8009cf2 <_printf_i+0x182>
 8009d24:	4616      	mov	r6, r2
 8009d26:	e7bb      	b.n	8009ca0 <_printf_i+0x130>
 8009d28:	680b      	ldr	r3, [r1, #0]
 8009d2a:	6826      	ldr	r6, [r4, #0]
 8009d2c:	6960      	ldr	r0, [r4, #20]
 8009d2e:	1d1d      	adds	r5, r3, #4
 8009d30:	600d      	str	r5, [r1, #0]
 8009d32:	0635      	lsls	r5, r6, #24
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0x1cc>
 8009d38:	6018      	str	r0, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <_printf_i+0x1d2>
 8009d3c:	0671      	lsls	r1, r6, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0x1c8>
 8009d40:	8018      	strh	r0, [r3, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	4616      	mov	r6, r2
 8009d48:	e7ba      	b.n	8009cc0 <_printf_i+0x150>
 8009d4a:	680b      	ldr	r3, [r1, #0]
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	600a      	str	r2, [r1, #0]
 8009d50:	681e      	ldr	r6, [r3, #0]
 8009d52:	6862      	ldr	r2, [r4, #4]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7f6 fa2a 	bl	80001b0 <memchr>
 8009d5c:	b108      	cbz	r0, 8009d62 <_printf_i+0x1f2>
 8009d5e:	1b80      	subs	r0, r0, r6
 8009d60:	6060      	str	r0, [r4, #4]
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	2300      	movs	r3, #0
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d6c:	e7a8      	b.n	8009cc0 <_printf_i+0x150>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0ab      	beq.n	8009cd4 <_printf_i+0x164>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	079b      	lsls	r3, r3, #30
 8009d80:	d413      	bmi.n	8009daa <_printf_i+0x23a>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	4298      	cmp	r0, r3
 8009d88:	bfb8      	it	lt
 8009d8a:	4618      	movlt	r0, r3
 8009d8c:	e7a4      	b.n	8009cd8 <_printf_i+0x168>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4632      	mov	r2, r6
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d09b      	beq.n	8009cd4 <_printf_i+0x164>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	9903      	ldr	r1, [sp, #12]
 8009da2:	1a5b      	subs	r3, r3, r1
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dcf2      	bgt.n	8009d8e <_printf_i+0x21e>
 8009da8:	e7eb      	b.n	8009d82 <_printf_i+0x212>
 8009daa:	2500      	movs	r5, #0
 8009dac:	f104 0619 	add.w	r6, r4, #25
 8009db0:	e7f5      	b.n	8009d9e <_printf_i+0x22e>
 8009db2:	bf00      	nop
 8009db4:	0800e5d2 	.word	0x0800e5d2
 8009db8:	0800e5e3 	.word	0x0800e5e3

08009dbc <_perror_r>:
 8009dbc:	6983      	ldr	r3, [r0, #24]
 8009dbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc0:	68c4      	ldr	r4, [r0, #12]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	b90b      	cbnz	r3, 8009dcc <_perror_r+0x10>
 8009dc8:	f002 fac0 	bl	800c34c <__sinit>
 8009dcc:	4b43      	ldr	r3, [pc, #268]	; (8009edc <_perror_r+0x120>)
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	d132      	bne.n	8009e38 <_perror_r+0x7c>
 8009dd2:	686c      	ldr	r4, [r5, #4]
 8009dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd6:	07d8      	lsls	r0, r3, #31
 8009dd8:	d405      	bmi.n	8009de6 <_perror_r+0x2a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	0599      	lsls	r1, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_perror_r+0x2a>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f002 feb8 	bl	800cb56 <__retarget_lock_acquire_recursive>
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	f002 f9dd 	bl	800c1a8 <_fflush_r>
 8009dee:	bb6e      	cbnz	r6, 8009e4c <_perror_r+0x90>
 8009df0:	6829      	ldr	r1, [r5, #0]
 8009df2:	ab01      	add	r3, sp, #4
 8009df4:	2201      	movs	r2, #1
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f954 	bl	800a0a4 <_strerror_r>
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d14f      	bne.n	8009ea2 <_perror_r+0xe6>
 8009e02:	4837      	ldr	r0, [pc, #220]	; (8009ee0 <_perror_r+0x124>)
 8009e04:	4f36      	ldr	r7, [pc, #216]	; (8009ee0 <_perror_r+0x124>)
 8009e06:	f7f6 f9c5 	bl	8000194 <strlen>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	b156      	cbz	r6, 8009e24 <_perror_r+0x68>
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f002 fa06 	bl	800c220 <fileno>
 8009e14:	4633      	mov	r3, r6
 8009e16:	4601      	mov	r1, r0
 8009e18:	463a      	mov	r2, r7
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f001 fa44 	bl	800b2a8 <_write_r>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	da51      	bge.n	8009ec8 <_perror_r+0x10c>
 8009e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e2e:	07d2      	lsls	r2, r2, #31
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	d54c      	bpl.n	8009ece <_perror_r+0x112>
 8009e34:	b003      	add	sp, #12
 8009e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e38:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <_perror_r+0x128>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <_perror_r+0x86>
 8009e3e:	68ac      	ldr	r4, [r5, #8]
 8009e40:	e7c8      	b.n	8009dd4 <_perror_r+0x18>
 8009e42:	4b29      	ldr	r3, [pc, #164]	; (8009ee8 <_perror_r+0x12c>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68ec      	ldreq	r4, [r5, #12]
 8009e4a:	e7c3      	b.n	8009dd4 <_perror_r+0x18>
 8009e4c:	7833      	ldrb	r3, [r6, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0ce      	beq.n	8009df0 <_perror_r+0x34>
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7f6 f99e 	bl	8000194 <strlen>
 8009e58:	4607      	mov	r7, r0
 8009e5a:	b157      	cbz	r7, 8009e72 <_perror_r+0xb6>
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f002 f9df 	bl	800c220 <fileno>
 8009e62:	463b      	mov	r3, r7
 8009e64:	4601      	mov	r1, r0
 8009e66:	4632      	mov	r2, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f001 fa1d 	bl	800b2a8 <_write_r>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	da14      	bge.n	8009e9c <_perror_r+0xe0>
 8009e72:	481e      	ldr	r0, [pc, #120]	; (8009eec <_perror_r+0x130>)
 8009e74:	4f1d      	ldr	r7, [pc, #116]	; (8009eec <_perror_r+0x130>)
 8009e76:	f7f6 f98d 	bl	8000194 <strlen>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	2e00      	cmp	r6, #0
 8009e7e:	d0b7      	beq.n	8009df0 <_perror_r+0x34>
 8009e80:	4620      	mov	r0, r4
 8009e82:	f002 f9cd 	bl	800c220 <fileno>
 8009e86:	4633      	mov	r3, r6
 8009e88:	4601      	mov	r1, r0
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f001 fa0b 	bl	800b2a8 <_write_r>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	dbac      	blt.n	8009df0 <_perror_r+0x34>
 8009e96:	1a36      	subs	r6, r6, r0
 8009e98:	4407      	add	r7, r0
 8009e9a:	e7ef      	b.n	8009e7c <_perror_r+0xc0>
 8009e9c:	1a3f      	subs	r7, r7, r0
 8009e9e:	4406      	add	r6, r0
 8009ea0:	e7db      	b.n	8009e5a <_perror_r+0x9e>
 8009ea2:	f7f6 f977 	bl	8000194 <strlen>
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	2e00      	cmp	r6, #0
 8009eaa:	d0aa      	beq.n	8009e02 <_perror_r+0x46>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f002 f9b7 	bl	800c220 <fileno>
 8009eb2:	4633      	mov	r3, r6
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f001 f9f5 	bl	800b2a8 <_write_r>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	db9f      	blt.n	8009e02 <_perror_r+0x46>
 8009ec2:	1a36      	subs	r6, r6, r0
 8009ec4:	4407      	add	r7, r0
 8009ec6:	e7ef      	b.n	8009ea8 <_perror_r+0xec>
 8009ec8:	1a36      	subs	r6, r6, r0
 8009eca:	4407      	add	r7, r0
 8009ecc:	e79e      	b.n	8009e0c <_perror_r+0x50>
 8009ece:	059b      	lsls	r3, r3, #22
 8009ed0:	d4b0      	bmi.n	8009e34 <_perror_r+0x78>
 8009ed2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed4:	f002 fe40 	bl	800cb58 <__retarget_lock_release_recursive>
 8009ed8:	e7ac      	b.n	8009e34 <_perror_r+0x78>
 8009eda:	bf00      	nop
 8009edc:	0800ee98 	.word	0x0800ee98
 8009ee0:	0800f0ff 	.word	0x0800f0ff
 8009ee4:	0800eeb8 	.word	0x0800eeb8
 8009ee8:	0800ee78 	.word	0x0800ee78
 8009eec:	0800f0cf 	.word	0x0800f0cf

08009ef0 <perror>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <perror+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f7ff bf61 	b.w	8009dbc <_perror_r>
 8009efa:	bf00      	nop
 8009efc:	20000010 	.word	0x20000010

08009f00 <iprintf>:
 8009f00:	b40f      	push	{r0, r1, r2, r3}
 8009f02:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <iprintf+0x2c>)
 8009f04:	b513      	push	{r0, r1, r4, lr}
 8009f06:	681c      	ldr	r4, [r3, #0]
 8009f08:	b124      	cbz	r4, 8009f14 <iprintf+0x14>
 8009f0a:	69a3      	ldr	r3, [r4, #24]
 8009f0c:	b913      	cbnz	r3, 8009f14 <iprintf+0x14>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f002 fa1c 	bl	800c34c <__sinit>
 8009f14:	ab05      	add	r3, sp, #20
 8009f16:	9a04      	ldr	r2, [sp, #16]
 8009f18:	68a1      	ldr	r1, [r4, #8]
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f003 fce5 	bl	800d8ec <_vfiprintf_r>
 8009f22:	b002      	add	sp, #8
 8009f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f28:	b004      	add	sp, #16
 8009f2a:	4770      	bx	lr
 8009f2c:	20000010 	.word	0x20000010

08009f30 <putchar>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <putchar+0x24>)
 8009f34:	681c      	ldr	r4, [r3, #0]
 8009f36:	4605      	mov	r5, r0
 8009f38:	b124      	cbz	r4, 8009f44 <putchar+0x14>
 8009f3a:	69a3      	ldr	r3, [r4, #24]
 8009f3c:	b913      	cbnz	r3, 8009f44 <putchar+0x14>
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f002 fa04 	bl	800c34c <__sinit>
 8009f44:	68a2      	ldr	r2, [r4, #8]
 8009f46:	4629      	mov	r1, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4e:	f003 bdfd 	b.w	800db4c <_putc_r>
 8009f52:	bf00      	nop
 8009f54:	20000010 	.word	0x20000010

08009f58 <_puts_r>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	460e      	mov	r6, r1
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <_puts_r+0x10>
 8009f60:	6983      	ldr	r3, [r0, #24]
 8009f62:	b90b      	cbnz	r3, 8009f68 <_puts_r+0x10>
 8009f64:	f002 f9f2 	bl	800c34c <__sinit>
 8009f68:	69ab      	ldr	r3, [r5, #24]
 8009f6a:	68ac      	ldr	r4, [r5, #8]
 8009f6c:	b913      	cbnz	r3, 8009f74 <_puts_r+0x1c>
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f002 f9ec 	bl	800c34c <__sinit>
 8009f74:	4b2c      	ldr	r3, [pc, #176]	; (800a028 <_puts_r+0xd0>)
 8009f76:	429c      	cmp	r4, r3
 8009f78:	d120      	bne.n	8009fbc <_puts_r+0x64>
 8009f7a:	686c      	ldr	r4, [r5, #4]
 8009f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f7e:	07db      	lsls	r3, r3, #31
 8009f80:	d405      	bmi.n	8009f8e <_puts_r+0x36>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	0598      	lsls	r0, r3, #22
 8009f86:	d402      	bmi.n	8009f8e <_puts_r+0x36>
 8009f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f8a:	f002 fde4 	bl	800cb56 <__retarget_lock_acquire_recursive>
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	0719      	lsls	r1, r3, #28
 8009f92:	d51d      	bpl.n	8009fd0 <_puts_r+0x78>
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	b1db      	cbz	r3, 8009fd0 <_puts_r+0x78>
 8009f98:	3e01      	subs	r6, #1
 8009f9a:	68a3      	ldr	r3, [r4, #8]
 8009f9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	60a3      	str	r3, [r4, #8]
 8009fa4:	bb39      	cbnz	r1, 8009ff6 <_puts_r+0x9e>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da38      	bge.n	800a01c <_puts_r+0xc4>
 8009faa:	4622      	mov	r2, r4
 8009fac:	210a      	movs	r1, #10
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f001 f928 	bl	800b204 <__swbuf_r>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d011      	beq.n	8009fdc <_puts_r+0x84>
 8009fb8:	250a      	movs	r5, #10
 8009fba:	e011      	b.n	8009fe0 <_puts_r+0x88>
 8009fbc:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <_puts_r+0xd4>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d101      	bne.n	8009fc6 <_puts_r+0x6e>
 8009fc2:	68ac      	ldr	r4, [r5, #8]
 8009fc4:	e7da      	b.n	8009f7c <_puts_r+0x24>
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <_puts_r+0xd8>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	bf08      	it	eq
 8009fcc:	68ec      	ldreq	r4, [r5, #12]
 8009fce:	e7d5      	b.n	8009f7c <_puts_r+0x24>
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f001 f97a 	bl	800b2cc <__swsetup_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d0dd      	beq.n	8009f98 <_puts_r+0x40>
 8009fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8009fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe2:	07da      	lsls	r2, r3, #31
 8009fe4:	d405      	bmi.n	8009ff2 <_puts_r+0x9a>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	059b      	lsls	r3, r3, #22
 8009fea:	d402      	bmi.n	8009ff2 <_puts_r+0x9a>
 8009fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fee:	f002 fdb3 	bl	800cb58 <__retarget_lock_release_recursive>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da04      	bge.n	800a004 <_puts_r+0xac>
 8009ffa:	69a2      	ldr	r2, [r4, #24]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	dc06      	bgt.n	800a00e <_puts_r+0xb6>
 800a000:	290a      	cmp	r1, #10
 800a002:	d004      	beq.n	800a00e <_puts_r+0xb6>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	7019      	strb	r1, [r3, #0]
 800a00c:	e7c5      	b.n	8009f9a <_puts_r+0x42>
 800a00e:	4622      	mov	r2, r4
 800a010:	4628      	mov	r0, r5
 800a012:	f001 f8f7 	bl	800b204 <__swbuf_r>
 800a016:	3001      	adds	r0, #1
 800a018:	d1bf      	bne.n	8009f9a <_puts_r+0x42>
 800a01a:	e7df      	b.n	8009fdc <_puts_r+0x84>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	250a      	movs	r5, #10
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	701d      	strb	r5, [r3, #0]
 800a026:	e7db      	b.n	8009fe0 <_puts_r+0x88>
 800a028:	0800ee98 	.word	0x0800ee98
 800a02c:	0800eeb8 	.word	0x0800eeb8
 800a030:	0800ee78 	.word	0x0800ee78

0800a034 <puts>:
 800a034:	4b02      	ldr	r3, [pc, #8]	; (800a040 <puts+0xc>)
 800a036:	4601      	mov	r1, r0
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	f7ff bf8d 	b.w	8009f58 <_puts_r>
 800a03e:	bf00      	nop
 800a040:	20000010 	.word	0x20000010

0800a044 <_sbrk_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	; (800a060 <_sbrk_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 febe 	bl	8001dd0 <_sbrk>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_sbrk_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_sbrk_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	200005fc 	.word	0x200005fc

0800a064 <siprintf>:
 800a064:	b40e      	push	{r1, r2, r3}
 800a066:	b500      	push	{lr}
 800a068:	b09c      	sub	sp, #112	; 0x70
 800a06a:	ab1d      	add	r3, sp, #116	; 0x74
 800a06c:	9002      	str	r0, [sp, #8]
 800a06e:	9006      	str	r0, [sp, #24]
 800a070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a074:	4809      	ldr	r0, [pc, #36]	; (800a09c <siprintf+0x38>)
 800a076:	9107      	str	r1, [sp, #28]
 800a078:	9104      	str	r1, [sp, #16]
 800a07a:	4909      	ldr	r1, [pc, #36]	; (800a0a0 <siprintf+0x3c>)
 800a07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a080:	9105      	str	r1, [sp, #20]
 800a082:	6800      	ldr	r0, [r0, #0]
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	a902      	add	r1, sp, #8
 800a088:	f003 fb08 	bl	800d69c <_svfiprintf_r>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	b01c      	add	sp, #112	; 0x70
 800a094:	f85d eb04 	ldr.w	lr, [sp], #4
 800a098:	b003      	add	sp, #12
 800a09a:	4770      	bx	lr
 800a09c:	20000010 	.word	0x20000010
 800a0a0:	ffff0208 	.word	0xffff0208

0800a0a4 <_strerror_r>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	288e      	cmp	r0, #142	; 0x8e
 800a0ae:	f200 812f 	bhi.w	800a310 <_strerror_r+0x26c>
 800a0b2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a0b6:	0138      	.short	0x0138
 800a0b8:	0091008f 	.word	0x0091008f
 800a0bc:	00950093 	.word	0x00950093
 800a0c0:	00990097 	.word	0x00990097
 800a0c4:	009d009b 	.word	0x009d009b
 800a0c8:	00a300a1 	.word	0x00a300a1
 800a0cc:	00a900a7 	.word	0x00a900a7
 800a0d0:	00ad00ab 	.word	0x00ad00ab
 800a0d4:	00af012d 	.word	0x00af012d
 800a0d8:	00b300b1 	.word	0x00b300b1
 800a0dc:	00b700b5 	.word	0x00b700b5
 800a0e0:	00bf00bd 	.word	0x00bf00bd
 800a0e4:	00c700c5 	.word	0x00c700c5
 800a0e8:	00cb00c9 	.word	0x00cb00c9
 800a0ec:	00d100cd 	.word	0x00d100cd
 800a0f0:	00d700d5 	.word	0x00d700d5
 800a0f4:	00db00d9 	.word	0x00db00d9
 800a0f8:	00df00dd 	.word	0x00df00dd
 800a0fc:	00e300e1 	.word	0x00e300e1
 800a100:	012d012d 	.word	0x012d012d
 800a104:	012d012d 	.word	0x012d012d
 800a108:	012d012d 	.word	0x012d012d
 800a10c:	012d012d 	.word	0x012d012d
 800a110:	00eb00e7 	.word	0x00eb00e7
 800a114:	012d012d 	.word	0x012d012d
 800a118:	012d012d 	.word	0x012d012d
 800a11c:	012d012d 	.word	0x012d012d
 800a120:	012d012d 	.word	0x012d012d
 800a124:	012d012d 	.word	0x012d012d
 800a128:	012d012d 	.word	0x012d012d
 800a12c:	00ed012d 	.word	0x00ed012d
 800a130:	00ef0107 	.word	0x00ef0107
 800a134:	012d00f1 	.word	0x012d00f1
 800a138:	012d012d 	.word	0x012d012d
 800a13c:	012d00f3 	.word	0x012d00f3
 800a140:	012d012d 	.word	0x012d012d
 800a144:	012d00f5 	.word	0x012d00f5
 800a148:	00f9012d 	.word	0x00f9012d
 800a14c:	012d012d 	.word	0x012d012d
 800a150:	012d00fb 	.word	0x012d00fb
 800a154:	012d012d 	.word	0x012d012d
 800a158:	012d012d 	.word	0x012d012d
 800a15c:	012d012d 	.word	0x012d012d
 800a160:	012d012d 	.word	0x012d012d
 800a164:	00fd012d 	.word	0x00fd012d
 800a168:	00ff012d 	.word	0x00ff012d
 800a16c:	01030101 	.word	0x01030101
 800a170:	012d012d 	.word	0x012d012d
 800a174:	012d0125 	.word	0x012d0125
 800a178:	012d012d 	.word	0x012d012d
 800a17c:	012d012d 	.word	0x012d012d
 800a180:	012d012d 	.word	0x012d012d
 800a184:	0113012d 	.word	0x0113012d
 800a188:	01090105 	.word	0x01090105
 800a18c:	010d010b 	.word	0x010d010b
 800a190:	012d010f 	.word	0x012d010f
 800a194:	01150111 	.word	0x01150111
 800a198:	00e90119 	.word	0x00e90119
 800a19c:	012b00c1 	.word	0x012b00c1
 800a1a0:	00cf00b9 	.word	0x00cf00b9
 800a1a4:	009f00bb 	.word	0x009f00bb
 800a1a8:	012900a5 	.word	0x012900a5
 800a1ac:	012d00f7 	.word	0x012d00f7
 800a1b0:	00c30117 	.word	0x00c30117
 800a1b4:	011b011d 	.word	0x011b011d
 800a1b8:	012d012d 	.word	0x012d012d
 800a1bc:	012d012d 	.word	0x012d012d
 800a1c0:	00d3012d 	.word	0x00d3012d
 800a1c4:	012d012d 	.word	0x012d012d
 800a1c8:	00e5012d 	.word	0x00e5012d
 800a1cc:	011f0127 	.word	0x011f0127
 800a1d0:	01230121 	.word	0x01230121
 800a1d4:	4855      	ldr	r0, [pc, #340]	; (800a32c <_strerror_r+0x288>)
 800a1d6:	bd10      	pop	{r4, pc}
 800a1d8:	4855      	ldr	r0, [pc, #340]	; (800a330 <_strerror_r+0x28c>)
 800a1da:	e7fc      	b.n	800a1d6 <_strerror_r+0x132>
 800a1dc:	4855      	ldr	r0, [pc, #340]	; (800a334 <_strerror_r+0x290>)
 800a1de:	e7fa      	b.n	800a1d6 <_strerror_r+0x132>
 800a1e0:	4855      	ldr	r0, [pc, #340]	; (800a338 <_strerror_r+0x294>)
 800a1e2:	e7f8      	b.n	800a1d6 <_strerror_r+0x132>
 800a1e4:	4855      	ldr	r0, [pc, #340]	; (800a33c <_strerror_r+0x298>)
 800a1e6:	e7f6      	b.n	800a1d6 <_strerror_r+0x132>
 800a1e8:	4855      	ldr	r0, [pc, #340]	; (800a340 <_strerror_r+0x29c>)
 800a1ea:	e7f4      	b.n	800a1d6 <_strerror_r+0x132>
 800a1ec:	4855      	ldr	r0, [pc, #340]	; (800a344 <_strerror_r+0x2a0>)
 800a1ee:	e7f2      	b.n	800a1d6 <_strerror_r+0x132>
 800a1f0:	4855      	ldr	r0, [pc, #340]	; (800a348 <_strerror_r+0x2a4>)
 800a1f2:	e7f0      	b.n	800a1d6 <_strerror_r+0x132>
 800a1f4:	4855      	ldr	r0, [pc, #340]	; (800a34c <_strerror_r+0x2a8>)
 800a1f6:	e7ee      	b.n	800a1d6 <_strerror_r+0x132>
 800a1f8:	4855      	ldr	r0, [pc, #340]	; (800a350 <_strerror_r+0x2ac>)
 800a1fa:	e7ec      	b.n	800a1d6 <_strerror_r+0x132>
 800a1fc:	4855      	ldr	r0, [pc, #340]	; (800a354 <_strerror_r+0x2b0>)
 800a1fe:	e7ea      	b.n	800a1d6 <_strerror_r+0x132>
 800a200:	4855      	ldr	r0, [pc, #340]	; (800a358 <_strerror_r+0x2b4>)
 800a202:	e7e8      	b.n	800a1d6 <_strerror_r+0x132>
 800a204:	4855      	ldr	r0, [pc, #340]	; (800a35c <_strerror_r+0x2b8>)
 800a206:	e7e6      	b.n	800a1d6 <_strerror_r+0x132>
 800a208:	4855      	ldr	r0, [pc, #340]	; (800a360 <_strerror_r+0x2bc>)
 800a20a:	e7e4      	b.n	800a1d6 <_strerror_r+0x132>
 800a20c:	4855      	ldr	r0, [pc, #340]	; (800a364 <_strerror_r+0x2c0>)
 800a20e:	e7e2      	b.n	800a1d6 <_strerror_r+0x132>
 800a210:	4855      	ldr	r0, [pc, #340]	; (800a368 <_strerror_r+0x2c4>)
 800a212:	e7e0      	b.n	800a1d6 <_strerror_r+0x132>
 800a214:	4855      	ldr	r0, [pc, #340]	; (800a36c <_strerror_r+0x2c8>)
 800a216:	e7de      	b.n	800a1d6 <_strerror_r+0x132>
 800a218:	4855      	ldr	r0, [pc, #340]	; (800a370 <_strerror_r+0x2cc>)
 800a21a:	e7dc      	b.n	800a1d6 <_strerror_r+0x132>
 800a21c:	4855      	ldr	r0, [pc, #340]	; (800a374 <_strerror_r+0x2d0>)
 800a21e:	e7da      	b.n	800a1d6 <_strerror_r+0x132>
 800a220:	4855      	ldr	r0, [pc, #340]	; (800a378 <_strerror_r+0x2d4>)
 800a222:	e7d8      	b.n	800a1d6 <_strerror_r+0x132>
 800a224:	4855      	ldr	r0, [pc, #340]	; (800a37c <_strerror_r+0x2d8>)
 800a226:	e7d6      	b.n	800a1d6 <_strerror_r+0x132>
 800a228:	4855      	ldr	r0, [pc, #340]	; (800a380 <_strerror_r+0x2dc>)
 800a22a:	e7d4      	b.n	800a1d6 <_strerror_r+0x132>
 800a22c:	4855      	ldr	r0, [pc, #340]	; (800a384 <_strerror_r+0x2e0>)
 800a22e:	e7d2      	b.n	800a1d6 <_strerror_r+0x132>
 800a230:	4855      	ldr	r0, [pc, #340]	; (800a388 <_strerror_r+0x2e4>)
 800a232:	e7d0      	b.n	800a1d6 <_strerror_r+0x132>
 800a234:	4855      	ldr	r0, [pc, #340]	; (800a38c <_strerror_r+0x2e8>)
 800a236:	e7ce      	b.n	800a1d6 <_strerror_r+0x132>
 800a238:	4855      	ldr	r0, [pc, #340]	; (800a390 <_strerror_r+0x2ec>)
 800a23a:	e7cc      	b.n	800a1d6 <_strerror_r+0x132>
 800a23c:	4855      	ldr	r0, [pc, #340]	; (800a394 <_strerror_r+0x2f0>)
 800a23e:	e7ca      	b.n	800a1d6 <_strerror_r+0x132>
 800a240:	4855      	ldr	r0, [pc, #340]	; (800a398 <_strerror_r+0x2f4>)
 800a242:	e7c8      	b.n	800a1d6 <_strerror_r+0x132>
 800a244:	4855      	ldr	r0, [pc, #340]	; (800a39c <_strerror_r+0x2f8>)
 800a246:	e7c6      	b.n	800a1d6 <_strerror_r+0x132>
 800a248:	4855      	ldr	r0, [pc, #340]	; (800a3a0 <_strerror_r+0x2fc>)
 800a24a:	e7c4      	b.n	800a1d6 <_strerror_r+0x132>
 800a24c:	4855      	ldr	r0, [pc, #340]	; (800a3a4 <_strerror_r+0x300>)
 800a24e:	e7c2      	b.n	800a1d6 <_strerror_r+0x132>
 800a250:	4855      	ldr	r0, [pc, #340]	; (800a3a8 <_strerror_r+0x304>)
 800a252:	e7c0      	b.n	800a1d6 <_strerror_r+0x132>
 800a254:	4855      	ldr	r0, [pc, #340]	; (800a3ac <_strerror_r+0x308>)
 800a256:	e7be      	b.n	800a1d6 <_strerror_r+0x132>
 800a258:	4855      	ldr	r0, [pc, #340]	; (800a3b0 <_strerror_r+0x30c>)
 800a25a:	e7bc      	b.n	800a1d6 <_strerror_r+0x132>
 800a25c:	4855      	ldr	r0, [pc, #340]	; (800a3b4 <_strerror_r+0x310>)
 800a25e:	e7ba      	b.n	800a1d6 <_strerror_r+0x132>
 800a260:	4855      	ldr	r0, [pc, #340]	; (800a3b8 <_strerror_r+0x314>)
 800a262:	e7b8      	b.n	800a1d6 <_strerror_r+0x132>
 800a264:	4855      	ldr	r0, [pc, #340]	; (800a3bc <_strerror_r+0x318>)
 800a266:	e7b6      	b.n	800a1d6 <_strerror_r+0x132>
 800a268:	4855      	ldr	r0, [pc, #340]	; (800a3c0 <_strerror_r+0x31c>)
 800a26a:	e7b4      	b.n	800a1d6 <_strerror_r+0x132>
 800a26c:	4855      	ldr	r0, [pc, #340]	; (800a3c4 <_strerror_r+0x320>)
 800a26e:	e7b2      	b.n	800a1d6 <_strerror_r+0x132>
 800a270:	4855      	ldr	r0, [pc, #340]	; (800a3c8 <_strerror_r+0x324>)
 800a272:	e7b0      	b.n	800a1d6 <_strerror_r+0x132>
 800a274:	4855      	ldr	r0, [pc, #340]	; (800a3cc <_strerror_r+0x328>)
 800a276:	e7ae      	b.n	800a1d6 <_strerror_r+0x132>
 800a278:	4855      	ldr	r0, [pc, #340]	; (800a3d0 <_strerror_r+0x32c>)
 800a27a:	e7ac      	b.n	800a1d6 <_strerror_r+0x132>
 800a27c:	4855      	ldr	r0, [pc, #340]	; (800a3d4 <_strerror_r+0x330>)
 800a27e:	e7aa      	b.n	800a1d6 <_strerror_r+0x132>
 800a280:	4855      	ldr	r0, [pc, #340]	; (800a3d8 <_strerror_r+0x334>)
 800a282:	e7a8      	b.n	800a1d6 <_strerror_r+0x132>
 800a284:	4855      	ldr	r0, [pc, #340]	; (800a3dc <_strerror_r+0x338>)
 800a286:	e7a6      	b.n	800a1d6 <_strerror_r+0x132>
 800a288:	4855      	ldr	r0, [pc, #340]	; (800a3e0 <_strerror_r+0x33c>)
 800a28a:	e7a4      	b.n	800a1d6 <_strerror_r+0x132>
 800a28c:	4855      	ldr	r0, [pc, #340]	; (800a3e4 <_strerror_r+0x340>)
 800a28e:	e7a2      	b.n	800a1d6 <_strerror_r+0x132>
 800a290:	4855      	ldr	r0, [pc, #340]	; (800a3e8 <_strerror_r+0x344>)
 800a292:	e7a0      	b.n	800a1d6 <_strerror_r+0x132>
 800a294:	4855      	ldr	r0, [pc, #340]	; (800a3ec <_strerror_r+0x348>)
 800a296:	e79e      	b.n	800a1d6 <_strerror_r+0x132>
 800a298:	4855      	ldr	r0, [pc, #340]	; (800a3f0 <_strerror_r+0x34c>)
 800a29a:	e79c      	b.n	800a1d6 <_strerror_r+0x132>
 800a29c:	4855      	ldr	r0, [pc, #340]	; (800a3f4 <_strerror_r+0x350>)
 800a29e:	e79a      	b.n	800a1d6 <_strerror_r+0x132>
 800a2a0:	4855      	ldr	r0, [pc, #340]	; (800a3f8 <_strerror_r+0x354>)
 800a2a2:	e798      	b.n	800a1d6 <_strerror_r+0x132>
 800a2a4:	4855      	ldr	r0, [pc, #340]	; (800a3fc <_strerror_r+0x358>)
 800a2a6:	e796      	b.n	800a1d6 <_strerror_r+0x132>
 800a2a8:	4855      	ldr	r0, [pc, #340]	; (800a400 <_strerror_r+0x35c>)
 800a2aa:	e794      	b.n	800a1d6 <_strerror_r+0x132>
 800a2ac:	4855      	ldr	r0, [pc, #340]	; (800a404 <_strerror_r+0x360>)
 800a2ae:	e792      	b.n	800a1d6 <_strerror_r+0x132>
 800a2b0:	4855      	ldr	r0, [pc, #340]	; (800a408 <_strerror_r+0x364>)
 800a2b2:	e790      	b.n	800a1d6 <_strerror_r+0x132>
 800a2b4:	4855      	ldr	r0, [pc, #340]	; (800a40c <_strerror_r+0x368>)
 800a2b6:	e78e      	b.n	800a1d6 <_strerror_r+0x132>
 800a2b8:	4855      	ldr	r0, [pc, #340]	; (800a410 <_strerror_r+0x36c>)
 800a2ba:	e78c      	b.n	800a1d6 <_strerror_r+0x132>
 800a2bc:	4855      	ldr	r0, [pc, #340]	; (800a414 <_strerror_r+0x370>)
 800a2be:	e78a      	b.n	800a1d6 <_strerror_r+0x132>
 800a2c0:	4855      	ldr	r0, [pc, #340]	; (800a418 <_strerror_r+0x374>)
 800a2c2:	e788      	b.n	800a1d6 <_strerror_r+0x132>
 800a2c4:	4855      	ldr	r0, [pc, #340]	; (800a41c <_strerror_r+0x378>)
 800a2c6:	e786      	b.n	800a1d6 <_strerror_r+0x132>
 800a2c8:	4855      	ldr	r0, [pc, #340]	; (800a420 <_strerror_r+0x37c>)
 800a2ca:	e784      	b.n	800a1d6 <_strerror_r+0x132>
 800a2cc:	4855      	ldr	r0, [pc, #340]	; (800a424 <_strerror_r+0x380>)
 800a2ce:	e782      	b.n	800a1d6 <_strerror_r+0x132>
 800a2d0:	4855      	ldr	r0, [pc, #340]	; (800a428 <_strerror_r+0x384>)
 800a2d2:	e780      	b.n	800a1d6 <_strerror_r+0x132>
 800a2d4:	4855      	ldr	r0, [pc, #340]	; (800a42c <_strerror_r+0x388>)
 800a2d6:	e77e      	b.n	800a1d6 <_strerror_r+0x132>
 800a2d8:	4855      	ldr	r0, [pc, #340]	; (800a430 <_strerror_r+0x38c>)
 800a2da:	e77c      	b.n	800a1d6 <_strerror_r+0x132>
 800a2dc:	4855      	ldr	r0, [pc, #340]	; (800a434 <_strerror_r+0x390>)
 800a2de:	e77a      	b.n	800a1d6 <_strerror_r+0x132>
 800a2e0:	4855      	ldr	r0, [pc, #340]	; (800a438 <_strerror_r+0x394>)
 800a2e2:	e778      	b.n	800a1d6 <_strerror_r+0x132>
 800a2e4:	4855      	ldr	r0, [pc, #340]	; (800a43c <_strerror_r+0x398>)
 800a2e6:	e776      	b.n	800a1d6 <_strerror_r+0x132>
 800a2e8:	4855      	ldr	r0, [pc, #340]	; (800a440 <_strerror_r+0x39c>)
 800a2ea:	e774      	b.n	800a1d6 <_strerror_r+0x132>
 800a2ec:	4855      	ldr	r0, [pc, #340]	; (800a444 <_strerror_r+0x3a0>)
 800a2ee:	e772      	b.n	800a1d6 <_strerror_r+0x132>
 800a2f0:	4855      	ldr	r0, [pc, #340]	; (800a448 <_strerror_r+0x3a4>)
 800a2f2:	e770      	b.n	800a1d6 <_strerror_r+0x132>
 800a2f4:	4855      	ldr	r0, [pc, #340]	; (800a44c <_strerror_r+0x3a8>)
 800a2f6:	e76e      	b.n	800a1d6 <_strerror_r+0x132>
 800a2f8:	4855      	ldr	r0, [pc, #340]	; (800a450 <_strerror_r+0x3ac>)
 800a2fa:	e76c      	b.n	800a1d6 <_strerror_r+0x132>
 800a2fc:	4855      	ldr	r0, [pc, #340]	; (800a454 <_strerror_r+0x3b0>)
 800a2fe:	e76a      	b.n	800a1d6 <_strerror_r+0x132>
 800a300:	4855      	ldr	r0, [pc, #340]	; (800a458 <_strerror_r+0x3b4>)
 800a302:	e768      	b.n	800a1d6 <_strerror_r+0x132>
 800a304:	4855      	ldr	r0, [pc, #340]	; (800a45c <_strerror_r+0x3b8>)
 800a306:	e766      	b.n	800a1d6 <_strerror_r+0x132>
 800a308:	4855      	ldr	r0, [pc, #340]	; (800a460 <_strerror_r+0x3bc>)
 800a30a:	e764      	b.n	800a1d6 <_strerror_r+0x132>
 800a30c:	4855      	ldr	r0, [pc, #340]	; (800a464 <_strerror_r+0x3c0>)
 800a30e:	e762      	b.n	800a1d6 <_strerror_r+0x132>
 800a310:	2b00      	cmp	r3, #0
 800a312:	bf14      	ite	ne
 800a314:	461a      	movne	r2, r3
 800a316:	4622      	moveq	r2, r4
 800a318:	f000 ff72 	bl	800b200 <_user_strerror>
 800a31c:	4b52      	ldr	r3, [pc, #328]	; (800a468 <_strerror_r+0x3c4>)
 800a31e:	2800      	cmp	r0, #0
 800a320:	bf08      	it	eq
 800a322:	4618      	moveq	r0, r3
 800a324:	e757      	b.n	800a1d6 <_strerror_r+0x132>
 800a326:	4851      	ldr	r0, [pc, #324]	; (800a46c <_strerror_r+0x3c8>)
 800a328:	e755      	b.n	800a1d6 <_strerror_r+0x132>
 800a32a:	bf00      	nop
 800a32c:	0800e5f4 	.word	0x0800e5f4
 800a330:	0800e5fe 	.word	0x0800e5fe
 800a334:	0800e618 	.word	0x0800e618
 800a338:	0800e628 	.word	0x0800e628
 800a33c:	0800e640 	.word	0x0800e640
 800a340:	0800e64a 	.word	0x0800e64a
 800a344:	0800e664 	.word	0x0800e664
 800a348:	0800e676 	.word	0x0800e676
 800a34c:	0800e688 	.word	0x0800e688
 800a350:	0800e6a1 	.word	0x0800e6a1
 800a354:	0800e6b1 	.word	0x0800e6b1
 800a358:	0800e6bd 	.word	0x0800e6bd
 800a35c:	0800e6da 	.word	0x0800e6da
 800a360:	0800e6ec 	.word	0x0800e6ec
 800a364:	0800e6fd 	.word	0x0800e6fd
 800a368:	0800e70f 	.word	0x0800e70f
 800a36c:	0800e71b 	.word	0x0800e71b
 800a370:	0800e733 	.word	0x0800e733
 800a374:	0800e73f 	.word	0x0800e73f
 800a378:	0800e751 	.word	0x0800e751
 800a37c:	0800e760 	.word	0x0800e760
 800a380:	0800e770 	.word	0x0800e770
 800a384:	0800e77d 	.word	0x0800e77d
 800a388:	0800e79c 	.word	0x0800e79c
 800a38c:	0800e7ab 	.word	0x0800e7ab
 800a390:	0800e7bc 	.word	0x0800e7bc
 800a394:	0800e7e0 	.word	0x0800e7e0
 800a398:	0800e7fe 	.word	0x0800e7fe
 800a39c:	0800e81c 	.word	0x0800e81c
 800a3a0:	0800e83c 	.word	0x0800e83c
 800a3a4:	0800e853 	.word	0x0800e853
 800a3a8:	0800e862 	.word	0x0800e862
 800a3ac:	0800e871 	.word	0x0800e871
 800a3b0:	0800e885 	.word	0x0800e885
 800a3b4:	0800e89d 	.word	0x0800e89d
 800a3b8:	0800e8ab 	.word	0x0800e8ab
 800a3bc:	0800e8b8 	.word	0x0800e8b8
 800a3c0:	0800e8ce 	.word	0x0800e8ce
 800a3c4:	0800e8dd 	.word	0x0800e8dd
 800a3c8:	0800e8e9 	.word	0x0800e8e9
 800a3cc:	0800e918 	.word	0x0800e918
 800a3d0:	0800e929 	.word	0x0800e929
 800a3d4:	0800e944 	.word	0x0800e944
 800a3d8:	0800e957 	.word	0x0800e957
 800a3dc:	0800e96d 	.word	0x0800e96d
 800a3e0:	0800e976 	.word	0x0800e976
 800a3e4:	0800e98d 	.word	0x0800e98d
 800a3e8:	0800e995 	.word	0x0800e995
 800a3ec:	0800e9a2 	.word	0x0800e9a2
 800a3f0:	0800e9b7 	.word	0x0800e9b7
 800a3f4:	0800e9cb 	.word	0x0800e9cb
 800a3f8:	0800e9e3 	.word	0x0800e9e3
 800a3fc:	0800e9f2 	.word	0x0800e9f2
 800a400:	0800ea03 	.word	0x0800ea03
 800a404:	0800ea16 	.word	0x0800ea16
 800a408:	0800ea22 	.word	0x0800ea22
 800a40c:	0800ea3b 	.word	0x0800ea3b
 800a410:	0800ea4f 	.word	0x0800ea4f
 800a414:	0800ea6a 	.word	0x0800ea6a
 800a418:	0800ea82 	.word	0x0800ea82
 800a41c:	0800ea9c 	.word	0x0800ea9c
 800a420:	0800eaa4 	.word	0x0800eaa4
 800a424:	0800ead4 	.word	0x0800ead4
 800a428:	0800eaf3 	.word	0x0800eaf3
 800a42c:	0800eb12 	.word	0x0800eb12
 800a430:	0800eb29 	.word	0x0800eb29
 800a434:	0800eb3c 	.word	0x0800eb3c
 800a438:	0800eb55 	.word	0x0800eb55
 800a43c:	0800eb6c 	.word	0x0800eb6c
 800a440:	0800eb82 	.word	0x0800eb82
 800a444:	0800eba3 	.word	0x0800eba3
 800a448:	0800ebbb 	.word	0x0800ebbb
 800a44c:	0800ebd7 	.word	0x0800ebd7
 800a450:	0800ebea 	.word	0x0800ebea
 800a454:	0800ec00 	.word	0x0800ec00
 800a458:	0800ec14 	.word	0x0800ec14
 800a45c:	0800ec36 	.word	0x0800ec36
 800a460:	0800ec5c 	.word	0x0800ec5c
 800a464:	0800ec6d 	.word	0x0800ec6d
 800a468:	0800f100 	.word	0x0800f100
 800a46c:	0800ec82 	.word	0x0800ec82

0800a470 <strstr>:
 800a470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a472:	780c      	ldrb	r4, [r1, #0]
 800a474:	b164      	cbz	r4, 800a490 <strstr+0x20>
 800a476:	4603      	mov	r3, r0
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	4618      	mov	r0, r3
 800a47c:	1c5e      	adds	r6, r3, #1
 800a47e:	b90a      	cbnz	r2, 800a484 <strstr+0x14>
 800a480:	4610      	mov	r0, r2
 800a482:	e005      	b.n	800a490 <strstr+0x20>
 800a484:	4294      	cmp	r4, r2
 800a486:	d108      	bne.n	800a49a <strstr+0x2a>
 800a488:	460d      	mov	r5, r1
 800a48a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a48e:	b902      	cbnz	r2, 800a492 <strstr+0x22>
 800a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a492:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a496:	4297      	cmp	r7, r2
 800a498:	d0f7      	beq.n	800a48a <strstr+0x1a>
 800a49a:	4633      	mov	r3, r6
 800a49c:	e7ec      	b.n	800a478 <strstr+0x8>

0800a49e <sulp>:
 800a49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	4690      	mov	r8, r2
 800a4a6:	f002 ff47 	bl	800d338 <__ulp>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	d011      	beq.n	800a4d8 <sulp+0x3a>
 800a4b4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a4b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dd0b      	ble.n	800a4d8 <sulp+0x3a>
 800a4c0:	051b      	lsls	r3, r3, #20
 800a4c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4c6:	2400      	movs	r4, #0
 800a4c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	f7f6 f87a 	bl	80005c8 <__aeabi_dmul>
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4e0 <_strtod_l>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	b0a1      	sub	sp, #132	; 0x84
 800a4e6:	469b      	mov	fp, r3
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	931c      	str	r3, [sp, #112]	; 0x70
 800a4ec:	4ba1      	ldr	r3, [pc, #644]	; (800a774 <_strtod_l+0x294>)
 800a4ee:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4f0:	681f      	ldr	r7, [r3, #0]
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	f7f5 fe4c 	bl	8000194 <strlen>
 800a4fc:	f04f 0800 	mov.w	r8, #0
 800a500:	4604      	mov	r4, r0
 800a502:	f04f 0900 	mov.w	r9, #0
 800a506:	961b      	str	r6, [sp, #108]	; 0x6c
 800a508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	2a2b      	cmp	r2, #43	; 0x2b
 800a50e:	d04c      	beq.n	800a5aa <_strtod_l+0xca>
 800a510:	d83a      	bhi.n	800a588 <_strtod_l+0xa8>
 800a512:	2a0d      	cmp	r2, #13
 800a514:	d833      	bhi.n	800a57e <_strtod_l+0x9e>
 800a516:	2a08      	cmp	r2, #8
 800a518:	d833      	bhi.n	800a582 <_strtod_l+0xa2>
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	d03d      	beq.n	800a59a <_strtod_l+0xba>
 800a51e:	2300      	movs	r3, #0
 800a520:	930c      	str	r3, [sp, #48]	; 0x30
 800a522:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a524:	782b      	ldrb	r3, [r5, #0]
 800a526:	2b30      	cmp	r3, #48	; 0x30
 800a528:	f040 80af 	bne.w	800a68a <_strtod_l+0x1aa>
 800a52c:	786b      	ldrb	r3, [r5, #1]
 800a52e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a532:	2b58      	cmp	r3, #88	; 0x58
 800a534:	d16c      	bne.n	800a610 <_strtod_l+0x130>
 800a536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	ab1c      	add	r3, sp, #112	; 0x70
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4a8e      	ldr	r2, [pc, #568]	; (800a778 <_strtod_l+0x298>)
 800a540:	f8cd b008 	str.w	fp, [sp, #8]
 800a544:	ab1d      	add	r3, sp, #116	; 0x74
 800a546:	a91b      	add	r1, sp, #108	; 0x6c
 800a548:	4650      	mov	r0, sl
 800a54a:	f002 f803 	bl	800c554 <__gethex>
 800a54e:	f010 0607 	ands.w	r6, r0, #7
 800a552:	4604      	mov	r4, r0
 800a554:	d005      	beq.n	800a562 <_strtod_l+0x82>
 800a556:	2e06      	cmp	r6, #6
 800a558:	d129      	bne.n	800a5ae <_strtod_l+0xce>
 800a55a:	3501      	adds	r5, #1
 800a55c:	2300      	movs	r3, #0
 800a55e:	951b      	str	r5, [sp, #108]	; 0x6c
 800a560:	930c      	str	r3, [sp, #48]	; 0x30
 800a562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a564:	2b00      	cmp	r3, #0
 800a566:	f040 8596 	bne.w	800b096 <_strtod_l+0xbb6>
 800a56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a56c:	b1d3      	cbz	r3, 800a5a4 <_strtod_l+0xc4>
 800a56e:	4642      	mov	r2, r8
 800a570:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a574:	4610      	mov	r0, r2
 800a576:	4619      	mov	r1, r3
 800a578:	b021      	add	sp, #132	; 0x84
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	2a20      	cmp	r2, #32
 800a580:	d1cd      	bne.n	800a51e <_strtod_l+0x3e>
 800a582:	3301      	adds	r3, #1
 800a584:	931b      	str	r3, [sp, #108]	; 0x6c
 800a586:	e7bf      	b.n	800a508 <_strtod_l+0x28>
 800a588:	2a2d      	cmp	r2, #45	; 0x2d
 800a58a:	d1c8      	bne.n	800a51e <_strtod_l+0x3e>
 800a58c:	2201      	movs	r2, #1
 800a58e:	920c      	str	r2, [sp, #48]	; 0x30
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	921b      	str	r2, [sp, #108]	; 0x6c
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1c3      	bne.n	800a522 <_strtod_l+0x42>
 800a59a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a59c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 8577 	bne.w	800b092 <_strtod_l+0xbb2>
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	e7e4      	b.n	800a574 <_strtod_l+0x94>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	e7ef      	b.n	800a58e <_strtod_l+0xae>
 800a5ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a5b0:	b13a      	cbz	r2, 800a5c2 <_strtod_l+0xe2>
 800a5b2:	2135      	movs	r1, #53	; 0x35
 800a5b4:	a81e      	add	r0, sp, #120	; 0x78
 800a5b6:	f002 ffc3 	bl	800d540 <__copybits>
 800a5ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5bc:	4650      	mov	r0, sl
 800a5be:	f002 fb8f 	bl	800cce0 <_Bfree>
 800a5c2:	3e01      	subs	r6, #1
 800a5c4:	2e05      	cmp	r6, #5
 800a5c6:	d807      	bhi.n	800a5d8 <_strtod_l+0xf8>
 800a5c8:	e8df f006 	tbb	[pc, r6]
 800a5cc:	1d180b0e 	.word	0x1d180b0e
 800a5d0:	030e      	.short	0x030e
 800a5d2:	f04f 0900 	mov.w	r9, #0
 800a5d6:	46c8      	mov	r8, r9
 800a5d8:	0721      	lsls	r1, r4, #28
 800a5da:	d5c2      	bpl.n	800a562 <_strtod_l+0x82>
 800a5dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a5e0:	e7bf      	b.n	800a562 <_strtod_l+0x82>
 800a5e2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a5e6:	e7f7      	b.n	800a5d8 <_strtod_l+0xf8>
 800a5e8:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a5ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a5fa:	e7ed      	b.n	800a5d8 <_strtod_l+0xf8>
 800a5fc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a77c <_strtod_l+0x29c>
 800a600:	f04f 0800 	mov.w	r8, #0
 800a604:	e7e8      	b.n	800a5d8 <_strtod_l+0xf8>
 800a606:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a60a:	f04f 38ff 	mov.w	r8, #4294967295
 800a60e:	e7e3      	b.n	800a5d8 <_strtod_l+0xf8>
 800a610:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	921b      	str	r2, [sp, #108]	; 0x6c
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b30      	cmp	r3, #48	; 0x30
 800a61a:	d0f9      	beq.n	800a610 <_strtod_l+0x130>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d0a0      	beq.n	800a562 <_strtod_l+0x82>
 800a620:	2301      	movs	r3, #1
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a626:	9308      	str	r3, [sp, #32]
 800a628:	2300      	movs	r3, #0
 800a62a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a62e:	469b      	mov	fp, r3
 800a630:	220a      	movs	r2, #10
 800a632:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a634:	7805      	ldrb	r5, [r0, #0]
 800a636:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a63a:	b2d9      	uxtb	r1, r3
 800a63c:	2909      	cmp	r1, #9
 800a63e:	d926      	bls.n	800a68e <_strtod_l+0x1ae>
 800a640:	4622      	mov	r2, r4
 800a642:	4639      	mov	r1, r7
 800a644:	f003 fb13 	bl	800dc6e <strncmp>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d032      	beq.n	800a6b2 <_strtod_l+0x1d2>
 800a64c:	2000      	movs	r0, #0
 800a64e:	462b      	mov	r3, r5
 800a650:	465c      	mov	r4, fp
 800a652:	9004      	str	r0, [sp, #16]
 800a654:	4602      	mov	r2, r0
 800a656:	2b65      	cmp	r3, #101	; 0x65
 800a658:	d001      	beq.n	800a65e <_strtod_l+0x17e>
 800a65a:	2b45      	cmp	r3, #69	; 0x45
 800a65c:	d113      	bne.n	800a686 <_strtod_l+0x1a6>
 800a65e:	b91c      	cbnz	r4, 800a668 <_strtod_l+0x188>
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	4303      	orrs	r3, r0
 800a664:	d099      	beq.n	800a59a <_strtod_l+0xba>
 800a666:	2400      	movs	r4, #0
 800a668:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a66a:	1c73      	adds	r3, r6, #1
 800a66c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a66e:	7873      	ldrb	r3, [r6, #1]
 800a670:	2b2b      	cmp	r3, #43	; 0x2b
 800a672:	d078      	beq.n	800a766 <_strtod_l+0x286>
 800a674:	2b2d      	cmp	r3, #45	; 0x2d
 800a676:	d07b      	beq.n	800a770 <_strtod_l+0x290>
 800a678:	2700      	movs	r7, #0
 800a67a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a67e:	2909      	cmp	r1, #9
 800a680:	f240 8082 	bls.w	800a788 <_strtod_l+0x2a8>
 800a684:	961b      	str	r6, [sp, #108]	; 0x6c
 800a686:	2500      	movs	r5, #0
 800a688:	e09e      	b.n	800a7c8 <_strtod_l+0x2e8>
 800a68a:	2300      	movs	r3, #0
 800a68c:	e7c9      	b.n	800a622 <_strtod_l+0x142>
 800a68e:	f1bb 0f08 	cmp.w	fp, #8
 800a692:	bfd5      	itete	le
 800a694:	9906      	ldrle	r1, [sp, #24]
 800a696:	9905      	ldrgt	r1, [sp, #20]
 800a698:	fb02 3301 	mlale	r3, r2, r1, r3
 800a69c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a6a0:	f100 0001 	add.w	r0, r0, #1
 800a6a4:	bfd4      	ite	le
 800a6a6:	9306      	strle	r3, [sp, #24]
 800a6a8:	9305      	strgt	r3, [sp, #20]
 800a6aa:	f10b 0b01 	add.w	fp, fp, #1
 800a6ae:	901b      	str	r0, [sp, #108]	; 0x6c
 800a6b0:	e7bf      	b.n	800a632 <_strtod_l+0x152>
 800a6b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6b4:	191a      	adds	r2, r3, r4
 800a6b6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6b8:	5d1b      	ldrb	r3, [r3, r4]
 800a6ba:	f1bb 0f00 	cmp.w	fp, #0
 800a6be:	d036      	beq.n	800a72e <_strtod_l+0x24e>
 800a6c0:	9004      	str	r0, [sp, #16]
 800a6c2:	465c      	mov	r4, fp
 800a6c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a6c8:	2a09      	cmp	r2, #9
 800a6ca:	d912      	bls.n	800a6f2 <_strtod_l+0x212>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	e7c2      	b.n	800a656 <_strtod_l+0x176>
 800a6d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6d6:	785b      	ldrb	r3, [r3, #1]
 800a6d8:	3001      	adds	r0, #1
 800a6da:	2b30      	cmp	r3, #48	; 0x30
 800a6dc:	d0f8      	beq.n	800a6d0 <_strtod_l+0x1f0>
 800a6de:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a6e2:	2a08      	cmp	r2, #8
 800a6e4:	f200 84dc 	bhi.w	800b0a0 <_strtod_l+0xbc0>
 800a6e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6ea:	9004      	str	r0, [sp, #16]
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	9208      	str	r2, [sp, #32]
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	3b30      	subs	r3, #48	; 0x30
 800a6f4:	f100 0201 	add.w	r2, r0, #1
 800a6f8:	d013      	beq.n	800a722 <_strtod_l+0x242>
 800a6fa:	9904      	ldr	r1, [sp, #16]
 800a6fc:	4411      	add	r1, r2
 800a6fe:	9104      	str	r1, [sp, #16]
 800a700:	4622      	mov	r2, r4
 800a702:	1905      	adds	r5, r0, r4
 800a704:	210a      	movs	r1, #10
 800a706:	42aa      	cmp	r2, r5
 800a708:	d113      	bne.n	800a732 <_strtod_l+0x252>
 800a70a:	1822      	adds	r2, r4, r0
 800a70c:	2a08      	cmp	r2, #8
 800a70e:	f104 0401 	add.w	r4, r4, #1
 800a712:	4404      	add	r4, r0
 800a714:	dc1b      	bgt.n	800a74e <_strtod_l+0x26e>
 800a716:	9906      	ldr	r1, [sp, #24]
 800a718:	220a      	movs	r2, #10
 800a71a:	fb02 3301 	mla	r3, r2, r1, r3
 800a71e:	9306      	str	r3, [sp, #24]
 800a720:	2200      	movs	r2, #0
 800a722:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	911b      	str	r1, [sp, #108]	; 0x6c
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	4610      	mov	r0, r2
 800a72c:	e7ca      	b.n	800a6c4 <_strtod_l+0x1e4>
 800a72e:	4658      	mov	r0, fp
 800a730:	e7d3      	b.n	800a6da <_strtod_l+0x1fa>
 800a732:	2a08      	cmp	r2, #8
 800a734:	dc04      	bgt.n	800a740 <_strtod_l+0x260>
 800a736:	9f06      	ldr	r7, [sp, #24]
 800a738:	434f      	muls	r7, r1
 800a73a:	9706      	str	r7, [sp, #24]
 800a73c:	3201      	adds	r2, #1
 800a73e:	e7e2      	b.n	800a706 <_strtod_l+0x226>
 800a740:	1c57      	adds	r7, r2, #1
 800a742:	2f10      	cmp	r7, #16
 800a744:	bfde      	ittt	le
 800a746:	9f05      	ldrle	r7, [sp, #20]
 800a748:	434f      	mulle	r7, r1
 800a74a:	9705      	strle	r7, [sp, #20]
 800a74c:	e7f6      	b.n	800a73c <_strtod_l+0x25c>
 800a74e:	2c10      	cmp	r4, #16
 800a750:	bfdf      	itttt	le
 800a752:	9905      	ldrle	r1, [sp, #20]
 800a754:	220a      	movle	r2, #10
 800a756:	fb02 3301 	mlale	r3, r2, r1, r3
 800a75a:	9305      	strle	r3, [sp, #20]
 800a75c:	e7e0      	b.n	800a720 <_strtod_l+0x240>
 800a75e:	2300      	movs	r3, #0
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	2201      	movs	r2, #1
 800a764:	e77c      	b.n	800a660 <_strtod_l+0x180>
 800a766:	2700      	movs	r7, #0
 800a768:	1cb3      	adds	r3, r6, #2
 800a76a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a76c:	78b3      	ldrb	r3, [r6, #2]
 800a76e:	e784      	b.n	800a67a <_strtod_l+0x19a>
 800a770:	2701      	movs	r7, #1
 800a772:	e7f9      	b.n	800a768 <_strtod_l+0x288>
 800a774:	0800ef44 	.word	0x0800ef44
 800a778:	0800ec8c 	.word	0x0800ec8c
 800a77c:	7ff00000 	.word	0x7ff00000
 800a780:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a782:	1c59      	adds	r1, r3, #1
 800a784:	911b      	str	r1, [sp, #108]	; 0x6c
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	2b30      	cmp	r3, #48	; 0x30
 800a78a:	d0f9      	beq.n	800a780 <_strtod_l+0x2a0>
 800a78c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a790:	2908      	cmp	r1, #8
 800a792:	f63f af78 	bhi.w	800a686 <_strtod_l+0x1a6>
 800a796:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a79a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a79c:	9309      	str	r3, [sp, #36]	; 0x24
 800a79e:	f04f 0e0a 	mov.w	lr, #10
 800a7a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7a4:	1c59      	adds	r1, r3, #1
 800a7a6:	911b      	str	r1, [sp, #108]	; 0x6c
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a7ae:	2d09      	cmp	r5, #9
 800a7b0:	d935      	bls.n	800a81e <_strtod_l+0x33e>
 800a7b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a7b4:	1b49      	subs	r1, r1, r5
 800a7b6:	2908      	cmp	r1, #8
 800a7b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a7bc:	dc02      	bgt.n	800a7c4 <_strtod_l+0x2e4>
 800a7be:	4565      	cmp	r5, ip
 800a7c0:	bfa8      	it	ge
 800a7c2:	4665      	movge	r5, ip
 800a7c4:	b107      	cbz	r7, 800a7c8 <_strtod_l+0x2e8>
 800a7c6:	426d      	negs	r5, r5
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d14c      	bne.n	800a866 <_strtod_l+0x386>
 800a7cc:	9907      	ldr	r1, [sp, #28]
 800a7ce:	4301      	orrs	r1, r0
 800a7d0:	f47f aec7 	bne.w	800a562 <_strtod_l+0x82>
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	f47f aee0 	bne.w	800a59a <_strtod_l+0xba>
 800a7da:	2b69      	cmp	r3, #105	; 0x69
 800a7dc:	d026      	beq.n	800a82c <_strtod_l+0x34c>
 800a7de:	dc23      	bgt.n	800a828 <_strtod_l+0x348>
 800a7e0:	2b49      	cmp	r3, #73	; 0x49
 800a7e2:	d023      	beq.n	800a82c <_strtod_l+0x34c>
 800a7e4:	2b4e      	cmp	r3, #78	; 0x4e
 800a7e6:	f47f aed8 	bne.w	800a59a <_strtod_l+0xba>
 800a7ea:	499c      	ldr	r1, [pc, #624]	; (800aa5c <_strtod_l+0x57c>)
 800a7ec:	a81b      	add	r0, sp, #108	; 0x6c
 800a7ee:	f002 f8fd 	bl	800c9ec <__match>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f43f aed1 	beq.w	800a59a <_strtod_l+0xba>
 800a7f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b28      	cmp	r3, #40	; 0x28
 800a7fe:	d12c      	bne.n	800a85a <_strtod_l+0x37a>
 800a800:	4997      	ldr	r1, [pc, #604]	; (800aa60 <_strtod_l+0x580>)
 800a802:	aa1e      	add	r2, sp, #120	; 0x78
 800a804:	a81b      	add	r0, sp, #108	; 0x6c
 800a806:	f002 f905 	bl	800ca14 <__hexnan>
 800a80a:	2805      	cmp	r0, #5
 800a80c:	d125      	bne.n	800a85a <_strtod_l+0x37a>
 800a80e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a810:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a814:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a818:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a81c:	e6a1      	b.n	800a562 <_strtod_l+0x82>
 800a81e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a822:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a826:	e7bc      	b.n	800a7a2 <_strtod_l+0x2c2>
 800a828:	2b6e      	cmp	r3, #110	; 0x6e
 800a82a:	e7dc      	b.n	800a7e6 <_strtod_l+0x306>
 800a82c:	498d      	ldr	r1, [pc, #564]	; (800aa64 <_strtod_l+0x584>)
 800a82e:	a81b      	add	r0, sp, #108	; 0x6c
 800a830:	f002 f8dc 	bl	800c9ec <__match>
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f aeb0 	beq.w	800a59a <_strtod_l+0xba>
 800a83a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a83c:	498a      	ldr	r1, [pc, #552]	; (800aa68 <_strtod_l+0x588>)
 800a83e:	3b01      	subs	r3, #1
 800a840:	a81b      	add	r0, sp, #108	; 0x6c
 800a842:	931b      	str	r3, [sp, #108]	; 0x6c
 800a844:	f002 f8d2 	bl	800c9ec <__match>
 800a848:	b910      	cbnz	r0, 800a850 <_strtod_l+0x370>
 800a84a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a84c:	3301      	adds	r3, #1
 800a84e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a850:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800aa78 <_strtod_l+0x598>
 800a854:	f04f 0800 	mov.w	r8, #0
 800a858:	e683      	b.n	800a562 <_strtod_l+0x82>
 800a85a:	4884      	ldr	r0, [pc, #528]	; (800aa6c <_strtod_l+0x58c>)
 800a85c:	f003 f9be 	bl	800dbdc <nan>
 800a860:	4680      	mov	r8, r0
 800a862:	4689      	mov	r9, r1
 800a864:	e67d      	b.n	800a562 <_strtod_l+0x82>
 800a866:	9b04      	ldr	r3, [sp, #16]
 800a868:	9806      	ldr	r0, [sp, #24]
 800a86a:	1aeb      	subs	r3, r5, r3
 800a86c:	f1bb 0f00 	cmp.w	fp, #0
 800a870:	bf08      	it	eq
 800a872:	46a3      	moveq	fp, r4
 800a874:	2c10      	cmp	r4, #16
 800a876:	9307      	str	r3, [sp, #28]
 800a878:	4626      	mov	r6, r4
 800a87a:	bfa8      	it	ge
 800a87c:	2610      	movge	r6, #16
 800a87e:	f7f5 fe29 	bl	80004d4 <__aeabi_ui2d>
 800a882:	2c09      	cmp	r4, #9
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	dd13      	ble.n	800a8b2 <_strtod_l+0x3d2>
 800a88a:	4b79      	ldr	r3, [pc, #484]	; (800aa70 <_strtod_l+0x590>)
 800a88c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a890:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a894:	f7f5 fe98 	bl	80005c8 <__aeabi_dmul>
 800a898:	4680      	mov	r8, r0
 800a89a:	9805      	ldr	r0, [sp, #20]
 800a89c:	4689      	mov	r9, r1
 800a89e:	f7f5 fe19 	bl	80004d4 <__aeabi_ui2d>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	f7f5 fcd7 	bl	800025c <__adddf3>
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	4689      	mov	r9, r1
 800a8b2:	2c0f      	cmp	r4, #15
 800a8b4:	dc36      	bgt.n	800a924 <_strtod_l+0x444>
 800a8b6:	9b07      	ldr	r3, [sp, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f43f ae52 	beq.w	800a562 <_strtod_l+0x82>
 800a8be:	dd22      	ble.n	800a906 <_strtod_l+0x426>
 800a8c0:	2b16      	cmp	r3, #22
 800a8c2:	dc09      	bgt.n	800a8d8 <_strtod_l+0x3f8>
 800a8c4:	4c6a      	ldr	r4, [pc, #424]	; (800aa70 <_strtod_l+0x590>)
 800a8c6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a8ca:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	f7f5 fe79 	bl	80005c8 <__aeabi_dmul>
 800a8d6:	e7c3      	b.n	800a860 <_strtod_l+0x380>
 800a8d8:	9a07      	ldr	r2, [sp, #28]
 800a8da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	db20      	blt.n	800a924 <_strtod_l+0x444>
 800a8e2:	4d63      	ldr	r5, [pc, #396]	; (800aa70 <_strtod_l+0x590>)
 800a8e4:	f1c4 040f 	rsb	r4, r4, #15
 800a8e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a8ec:	4642      	mov	r2, r8
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	f7f5 fe68 	bl	80005c8 <__aeabi_dmul>
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	1b1c      	subs	r4, r3, r4
 800a8fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a900:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a904:	e7e5      	b.n	800a8d2 <_strtod_l+0x3f2>
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	3316      	adds	r3, #22
 800a90a:	db0b      	blt.n	800a924 <_strtod_l+0x444>
 800a90c:	9b04      	ldr	r3, [sp, #16]
 800a90e:	4a58      	ldr	r2, [pc, #352]	; (800aa70 <_strtod_l+0x590>)
 800a910:	1b5d      	subs	r5, r3, r5
 800a912:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a916:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a91a:	4640      	mov	r0, r8
 800a91c:	4649      	mov	r1, r9
 800a91e:	f7f5 ff7d 	bl	800081c <__aeabi_ddiv>
 800a922:	e79d      	b.n	800a860 <_strtod_l+0x380>
 800a924:	9b07      	ldr	r3, [sp, #28]
 800a926:	1ba6      	subs	r6, r4, r6
 800a928:	441e      	add	r6, r3
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	dd71      	ble.n	800aa12 <_strtod_l+0x532>
 800a92e:	f016 030f 	ands.w	r3, r6, #15
 800a932:	d00a      	beq.n	800a94a <_strtod_l+0x46a>
 800a934:	494e      	ldr	r1, [pc, #312]	; (800aa70 <_strtod_l+0x590>)
 800a936:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a93a:	4642      	mov	r2, r8
 800a93c:	464b      	mov	r3, r9
 800a93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a942:	f7f5 fe41 	bl	80005c8 <__aeabi_dmul>
 800a946:	4680      	mov	r8, r0
 800a948:	4689      	mov	r9, r1
 800a94a:	f036 060f 	bics.w	r6, r6, #15
 800a94e:	d050      	beq.n	800a9f2 <_strtod_l+0x512>
 800a950:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a954:	dd27      	ble.n	800a9a6 <_strtod_l+0x4c6>
 800a956:	f04f 0b00 	mov.w	fp, #0
 800a95a:	f8cd b010 	str.w	fp, [sp, #16]
 800a95e:	f8cd b020 	str.w	fp, [sp, #32]
 800a962:	f8cd b018 	str.w	fp, [sp, #24]
 800a966:	2322      	movs	r3, #34	; 0x22
 800a968:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800aa78 <_strtod_l+0x598>
 800a96c:	f8ca 3000 	str.w	r3, [sl]
 800a970:	f04f 0800 	mov.w	r8, #0
 800a974:	9b08      	ldr	r3, [sp, #32]
 800a976:	2b00      	cmp	r3, #0
 800a978:	f43f adf3 	beq.w	800a562 <_strtod_l+0x82>
 800a97c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a97e:	4650      	mov	r0, sl
 800a980:	f002 f9ae 	bl	800cce0 <_Bfree>
 800a984:	9906      	ldr	r1, [sp, #24]
 800a986:	4650      	mov	r0, sl
 800a988:	f002 f9aa 	bl	800cce0 <_Bfree>
 800a98c:	9904      	ldr	r1, [sp, #16]
 800a98e:	4650      	mov	r0, sl
 800a990:	f002 f9a6 	bl	800cce0 <_Bfree>
 800a994:	9908      	ldr	r1, [sp, #32]
 800a996:	4650      	mov	r0, sl
 800a998:	f002 f9a2 	bl	800cce0 <_Bfree>
 800a99c:	4659      	mov	r1, fp
 800a99e:	4650      	mov	r0, sl
 800a9a0:	f002 f99e 	bl	800cce0 <_Bfree>
 800a9a4:	e5dd      	b.n	800a562 <_strtod_l+0x82>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	1136      	asrs	r6, r6, #4
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	461f      	mov	r7, r3
 800a9b0:	2e01      	cmp	r6, #1
 800a9b2:	dc21      	bgt.n	800a9f8 <_strtod_l+0x518>
 800a9b4:	b10b      	cbz	r3, 800a9ba <_strtod_l+0x4da>
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <_strtod_l+0x594>)
 800a9bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a9c0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a9cc:	f7f5 fdfc 	bl	80005c8 <__aeabi_dmul>
 800a9d0:	4b29      	ldr	r3, [pc, #164]	; (800aa78 <_strtod_l+0x598>)
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	400b      	ands	r3, r1
 800a9d6:	4929      	ldr	r1, [pc, #164]	; (800aa7c <_strtod_l+0x59c>)
 800a9d8:	428b      	cmp	r3, r1
 800a9da:	4680      	mov	r8, r0
 800a9dc:	d8bb      	bhi.n	800a956 <_strtod_l+0x476>
 800a9de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9e2:	428b      	cmp	r3, r1
 800a9e4:	bf86      	itte	hi
 800a9e6:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800aa80 <_strtod_l+0x5a0>
 800a9ea:	f04f 38ff 	movhi.w	r8, #4294967295
 800a9ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9305      	str	r3, [sp, #20]
 800a9f6:	e07e      	b.n	800aaf6 <_strtod_l+0x616>
 800a9f8:	07f2      	lsls	r2, r6, #31
 800a9fa:	d507      	bpl.n	800aa0c <_strtod_l+0x52c>
 800a9fc:	4b1d      	ldr	r3, [pc, #116]	; (800aa74 <_strtod_l+0x594>)
 800a9fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fddf 	bl	80005c8 <__aeabi_dmul>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	3701      	adds	r7, #1
 800aa0e:	1076      	asrs	r6, r6, #1
 800aa10:	e7ce      	b.n	800a9b0 <_strtod_l+0x4d0>
 800aa12:	d0ee      	beq.n	800a9f2 <_strtod_l+0x512>
 800aa14:	4276      	negs	r6, r6
 800aa16:	f016 020f 	ands.w	r2, r6, #15
 800aa1a:	d00a      	beq.n	800aa32 <_strtod_l+0x552>
 800aa1c:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <_strtod_l+0x590>)
 800aa1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa22:	4640      	mov	r0, r8
 800aa24:	4649      	mov	r1, r9
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fef7 	bl	800081c <__aeabi_ddiv>
 800aa2e:	4680      	mov	r8, r0
 800aa30:	4689      	mov	r9, r1
 800aa32:	1136      	asrs	r6, r6, #4
 800aa34:	d0dd      	beq.n	800a9f2 <_strtod_l+0x512>
 800aa36:	2e1f      	cmp	r6, #31
 800aa38:	dd24      	ble.n	800aa84 <_strtod_l+0x5a4>
 800aa3a:	f04f 0b00 	mov.w	fp, #0
 800aa3e:	f8cd b010 	str.w	fp, [sp, #16]
 800aa42:	f8cd b020 	str.w	fp, [sp, #32]
 800aa46:	f8cd b018 	str.w	fp, [sp, #24]
 800aa4a:	2322      	movs	r3, #34	; 0x22
 800aa4c:	f04f 0800 	mov.w	r8, #0
 800aa50:	f04f 0900 	mov.w	r9, #0
 800aa54:	f8ca 3000 	str.w	r3, [sl]
 800aa58:	e78c      	b.n	800a974 <_strtod_l+0x494>
 800aa5a:	bf00      	nop
 800aa5c:	0800e5cd 	.word	0x0800e5cd
 800aa60:	0800eca0 	.word	0x0800eca0
 800aa64:	0800e5c5 	.word	0x0800e5c5
 800aa68:	0800ede4 	.word	0x0800ede4
 800aa6c:	0800f100 	.word	0x0800f100
 800aa70:	0800efe0 	.word	0x0800efe0
 800aa74:	0800efb8 	.word	0x0800efb8
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	7ca00000 	.word	0x7ca00000
 800aa80:	7fefffff 	.word	0x7fefffff
 800aa84:	f016 0310 	ands.w	r3, r6, #16
 800aa88:	bf18      	it	ne
 800aa8a:	236a      	movne	r3, #106	; 0x6a
 800aa8c:	4fb3      	ldr	r7, [pc, #716]	; (800ad5c <_strtod_l+0x87c>)
 800aa8e:	9305      	str	r3, [sp, #20]
 800aa90:	4640      	mov	r0, r8
 800aa92:	4649      	mov	r1, r9
 800aa94:	2300      	movs	r3, #0
 800aa96:	07f2      	lsls	r2, r6, #31
 800aa98:	d504      	bpl.n	800aaa4 <_strtod_l+0x5c4>
 800aa9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa9e:	f7f5 fd93 	bl	80005c8 <__aeabi_dmul>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	1076      	asrs	r6, r6, #1
 800aaa6:	f107 0708 	add.w	r7, r7, #8
 800aaaa:	d1f4      	bne.n	800aa96 <_strtod_l+0x5b6>
 800aaac:	b10b      	cbz	r3, 800aab2 <_strtod_l+0x5d2>
 800aaae:	4680      	mov	r8, r0
 800aab0:	4689      	mov	r9, r1
 800aab2:	9b05      	ldr	r3, [sp, #20]
 800aab4:	b1bb      	cbz	r3, 800aae6 <_strtod_l+0x606>
 800aab6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800aaba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	4649      	mov	r1, r9
 800aac2:	dd10      	ble.n	800aae6 <_strtod_l+0x606>
 800aac4:	2b1f      	cmp	r3, #31
 800aac6:	f340 8128 	ble.w	800ad1a <_strtod_l+0x83a>
 800aaca:	2b34      	cmp	r3, #52	; 0x34
 800aacc:	bfde      	ittt	le
 800aace:	3b20      	suble	r3, #32
 800aad0:	f04f 32ff 	movle.w	r2, #4294967295
 800aad4:	fa02 f303 	lslle.w	r3, r2, r3
 800aad8:	f04f 0800 	mov.w	r8, #0
 800aadc:	bfcc      	ite	gt
 800aade:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aae2:	ea03 0901 	andle.w	r9, r3, r1
 800aae6:	2200      	movs	r2, #0
 800aae8:	2300      	movs	r3, #0
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f5 ffd3 	bl	8000a98 <__aeabi_dcmpeq>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d1a1      	bne.n	800aa3a <_strtod_l+0x55a>
 800aaf6:	9b06      	ldr	r3, [sp, #24]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	9908      	ldr	r1, [sp, #32]
 800aafc:	4623      	mov	r3, r4
 800aafe:	465a      	mov	r2, fp
 800ab00:	4650      	mov	r0, sl
 800ab02:	f002 f959 	bl	800cdb8 <__s2b>
 800ab06:	9008      	str	r0, [sp, #32]
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f af24 	beq.w	800a956 <_strtod_l+0x476>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	1b5d      	subs	r5, r3, r5
 800ab12:	9b07      	ldr	r3, [sp, #28]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfb4      	ite	lt
 800ab18:	462b      	movlt	r3, r5
 800ab1a:	2300      	movge	r3, #0
 800ab1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	f04f 0b00 	mov.w	fp, #0
 800ab24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab28:	9316      	str	r3, [sp, #88]	; 0x58
 800ab2a:	f8cd b010 	str.w	fp, [sp, #16]
 800ab2e:	9b08      	ldr	r3, [sp, #32]
 800ab30:	4650      	mov	r0, sl
 800ab32:	6859      	ldr	r1, [r3, #4]
 800ab34:	f002 f894 	bl	800cc60 <_Balloc>
 800ab38:	9006      	str	r0, [sp, #24]
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f43f af13 	beq.w	800a966 <_strtod_l+0x486>
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	691a      	ldr	r2, [r3, #16]
 800ab44:	3202      	adds	r2, #2
 800ab46:	f103 010c 	add.w	r1, r3, #12
 800ab4a:	0092      	lsls	r2, r2, #2
 800ab4c:	300c      	adds	r0, #12
 800ab4e:	f7fe fc1b 	bl	8009388 <memcpy>
 800ab52:	ab1e      	add	r3, sp, #120	; 0x78
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	ab1d      	add	r3, sp, #116	; 0x74
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	4650      	mov	r0, sl
 800ab60:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ab64:	f002 fc62 	bl	800d42c <__d2b>
 800ab68:	901c      	str	r0, [sp, #112]	; 0x70
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	f43f aefb 	beq.w	800a966 <_strtod_l+0x486>
 800ab70:	2101      	movs	r1, #1
 800ab72:	4650      	mov	r0, sl
 800ab74:	f002 f9b8 	bl	800cee8 <__i2b>
 800ab78:	9004      	str	r0, [sp, #16]
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f aef2 	beq.w	800a966 <_strtod_l+0x486>
 800ab82:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ab84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	bfab      	itete	ge
 800ab8a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ab8c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ab8e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ab90:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ab92:	bfac      	ite	ge
 800ab94:	18ee      	addge	r6, r5, r3
 800ab96:	1b5c      	sublt	r4, r3, r5
 800ab98:	9b05      	ldr	r3, [sp, #20]
 800ab9a:	1aed      	subs	r5, r5, r3
 800ab9c:	4415      	add	r5, r2
 800ab9e:	4b70      	ldr	r3, [pc, #448]	; (800ad60 <_strtod_l+0x880>)
 800aba0:	3d01      	subs	r5, #1
 800aba2:	429d      	cmp	r5, r3
 800aba4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aba8:	f280 80c9 	bge.w	800ad3e <_strtod_l+0x85e>
 800abac:	1b5b      	subs	r3, r3, r5
 800abae:	2b1f      	cmp	r3, #31
 800abb0:	eba2 0203 	sub.w	r2, r2, r3
 800abb4:	f04f 0701 	mov.w	r7, #1
 800abb8:	f300 80b6 	bgt.w	800ad28 <_strtod_l+0x848>
 800abbc:	fa07 f303 	lsl.w	r3, r7, r3
 800abc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800abc2:	2500      	movs	r5, #0
 800abc4:	18b7      	adds	r7, r6, r2
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	42be      	cmp	r6, r7
 800abca:	4414      	add	r4, r2
 800abcc:	441c      	add	r4, r3
 800abce:	4633      	mov	r3, r6
 800abd0:	bfa8      	it	ge
 800abd2:	463b      	movge	r3, r7
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	bfa8      	it	ge
 800abd8:	4623      	movge	r3, r4
 800abda:	2b00      	cmp	r3, #0
 800abdc:	bfc2      	ittt	gt
 800abde:	1aff      	subgt	r7, r7, r3
 800abe0:	1ae4      	subgt	r4, r4, r3
 800abe2:	1af6      	subgt	r6, r6, r3
 800abe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dd17      	ble.n	800ac1a <_strtod_l+0x73a>
 800abea:	9904      	ldr	r1, [sp, #16]
 800abec:	461a      	mov	r2, r3
 800abee:	4650      	mov	r0, sl
 800abf0:	f002 fa36 	bl	800d060 <__pow5mult>
 800abf4:	9004      	str	r0, [sp, #16]
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f43f aeb5 	beq.w	800a966 <_strtod_l+0x486>
 800abfc:	4601      	mov	r1, r0
 800abfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ac00:	4650      	mov	r0, sl
 800ac02:	f002 f987 	bl	800cf14 <__multiply>
 800ac06:	9009      	str	r0, [sp, #36]	; 0x24
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	f43f aeac 	beq.w	800a966 <_strtod_l+0x486>
 800ac0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac10:	4650      	mov	r0, sl
 800ac12:	f002 f865 	bl	800cce0 <_Bfree>
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	931c      	str	r3, [sp, #112]	; 0x70
 800ac1a:	2f00      	cmp	r7, #0
 800ac1c:	f300 8093 	bgt.w	800ad46 <_strtod_l+0x866>
 800ac20:	9b07      	ldr	r3, [sp, #28]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dd08      	ble.n	800ac38 <_strtod_l+0x758>
 800ac26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac28:	9906      	ldr	r1, [sp, #24]
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	f002 fa18 	bl	800d060 <__pow5mult>
 800ac30:	9006      	str	r0, [sp, #24]
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f43f ae97 	beq.w	800a966 <_strtod_l+0x486>
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	dd08      	ble.n	800ac4e <_strtod_l+0x76e>
 800ac3c:	9906      	ldr	r1, [sp, #24]
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4650      	mov	r0, sl
 800ac42:	f002 fa67 	bl	800d114 <__lshift>
 800ac46:	9006      	str	r0, [sp, #24]
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	f43f ae8c 	beq.w	800a966 <_strtod_l+0x486>
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	dd08      	ble.n	800ac64 <_strtod_l+0x784>
 800ac52:	9904      	ldr	r1, [sp, #16]
 800ac54:	4632      	mov	r2, r6
 800ac56:	4650      	mov	r0, sl
 800ac58:	f002 fa5c 	bl	800d114 <__lshift>
 800ac5c:	9004      	str	r0, [sp, #16]
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f ae81 	beq.w	800a966 <_strtod_l+0x486>
 800ac64:	9a06      	ldr	r2, [sp, #24]
 800ac66:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac68:	4650      	mov	r0, sl
 800ac6a:	f002 fadb 	bl	800d224 <__mdiff>
 800ac6e:	4683      	mov	fp, r0
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f43f ae78 	beq.w	800a966 <_strtod_l+0x486>
 800ac76:	2400      	movs	r4, #0
 800ac78:	68c3      	ldr	r3, [r0, #12]
 800ac7a:	9904      	ldr	r1, [sp, #16]
 800ac7c:	60c4      	str	r4, [r0, #12]
 800ac7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac80:	f002 fab4 	bl	800d1ec <__mcmp>
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	da71      	bge.n	800ad6c <_strtod_l+0x88c>
 800ac88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac8a:	ea53 0308 	orrs.w	r3, r3, r8
 800ac8e:	f040 8097 	bne.w	800adc0 <_strtod_l+0x8e0>
 800ac92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f040 8092 	bne.w	800adc0 <_strtod_l+0x8e0>
 800ac9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aca0:	0d1b      	lsrs	r3, r3, #20
 800aca2:	051b      	lsls	r3, r3, #20
 800aca4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aca8:	f240 808a 	bls.w	800adc0 <_strtod_l+0x8e0>
 800acac:	f8db 3014 	ldr.w	r3, [fp, #20]
 800acb0:	b923      	cbnz	r3, 800acbc <_strtod_l+0x7dc>
 800acb2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	f340 8082 	ble.w	800adc0 <_strtod_l+0x8e0>
 800acbc:	4659      	mov	r1, fp
 800acbe:	2201      	movs	r2, #1
 800acc0:	4650      	mov	r0, sl
 800acc2:	f002 fa27 	bl	800d114 <__lshift>
 800acc6:	9904      	ldr	r1, [sp, #16]
 800acc8:	4683      	mov	fp, r0
 800acca:	f002 fa8f 	bl	800d1ec <__mcmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	dd76      	ble.n	800adc0 <_strtod_l+0x8e0>
 800acd2:	9905      	ldr	r1, [sp, #20]
 800acd4:	4a23      	ldr	r2, [pc, #140]	; (800ad64 <_strtod_l+0x884>)
 800acd6:	464b      	mov	r3, r9
 800acd8:	2900      	cmp	r1, #0
 800acda:	f000 8092 	beq.w	800ae02 <_strtod_l+0x922>
 800acde:	ea02 0109 	and.w	r1, r2, r9
 800ace2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ace6:	f300 808c 	bgt.w	800ae02 <_strtod_l+0x922>
 800acea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800acee:	f77f aeac 	ble.w	800aa4a <_strtod_l+0x56a>
 800acf2:	4a1d      	ldr	r2, [pc, #116]	; (800ad68 <_strtod_l+0x888>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800acfa:	4640      	mov	r0, r8
 800acfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 fc61 	bl	80005c8 <__aeabi_dmul>
 800ad06:	460b      	mov	r3, r1
 800ad08:	4303      	orrs	r3, r0
 800ad0a:	bf08      	it	eq
 800ad0c:	2322      	moveq	r3, #34	; 0x22
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4689      	mov	r9, r1
 800ad12:	bf08      	it	eq
 800ad14:	f8ca 3000 	streq.w	r3, [sl]
 800ad18:	e630      	b.n	800a97c <_strtod_l+0x49c>
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad22:	ea03 0808 	and.w	r8, r3, r8
 800ad26:	e6de      	b.n	800aae6 <_strtod_l+0x606>
 800ad28:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ad2c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ad30:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ad34:	35e2      	adds	r5, #226	; 0xe2
 800ad36:	fa07 f505 	lsl.w	r5, r7, r5
 800ad3a:	970f      	str	r7, [sp, #60]	; 0x3c
 800ad3c:	e742      	b.n	800abc4 <_strtod_l+0x6e4>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	2500      	movs	r5, #0
 800ad42:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad44:	e73e      	b.n	800abc4 <_strtod_l+0x6e4>
 800ad46:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad48:	463a      	mov	r2, r7
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	f002 f9e2 	bl	800d114 <__lshift>
 800ad50:	901c      	str	r0, [sp, #112]	; 0x70
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f47f af64 	bne.w	800ac20 <_strtod_l+0x740>
 800ad58:	e605      	b.n	800a966 <_strtod_l+0x486>
 800ad5a:	bf00      	nop
 800ad5c:	0800ecb8 	.word	0x0800ecb8
 800ad60:	fffffc02 	.word	0xfffffc02
 800ad64:	7ff00000 	.word	0x7ff00000
 800ad68:	39500000 	.word	0x39500000
 800ad6c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ad70:	d166      	bne.n	800ae40 <_strtod_l+0x960>
 800ad72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad78:	b35a      	cbz	r2, 800add2 <_strtod_l+0x8f2>
 800ad7a:	4a9d      	ldr	r2, [pc, #628]	; (800aff0 <_strtod_l+0xb10>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d12c      	bne.n	800adda <_strtod_l+0x8fa>
 800ad80:	9b05      	ldr	r3, [sp, #20]
 800ad82:	4640      	mov	r0, r8
 800ad84:	b303      	cbz	r3, 800adc8 <_strtod_l+0x8e8>
 800ad86:	4a9b      	ldr	r2, [pc, #620]	; (800aff4 <_strtod_l+0xb14>)
 800ad88:	464b      	mov	r3, r9
 800ad8a:	401a      	ands	r2, r3
 800ad8c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ad90:	f04f 31ff 	mov.w	r1, #4294967295
 800ad94:	d81b      	bhi.n	800adce <_strtod_l+0x8ee>
 800ad96:	0d12      	lsrs	r2, r2, #20
 800ad98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad9c:	fa01 f303 	lsl.w	r3, r1, r3
 800ada0:	4298      	cmp	r0, r3
 800ada2:	d11a      	bne.n	800adda <_strtod_l+0x8fa>
 800ada4:	4b94      	ldr	r3, [pc, #592]	; (800aff8 <_strtod_l+0xb18>)
 800ada6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d102      	bne.n	800adb2 <_strtod_l+0x8d2>
 800adac:	3001      	adds	r0, #1
 800adae:	f43f adda 	beq.w	800a966 <_strtod_l+0x486>
 800adb2:	4b90      	ldr	r3, [pc, #576]	; (800aff4 <_strtod_l+0xb14>)
 800adb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb6:	401a      	ands	r2, r3
 800adb8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800adbc:	f04f 0800 	mov.w	r8, #0
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d195      	bne.n	800acf2 <_strtod_l+0x812>
 800adc6:	e5d9      	b.n	800a97c <_strtod_l+0x49c>
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	e7e8      	b.n	800ada0 <_strtod_l+0x8c0>
 800adce:	460b      	mov	r3, r1
 800add0:	e7e6      	b.n	800ada0 <_strtod_l+0x8c0>
 800add2:	ea53 0308 	orrs.w	r3, r3, r8
 800add6:	f43f af7c 	beq.w	800acd2 <_strtod_l+0x7f2>
 800adda:	b1e5      	cbz	r5, 800ae16 <_strtod_l+0x936>
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	421d      	tst	r5, r3
 800ade0:	d0ee      	beq.n	800adc0 <_strtod_l+0x8e0>
 800ade2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade4:	9a05      	ldr	r2, [sp, #20]
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	b1c3      	cbz	r3, 800ae1e <_strtod_l+0x93e>
 800adec:	f7ff fb57 	bl	800a49e <sulp>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adf8:	f7f5 fa30 	bl	800025c <__adddf3>
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	e7de      	b.n	800adc0 <_strtod_l+0x8e0>
 800ae02:	4013      	ands	r3, r2
 800ae04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae10:	f04f 38ff 	mov.w	r8, #4294967295
 800ae14:	e7d4      	b.n	800adc0 <_strtod_l+0x8e0>
 800ae16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae18:	ea13 0f08 	tst.w	r3, r8
 800ae1c:	e7e0      	b.n	800ade0 <_strtod_l+0x900>
 800ae1e:	f7ff fb3e 	bl	800a49e <sulp>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae2a:	f7f5 fa15 	bl	8000258 <__aeabi_dsub>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	f7f5 fe2f 	bl	8000a98 <__aeabi_dcmpeq>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0c0      	beq.n	800adc0 <_strtod_l+0x8e0>
 800ae3e:	e604      	b.n	800aa4a <_strtod_l+0x56a>
 800ae40:	9904      	ldr	r1, [sp, #16]
 800ae42:	4658      	mov	r0, fp
 800ae44:	f002 fb4e 	bl	800d4e4 <__ratio>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae4e:	4606      	mov	r6, r0
 800ae50:	460f      	mov	r7, r1
 800ae52:	f7f5 fe35 	bl	8000ac0 <__aeabi_dcmple>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d075      	beq.n	800af46 <_strtod_l+0xa66>
 800ae5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d047      	beq.n	800aef0 <_strtod_l+0xa10>
 800ae60:	4f66      	ldr	r7, [pc, #408]	; (800affc <_strtod_l+0xb1c>)
 800ae62:	2600      	movs	r6, #0
 800ae64:	4d65      	ldr	r5, [pc, #404]	; (800affc <_strtod_l+0xb1c>)
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae6c:	0d1b      	lsrs	r3, r3, #20
 800ae6e:	051b      	lsls	r3, r3, #20
 800ae70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae74:	4b62      	ldr	r3, [pc, #392]	; (800b000 <_strtod_l+0xb20>)
 800ae76:	429a      	cmp	r2, r3
 800ae78:	f040 80ca 	bne.w	800b010 <_strtod_l+0xb30>
 800ae7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae86:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	f002 fa53 	bl	800d338 <__ulp>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4630      	mov	r0, r6
 800ae98:	4639      	mov	r1, r7
 800ae9a:	f7f5 fb95 	bl	80005c8 <__aeabi_dmul>
 800ae9e:	4642      	mov	r2, r8
 800aea0:	464b      	mov	r3, r9
 800aea2:	f7f5 f9db 	bl	800025c <__adddf3>
 800aea6:	460b      	mov	r3, r1
 800aea8:	4952      	ldr	r1, [pc, #328]	; (800aff4 <_strtod_l+0xb14>)
 800aeaa:	4a56      	ldr	r2, [pc, #344]	; (800b004 <_strtod_l+0xb24>)
 800aeac:	4019      	ands	r1, r3
 800aeae:	4291      	cmp	r1, r2
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	d95e      	bls.n	800af72 <_strtod_l+0xa92>
 800aeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d103      	bne.n	800aec6 <_strtod_l+0x9e6>
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	3301      	adds	r3, #1
 800aec2:	f43f ad50 	beq.w	800a966 <_strtod_l+0x486>
 800aec6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800aff8 <_strtod_l+0xb18>
 800aeca:	f04f 38ff 	mov.w	r8, #4294967295
 800aece:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aed0:	4650      	mov	r0, sl
 800aed2:	f001 ff05 	bl	800cce0 <_Bfree>
 800aed6:	9906      	ldr	r1, [sp, #24]
 800aed8:	4650      	mov	r0, sl
 800aeda:	f001 ff01 	bl	800cce0 <_Bfree>
 800aede:	9904      	ldr	r1, [sp, #16]
 800aee0:	4650      	mov	r0, sl
 800aee2:	f001 fefd 	bl	800cce0 <_Bfree>
 800aee6:	4659      	mov	r1, fp
 800aee8:	4650      	mov	r0, sl
 800aeea:	f001 fef9 	bl	800cce0 <_Bfree>
 800aeee:	e61e      	b.n	800ab2e <_strtod_l+0x64e>
 800aef0:	f1b8 0f00 	cmp.w	r8, #0
 800aef4:	d119      	bne.n	800af2a <_strtod_l+0xa4a>
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aefc:	b9e3      	cbnz	r3, 800af38 <_strtod_l+0xa58>
 800aefe:	4b3f      	ldr	r3, [pc, #252]	; (800affc <_strtod_l+0xb1c>)
 800af00:	2200      	movs	r2, #0
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 fdd1 	bl	8000aac <__aeabi_dcmplt>
 800af0a:	b9c8      	cbnz	r0, 800af40 <_strtod_l+0xa60>
 800af0c:	4b3e      	ldr	r3, [pc, #248]	; (800b008 <_strtod_l+0xb28>)
 800af0e:	2200      	movs	r2, #0
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 fb58 	bl	80005c8 <__aeabi_dmul>
 800af18:	4604      	mov	r4, r0
 800af1a:	460d      	mov	r5, r1
 800af1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af20:	9418      	str	r4, [sp, #96]	; 0x60
 800af22:	9319      	str	r3, [sp, #100]	; 0x64
 800af24:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800af28:	e79d      	b.n	800ae66 <_strtod_l+0x986>
 800af2a:	f1b8 0f01 	cmp.w	r8, #1
 800af2e:	d103      	bne.n	800af38 <_strtod_l+0xa58>
 800af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af32:	2b00      	cmp	r3, #0
 800af34:	f43f ad89 	beq.w	800aa4a <_strtod_l+0x56a>
 800af38:	4f34      	ldr	r7, [pc, #208]	; (800b00c <_strtod_l+0xb2c>)
 800af3a:	2600      	movs	r6, #0
 800af3c:	2400      	movs	r4, #0
 800af3e:	e791      	b.n	800ae64 <_strtod_l+0x984>
 800af40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800af42:	4d31      	ldr	r5, [pc, #196]	; (800b008 <_strtod_l+0xb28>)
 800af44:	e7ea      	b.n	800af1c <_strtod_l+0xa3c>
 800af46:	4b30      	ldr	r3, [pc, #192]	; (800b008 <_strtod_l+0xb28>)
 800af48:	2200      	movs	r2, #0
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 fb3b 	bl	80005c8 <__aeabi_dmul>
 800af52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	b933      	cbnz	r3, 800af68 <_strtod_l+0xa88>
 800af5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af5e:	9010      	str	r0, [sp, #64]	; 0x40
 800af60:	9311      	str	r3, [sp, #68]	; 0x44
 800af62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800af66:	e77e      	b.n	800ae66 <_strtod_l+0x986>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800af70:	e7f7      	b.n	800af62 <_strtod_l+0xa82>
 800af72:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1a8      	bne.n	800aece <_strtod_l+0x9ee>
 800af7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af82:	0d1b      	lsrs	r3, r3, #20
 800af84:	051b      	lsls	r3, r3, #20
 800af86:	429a      	cmp	r2, r3
 800af88:	d1a1      	bne.n	800aece <_strtod_l+0x9ee>
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 ff89 	bl	8000ea4 <__aeabi_d2lz>
 800af92:	f7f5 faeb 	bl	800056c <__aeabi_l2d>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4620      	mov	r0, r4
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7f5 f95b 	bl	8000258 <__aeabi_dsub>
 800afa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afa8:	ea43 0308 	orr.w	r3, r3, r8
 800afac:	4313      	orrs	r3, r2
 800afae:	4604      	mov	r4, r0
 800afb0:	460d      	mov	r5, r1
 800afb2:	d068      	beq.n	800b086 <_strtod_l+0xba6>
 800afb4:	a30a      	add	r3, pc, #40	; (adr r3, 800afe0 <_strtod_l+0xb00>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 fd77 	bl	8000aac <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f47f acdc 	bne.w	800a97c <_strtod_l+0x49c>
 800afc4:	a308      	add	r3, pc, #32	; (adr r3, 800afe8 <_strtod_l+0xb08>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	f7f5 fd8b 	bl	8000ae8 <__aeabi_dcmpgt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f af7b 	beq.w	800aece <_strtod_l+0x9ee>
 800afd8:	e4d0      	b.n	800a97c <_strtod_l+0x49c>
 800afda:	bf00      	nop
 800afdc:	f3af 8000 	nop.w
 800afe0:	94a03595 	.word	0x94a03595
 800afe4:	3fdfffff 	.word	0x3fdfffff
 800afe8:	35afe535 	.word	0x35afe535
 800afec:	3fe00000 	.word	0x3fe00000
 800aff0:	000fffff 	.word	0x000fffff
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	7fefffff 	.word	0x7fefffff
 800affc:	3ff00000 	.word	0x3ff00000
 800b000:	7fe00000 	.word	0x7fe00000
 800b004:	7c9fffff 	.word	0x7c9fffff
 800b008:	3fe00000 	.word	0x3fe00000
 800b00c:	bff00000 	.word	0xbff00000
 800b010:	9b05      	ldr	r3, [sp, #20]
 800b012:	b313      	cbz	r3, 800b05a <_strtod_l+0xb7a>
 800b014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b016:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b01a:	d81e      	bhi.n	800b05a <_strtod_l+0xb7a>
 800b01c:	a326      	add	r3, pc, #152	; (adr r3, 800b0b8 <_strtod_l+0xbd8>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	4620      	mov	r0, r4
 800b024:	4629      	mov	r1, r5
 800b026:	f7f5 fd4b 	bl	8000ac0 <__aeabi_dcmple>
 800b02a:	b190      	cbz	r0, 800b052 <_strtod_l+0xb72>
 800b02c:	4629      	mov	r1, r5
 800b02e:	4620      	mov	r0, r4
 800b030:	f7f5 fda2 	bl	8000b78 <__aeabi_d2uiz>
 800b034:	2801      	cmp	r0, #1
 800b036:	bf38      	it	cc
 800b038:	2001      	movcc	r0, #1
 800b03a:	f7f5 fa4b 	bl	80004d4 <__aeabi_ui2d>
 800b03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	b9d3      	cbnz	r3, 800b07c <_strtod_l+0xb9c>
 800b046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b04a:	9012      	str	r0, [sp, #72]	; 0x48
 800b04c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b04e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b054:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b058:	1a9f      	subs	r7, r3, r2
 800b05a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b05e:	f002 f96b 	bl	800d338 <__ulp>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 faad 	bl	80005c8 <__aeabi_dmul>
 800b06e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b072:	f7f5 f8f3 	bl	800025c <__adddf3>
 800b076:	4680      	mov	r8, r0
 800b078:	4689      	mov	r9, r1
 800b07a:	e77c      	b.n	800af76 <_strtod_l+0xa96>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b084:	e7e3      	b.n	800b04e <_strtod_l+0xb6e>
 800b086:	a30e      	add	r3, pc, #56	; (adr r3, 800b0c0 <_strtod_l+0xbe0>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 fd0e 	bl	8000aac <__aeabi_dcmplt>
 800b090:	e79f      	b.n	800afd2 <_strtod_l+0xaf2>
 800b092:	2300      	movs	r3, #0
 800b094:	930c      	str	r3, [sp, #48]	; 0x30
 800b096:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b098:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	f7ff ba65 	b.w	800a56a <_strtod_l+0x8a>
 800b0a0:	2b65      	cmp	r3, #101	; 0x65
 800b0a2:	f43f ab5c 	beq.w	800a75e <_strtod_l+0x27e>
 800b0a6:	2b45      	cmp	r3, #69	; 0x45
 800b0a8:	f43f ab59 	beq.w	800a75e <_strtod_l+0x27e>
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f7ff bb8d 	b.w	800a7cc <_strtod_l+0x2ec>
 800b0b2:	bf00      	nop
 800b0b4:	f3af 8000 	nop.w
 800b0b8:	ffc00000 	.word	0xffc00000
 800b0bc:	41dfffff 	.word	0x41dfffff
 800b0c0:	94a03595 	.word	0x94a03595
 800b0c4:	3fcfffff 	.word	0x3fcfffff

0800b0c8 <strtod>:
 800b0c8:	460a      	mov	r2, r1
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	4802      	ldr	r0, [pc, #8]	; (800b0d8 <strtod+0x10>)
 800b0ce:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <strtod+0x14>)
 800b0d0:	6800      	ldr	r0, [r0, #0]
 800b0d2:	f7ff ba05 	b.w	800a4e0 <_strtod_l>
 800b0d6:	bf00      	nop
 800b0d8:	20000010 	.word	0x20000010
 800b0dc:	20000078 	.word	0x20000078

0800b0e0 <_strtol_l.isra.0>:
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e6:	4686      	mov	lr, r0
 800b0e8:	d001      	beq.n	800b0ee <_strtol_l.isra.0+0xe>
 800b0ea:	2b24      	cmp	r3, #36	; 0x24
 800b0ec:	d906      	bls.n	800b0fc <_strtol_l.isra.0+0x1c>
 800b0ee:	f7fe f911 	bl	8009314 <__errno>
 800b0f2:	2316      	movs	r3, #22
 800b0f4:	6003      	str	r3, [r0, #0]
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fc:	4e3a      	ldr	r6, [pc, #232]	; (800b1e8 <_strtol_l.isra.0+0x108>)
 800b0fe:	468c      	mov	ip, r1
 800b100:	4660      	mov	r0, ip
 800b102:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b106:	5da5      	ldrb	r5, [r4, r6]
 800b108:	f015 0508 	ands.w	r5, r5, #8
 800b10c:	d1f8      	bne.n	800b100 <_strtol_l.isra.0+0x20>
 800b10e:	2c2d      	cmp	r4, #45	; 0x2d
 800b110:	d133      	bne.n	800b17a <_strtol_l.isra.0+0x9a>
 800b112:	f89c 4000 	ldrb.w	r4, [ip]
 800b116:	f04f 0801 	mov.w	r8, #1
 800b11a:	f100 0c02 	add.w	ip, r0, #2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d05d      	beq.n	800b1de <_strtol_l.isra.0+0xfe>
 800b122:	2b10      	cmp	r3, #16
 800b124:	d10c      	bne.n	800b140 <_strtol_l.isra.0+0x60>
 800b126:	2c30      	cmp	r4, #48	; 0x30
 800b128:	d10a      	bne.n	800b140 <_strtol_l.isra.0+0x60>
 800b12a:	f89c 0000 	ldrb.w	r0, [ip]
 800b12e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b132:	2858      	cmp	r0, #88	; 0x58
 800b134:	d14e      	bne.n	800b1d4 <_strtol_l.isra.0+0xf4>
 800b136:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b13a:	2310      	movs	r3, #16
 800b13c:	f10c 0c02 	add.w	ip, ip, #2
 800b140:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b144:	3f01      	subs	r7, #1
 800b146:	2500      	movs	r5, #0
 800b148:	fbb7 f9f3 	udiv	r9, r7, r3
 800b14c:	4628      	mov	r0, r5
 800b14e:	fb03 7a19 	mls	sl, r3, r9, r7
 800b152:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b156:	2e09      	cmp	r6, #9
 800b158:	d818      	bhi.n	800b18c <_strtol_l.isra.0+0xac>
 800b15a:	4634      	mov	r4, r6
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	dd24      	ble.n	800b1aa <_strtol_l.isra.0+0xca>
 800b160:	2d00      	cmp	r5, #0
 800b162:	db1f      	blt.n	800b1a4 <_strtol_l.isra.0+0xc4>
 800b164:	4581      	cmp	r9, r0
 800b166:	d31d      	bcc.n	800b1a4 <_strtol_l.isra.0+0xc4>
 800b168:	d101      	bne.n	800b16e <_strtol_l.isra.0+0x8e>
 800b16a:	45a2      	cmp	sl, r4
 800b16c:	db1a      	blt.n	800b1a4 <_strtol_l.isra.0+0xc4>
 800b16e:	fb00 4003 	mla	r0, r0, r3, r4
 800b172:	2501      	movs	r5, #1
 800b174:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b178:	e7eb      	b.n	800b152 <_strtol_l.isra.0+0x72>
 800b17a:	2c2b      	cmp	r4, #43	; 0x2b
 800b17c:	bf08      	it	eq
 800b17e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b182:	46a8      	mov	r8, r5
 800b184:	bf08      	it	eq
 800b186:	f100 0c02 	addeq.w	ip, r0, #2
 800b18a:	e7c8      	b.n	800b11e <_strtol_l.isra.0+0x3e>
 800b18c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b190:	2e19      	cmp	r6, #25
 800b192:	d801      	bhi.n	800b198 <_strtol_l.isra.0+0xb8>
 800b194:	3c37      	subs	r4, #55	; 0x37
 800b196:	e7e1      	b.n	800b15c <_strtol_l.isra.0+0x7c>
 800b198:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b19c:	2e19      	cmp	r6, #25
 800b19e:	d804      	bhi.n	800b1aa <_strtol_l.isra.0+0xca>
 800b1a0:	3c57      	subs	r4, #87	; 0x57
 800b1a2:	e7db      	b.n	800b15c <_strtol_l.isra.0+0x7c>
 800b1a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b1a8:	e7e4      	b.n	800b174 <_strtol_l.isra.0+0x94>
 800b1aa:	2d00      	cmp	r5, #0
 800b1ac:	da08      	bge.n	800b1c0 <_strtol_l.isra.0+0xe0>
 800b1ae:	2322      	movs	r3, #34	; 0x22
 800b1b0:	f8ce 3000 	str.w	r3, [lr]
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d09e      	beq.n	800b0f8 <_strtol_l.isra.0+0x18>
 800b1ba:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b1be:	e007      	b.n	800b1d0 <_strtol_l.isra.0+0xf0>
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	d000      	beq.n	800b1c8 <_strtol_l.isra.0+0xe8>
 800b1c6:	4240      	negs	r0, r0
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	d095      	beq.n	800b0f8 <_strtol_l.isra.0+0x18>
 800b1cc:	2d00      	cmp	r5, #0
 800b1ce:	d1f4      	bne.n	800b1ba <_strtol_l.isra.0+0xda>
 800b1d0:	6011      	str	r1, [r2, #0]
 800b1d2:	e791      	b.n	800b0f8 <_strtol_l.isra.0+0x18>
 800b1d4:	2430      	movs	r4, #48	; 0x30
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1b2      	bne.n	800b140 <_strtol_l.isra.0+0x60>
 800b1da:	2308      	movs	r3, #8
 800b1dc:	e7b0      	b.n	800b140 <_strtol_l.isra.0+0x60>
 800b1de:	2c30      	cmp	r4, #48	; 0x30
 800b1e0:	d0a3      	beq.n	800b12a <_strtol_l.isra.0+0x4a>
 800b1e2:	230a      	movs	r3, #10
 800b1e4:	e7ac      	b.n	800b140 <_strtol_l.isra.0+0x60>
 800b1e6:	bf00      	nop
 800b1e8:	0800ece1 	.word	0x0800ece1

0800b1ec <strtol>:
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	460a      	mov	r2, r1
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	4802      	ldr	r0, [pc, #8]	; (800b1fc <strtol+0x10>)
 800b1f4:	6800      	ldr	r0, [r0, #0]
 800b1f6:	f7ff bf73 	b.w	800b0e0 <_strtol_l.isra.0>
 800b1fa:	bf00      	nop
 800b1fc:	20000010 	.word	0x20000010

0800b200 <_user_strerror>:
 800b200:	2000      	movs	r0, #0
 800b202:	4770      	bx	lr

0800b204 <__swbuf_r>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	460e      	mov	r6, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	4605      	mov	r5, r0
 800b20c:	b118      	cbz	r0, 800b216 <__swbuf_r+0x12>
 800b20e:	6983      	ldr	r3, [r0, #24]
 800b210:	b90b      	cbnz	r3, 800b216 <__swbuf_r+0x12>
 800b212:	f001 f89b 	bl	800c34c <__sinit>
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <__swbuf_r+0x98>)
 800b218:	429c      	cmp	r4, r3
 800b21a:	d12b      	bne.n	800b274 <__swbuf_r+0x70>
 800b21c:	686c      	ldr	r4, [r5, #4]
 800b21e:	69a3      	ldr	r3, [r4, #24]
 800b220:	60a3      	str	r3, [r4, #8]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	071a      	lsls	r2, r3, #28
 800b226:	d52f      	bpl.n	800b288 <__swbuf_r+0x84>
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	b36b      	cbz	r3, 800b288 <__swbuf_r+0x84>
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	1ac0      	subs	r0, r0, r3
 800b232:	6963      	ldr	r3, [r4, #20]
 800b234:	b2f6      	uxtb	r6, r6
 800b236:	4283      	cmp	r3, r0
 800b238:	4637      	mov	r7, r6
 800b23a:	dc04      	bgt.n	800b246 <__swbuf_r+0x42>
 800b23c:	4621      	mov	r1, r4
 800b23e:	4628      	mov	r0, r5
 800b240:	f000 ffb2 	bl	800c1a8 <_fflush_r>
 800b244:	bb30      	cbnz	r0, 800b294 <__swbuf_r+0x90>
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	3b01      	subs	r3, #1
 800b24a:	60a3      	str	r3, [r4, #8]
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	6022      	str	r2, [r4, #0]
 800b252:	701e      	strb	r6, [r3, #0]
 800b254:	6963      	ldr	r3, [r4, #20]
 800b256:	3001      	adds	r0, #1
 800b258:	4283      	cmp	r3, r0
 800b25a:	d004      	beq.n	800b266 <__swbuf_r+0x62>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	07db      	lsls	r3, r3, #31
 800b260:	d506      	bpl.n	800b270 <__swbuf_r+0x6c>
 800b262:	2e0a      	cmp	r6, #10
 800b264:	d104      	bne.n	800b270 <__swbuf_r+0x6c>
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f000 ff9d 	bl	800c1a8 <_fflush_r>
 800b26e:	b988      	cbnz	r0, 800b294 <__swbuf_r+0x90>
 800b270:	4638      	mov	r0, r7
 800b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b274:	4b0a      	ldr	r3, [pc, #40]	; (800b2a0 <__swbuf_r+0x9c>)
 800b276:	429c      	cmp	r4, r3
 800b278:	d101      	bne.n	800b27e <__swbuf_r+0x7a>
 800b27a:	68ac      	ldr	r4, [r5, #8]
 800b27c:	e7cf      	b.n	800b21e <__swbuf_r+0x1a>
 800b27e:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <__swbuf_r+0xa0>)
 800b280:	429c      	cmp	r4, r3
 800b282:	bf08      	it	eq
 800b284:	68ec      	ldreq	r4, [r5, #12]
 800b286:	e7ca      	b.n	800b21e <__swbuf_r+0x1a>
 800b288:	4621      	mov	r1, r4
 800b28a:	4628      	mov	r0, r5
 800b28c:	f000 f81e 	bl	800b2cc <__swsetup_r>
 800b290:	2800      	cmp	r0, #0
 800b292:	d0cb      	beq.n	800b22c <__swbuf_r+0x28>
 800b294:	f04f 37ff 	mov.w	r7, #4294967295
 800b298:	e7ea      	b.n	800b270 <__swbuf_r+0x6c>
 800b29a:	bf00      	nop
 800b29c:	0800ee98 	.word	0x0800ee98
 800b2a0:	0800eeb8 	.word	0x0800eeb8
 800b2a4:	0800ee78 	.word	0x0800ee78

0800b2a8 <_write_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d07      	ldr	r5, [pc, #28]	; (800b2c8 <_write_r+0x20>)
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	4608      	mov	r0, r1
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	602a      	str	r2, [r5, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	f7f6 fd3e 	bl	8001d38 <_write>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_write_r+0x1e>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_write_r+0x1e>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	200005fc 	.word	0x200005fc

0800b2cc <__swsetup_r>:
 800b2cc:	4b32      	ldr	r3, [pc, #200]	; (800b398 <__swsetup_r+0xcc>)
 800b2ce:	b570      	push	{r4, r5, r6, lr}
 800b2d0:	681d      	ldr	r5, [r3, #0]
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	b125      	cbz	r5, 800b2e2 <__swsetup_r+0x16>
 800b2d8:	69ab      	ldr	r3, [r5, #24]
 800b2da:	b913      	cbnz	r3, 800b2e2 <__swsetup_r+0x16>
 800b2dc:	4628      	mov	r0, r5
 800b2de:	f001 f835 	bl	800c34c <__sinit>
 800b2e2:	4b2e      	ldr	r3, [pc, #184]	; (800b39c <__swsetup_r+0xd0>)
 800b2e4:	429c      	cmp	r4, r3
 800b2e6:	d10f      	bne.n	800b308 <__swsetup_r+0x3c>
 800b2e8:	686c      	ldr	r4, [r5, #4]
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2f0:	0719      	lsls	r1, r3, #28
 800b2f2:	d42c      	bmi.n	800b34e <__swsetup_r+0x82>
 800b2f4:	06dd      	lsls	r5, r3, #27
 800b2f6:	d411      	bmi.n	800b31c <__swsetup_r+0x50>
 800b2f8:	2309      	movs	r3, #9
 800b2fa:	6033      	str	r3, [r6, #0]
 800b2fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
 800b306:	e03e      	b.n	800b386 <__swsetup_r+0xba>
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <__swsetup_r+0xd4>)
 800b30a:	429c      	cmp	r4, r3
 800b30c:	d101      	bne.n	800b312 <__swsetup_r+0x46>
 800b30e:	68ac      	ldr	r4, [r5, #8]
 800b310:	e7eb      	b.n	800b2ea <__swsetup_r+0x1e>
 800b312:	4b24      	ldr	r3, [pc, #144]	; (800b3a4 <__swsetup_r+0xd8>)
 800b314:	429c      	cmp	r4, r3
 800b316:	bf08      	it	eq
 800b318:	68ec      	ldreq	r4, [r5, #12]
 800b31a:	e7e6      	b.n	800b2ea <__swsetup_r+0x1e>
 800b31c:	0758      	lsls	r0, r3, #29
 800b31e:	d512      	bpl.n	800b346 <__swsetup_r+0x7a>
 800b320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b322:	b141      	cbz	r1, 800b336 <__swsetup_r+0x6a>
 800b324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b328:	4299      	cmp	r1, r3
 800b32a:	d002      	beq.n	800b332 <__swsetup_r+0x66>
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7fe f841 	bl	80093b4 <_free_r>
 800b332:	2300      	movs	r3, #0
 800b334:	6363      	str	r3, [r4, #52]	; 0x34
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b33c:	81a3      	strh	r3, [r4, #12]
 800b33e:	2300      	movs	r3, #0
 800b340:	6063      	str	r3, [r4, #4]
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	f043 0308 	orr.w	r3, r3, #8
 800b34c:	81a3      	strh	r3, [r4, #12]
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	b94b      	cbnz	r3, 800b366 <__swsetup_r+0x9a>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b35c:	d003      	beq.n	800b366 <__swsetup_r+0x9a>
 800b35e:	4621      	mov	r1, r4
 800b360:	4630      	mov	r0, r6
 800b362:	f001 fc1f 	bl	800cba4 <__smakebuf_r>
 800b366:	89a0      	ldrh	r0, [r4, #12]
 800b368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b36c:	f010 0301 	ands.w	r3, r0, #1
 800b370:	d00a      	beq.n	800b388 <__swsetup_r+0xbc>
 800b372:	2300      	movs	r3, #0
 800b374:	60a3      	str	r3, [r4, #8]
 800b376:	6963      	ldr	r3, [r4, #20]
 800b378:	425b      	negs	r3, r3
 800b37a:	61a3      	str	r3, [r4, #24]
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	b943      	cbnz	r3, 800b392 <__swsetup_r+0xc6>
 800b380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b384:	d1ba      	bne.n	800b2fc <__swsetup_r+0x30>
 800b386:	bd70      	pop	{r4, r5, r6, pc}
 800b388:	0781      	lsls	r1, r0, #30
 800b38a:	bf58      	it	pl
 800b38c:	6963      	ldrpl	r3, [r4, #20]
 800b38e:	60a3      	str	r3, [r4, #8]
 800b390:	e7f4      	b.n	800b37c <__swsetup_r+0xb0>
 800b392:	2000      	movs	r0, #0
 800b394:	e7f7      	b.n	800b386 <__swsetup_r+0xba>
 800b396:	bf00      	nop
 800b398:	20000010 	.word	0x20000010
 800b39c:	0800ee98 	.word	0x0800ee98
 800b3a0:	0800eeb8 	.word	0x0800eeb8
 800b3a4:	0800ee78 	.word	0x0800ee78

0800b3a8 <quorem>:
 800b3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	6903      	ldr	r3, [r0, #16]
 800b3ae:	690c      	ldr	r4, [r1, #16]
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	f2c0 8081 	blt.w	800b4ba <quorem+0x112>
 800b3b8:	3c01      	subs	r4, #1
 800b3ba:	f101 0814 	add.w	r8, r1, #20
 800b3be:	f100 0514 	add.w	r5, r0, #20
 800b3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3e0:	d331      	bcc.n	800b446 <quorem+0x9e>
 800b3e2:	f04f 0e00 	mov.w	lr, #0
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	46ac      	mov	ip, r5
 800b3ea:	46f2      	mov	sl, lr
 800b3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3f0:	b293      	uxth	r3, r2
 800b3f2:	fb06 e303 	mla	r3, r6, r3, lr
 800b3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800b400:	0c12      	lsrs	r2, r2, #16
 800b402:	f8dc a000 	ldr.w	sl, [ip]
 800b406:	fb06 e202 	mla	r2, r6, r2, lr
 800b40a:	fa13 f38a 	uxtah	r3, r3, sl
 800b40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b412:	fa1f fa82 	uxth.w	sl, r2
 800b416:	f8dc 2000 	ldr.w	r2, [ip]
 800b41a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b41e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b422:	b29b      	uxth	r3, r3
 800b424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b428:	4581      	cmp	r9, r0
 800b42a:	f84c 3b04 	str.w	r3, [ip], #4
 800b42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b432:	d2db      	bcs.n	800b3ec <quorem+0x44>
 800b434:	f855 300b 	ldr.w	r3, [r5, fp]
 800b438:	b92b      	cbnz	r3, 800b446 <quorem+0x9e>
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	429d      	cmp	r5, r3
 800b440:	461a      	mov	r2, r3
 800b442:	d32e      	bcc.n	800b4a2 <quorem+0xfa>
 800b444:	613c      	str	r4, [r7, #16]
 800b446:	4638      	mov	r0, r7
 800b448:	f001 fed0 	bl	800d1ec <__mcmp>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	db24      	blt.n	800b49a <quorem+0xf2>
 800b450:	3601      	adds	r6, #1
 800b452:	4628      	mov	r0, r5
 800b454:	f04f 0c00 	mov.w	ip, #0
 800b458:	f858 2b04 	ldr.w	r2, [r8], #4
 800b45c:	f8d0 e000 	ldr.w	lr, [r0]
 800b460:	b293      	uxth	r3, r2
 800b462:	ebac 0303 	sub.w	r3, ip, r3
 800b466:	0c12      	lsrs	r2, r2, #16
 800b468:	fa13 f38e 	uxtah	r3, r3, lr
 800b46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b474:	b29b      	uxth	r3, r3
 800b476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b47a:	45c1      	cmp	r9, r8
 800b47c:	f840 3b04 	str.w	r3, [r0], #4
 800b480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b484:	d2e8      	bcs.n	800b458 <quorem+0xb0>
 800b486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b48e:	b922      	cbnz	r2, 800b49a <quorem+0xf2>
 800b490:	3b04      	subs	r3, #4
 800b492:	429d      	cmp	r5, r3
 800b494:	461a      	mov	r2, r3
 800b496:	d30a      	bcc.n	800b4ae <quorem+0x106>
 800b498:	613c      	str	r4, [r7, #16]
 800b49a:	4630      	mov	r0, r6
 800b49c:	b003      	add	sp, #12
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	6812      	ldr	r2, [r2, #0]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	d1cc      	bne.n	800b444 <quorem+0x9c>
 800b4aa:	3c01      	subs	r4, #1
 800b4ac:	e7c7      	b.n	800b43e <quorem+0x96>
 800b4ae:	6812      	ldr	r2, [r2, #0]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	2a00      	cmp	r2, #0
 800b4b4:	d1f0      	bne.n	800b498 <quorem+0xf0>
 800b4b6:	3c01      	subs	r4, #1
 800b4b8:	e7eb      	b.n	800b492 <quorem+0xea>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7ee      	b.n	800b49c <quorem+0xf4>
	...

0800b4c0 <_dtoa_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4c6:	b099      	sub	sp, #100	; 0x64
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4d0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b974      	cbnz	r4, 800b4f6 <_dtoa_r+0x36>
 800b4d8:	2010      	movs	r0, #16
 800b4da:	f7fd ff45 	bl	8009368 <malloc>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	6268      	str	r0, [r5, #36]	; 0x24
 800b4e2:	b920      	cbnz	r0, 800b4ee <_dtoa_r+0x2e>
 800b4e4:	4ba8      	ldr	r3, [pc, #672]	; (800b788 <_dtoa_r+0x2c8>)
 800b4e6:	21ea      	movs	r1, #234	; 0xea
 800b4e8:	48a8      	ldr	r0, [pc, #672]	; (800b78c <_dtoa_r+0x2cc>)
 800b4ea:	f002 fbdf 	bl	800dcac <__assert_func>
 800b4ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4f2:	6004      	str	r4, [r0, #0]
 800b4f4:	60c4      	str	r4, [r0, #12]
 800b4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4f8:	6819      	ldr	r1, [r3, #0]
 800b4fa:	b151      	cbz	r1, 800b512 <_dtoa_r+0x52>
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	604a      	str	r2, [r1, #4]
 800b500:	2301      	movs	r3, #1
 800b502:	4093      	lsls	r3, r2
 800b504:	608b      	str	r3, [r1, #8]
 800b506:	4628      	mov	r0, r5
 800b508:	f001 fbea 	bl	800cce0 <_Bfree>
 800b50c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	1e3b      	subs	r3, r7, #0
 800b514:	bfb9      	ittee	lt
 800b516:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b51a:	9305      	strlt	r3, [sp, #20]
 800b51c:	2300      	movge	r3, #0
 800b51e:	f8c8 3000 	strge.w	r3, [r8]
 800b522:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b526:	4b9a      	ldr	r3, [pc, #616]	; (800b790 <_dtoa_r+0x2d0>)
 800b528:	bfbc      	itt	lt
 800b52a:	2201      	movlt	r2, #1
 800b52c:	f8c8 2000 	strlt.w	r2, [r8]
 800b530:	ea33 0309 	bics.w	r3, r3, r9
 800b534:	d119      	bne.n	800b56a <_dtoa_r+0xaa>
 800b536:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b538:	f242 730f 	movw	r3, #9999	; 0x270f
 800b53c:	6013      	str	r3, [r2, #0]
 800b53e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b542:	4333      	orrs	r3, r6
 800b544:	f000 8581 	beq.w	800c04a <_dtoa_r+0xb8a>
 800b548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b54a:	b953      	cbnz	r3, 800b562 <_dtoa_r+0xa2>
 800b54c:	4b91      	ldr	r3, [pc, #580]	; (800b794 <_dtoa_r+0x2d4>)
 800b54e:	e022      	b.n	800b596 <_dtoa_r+0xd6>
 800b550:	4b91      	ldr	r3, [pc, #580]	; (800b798 <_dtoa_r+0x2d8>)
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	3308      	adds	r3, #8
 800b556:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	9808      	ldr	r0, [sp, #32]
 800b55c:	b019      	add	sp, #100	; 0x64
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b562:	4b8c      	ldr	r3, [pc, #560]	; (800b794 <_dtoa_r+0x2d4>)
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	3303      	adds	r3, #3
 800b568:	e7f5      	b.n	800b556 <_dtoa_r+0x96>
 800b56a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b56e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b576:	2200      	movs	r2, #0
 800b578:	2300      	movs	r3, #0
 800b57a:	f7f5 fa8d 	bl	8000a98 <__aeabi_dcmpeq>
 800b57e:	4680      	mov	r8, r0
 800b580:	b158      	cbz	r0, 800b59a <_dtoa_r+0xda>
 800b582:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b584:	2301      	movs	r3, #1
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 855a 	beq.w	800c044 <_dtoa_r+0xb84>
 800b590:	4882      	ldr	r0, [pc, #520]	; (800b79c <_dtoa_r+0x2dc>)
 800b592:	6018      	str	r0, [r3, #0]
 800b594:	1e43      	subs	r3, r0, #1
 800b596:	9308      	str	r3, [sp, #32]
 800b598:	e7df      	b.n	800b55a <_dtoa_r+0x9a>
 800b59a:	ab16      	add	r3, sp, #88	; 0x58
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	ab17      	add	r3, sp, #92	; 0x5c
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5a8:	f001 ff40 	bl	800d42c <__d2b>
 800b5ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b5b0:	4682      	mov	sl, r0
 800b5b2:	2c00      	cmp	r4, #0
 800b5b4:	d07e      	beq.n	800b6b4 <_dtoa_r+0x1f4>
 800b5b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b5bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5c4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b5c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b5cc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b5d0:	4b73      	ldr	r3, [pc, #460]	; (800b7a0 <_dtoa_r+0x2e0>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f7f4 fe40 	bl	8000258 <__aeabi_dsub>
 800b5d8:	a365      	add	r3, pc, #404	; (adr r3, 800b770 <_dtoa_r+0x2b0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f7f4 fff3 	bl	80005c8 <__aeabi_dmul>
 800b5e2:	a365      	add	r3, pc, #404	; (adr r3, 800b778 <_dtoa_r+0x2b8>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f7f4 fe38 	bl	800025c <__adddf3>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	f7f4 ff7f 	bl	80004f4 <__aeabi_i2d>
 800b5f6:	a362      	add	r3, pc, #392	; (adr r3, 800b780 <_dtoa_r+0x2c0>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 ffe4 	bl	80005c8 <__aeabi_dmul>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4630      	mov	r0, r6
 800b606:	4639      	mov	r1, r7
 800b608:	f7f4 fe28 	bl	800025c <__adddf3>
 800b60c:	4606      	mov	r6, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	f7f5 fa8a 	bl	8000b28 <__aeabi_d2iz>
 800b614:	2200      	movs	r2, #0
 800b616:	4681      	mov	r9, r0
 800b618:	2300      	movs	r3, #0
 800b61a:	4630      	mov	r0, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f7f5 fa45 	bl	8000aac <__aeabi_dcmplt>
 800b622:	b148      	cbz	r0, 800b638 <_dtoa_r+0x178>
 800b624:	4648      	mov	r0, r9
 800b626:	f7f4 ff65 	bl	80004f4 <__aeabi_i2d>
 800b62a:	4632      	mov	r2, r6
 800b62c:	463b      	mov	r3, r7
 800b62e:	f7f5 fa33 	bl	8000a98 <__aeabi_dcmpeq>
 800b632:	b908      	cbnz	r0, 800b638 <_dtoa_r+0x178>
 800b634:	f109 39ff 	add.w	r9, r9, #4294967295
 800b638:	f1b9 0f16 	cmp.w	r9, #22
 800b63c:	d857      	bhi.n	800b6ee <_dtoa_r+0x22e>
 800b63e:	4b59      	ldr	r3, [pc, #356]	; (800b7a4 <_dtoa_r+0x2e4>)
 800b640:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b64c:	f7f5 fa2e 	bl	8000aac <__aeabi_dcmplt>
 800b650:	2800      	cmp	r0, #0
 800b652:	d04e      	beq.n	800b6f2 <_dtoa_r+0x232>
 800b654:	f109 39ff 	add.w	r9, r9, #4294967295
 800b658:	2300      	movs	r3, #0
 800b65a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b65c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b65e:	1b1c      	subs	r4, r3, r4
 800b660:	1e63      	subs	r3, r4, #1
 800b662:	9309      	str	r3, [sp, #36]	; 0x24
 800b664:	bf45      	ittet	mi
 800b666:	f1c4 0301 	rsbmi	r3, r4, #1
 800b66a:	9306      	strmi	r3, [sp, #24]
 800b66c:	2300      	movpl	r3, #0
 800b66e:	2300      	movmi	r3, #0
 800b670:	bf4c      	ite	mi
 800b672:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b674:	9306      	strpl	r3, [sp, #24]
 800b676:	f1b9 0f00 	cmp.w	r9, #0
 800b67a:	db3c      	blt.n	800b6f6 <_dtoa_r+0x236>
 800b67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b682:	444b      	add	r3, r9
 800b684:	9309      	str	r3, [sp, #36]	; 0x24
 800b686:	2300      	movs	r3, #0
 800b688:	930a      	str	r3, [sp, #40]	; 0x28
 800b68a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b68c:	2b09      	cmp	r3, #9
 800b68e:	f200 808d 	bhi.w	800b7ac <_dtoa_r+0x2ec>
 800b692:	2b05      	cmp	r3, #5
 800b694:	bfc4      	itt	gt
 800b696:	3b04      	subgt	r3, #4
 800b698:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b69a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b69c:	f1a3 0302 	sub.w	r3, r3, #2
 800b6a0:	bfcc      	ite	gt
 800b6a2:	2400      	movgt	r4, #0
 800b6a4:	2401      	movle	r4, #1
 800b6a6:	2b03      	cmp	r3, #3
 800b6a8:	f200 808c 	bhi.w	800b7c4 <_dtoa_r+0x304>
 800b6ac:	e8df f003 	tbb	[pc, r3]
 800b6b0:	5b4d4f2d 	.word	0x5b4d4f2d
 800b6b4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b6b8:	441c      	add	r4, r3
 800b6ba:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	bfc3      	ittte	gt
 800b6c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6c6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b6ca:	fa09 f303 	lslgt.w	r3, r9, r3
 800b6ce:	f1c3 0320 	rsble	r3, r3, #32
 800b6d2:	bfc6      	itte	gt
 800b6d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6d8:	4318      	orrgt	r0, r3
 800b6da:	fa06 f003 	lslle.w	r0, r6, r3
 800b6de:	f7f4 fef9 	bl	80004d4 <__aeabi_ui2d>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b6e8:	3c01      	subs	r4, #1
 800b6ea:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6ec:	e770      	b.n	800b5d0 <_dtoa_r+0x110>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e7b3      	b.n	800b65a <_dtoa_r+0x19a>
 800b6f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6f4:	e7b2      	b.n	800b65c <_dtoa_r+0x19c>
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	eba3 0309 	sub.w	r3, r3, r9
 800b6fc:	9306      	str	r3, [sp, #24]
 800b6fe:	f1c9 0300 	rsb	r3, r9, #0
 800b702:	930a      	str	r3, [sp, #40]	; 0x28
 800b704:	2300      	movs	r3, #0
 800b706:	930e      	str	r3, [sp, #56]	; 0x38
 800b708:	e7bf      	b.n	800b68a <_dtoa_r+0x1ca>
 800b70a:	2300      	movs	r3, #0
 800b70c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b70e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b710:	2b00      	cmp	r3, #0
 800b712:	dc5a      	bgt.n	800b7ca <_dtoa_r+0x30a>
 800b714:	f04f 0b01 	mov.w	fp, #1
 800b718:	f8cd b008 	str.w	fp, [sp, #8]
 800b71c:	465b      	mov	r3, fp
 800b71e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b722:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b724:	2200      	movs	r2, #0
 800b726:	6042      	str	r2, [r0, #4]
 800b728:	2204      	movs	r2, #4
 800b72a:	f102 0614 	add.w	r6, r2, #20
 800b72e:	429e      	cmp	r6, r3
 800b730:	6841      	ldr	r1, [r0, #4]
 800b732:	d950      	bls.n	800b7d6 <_dtoa_r+0x316>
 800b734:	4628      	mov	r0, r5
 800b736:	f001 fa93 	bl	800cc60 <_Balloc>
 800b73a:	9008      	str	r0, [sp, #32]
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d14e      	bne.n	800b7de <_dtoa_r+0x31e>
 800b740:	4b19      	ldr	r3, [pc, #100]	; (800b7a8 <_dtoa_r+0x2e8>)
 800b742:	4602      	mov	r2, r0
 800b744:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b748:	e6ce      	b.n	800b4e8 <_dtoa_r+0x28>
 800b74a:	2301      	movs	r3, #1
 800b74c:	e7de      	b.n	800b70c <_dtoa_r+0x24c>
 800b74e:	2300      	movs	r3, #0
 800b750:	930b      	str	r3, [sp, #44]	; 0x2c
 800b752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b754:	eb09 0b03 	add.w	fp, r9, r3
 800b758:	f10b 0301 	add.w	r3, fp, #1
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	bfb8      	it	lt
 800b762:	2301      	movlt	r3, #1
 800b764:	e7dd      	b.n	800b722 <_dtoa_r+0x262>
 800b766:	2301      	movs	r3, #1
 800b768:	e7f2      	b.n	800b750 <_dtoa_r+0x290>
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w
 800b770:	636f4361 	.word	0x636f4361
 800b774:	3fd287a7 	.word	0x3fd287a7
 800b778:	8b60c8b3 	.word	0x8b60c8b3
 800b77c:	3fc68a28 	.word	0x3fc68a28
 800b780:	509f79fb 	.word	0x509f79fb
 800b784:	3fd34413 	.word	0x3fd34413
 800b788:	0800edee 	.word	0x0800edee
 800b78c:	0800ee05 	.word	0x0800ee05
 800b790:	7ff00000 	.word	0x7ff00000
 800b794:	0800edea 	.word	0x0800edea
 800b798:	0800ede1 	.word	0x0800ede1
 800b79c:	0800e5d1 	.word	0x0800e5d1
 800b7a0:	3ff80000 	.word	0x3ff80000
 800b7a4:	0800efe0 	.word	0x0800efe0
 800b7a8:	0800ee64 	.word	0x0800ee64
 800b7ac:	2401      	movs	r4, #1
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9322      	str	r3, [sp, #136]	; 0x88
 800b7b2:	940b      	str	r4, [sp, #44]	; 0x2c
 800b7b4:	f04f 3bff 	mov.w	fp, #4294967295
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8cd b008 	str.w	fp, [sp, #8]
 800b7be:	2312      	movs	r3, #18
 800b7c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b7c2:	e7ae      	b.n	800b722 <_dtoa_r+0x262>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7c8:	e7f4      	b.n	800b7b4 <_dtoa_r+0x2f4>
 800b7ca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b7ce:	f8cd b008 	str.w	fp, [sp, #8]
 800b7d2:	465b      	mov	r3, fp
 800b7d4:	e7a5      	b.n	800b722 <_dtoa_r+0x262>
 800b7d6:	3101      	adds	r1, #1
 800b7d8:	6041      	str	r1, [r0, #4]
 800b7da:	0052      	lsls	r2, r2, #1
 800b7dc:	e7a5      	b.n	800b72a <_dtoa_r+0x26a>
 800b7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7e0:	9a08      	ldr	r2, [sp, #32]
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	9b02      	ldr	r3, [sp, #8]
 800b7e6:	2b0e      	cmp	r3, #14
 800b7e8:	f200 80a8 	bhi.w	800b93c <_dtoa_r+0x47c>
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	f000 80a5 	beq.w	800b93c <_dtoa_r+0x47c>
 800b7f2:	f1b9 0f00 	cmp.w	r9, #0
 800b7f6:	dd34      	ble.n	800b862 <_dtoa_r+0x3a2>
 800b7f8:	4a9a      	ldr	r2, [pc, #616]	; (800ba64 <_dtoa_r+0x5a4>)
 800b7fa:	f009 030f 	and.w	r3, r9, #15
 800b7fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b802:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b806:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b80a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b80e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b812:	d016      	beq.n	800b842 <_dtoa_r+0x382>
 800b814:	4b94      	ldr	r3, [pc, #592]	; (800ba68 <_dtoa_r+0x5a8>)
 800b816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b81a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b81e:	f7f4 fffd 	bl	800081c <__aeabi_ddiv>
 800b822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b826:	f004 040f 	and.w	r4, r4, #15
 800b82a:	2703      	movs	r7, #3
 800b82c:	4e8e      	ldr	r6, [pc, #568]	; (800ba68 <_dtoa_r+0x5a8>)
 800b82e:	b954      	cbnz	r4, 800b846 <_dtoa_r+0x386>
 800b830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b838:	f7f4 fff0 	bl	800081c <__aeabi_ddiv>
 800b83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b840:	e029      	b.n	800b896 <_dtoa_r+0x3d6>
 800b842:	2702      	movs	r7, #2
 800b844:	e7f2      	b.n	800b82c <_dtoa_r+0x36c>
 800b846:	07e1      	lsls	r1, r4, #31
 800b848:	d508      	bpl.n	800b85c <_dtoa_r+0x39c>
 800b84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b84e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b852:	f7f4 feb9 	bl	80005c8 <__aeabi_dmul>
 800b856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b85a:	3701      	adds	r7, #1
 800b85c:	1064      	asrs	r4, r4, #1
 800b85e:	3608      	adds	r6, #8
 800b860:	e7e5      	b.n	800b82e <_dtoa_r+0x36e>
 800b862:	f000 80a5 	beq.w	800b9b0 <_dtoa_r+0x4f0>
 800b866:	f1c9 0400 	rsb	r4, r9, #0
 800b86a:	4b7e      	ldr	r3, [pc, #504]	; (800ba64 <_dtoa_r+0x5a4>)
 800b86c:	4e7e      	ldr	r6, [pc, #504]	; (800ba68 <_dtoa_r+0x5a8>)
 800b86e:	f004 020f 	and.w	r2, r4, #15
 800b872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b87e:	f7f4 fea3 	bl	80005c8 <__aeabi_dmul>
 800b882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b886:	1124      	asrs	r4, r4, #4
 800b888:	2300      	movs	r3, #0
 800b88a:	2702      	movs	r7, #2
 800b88c:	2c00      	cmp	r4, #0
 800b88e:	f040 8084 	bne.w	800b99a <_dtoa_r+0x4da>
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1d2      	bne.n	800b83c <_dtoa_r+0x37c>
 800b896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 808b 	beq.w	800b9b4 <_dtoa_r+0x4f4>
 800b89e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b8a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8aa:	4b70      	ldr	r3, [pc, #448]	; (800ba6c <_dtoa_r+0x5ac>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f7f5 f8fd 	bl	8000aac <__aeabi_dcmplt>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d07e      	beq.n	800b9b4 <_dtoa_r+0x4f4>
 800b8b6:	9b02      	ldr	r3, [sp, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d07b      	beq.n	800b9b4 <_dtoa_r+0x4f4>
 800b8bc:	f1bb 0f00 	cmp.w	fp, #0
 800b8c0:	dd38      	ble.n	800b934 <_dtoa_r+0x474>
 800b8c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8c6:	4b6a      	ldr	r3, [pc, #424]	; (800ba70 <_dtoa_r+0x5b0>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f7f4 fe7d 	bl	80005c8 <__aeabi_dmul>
 800b8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8d2:	f109 38ff 	add.w	r8, r9, #4294967295
 800b8d6:	3701      	adds	r7, #1
 800b8d8:	465c      	mov	r4, fp
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f7f4 fe0a 	bl	80004f4 <__aeabi_i2d>
 800b8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8e4:	f7f4 fe70 	bl	80005c8 <__aeabi_dmul>
 800b8e8:	4b62      	ldr	r3, [pc, #392]	; (800ba74 <_dtoa_r+0x5b4>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f7f4 fcb6 	bl	800025c <__adddf3>
 800b8f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b8f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8f8:	9611      	str	r6, [sp, #68]	; 0x44
 800b8fa:	2c00      	cmp	r4, #0
 800b8fc:	d15d      	bne.n	800b9ba <_dtoa_r+0x4fa>
 800b8fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b902:	4b5d      	ldr	r3, [pc, #372]	; (800ba78 <_dtoa_r+0x5b8>)
 800b904:	2200      	movs	r2, #0
 800b906:	f7f4 fca7 	bl	8000258 <__aeabi_dsub>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b912:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b914:	4633      	mov	r3, r6
 800b916:	f7f5 f8e7 	bl	8000ae8 <__aeabi_dcmpgt>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	f040 829e 	bne.w	800be5c <_dtoa_r+0x99c>
 800b920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b926:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b92a:	f7f5 f8bf 	bl	8000aac <__aeabi_dcmplt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	f040 8292 	bne.w	800be58 <_dtoa_r+0x998>
 800b934:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b938:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b93c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f2c0 8153 	blt.w	800bbea <_dtoa_r+0x72a>
 800b944:	f1b9 0f0e 	cmp.w	r9, #14
 800b948:	f300 814f 	bgt.w	800bbea <_dtoa_r+0x72a>
 800b94c:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <_dtoa_r+0x5a4>)
 800b94e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b952:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b956:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b95a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f280 80db 	bge.w	800bb18 <_dtoa_r+0x658>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f300 80d7 	bgt.w	800bb18 <_dtoa_r+0x658>
 800b96a:	f040 8274 	bne.w	800be56 <_dtoa_r+0x996>
 800b96e:	4b42      	ldr	r3, [pc, #264]	; (800ba78 <_dtoa_r+0x5b8>)
 800b970:	2200      	movs	r2, #0
 800b972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b976:	f7f4 fe27 	bl	80005c8 <__aeabi_dmul>
 800b97a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b97e:	f7f5 f8a9 	bl	8000ad4 <__aeabi_dcmpge>
 800b982:	9c02      	ldr	r4, [sp, #8]
 800b984:	4626      	mov	r6, r4
 800b986:	2800      	cmp	r0, #0
 800b988:	f040 824a 	bne.w	800be20 <_dtoa_r+0x960>
 800b98c:	9f08      	ldr	r7, [sp, #32]
 800b98e:	2331      	movs	r3, #49	; 0x31
 800b990:	f807 3b01 	strb.w	r3, [r7], #1
 800b994:	f109 0901 	add.w	r9, r9, #1
 800b998:	e246      	b.n	800be28 <_dtoa_r+0x968>
 800b99a:	07e2      	lsls	r2, r4, #31
 800b99c:	d505      	bpl.n	800b9aa <_dtoa_r+0x4ea>
 800b99e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9a2:	f7f4 fe11 	bl	80005c8 <__aeabi_dmul>
 800b9a6:	3701      	adds	r7, #1
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	1064      	asrs	r4, r4, #1
 800b9ac:	3608      	adds	r6, #8
 800b9ae:	e76d      	b.n	800b88c <_dtoa_r+0x3cc>
 800b9b0:	2702      	movs	r7, #2
 800b9b2:	e770      	b.n	800b896 <_dtoa_r+0x3d6>
 800b9b4:	9c02      	ldr	r4, [sp, #8]
 800b9b6:	46c8      	mov	r8, r9
 800b9b8:	e78f      	b.n	800b8da <_dtoa_r+0x41a>
 800b9ba:	9908      	ldr	r1, [sp, #32]
 800b9bc:	4b29      	ldr	r3, [pc, #164]	; (800ba64 <_dtoa_r+0x5a4>)
 800b9be:	4421      	add	r1, r4
 800b9c0:	9112      	str	r1, [sp, #72]	; 0x48
 800b9c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b9cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d055      	beq.n	800ba80 <_dtoa_r+0x5c0>
 800b9d4:	4929      	ldr	r1, [pc, #164]	; (800ba7c <_dtoa_r+0x5bc>)
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	f7f4 ff20 	bl	800081c <__aeabi_ddiv>
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4632      	mov	r2, r6
 800b9e0:	f7f4 fc3a 	bl	8000258 <__aeabi_dsub>
 800b9e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9e8:	9f08      	ldr	r7, [sp, #32]
 800b9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ee:	f7f5 f89b 	bl	8000b28 <__aeabi_d2iz>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	f7f4 fd7e 	bl	80004f4 <__aeabi_i2d>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba00:	f7f4 fc2a 	bl	8000258 <__aeabi_dsub>
 800ba04:	3430      	adds	r4, #48	; 0x30
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba0e:	f807 4b01 	strb.w	r4, [r7], #1
 800ba12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba16:	f7f5 f849 	bl	8000aac <__aeabi_dcmplt>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d174      	bne.n	800bb08 <_dtoa_r+0x648>
 800ba1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba22:	4912      	ldr	r1, [pc, #72]	; (800ba6c <_dtoa_r+0x5ac>)
 800ba24:	2000      	movs	r0, #0
 800ba26:	f7f4 fc17 	bl	8000258 <__aeabi_dsub>
 800ba2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba2e:	f7f5 f83d 	bl	8000aac <__aeabi_dcmplt>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f040 80b6 	bne.w	800bba4 <_dtoa_r+0x6e4>
 800ba38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba3a:	429f      	cmp	r7, r3
 800ba3c:	f43f af7a 	beq.w	800b934 <_dtoa_r+0x474>
 800ba40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <_dtoa_r+0x5b0>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	f7f4 fdbe 	bl	80005c8 <__aeabi_dmul>
 800ba4c:	4b08      	ldr	r3, [pc, #32]	; (800ba70 <_dtoa_r+0x5b0>)
 800ba4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba52:	2200      	movs	r2, #0
 800ba54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba58:	f7f4 fdb6 	bl	80005c8 <__aeabi_dmul>
 800ba5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba60:	e7c3      	b.n	800b9ea <_dtoa_r+0x52a>
 800ba62:	bf00      	nop
 800ba64:	0800efe0 	.word	0x0800efe0
 800ba68:	0800efb8 	.word	0x0800efb8
 800ba6c:	3ff00000 	.word	0x3ff00000
 800ba70:	40240000 	.word	0x40240000
 800ba74:	401c0000 	.word	0x401c0000
 800ba78:	40140000 	.word	0x40140000
 800ba7c:	3fe00000 	.word	0x3fe00000
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f4 fda0 	bl	80005c8 <__aeabi_dmul>
 800ba88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba8e:	9c08      	ldr	r4, [sp, #32]
 800ba90:	9314      	str	r3, [sp, #80]	; 0x50
 800ba92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba96:	f7f5 f847 	bl	8000b28 <__aeabi_d2iz>
 800ba9a:	9015      	str	r0, [sp, #84]	; 0x54
 800ba9c:	f7f4 fd2a 	bl	80004f4 <__aeabi_i2d>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baa8:	f7f4 fbd6 	bl	8000258 <__aeabi_dsub>
 800baac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baae:	3330      	adds	r3, #48	; 0x30
 800bab0:	f804 3b01 	strb.w	r3, [r4], #1
 800bab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bab6:	429c      	cmp	r4, r3
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
 800babc:	f04f 0200 	mov.w	r2, #0
 800bac0:	d124      	bne.n	800bb0c <_dtoa_r+0x64c>
 800bac2:	4bb2      	ldr	r3, [pc, #712]	; (800bd8c <_dtoa_r+0x8cc>)
 800bac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bac8:	f7f4 fbc8 	bl	800025c <__adddf3>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f5 f808 	bl	8000ae8 <__aeabi_dcmpgt>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d162      	bne.n	800bba2 <_dtoa_r+0x6e2>
 800badc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bae0:	49aa      	ldr	r1, [pc, #680]	; (800bd8c <_dtoa_r+0x8cc>)
 800bae2:	2000      	movs	r0, #0
 800bae4:	f7f4 fbb8 	bl	8000258 <__aeabi_dsub>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 ffdc 	bl	8000aac <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	f43f af1d 	beq.w	800b934 <_dtoa_r+0x474>
 800bafa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bafc:	1e7b      	subs	r3, r7, #1
 800bafe:	9314      	str	r3, [sp, #80]	; 0x50
 800bb00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bb04:	2b30      	cmp	r3, #48	; 0x30
 800bb06:	d0f8      	beq.n	800bafa <_dtoa_r+0x63a>
 800bb08:	46c1      	mov	r9, r8
 800bb0a:	e03a      	b.n	800bb82 <_dtoa_r+0x6c2>
 800bb0c:	4ba0      	ldr	r3, [pc, #640]	; (800bd90 <_dtoa_r+0x8d0>)
 800bb0e:	f7f4 fd5b 	bl	80005c8 <__aeabi_dmul>
 800bb12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb16:	e7bc      	b.n	800ba92 <_dtoa_r+0x5d2>
 800bb18:	9f08      	ldr	r7, [sp, #32]
 800bb1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb22:	f7f4 fe7b 	bl	800081c <__aeabi_ddiv>
 800bb26:	f7f4 ffff 	bl	8000b28 <__aeabi_d2iz>
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	f7f4 fce2 	bl	80004f4 <__aeabi_i2d>
 800bb30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb34:	f7f4 fd48 	bl	80005c8 <__aeabi_dmul>
 800bb38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4602      	mov	r2, r0
 800bb40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb44:	f7f4 fb88 	bl	8000258 <__aeabi_dsub>
 800bb48:	f807 6b01 	strb.w	r6, [r7], #1
 800bb4c:	9e08      	ldr	r6, [sp, #32]
 800bb4e:	9b02      	ldr	r3, [sp, #8]
 800bb50:	1bbe      	subs	r6, r7, r6
 800bb52:	42b3      	cmp	r3, r6
 800bb54:	d13a      	bne.n	800bbcc <_dtoa_r+0x70c>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	f7f4 fb7f 	bl	800025c <__adddf3>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb6a:	f7f4 ffbd 	bl	8000ae8 <__aeabi_dcmpgt>
 800bb6e:	bb58      	cbnz	r0, 800bbc8 <_dtoa_r+0x708>
 800bb70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb78:	f7f4 ff8e 	bl	8000a98 <__aeabi_dcmpeq>
 800bb7c:	b108      	cbz	r0, 800bb82 <_dtoa_r+0x6c2>
 800bb7e:	07e1      	lsls	r1, r4, #31
 800bb80:	d422      	bmi.n	800bbc8 <_dtoa_r+0x708>
 800bb82:	4628      	mov	r0, r5
 800bb84:	4651      	mov	r1, sl
 800bb86:	f001 f8ab 	bl	800cce0 <_Bfree>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	703b      	strb	r3, [r7, #0]
 800bb8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bb90:	f109 0001 	add.w	r0, r9, #1
 800bb94:	6018      	str	r0, [r3, #0]
 800bb96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f43f acde 	beq.w	800b55a <_dtoa_r+0x9a>
 800bb9e:	601f      	str	r7, [r3, #0]
 800bba0:	e4db      	b.n	800b55a <_dtoa_r+0x9a>
 800bba2:	4627      	mov	r7, r4
 800bba4:	463b      	mov	r3, r7
 800bba6:	461f      	mov	r7, r3
 800bba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbac:	2a39      	cmp	r2, #57	; 0x39
 800bbae:	d107      	bne.n	800bbc0 <_dtoa_r+0x700>
 800bbb0:	9a08      	ldr	r2, [sp, #32]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d1f7      	bne.n	800bba6 <_dtoa_r+0x6e6>
 800bbb6:	9908      	ldr	r1, [sp, #32]
 800bbb8:	2230      	movs	r2, #48	; 0x30
 800bbba:	f108 0801 	add.w	r8, r8, #1
 800bbbe:	700a      	strb	r2, [r1, #0]
 800bbc0:	781a      	ldrb	r2, [r3, #0]
 800bbc2:	3201      	adds	r2, #1
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	e79f      	b.n	800bb08 <_dtoa_r+0x648>
 800bbc8:	46c8      	mov	r8, r9
 800bbca:	e7eb      	b.n	800bba4 <_dtoa_r+0x6e4>
 800bbcc:	4b70      	ldr	r3, [pc, #448]	; (800bd90 <_dtoa_r+0x8d0>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f7f4 fcfa 	bl	80005c8 <__aeabi_dmul>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f7f4 ff5a 	bl	8000a98 <__aeabi_dcmpeq>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d098      	beq.n	800bb1a <_dtoa_r+0x65a>
 800bbe8:	e7cb      	b.n	800bb82 <_dtoa_r+0x6c2>
 800bbea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	f000 80d1 	beq.w	800bd94 <_dtoa_r+0x8d4>
 800bbf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bbf4:	2a01      	cmp	r2, #1
 800bbf6:	f300 80af 	bgt.w	800bd58 <_dtoa_r+0x898>
 800bbfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	f000 80a7 	beq.w	800bd50 <_dtoa_r+0x890>
 800bc02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc08:	9f06      	ldr	r7, [sp, #24]
 800bc0a:	9a06      	ldr	r2, [sp, #24]
 800bc0c:	441a      	add	r2, r3
 800bc0e:	9206      	str	r2, [sp, #24]
 800bc10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc12:	2101      	movs	r1, #1
 800bc14:	441a      	add	r2, r3
 800bc16:	4628      	mov	r0, r5
 800bc18:	9209      	str	r2, [sp, #36]	; 0x24
 800bc1a:	f001 f965 	bl	800cee8 <__i2b>
 800bc1e:	4606      	mov	r6, r0
 800bc20:	2f00      	cmp	r7, #0
 800bc22:	dd0c      	ble.n	800bc3e <_dtoa_r+0x77e>
 800bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dd09      	ble.n	800bc3e <_dtoa_r+0x77e>
 800bc2a:	42bb      	cmp	r3, r7
 800bc2c:	9a06      	ldr	r2, [sp, #24]
 800bc2e:	bfa8      	it	ge
 800bc30:	463b      	movge	r3, r7
 800bc32:	1ad2      	subs	r2, r2, r3
 800bc34:	9206      	str	r2, [sp, #24]
 800bc36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc38:	1aff      	subs	r7, r7, r3
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc40:	b1f3      	cbz	r3, 800bc80 <_dtoa_r+0x7c0>
 800bc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 80a9 	beq.w	800bd9c <_dtoa_r+0x8dc>
 800bc4a:	2c00      	cmp	r4, #0
 800bc4c:	dd10      	ble.n	800bc70 <_dtoa_r+0x7b0>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4622      	mov	r2, r4
 800bc52:	4628      	mov	r0, r5
 800bc54:	f001 fa04 	bl	800d060 <__pow5mult>
 800bc58:	4652      	mov	r2, sl
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f001 f958 	bl	800cf14 <__multiply>
 800bc64:	4651      	mov	r1, sl
 800bc66:	4680      	mov	r8, r0
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f001 f839 	bl	800cce0 <_Bfree>
 800bc6e:	46c2      	mov	sl, r8
 800bc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc72:	1b1a      	subs	r2, r3, r4
 800bc74:	d004      	beq.n	800bc80 <_dtoa_r+0x7c0>
 800bc76:	4651      	mov	r1, sl
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f001 f9f1 	bl	800d060 <__pow5mult>
 800bc7e:	4682      	mov	sl, r0
 800bc80:	2101      	movs	r1, #1
 800bc82:	4628      	mov	r0, r5
 800bc84:	f001 f930 	bl	800cee8 <__i2b>
 800bc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	f340 8087 	ble.w	800bda0 <_dtoa_r+0x8e0>
 800bc92:	461a      	mov	r2, r3
 800bc94:	4601      	mov	r1, r0
 800bc96:	4628      	mov	r0, r5
 800bc98:	f001 f9e2 	bl	800d060 <__pow5mult>
 800bc9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	4604      	mov	r4, r0
 800bca2:	f340 8080 	ble.w	800bda6 <_dtoa_r+0x8e6>
 800bca6:	f04f 0800 	mov.w	r8, #0
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcb0:	6918      	ldr	r0, [r3, #16]
 800bcb2:	f001 f8cb 	bl	800ce4c <__hi0bits>
 800bcb6:	f1c0 0020 	rsb	r0, r0, #32
 800bcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcbc:	4418      	add	r0, r3
 800bcbe:	f010 001f 	ands.w	r0, r0, #31
 800bcc2:	f000 8092 	beq.w	800bdea <_dtoa_r+0x92a>
 800bcc6:	f1c0 0320 	rsb	r3, r0, #32
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	f340 808a 	ble.w	800bde4 <_dtoa_r+0x924>
 800bcd0:	f1c0 001c 	rsb	r0, r0, #28
 800bcd4:	9b06      	ldr	r3, [sp, #24]
 800bcd6:	4403      	add	r3, r0
 800bcd8:	9306      	str	r3, [sp, #24]
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	4403      	add	r3, r0
 800bcde:	4407      	add	r7, r0
 800bce0:	9309      	str	r3, [sp, #36]	; 0x24
 800bce2:	9b06      	ldr	r3, [sp, #24]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd05      	ble.n	800bcf4 <_dtoa_r+0x834>
 800bce8:	4651      	mov	r1, sl
 800bcea:	461a      	mov	r2, r3
 800bcec:	4628      	mov	r0, r5
 800bcee:	f001 fa11 	bl	800d114 <__lshift>
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	dd05      	ble.n	800bd06 <_dtoa_r+0x846>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f001 fa08 	bl	800d114 <__lshift>
 800bd04:	4604      	mov	r4, r0
 800bd06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d070      	beq.n	800bdee <_dtoa_r+0x92e>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4650      	mov	r0, sl
 800bd10:	f001 fa6c 	bl	800d1ec <__mcmp>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	da6a      	bge.n	800bdee <_dtoa_r+0x92e>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4651      	mov	r1, sl
 800bd1c:	220a      	movs	r2, #10
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f001 f800 	bl	800cd24 <__multadd>
 800bd24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd26:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd2a:	4682      	mov	sl, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 8193 	beq.w	800c058 <_dtoa_r+0xb98>
 800bd32:	4631      	mov	r1, r6
 800bd34:	2300      	movs	r3, #0
 800bd36:	220a      	movs	r2, #10
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f000 fff3 	bl	800cd24 <__multadd>
 800bd3e:	f1bb 0f00 	cmp.w	fp, #0
 800bd42:	4606      	mov	r6, r0
 800bd44:	f300 8093 	bgt.w	800be6e <_dtoa_r+0x9ae>
 800bd48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	dc57      	bgt.n	800bdfe <_dtoa_r+0x93e>
 800bd4e:	e08e      	b.n	800be6e <_dtoa_r+0x9ae>
 800bd50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd56:	e756      	b.n	800bc06 <_dtoa_r+0x746>
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	1e5c      	subs	r4, r3, #1
 800bd5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	bfbf      	itttt	lt
 800bd62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd64:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bd66:	1ae2      	sublt	r2, r4, r3
 800bd68:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bd6a:	bfb6      	itet	lt
 800bd6c:	189b      	addlt	r3, r3, r2
 800bd6e:	1b1c      	subge	r4, r3, r4
 800bd70:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bd72:	9b02      	ldr	r3, [sp, #8]
 800bd74:	bfb8      	it	lt
 800bd76:	2400      	movlt	r4, #0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb9      	ittee	lt
 800bd7c:	9b06      	ldrlt	r3, [sp, #24]
 800bd7e:	9a02      	ldrlt	r2, [sp, #8]
 800bd80:	9f06      	ldrge	r7, [sp, #24]
 800bd82:	9b02      	ldrge	r3, [sp, #8]
 800bd84:	bfbc      	itt	lt
 800bd86:	1a9f      	sublt	r7, r3, r2
 800bd88:	2300      	movlt	r3, #0
 800bd8a:	e73e      	b.n	800bc0a <_dtoa_r+0x74a>
 800bd8c:	3fe00000 	.word	0x3fe00000
 800bd90:	40240000 	.word	0x40240000
 800bd94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd96:	9f06      	ldr	r7, [sp, #24]
 800bd98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bd9a:	e741      	b.n	800bc20 <_dtoa_r+0x760>
 800bd9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd9e:	e76a      	b.n	800bc76 <_dtoa_r+0x7b6>
 800bda0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	dc19      	bgt.n	800bdda <_dtoa_r+0x91a>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	b9bb      	cbnz	r3, 800bdda <_dtoa_r+0x91a>
 800bdaa:	9b05      	ldr	r3, [sp, #20]
 800bdac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb0:	b99b      	cbnz	r3, 800bdda <_dtoa_r+0x91a>
 800bdb2:	9b05      	ldr	r3, [sp, #20]
 800bdb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdb8:	0d1b      	lsrs	r3, r3, #20
 800bdba:	051b      	lsls	r3, r3, #20
 800bdbc:	b183      	cbz	r3, 800bde0 <_dtoa_r+0x920>
 800bdbe:	9b06      	ldr	r3, [sp, #24]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	9306      	str	r3, [sp, #24]
 800bdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdca:	f04f 0801 	mov.w	r8, #1
 800bdce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f47f af6a 	bne.w	800bcaa <_dtoa_r+0x7ea>
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e76f      	b.n	800bcba <_dtoa_r+0x7fa>
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	e7f6      	b.n	800bdce <_dtoa_r+0x90e>
 800bde0:	4698      	mov	r8, r3
 800bde2:	e7f4      	b.n	800bdce <_dtoa_r+0x90e>
 800bde4:	f43f af7d 	beq.w	800bce2 <_dtoa_r+0x822>
 800bde8:	4618      	mov	r0, r3
 800bdea:	301c      	adds	r0, #28
 800bdec:	e772      	b.n	800bcd4 <_dtoa_r+0x814>
 800bdee:	9b02      	ldr	r3, [sp, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc36      	bgt.n	800be62 <_dtoa_r+0x9a2>
 800bdf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	dd33      	ble.n	800be62 <_dtoa_r+0x9a2>
 800bdfa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bdfe:	f1bb 0f00 	cmp.w	fp, #0
 800be02:	d10d      	bne.n	800be20 <_dtoa_r+0x960>
 800be04:	4621      	mov	r1, r4
 800be06:	465b      	mov	r3, fp
 800be08:	2205      	movs	r2, #5
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 ff8a 	bl	800cd24 <__multadd>
 800be10:	4601      	mov	r1, r0
 800be12:	4604      	mov	r4, r0
 800be14:	4650      	mov	r0, sl
 800be16:	f001 f9e9 	bl	800d1ec <__mcmp>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	f73f adb6 	bgt.w	800b98c <_dtoa_r+0x4cc>
 800be20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be22:	9f08      	ldr	r7, [sp, #32]
 800be24:	ea6f 0903 	mvn.w	r9, r3
 800be28:	f04f 0800 	mov.w	r8, #0
 800be2c:	4621      	mov	r1, r4
 800be2e:	4628      	mov	r0, r5
 800be30:	f000 ff56 	bl	800cce0 <_Bfree>
 800be34:	2e00      	cmp	r6, #0
 800be36:	f43f aea4 	beq.w	800bb82 <_dtoa_r+0x6c2>
 800be3a:	f1b8 0f00 	cmp.w	r8, #0
 800be3e:	d005      	beq.n	800be4c <_dtoa_r+0x98c>
 800be40:	45b0      	cmp	r8, r6
 800be42:	d003      	beq.n	800be4c <_dtoa_r+0x98c>
 800be44:	4641      	mov	r1, r8
 800be46:	4628      	mov	r0, r5
 800be48:	f000 ff4a 	bl	800cce0 <_Bfree>
 800be4c:	4631      	mov	r1, r6
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 ff46 	bl	800cce0 <_Bfree>
 800be54:	e695      	b.n	800bb82 <_dtoa_r+0x6c2>
 800be56:	2400      	movs	r4, #0
 800be58:	4626      	mov	r6, r4
 800be5a:	e7e1      	b.n	800be20 <_dtoa_r+0x960>
 800be5c:	46c1      	mov	r9, r8
 800be5e:	4626      	mov	r6, r4
 800be60:	e594      	b.n	800b98c <_dtoa_r+0x4cc>
 800be62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be64:	f8dd b008 	ldr.w	fp, [sp, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80fc 	beq.w	800c066 <_dtoa_r+0xba6>
 800be6e:	2f00      	cmp	r7, #0
 800be70:	dd05      	ble.n	800be7e <_dtoa_r+0x9be>
 800be72:	4631      	mov	r1, r6
 800be74:	463a      	mov	r2, r7
 800be76:	4628      	mov	r0, r5
 800be78:	f001 f94c 	bl	800d114 <__lshift>
 800be7c:	4606      	mov	r6, r0
 800be7e:	f1b8 0f00 	cmp.w	r8, #0
 800be82:	d05c      	beq.n	800bf3e <_dtoa_r+0xa7e>
 800be84:	6871      	ldr	r1, [r6, #4]
 800be86:	4628      	mov	r0, r5
 800be88:	f000 feea 	bl	800cc60 <_Balloc>
 800be8c:	4607      	mov	r7, r0
 800be8e:	b928      	cbnz	r0, 800be9c <_dtoa_r+0x9dc>
 800be90:	4b7f      	ldr	r3, [pc, #508]	; (800c090 <_dtoa_r+0xbd0>)
 800be92:	4602      	mov	r2, r0
 800be94:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be98:	f7ff bb26 	b.w	800b4e8 <_dtoa_r+0x28>
 800be9c:	6932      	ldr	r2, [r6, #16]
 800be9e:	3202      	adds	r2, #2
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	f106 010c 	add.w	r1, r6, #12
 800bea6:	300c      	adds	r0, #12
 800bea8:	f7fd fa6e 	bl	8009388 <memcpy>
 800beac:	2201      	movs	r2, #1
 800beae:	4639      	mov	r1, r7
 800beb0:	4628      	mov	r0, r5
 800beb2:	f001 f92f 	bl	800d114 <__lshift>
 800beb6:	9b08      	ldr	r3, [sp, #32]
 800beb8:	3301      	adds	r3, #1
 800beba:	9302      	str	r3, [sp, #8]
 800bebc:	9b08      	ldr	r3, [sp, #32]
 800bebe:	445b      	add	r3, fp
 800bec0:	930a      	str	r3, [sp, #40]	; 0x28
 800bec2:	9b04      	ldr	r3, [sp, #16]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	46b0      	mov	r8, r6
 800beca:	9309      	str	r3, [sp, #36]	; 0x24
 800becc:	4606      	mov	r6, r0
 800bece:	9b02      	ldr	r3, [sp, #8]
 800bed0:	4621      	mov	r1, r4
 800bed2:	4650      	mov	r0, sl
 800bed4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bed8:	f7ff fa66 	bl	800b3a8 <quorem>
 800bedc:	4603      	mov	r3, r0
 800bede:	3330      	adds	r3, #48	; 0x30
 800bee0:	9004      	str	r0, [sp, #16]
 800bee2:	4641      	mov	r1, r8
 800bee4:	4650      	mov	r0, sl
 800bee6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bee8:	f001 f980 	bl	800d1ec <__mcmp>
 800beec:	4632      	mov	r2, r6
 800beee:	9006      	str	r0, [sp, #24]
 800bef0:	4621      	mov	r1, r4
 800bef2:	4628      	mov	r0, r5
 800bef4:	f001 f996 	bl	800d224 <__mdiff>
 800bef8:	68c2      	ldr	r2, [r0, #12]
 800befa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800befc:	4607      	mov	r7, r0
 800befe:	bb02      	cbnz	r2, 800bf42 <_dtoa_r+0xa82>
 800bf00:	4601      	mov	r1, r0
 800bf02:	4650      	mov	r0, sl
 800bf04:	f001 f972 	bl	800d1ec <__mcmp>
 800bf08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	4628      	mov	r0, r5
 800bf10:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bf14:	f000 fee4 	bl	800cce0 <_Bfree>
 800bf18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf1c:	9f02      	ldr	r7, [sp, #8]
 800bf1e:	ea43 0102 	orr.w	r1, r3, r2
 800bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf24:	430b      	orrs	r3, r1
 800bf26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf28:	d10d      	bne.n	800bf46 <_dtoa_r+0xa86>
 800bf2a:	2b39      	cmp	r3, #57	; 0x39
 800bf2c:	d027      	beq.n	800bf7e <_dtoa_r+0xabe>
 800bf2e:	9a06      	ldr	r2, [sp, #24]
 800bf30:	2a00      	cmp	r2, #0
 800bf32:	dd01      	ble.n	800bf38 <_dtoa_r+0xa78>
 800bf34:	9b04      	ldr	r3, [sp, #16]
 800bf36:	3331      	adds	r3, #49	; 0x31
 800bf38:	f88b 3000 	strb.w	r3, [fp]
 800bf3c:	e776      	b.n	800be2c <_dtoa_r+0x96c>
 800bf3e:	4630      	mov	r0, r6
 800bf40:	e7b9      	b.n	800beb6 <_dtoa_r+0x9f6>
 800bf42:	2201      	movs	r2, #1
 800bf44:	e7e2      	b.n	800bf0c <_dtoa_r+0xa4c>
 800bf46:	9906      	ldr	r1, [sp, #24]
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	db04      	blt.n	800bf56 <_dtoa_r+0xa96>
 800bf4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800bf4e:	4301      	orrs	r1, r0
 800bf50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf52:	4301      	orrs	r1, r0
 800bf54:	d120      	bne.n	800bf98 <_dtoa_r+0xad8>
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	ddee      	ble.n	800bf38 <_dtoa_r+0xa78>
 800bf5a:	4651      	mov	r1, sl
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	4628      	mov	r0, r5
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	f001 f8d7 	bl	800d114 <__lshift>
 800bf66:	4621      	mov	r1, r4
 800bf68:	4682      	mov	sl, r0
 800bf6a:	f001 f93f 	bl	800d1ec <__mcmp>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	9b02      	ldr	r3, [sp, #8]
 800bf72:	dc02      	bgt.n	800bf7a <_dtoa_r+0xaba>
 800bf74:	d1e0      	bne.n	800bf38 <_dtoa_r+0xa78>
 800bf76:	07da      	lsls	r2, r3, #31
 800bf78:	d5de      	bpl.n	800bf38 <_dtoa_r+0xa78>
 800bf7a:	2b39      	cmp	r3, #57	; 0x39
 800bf7c:	d1da      	bne.n	800bf34 <_dtoa_r+0xa74>
 800bf7e:	2339      	movs	r3, #57	; 0x39
 800bf80:	f88b 3000 	strb.w	r3, [fp]
 800bf84:	463b      	mov	r3, r7
 800bf86:	461f      	mov	r7, r3
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bf8e:	2a39      	cmp	r2, #57	; 0x39
 800bf90:	d050      	beq.n	800c034 <_dtoa_r+0xb74>
 800bf92:	3201      	adds	r2, #1
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	e749      	b.n	800be2c <_dtoa_r+0x96c>
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	dd03      	ble.n	800bfa4 <_dtoa_r+0xae4>
 800bf9c:	2b39      	cmp	r3, #57	; 0x39
 800bf9e:	d0ee      	beq.n	800bf7e <_dtoa_r+0xabe>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	e7c9      	b.n	800bf38 <_dtoa_r+0xa78>
 800bfa4:	9a02      	ldr	r2, [sp, #8]
 800bfa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bfac:	428a      	cmp	r2, r1
 800bfae:	d02a      	beq.n	800c006 <_dtoa_r+0xb46>
 800bfb0:	4651      	mov	r1, sl
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	220a      	movs	r2, #10
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f000 feb4 	bl	800cd24 <__multadd>
 800bfbc:	45b0      	cmp	r8, r6
 800bfbe:	4682      	mov	sl, r0
 800bfc0:	f04f 0300 	mov.w	r3, #0
 800bfc4:	f04f 020a 	mov.w	r2, #10
 800bfc8:	4641      	mov	r1, r8
 800bfca:	4628      	mov	r0, r5
 800bfcc:	d107      	bne.n	800bfde <_dtoa_r+0xb1e>
 800bfce:	f000 fea9 	bl	800cd24 <__multadd>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	9b02      	ldr	r3, [sp, #8]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	9302      	str	r3, [sp, #8]
 800bfdc:	e777      	b.n	800bece <_dtoa_r+0xa0e>
 800bfde:	f000 fea1 	bl	800cd24 <__multadd>
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 fe9a 	bl	800cd24 <__multadd>
 800bff0:	4606      	mov	r6, r0
 800bff2:	e7f0      	b.n	800bfd6 <_dtoa_r+0xb16>
 800bff4:	f1bb 0f00 	cmp.w	fp, #0
 800bff8:	9a08      	ldr	r2, [sp, #32]
 800bffa:	bfcc      	ite	gt
 800bffc:	465f      	movgt	r7, fp
 800bffe:	2701      	movle	r7, #1
 800c000:	4417      	add	r7, r2
 800c002:	f04f 0800 	mov.w	r8, #0
 800c006:	4651      	mov	r1, sl
 800c008:	2201      	movs	r2, #1
 800c00a:	4628      	mov	r0, r5
 800c00c:	9302      	str	r3, [sp, #8]
 800c00e:	f001 f881 	bl	800d114 <__lshift>
 800c012:	4621      	mov	r1, r4
 800c014:	4682      	mov	sl, r0
 800c016:	f001 f8e9 	bl	800d1ec <__mcmp>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	dcb2      	bgt.n	800bf84 <_dtoa_r+0xac4>
 800c01e:	d102      	bne.n	800c026 <_dtoa_r+0xb66>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	07db      	lsls	r3, r3, #31
 800c024:	d4ae      	bmi.n	800bf84 <_dtoa_r+0xac4>
 800c026:	463b      	mov	r3, r7
 800c028:	461f      	mov	r7, r3
 800c02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c02e:	2a30      	cmp	r2, #48	; 0x30
 800c030:	d0fa      	beq.n	800c028 <_dtoa_r+0xb68>
 800c032:	e6fb      	b.n	800be2c <_dtoa_r+0x96c>
 800c034:	9a08      	ldr	r2, [sp, #32]
 800c036:	429a      	cmp	r2, r3
 800c038:	d1a5      	bne.n	800bf86 <_dtoa_r+0xac6>
 800c03a:	2331      	movs	r3, #49	; 0x31
 800c03c:	f109 0901 	add.w	r9, r9, #1
 800c040:	7013      	strb	r3, [r2, #0]
 800c042:	e6f3      	b.n	800be2c <_dtoa_r+0x96c>
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <_dtoa_r+0xbd4>)
 800c046:	f7ff baa6 	b.w	800b596 <_dtoa_r+0xd6>
 800c04a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f47f aa7f 	bne.w	800b550 <_dtoa_r+0x90>
 800c052:	4b11      	ldr	r3, [pc, #68]	; (800c098 <_dtoa_r+0xbd8>)
 800c054:	f7ff ba9f 	b.w	800b596 <_dtoa_r+0xd6>
 800c058:	f1bb 0f00 	cmp.w	fp, #0
 800c05c:	dc03      	bgt.n	800c066 <_dtoa_r+0xba6>
 800c05e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c060:	2b02      	cmp	r3, #2
 800c062:	f73f aecc 	bgt.w	800bdfe <_dtoa_r+0x93e>
 800c066:	9f08      	ldr	r7, [sp, #32]
 800c068:	4621      	mov	r1, r4
 800c06a:	4650      	mov	r0, sl
 800c06c:	f7ff f99c 	bl	800b3a8 <quorem>
 800c070:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c074:	f807 3b01 	strb.w	r3, [r7], #1
 800c078:	9a08      	ldr	r2, [sp, #32]
 800c07a:	1aba      	subs	r2, r7, r2
 800c07c:	4593      	cmp	fp, r2
 800c07e:	ddb9      	ble.n	800bff4 <_dtoa_r+0xb34>
 800c080:	4651      	mov	r1, sl
 800c082:	2300      	movs	r3, #0
 800c084:	220a      	movs	r2, #10
 800c086:	4628      	mov	r0, r5
 800c088:	f000 fe4c 	bl	800cd24 <__multadd>
 800c08c:	4682      	mov	sl, r0
 800c08e:	e7eb      	b.n	800c068 <_dtoa_r+0xba8>
 800c090:	0800ee64 	.word	0x0800ee64
 800c094:	0800e5d0 	.word	0x0800e5d0
 800c098:	0800ede1 	.word	0x0800ede1

0800c09c <__sflush_r>:
 800c09c:	898a      	ldrh	r2, [r1, #12]
 800c09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	0710      	lsls	r0, r2, #28
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	d458      	bmi.n	800c15c <__sflush_r+0xc0>
 800c0aa:	684b      	ldr	r3, [r1, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dc05      	bgt.n	800c0bc <__sflush_r+0x20>
 800c0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dc02      	bgt.n	800c0bc <__sflush_r+0x20>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0be:	2e00      	cmp	r6, #0
 800c0c0:	d0f9      	beq.n	800c0b6 <__sflush_r+0x1a>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0c8:	682f      	ldr	r7, [r5, #0]
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	d032      	beq.n	800c134 <__sflush_r+0x98>
 800c0ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	075a      	lsls	r2, r3, #29
 800c0d4:	d505      	bpl.n	800c0e2 <__sflush_r+0x46>
 800c0d6:	6863      	ldr	r3, [r4, #4]
 800c0d8:	1ac0      	subs	r0, r0, r3
 800c0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0dc:	b10b      	cbz	r3, 800c0e2 <__sflush_r+0x46>
 800c0de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0e0:	1ac0      	subs	r0, r0, r3
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0e8:	6a21      	ldr	r1, [r4, #32]
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b0      	blx	r6
 800c0ee:	1c43      	adds	r3, r0, #1
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	d106      	bne.n	800c102 <__sflush_r+0x66>
 800c0f4:	6829      	ldr	r1, [r5, #0]
 800c0f6:	291d      	cmp	r1, #29
 800c0f8:	d82c      	bhi.n	800c154 <__sflush_r+0xb8>
 800c0fa:	4a2a      	ldr	r2, [pc, #168]	; (800c1a4 <__sflush_r+0x108>)
 800c0fc:	40ca      	lsrs	r2, r1
 800c0fe:	07d6      	lsls	r6, r2, #31
 800c100:	d528      	bpl.n	800c154 <__sflush_r+0xb8>
 800c102:	2200      	movs	r2, #0
 800c104:	6062      	str	r2, [r4, #4]
 800c106:	04d9      	lsls	r1, r3, #19
 800c108:	6922      	ldr	r2, [r4, #16]
 800c10a:	6022      	str	r2, [r4, #0]
 800c10c:	d504      	bpl.n	800c118 <__sflush_r+0x7c>
 800c10e:	1c42      	adds	r2, r0, #1
 800c110:	d101      	bne.n	800c116 <__sflush_r+0x7a>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	b903      	cbnz	r3, 800c118 <__sflush_r+0x7c>
 800c116:	6560      	str	r0, [r4, #84]	; 0x54
 800c118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c11a:	602f      	str	r7, [r5, #0]
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d0ca      	beq.n	800c0b6 <__sflush_r+0x1a>
 800c120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c124:	4299      	cmp	r1, r3
 800c126:	d002      	beq.n	800c12e <__sflush_r+0x92>
 800c128:	4628      	mov	r0, r5
 800c12a:	f7fd f943 	bl	80093b4 <_free_r>
 800c12e:	2000      	movs	r0, #0
 800c130:	6360      	str	r0, [r4, #52]	; 0x34
 800c132:	e7c1      	b.n	800c0b8 <__sflush_r+0x1c>
 800c134:	6a21      	ldr	r1, [r4, #32]
 800c136:	2301      	movs	r3, #1
 800c138:	4628      	mov	r0, r5
 800c13a:	47b0      	blx	r6
 800c13c:	1c41      	adds	r1, r0, #1
 800c13e:	d1c7      	bne.n	800c0d0 <__sflush_r+0x34>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0c4      	beq.n	800c0d0 <__sflush_r+0x34>
 800c146:	2b1d      	cmp	r3, #29
 800c148:	d001      	beq.n	800c14e <__sflush_r+0xb2>
 800c14a:	2b16      	cmp	r3, #22
 800c14c:	d101      	bne.n	800c152 <__sflush_r+0xb6>
 800c14e:	602f      	str	r7, [r5, #0]
 800c150:	e7b1      	b.n	800c0b6 <__sflush_r+0x1a>
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	e7ad      	b.n	800c0b8 <__sflush_r+0x1c>
 800c15c:	690f      	ldr	r7, [r1, #16]
 800c15e:	2f00      	cmp	r7, #0
 800c160:	d0a9      	beq.n	800c0b6 <__sflush_r+0x1a>
 800c162:	0793      	lsls	r3, r2, #30
 800c164:	680e      	ldr	r6, [r1, #0]
 800c166:	bf08      	it	eq
 800c168:	694b      	ldreq	r3, [r1, #20]
 800c16a:	600f      	str	r7, [r1, #0]
 800c16c:	bf18      	it	ne
 800c16e:	2300      	movne	r3, #0
 800c170:	eba6 0807 	sub.w	r8, r6, r7
 800c174:	608b      	str	r3, [r1, #8]
 800c176:	f1b8 0f00 	cmp.w	r8, #0
 800c17a:	dd9c      	ble.n	800c0b6 <__sflush_r+0x1a>
 800c17c:	6a21      	ldr	r1, [r4, #32]
 800c17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c180:	4643      	mov	r3, r8
 800c182:	463a      	mov	r2, r7
 800c184:	4628      	mov	r0, r5
 800c186:	47b0      	blx	r6
 800c188:	2800      	cmp	r0, #0
 800c18a:	dc06      	bgt.n	800c19a <__sflush_r+0xfe>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	e78e      	b.n	800c0b8 <__sflush_r+0x1c>
 800c19a:	4407      	add	r7, r0
 800c19c:	eba8 0800 	sub.w	r8, r8, r0
 800c1a0:	e7e9      	b.n	800c176 <__sflush_r+0xda>
 800c1a2:	bf00      	nop
 800c1a4:	20400001 	.word	0x20400001

0800c1a8 <_fflush_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	690b      	ldr	r3, [r1, #16]
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	b913      	cbnz	r3, 800c1b8 <_fflush_r+0x10>
 800c1b2:	2500      	movs	r5, #0
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	b118      	cbz	r0, 800c1c2 <_fflush_r+0x1a>
 800c1ba:	6983      	ldr	r3, [r0, #24]
 800c1bc:	b90b      	cbnz	r3, 800c1c2 <_fflush_r+0x1a>
 800c1be:	f000 f8c5 	bl	800c34c <__sinit>
 800c1c2:	4b14      	ldr	r3, [pc, #80]	; (800c214 <_fflush_r+0x6c>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d11b      	bne.n	800c200 <_fflush_r+0x58>
 800c1c8:	686c      	ldr	r4, [r5, #4]
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0ef      	beq.n	800c1b2 <_fflush_r+0xa>
 800c1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1d4:	07d0      	lsls	r0, r2, #31
 800c1d6:	d404      	bmi.n	800c1e2 <_fflush_r+0x3a>
 800c1d8:	0599      	lsls	r1, r3, #22
 800c1da:	d402      	bmi.n	800c1e2 <_fflush_r+0x3a>
 800c1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1de:	f000 fcba 	bl	800cb56 <__retarget_lock_acquire_recursive>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f7ff ff59 	bl	800c09c <__sflush_r>
 800c1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ec:	07da      	lsls	r2, r3, #31
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	d4e0      	bmi.n	800c1b4 <_fflush_r+0xc>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	059b      	lsls	r3, r3, #22
 800c1f6:	d4dd      	bmi.n	800c1b4 <_fflush_r+0xc>
 800c1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1fa:	f000 fcad 	bl	800cb58 <__retarget_lock_release_recursive>
 800c1fe:	e7d9      	b.n	800c1b4 <_fflush_r+0xc>
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <_fflush_r+0x70>)
 800c202:	429c      	cmp	r4, r3
 800c204:	d101      	bne.n	800c20a <_fflush_r+0x62>
 800c206:	68ac      	ldr	r4, [r5, #8]
 800c208:	e7df      	b.n	800c1ca <_fflush_r+0x22>
 800c20a:	4b04      	ldr	r3, [pc, #16]	; (800c21c <_fflush_r+0x74>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	bf08      	it	eq
 800c210:	68ec      	ldreq	r4, [r5, #12]
 800c212:	e7da      	b.n	800c1ca <_fflush_r+0x22>
 800c214:	0800ee98 	.word	0x0800ee98
 800c218:	0800eeb8 	.word	0x0800eeb8
 800c21c:	0800ee78 	.word	0x0800ee78

0800c220 <fileno>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	4e1a      	ldr	r6, [pc, #104]	; (800c28c <fileno+0x6c>)
 800c224:	6835      	ldr	r5, [r6, #0]
 800c226:	4604      	mov	r4, r0
 800c228:	b125      	cbz	r5, 800c234 <fileno+0x14>
 800c22a:	69ab      	ldr	r3, [r5, #24]
 800c22c:	b913      	cbnz	r3, 800c234 <fileno+0x14>
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 f88c 	bl	800c34c <__sinit>
 800c234:	4b16      	ldr	r3, [pc, #88]	; (800c290 <fileno+0x70>)
 800c236:	429c      	cmp	r4, r3
 800c238:	d118      	bne.n	800c26c <fileno+0x4c>
 800c23a:	686c      	ldr	r4, [r5, #4]
 800c23c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c23e:	07d8      	lsls	r0, r3, #31
 800c240:	d405      	bmi.n	800c24e <fileno+0x2e>
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	0599      	lsls	r1, r3, #22
 800c246:	d402      	bmi.n	800c24e <fileno+0x2e>
 800c248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c24a:	f000 fc84 	bl	800cb56 <__retarget_lock_acquire_recursive>
 800c24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c252:	b1ab      	cbz	r3, 800c280 <fileno+0x60>
 800c254:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800c258:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c25a:	07d2      	lsls	r2, r2, #31
 800c25c:	d404      	bmi.n	800c268 <fileno+0x48>
 800c25e:	059b      	lsls	r3, r3, #22
 800c260:	d402      	bmi.n	800c268 <fileno+0x48>
 800c262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c264:	f000 fc78 	bl	800cb58 <__retarget_lock_release_recursive>
 800c268:	4628      	mov	r0, r5
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	4b09      	ldr	r3, [pc, #36]	; (800c294 <fileno+0x74>)
 800c26e:	429c      	cmp	r4, r3
 800c270:	d101      	bne.n	800c276 <fileno+0x56>
 800c272:	68ac      	ldr	r4, [r5, #8]
 800c274:	e7e2      	b.n	800c23c <fileno+0x1c>
 800c276:	4b08      	ldr	r3, [pc, #32]	; (800c298 <fileno+0x78>)
 800c278:	429c      	cmp	r4, r3
 800c27a:	bf08      	it	eq
 800c27c:	68ec      	ldreq	r4, [r5, #12]
 800c27e:	e7dd      	b.n	800c23c <fileno+0x1c>
 800c280:	6832      	ldr	r2, [r6, #0]
 800c282:	2109      	movs	r1, #9
 800c284:	6011      	str	r1, [r2, #0]
 800c286:	f04f 35ff 	mov.w	r5, #4294967295
 800c28a:	e7e5      	b.n	800c258 <fileno+0x38>
 800c28c:	20000010 	.word	0x20000010
 800c290:	0800ee98 	.word	0x0800ee98
 800c294:	0800eeb8 	.word	0x0800eeb8
 800c298:	0800ee78 	.word	0x0800ee78

0800c29c <std>:
 800c29c:	2300      	movs	r3, #0
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2aa:	6083      	str	r3, [r0, #8]
 800c2ac:	8181      	strh	r1, [r0, #12]
 800c2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c2b0:	81c2      	strh	r2, [r0, #14]
 800c2b2:	6183      	str	r3, [r0, #24]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	2208      	movs	r2, #8
 800c2b8:	305c      	adds	r0, #92	; 0x5c
 800c2ba:	f7fd f873 	bl	80093a4 <memset>
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <std+0x38>)
 800c2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2c2:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <std+0x3c>)
 800c2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2c6:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <std+0x40>)
 800c2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2ca:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <std+0x44>)
 800c2cc:	6224      	str	r4, [r4, #32]
 800c2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800dbe9 	.word	0x0800dbe9
 800c2d8:	0800dc0b 	.word	0x0800dc0b
 800c2dc:	0800dc43 	.word	0x0800dc43
 800c2e0:	0800dc67 	.word	0x0800dc67

0800c2e4 <_cleanup_r>:
 800c2e4:	4901      	ldr	r1, [pc, #4]	; (800c2ec <_cleanup_r+0x8>)
 800c2e6:	f000 b8af 	b.w	800c448 <_fwalk_reent>
 800c2ea:	bf00      	nop
 800c2ec:	0800c1a9 	.word	0x0800c1a9

0800c2f0 <__sfmoreglue>:
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	1e4a      	subs	r2, r1, #1
 800c2f4:	2568      	movs	r5, #104	; 0x68
 800c2f6:	4355      	muls	r5, r2
 800c2f8:	460e      	mov	r6, r1
 800c2fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2fe:	f7fd f8a7 	bl	8009450 <_malloc_r>
 800c302:	4604      	mov	r4, r0
 800c304:	b140      	cbz	r0, 800c318 <__sfmoreglue+0x28>
 800c306:	2100      	movs	r1, #0
 800c308:	e9c0 1600 	strd	r1, r6, [r0]
 800c30c:	300c      	adds	r0, #12
 800c30e:	60a0      	str	r0, [r4, #8]
 800c310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c314:	f7fd f846 	bl	80093a4 <memset>
 800c318:	4620      	mov	r0, r4
 800c31a:	bd70      	pop	{r4, r5, r6, pc}

0800c31c <__sfp_lock_acquire>:
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <__sfp_lock_acquire+0x8>)
 800c31e:	f000 bc1a 	b.w	800cb56 <__retarget_lock_acquire_recursive>
 800c322:	bf00      	nop
 800c324:	200005f8 	.word	0x200005f8

0800c328 <__sfp_lock_release>:
 800c328:	4801      	ldr	r0, [pc, #4]	; (800c330 <__sfp_lock_release+0x8>)
 800c32a:	f000 bc15 	b.w	800cb58 <__retarget_lock_release_recursive>
 800c32e:	bf00      	nop
 800c330:	200005f8 	.word	0x200005f8

0800c334 <__sinit_lock_acquire>:
 800c334:	4801      	ldr	r0, [pc, #4]	; (800c33c <__sinit_lock_acquire+0x8>)
 800c336:	f000 bc0e 	b.w	800cb56 <__retarget_lock_acquire_recursive>
 800c33a:	bf00      	nop
 800c33c:	200005f3 	.word	0x200005f3

0800c340 <__sinit_lock_release>:
 800c340:	4801      	ldr	r0, [pc, #4]	; (800c348 <__sinit_lock_release+0x8>)
 800c342:	f000 bc09 	b.w	800cb58 <__retarget_lock_release_recursive>
 800c346:	bf00      	nop
 800c348:	200005f3 	.word	0x200005f3

0800c34c <__sinit>:
 800c34c:	b510      	push	{r4, lr}
 800c34e:	4604      	mov	r4, r0
 800c350:	f7ff fff0 	bl	800c334 <__sinit_lock_acquire>
 800c354:	69a3      	ldr	r3, [r4, #24]
 800c356:	b11b      	cbz	r3, 800c360 <__sinit+0x14>
 800c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c35c:	f7ff bff0 	b.w	800c340 <__sinit_lock_release>
 800c360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c364:	6523      	str	r3, [r4, #80]	; 0x50
 800c366:	4b13      	ldr	r3, [pc, #76]	; (800c3b4 <__sinit+0x68>)
 800c368:	4a13      	ldr	r2, [pc, #76]	; (800c3b8 <__sinit+0x6c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c36e:	42a3      	cmp	r3, r4
 800c370:	bf04      	itt	eq
 800c372:	2301      	moveq	r3, #1
 800c374:	61a3      	streq	r3, [r4, #24]
 800c376:	4620      	mov	r0, r4
 800c378:	f000 f820 	bl	800c3bc <__sfp>
 800c37c:	6060      	str	r0, [r4, #4]
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f81c 	bl	800c3bc <__sfp>
 800c384:	60a0      	str	r0, [r4, #8]
 800c386:	4620      	mov	r0, r4
 800c388:	f000 f818 	bl	800c3bc <__sfp>
 800c38c:	2200      	movs	r2, #0
 800c38e:	60e0      	str	r0, [r4, #12]
 800c390:	2104      	movs	r1, #4
 800c392:	6860      	ldr	r0, [r4, #4]
 800c394:	f7ff ff82 	bl	800c29c <std>
 800c398:	68a0      	ldr	r0, [r4, #8]
 800c39a:	2201      	movs	r2, #1
 800c39c:	2109      	movs	r1, #9
 800c39e:	f7ff ff7d 	bl	800c29c <std>
 800c3a2:	68e0      	ldr	r0, [r4, #12]
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	2112      	movs	r1, #18
 800c3a8:	f7ff ff78 	bl	800c29c <std>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	61a3      	str	r3, [r4, #24]
 800c3b0:	e7d2      	b.n	800c358 <__sinit+0xc>
 800c3b2:	bf00      	nop
 800c3b4:	0800e5bc 	.word	0x0800e5bc
 800c3b8:	0800c2e5 	.word	0x0800c2e5

0800c3bc <__sfp>:
 800c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3be:	4607      	mov	r7, r0
 800c3c0:	f7ff ffac 	bl	800c31c <__sfp_lock_acquire>
 800c3c4:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <__sfp+0x84>)
 800c3c6:	681e      	ldr	r6, [r3, #0]
 800c3c8:	69b3      	ldr	r3, [r6, #24]
 800c3ca:	b913      	cbnz	r3, 800c3d2 <__sfp+0x16>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff ffbd 	bl	800c34c <__sinit>
 800c3d2:	3648      	adds	r6, #72	; 0x48
 800c3d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	d503      	bpl.n	800c3e4 <__sfp+0x28>
 800c3dc:	6833      	ldr	r3, [r6, #0]
 800c3de:	b30b      	cbz	r3, 800c424 <__sfp+0x68>
 800c3e0:	6836      	ldr	r6, [r6, #0]
 800c3e2:	e7f7      	b.n	800c3d4 <__sfp+0x18>
 800c3e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3e8:	b9d5      	cbnz	r5, 800c420 <__sfp+0x64>
 800c3ea:	4b16      	ldr	r3, [pc, #88]	; (800c444 <__sfp+0x88>)
 800c3ec:	60e3      	str	r3, [r4, #12]
 800c3ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c3f4:	f000 fbae 	bl	800cb54 <__retarget_lock_init_recursive>
 800c3f8:	f7ff ff96 	bl	800c328 <__sfp_lock_release>
 800c3fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c404:	6025      	str	r5, [r4, #0]
 800c406:	61a5      	str	r5, [r4, #24]
 800c408:	2208      	movs	r2, #8
 800c40a:	4629      	mov	r1, r5
 800c40c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c410:	f7fc ffc8 	bl	80093a4 <memset>
 800c414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c41c:	4620      	mov	r0, r4
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c420:	3468      	adds	r4, #104	; 0x68
 800c422:	e7d9      	b.n	800c3d8 <__sfp+0x1c>
 800c424:	2104      	movs	r1, #4
 800c426:	4638      	mov	r0, r7
 800c428:	f7ff ff62 	bl	800c2f0 <__sfmoreglue>
 800c42c:	4604      	mov	r4, r0
 800c42e:	6030      	str	r0, [r6, #0]
 800c430:	2800      	cmp	r0, #0
 800c432:	d1d5      	bne.n	800c3e0 <__sfp+0x24>
 800c434:	f7ff ff78 	bl	800c328 <__sfp_lock_release>
 800c438:	230c      	movs	r3, #12
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	e7ee      	b.n	800c41c <__sfp+0x60>
 800c43e:	bf00      	nop
 800c440:	0800e5bc 	.word	0x0800e5bc
 800c444:	ffff0001 	.word	0xffff0001

0800c448 <_fwalk_reent>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	4606      	mov	r6, r0
 800c44e:	4688      	mov	r8, r1
 800c450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c454:	2700      	movs	r7, #0
 800c456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c45a:	f1b9 0901 	subs.w	r9, r9, #1
 800c45e:	d505      	bpl.n	800c46c <_fwalk_reent+0x24>
 800c460:	6824      	ldr	r4, [r4, #0]
 800c462:	2c00      	cmp	r4, #0
 800c464:	d1f7      	bne.n	800c456 <_fwalk_reent+0xe>
 800c466:	4638      	mov	r0, r7
 800c468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46c:	89ab      	ldrh	r3, [r5, #12]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d907      	bls.n	800c482 <_fwalk_reent+0x3a>
 800c472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c476:	3301      	adds	r3, #1
 800c478:	d003      	beq.n	800c482 <_fwalk_reent+0x3a>
 800c47a:	4629      	mov	r1, r5
 800c47c:	4630      	mov	r0, r6
 800c47e:	47c0      	blx	r8
 800c480:	4307      	orrs	r7, r0
 800c482:	3568      	adds	r5, #104	; 0x68
 800c484:	e7e9      	b.n	800c45a <_fwalk_reent+0x12>

0800c486 <rshift>:
 800c486:	6903      	ldr	r3, [r0, #16]
 800c488:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c490:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c494:	f100 0414 	add.w	r4, r0, #20
 800c498:	dd45      	ble.n	800c526 <rshift+0xa0>
 800c49a:	f011 011f 	ands.w	r1, r1, #31
 800c49e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4a6:	d10c      	bne.n	800c4c2 <rshift+0x3c>
 800c4a8:	f100 0710 	add.w	r7, r0, #16
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	42b1      	cmp	r1, r6
 800c4b0:	d334      	bcc.n	800c51c <rshift+0x96>
 800c4b2:	1a9b      	subs	r3, r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	1eea      	subs	r2, r5, #3
 800c4b8:	4296      	cmp	r6, r2
 800c4ba:	bf38      	it	cc
 800c4bc:	2300      	movcc	r3, #0
 800c4be:	4423      	add	r3, r4
 800c4c0:	e015      	b.n	800c4ee <rshift+0x68>
 800c4c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4c6:	f1c1 0820 	rsb	r8, r1, #32
 800c4ca:	40cf      	lsrs	r7, r1
 800c4cc:	f105 0e04 	add.w	lr, r5, #4
 800c4d0:	46a1      	mov	r9, r4
 800c4d2:	4576      	cmp	r6, lr
 800c4d4:	46f4      	mov	ip, lr
 800c4d6:	d815      	bhi.n	800c504 <rshift+0x7e>
 800c4d8:	1a9b      	subs	r3, r3, r2
 800c4da:	009a      	lsls	r2, r3, #2
 800c4dc:	3a04      	subs	r2, #4
 800c4de:	3501      	adds	r5, #1
 800c4e0:	42ae      	cmp	r6, r5
 800c4e2:	bf38      	it	cc
 800c4e4:	2200      	movcc	r2, #0
 800c4e6:	18a3      	adds	r3, r4, r2
 800c4e8:	50a7      	str	r7, [r4, r2]
 800c4ea:	b107      	cbz	r7, 800c4ee <rshift+0x68>
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	1b1a      	subs	r2, r3, r4
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4f6:	bf08      	it	eq
 800c4f8:	2300      	moveq	r3, #0
 800c4fa:	6102      	str	r2, [r0, #16]
 800c4fc:	bf08      	it	eq
 800c4fe:	6143      	streq	r3, [r0, #20]
 800c500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c504:	f8dc c000 	ldr.w	ip, [ip]
 800c508:	fa0c fc08 	lsl.w	ip, ip, r8
 800c50c:	ea4c 0707 	orr.w	r7, ip, r7
 800c510:	f849 7b04 	str.w	r7, [r9], #4
 800c514:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c518:	40cf      	lsrs	r7, r1
 800c51a:	e7da      	b.n	800c4d2 <rshift+0x4c>
 800c51c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c520:	f847 cf04 	str.w	ip, [r7, #4]!
 800c524:	e7c3      	b.n	800c4ae <rshift+0x28>
 800c526:	4623      	mov	r3, r4
 800c528:	e7e1      	b.n	800c4ee <rshift+0x68>

0800c52a <__hexdig_fun>:
 800c52a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c52e:	2b09      	cmp	r3, #9
 800c530:	d802      	bhi.n	800c538 <__hexdig_fun+0xe>
 800c532:	3820      	subs	r0, #32
 800c534:	b2c0      	uxtb	r0, r0
 800c536:	4770      	bx	lr
 800c538:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c53c:	2b05      	cmp	r3, #5
 800c53e:	d801      	bhi.n	800c544 <__hexdig_fun+0x1a>
 800c540:	3847      	subs	r0, #71	; 0x47
 800c542:	e7f7      	b.n	800c534 <__hexdig_fun+0xa>
 800c544:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c548:	2b05      	cmp	r3, #5
 800c54a:	d801      	bhi.n	800c550 <__hexdig_fun+0x26>
 800c54c:	3827      	subs	r0, #39	; 0x27
 800c54e:	e7f1      	b.n	800c534 <__hexdig_fun+0xa>
 800c550:	2000      	movs	r0, #0
 800c552:	4770      	bx	lr

0800c554 <__gethex>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	b08b      	sub	sp, #44	; 0x2c
 800c55a:	468b      	mov	fp, r1
 800c55c:	9306      	str	r3, [sp, #24]
 800c55e:	4bb9      	ldr	r3, [pc, #740]	; (800c844 <__gethex+0x2f0>)
 800c560:	9002      	str	r0, [sp, #8]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	9303      	str	r3, [sp, #12]
 800c566:	4618      	mov	r0, r3
 800c568:	4690      	mov	r8, r2
 800c56a:	f7f3 fe13 	bl	8000194 <strlen>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	f8db 2000 	ldr.w	r2, [fp]
 800c574:	4403      	add	r3, r0
 800c576:	4682      	mov	sl, r0
 800c578:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c57c:	9307      	str	r3, [sp, #28]
 800c57e:	1c93      	adds	r3, r2, #2
 800c580:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c584:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c588:	32fe      	adds	r2, #254	; 0xfe
 800c58a:	18d1      	adds	r1, r2, r3
 800c58c:	461f      	mov	r7, r3
 800c58e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c592:	9101      	str	r1, [sp, #4]
 800c594:	2830      	cmp	r0, #48	; 0x30
 800c596:	d0f8      	beq.n	800c58a <__gethex+0x36>
 800c598:	f7ff ffc7 	bl	800c52a <__hexdig_fun>
 800c59c:	4604      	mov	r4, r0
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d13a      	bne.n	800c618 <__gethex+0xc4>
 800c5a2:	9903      	ldr	r1, [sp, #12]
 800c5a4:	4652      	mov	r2, sl
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	f001 fb61 	bl	800dc6e <strncmp>
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d166      	bne.n	800c680 <__gethex+0x12c>
 800c5b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c5b6:	eb07 060a 	add.w	r6, r7, sl
 800c5ba:	f7ff ffb6 	bl	800c52a <__hexdig_fun>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d060      	beq.n	800c684 <__gethex+0x130>
 800c5c2:	4633      	mov	r3, r6
 800c5c4:	7818      	ldrb	r0, [r3, #0]
 800c5c6:	2830      	cmp	r0, #48	; 0x30
 800c5c8:	461f      	mov	r7, r3
 800c5ca:	f103 0301 	add.w	r3, r3, #1
 800c5ce:	d0f9      	beq.n	800c5c4 <__gethex+0x70>
 800c5d0:	f7ff ffab 	bl	800c52a <__hexdig_fun>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	fab0 f480 	clz	r4, r0
 800c5da:	0964      	lsrs	r4, r4, #5
 800c5dc:	4635      	mov	r5, r6
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	463a      	mov	r2, r7
 800c5e2:	4616      	mov	r6, r2
 800c5e4:	3201      	adds	r2, #1
 800c5e6:	7830      	ldrb	r0, [r6, #0]
 800c5e8:	f7ff ff9f 	bl	800c52a <__hexdig_fun>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d1f8      	bne.n	800c5e2 <__gethex+0x8e>
 800c5f0:	9903      	ldr	r1, [sp, #12]
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f001 fb3a 	bl	800dc6e <strncmp>
 800c5fa:	b980      	cbnz	r0, 800c61e <__gethex+0xca>
 800c5fc:	b94d      	cbnz	r5, 800c612 <__gethex+0xbe>
 800c5fe:	eb06 050a 	add.w	r5, r6, sl
 800c602:	462a      	mov	r2, r5
 800c604:	4616      	mov	r6, r2
 800c606:	3201      	adds	r2, #1
 800c608:	7830      	ldrb	r0, [r6, #0]
 800c60a:	f7ff ff8e 	bl	800c52a <__hexdig_fun>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d1f8      	bne.n	800c604 <__gethex+0xb0>
 800c612:	1bad      	subs	r5, r5, r6
 800c614:	00ad      	lsls	r5, r5, #2
 800c616:	e004      	b.n	800c622 <__gethex+0xce>
 800c618:	2400      	movs	r4, #0
 800c61a:	4625      	mov	r5, r4
 800c61c:	e7e0      	b.n	800c5e0 <__gethex+0x8c>
 800c61e:	2d00      	cmp	r5, #0
 800c620:	d1f7      	bne.n	800c612 <__gethex+0xbe>
 800c622:	7833      	ldrb	r3, [r6, #0]
 800c624:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c628:	2b50      	cmp	r3, #80	; 0x50
 800c62a:	d139      	bne.n	800c6a0 <__gethex+0x14c>
 800c62c:	7873      	ldrb	r3, [r6, #1]
 800c62e:	2b2b      	cmp	r3, #43	; 0x2b
 800c630:	d02a      	beq.n	800c688 <__gethex+0x134>
 800c632:	2b2d      	cmp	r3, #45	; 0x2d
 800c634:	d02c      	beq.n	800c690 <__gethex+0x13c>
 800c636:	1c71      	adds	r1, r6, #1
 800c638:	f04f 0900 	mov.w	r9, #0
 800c63c:	7808      	ldrb	r0, [r1, #0]
 800c63e:	f7ff ff74 	bl	800c52a <__hexdig_fun>
 800c642:	1e43      	subs	r3, r0, #1
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b18      	cmp	r3, #24
 800c648:	d82a      	bhi.n	800c6a0 <__gethex+0x14c>
 800c64a:	f1a0 0210 	sub.w	r2, r0, #16
 800c64e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c652:	f7ff ff6a 	bl	800c52a <__hexdig_fun>
 800c656:	1e43      	subs	r3, r0, #1
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b18      	cmp	r3, #24
 800c65c:	d91b      	bls.n	800c696 <__gethex+0x142>
 800c65e:	f1b9 0f00 	cmp.w	r9, #0
 800c662:	d000      	beq.n	800c666 <__gethex+0x112>
 800c664:	4252      	negs	r2, r2
 800c666:	4415      	add	r5, r2
 800c668:	f8cb 1000 	str.w	r1, [fp]
 800c66c:	b1d4      	cbz	r4, 800c6a4 <__gethex+0x150>
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	bf14      	ite	ne
 800c674:	2700      	movne	r7, #0
 800c676:	2706      	moveq	r7, #6
 800c678:	4638      	mov	r0, r7
 800c67a:	b00b      	add	sp, #44	; 0x2c
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	463e      	mov	r6, r7
 800c682:	4625      	mov	r5, r4
 800c684:	2401      	movs	r4, #1
 800c686:	e7cc      	b.n	800c622 <__gethex+0xce>
 800c688:	f04f 0900 	mov.w	r9, #0
 800c68c:	1cb1      	adds	r1, r6, #2
 800c68e:	e7d5      	b.n	800c63c <__gethex+0xe8>
 800c690:	f04f 0901 	mov.w	r9, #1
 800c694:	e7fa      	b.n	800c68c <__gethex+0x138>
 800c696:	230a      	movs	r3, #10
 800c698:	fb03 0202 	mla	r2, r3, r2, r0
 800c69c:	3a10      	subs	r2, #16
 800c69e:	e7d6      	b.n	800c64e <__gethex+0xfa>
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	e7e1      	b.n	800c668 <__gethex+0x114>
 800c6a4:	1bf3      	subs	r3, r6, r7
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	2b07      	cmp	r3, #7
 800c6ac:	dc0a      	bgt.n	800c6c4 <__gethex+0x170>
 800c6ae:	9802      	ldr	r0, [sp, #8]
 800c6b0:	f000 fad6 	bl	800cc60 <_Balloc>
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	b940      	cbnz	r0, 800c6ca <__gethex+0x176>
 800c6b8:	4b63      	ldr	r3, [pc, #396]	; (800c848 <__gethex+0x2f4>)
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	21de      	movs	r1, #222	; 0xde
 800c6be:	4863      	ldr	r0, [pc, #396]	; (800c84c <__gethex+0x2f8>)
 800c6c0:	f001 faf4 	bl	800dcac <__assert_func>
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	105b      	asrs	r3, r3, #1
 800c6c8:	e7ef      	b.n	800c6aa <__gethex+0x156>
 800c6ca:	f100 0914 	add.w	r9, r0, #20
 800c6ce:	f04f 0b00 	mov.w	fp, #0
 800c6d2:	f1ca 0301 	rsb	r3, sl, #1
 800c6d6:	f8cd 9010 	str.w	r9, [sp, #16]
 800c6da:	f8cd b004 	str.w	fp, [sp, #4]
 800c6de:	9308      	str	r3, [sp, #32]
 800c6e0:	42b7      	cmp	r7, r6
 800c6e2:	d33f      	bcc.n	800c764 <__gethex+0x210>
 800c6e4:	9f04      	ldr	r7, [sp, #16]
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	f847 3b04 	str.w	r3, [r7], #4
 800c6ec:	eba7 0709 	sub.w	r7, r7, r9
 800c6f0:	10bf      	asrs	r7, r7, #2
 800c6f2:	6127      	str	r7, [r4, #16]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fba9 	bl	800ce4c <__hi0bits>
 800c6fa:	017f      	lsls	r7, r7, #5
 800c6fc:	f8d8 6000 	ldr.w	r6, [r8]
 800c700:	1a3f      	subs	r7, r7, r0
 800c702:	42b7      	cmp	r7, r6
 800c704:	dd62      	ble.n	800c7cc <__gethex+0x278>
 800c706:	1bbf      	subs	r7, r7, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 ff3b 	bl	800d586 <__any_on>
 800c710:	4682      	mov	sl, r0
 800c712:	b1a8      	cbz	r0, 800c740 <__gethex+0x1ec>
 800c714:	1e7b      	subs	r3, r7, #1
 800c716:	1159      	asrs	r1, r3, #5
 800c718:	f003 021f 	and.w	r2, r3, #31
 800c71c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c720:	f04f 0a01 	mov.w	sl, #1
 800c724:	fa0a f202 	lsl.w	r2, sl, r2
 800c728:	420a      	tst	r2, r1
 800c72a:	d009      	beq.n	800c740 <__gethex+0x1ec>
 800c72c:	4553      	cmp	r3, sl
 800c72e:	dd05      	ble.n	800c73c <__gethex+0x1e8>
 800c730:	1eb9      	subs	r1, r7, #2
 800c732:	4620      	mov	r0, r4
 800c734:	f000 ff27 	bl	800d586 <__any_on>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d144      	bne.n	800c7c6 <__gethex+0x272>
 800c73c:	f04f 0a02 	mov.w	sl, #2
 800c740:	4639      	mov	r1, r7
 800c742:	4620      	mov	r0, r4
 800c744:	f7ff fe9f 	bl	800c486 <rshift>
 800c748:	443d      	add	r5, r7
 800c74a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c74e:	42ab      	cmp	r3, r5
 800c750:	da4a      	bge.n	800c7e8 <__gethex+0x294>
 800c752:	9802      	ldr	r0, [sp, #8]
 800c754:	4621      	mov	r1, r4
 800c756:	f000 fac3 	bl	800cce0 <_Bfree>
 800c75a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c75c:	2300      	movs	r3, #0
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	27a3      	movs	r7, #163	; 0xa3
 800c762:	e789      	b.n	800c678 <__gethex+0x124>
 800c764:	1e73      	subs	r3, r6, #1
 800c766:	9a07      	ldr	r2, [sp, #28]
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c76e:	4293      	cmp	r3, r2
 800c770:	d019      	beq.n	800c7a6 <__gethex+0x252>
 800c772:	f1bb 0f20 	cmp.w	fp, #32
 800c776:	d107      	bne.n	800c788 <__gethex+0x234>
 800c778:	9b04      	ldr	r3, [sp, #16]
 800c77a:	9a01      	ldr	r2, [sp, #4]
 800c77c:	f843 2b04 	str.w	r2, [r3], #4
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	2300      	movs	r3, #0
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	469b      	mov	fp, r3
 800c788:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c78c:	f7ff fecd 	bl	800c52a <__hexdig_fun>
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	f000 000f 	and.w	r0, r0, #15
 800c796:	fa00 f00b 	lsl.w	r0, r0, fp
 800c79a:	4303      	orrs	r3, r0
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	f10b 0b04 	add.w	fp, fp, #4
 800c7a2:	9b05      	ldr	r3, [sp, #20]
 800c7a4:	e00d      	b.n	800c7c2 <__gethex+0x26e>
 800c7a6:	9b05      	ldr	r3, [sp, #20]
 800c7a8:	9a08      	ldr	r2, [sp, #32]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	42bb      	cmp	r3, r7
 800c7ae:	d3e0      	bcc.n	800c772 <__gethex+0x21e>
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	9903      	ldr	r1, [sp, #12]
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	4652      	mov	r2, sl
 800c7b8:	f001 fa59 	bl	800dc6e <strncmp>
 800c7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d1d7      	bne.n	800c772 <__gethex+0x21e>
 800c7c2:	461e      	mov	r6, r3
 800c7c4:	e78c      	b.n	800c6e0 <__gethex+0x18c>
 800c7c6:	f04f 0a03 	mov.w	sl, #3
 800c7ca:	e7b9      	b.n	800c740 <__gethex+0x1ec>
 800c7cc:	da09      	bge.n	800c7e2 <__gethex+0x28e>
 800c7ce:	1bf7      	subs	r7, r6, r7
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	9802      	ldr	r0, [sp, #8]
 800c7d4:	463a      	mov	r2, r7
 800c7d6:	f000 fc9d 	bl	800d114 <__lshift>
 800c7da:	1bed      	subs	r5, r5, r7
 800c7dc:	4604      	mov	r4, r0
 800c7de:	f100 0914 	add.w	r9, r0, #20
 800c7e2:	f04f 0a00 	mov.w	sl, #0
 800c7e6:	e7b0      	b.n	800c74a <__gethex+0x1f6>
 800c7e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c7ec:	42a8      	cmp	r0, r5
 800c7ee:	dd70      	ble.n	800c8d2 <__gethex+0x37e>
 800c7f0:	1b45      	subs	r5, r0, r5
 800c7f2:	42ae      	cmp	r6, r5
 800c7f4:	dc34      	bgt.n	800c860 <__gethex+0x30c>
 800c7f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d028      	beq.n	800c850 <__gethex+0x2fc>
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d02a      	beq.n	800c858 <__gethex+0x304>
 800c802:	2b01      	cmp	r3, #1
 800c804:	d115      	bne.n	800c832 <__gethex+0x2de>
 800c806:	42ae      	cmp	r6, r5
 800c808:	d113      	bne.n	800c832 <__gethex+0x2de>
 800c80a:	2e01      	cmp	r6, #1
 800c80c:	d10b      	bne.n	800c826 <__gethex+0x2d2>
 800c80e:	9a06      	ldr	r2, [sp, #24]
 800c810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	2301      	movs	r3, #1
 800c818:	6123      	str	r3, [r4, #16]
 800c81a:	f8c9 3000 	str.w	r3, [r9]
 800c81e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c820:	2762      	movs	r7, #98	; 0x62
 800c822:	601c      	str	r4, [r3, #0]
 800c824:	e728      	b.n	800c678 <__gethex+0x124>
 800c826:	1e71      	subs	r1, r6, #1
 800c828:	4620      	mov	r0, r4
 800c82a:	f000 feac 	bl	800d586 <__any_on>
 800c82e:	2800      	cmp	r0, #0
 800c830:	d1ed      	bne.n	800c80e <__gethex+0x2ba>
 800c832:	9802      	ldr	r0, [sp, #8]
 800c834:	4621      	mov	r1, r4
 800c836:	f000 fa53 	bl	800cce0 <_Bfree>
 800c83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c83c:	2300      	movs	r3, #0
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	2750      	movs	r7, #80	; 0x50
 800c842:	e719      	b.n	800c678 <__gethex+0x124>
 800c844:	0800ef44 	.word	0x0800ef44
 800c848:	0800ee64 	.word	0x0800ee64
 800c84c:	0800eed8 	.word	0x0800eed8
 800c850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1ed      	bne.n	800c832 <__gethex+0x2de>
 800c856:	e7da      	b.n	800c80e <__gethex+0x2ba>
 800c858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1d7      	bne.n	800c80e <__gethex+0x2ba>
 800c85e:	e7e8      	b.n	800c832 <__gethex+0x2de>
 800c860:	1e6f      	subs	r7, r5, #1
 800c862:	f1ba 0f00 	cmp.w	sl, #0
 800c866:	d131      	bne.n	800c8cc <__gethex+0x378>
 800c868:	b127      	cbz	r7, 800c874 <__gethex+0x320>
 800c86a:	4639      	mov	r1, r7
 800c86c:	4620      	mov	r0, r4
 800c86e:	f000 fe8a 	bl	800d586 <__any_on>
 800c872:	4682      	mov	sl, r0
 800c874:	117b      	asrs	r3, r7, #5
 800c876:	2101      	movs	r1, #1
 800c878:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c87c:	f007 071f 	and.w	r7, r7, #31
 800c880:	fa01 f707 	lsl.w	r7, r1, r7
 800c884:	421f      	tst	r7, r3
 800c886:	4629      	mov	r1, r5
 800c888:	4620      	mov	r0, r4
 800c88a:	bf18      	it	ne
 800c88c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c890:	1b76      	subs	r6, r6, r5
 800c892:	f7ff fdf8 	bl	800c486 <rshift>
 800c896:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c89a:	2702      	movs	r7, #2
 800c89c:	f1ba 0f00 	cmp.w	sl, #0
 800c8a0:	d048      	beq.n	800c934 <__gethex+0x3e0>
 800c8a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d015      	beq.n	800c8d6 <__gethex+0x382>
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d017      	beq.n	800c8de <__gethex+0x38a>
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d109      	bne.n	800c8c6 <__gethex+0x372>
 800c8b2:	f01a 0f02 	tst.w	sl, #2
 800c8b6:	d006      	beq.n	800c8c6 <__gethex+0x372>
 800c8b8:	f8d9 0000 	ldr.w	r0, [r9]
 800c8bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800c8c0:	f01a 0f01 	tst.w	sl, #1
 800c8c4:	d10e      	bne.n	800c8e4 <__gethex+0x390>
 800c8c6:	f047 0710 	orr.w	r7, r7, #16
 800c8ca:	e033      	b.n	800c934 <__gethex+0x3e0>
 800c8cc:	f04f 0a01 	mov.w	sl, #1
 800c8d0:	e7d0      	b.n	800c874 <__gethex+0x320>
 800c8d2:	2701      	movs	r7, #1
 800c8d4:	e7e2      	b.n	800c89c <__gethex+0x348>
 800c8d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8d8:	f1c3 0301 	rsb	r3, r3, #1
 800c8dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0f0      	beq.n	800c8c6 <__gethex+0x372>
 800c8e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8e8:	f104 0314 	add.w	r3, r4, #20
 800c8ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8f4:	f04f 0c00 	mov.w	ip, #0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c902:	d01c      	beq.n	800c93e <__gethex+0x3ea>
 800c904:	3201      	adds	r2, #1
 800c906:	6002      	str	r2, [r0, #0]
 800c908:	2f02      	cmp	r7, #2
 800c90a:	f104 0314 	add.w	r3, r4, #20
 800c90e:	d13d      	bne.n	800c98c <__gethex+0x438>
 800c910:	f8d8 2000 	ldr.w	r2, [r8]
 800c914:	3a01      	subs	r2, #1
 800c916:	42b2      	cmp	r2, r6
 800c918:	d10a      	bne.n	800c930 <__gethex+0x3dc>
 800c91a:	1171      	asrs	r1, r6, #5
 800c91c:	2201      	movs	r2, #1
 800c91e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c922:	f006 061f 	and.w	r6, r6, #31
 800c926:	fa02 f606 	lsl.w	r6, r2, r6
 800c92a:	421e      	tst	r6, r3
 800c92c:	bf18      	it	ne
 800c92e:	4617      	movne	r7, r2
 800c930:	f047 0720 	orr.w	r7, r7, #32
 800c934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c936:	601c      	str	r4, [r3, #0]
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	601d      	str	r5, [r3, #0]
 800c93c:	e69c      	b.n	800c678 <__gethex+0x124>
 800c93e:	4299      	cmp	r1, r3
 800c940:	f843 cc04 	str.w	ip, [r3, #-4]
 800c944:	d8d8      	bhi.n	800c8f8 <__gethex+0x3a4>
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	459b      	cmp	fp, r3
 800c94a:	db17      	blt.n	800c97c <__gethex+0x428>
 800c94c:	6861      	ldr	r1, [r4, #4]
 800c94e:	9802      	ldr	r0, [sp, #8]
 800c950:	3101      	adds	r1, #1
 800c952:	f000 f985 	bl	800cc60 <_Balloc>
 800c956:	4681      	mov	r9, r0
 800c958:	b918      	cbnz	r0, 800c962 <__gethex+0x40e>
 800c95a:	4b1a      	ldr	r3, [pc, #104]	; (800c9c4 <__gethex+0x470>)
 800c95c:	4602      	mov	r2, r0
 800c95e:	2184      	movs	r1, #132	; 0x84
 800c960:	e6ad      	b.n	800c6be <__gethex+0x16a>
 800c962:	6922      	ldr	r2, [r4, #16]
 800c964:	3202      	adds	r2, #2
 800c966:	f104 010c 	add.w	r1, r4, #12
 800c96a:	0092      	lsls	r2, r2, #2
 800c96c:	300c      	adds	r0, #12
 800c96e:	f7fc fd0b 	bl	8009388 <memcpy>
 800c972:	4621      	mov	r1, r4
 800c974:	9802      	ldr	r0, [sp, #8]
 800c976:	f000 f9b3 	bl	800cce0 <_Bfree>
 800c97a:	464c      	mov	r4, r9
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c984:	6122      	str	r2, [r4, #16]
 800c986:	2201      	movs	r2, #1
 800c988:	615a      	str	r2, [r3, #20]
 800c98a:	e7bd      	b.n	800c908 <__gethex+0x3b4>
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	455a      	cmp	r2, fp
 800c990:	dd0b      	ble.n	800c9aa <__gethex+0x456>
 800c992:	2101      	movs	r1, #1
 800c994:	4620      	mov	r0, r4
 800c996:	f7ff fd76 	bl	800c486 <rshift>
 800c99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c99e:	3501      	adds	r5, #1
 800c9a0:	42ab      	cmp	r3, r5
 800c9a2:	f6ff aed6 	blt.w	800c752 <__gethex+0x1fe>
 800c9a6:	2701      	movs	r7, #1
 800c9a8:	e7c2      	b.n	800c930 <__gethex+0x3dc>
 800c9aa:	f016 061f 	ands.w	r6, r6, #31
 800c9ae:	d0fa      	beq.n	800c9a6 <__gethex+0x452>
 800c9b0:	449a      	add	sl, r3
 800c9b2:	f1c6 0620 	rsb	r6, r6, #32
 800c9b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c9ba:	f000 fa47 	bl	800ce4c <__hi0bits>
 800c9be:	42b0      	cmp	r0, r6
 800c9c0:	dbe7      	blt.n	800c992 <__gethex+0x43e>
 800c9c2:	e7f0      	b.n	800c9a6 <__gethex+0x452>
 800c9c4:	0800ee64 	.word	0x0800ee64

0800c9c8 <L_shift>:
 800c9c8:	f1c2 0208 	rsb	r2, r2, #8
 800c9cc:	0092      	lsls	r2, r2, #2
 800c9ce:	b570      	push	{r4, r5, r6, lr}
 800c9d0:	f1c2 0620 	rsb	r6, r2, #32
 800c9d4:	6843      	ldr	r3, [r0, #4]
 800c9d6:	6804      	ldr	r4, [r0, #0]
 800c9d8:	fa03 f506 	lsl.w	r5, r3, r6
 800c9dc:	432c      	orrs	r4, r5
 800c9de:	40d3      	lsrs	r3, r2
 800c9e0:	6004      	str	r4, [r0, #0]
 800c9e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9e6:	4288      	cmp	r0, r1
 800c9e8:	d3f4      	bcc.n	800c9d4 <L_shift+0xc>
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}

0800c9ec <__match>:
 800c9ec:	b530      	push	{r4, r5, lr}
 800c9ee:	6803      	ldr	r3, [r0, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f6:	b914      	cbnz	r4, 800c9fe <__match+0x12>
 800c9f8:	6003      	str	r3, [r0, #0]
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	bd30      	pop	{r4, r5, pc}
 800c9fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca06:	2d19      	cmp	r5, #25
 800ca08:	bf98      	it	ls
 800ca0a:	3220      	addls	r2, #32
 800ca0c:	42a2      	cmp	r2, r4
 800ca0e:	d0f0      	beq.n	800c9f2 <__match+0x6>
 800ca10:	2000      	movs	r0, #0
 800ca12:	e7f3      	b.n	800c9fc <__match+0x10>

0800ca14 <__hexnan>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	680b      	ldr	r3, [r1, #0]
 800ca1a:	6801      	ldr	r1, [r0, #0]
 800ca1c:	115e      	asrs	r6, r3, #5
 800ca1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca22:	f013 031f 	ands.w	r3, r3, #31
 800ca26:	b087      	sub	sp, #28
 800ca28:	bf18      	it	ne
 800ca2a:	3604      	addne	r6, #4
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	1f37      	subs	r7, r6, #4
 800ca30:	4682      	mov	sl, r0
 800ca32:	4690      	mov	r8, r2
 800ca34:	9301      	str	r3, [sp, #4]
 800ca36:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca3a:	46b9      	mov	r9, r7
 800ca3c:	463c      	mov	r4, r7
 800ca3e:	9502      	str	r5, [sp, #8]
 800ca40:	46ab      	mov	fp, r5
 800ca42:	784a      	ldrb	r2, [r1, #1]
 800ca44:	1c4b      	adds	r3, r1, #1
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	b342      	cbz	r2, 800ca9c <__hexnan+0x88>
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	9105      	str	r1, [sp, #20]
 800ca4e:	9204      	str	r2, [sp, #16]
 800ca50:	f7ff fd6b 	bl	800c52a <__hexdig_fun>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d14f      	bne.n	800caf8 <__hexnan+0xe4>
 800ca58:	9a04      	ldr	r2, [sp, #16]
 800ca5a:	9905      	ldr	r1, [sp, #20]
 800ca5c:	2a20      	cmp	r2, #32
 800ca5e:	d818      	bhi.n	800ca92 <__hexnan+0x7e>
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	459b      	cmp	fp, r3
 800ca64:	dd13      	ble.n	800ca8e <__hexnan+0x7a>
 800ca66:	454c      	cmp	r4, r9
 800ca68:	d206      	bcs.n	800ca78 <__hexnan+0x64>
 800ca6a:	2d07      	cmp	r5, #7
 800ca6c:	dc04      	bgt.n	800ca78 <__hexnan+0x64>
 800ca6e:	462a      	mov	r2, r5
 800ca70:	4649      	mov	r1, r9
 800ca72:	4620      	mov	r0, r4
 800ca74:	f7ff ffa8 	bl	800c9c8 <L_shift>
 800ca78:	4544      	cmp	r4, r8
 800ca7a:	d950      	bls.n	800cb1e <__hexnan+0x10a>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f1a4 0904 	sub.w	r9, r4, #4
 800ca82:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca86:	f8cd b008 	str.w	fp, [sp, #8]
 800ca8a:	464c      	mov	r4, r9
 800ca8c:	461d      	mov	r5, r3
 800ca8e:	9903      	ldr	r1, [sp, #12]
 800ca90:	e7d7      	b.n	800ca42 <__hexnan+0x2e>
 800ca92:	2a29      	cmp	r2, #41	; 0x29
 800ca94:	d156      	bne.n	800cb44 <__hexnan+0x130>
 800ca96:	3102      	adds	r1, #2
 800ca98:	f8ca 1000 	str.w	r1, [sl]
 800ca9c:	f1bb 0f00 	cmp.w	fp, #0
 800caa0:	d050      	beq.n	800cb44 <__hexnan+0x130>
 800caa2:	454c      	cmp	r4, r9
 800caa4:	d206      	bcs.n	800cab4 <__hexnan+0xa0>
 800caa6:	2d07      	cmp	r5, #7
 800caa8:	dc04      	bgt.n	800cab4 <__hexnan+0xa0>
 800caaa:	462a      	mov	r2, r5
 800caac:	4649      	mov	r1, r9
 800caae:	4620      	mov	r0, r4
 800cab0:	f7ff ff8a 	bl	800c9c8 <L_shift>
 800cab4:	4544      	cmp	r4, r8
 800cab6:	d934      	bls.n	800cb22 <__hexnan+0x10e>
 800cab8:	f1a8 0204 	sub.w	r2, r8, #4
 800cabc:	4623      	mov	r3, r4
 800cabe:	f853 1b04 	ldr.w	r1, [r3], #4
 800cac2:	f842 1f04 	str.w	r1, [r2, #4]!
 800cac6:	429f      	cmp	r7, r3
 800cac8:	d2f9      	bcs.n	800cabe <__hexnan+0xaa>
 800caca:	1b3b      	subs	r3, r7, r4
 800cacc:	f023 0303 	bic.w	r3, r3, #3
 800cad0:	3304      	adds	r3, #4
 800cad2:	3401      	adds	r4, #1
 800cad4:	3e03      	subs	r6, #3
 800cad6:	42b4      	cmp	r4, r6
 800cad8:	bf88      	it	hi
 800cada:	2304      	movhi	r3, #4
 800cadc:	4443      	add	r3, r8
 800cade:	2200      	movs	r2, #0
 800cae0:	f843 2b04 	str.w	r2, [r3], #4
 800cae4:	429f      	cmp	r7, r3
 800cae6:	d2fb      	bcs.n	800cae0 <__hexnan+0xcc>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	b91b      	cbnz	r3, 800caf4 <__hexnan+0xe0>
 800caec:	4547      	cmp	r7, r8
 800caee:	d127      	bne.n	800cb40 <__hexnan+0x12c>
 800caf0:	2301      	movs	r3, #1
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	2005      	movs	r0, #5
 800caf6:	e026      	b.n	800cb46 <__hexnan+0x132>
 800caf8:	3501      	adds	r5, #1
 800cafa:	2d08      	cmp	r5, #8
 800cafc:	f10b 0b01 	add.w	fp, fp, #1
 800cb00:	dd06      	ble.n	800cb10 <__hexnan+0xfc>
 800cb02:	4544      	cmp	r4, r8
 800cb04:	d9c3      	bls.n	800ca8e <__hexnan+0x7a>
 800cb06:	2300      	movs	r3, #0
 800cb08:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb0c:	2501      	movs	r5, #1
 800cb0e:	3c04      	subs	r4, #4
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	f000 000f 	and.w	r0, r0, #15
 800cb16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	e7b7      	b.n	800ca8e <__hexnan+0x7a>
 800cb1e:	2508      	movs	r5, #8
 800cb20:	e7b5      	b.n	800ca8e <__hexnan+0x7a>
 800cb22:	9b01      	ldr	r3, [sp, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0df      	beq.n	800cae8 <__hexnan+0xd4>
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2c:	f1c3 0320 	rsb	r3, r3, #32
 800cb30:	fa22 f303 	lsr.w	r3, r2, r3
 800cb34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb38:	401a      	ands	r2, r3
 800cb3a:	f846 2c04 	str.w	r2, [r6, #-4]
 800cb3e:	e7d3      	b.n	800cae8 <__hexnan+0xd4>
 800cb40:	3f04      	subs	r7, #4
 800cb42:	e7d1      	b.n	800cae8 <__hexnan+0xd4>
 800cb44:	2004      	movs	r0, #4
 800cb46:	b007      	add	sp, #28
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb4c <_localeconv_r>:
 800cb4c:	4800      	ldr	r0, [pc, #0]	; (800cb50 <_localeconv_r+0x4>)
 800cb4e:	4770      	bx	lr
 800cb50:	20000168 	.word	0x20000168

0800cb54 <__retarget_lock_init_recursive>:
 800cb54:	4770      	bx	lr

0800cb56 <__retarget_lock_acquire_recursive>:
 800cb56:	4770      	bx	lr

0800cb58 <__retarget_lock_release_recursive>:
 800cb58:	4770      	bx	lr

0800cb5a <__swhatbuf_r>:
 800cb5a:	b570      	push	{r4, r5, r6, lr}
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb62:	2900      	cmp	r1, #0
 800cb64:	b096      	sub	sp, #88	; 0x58
 800cb66:	4614      	mov	r4, r2
 800cb68:	461d      	mov	r5, r3
 800cb6a:	da07      	bge.n	800cb7c <__swhatbuf_r+0x22>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	602b      	str	r3, [r5, #0]
 800cb70:	89b3      	ldrh	r3, [r6, #12]
 800cb72:	061a      	lsls	r2, r3, #24
 800cb74:	d410      	bmi.n	800cb98 <__swhatbuf_r+0x3e>
 800cb76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb7a:	e00e      	b.n	800cb9a <__swhatbuf_r+0x40>
 800cb7c:	466a      	mov	r2, sp
 800cb7e:	f001 f8d5 	bl	800dd2c <_fstat_r>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	dbf2      	blt.n	800cb6c <__swhatbuf_r+0x12>
 800cb86:	9a01      	ldr	r2, [sp, #4]
 800cb88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb90:	425a      	negs	r2, r3
 800cb92:	415a      	adcs	r2, r3
 800cb94:	602a      	str	r2, [r5, #0]
 800cb96:	e7ee      	b.n	800cb76 <__swhatbuf_r+0x1c>
 800cb98:	2340      	movs	r3, #64	; 0x40
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	b016      	add	sp, #88	; 0x58
 800cba0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cba4 <__smakebuf_r>:
 800cba4:	898b      	ldrh	r3, [r1, #12]
 800cba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cba8:	079d      	lsls	r5, r3, #30
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	d507      	bpl.n	800cbc0 <__smakebuf_r+0x1c>
 800cbb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	2301      	movs	r3, #1
 800cbba:	6163      	str	r3, [r4, #20]
 800cbbc:	b002      	add	sp, #8
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	ab01      	add	r3, sp, #4
 800cbc2:	466a      	mov	r2, sp
 800cbc4:	f7ff ffc9 	bl	800cb5a <__swhatbuf_r>
 800cbc8:	9900      	ldr	r1, [sp, #0]
 800cbca:	4605      	mov	r5, r0
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7fc fc3f 	bl	8009450 <_malloc_r>
 800cbd2:	b948      	cbnz	r0, 800cbe8 <__smakebuf_r+0x44>
 800cbd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd8:	059a      	lsls	r2, r3, #22
 800cbda:	d4ef      	bmi.n	800cbbc <__smakebuf_r+0x18>
 800cbdc:	f023 0303 	bic.w	r3, r3, #3
 800cbe0:	f043 0302 	orr.w	r3, r3, #2
 800cbe4:	81a3      	strh	r3, [r4, #12]
 800cbe6:	e7e3      	b.n	800cbb0 <__smakebuf_r+0xc>
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <__smakebuf_r+0x7c>)
 800cbea:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	6020      	str	r0, [r4, #0]
 800cbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	6163      	str	r3, [r4, #20]
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	6120      	str	r0, [r4, #16]
 800cbfe:	b15b      	cbz	r3, 800cc18 <__smakebuf_r+0x74>
 800cc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc04:	4630      	mov	r0, r6
 800cc06:	f001 f8a3 	bl	800dd50 <_isatty_r>
 800cc0a:	b128      	cbz	r0, 800cc18 <__smakebuf_r+0x74>
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	f023 0303 	bic.w	r3, r3, #3
 800cc12:	f043 0301 	orr.w	r3, r3, #1
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	89a0      	ldrh	r0, [r4, #12]
 800cc1a:	4305      	orrs	r5, r0
 800cc1c:	81a5      	strh	r5, [r4, #12]
 800cc1e:	e7cd      	b.n	800cbbc <__smakebuf_r+0x18>
 800cc20:	0800c2e5 	.word	0x0800c2e5

0800cc24 <__ascii_mbtowc>:
 800cc24:	b082      	sub	sp, #8
 800cc26:	b901      	cbnz	r1, 800cc2a <__ascii_mbtowc+0x6>
 800cc28:	a901      	add	r1, sp, #4
 800cc2a:	b142      	cbz	r2, 800cc3e <__ascii_mbtowc+0x1a>
 800cc2c:	b14b      	cbz	r3, 800cc42 <__ascii_mbtowc+0x1e>
 800cc2e:	7813      	ldrb	r3, [r2, #0]
 800cc30:	600b      	str	r3, [r1, #0]
 800cc32:	7812      	ldrb	r2, [r2, #0]
 800cc34:	1e10      	subs	r0, r2, #0
 800cc36:	bf18      	it	ne
 800cc38:	2001      	movne	r0, #1
 800cc3a:	b002      	add	sp, #8
 800cc3c:	4770      	bx	lr
 800cc3e:	4610      	mov	r0, r2
 800cc40:	e7fb      	b.n	800cc3a <__ascii_mbtowc+0x16>
 800cc42:	f06f 0001 	mvn.w	r0, #1
 800cc46:	e7f8      	b.n	800cc3a <__ascii_mbtowc+0x16>

0800cc48 <__malloc_lock>:
 800cc48:	4801      	ldr	r0, [pc, #4]	; (800cc50 <__malloc_lock+0x8>)
 800cc4a:	f7ff bf84 	b.w	800cb56 <__retarget_lock_acquire_recursive>
 800cc4e:	bf00      	nop
 800cc50:	200005f4 	.word	0x200005f4

0800cc54 <__malloc_unlock>:
 800cc54:	4801      	ldr	r0, [pc, #4]	; (800cc5c <__malloc_unlock+0x8>)
 800cc56:	f7ff bf7f 	b.w	800cb58 <__retarget_lock_release_recursive>
 800cc5a:	bf00      	nop
 800cc5c:	200005f4 	.word	0x200005f4

0800cc60 <_Balloc>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	b976      	cbnz	r6, 800cc88 <_Balloc+0x28>
 800cc6a:	2010      	movs	r0, #16
 800cc6c:	f7fc fb7c 	bl	8009368 <malloc>
 800cc70:	4602      	mov	r2, r0
 800cc72:	6260      	str	r0, [r4, #36]	; 0x24
 800cc74:	b920      	cbnz	r0, 800cc80 <_Balloc+0x20>
 800cc76:	4b18      	ldr	r3, [pc, #96]	; (800ccd8 <_Balloc+0x78>)
 800cc78:	4818      	ldr	r0, [pc, #96]	; (800ccdc <_Balloc+0x7c>)
 800cc7a:	2166      	movs	r1, #102	; 0x66
 800cc7c:	f001 f816 	bl	800dcac <__assert_func>
 800cc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc84:	6006      	str	r6, [r0, #0]
 800cc86:	60c6      	str	r6, [r0, #12]
 800cc88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc8a:	68f3      	ldr	r3, [r6, #12]
 800cc8c:	b183      	cbz	r3, 800ccb0 <_Balloc+0x50>
 800cc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc96:	b9b8      	cbnz	r0, 800ccc8 <_Balloc+0x68>
 800cc98:	2101      	movs	r1, #1
 800cc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc9e:	1d72      	adds	r2, r6, #5
 800cca0:	0092      	lsls	r2, r2, #2
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fc90 	bl	800d5c8 <_calloc_r>
 800cca8:	b160      	cbz	r0, 800ccc4 <_Balloc+0x64>
 800ccaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccae:	e00e      	b.n	800ccce <_Balloc+0x6e>
 800ccb0:	2221      	movs	r2, #33	; 0x21
 800ccb2:	2104      	movs	r1, #4
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fc87 	bl	800d5c8 <_calloc_r>
 800ccba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccbc:	60f0      	str	r0, [r6, #12]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e4      	bne.n	800cc8e <_Balloc+0x2e>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	6802      	ldr	r2, [r0, #0]
 800ccca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccd4:	e7f7      	b.n	800ccc6 <_Balloc+0x66>
 800ccd6:	bf00      	nop
 800ccd8:	0800edee 	.word	0x0800edee
 800ccdc:	0800ef58 	.word	0x0800ef58

0800cce0 <_Bfree>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cce4:	4605      	mov	r5, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	b976      	cbnz	r6, 800cd08 <_Bfree+0x28>
 800ccea:	2010      	movs	r0, #16
 800ccec:	f7fc fb3c 	bl	8009368 <malloc>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6268      	str	r0, [r5, #36]	; 0x24
 800ccf4:	b920      	cbnz	r0, 800cd00 <_Bfree+0x20>
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <_Bfree+0x3c>)
 800ccf8:	4809      	ldr	r0, [pc, #36]	; (800cd20 <_Bfree+0x40>)
 800ccfa:	218a      	movs	r1, #138	; 0x8a
 800ccfc:	f000 ffd6 	bl	800dcac <__assert_func>
 800cd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd04:	6006      	str	r6, [r0, #0]
 800cd06:	60c6      	str	r6, [r0, #12]
 800cd08:	b13c      	cbz	r4, 800cd1a <_Bfree+0x3a>
 800cd0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd0c:	6862      	ldr	r2, [r4, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd14:	6021      	str	r1, [r4, #0]
 800cd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	0800edee 	.word	0x0800edee
 800cd20:	0800ef58 	.word	0x0800ef58

0800cd24 <__multadd>:
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	690e      	ldr	r6, [r1, #16]
 800cd2a:	4607      	mov	r7, r0
 800cd2c:	4698      	mov	r8, r3
 800cd2e:	460c      	mov	r4, r1
 800cd30:	f101 0014 	add.w	r0, r1, #20
 800cd34:	2300      	movs	r3, #0
 800cd36:	6805      	ldr	r5, [r0, #0]
 800cd38:	b2a9      	uxth	r1, r5
 800cd3a:	fb02 8101 	mla	r1, r2, r1, r8
 800cd3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cd42:	0c2d      	lsrs	r5, r5, #16
 800cd44:	fb02 c505 	mla	r5, r2, r5, ip
 800cd48:	b289      	uxth	r1, r1
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cd50:	429e      	cmp	r6, r3
 800cd52:	f840 1b04 	str.w	r1, [r0], #4
 800cd56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cd5a:	dcec      	bgt.n	800cd36 <__multadd+0x12>
 800cd5c:	f1b8 0f00 	cmp.w	r8, #0
 800cd60:	d022      	beq.n	800cda8 <__multadd+0x84>
 800cd62:	68a3      	ldr	r3, [r4, #8]
 800cd64:	42b3      	cmp	r3, r6
 800cd66:	dc19      	bgt.n	800cd9c <__multadd+0x78>
 800cd68:	6861      	ldr	r1, [r4, #4]
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	3101      	adds	r1, #1
 800cd6e:	f7ff ff77 	bl	800cc60 <_Balloc>
 800cd72:	4605      	mov	r5, r0
 800cd74:	b928      	cbnz	r0, 800cd82 <__multadd+0x5e>
 800cd76:	4602      	mov	r2, r0
 800cd78:	4b0d      	ldr	r3, [pc, #52]	; (800cdb0 <__multadd+0x8c>)
 800cd7a:	480e      	ldr	r0, [pc, #56]	; (800cdb4 <__multadd+0x90>)
 800cd7c:	21b5      	movs	r1, #181	; 0xb5
 800cd7e:	f000 ff95 	bl	800dcac <__assert_func>
 800cd82:	6922      	ldr	r2, [r4, #16]
 800cd84:	3202      	adds	r2, #2
 800cd86:	f104 010c 	add.w	r1, r4, #12
 800cd8a:	0092      	lsls	r2, r2, #2
 800cd8c:	300c      	adds	r0, #12
 800cd8e:	f7fc fafb 	bl	8009388 <memcpy>
 800cd92:	4621      	mov	r1, r4
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff ffa3 	bl	800cce0 <_Bfree>
 800cd9a:	462c      	mov	r4, r5
 800cd9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cda0:	3601      	adds	r6, #1
 800cda2:	f8c3 8014 	str.w	r8, [r3, #20]
 800cda6:	6126      	str	r6, [r4, #16]
 800cda8:	4620      	mov	r0, r4
 800cdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800ee64 	.word	0x0800ee64
 800cdb4:	0800ef58 	.word	0x0800ef58

0800cdb8 <__s2b>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	4615      	mov	r5, r2
 800cdc0:	461f      	mov	r7, r3
 800cdc2:	2209      	movs	r2, #9
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2201      	movs	r2, #1
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	db09      	blt.n	800cde8 <__s2b+0x30>
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7ff ff43 	bl	800cc60 <_Balloc>
 800cdda:	b940      	cbnz	r0, 800cdee <__s2b+0x36>
 800cddc:	4602      	mov	r2, r0
 800cdde:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <__s2b+0x8c>)
 800cde0:	4819      	ldr	r0, [pc, #100]	; (800ce48 <__s2b+0x90>)
 800cde2:	21ce      	movs	r1, #206	; 0xce
 800cde4:	f000 ff62 	bl	800dcac <__assert_func>
 800cde8:	0052      	lsls	r2, r2, #1
 800cdea:	3101      	adds	r1, #1
 800cdec:	e7f0      	b.n	800cdd0 <__s2b+0x18>
 800cdee:	9b08      	ldr	r3, [sp, #32]
 800cdf0:	6143      	str	r3, [r0, #20]
 800cdf2:	2d09      	cmp	r5, #9
 800cdf4:	f04f 0301 	mov.w	r3, #1
 800cdf8:	6103      	str	r3, [r0, #16]
 800cdfa:	dd16      	ble.n	800ce2a <__s2b+0x72>
 800cdfc:	f104 0909 	add.w	r9, r4, #9
 800ce00:	46c8      	mov	r8, r9
 800ce02:	442c      	add	r4, r5
 800ce04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce08:	4601      	mov	r1, r0
 800ce0a:	3b30      	subs	r3, #48	; 0x30
 800ce0c:	220a      	movs	r2, #10
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7ff ff88 	bl	800cd24 <__multadd>
 800ce14:	45a0      	cmp	r8, r4
 800ce16:	d1f5      	bne.n	800ce04 <__s2b+0x4c>
 800ce18:	f1a5 0408 	sub.w	r4, r5, #8
 800ce1c:	444c      	add	r4, r9
 800ce1e:	1b2d      	subs	r5, r5, r4
 800ce20:	1963      	adds	r3, r4, r5
 800ce22:	42bb      	cmp	r3, r7
 800ce24:	db04      	blt.n	800ce30 <__s2b+0x78>
 800ce26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2a:	340a      	adds	r4, #10
 800ce2c:	2509      	movs	r5, #9
 800ce2e:	e7f6      	b.n	800ce1e <__s2b+0x66>
 800ce30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce34:	4601      	mov	r1, r0
 800ce36:	3b30      	subs	r3, #48	; 0x30
 800ce38:	220a      	movs	r2, #10
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7ff ff72 	bl	800cd24 <__multadd>
 800ce40:	e7ee      	b.n	800ce20 <__s2b+0x68>
 800ce42:	bf00      	nop
 800ce44:	0800ee64 	.word	0x0800ee64
 800ce48:	0800ef58 	.word	0x0800ef58

0800ce4c <__hi0bits>:
 800ce4c:	0c02      	lsrs	r2, r0, #16
 800ce4e:	0412      	lsls	r2, r2, #16
 800ce50:	4603      	mov	r3, r0
 800ce52:	b9ca      	cbnz	r2, 800ce88 <__hi0bits+0x3c>
 800ce54:	0403      	lsls	r3, r0, #16
 800ce56:	2010      	movs	r0, #16
 800ce58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce5c:	bf04      	itt	eq
 800ce5e:	021b      	lsleq	r3, r3, #8
 800ce60:	3008      	addeq	r0, #8
 800ce62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce66:	bf04      	itt	eq
 800ce68:	011b      	lsleq	r3, r3, #4
 800ce6a:	3004      	addeq	r0, #4
 800ce6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce70:	bf04      	itt	eq
 800ce72:	009b      	lsleq	r3, r3, #2
 800ce74:	3002      	addeq	r0, #2
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	db05      	blt.n	800ce86 <__hi0bits+0x3a>
 800ce7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ce7e:	f100 0001 	add.w	r0, r0, #1
 800ce82:	bf08      	it	eq
 800ce84:	2020      	moveq	r0, #32
 800ce86:	4770      	bx	lr
 800ce88:	2000      	movs	r0, #0
 800ce8a:	e7e5      	b.n	800ce58 <__hi0bits+0xc>

0800ce8c <__lo0bits>:
 800ce8c:	6803      	ldr	r3, [r0, #0]
 800ce8e:	4602      	mov	r2, r0
 800ce90:	f013 0007 	ands.w	r0, r3, #7
 800ce94:	d00b      	beq.n	800ceae <__lo0bits+0x22>
 800ce96:	07d9      	lsls	r1, r3, #31
 800ce98:	d422      	bmi.n	800cee0 <__lo0bits+0x54>
 800ce9a:	0798      	lsls	r0, r3, #30
 800ce9c:	bf49      	itett	mi
 800ce9e:	085b      	lsrmi	r3, r3, #1
 800cea0:	089b      	lsrpl	r3, r3, #2
 800cea2:	2001      	movmi	r0, #1
 800cea4:	6013      	strmi	r3, [r2, #0]
 800cea6:	bf5c      	itt	pl
 800cea8:	6013      	strpl	r3, [r2, #0]
 800ceaa:	2002      	movpl	r0, #2
 800ceac:	4770      	bx	lr
 800ceae:	b299      	uxth	r1, r3
 800ceb0:	b909      	cbnz	r1, 800ceb6 <__lo0bits+0x2a>
 800ceb2:	0c1b      	lsrs	r3, r3, #16
 800ceb4:	2010      	movs	r0, #16
 800ceb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ceba:	bf04      	itt	eq
 800cebc:	0a1b      	lsreq	r3, r3, #8
 800cebe:	3008      	addeq	r0, #8
 800cec0:	0719      	lsls	r1, r3, #28
 800cec2:	bf04      	itt	eq
 800cec4:	091b      	lsreq	r3, r3, #4
 800cec6:	3004      	addeq	r0, #4
 800cec8:	0799      	lsls	r1, r3, #30
 800ceca:	bf04      	itt	eq
 800cecc:	089b      	lsreq	r3, r3, #2
 800cece:	3002      	addeq	r0, #2
 800ced0:	07d9      	lsls	r1, r3, #31
 800ced2:	d403      	bmi.n	800cedc <__lo0bits+0x50>
 800ced4:	085b      	lsrs	r3, r3, #1
 800ced6:	f100 0001 	add.w	r0, r0, #1
 800ceda:	d003      	beq.n	800cee4 <__lo0bits+0x58>
 800cedc:	6013      	str	r3, [r2, #0]
 800cede:	4770      	bx	lr
 800cee0:	2000      	movs	r0, #0
 800cee2:	4770      	bx	lr
 800cee4:	2020      	movs	r0, #32
 800cee6:	4770      	bx	lr

0800cee8 <__i2b>:
 800cee8:	b510      	push	{r4, lr}
 800ceea:	460c      	mov	r4, r1
 800ceec:	2101      	movs	r1, #1
 800ceee:	f7ff feb7 	bl	800cc60 <_Balloc>
 800cef2:	4602      	mov	r2, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <__i2b+0x1a>
 800cef6:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <__i2b+0x24>)
 800cef8:	4805      	ldr	r0, [pc, #20]	; (800cf10 <__i2b+0x28>)
 800cefa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cefe:	f000 fed5 	bl	800dcac <__assert_func>
 800cf02:	2301      	movs	r3, #1
 800cf04:	6144      	str	r4, [r0, #20]
 800cf06:	6103      	str	r3, [r0, #16]
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	bf00      	nop
 800cf0c:	0800ee64 	.word	0x0800ee64
 800cf10:	0800ef58 	.word	0x0800ef58

0800cf14 <__multiply>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	4614      	mov	r4, r2
 800cf1a:	690a      	ldr	r2, [r1, #16]
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	bfb8      	it	lt
 800cf22:	460b      	movlt	r3, r1
 800cf24:	460d      	mov	r5, r1
 800cf26:	bfbc      	itt	lt
 800cf28:	4625      	movlt	r5, r4
 800cf2a:	461c      	movlt	r4, r3
 800cf2c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cf30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf34:	68ab      	ldr	r3, [r5, #8]
 800cf36:	6869      	ldr	r1, [r5, #4]
 800cf38:	eb0a 0709 	add.w	r7, sl, r9
 800cf3c:	42bb      	cmp	r3, r7
 800cf3e:	b085      	sub	sp, #20
 800cf40:	bfb8      	it	lt
 800cf42:	3101      	addlt	r1, #1
 800cf44:	f7ff fe8c 	bl	800cc60 <_Balloc>
 800cf48:	b930      	cbnz	r0, 800cf58 <__multiply+0x44>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4b42      	ldr	r3, [pc, #264]	; (800d058 <__multiply+0x144>)
 800cf4e:	4843      	ldr	r0, [pc, #268]	; (800d05c <__multiply+0x148>)
 800cf50:	f240 115d 	movw	r1, #349	; 0x15d
 800cf54:	f000 feaa 	bl	800dcac <__assert_func>
 800cf58:	f100 0614 	add.w	r6, r0, #20
 800cf5c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf60:	4633      	mov	r3, r6
 800cf62:	2200      	movs	r2, #0
 800cf64:	4543      	cmp	r3, r8
 800cf66:	d31e      	bcc.n	800cfa6 <__multiply+0x92>
 800cf68:	f105 0c14 	add.w	ip, r5, #20
 800cf6c:	f104 0314 	add.w	r3, r4, #20
 800cf70:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf74:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cf78:	9202      	str	r2, [sp, #8]
 800cf7a:	ebac 0205 	sub.w	r2, ip, r5
 800cf7e:	3a15      	subs	r2, #21
 800cf80:	f022 0203 	bic.w	r2, r2, #3
 800cf84:	3204      	adds	r2, #4
 800cf86:	f105 0115 	add.w	r1, r5, #21
 800cf8a:	458c      	cmp	ip, r1
 800cf8c:	bf38      	it	cc
 800cf8e:	2204      	movcc	r2, #4
 800cf90:	9201      	str	r2, [sp, #4]
 800cf92:	9a02      	ldr	r2, [sp, #8]
 800cf94:	9303      	str	r3, [sp, #12]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d808      	bhi.n	800cfac <__multiply+0x98>
 800cf9a:	2f00      	cmp	r7, #0
 800cf9c:	dc55      	bgt.n	800d04a <__multiply+0x136>
 800cf9e:	6107      	str	r7, [r0, #16]
 800cfa0:	b005      	add	sp, #20
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa6:	f843 2b04 	str.w	r2, [r3], #4
 800cfaa:	e7db      	b.n	800cf64 <__multiply+0x50>
 800cfac:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfb0:	f1ba 0f00 	cmp.w	sl, #0
 800cfb4:	d020      	beq.n	800cff8 <__multiply+0xe4>
 800cfb6:	f105 0e14 	add.w	lr, r5, #20
 800cfba:	46b1      	mov	r9, r6
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cfc2:	f8d9 b000 	ldr.w	fp, [r9]
 800cfc6:	b2a1      	uxth	r1, r4
 800cfc8:	fa1f fb8b 	uxth.w	fp, fp
 800cfcc:	fb0a b101 	mla	r1, sl, r1, fp
 800cfd0:	4411      	add	r1, r2
 800cfd2:	f8d9 2000 	ldr.w	r2, [r9]
 800cfd6:	0c24      	lsrs	r4, r4, #16
 800cfd8:	0c12      	lsrs	r2, r2, #16
 800cfda:	fb0a 2404 	mla	r4, sl, r4, r2
 800cfde:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cfe2:	b289      	uxth	r1, r1
 800cfe4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cfe8:	45f4      	cmp	ip, lr
 800cfea:	f849 1b04 	str.w	r1, [r9], #4
 800cfee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cff2:	d8e4      	bhi.n	800cfbe <__multiply+0xaa>
 800cff4:	9901      	ldr	r1, [sp, #4]
 800cff6:	5072      	str	r2, [r6, r1]
 800cff8:	9a03      	ldr	r2, [sp, #12]
 800cffa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cffe:	3304      	adds	r3, #4
 800d000:	f1b9 0f00 	cmp.w	r9, #0
 800d004:	d01f      	beq.n	800d046 <__multiply+0x132>
 800d006:	6834      	ldr	r4, [r6, #0]
 800d008:	f105 0114 	add.w	r1, r5, #20
 800d00c:	46b6      	mov	lr, r6
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	880a      	ldrh	r2, [r1, #0]
 800d014:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d018:	fb09 b202 	mla	r2, r9, r2, fp
 800d01c:	4492      	add	sl, r2
 800d01e:	b2a4      	uxth	r4, r4
 800d020:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d024:	f84e 4b04 	str.w	r4, [lr], #4
 800d028:	f851 4b04 	ldr.w	r4, [r1], #4
 800d02c:	f8be 2000 	ldrh.w	r2, [lr]
 800d030:	0c24      	lsrs	r4, r4, #16
 800d032:	fb09 2404 	mla	r4, r9, r4, r2
 800d036:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d03a:	458c      	cmp	ip, r1
 800d03c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d040:	d8e7      	bhi.n	800d012 <__multiply+0xfe>
 800d042:	9a01      	ldr	r2, [sp, #4]
 800d044:	50b4      	str	r4, [r6, r2]
 800d046:	3604      	adds	r6, #4
 800d048:	e7a3      	b.n	800cf92 <__multiply+0x7e>
 800d04a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1a5      	bne.n	800cf9e <__multiply+0x8a>
 800d052:	3f01      	subs	r7, #1
 800d054:	e7a1      	b.n	800cf9a <__multiply+0x86>
 800d056:	bf00      	nop
 800d058:	0800ee64 	.word	0x0800ee64
 800d05c:	0800ef58 	.word	0x0800ef58

0800d060 <__pow5mult>:
 800d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d064:	4615      	mov	r5, r2
 800d066:	f012 0203 	ands.w	r2, r2, #3
 800d06a:	4606      	mov	r6, r0
 800d06c:	460f      	mov	r7, r1
 800d06e:	d007      	beq.n	800d080 <__pow5mult+0x20>
 800d070:	4c25      	ldr	r4, [pc, #148]	; (800d108 <__pow5mult+0xa8>)
 800d072:	3a01      	subs	r2, #1
 800d074:	2300      	movs	r3, #0
 800d076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d07a:	f7ff fe53 	bl	800cd24 <__multadd>
 800d07e:	4607      	mov	r7, r0
 800d080:	10ad      	asrs	r5, r5, #2
 800d082:	d03d      	beq.n	800d100 <__pow5mult+0xa0>
 800d084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d086:	b97c      	cbnz	r4, 800d0a8 <__pow5mult+0x48>
 800d088:	2010      	movs	r0, #16
 800d08a:	f7fc f96d 	bl	8009368 <malloc>
 800d08e:	4602      	mov	r2, r0
 800d090:	6270      	str	r0, [r6, #36]	; 0x24
 800d092:	b928      	cbnz	r0, 800d0a0 <__pow5mult+0x40>
 800d094:	4b1d      	ldr	r3, [pc, #116]	; (800d10c <__pow5mult+0xac>)
 800d096:	481e      	ldr	r0, [pc, #120]	; (800d110 <__pow5mult+0xb0>)
 800d098:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d09c:	f000 fe06 	bl	800dcac <__assert_func>
 800d0a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0a4:	6004      	str	r4, [r0, #0]
 800d0a6:	60c4      	str	r4, [r0, #12]
 800d0a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0b0:	b94c      	cbnz	r4, 800d0c6 <__pow5mult+0x66>
 800d0b2:	f240 2171 	movw	r1, #625	; 0x271
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f7ff ff16 	bl	800cee8 <__i2b>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	6003      	str	r3, [r0, #0]
 800d0c6:	f04f 0900 	mov.w	r9, #0
 800d0ca:	07eb      	lsls	r3, r5, #31
 800d0cc:	d50a      	bpl.n	800d0e4 <__pow5mult+0x84>
 800d0ce:	4639      	mov	r1, r7
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ff1e 	bl	800cf14 <__multiply>
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4680      	mov	r8, r0
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff fdff 	bl	800cce0 <_Bfree>
 800d0e2:	4647      	mov	r7, r8
 800d0e4:	106d      	asrs	r5, r5, #1
 800d0e6:	d00b      	beq.n	800d100 <__pow5mult+0xa0>
 800d0e8:	6820      	ldr	r0, [r4, #0]
 800d0ea:	b938      	cbnz	r0, 800d0fc <__pow5mult+0x9c>
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f7ff ff0f 	bl	800cf14 <__multiply>
 800d0f6:	6020      	str	r0, [r4, #0]
 800d0f8:	f8c0 9000 	str.w	r9, [r0]
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	e7e4      	b.n	800d0ca <__pow5mult+0x6a>
 800d100:	4638      	mov	r0, r7
 800d102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d106:	bf00      	nop
 800d108:	0800f0a8 	.word	0x0800f0a8
 800d10c:	0800edee 	.word	0x0800edee
 800d110:	0800ef58 	.word	0x0800ef58

0800d114 <__lshift>:
 800d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d118:	460c      	mov	r4, r1
 800d11a:	6849      	ldr	r1, [r1, #4]
 800d11c:	6923      	ldr	r3, [r4, #16]
 800d11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d122:	68a3      	ldr	r3, [r4, #8]
 800d124:	4607      	mov	r7, r0
 800d126:	4691      	mov	r9, r2
 800d128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d12c:	f108 0601 	add.w	r6, r8, #1
 800d130:	42b3      	cmp	r3, r6
 800d132:	db0b      	blt.n	800d14c <__lshift+0x38>
 800d134:	4638      	mov	r0, r7
 800d136:	f7ff fd93 	bl	800cc60 <_Balloc>
 800d13a:	4605      	mov	r5, r0
 800d13c:	b948      	cbnz	r0, 800d152 <__lshift+0x3e>
 800d13e:	4602      	mov	r2, r0
 800d140:	4b28      	ldr	r3, [pc, #160]	; (800d1e4 <__lshift+0xd0>)
 800d142:	4829      	ldr	r0, [pc, #164]	; (800d1e8 <__lshift+0xd4>)
 800d144:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d148:	f000 fdb0 	bl	800dcac <__assert_func>
 800d14c:	3101      	adds	r1, #1
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	e7ee      	b.n	800d130 <__lshift+0x1c>
 800d152:	2300      	movs	r3, #0
 800d154:	f100 0114 	add.w	r1, r0, #20
 800d158:	f100 0210 	add.w	r2, r0, #16
 800d15c:	4618      	mov	r0, r3
 800d15e:	4553      	cmp	r3, sl
 800d160:	db33      	blt.n	800d1ca <__lshift+0xb6>
 800d162:	6920      	ldr	r0, [r4, #16]
 800d164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d168:	f104 0314 	add.w	r3, r4, #20
 800d16c:	f019 091f 	ands.w	r9, r9, #31
 800d170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d178:	d02b      	beq.n	800d1d2 <__lshift+0xbe>
 800d17a:	f1c9 0e20 	rsb	lr, r9, #32
 800d17e:	468a      	mov	sl, r1
 800d180:	2200      	movs	r2, #0
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	fa00 f009 	lsl.w	r0, r0, r9
 800d188:	4302      	orrs	r2, r0
 800d18a:	f84a 2b04 	str.w	r2, [sl], #4
 800d18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d192:	459c      	cmp	ip, r3
 800d194:	fa22 f20e 	lsr.w	r2, r2, lr
 800d198:	d8f3      	bhi.n	800d182 <__lshift+0x6e>
 800d19a:	ebac 0304 	sub.w	r3, ip, r4
 800d19e:	3b15      	subs	r3, #21
 800d1a0:	f023 0303 	bic.w	r3, r3, #3
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	f104 0015 	add.w	r0, r4, #21
 800d1aa:	4584      	cmp	ip, r0
 800d1ac:	bf38      	it	cc
 800d1ae:	2304      	movcc	r3, #4
 800d1b0:	50ca      	str	r2, [r1, r3]
 800d1b2:	b10a      	cbz	r2, 800d1b8 <__lshift+0xa4>
 800d1b4:	f108 0602 	add.w	r6, r8, #2
 800d1b8:	3e01      	subs	r6, #1
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	612e      	str	r6, [r5, #16]
 800d1be:	4621      	mov	r1, r4
 800d1c0:	f7ff fd8e 	bl	800cce0 <_Bfree>
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	e7c5      	b.n	800d15e <__lshift+0x4a>
 800d1d2:	3904      	subs	r1, #4
 800d1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1dc:	459c      	cmp	ip, r3
 800d1de:	d8f9      	bhi.n	800d1d4 <__lshift+0xc0>
 800d1e0:	e7ea      	b.n	800d1b8 <__lshift+0xa4>
 800d1e2:	bf00      	nop
 800d1e4:	0800ee64 	.word	0x0800ee64
 800d1e8:	0800ef58 	.word	0x0800ef58

0800d1ec <__mcmp>:
 800d1ec:	690a      	ldr	r2, [r1, #16]
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	6900      	ldr	r0, [r0, #16]
 800d1f2:	1a80      	subs	r0, r0, r2
 800d1f4:	b530      	push	{r4, r5, lr}
 800d1f6:	d10d      	bne.n	800d214 <__mcmp+0x28>
 800d1f8:	3314      	adds	r3, #20
 800d1fa:	3114      	adds	r1, #20
 800d1fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d20c:	4295      	cmp	r5, r2
 800d20e:	d002      	beq.n	800d216 <__mcmp+0x2a>
 800d210:	d304      	bcc.n	800d21c <__mcmp+0x30>
 800d212:	2001      	movs	r0, #1
 800d214:	bd30      	pop	{r4, r5, pc}
 800d216:	42a3      	cmp	r3, r4
 800d218:	d3f4      	bcc.n	800d204 <__mcmp+0x18>
 800d21a:	e7fb      	b.n	800d214 <__mcmp+0x28>
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	e7f8      	b.n	800d214 <__mcmp+0x28>
	...

0800d224 <__mdiff>:
 800d224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	4606      	mov	r6, r0
 800d22c:	4611      	mov	r1, r2
 800d22e:	4620      	mov	r0, r4
 800d230:	4617      	mov	r7, r2
 800d232:	f7ff ffdb 	bl	800d1ec <__mcmp>
 800d236:	1e05      	subs	r5, r0, #0
 800d238:	d111      	bne.n	800d25e <__mdiff+0x3a>
 800d23a:	4629      	mov	r1, r5
 800d23c:	4630      	mov	r0, r6
 800d23e:	f7ff fd0f 	bl	800cc60 <_Balloc>
 800d242:	4602      	mov	r2, r0
 800d244:	b928      	cbnz	r0, 800d252 <__mdiff+0x2e>
 800d246:	4b3a      	ldr	r3, [pc, #232]	; (800d330 <__mdiff+0x10c>)
 800d248:	f240 2132 	movw	r1, #562	; 0x232
 800d24c:	4839      	ldr	r0, [pc, #228]	; (800d334 <__mdiff+0x110>)
 800d24e:	f000 fd2d 	bl	800dcac <__assert_func>
 800d252:	2301      	movs	r3, #1
 800d254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d258:	4610      	mov	r0, r2
 800d25a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25e:	bfa4      	itt	ge
 800d260:	463b      	movge	r3, r7
 800d262:	4627      	movge	r7, r4
 800d264:	4630      	mov	r0, r6
 800d266:	6879      	ldr	r1, [r7, #4]
 800d268:	bfa6      	itte	ge
 800d26a:	461c      	movge	r4, r3
 800d26c:	2500      	movge	r5, #0
 800d26e:	2501      	movlt	r5, #1
 800d270:	f7ff fcf6 	bl	800cc60 <_Balloc>
 800d274:	4602      	mov	r2, r0
 800d276:	b918      	cbnz	r0, 800d280 <__mdiff+0x5c>
 800d278:	4b2d      	ldr	r3, [pc, #180]	; (800d330 <__mdiff+0x10c>)
 800d27a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d27e:	e7e5      	b.n	800d24c <__mdiff+0x28>
 800d280:	693e      	ldr	r6, [r7, #16]
 800d282:	60c5      	str	r5, [r0, #12]
 800d284:	6925      	ldr	r5, [r4, #16]
 800d286:	f107 0114 	add.w	r1, r7, #20
 800d28a:	f100 0e14 	add.w	lr, r0, #20
 800d28e:	f104 0914 	add.w	r9, r4, #20
 800d292:	f107 0010 	add.w	r0, r7, #16
 800d296:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d29a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d29e:	46f2      	mov	sl, lr
 800d2a0:	2700      	movs	r7, #0
 800d2a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2a6:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d2aa:	fa1f f883 	uxth.w	r8, r3
 800d2ae:	fa17 f78b 	uxtah	r7, r7, fp
 800d2b2:	0c1b      	lsrs	r3, r3, #16
 800d2b4:	eba7 0808 	sub.w	r8, r7, r8
 800d2b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2c0:	fa1f f888 	uxth.w	r8, r8
 800d2c4:	141f      	asrs	r7, r3, #16
 800d2c6:	454d      	cmp	r5, r9
 800d2c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2cc:	f84a 3b04 	str.w	r3, [sl], #4
 800d2d0:	d8e7      	bhi.n	800d2a2 <__mdiff+0x7e>
 800d2d2:	1b2b      	subs	r3, r5, r4
 800d2d4:	3b15      	subs	r3, #21
 800d2d6:	f023 0303 	bic.w	r3, r3, #3
 800d2da:	3304      	adds	r3, #4
 800d2dc:	3415      	adds	r4, #21
 800d2de:	42a5      	cmp	r5, r4
 800d2e0:	bf38      	it	cc
 800d2e2:	2304      	movcc	r3, #4
 800d2e4:	4419      	add	r1, r3
 800d2e6:	4473      	add	r3, lr
 800d2e8:	469e      	mov	lr, r3
 800d2ea:	460d      	mov	r5, r1
 800d2ec:	4565      	cmp	r5, ip
 800d2ee:	d30e      	bcc.n	800d30e <__mdiff+0xea>
 800d2f0:	f10c 0003 	add.w	r0, ip, #3
 800d2f4:	1a40      	subs	r0, r0, r1
 800d2f6:	f020 0003 	bic.w	r0, r0, #3
 800d2fa:	3903      	subs	r1, #3
 800d2fc:	458c      	cmp	ip, r1
 800d2fe:	bf38      	it	cc
 800d300:	2000      	movcc	r0, #0
 800d302:	4418      	add	r0, r3
 800d304:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d308:	b17b      	cbz	r3, 800d32a <__mdiff+0x106>
 800d30a:	6116      	str	r6, [r2, #16]
 800d30c:	e7a4      	b.n	800d258 <__mdiff+0x34>
 800d30e:	f855 8b04 	ldr.w	r8, [r5], #4
 800d312:	fa17 f488 	uxtah	r4, r7, r8
 800d316:	1420      	asrs	r0, r4, #16
 800d318:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d31c:	b2a4      	uxth	r4, r4
 800d31e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800d322:	f84e 4b04 	str.w	r4, [lr], #4
 800d326:	1407      	asrs	r7, r0, #16
 800d328:	e7e0      	b.n	800d2ec <__mdiff+0xc8>
 800d32a:	3e01      	subs	r6, #1
 800d32c:	e7ea      	b.n	800d304 <__mdiff+0xe0>
 800d32e:	bf00      	nop
 800d330:	0800ee64 	.word	0x0800ee64
 800d334:	0800ef58 	.word	0x0800ef58

0800d338 <__ulp>:
 800d338:	4b11      	ldr	r3, [pc, #68]	; (800d380 <__ulp+0x48>)
 800d33a:	400b      	ands	r3, r1
 800d33c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d340:	2b00      	cmp	r3, #0
 800d342:	dd02      	ble.n	800d34a <__ulp+0x12>
 800d344:	2000      	movs	r0, #0
 800d346:	4619      	mov	r1, r3
 800d348:	4770      	bx	lr
 800d34a:	425b      	negs	r3, r3
 800d34c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d350:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d354:	f04f 0000 	mov.w	r0, #0
 800d358:	f04f 0100 	mov.w	r1, #0
 800d35c:	da04      	bge.n	800d368 <__ulp+0x30>
 800d35e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d362:	fa43 f102 	asr.w	r1, r3, r2
 800d366:	4770      	bx	lr
 800d368:	f1a2 0314 	sub.w	r3, r2, #20
 800d36c:	2b1e      	cmp	r3, #30
 800d36e:	bfda      	itte	le
 800d370:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d374:	fa22 f303 	lsrle.w	r3, r2, r3
 800d378:	2301      	movgt	r3, #1
 800d37a:	4618      	mov	r0, r3
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	7ff00000 	.word	0x7ff00000

0800d384 <__b2d>:
 800d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d388:	6907      	ldr	r7, [r0, #16]
 800d38a:	f100 0914 	add.w	r9, r0, #20
 800d38e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d392:	f1a7 0804 	sub.w	r8, r7, #4
 800d396:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7ff fd56 	bl	800ce4c <__hi0bits>
 800d3a0:	f1c0 0320 	rsb	r3, r0, #32
 800d3a4:	280a      	cmp	r0, #10
 800d3a6:	600b      	str	r3, [r1, #0]
 800d3a8:	491f      	ldr	r1, [pc, #124]	; (800d428 <__b2d+0xa4>)
 800d3aa:	dc17      	bgt.n	800d3dc <__b2d+0x58>
 800d3ac:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3b0:	45c1      	cmp	r9, r8
 800d3b2:	fa26 f30c 	lsr.w	r3, r6, ip
 800d3b6:	bf38      	it	cc
 800d3b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d3bc:	ea43 0501 	orr.w	r5, r3, r1
 800d3c0:	bf28      	it	cs
 800d3c2:	2200      	movcs	r2, #0
 800d3c4:	f100 0315 	add.w	r3, r0, #21
 800d3c8:	fa06 f303 	lsl.w	r3, r6, r3
 800d3cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800d3d0:	ea43 0402 	orr.w	r4, r3, r2
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3dc:	45c1      	cmp	r9, r8
 800d3de:	bf3a      	itte	cc
 800d3e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d3e4:	f1a7 0808 	subcc.w	r8, r7, #8
 800d3e8:	2200      	movcs	r2, #0
 800d3ea:	f1b0 030b 	subs.w	r3, r0, #11
 800d3ee:	d016      	beq.n	800d41e <__b2d+0x9a>
 800d3f0:	f1c3 0720 	rsb	r7, r3, #32
 800d3f4:	fa22 f107 	lsr.w	r1, r2, r7
 800d3f8:	45c8      	cmp	r8, r9
 800d3fa:	fa06 f603 	lsl.w	r6, r6, r3
 800d3fe:	ea46 0601 	orr.w	r6, r6, r1
 800d402:	bf8c      	ite	hi
 800d404:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d408:	2100      	movls	r1, #0
 800d40a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d40e:	fa02 f003 	lsl.w	r0, r2, r3
 800d412:	40f9      	lsrs	r1, r7
 800d414:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d418:	ea40 0401 	orr.w	r4, r0, r1
 800d41c:	e7da      	b.n	800d3d4 <__b2d+0x50>
 800d41e:	ea46 0501 	orr.w	r5, r6, r1
 800d422:	4614      	mov	r4, r2
 800d424:	e7d6      	b.n	800d3d4 <__b2d+0x50>
 800d426:	bf00      	nop
 800d428:	3ff00000 	.word	0x3ff00000

0800d42c <__d2b>:
 800d42c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d430:	2101      	movs	r1, #1
 800d432:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d436:	4690      	mov	r8, r2
 800d438:	461d      	mov	r5, r3
 800d43a:	f7ff fc11 	bl	800cc60 <_Balloc>
 800d43e:	4604      	mov	r4, r0
 800d440:	b930      	cbnz	r0, 800d450 <__d2b+0x24>
 800d442:	4602      	mov	r2, r0
 800d444:	4b25      	ldr	r3, [pc, #148]	; (800d4dc <__d2b+0xb0>)
 800d446:	4826      	ldr	r0, [pc, #152]	; (800d4e0 <__d2b+0xb4>)
 800d448:	f240 310a 	movw	r1, #778	; 0x30a
 800d44c:	f000 fc2e 	bl	800dcac <__assert_func>
 800d450:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d454:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d458:	bb2d      	cbnz	r5, 800d4a6 <__d2b+0x7a>
 800d45a:	9301      	str	r3, [sp, #4]
 800d45c:	f1b8 0300 	subs.w	r3, r8, #0
 800d460:	d026      	beq.n	800d4b0 <__d2b+0x84>
 800d462:	4668      	mov	r0, sp
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	f7ff fd11 	bl	800ce8c <__lo0bits>
 800d46a:	9900      	ldr	r1, [sp, #0]
 800d46c:	b1f0      	cbz	r0, 800d4ac <__d2b+0x80>
 800d46e:	9a01      	ldr	r2, [sp, #4]
 800d470:	f1c0 0320 	rsb	r3, r0, #32
 800d474:	fa02 f303 	lsl.w	r3, r2, r3
 800d478:	430b      	orrs	r3, r1
 800d47a:	40c2      	lsrs	r2, r0
 800d47c:	6163      	str	r3, [r4, #20]
 800d47e:	9201      	str	r2, [sp, #4]
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	61a3      	str	r3, [r4, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	bf14      	ite	ne
 800d488:	2102      	movne	r1, #2
 800d48a:	2101      	moveq	r1, #1
 800d48c:	6121      	str	r1, [r4, #16]
 800d48e:	b1c5      	cbz	r5, 800d4c2 <__d2b+0x96>
 800d490:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d494:	4405      	add	r5, r0
 800d496:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d49a:	603d      	str	r5, [r7, #0]
 800d49c:	6030      	str	r0, [r6, #0]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	b002      	add	sp, #8
 800d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4aa:	e7d6      	b.n	800d45a <__d2b+0x2e>
 800d4ac:	6161      	str	r1, [r4, #20]
 800d4ae:	e7e7      	b.n	800d480 <__d2b+0x54>
 800d4b0:	a801      	add	r0, sp, #4
 800d4b2:	f7ff fceb 	bl	800ce8c <__lo0bits>
 800d4b6:	9b01      	ldr	r3, [sp, #4]
 800d4b8:	6163      	str	r3, [r4, #20]
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	6121      	str	r1, [r4, #16]
 800d4be:	3020      	adds	r0, #32
 800d4c0:	e7e5      	b.n	800d48e <__d2b+0x62>
 800d4c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d4c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4ca:	6038      	str	r0, [r7, #0]
 800d4cc:	6918      	ldr	r0, [r3, #16]
 800d4ce:	f7ff fcbd 	bl	800ce4c <__hi0bits>
 800d4d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d4d6:	6031      	str	r1, [r6, #0]
 800d4d8:	e7e1      	b.n	800d49e <__d2b+0x72>
 800d4da:	bf00      	nop
 800d4dc:	0800ee64 	.word	0x0800ee64
 800d4e0:	0800ef58 	.word	0x0800ef58

0800d4e4 <__ratio>:
 800d4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e8:	4688      	mov	r8, r1
 800d4ea:	4669      	mov	r1, sp
 800d4ec:	4681      	mov	r9, r0
 800d4ee:	f7ff ff49 	bl	800d384 <__b2d>
 800d4f2:	460f      	mov	r7, r1
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	460d      	mov	r5, r1
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	a901      	add	r1, sp, #4
 800d4fc:	f7ff ff42 	bl	800d384 <__b2d>
 800d500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d504:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d508:	eba3 0c02 	sub.w	ip, r3, r2
 800d50c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d510:	1a9b      	subs	r3, r3, r2
 800d512:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfd5      	itete	le
 800d51a:	460a      	movle	r2, r1
 800d51c:	462a      	movgt	r2, r5
 800d51e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d522:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d526:	468b      	mov	fp, r1
 800d528:	bfd8      	it	le
 800d52a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d52e:	465b      	mov	r3, fp
 800d530:	4602      	mov	r2, r0
 800d532:	4639      	mov	r1, r7
 800d534:	4620      	mov	r0, r4
 800d536:	f7f3 f971 	bl	800081c <__aeabi_ddiv>
 800d53a:	b003      	add	sp, #12
 800d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d540 <__copybits>:
 800d540:	3901      	subs	r1, #1
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	1149      	asrs	r1, r1, #5
 800d546:	6914      	ldr	r4, [r2, #16]
 800d548:	3101      	adds	r1, #1
 800d54a:	f102 0314 	add.w	r3, r2, #20
 800d54e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d552:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d556:	1f05      	subs	r5, r0, #4
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d30c      	bcc.n	800d576 <__copybits+0x36>
 800d55c:	1aa3      	subs	r3, r4, r2
 800d55e:	3b11      	subs	r3, #17
 800d560:	f023 0303 	bic.w	r3, r3, #3
 800d564:	3211      	adds	r2, #17
 800d566:	42a2      	cmp	r2, r4
 800d568:	bf88      	it	hi
 800d56a:	2300      	movhi	r3, #0
 800d56c:	4418      	add	r0, r3
 800d56e:	2300      	movs	r3, #0
 800d570:	4288      	cmp	r0, r1
 800d572:	d305      	bcc.n	800d580 <__copybits+0x40>
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	f853 6b04 	ldr.w	r6, [r3], #4
 800d57a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d57e:	e7eb      	b.n	800d558 <__copybits+0x18>
 800d580:	f840 3b04 	str.w	r3, [r0], #4
 800d584:	e7f4      	b.n	800d570 <__copybits+0x30>

0800d586 <__any_on>:
 800d586:	f100 0214 	add.w	r2, r0, #20
 800d58a:	6900      	ldr	r0, [r0, #16]
 800d58c:	114b      	asrs	r3, r1, #5
 800d58e:	4298      	cmp	r0, r3
 800d590:	b510      	push	{r4, lr}
 800d592:	db11      	blt.n	800d5b8 <__any_on+0x32>
 800d594:	dd0a      	ble.n	800d5ac <__any_on+0x26>
 800d596:	f011 011f 	ands.w	r1, r1, #31
 800d59a:	d007      	beq.n	800d5ac <__any_on+0x26>
 800d59c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5a0:	fa24 f001 	lsr.w	r0, r4, r1
 800d5a4:	fa00 f101 	lsl.w	r1, r0, r1
 800d5a8:	428c      	cmp	r4, r1
 800d5aa:	d10b      	bne.n	800d5c4 <__any_on+0x3e>
 800d5ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d803      	bhi.n	800d5bc <__any_on+0x36>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	bd10      	pop	{r4, pc}
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	e7f7      	b.n	800d5ac <__any_on+0x26>
 800d5bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	d0f5      	beq.n	800d5b0 <__any_on+0x2a>
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	e7f6      	b.n	800d5b6 <__any_on+0x30>

0800d5c8 <_calloc_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	fb02 f501 	mul.w	r5, r2, r1
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7fb ff3e 	bl	8009450 <_malloc_r>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	b118      	cbz	r0, 800d5e0 <_calloc_r+0x18>
 800d5d8:	462a      	mov	r2, r5
 800d5da:	2100      	movs	r1, #0
 800d5dc:	f7fb fee2 	bl	80093a4 <memset>
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}

0800d5e4 <__ssputs_r>:
 800d5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e8:	688e      	ldr	r6, [r1, #8]
 800d5ea:	429e      	cmp	r6, r3
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	4690      	mov	r8, r2
 800d5f2:	461f      	mov	r7, r3
 800d5f4:	d838      	bhi.n	800d668 <__ssputs_r+0x84>
 800d5f6:	898a      	ldrh	r2, [r1, #12]
 800d5f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5fc:	d032      	beq.n	800d664 <__ssputs_r+0x80>
 800d5fe:	6825      	ldr	r5, [r4, #0]
 800d600:	6909      	ldr	r1, [r1, #16]
 800d602:	eba5 0901 	sub.w	r9, r5, r1
 800d606:	6965      	ldr	r5, [r4, #20]
 800d608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d60c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d610:	3301      	adds	r3, #1
 800d612:	444b      	add	r3, r9
 800d614:	106d      	asrs	r5, r5, #1
 800d616:	429d      	cmp	r5, r3
 800d618:	bf38      	it	cc
 800d61a:	461d      	movcc	r5, r3
 800d61c:	0553      	lsls	r3, r2, #21
 800d61e:	d531      	bpl.n	800d684 <__ssputs_r+0xa0>
 800d620:	4629      	mov	r1, r5
 800d622:	f7fb ff15 	bl	8009450 <_malloc_r>
 800d626:	4606      	mov	r6, r0
 800d628:	b950      	cbnz	r0, 800d640 <__ssputs_r+0x5c>
 800d62a:	230c      	movs	r3, #12
 800d62c:	f8ca 3000 	str.w	r3, [sl]
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d640:	6921      	ldr	r1, [r4, #16]
 800d642:	464a      	mov	r2, r9
 800d644:	f7fb fea0 	bl	8009388 <memcpy>
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d652:	81a3      	strh	r3, [r4, #12]
 800d654:	6126      	str	r6, [r4, #16]
 800d656:	6165      	str	r5, [r4, #20]
 800d658:	444e      	add	r6, r9
 800d65a:	eba5 0509 	sub.w	r5, r5, r9
 800d65e:	6026      	str	r6, [r4, #0]
 800d660:	60a5      	str	r5, [r4, #8]
 800d662:	463e      	mov	r6, r7
 800d664:	42be      	cmp	r6, r7
 800d666:	d900      	bls.n	800d66a <__ssputs_r+0x86>
 800d668:	463e      	mov	r6, r7
 800d66a:	4632      	mov	r2, r6
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	4641      	mov	r1, r8
 800d670:	f000 fb90 	bl	800dd94 <memmove>
 800d674:	68a3      	ldr	r3, [r4, #8]
 800d676:	6822      	ldr	r2, [r4, #0]
 800d678:	1b9b      	subs	r3, r3, r6
 800d67a:	4432      	add	r2, r6
 800d67c:	60a3      	str	r3, [r4, #8]
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	2000      	movs	r0, #0
 800d682:	e7db      	b.n	800d63c <__ssputs_r+0x58>
 800d684:	462a      	mov	r2, r5
 800d686:	f000 fb9f 	bl	800ddc8 <_realloc_r>
 800d68a:	4606      	mov	r6, r0
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d1e1      	bne.n	800d654 <__ssputs_r+0x70>
 800d690:	6921      	ldr	r1, [r4, #16]
 800d692:	4650      	mov	r0, sl
 800d694:	f7fb fe8e 	bl	80093b4 <_free_r>
 800d698:	e7c7      	b.n	800d62a <__ssputs_r+0x46>
	...

0800d69c <_svfiprintf_r>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	4698      	mov	r8, r3
 800d6a2:	898b      	ldrh	r3, [r1, #12]
 800d6a4:	061b      	lsls	r3, r3, #24
 800d6a6:	b09d      	sub	sp, #116	; 0x74
 800d6a8:	4607      	mov	r7, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	d50e      	bpl.n	800d6ce <_svfiprintf_r+0x32>
 800d6b0:	690b      	ldr	r3, [r1, #16]
 800d6b2:	b963      	cbnz	r3, 800d6ce <_svfiprintf_r+0x32>
 800d6b4:	2140      	movs	r1, #64	; 0x40
 800d6b6:	f7fb fecb 	bl	8009450 <_malloc_r>
 800d6ba:	6028      	str	r0, [r5, #0]
 800d6bc:	6128      	str	r0, [r5, #16]
 800d6be:	b920      	cbnz	r0, 800d6ca <_svfiprintf_r+0x2e>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	603b      	str	r3, [r7, #0]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e0d1      	b.n	800d86e <_svfiprintf_r+0x1d2>
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	616b      	str	r3, [r5, #20]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d2:	2320      	movs	r3, #32
 800d6d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6dc:	2330      	movs	r3, #48	; 0x30
 800d6de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d888 <_svfiprintf_r+0x1ec>
 800d6e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e6:	f04f 0901 	mov.w	r9, #1
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	469a      	mov	sl, r3
 800d6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f2:	b10a      	cbz	r2, 800d6f8 <_svfiprintf_r+0x5c>
 800d6f4:	2a25      	cmp	r2, #37	; 0x25
 800d6f6:	d1f9      	bne.n	800d6ec <_svfiprintf_r+0x50>
 800d6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fc:	d00b      	beq.n	800d716 <_svfiprintf_r+0x7a>
 800d6fe:	465b      	mov	r3, fp
 800d700:	4622      	mov	r2, r4
 800d702:	4629      	mov	r1, r5
 800d704:	4638      	mov	r0, r7
 800d706:	f7ff ff6d 	bl	800d5e4 <__ssputs_r>
 800d70a:	3001      	adds	r0, #1
 800d70c:	f000 80aa 	beq.w	800d864 <_svfiprintf_r+0x1c8>
 800d710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d712:	445a      	add	r2, fp
 800d714:	9209      	str	r2, [sp, #36]	; 0x24
 800d716:	f89a 3000 	ldrb.w	r3, [sl]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 80a2 	beq.w	800d864 <_svfiprintf_r+0x1c8>
 800d720:	2300      	movs	r3, #0
 800d722:	f04f 32ff 	mov.w	r2, #4294967295
 800d726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72a:	f10a 0a01 	add.w	sl, sl, #1
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	9307      	str	r3, [sp, #28]
 800d732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d736:	931a      	str	r3, [sp, #104]	; 0x68
 800d738:	4654      	mov	r4, sl
 800d73a:	2205      	movs	r2, #5
 800d73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d740:	4851      	ldr	r0, [pc, #324]	; (800d888 <_svfiprintf_r+0x1ec>)
 800d742:	f7f2 fd35 	bl	80001b0 <memchr>
 800d746:	9a04      	ldr	r2, [sp, #16]
 800d748:	b9d8      	cbnz	r0, 800d782 <_svfiprintf_r+0xe6>
 800d74a:	06d0      	lsls	r0, r2, #27
 800d74c:	bf44      	itt	mi
 800d74e:	2320      	movmi	r3, #32
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d754:	0711      	lsls	r1, r2, #28
 800d756:	bf44      	itt	mi
 800d758:	232b      	movmi	r3, #43	; 0x2b
 800d75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75e:	f89a 3000 	ldrb.w	r3, [sl]
 800d762:	2b2a      	cmp	r3, #42	; 0x2a
 800d764:	d015      	beq.n	800d792 <_svfiprintf_r+0xf6>
 800d766:	9a07      	ldr	r2, [sp, #28]
 800d768:	4654      	mov	r4, sl
 800d76a:	2000      	movs	r0, #0
 800d76c:	f04f 0c0a 	mov.w	ip, #10
 800d770:	4621      	mov	r1, r4
 800d772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d776:	3b30      	subs	r3, #48	; 0x30
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d94e      	bls.n	800d81a <_svfiprintf_r+0x17e>
 800d77c:	b1b0      	cbz	r0, 800d7ac <_svfiprintf_r+0x110>
 800d77e:	9207      	str	r2, [sp, #28]
 800d780:	e014      	b.n	800d7ac <_svfiprintf_r+0x110>
 800d782:	eba0 0308 	sub.w	r3, r0, r8
 800d786:	fa09 f303 	lsl.w	r3, r9, r3
 800d78a:	4313      	orrs	r3, r2
 800d78c:	9304      	str	r3, [sp, #16]
 800d78e:	46a2      	mov	sl, r4
 800d790:	e7d2      	b.n	800d738 <_svfiprintf_r+0x9c>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	1d19      	adds	r1, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9103      	str	r1, [sp, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bfbb      	ittet	lt
 800d79e:	425b      	neglt	r3, r3
 800d7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a4:	9307      	strge	r3, [sp, #28]
 800d7a6:	9307      	strlt	r3, [sp, #28]
 800d7a8:	bfb8      	it	lt
 800d7aa:	9204      	strlt	r2, [sp, #16]
 800d7ac:	7823      	ldrb	r3, [r4, #0]
 800d7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d7b0:	d10c      	bne.n	800d7cc <_svfiprintf_r+0x130>
 800d7b2:	7863      	ldrb	r3, [r4, #1]
 800d7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b6:	d135      	bne.n	800d824 <_svfiprintf_r+0x188>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	1d1a      	adds	r2, r3, #4
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	9203      	str	r2, [sp, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bfb8      	it	lt
 800d7c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7c8:	3402      	adds	r4, #2
 800d7ca:	9305      	str	r3, [sp, #20]
 800d7cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d898 <_svfiprintf_r+0x1fc>
 800d7d0:	7821      	ldrb	r1, [r4, #0]
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	f7f2 fceb 	bl	80001b0 <memchr>
 800d7da:	b140      	cbz	r0, 800d7ee <_svfiprintf_r+0x152>
 800d7dc:	2340      	movs	r3, #64	; 0x40
 800d7de:	eba0 000a 	sub.w	r0, r0, sl
 800d7e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d7e6:	9b04      	ldr	r3, [sp, #16]
 800d7e8:	4303      	orrs	r3, r0
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f2:	4826      	ldr	r0, [pc, #152]	; (800d88c <_svfiprintf_r+0x1f0>)
 800d7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f8:	2206      	movs	r2, #6
 800d7fa:	f7f2 fcd9 	bl	80001b0 <memchr>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d038      	beq.n	800d874 <_svfiprintf_r+0x1d8>
 800d802:	4b23      	ldr	r3, [pc, #140]	; (800d890 <_svfiprintf_r+0x1f4>)
 800d804:	bb1b      	cbnz	r3, 800d84e <_svfiprintf_r+0x1b2>
 800d806:	9b03      	ldr	r3, [sp, #12]
 800d808:	3307      	adds	r3, #7
 800d80a:	f023 0307 	bic.w	r3, r3, #7
 800d80e:	3308      	adds	r3, #8
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d814:	4433      	add	r3, r6
 800d816:	9309      	str	r3, [sp, #36]	; 0x24
 800d818:	e767      	b.n	800d6ea <_svfiprintf_r+0x4e>
 800d81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81e:	460c      	mov	r4, r1
 800d820:	2001      	movs	r0, #1
 800d822:	e7a5      	b.n	800d770 <_svfiprintf_r+0xd4>
 800d824:	2300      	movs	r3, #0
 800d826:	3401      	adds	r4, #1
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f04f 0c0a 	mov.w	ip, #10
 800d830:	4620      	mov	r0, r4
 800d832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d836:	3a30      	subs	r2, #48	; 0x30
 800d838:	2a09      	cmp	r2, #9
 800d83a:	d903      	bls.n	800d844 <_svfiprintf_r+0x1a8>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0c5      	beq.n	800d7cc <_svfiprintf_r+0x130>
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	e7c3      	b.n	800d7cc <_svfiprintf_r+0x130>
 800d844:	fb0c 2101 	mla	r1, ip, r1, r2
 800d848:	4604      	mov	r4, r0
 800d84a:	2301      	movs	r3, #1
 800d84c:	e7f0      	b.n	800d830 <_svfiprintf_r+0x194>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4b0f      	ldr	r3, [pc, #60]	; (800d894 <_svfiprintf_r+0x1f8>)
 800d856:	a904      	add	r1, sp, #16
 800d858:	4638      	mov	r0, r7
 800d85a:	f7fb fef1 	bl	8009640 <_printf_float>
 800d85e:	1c42      	adds	r2, r0, #1
 800d860:	4606      	mov	r6, r0
 800d862:	d1d6      	bne.n	800d812 <_svfiprintf_r+0x176>
 800d864:	89ab      	ldrh	r3, [r5, #12]
 800d866:	065b      	lsls	r3, r3, #25
 800d868:	f53f af2c 	bmi.w	800d6c4 <_svfiprintf_r+0x28>
 800d86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d86e:	b01d      	add	sp, #116	; 0x74
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	ab03      	add	r3, sp, #12
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	462a      	mov	r2, r5
 800d87a:	4b06      	ldr	r3, [pc, #24]	; (800d894 <_svfiprintf_r+0x1f8>)
 800d87c:	a904      	add	r1, sp, #16
 800d87e:	4638      	mov	r0, r7
 800d880:	f7fc f976 	bl	8009b70 <_printf_i>
 800d884:	e7eb      	b.n	800d85e <_svfiprintf_r+0x1c2>
 800d886:	bf00      	nop
 800d888:	0800f0b4 	.word	0x0800f0b4
 800d88c:	0800f0be 	.word	0x0800f0be
 800d890:	08009641 	.word	0x08009641
 800d894:	0800d5e5 	.word	0x0800d5e5
 800d898:	0800f0ba 	.word	0x0800f0ba

0800d89c <__sfputc_r>:
 800d89c:	6893      	ldr	r3, [r2, #8]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	b410      	push	{r4}
 800d8a4:	6093      	str	r3, [r2, #8]
 800d8a6:	da07      	bge.n	800d8b8 <__sfputc_r+0x1c>
 800d8a8:	6994      	ldr	r4, [r2, #24]
 800d8aa:	42a3      	cmp	r3, r4
 800d8ac:	db01      	blt.n	800d8b2 <__sfputc_r+0x16>
 800d8ae:	290a      	cmp	r1, #10
 800d8b0:	d102      	bne.n	800d8b8 <__sfputc_r+0x1c>
 800d8b2:	bc10      	pop	{r4}
 800d8b4:	f7fd bca6 	b.w	800b204 <__swbuf_r>
 800d8b8:	6813      	ldr	r3, [r2, #0]
 800d8ba:	1c58      	adds	r0, r3, #1
 800d8bc:	6010      	str	r0, [r2, #0]
 800d8be:	7019      	strb	r1, [r3, #0]
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	bc10      	pop	{r4}
 800d8c4:	4770      	bx	lr

0800d8c6 <__sfputs_r>:
 800d8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	460f      	mov	r7, r1
 800d8cc:	4614      	mov	r4, r2
 800d8ce:	18d5      	adds	r5, r2, r3
 800d8d0:	42ac      	cmp	r4, r5
 800d8d2:	d101      	bne.n	800d8d8 <__sfputs_r+0x12>
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e007      	b.n	800d8e8 <__sfputs_r+0x22>
 800d8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8dc:	463a      	mov	r2, r7
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f7ff ffdc 	bl	800d89c <__sfputc_r>
 800d8e4:	1c43      	adds	r3, r0, #1
 800d8e6:	d1f3      	bne.n	800d8d0 <__sfputs_r+0xa>
 800d8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8ec <_vfiprintf_r>:
 800d8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	b09d      	sub	sp, #116	; 0x74
 800d8f4:	4614      	mov	r4, r2
 800d8f6:	4698      	mov	r8, r3
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	b118      	cbz	r0, 800d904 <_vfiprintf_r+0x18>
 800d8fc:	6983      	ldr	r3, [r0, #24]
 800d8fe:	b90b      	cbnz	r3, 800d904 <_vfiprintf_r+0x18>
 800d900:	f7fe fd24 	bl	800c34c <__sinit>
 800d904:	4b89      	ldr	r3, [pc, #548]	; (800db2c <_vfiprintf_r+0x240>)
 800d906:	429d      	cmp	r5, r3
 800d908:	d11b      	bne.n	800d942 <_vfiprintf_r+0x56>
 800d90a:	6875      	ldr	r5, [r6, #4]
 800d90c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d90e:	07d9      	lsls	r1, r3, #31
 800d910:	d405      	bmi.n	800d91e <_vfiprintf_r+0x32>
 800d912:	89ab      	ldrh	r3, [r5, #12]
 800d914:	059a      	lsls	r2, r3, #22
 800d916:	d402      	bmi.n	800d91e <_vfiprintf_r+0x32>
 800d918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d91a:	f7ff f91c 	bl	800cb56 <__retarget_lock_acquire_recursive>
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	071b      	lsls	r3, r3, #28
 800d922:	d501      	bpl.n	800d928 <_vfiprintf_r+0x3c>
 800d924:	692b      	ldr	r3, [r5, #16]
 800d926:	b9eb      	cbnz	r3, 800d964 <_vfiprintf_r+0x78>
 800d928:	4629      	mov	r1, r5
 800d92a:	4630      	mov	r0, r6
 800d92c:	f7fd fcce 	bl	800b2cc <__swsetup_r>
 800d930:	b1c0      	cbz	r0, 800d964 <_vfiprintf_r+0x78>
 800d932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d934:	07dc      	lsls	r4, r3, #31
 800d936:	d50e      	bpl.n	800d956 <_vfiprintf_r+0x6a>
 800d938:	f04f 30ff 	mov.w	r0, #4294967295
 800d93c:	b01d      	add	sp, #116	; 0x74
 800d93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d942:	4b7b      	ldr	r3, [pc, #492]	; (800db30 <_vfiprintf_r+0x244>)
 800d944:	429d      	cmp	r5, r3
 800d946:	d101      	bne.n	800d94c <_vfiprintf_r+0x60>
 800d948:	68b5      	ldr	r5, [r6, #8]
 800d94a:	e7df      	b.n	800d90c <_vfiprintf_r+0x20>
 800d94c:	4b79      	ldr	r3, [pc, #484]	; (800db34 <_vfiprintf_r+0x248>)
 800d94e:	429d      	cmp	r5, r3
 800d950:	bf08      	it	eq
 800d952:	68f5      	ldreq	r5, [r6, #12]
 800d954:	e7da      	b.n	800d90c <_vfiprintf_r+0x20>
 800d956:	89ab      	ldrh	r3, [r5, #12]
 800d958:	0598      	lsls	r0, r3, #22
 800d95a:	d4ed      	bmi.n	800d938 <_vfiprintf_r+0x4c>
 800d95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d95e:	f7ff f8fb 	bl	800cb58 <__retarget_lock_release_recursive>
 800d962:	e7e9      	b.n	800d938 <_vfiprintf_r+0x4c>
 800d964:	2300      	movs	r3, #0
 800d966:	9309      	str	r3, [sp, #36]	; 0x24
 800d968:	2320      	movs	r3, #32
 800d96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d96e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d972:	2330      	movs	r3, #48	; 0x30
 800d974:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db38 <_vfiprintf_r+0x24c>
 800d978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d97c:	f04f 0901 	mov.w	r9, #1
 800d980:	4623      	mov	r3, r4
 800d982:	469a      	mov	sl, r3
 800d984:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d988:	b10a      	cbz	r2, 800d98e <_vfiprintf_r+0xa2>
 800d98a:	2a25      	cmp	r2, #37	; 0x25
 800d98c:	d1f9      	bne.n	800d982 <_vfiprintf_r+0x96>
 800d98e:	ebba 0b04 	subs.w	fp, sl, r4
 800d992:	d00b      	beq.n	800d9ac <_vfiprintf_r+0xc0>
 800d994:	465b      	mov	r3, fp
 800d996:	4622      	mov	r2, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	4630      	mov	r0, r6
 800d99c:	f7ff ff93 	bl	800d8c6 <__sfputs_r>
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	f000 80aa 	beq.w	800dafa <_vfiprintf_r+0x20e>
 800d9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9a8:	445a      	add	r2, fp
 800d9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80a2 	beq.w	800dafa <_vfiprintf_r+0x20e>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c0:	f10a 0a01 	add.w	sl, sl, #1
 800d9c4:	9304      	str	r3, [sp, #16]
 800d9c6:	9307      	str	r3, [sp, #28]
 800d9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d9ce:	4654      	mov	r4, sl
 800d9d0:	2205      	movs	r2, #5
 800d9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d6:	4858      	ldr	r0, [pc, #352]	; (800db38 <_vfiprintf_r+0x24c>)
 800d9d8:	f7f2 fbea 	bl	80001b0 <memchr>
 800d9dc:	9a04      	ldr	r2, [sp, #16]
 800d9de:	b9d8      	cbnz	r0, 800da18 <_vfiprintf_r+0x12c>
 800d9e0:	06d1      	lsls	r1, r2, #27
 800d9e2:	bf44      	itt	mi
 800d9e4:	2320      	movmi	r3, #32
 800d9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ea:	0713      	lsls	r3, r2, #28
 800d9ec:	bf44      	itt	mi
 800d9ee:	232b      	movmi	r3, #43	; 0x2b
 800d9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d9fa:	d015      	beq.n	800da28 <_vfiprintf_r+0x13c>
 800d9fc:	9a07      	ldr	r2, [sp, #28]
 800d9fe:	4654      	mov	r4, sl
 800da00:	2000      	movs	r0, #0
 800da02:	f04f 0c0a 	mov.w	ip, #10
 800da06:	4621      	mov	r1, r4
 800da08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da0c:	3b30      	subs	r3, #48	; 0x30
 800da0e:	2b09      	cmp	r3, #9
 800da10:	d94e      	bls.n	800dab0 <_vfiprintf_r+0x1c4>
 800da12:	b1b0      	cbz	r0, 800da42 <_vfiprintf_r+0x156>
 800da14:	9207      	str	r2, [sp, #28]
 800da16:	e014      	b.n	800da42 <_vfiprintf_r+0x156>
 800da18:	eba0 0308 	sub.w	r3, r0, r8
 800da1c:	fa09 f303 	lsl.w	r3, r9, r3
 800da20:	4313      	orrs	r3, r2
 800da22:	9304      	str	r3, [sp, #16]
 800da24:	46a2      	mov	sl, r4
 800da26:	e7d2      	b.n	800d9ce <_vfiprintf_r+0xe2>
 800da28:	9b03      	ldr	r3, [sp, #12]
 800da2a:	1d19      	adds	r1, r3, #4
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	9103      	str	r1, [sp, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	bfbb      	ittet	lt
 800da34:	425b      	neglt	r3, r3
 800da36:	f042 0202 	orrlt.w	r2, r2, #2
 800da3a:	9307      	strge	r3, [sp, #28]
 800da3c:	9307      	strlt	r3, [sp, #28]
 800da3e:	bfb8      	it	lt
 800da40:	9204      	strlt	r2, [sp, #16]
 800da42:	7823      	ldrb	r3, [r4, #0]
 800da44:	2b2e      	cmp	r3, #46	; 0x2e
 800da46:	d10c      	bne.n	800da62 <_vfiprintf_r+0x176>
 800da48:	7863      	ldrb	r3, [r4, #1]
 800da4a:	2b2a      	cmp	r3, #42	; 0x2a
 800da4c:	d135      	bne.n	800daba <_vfiprintf_r+0x1ce>
 800da4e:	9b03      	ldr	r3, [sp, #12]
 800da50:	1d1a      	adds	r2, r3, #4
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	9203      	str	r2, [sp, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfb8      	it	lt
 800da5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800da5e:	3402      	adds	r4, #2
 800da60:	9305      	str	r3, [sp, #20]
 800da62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db48 <_vfiprintf_r+0x25c>
 800da66:	7821      	ldrb	r1, [r4, #0]
 800da68:	2203      	movs	r2, #3
 800da6a:	4650      	mov	r0, sl
 800da6c:	f7f2 fba0 	bl	80001b0 <memchr>
 800da70:	b140      	cbz	r0, 800da84 <_vfiprintf_r+0x198>
 800da72:	2340      	movs	r3, #64	; 0x40
 800da74:	eba0 000a 	sub.w	r0, r0, sl
 800da78:	fa03 f000 	lsl.w	r0, r3, r0
 800da7c:	9b04      	ldr	r3, [sp, #16]
 800da7e:	4303      	orrs	r3, r0
 800da80:	3401      	adds	r4, #1
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da88:	482c      	ldr	r0, [pc, #176]	; (800db3c <_vfiprintf_r+0x250>)
 800da8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da8e:	2206      	movs	r2, #6
 800da90:	f7f2 fb8e 	bl	80001b0 <memchr>
 800da94:	2800      	cmp	r0, #0
 800da96:	d03f      	beq.n	800db18 <_vfiprintf_r+0x22c>
 800da98:	4b29      	ldr	r3, [pc, #164]	; (800db40 <_vfiprintf_r+0x254>)
 800da9a:	bb1b      	cbnz	r3, 800dae4 <_vfiprintf_r+0x1f8>
 800da9c:	9b03      	ldr	r3, [sp, #12]
 800da9e:	3307      	adds	r3, #7
 800daa0:	f023 0307 	bic.w	r3, r3, #7
 800daa4:	3308      	adds	r3, #8
 800daa6:	9303      	str	r3, [sp, #12]
 800daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daaa:	443b      	add	r3, r7
 800daac:	9309      	str	r3, [sp, #36]	; 0x24
 800daae:	e767      	b.n	800d980 <_vfiprintf_r+0x94>
 800dab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dab4:	460c      	mov	r4, r1
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7a5      	b.n	800da06 <_vfiprintf_r+0x11a>
 800daba:	2300      	movs	r3, #0
 800dabc:	3401      	adds	r4, #1
 800dabe:	9305      	str	r3, [sp, #20]
 800dac0:	4619      	mov	r1, r3
 800dac2:	f04f 0c0a 	mov.w	ip, #10
 800dac6:	4620      	mov	r0, r4
 800dac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dacc:	3a30      	subs	r2, #48	; 0x30
 800dace:	2a09      	cmp	r2, #9
 800dad0:	d903      	bls.n	800dada <_vfiprintf_r+0x1ee>
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0c5      	beq.n	800da62 <_vfiprintf_r+0x176>
 800dad6:	9105      	str	r1, [sp, #20]
 800dad8:	e7c3      	b.n	800da62 <_vfiprintf_r+0x176>
 800dada:	fb0c 2101 	mla	r1, ip, r1, r2
 800dade:	4604      	mov	r4, r0
 800dae0:	2301      	movs	r3, #1
 800dae2:	e7f0      	b.n	800dac6 <_vfiprintf_r+0x1da>
 800dae4:	ab03      	add	r3, sp, #12
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	462a      	mov	r2, r5
 800daea:	4b16      	ldr	r3, [pc, #88]	; (800db44 <_vfiprintf_r+0x258>)
 800daec:	a904      	add	r1, sp, #16
 800daee:	4630      	mov	r0, r6
 800daf0:	f7fb fda6 	bl	8009640 <_printf_float>
 800daf4:	4607      	mov	r7, r0
 800daf6:	1c78      	adds	r0, r7, #1
 800daf8:	d1d6      	bne.n	800daa8 <_vfiprintf_r+0x1bc>
 800dafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dafc:	07d9      	lsls	r1, r3, #31
 800dafe:	d405      	bmi.n	800db0c <_vfiprintf_r+0x220>
 800db00:	89ab      	ldrh	r3, [r5, #12]
 800db02:	059a      	lsls	r2, r3, #22
 800db04:	d402      	bmi.n	800db0c <_vfiprintf_r+0x220>
 800db06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db08:	f7ff f826 	bl	800cb58 <__retarget_lock_release_recursive>
 800db0c:	89ab      	ldrh	r3, [r5, #12]
 800db0e:	065b      	lsls	r3, r3, #25
 800db10:	f53f af12 	bmi.w	800d938 <_vfiprintf_r+0x4c>
 800db14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db16:	e711      	b.n	800d93c <_vfiprintf_r+0x50>
 800db18:	ab03      	add	r3, sp, #12
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	462a      	mov	r2, r5
 800db1e:	4b09      	ldr	r3, [pc, #36]	; (800db44 <_vfiprintf_r+0x258>)
 800db20:	a904      	add	r1, sp, #16
 800db22:	4630      	mov	r0, r6
 800db24:	f7fc f824 	bl	8009b70 <_printf_i>
 800db28:	e7e4      	b.n	800daf4 <_vfiprintf_r+0x208>
 800db2a:	bf00      	nop
 800db2c:	0800ee98 	.word	0x0800ee98
 800db30:	0800eeb8 	.word	0x0800eeb8
 800db34:	0800ee78 	.word	0x0800ee78
 800db38:	0800f0b4 	.word	0x0800f0b4
 800db3c:	0800f0be 	.word	0x0800f0be
 800db40:	08009641 	.word	0x08009641
 800db44:	0800d8c7 	.word	0x0800d8c7
 800db48:	0800f0ba 	.word	0x0800f0ba

0800db4c <_putc_r>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	460d      	mov	r5, r1
 800db50:	4614      	mov	r4, r2
 800db52:	4606      	mov	r6, r0
 800db54:	b118      	cbz	r0, 800db5e <_putc_r+0x12>
 800db56:	6983      	ldr	r3, [r0, #24]
 800db58:	b90b      	cbnz	r3, 800db5e <_putc_r+0x12>
 800db5a:	f7fe fbf7 	bl	800c34c <__sinit>
 800db5e:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <_putc_r+0x84>)
 800db60:	429c      	cmp	r4, r3
 800db62:	d124      	bne.n	800dbae <_putc_r+0x62>
 800db64:	6874      	ldr	r4, [r6, #4]
 800db66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db68:	07d8      	lsls	r0, r3, #31
 800db6a:	d405      	bmi.n	800db78 <_putc_r+0x2c>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	0599      	lsls	r1, r3, #22
 800db70:	d402      	bmi.n	800db78 <_putc_r+0x2c>
 800db72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db74:	f7fe ffef 	bl	800cb56 <__retarget_lock_acquire_recursive>
 800db78:	68a3      	ldr	r3, [r4, #8]
 800db7a:	3b01      	subs	r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	60a3      	str	r3, [r4, #8]
 800db80:	da05      	bge.n	800db8e <_putc_r+0x42>
 800db82:	69a2      	ldr	r2, [r4, #24]
 800db84:	4293      	cmp	r3, r2
 800db86:	db1c      	blt.n	800dbc2 <_putc_r+0x76>
 800db88:	b2eb      	uxtb	r3, r5
 800db8a:	2b0a      	cmp	r3, #10
 800db8c:	d019      	beq.n	800dbc2 <_putc_r+0x76>
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	6022      	str	r2, [r4, #0]
 800db94:	701d      	strb	r5, [r3, #0]
 800db96:	b2ed      	uxtb	r5, r5
 800db98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9a:	07da      	lsls	r2, r3, #31
 800db9c:	d405      	bmi.n	800dbaa <_putc_r+0x5e>
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	059b      	lsls	r3, r3, #22
 800dba2:	d402      	bmi.n	800dbaa <_putc_r+0x5e>
 800dba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba6:	f7fe ffd7 	bl	800cb58 <__retarget_lock_release_recursive>
 800dbaa:	4628      	mov	r0, r5
 800dbac:	bd70      	pop	{r4, r5, r6, pc}
 800dbae:	4b09      	ldr	r3, [pc, #36]	; (800dbd4 <_putc_r+0x88>)
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	d101      	bne.n	800dbb8 <_putc_r+0x6c>
 800dbb4:	68b4      	ldr	r4, [r6, #8]
 800dbb6:	e7d6      	b.n	800db66 <_putc_r+0x1a>
 800dbb8:	4b07      	ldr	r3, [pc, #28]	; (800dbd8 <_putc_r+0x8c>)
 800dbba:	429c      	cmp	r4, r3
 800dbbc:	bf08      	it	eq
 800dbbe:	68f4      	ldreq	r4, [r6, #12]
 800dbc0:	e7d1      	b.n	800db66 <_putc_r+0x1a>
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	f7fd fb1c 	bl	800b204 <__swbuf_r>
 800dbcc:	4605      	mov	r5, r0
 800dbce:	e7e3      	b.n	800db98 <_putc_r+0x4c>
 800dbd0:	0800ee98 	.word	0x0800ee98
 800dbd4:	0800eeb8 	.word	0x0800eeb8
 800dbd8:	0800ee78 	.word	0x0800ee78

0800dbdc <nan>:
 800dbdc:	4901      	ldr	r1, [pc, #4]	; (800dbe4 <nan+0x8>)
 800dbde:	2000      	movs	r0, #0
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	7ff80000 	.word	0x7ff80000

0800dbe8 <__sread>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	460c      	mov	r4, r1
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	f000 f910 	bl	800de14 <_read_r>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	bfab      	itete	ge
 800dbf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbfa:	89a3      	ldrhlt	r3, [r4, #12]
 800dbfc:	181b      	addge	r3, r3, r0
 800dbfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc02:	bfac      	ite	ge
 800dc04:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc06:	81a3      	strhlt	r3, [r4, #12]
 800dc08:	bd10      	pop	{r4, pc}

0800dc0a <__swrite>:
 800dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0e:	461f      	mov	r7, r3
 800dc10:	898b      	ldrh	r3, [r1, #12]
 800dc12:	05db      	lsls	r3, r3, #23
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	4616      	mov	r6, r2
 800dc1a:	d505      	bpl.n	800dc28 <__swrite+0x1e>
 800dc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc20:	2302      	movs	r3, #2
 800dc22:	2200      	movs	r2, #0
 800dc24:	f000 f8a4 	bl	800dd70 <_lseek_r>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	4632      	mov	r2, r6
 800dc36:	463b      	mov	r3, r7
 800dc38:	4628      	mov	r0, r5
 800dc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3e:	f7fd bb33 	b.w	800b2a8 <_write_r>

0800dc42 <__sseek>:
 800dc42:	b510      	push	{r4, lr}
 800dc44:	460c      	mov	r4, r1
 800dc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc4a:	f000 f891 	bl	800dd70 <_lseek_r>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	bf15      	itete	ne
 800dc54:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc5e:	81a3      	strheq	r3, [r4, #12]
 800dc60:	bf18      	it	ne
 800dc62:	81a3      	strhne	r3, [r4, #12]
 800dc64:	bd10      	pop	{r4, pc}

0800dc66 <__sclose>:
 800dc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc6a:	f000 b83d 	b.w	800dce8 <_close_r>

0800dc6e <strncmp>:
 800dc6e:	b510      	push	{r4, lr}
 800dc70:	b16a      	cbz	r2, 800dc8e <strncmp+0x20>
 800dc72:	3901      	subs	r1, #1
 800dc74:	1884      	adds	r4, r0, r2
 800dc76:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dc7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d103      	bne.n	800dc8a <strncmp+0x1c>
 800dc82:	42a0      	cmp	r0, r4
 800dc84:	d001      	beq.n	800dc8a <strncmp+0x1c>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1f5      	bne.n	800dc76 <strncmp+0x8>
 800dc8a:	1a98      	subs	r0, r3, r2
 800dc8c:	bd10      	pop	{r4, pc}
 800dc8e:	4610      	mov	r0, r2
 800dc90:	e7fc      	b.n	800dc8c <strncmp+0x1e>

0800dc92 <__ascii_wctomb>:
 800dc92:	4603      	mov	r3, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	b141      	cbz	r1, 800dcaa <__ascii_wctomb+0x18>
 800dc98:	2aff      	cmp	r2, #255	; 0xff
 800dc9a:	d904      	bls.n	800dca6 <__ascii_wctomb+0x14>
 800dc9c:	228a      	movs	r2, #138	; 0x8a
 800dc9e:	601a      	str	r2, [r3, #0]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	4770      	bx	lr
 800dca6:	700a      	strb	r2, [r1, #0]
 800dca8:	2001      	movs	r0, #1
 800dcaa:	4770      	bx	lr

0800dcac <__assert_func>:
 800dcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcae:	4614      	mov	r4, r2
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <__assert_func+0x2c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	68d8      	ldr	r0, [r3, #12]
 800dcba:	b14c      	cbz	r4, 800dcd0 <__assert_func+0x24>
 800dcbc:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <__assert_func+0x30>)
 800dcbe:	9100      	str	r1, [sp, #0]
 800dcc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcc4:	4906      	ldr	r1, [pc, #24]	; (800dce0 <__assert_func+0x34>)
 800dcc6:	462b      	mov	r3, r5
 800dcc8:	f000 f81e 	bl	800dd08 <fiprintf>
 800dccc:	f000 f8b4 	bl	800de38 <abort>
 800dcd0:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <__assert_func+0x38>)
 800dcd2:	461c      	mov	r4, r3
 800dcd4:	e7f3      	b.n	800dcbe <__assert_func+0x12>
 800dcd6:	bf00      	nop
 800dcd8:	20000010 	.word	0x20000010
 800dcdc:	0800f0c5 	.word	0x0800f0c5
 800dce0:	0800f0d2 	.word	0x0800f0d2
 800dce4:	0800f100 	.word	0x0800f100

0800dce8 <_close_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_close_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f4 f83c 	bl	8001d70 <_close>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_close_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_close_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	200005fc 	.word	0x200005fc

0800dd08 <fiprintf>:
 800dd08:	b40e      	push	{r1, r2, r3}
 800dd0a:	b503      	push	{r0, r1, lr}
 800dd0c:	4601      	mov	r1, r0
 800dd0e:	ab03      	add	r3, sp, #12
 800dd10:	4805      	ldr	r0, [pc, #20]	; (800dd28 <fiprintf+0x20>)
 800dd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd16:	6800      	ldr	r0, [r0, #0]
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	f7ff fde7 	bl	800d8ec <_vfiprintf_r>
 800dd1e:	b002      	add	sp, #8
 800dd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd24:	b003      	add	sp, #12
 800dd26:	4770      	bx	lr
 800dd28:	20000010 	.word	0x20000010

0800dd2c <_fstat_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4d07      	ldr	r5, [pc, #28]	; (800dd4c <_fstat_r+0x20>)
 800dd30:	2300      	movs	r3, #0
 800dd32:	4604      	mov	r4, r0
 800dd34:	4608      	mov	r0, r1
 800dd36:	4611      	mov	r1, r2
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	f7f4 f824 	bl	8001d86 <_fstat>
 800dd3e:	1c43      	adds	r3, r0, #1
 800dd40:	d102      	bne.n	800dd48 <_fstat_r+0x1c>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	b103      	cbz	r3, 800dd48 <_fstat_r+0x1c>
 800dd46:	6023      	str	r3, [r4, #0]
 800dd48:	bd38      	pop	{r3, r4, r5, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200005fc 	.word	0x200005fc

0800dd50 <_isatty_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d06      	ldr	r5, [pc, #24]	; (800dd6c <_isatty_r+0x1c>)
 800dd54:	2300      	movs	r3, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	f7f4 f822 	bl	8001da4 <_isatty>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d102      	bne.n	800dd6a <_isatty_r+0x1a>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b103      	cbz	r3, 800dd6a <_isatty_r+0x1a>
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	bd38      	pop	{r3, r4, r5, pc}
 800dd6c:	200005fc 	.word	0x200005fc

0800dd70 <_lseek_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4d07      	ldr	r5, [pc, #28]	; (800dd90 <_lseek_r+0x20>)
 800dd74:	4604      	mov	r4, r0
 800dd76:	4608      	mov	r0, r1
 800dd78:	4611      	mov	r1, r2
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	602a      	str	r2, [r5, #0]
 800dd7e:	461a      	mov	r2, r3
 800dd80:	f7f4 f81a 	bl	8001db8 <_lseek>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d102      	bne.n	800dd8e <_lseek_r+0x1e>
 800dd88:	682b      	ldr	r3, [r5, #0]
 800dd8a:	b103      	cbz	r3, 800dd8e <_lseek_r+0x1e>
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	bd38      	pop	{r3, r4, r5, pc}
 800dd90:	200005fc 	.word	0x200005fc

0800dd94 <memmove>:
 800dd94:	4288      	cmp	r0, r1
 800dd96:	b510      	push	{r4, lr}
 800dd98:	eb01 0402 	add.w	r4, r1, r2
 800dd9c:	d902      	bls.n	800dda4 <memmove+0x10>
 800dd9e:	4284      	cmp	r4, r0
 800dda0:	4623      	mov	r3, r4
 800dda2:	d807      	bhi.n	800ddb4 <memmove+0x20>
 800dda4:	1e43      	subs	r3, r0, #1
 800dda6:	42a1      	cmp	r1, r4
 800dda8:	d008      	beq.n	800ddbc <memmove+0x28>
 800ddaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddb2:	e7f8      	b.n	800dda6 <memmove+0x12>
 800ddb4:	4402      	add	r2, r0
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	428a      	cmp	r2, r1
 800ddba:	d100      	bne.n	800ddbe <memmove+0x2a>
 800ddbc:	bd10      	pop	{r4, pc}
 800ddbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddc6:	e7f7      	b.n	800ddb8 <memmove+0x24>

0800ddc8 <_realloc_r>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	4607      	mov	r7, r0
 800ddcc:	4614      	mov	r4, r2
 800ddce:	460e      	mov	r6, r1
 800ddd0:	b921      	cbnz	r1, 800dddc <_realloc_r+0x14>
 800ddd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	f7fb bb3a 	b.w	8009450 <_malloc_r>
 800dddc:	b922      	cbnz	r2, 800dde8 <_realloc_r+0x20>
 800ddde:	f7fb fae9 	bl	80093b4 <_free_r>
 800dde2:	4625      	mov	r5, r4
 800dde4:	4628      	mov	r0, r5
 800dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde8:	f000 f82d 	bl	800de46 <_malloc_usable_size_r>
 800ddec:	42a0      	cmp	r0, r4
 800ddee:	d20f      	bcs.n	800de10 <_realloc_r+0x48>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	f7fb fb2c 	bl	8009450 <_malloc_r>
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d0f2      	beq.n	800dde4 <_realloc_r+0x1c>
 800ddfe:	4631      	mov	r1, r6
 800de00:	4622      	mov	r2, r4
 800de02:	f7fb fac1 	bl	8009388 <memcpy>
 800de06:	4631      	mov	r1, r6
 800de08:	4638      	mov	r0, r7
 800de0a:	f7fb fad3 	bl	80093b4 <_free_r>
 800de0e:	e7e9      	b.n	800dde4 <_realloc_r+0x1c>
 800de10:	4635      	mov	r5, r6
 800de12:	e7e7      	b.n	800dde4 <_realloc_r+0x1c>

0800de14 <_read_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d07      	ldr	r5, [pc, #28]	; (800de34 <_read_r+0x20>)
 800de18:	4604      	mov	r4, r0
 800de1a:	4608      	mov	r0, r1
 800de1c:	4611      	mov	r1, r2
 800de1e:	2200      	movs	r2, #0
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7f3 ff6b 	bl	8001cfe <_read>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_read_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_read_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	200005fc 	.word	0x200005fc

0800de38 <abort>:
 800de38:	b508      	push	{r3, lr}
 800de3a:	2006      	movs	r0, #6
 800de3c:	f000 f834 	bl	800dea8 <raise>
 800de40:	2001      	movs	r0, #1
 800de42:	f7f3 ff52 	bl	8001cea <_exit>

0800de46 <_malloc_usable_size_r>:
 800de46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4a:	1f18      	subs	r0, r3, #4
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfbc      	itt	lt
 800de50:	580b      	ldrlt	r3, [r1, r0]
 800de52:	18c0      	addlt	r0, r0, r3
 800de54:	4770      	bx	lr

0800de56 <_raise_r>:
 800de56:	291f      	cmp	r1, #31
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4604      	mov	r4, r0
 800de5c:	460d      	mov	r5, r1
 800de5e:	d904      	bls.n	800de6a <_raise_r+0x14>
 800de60:	2316      	movs	r3, #22
 800de62:	6003      	str	r3, [r0, #0]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	bd38      	pop	{r3, r4, r5, pc}
 800de6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de6c:	b112      	cbz	r2, 800de74 <_raise_r+0x1e>
 800de6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de72:	b94b      	cbnz	r3, 800de88 <_raise_r+0x32>
 800de74:	4620      	mov	r0, r4
 800de76:	f000 f831 	bl	800dedc <_getpid_r>
 800de7a:	462a      	mov	r2, r5
 800de7c:	4601      	mov	r1, r0
 800de7e:	4620      	mov	r0, r4
 800de80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de84:	f000 b818 	b.w	800deb8 <_kill_r>
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d00a      	beq.n	800dea2 <_raise_r+0x4c>
 800de8c:	1c59      	adds	r1, r3, #1
 800de8e:	d103      	bne.n	800de98 <_raise_r+0x42>
 800de90:	2316      	movs	r3, #22
 800de92:	6003      	str	r3, [r0, #0]
 800de94:	2001      	movs	r0, #1
 800de96:	e7e7      	b.n	800de68 <_raise_r+0x12>
 800de98:	2400      	movs	r4, #0
 800de9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de9e:	4628      	mov	r0, r5
 800dea0:	4798      	blx	r3
 800dea2:	2000      	movs	r0, #0
 800dea4:	e7e0      	b.n	800de68 <_raise_r+0x12>
	...

0800dea8 <raise>:
 800dea8:	4b02      	ldr	r3, [pc, #8]	; (800deb4 <raise+0xc>)
 800deaa:	4601      	mov	r1, r0
 800deac:	6818      	ldr	r0, [r3, #0]
 800deae:	f7ff bfd2 	b.w	800de56 <_raise_r>
 800deb2:	bf00      	nop
 800deb4:	20000010 	.word	0x20000010

0800deb8 <_kill_r>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4d07      	ldr	r5, [pc, #28]	; (800ded8 <_kill_r+0x20>)
 800debc:	2300      	movs	r3, #0
 800debe:	4604      	mov	r4, r0
 800dec0:	4608      	mov	r0, r1
 800dec2:	4611      	mov	r1, r2
 800dec4:	602b      	str	r3, [r5, #0]
 800dec6:	f7f3 ff00 	bl	8001cca <_kill>
 800deca:	1c43      	adds	r3, r0, #1
 800decc:	d102      	bne.n	800ded4 <_kill_r+0x1c>
 800dece:	682b      	ldr	r3, [r5, #0]
 800ded0:	b103      	cbz	r3, 800ded4 <_kill_r+0x1c>
 800ded2:	6023      	str	r3, [r4, #0]
 800ded4:	bd38      	pop	{r3, r4, r5, pc}
 800ded6:	bf00      	nop
 800ded8:	200005fc 	.word	0x200005fc

0800dedc <_getpid_r>:
 800dedc:	f7f3 beee 	b.w	8001cbc <_getpid>

0800dee0 <_init>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	bf00      	nop
 800dee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee6:	bc08      	pop	{r3}
 800dee8:	469e      	mov	lr, r3
 800deea:	4770      	bx	lr

0800deec <_fini>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	bf00      	nop
 800def0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800def2:	bc08      	pop	{r3}
 800def4:	469e      	mov	lr, r3
 800def6:	4770      	bx	lr
