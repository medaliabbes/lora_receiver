
lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e10  08008e10  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008e10  08008e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e18  08008e18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000074  08008e94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08008e94  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8b3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9e  00000000  00000000  0003e951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  000423f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00043a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cea5  00000000  00000000  00044fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016650  00000000  00000000  00061e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6582  00000000  00000000  000784b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ea37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000640c  00000000  00000000  0011ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080089d0 	.word	0x080089d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080089d0 	.word	0x080089d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000534:	f023 0218 	bic.w	r2, r3, #24
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4313      	orrs	r3, r2
 8000564:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
	...

08000580 <main>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
void SystemClock_Config(void) ;

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  HAL_Init();
 8000584:	f000 fd2c 	bl	8000fe0 <HAL_Init>


  SystemClock_Config();
 8000588:	f000 f80e 	bl	80005a8 <SystemClock_Config>

  MX_GPIO_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000590:	f000 f864 	bl	800065c <MX_USART1_UART_Init>
  SubghzApp_Init();
 8000594:	f000 f9f4 	bl	8000980 <SubghzApp_Init>
  //Radio.Rx(1000);
  printf("Yes we did 'it!!\n");
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <main+0x24>)
 800059a:	f007 fb7f 	bl	8007c9c <puts>
  while (1)
  {
    /* USER CODE END WHILE */
	  //printf("stm32wle5jc\n");
	  PingPong_Process() ;
 800059e:	f000 fb35 	bl	8000c0c <PingPong_Process>
 80005a2:	e7fc      	b.n	800059e <main+0x1e>
 80005a4:	080089e8 	.word	0x080089e8

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09a      	sub	sp, #104	; 0x68
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2248      	movs	r2, #72	; 0x48
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fa3a 	bl	8007a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ce:	f001 f8e1 	bl	8001794 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff ffa6 	bl	8000524 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xb0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <SystemClock_Config+0xb0>)
 80005e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <SystemClock_Config+0xb0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f4:	2324      	movs	r3, #36	; 0x24
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f8:	2381      	movs	r3, #129	; 0x81
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000600:	2300      	movs	r3, #0
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000604:	23b0      	movs	r3, #176	; 0xb0
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fb69 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800061c:	f000 f871 	bl	8000702 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000620:	234f      	movs	r3, #79	; 0x4f
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f001 feec 	bl	800241c <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064a:	f000 f85a 	bl	8000702 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3768      	adds	r7, #104	; 0x68
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58000400 	.word	0x58000400

0800065c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_USART1_UART_Init+0x94>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_USART1_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART1_UART_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006a6:	f003 f854 	bl	8003752 <HAL_UART_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006b0:	f000 f827 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b4:	2100      	movs	r1, #0
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006b8:	f004 f965 	bl	8004986 <HAL_UARTEx_SetTxFifoThreshold>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006c2:	f000 f81e 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006ca:	f004 f99a 	bl	8004a02 <HAL_UARTEx_SetRxFifoThreshold>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006d4:	f000 f815 	bl	8000702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_USART1_UART_Init+0x90>)
 80006da:	f004 f91c 	bl	8004916 <HAL_UARTEx_DisableFifoMode>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006e4:	f000 f80d 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200003dc 	.word	0x200003dc
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff28 	bl	800054e <LL_AHB2_GRP1_EnableClock>

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}

08000702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000706:	b672      	cpsid	i
}
 8000708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	e7fe      	b.n	800070a <Error_Handler+0x8>

0800070c <__io_putchar>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
int __io_putchar(int ch)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (uint8_t*) &ch,1,10);
 8000714:	1d39      	adds	r1, r7, #4
 8000716:	230a      	movs	r3, #10
 8000718:	2201      	movs	r2, #1
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <__io_putchar+0x20>)
 800071c:	f003 f869 	bl	80037f2 <HAL_UART_Transmit>
	return ch ;
 8000720:	687b      	ldr	r3, [r7, #4]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200003dc 	.word	0x200003dc

08000730 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8000734:	f000 fba4 	bl	8000e80 <BSP_RADIO_Init>
 8000738:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}

0800073e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fbd6 	bl	8000efc <BSP_RADIO_ConfigRFSwitch>
 8000750:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800075e:	f000 fc29 	bl	8000fb4 <BSP_RADIO_GetTxConfig>
 8000762:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}

08000768 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800076c:	f000 fc29 	bl	8000fc2 <BSP_RADIO_IsTCXO>
 8000770:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}

08000776 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800077a:	f000 fc29 	bl	8000fd0 <BSP_RADIO_IsDCDC>
 800077e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8000780:	4618      	mov	r0, r3
 8000782:	bd80      	pop	{r7, pc}

08000784 <LL_AHB2_GRP1_EnableClock>:
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800078c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a8:	68fb      	ldr	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	; 0x58
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2238      	movs	r2, #56	; 0x38
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 f90d 	bl	8007a30 <memset>
  if(huart->Instance==USART1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <HAL_UART_MspInit+0x94>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d12d      	bne.n	800087c <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000820:	2301      	movs	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000824:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000828:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f99a 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800083a:	f7ff ff62 	bl	8000702 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000842:	f7ff ffb7 	bl	80007b4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ff9c 	bl	8000784 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800085c:	2307      	movs	r3, #7
 800085e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <HAL_UART_MspInit+0x98>)
 8000868:	f000 fe1c 	bl	80014a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2024      	movs	r0, #36	; 0x24
 8000872:	f000 fd26 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000876:	2024      	movs	r0, #36	; 0x24
 8000878:	f000 fd3d 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3758      	adds	r7, #88	; 0x58
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40013800 	.word	0x40013800
 8000888:	48000400 	.word	0x48000400

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 fbdf 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <USART1_IRQHandler+0x10>)
 80008e2:	f003 f81d 	bl	8003920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200003dc 	.word	0x200003dc

080008f0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */

  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <SUBGHZ_Radio_IRQHandler+0x10>)
 80008f6:	f002 fd67 	bl	80033c8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000046c 	.word	0x2000046c

08000904 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800091c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SUBGHZ_Init+0x20>)
 800093a:	2208      	movs	r2, #8
 800093c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_SUBGHZ_Init+0x20>)
 8000940:	f002 fac6 	bl	8002ed0 <HAL_SUBGHZ_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800094a:	f7ff feda 	bl	8000702 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000046c 	.word	0x2000046c

08000958 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ffcf 	bl	8000904 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2032      	movs	r0, #50	; 0x32
 800096c:	f000 fca9 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000970:	2032      	movs	r0, #50	; 0x32
 8000972:	f000 fcc0 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  printf( "\n\rPING PONG\n\r");
 8000986:	4843      	ldr	r0, [pc, #268]	; (8000a94 <SubghzApp_Init+0x114>)
 8000988:	f007 f902 	bl	8007b90 <iprintf>
  /* Print APP version*/
  printf( "APP_VERSION= V%X.%X.%X\r\n",
 800098c:	2300      	movs	r3, #0
 800098e:	2201      	movs	r2, #1
 8000990:	2101      	movs	r1, #1
 8000992:	4841      	ldr	r0, [pc, #260]	; (8000a98 <SubghzApp_Init+0x118>)
 8000994:	f007 f8fc 	bl	8007b90 <iprintf>
          (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <SubghzApp_Init+0x11c>)
 800099a:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <SubghzApp_Init+0x120>)
 800099c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <SubghzApp_Init+0x11c>)
 80009a0:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <SubghzApp_Init+0x124>)
 80009a2:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <SubghzApp_Init+0x11c>)
 80009a6:	4a40      	ldr	r2, [pc, #256]	; (8000aa8 <SubghzApp_Init+0x128>)
 80009a8:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <SubghzApp_Init+0x11c>)
 80009ac:	4a3f      	ldr	r2, [pc, #252]	; (8000aac <SubghzApp_Init+0x12c>)
 80009ae:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <SubghzApp_Init+0x11c>)
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <SubghzApp_Init+0x130>)
 80009b4:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <SubghzApp_Init+0x134>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4838      	ldr	r0, [pc, #224]	; (8000a9c <SubghzApp_Init+0x11c>)
 80009bc:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <SubghzApp_Init+0x134>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	483d      	ldr	r0, [pc, #244]	; (8000ab8 <SubghzApp_Init+0x138>)
 80009c4:	4798      	blx	r3

  /* Radio configuration */
  printf( "---------------\n\r");
 80009c6:	483d      	ldr	r0, [pc, #244]	; (8000abc <SubghzApp_Init+0x13c>)
 80009c8:	f007 f8e2 	bl	8007b90 <iprintf>
  printf("LORA_MODULATION\n\r");
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <SubghzApp_Init+0x140>)
 80009ce:	f007 f8df 	bl	8007b90 <iprintf>
  printf( "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 80009d2:	217d      	movs	r1, #125	; 0x7d
 80009d4:	483b      	ldr	r0, [pc, #236]	; (8000ac4 <SubghzApp_Init+0x144>)
 80009d6:	f007 f8db 	bl	8007b90 <iprintf>
  printf( "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 80009da:	2107      	movs	r1, #7
 80009dc:	483a      	ldr	r0, [pc, #232]	; (8000ac8 <SubghzApp_Init+0x148>)
 80009de:	f007 f8d7 	bl	8007b90 <iprintf>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <SubghzApp_Init+0x134>)
 80009e4:	69dc      	ldr	r4, [r3, #28]
 80009e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ea:	9308      	str	r3, [sp, #32]
 80009ec:	2300      	movs	r3, #0
 80009ee:	9307      	str	r3, [sp, #28]
 80009f0:	2300      	movs	r3, #0
 80009f2:	9306      	str	r3, [sp, #24]
 80009f4:	2300      	movs	r3, #0
 80009f6:	9305      	str	r3, [sp, #20]
 80009f8:	2301      	movs	r3, #1
 80009fa:	9304      	str	r3, [sp, #16]
 80009fc:	2300      	movs	r3, #0
 80009fe:	9303      	str	r3, [sp, #12]
 8000a00:	2308      	movs	r3, #8
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	2307      	movs	r3, #7
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2114      	movs	r1, #20
 8000a12:	2001      	movs	r0, #1
 8000a14:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <SubghzApp_Init+0x134>)
 8000a18:	699c      	ldr	r4, [r3, #24]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9308      	str	r3, [sp, #32]
 8000a22:	2300      	movs	r3, #0
 8000a24:	9307      	str	r3, [sp, #28]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9306      	str	r3, [sp, #24]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	9305      	str	r3, [sp, #20]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9304      	str	r3, [sp, #16]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9303      	str	r3, [sp, #12]
 8000a36:	2305      	movs	r3, #5
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2207      	movs	r2, #7
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <SubghzApp_Init+0x134>)
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a50:	21ff      	movs	r1, #255	; 0xff
 8000a52:	2001      	movs	r0, #1
 8000a54:	4798      	blx	r3

  /* LED initialization*/
 ;
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <SubghzApp_Init+0x134>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4798      	blx	r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	0d9b      	lsrs	r3, r3, #22
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <SubghzApp_Init+0x14c>)
 8000a64:	601a      	str	r2, [r3, #0]
  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4819      	ldr	r0, [pc, #100]	; (8000ad0 <SubghzApp_Init+0x150>)
 8000a6c:	f006 ffe0 	bl	8007a30 <memset>

  printf( "rand=%ld\n\r", random_delay);
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <SubghzApp_Init+0x14c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <SubghzApp_Init+0x154>)
 8000a78:	f007 f88a 	bl	8007b90 <iprintf>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <SubghzApp_Init+0x134>)
 8000a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <SubghzApp_Init+0x14c>)
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 8000a88:	4610      	mov	r0, r2
 8000a8a:	4798      	blx	r3

}
 8000a8c:	bf00      	nop
 8000a8e:	3704      	adds	r7, #4
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	080089fc 	.word	0x080089fc
 8000a98:	08008a0c 	.word	0x08008a0c
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	08000ad9 	.word	0x08000ad9
 8000aa4:	08000af5 	.word	0x08000af5
 8000aa8:	08000bb9 	.word	0x08000bb9
 8000aac:	08000bd5 	.word	0x08000bd5
 8000ab0:	08000bf1 	.word	0x08000bf1
 8000ab4:	08008c40 	.word	0x08008c40
 8000ab8:	33bca100 	.word	0x33bca100
 8000abc:	08008a28 	.word	0x08008a28
 8000ac0:	08008a3c 	.word	0x08008a3c
 8000ac4:	08008a50 	.word	0x08008a50
 8000ac8:	08008a64 	.word	0x08008a64
 8000acc:	200002b4 	.word	0x200002b4
 8000ad0:	200001b0 	.word	0x200001b0
 8000ad4:	08008a74 	.word	0x08008a74

08000ad8 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  printf( "OnTxDone\n\r");
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <OnTxDone+0x14>)
 8000ade:	f007 f857 	bl	8007b90 <iprintf>
  /* Update the State of the FSM*/
  State = TX;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <OnTxDone+0x18>)
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	08008a80 	.word	0x08008a80
 8000af0:	200000ac 	.word	0x200000ac

08000af4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	817b      	strh	r3, [r7, #10]
 8000b06:	460b      	mov	r3, r1
 8000b08:	813b      	strh	r3, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN OnRxDone */
	printf( "OnRxDone\n\r");
 8000b0e:	4822      	ldr	r0, [pc, #136]	; (8000b98 <OnRxDone+0xa4>)
 8000b10:	f007 f83e 	bl	8007b90 <iprintf>
	char * recv = (char*) malloc(sizeof(char) * (size +1));
 8000b14:	897b      	ldrh	r3, [r7, #10]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 ff6b 	bl	80079f4 <malloc>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	617b      	str	r3, [r7, #20]
	memcpy(recv , payload , size) ;
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	461a      	mov	r2, r3
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	6978      	ldr	r0, [r7, #20]
 8000b2a:	f006 ff73 	bl	8007a14 <memcpy>
	recv[size] = '\0' ;
 8000b2e:	897b      	ldrh	r3, [r7, #10]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	printf( "recv : %s\n\r" , recv);
 8000b38:	6979      	ldr	r1, [r7, #20]
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <OnRxDone+0xa8>)
 8000b3c:	f007 f828 	bl	8007b90 <iprintf>

	free(recv) ;
 8000b40:	6978      	ldr	r0, [r7, #20]
 8000b42:	f006 ff5f 	bl	8007a04 <free>

	printf( "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 8000b46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b4a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <OnRxDone+0xac>)
 8000b52:	f007 f81d 	bl	8007b90 <iprintf>
    /* Record payload Signal to noise ratio in Lora*/
    SnrValue = LoraSnr_FskCfo;
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <OnRxDone+0xb0>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	7013      	strb	r3, [r2, #0]

    /* Update the State of the FSM*/
    State = RX;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <OnRxDone+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
    /* Clear BufferRx*/
	memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	2100      	movs	r1, #0
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <OnRxDone+0xb8>)
 8000b68:	f006 ff62 	bl	8007a30 <memset>
	/* Record payload size*/
	RxBufferSize = size;
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <OnRxDone+0xbc>)
 8000b6e:	897b      	ldrh	r3, [r7, #10]
 8000b70:	8013      	strh	r3, [r2, #0]
	if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <OnRxDone+0xbc>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d806      	bhi.n	8000b88 <OnRxDone+0x94>
	{
		memcpy(BufferRx, payload, RxBufferSize);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <OnRxDone+0xbc>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68f9      	ldr	r1, [r7, #12]
 8000b82:	480a      	ldr	r0, [pc, #40]	; (8000bac <OnRxDone+0xb8>)
 8000b84:	f006 ff46 	bl	8007a14 <memcpy>
	}
	/* Record Received Signal Strength*/
	RssiValue = rssi;
 8000b88:	893b      	ldrh	r3, [r7, #8]
 8000b8a:	b25a      	sxtb	r2, r3
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <OnRxDone+0xc0>)
 8000b8e:	701a      	strb	r2, [r3, #0]
	/* Record payload content*/

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08008a8c 	.word	0x08008a8c
 8000b9c:	08008a98 	.word	0x08008a98
 8000ba0:	08008aa4 	.word	0x08008aa4
 8000ba4:	200002b3 	.word	0x200002b3
 8000ba8:	200000ac 	.word	0x200000ac
 8000bac:	200000b0 	.word	0x200000b0
 8000bb0:	200002b0 	.word	0x200002b0
 8000bb4:	200002b2 	.word	0x200002b2

08000bb8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  printf( "OnTxTimeout\n\r");
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <OnTxTimeout+0x14>)
 8000bbe:	f006 ffe7 	bl	8007b90 <iprintf>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <OnTxTimeout+0x18>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	701a      	strb	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	08008ac8 	.word	0x08008ac8
 8000bd0:	200000ac 	.word	0x200000ac

08000bd4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  printf("OnRxTimeout\n\r");
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <OnRxTimeout+0x14>)
 8000bda:	f006 ffd9 	bl	8007b90 <iprintf>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <OnRxTimeout+0x18>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
 // UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
  /* USER CODE END OnRxTimeout */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08008ad8 	.word	0x08008ad8
 8000bec:	200000ac 	.word	0x200000ac

08000bf0 <OnRxError>:

static void OnRxError(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  printf( "OnRxError\n\r");
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <OnRxError+0x14>)
 8000bf6:	f006 ffcb 	bl	8007b90 <iprintf>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <OnRxError+0x18>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08008ae8 	.word	0x08008ae8
 8000c08:	200000ac 	.word	0x200000ac

08000c0c <PingPong_Process>:

uint8_t state  = STATE_LISTEN ;


void PingPong_Process(void)
{
 8000c0c:	b5b0      	push	{r4, r5, r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  static uint8_t send_counter = 0 ;
  //static uint8_t recv_counter = 0 ;

  Radio.Sleep();
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <PingPong_Process+0x8c>)
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	4798      	blx	r3

  switch(state)
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <PingPong_Process+0x90>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <PingPong_Process+0x18>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d010      	beq.n	8000c44 <PingPong_Process+0x38>
 8000c22:	e031      	b.n	8000c88 <PingPong_Process+0x7c>
  {
  	  case STATE_LISTEN :
  		  Radio.Rx(2500) ;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <PingPong_Process+0x8c>)
 8000c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c28:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c2c:	4798      	blx	r3

  		  printf( "enter recv state\n\r");
 8000c2e:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <PingPong_Process+0x94>)
 8000c30:	f006 ffae 	bl	8007b90 <iprintf>

  		  HAL_Delay(2500);
 8000c34:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000c38:	f000 fa48 	bl	80010cc <HAL_Delay>
  		  state = STATE_TRANSMIT ;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <PingPong_Process+0x90>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
  		  break ;
 8000c42:	e026      	b.n	8000c92 <PingPong_Process+0x86>
  	  case STATE_TRANSMIT :

  		  Radio.Send((uint8_t*)str,strlen(str)) ;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <PingPong_Process+0x8c>)
 8000c46:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <PingPong_Process+0x98>)
 8000c4a:	681d      	ldr	r5, [r3, #0]
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <PingPong_Process+0x98>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fa95 	bl	8000180 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	47a0      	blx	r4
  		  HAL_Delay(200);
 8000c60:	20c8      	movs	r0, #200	; 0xc8
 8000c62:	f000 fa33 	bl	80010cc <HAL_Delay>
  		  //printf( "tran state\n\r");
  		  send_counter++ ;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <PingPong_Process+0x9c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <PingPong_Process+0x9c>)
 8000c70:	701a      	strb	r2, [r3, #0]

  		  if(send_counter >= 10)
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <PingPong_Process+0x9c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b09      	cmp	r3, #9
 8000c78:	d90a      	bls.n	8000c90 <PingPong_Process+0x84>
  		  {
  			  state = STATE_LISTEN ;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <PingPong_Process+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  			  send_counter = 0;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <PingPong_Process+0x9c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
  		  }
  		  break ;
 8000c86:	e003      	b.n	8000c90 <PingPong_Process+0x84>
  	  default :
  		  printf( "error state\n\r");
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <PingPong_Process+0xa0>)
 8000c8a:	f006 ff81 	bl	8007b90 <iprintf>
  		  break ;
 8000c8e:	e000      	b.n	8000c92 <PingPong_Process+0x86>
  		  break ;
 8000c90:	bf00      	nop
  }

}
 8000c92:	bf00      	nop
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08008c40 	.word	0x08008c40
 8000c9c:	200002b8 	.word	0x200002b8
 8000ca0:	08008b04 	.word	0x08008b04
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200002b9 	.word	0x200002b9
 8000cac:	08008b18 	.word	0x08008b18

08000cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc2:	f3af 8000 	nop.w
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
	}

return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd01 	bl	800070c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <_write+0x12>
	}
	return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
	return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f006 fdf4 	bl	80079a0 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20008000 	.word	0x20008000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	200002bc 	.word	0x200002bc
 8000dec:	200004e8 	.word	0x200004e8

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fff6 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f006 fdbf 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff fba7 	bl	8000580 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e40:	08008e20 	.word	0x08008e20
  ldr r2, =_sbss
 8000e44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e48:	200004e4 	.word	0x200004e4

08000e4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>

08000e4e <LL_AHB2_GRP1_EnableClock>:
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000e94:	2004      	movs	r0, #4
 8000e96:	f7ff ffda 	bl	8000e4e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000eb0:	f000 faf8 	bl	80014a4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000ebe:	f000 faf1 	bl	80014a4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000ecc:	f000 faea 	bl	80014a4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000ed6:	f000 fc45 	bl	8001764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000ee0:	f000 fc40 	bl	8001764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <BSP_RADIO_Init+0x78>)
 8000eea:	f000 fc3b 	bl	8001764 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	48000800 	.word	0x48000800

08000efc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d84b      	bhi.n	8000fa4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f45 	.word	0x08000f45
 8000f1c:	08000f65 	.word	0x08000f65
 8000f20:	08000f85 	.word	0x08000f85
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2108      	movs	r1, #8
 8000f28:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f2a:	f000 fc1b 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f34:	f000 fc16 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f3e:	f000 fc11 	bl	8001764 <HAL_GPIO_WritePin>
      break;      
 8000f42:	e030      	b.n	8000fa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2108      	movs	r1, #8
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f4a:	f000 fc0b 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2110      	movs	r1, #16
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f54:	f000 fc06 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f5e:	f000 fc01 	bl	8001764 <HAL_GPIO_WritePin>
      break;
 8000f62:	e020      	b.n	8000fa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2108      	movs	r1, #8
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f6a:	f000 fbfb 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2110      	movs	r1, #16
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f74:	f000 fbf6 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f7e:	f000 fbf1 	bl	8001764 <HAL_GPIO_WritePin>
      break;
 8000f82:	e010      	b.n	8000fa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2108      	movs	r1, #8
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f8a:	f000 fbeb 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2110      	movs	r1, #16
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f94:	f000 fbe6 	bl	8001764 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f9e:	f000 fbe1 	bl	8001764 <HAL_GPIO_WritePin>
      break;
 8000fa2:	e000      	b.n	8000fa6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000fa4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	48000800 	.word	0x48000800

08000fb4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f95e 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ff0:	f001 fbd8 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_Init+0x3c>)
 8000ff8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f810 	bl	8001020 <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	e001      	b.n	8001010 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100c:	f7ff fbea 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d024      	beq.n	800107e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001034:	f001 fbb6 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_InitTick+0x6c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	fbb3 f3f1 	udiv	r3, r3, r1
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f960 	bl	8001312 <HAL_SYSTICK_Config>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10f      	bne.n	8001078 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	d809      	bhi.n	8001072 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105e:	2200      	movs	r2, #0
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	f000 f92c 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_InitTick+0x70>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e007      	b.n	8001082 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e004      	b.n	8001082 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000000c 	.word	0x2000000c
 8001090:	20000008 	.word	0x20000008

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x1c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x20>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <HAL_IncTick+0x20>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000478 	.word	0x20000478

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <HAL_GetTick+0x10>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000478 	.word	0x20000478

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff fff0 	bl	80010b8 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffe0 	bl	80010b8 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4906      	ldr	r1, [pc, #24]	; (80011ac <__NVIC_EnableIRQ+0x34>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff90 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff2d 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff44 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff92 	bl	8001204 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff61 	bl	80011b0 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff37 	bl	8001178 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa4 	bl	8001268 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e04f      	b.n	80013dc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d008      	beq.n	800135a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e040      	b.n	80013dc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 020e 	bic.w	r2, r2, #14
 8001368:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f003 021c 	and.w	r2, r3, #28
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	2101      	movs	r1, #1
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d005      	beq.n	800140a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2204      	movs	r2, #4
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e047      	b.n	800149a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 020e 	bic.w	r2, r2, #14
 8001418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 021c 	and.w	r2, r3, #28
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
    }
  }
  return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b2:	e140      	b.n	8001736 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8132 	beq.w	8001730 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d005      	beq.n	80014e4 <HAL_GPIO_Init+0x40>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d130      	bne.n	8001546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151a:	2201      	movs	r2, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 0201 	and.w	r2, r3, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b03      	cmp	r3, #3
 8001550:	d017      	beq.n	8001582 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d123      	bne.n	80015d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0203 	and.w	r2, r3, #3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 808c 	beq.w	8001730 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001618:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x1bc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_GPIO_Init+0x2b4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x1b8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a43      	ldr	r2, [pc, #268]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x1b4>
 8001654:	2302      	movs	r3, #2
 8001656:	e004      	b.n	8001662 <HAL_GPIO_Init+0x1be>
 8001658:	2307      	movs	r3, #7
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x1be>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_GPIO_Init+0x1be>
 8001660:	2300      	movs	r3, #0
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	4093      	lsls	r3, r2
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001686:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80016a6:	4a2e      	ldr	r2, [pc, #184]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016d4:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172a:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f aeb7 	bne.w	80014b4 <HAL_GPIO_Init+0x10>
  }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800
 8001760:	58000800 	.word	0x58000800

08001764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001780:	e002      	b.n	8001788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	58000400 	.word	0x58000400

080017b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_PWREx_GetVoltageRange+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	58000400 	.word	0x58000400

080017c8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d8:	d101      	bne.n	80017de <LL_PWR_IsEnabledBkUpAccess+0x16>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <LL_RCC_HSE_EnableTcxo>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <LL_RCC_HSE_DisableTcxo>:
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001836:	d101      	bne.n	800183c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <LL_RCC_HSE_Enable>:
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <LL_RCC_HSE_Disable>:
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_RCC_HSE_IsReady>:
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001890:	d101      	bne.n	8001896 <LL_RCC_HSE_IsReady+0x18>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_RCC_HSE_IsReady+0x1a>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <LL_RCC_HSI_Enable>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_HSI_Disable>:
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_HSI_IsReady>:
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d101      	bne.n	80018f0 <LL_RCC_HSI_IsReady+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_RCC_HSI_IsReady+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <LL_RCC_HSI_SetCalibTrimming>:
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	061b      	lsls	r3, r3, #24
 8001910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d101      	bne.n	800193a <LL_RCC_LSE_IsReady+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_RCC_LSE_IsReady+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d101      	bne.n	800199c <LL_RCC_LSI_IsReady+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_RCC_LSI_IsReady+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d101      	bne.n	80019f4 <LL_RCC_MSI_IsReady+0x16>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_RCC_MSI_IsReady+0x18>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d101      	bne.n	8001a14 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ae6:	f023 020f 	bic.w	r2, r3, #15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bf4:	d101      	bne.n	8001bfa <LL_RCC_PLL_IsReady+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_RCC_PLL_IsReady+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d101      	bne.n	8001c76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d101      	bne.n	8001c9a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb6:	d101      	bne.n	8001cbc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cd8:	d101      	bne.n	8001cde <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e38a      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	f7ff fece 	bl	8001a9a <LL_RCC_GetSysClkSource>
 8001cfe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	f7ff ffa2 	bl	8001c48 <LL_RCC_PLL_GetMainSource>
 8001d04:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80c9 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3e>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d17b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d178      	bne.n	8001e18 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d26:	f7ff fe5a 	bl	80019de <LL_RCC_MSI_IsReady>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x54>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e369      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x72>
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	e006      	b.n	8001d68 <HAL_RCC_OscConfig+0x80>
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d222      	bcs.n	8001db2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fd4f 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e347      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fe4e 	bl	8001a4c <LL_RCC_MSI_SetCalibTrimming>
 8001db0:	e021      	b.n	8001df6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fe35 	bl	8001a4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fd14 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e30c      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001df6:	f000 fcd5 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4ab4      	ldr	r2, [pc, #720]	; (80020d0 <HAL_RCC_OscConfig+0x3e8>)
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e00:	4bb4      	ldr	r3, [pc, #720]	; (80020d4 <HAL_RCC_OscConfig+0x3ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f90b 	bl	8001020 <HAL_InitTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d047      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	e2fb      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d02c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e20:	f7ff fdc1 	bl	80019a6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e24:	f7ff f948 	bl	80010b8 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f944 	bl	80010b8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e2e8      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e3e:	f7ff fdce 	bl	80019de <LL_RCC_MSI_IsReady>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f1      	beq.n	8001e2c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fdea 	bl	8001a4c <LL_RCC_MSI_SetCalibTrimming>
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e7a:	f7ff fda2 	bl	80019c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f91b 	bl	80010b8 <HAL_GetTick>
 8001e82:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e86:	f7ff f917 	bl	80010b8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e2bb      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e98:	f7ff fda1 	bl	80019de <LL_RCC_MSI_IsReady>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f1      	bne.n	8001e86 <HAL_RCC_OscConfig+0x19e>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ea4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d05f      	beq.n	8001f72 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1dc>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d10a      	bne.n	8001eda <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	f7ff fcdb 	bl	800187e <LL_RCC_HSE_IsReady>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d050      	beq.n	8001f70 <HAL_RCC_OscConfig+0x288>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d14c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e29a      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x218>
 8001efa:	f7ff fca4 	bl	8001846 <LL_RCC_HSE_Enable>
 8001efe:	e00d      	b.n	8001f1c <HAL_RCC_OscConfig+0x234>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001f08:	d104      	bne.n	8001f14 <HAL_RCC_OscConfig+0x22c>
 8001f0a:	f7ff fc6f 	bl	80017ec <LL_RCC_HSE_EnableTcxo>
 8001f0e:	f7ff fc9a 	bl	8001846 <LL_RCC_HSE_Enable>
 8001f12:	e003      	b.n	8001f1c <HAL_RCC_OscConfig+0x234>
 8001f14:	f7ff fca5 	bl	8001862 <LL_RCC_HSE_Disable>
 8001f18:	f7ff fc76 	bl	8001808 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d012      	beq.n	8001f4a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f8c8 	bl	80010b8 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f8c4 	bl	80010b8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e268      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f3e:	f7ff fc9e 	bl	800187e <LL_RCC_HSE_IsReady>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f1      	beq.n	8001f2c <HAL_RCC_OscConfig+0x244>
 8001f48:	e013      	b.n	8001f72 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f8b5 	bl	80010b8 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff f8b1 	bl	80010b8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e255      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f64:	f7ff fc8b 	bl	800187e <LL_RCC_HSE_IsReady>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f1      	bne.n	8001f52 <HAL_RCC_OscConfig+0x26a>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04b      	beq.n	8002016 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2a8>
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d113      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d110      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	f7ff fca2 	bl	80018d8 <LL_RCC_HSI_IsReady>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2be>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e234      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fca5 	bl	80018fa <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb0:	e031      	b.n	8002016 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fba:	f7ff fc71 	bl	80018a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f87b 	bl	80010b8 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f877 	bl	80010b8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e21b      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fd8:	f7ff fc7e 	bl	80018d8 <LL_RCC_HSI_IsReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f1      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fc87 	bl	80018fa <LL_RCC_HSI_SetCalibTrimming>
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	f7ff fc65 	bl	80018bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f861 	bl	80010b8 <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f85d 	bl	80010b8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e201      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800200c:	f7ff fc64 	bl	80018d8 <LL_RCC_HSI_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f1      	bne.n	8001ffa <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06e      	beq.n	8002100 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d056      	beq.n	80020d8 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	429a      	cmp	r2, r3
 8002040:	d031      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1da      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002064:	f7ff fc7e 	bl	8001964 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002068:	f7ff f826 	bl	80010b8 <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f822 	bl	80010b8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b11      	cmp	r3, #17
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1c6      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002082:	f7ff fc7f 	bl	8001984 <LL_RCC_LSI_IsReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f1      	bne.n	8002070 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002094:	f023 0210 	bic.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a6:	f7ff fc4d 	bl	8001944 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff f805 	bl	80010b8 <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff f801 	bl	80010b8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b11      	cmp	r3, #17
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1a5      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80020c4:	f7ff fc5e 	bl	8001984 <LL_RCC_LSI_IsReady>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f1      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3ca>
 80020ce:	e017      	b.n	8002100 <HAL_RCC_OscConfig+0x418>
 80020d0:	20000004 	.word	0x20000004
 80020d4:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	f7ff fc44 	bl	8001964 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe ffec 	bl	80010b8 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe ffe8 	bl	80010b8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e18c      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80020f6:	f7ff fc45 	bl	8001984 <LL_RCC_LSI_IsReady>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f1      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80d8 	beq.w	80022be <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800210e:	f7ff fb5b 	bl	80017c8 <LL_PWR_IsEnabledBkUpAccess>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d113      	bne.n	8002140 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002118:	f7ff fb3c 	bl	8001794 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7fe ffcc 	bl	80010b8 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002124:	f7fe ffc8 	bl	80010b8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e16c      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002136:	f7ff fb47 	bl	80017c8 <LL_PWR_IsEnabledBkUpAccess>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f1      	beq.n	8002124 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d07b      	beq.n	8002240 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b85      	cmp	r3, #133	; 0x85
 800214e:	d003      	beq.n	8002158 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d109      	bne.n	800216c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe ffa4 	bl	80010b8 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ff96 	bl	80010b8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e138      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800219e:	f7ff fbc0 	bl	8001922 <LL_RCC_LSE_IsReady>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b81      	cmp	r3, #129	; 0x81
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b85      	cmp	r3, #133	; 0x85
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff7e 	bl	80010b8 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe ff70 	bl	80010b8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e112      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ec      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80021fa:	e060      	b.n	80022be <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff5c 	bl	80010b8 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ff4e 	bl	80010b8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0f0      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ec      	bne.n	8002218 <HAL_RCC_OscConfig+0x530>
 800223e:	e03e      	b.n	80022be <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe ff3a 	bl	80010b8 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800225a:	e00a      	b.n	8002272 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f7fe ff2c 	bl	80010b8 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0ce      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ec      	bne.n	800225c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe ff19 	bl	80010b8 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ff0b 	bl	80010b8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0ad      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022b4:	f7ff fb35 	bl	8001922 <LL_RCC_LSE_IsReady>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ef      	bne.n	800229e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a3 	beq.w	800240e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d076      	beq.n	80023bc <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d14b      	bne.n	800236e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	f7ff fc76 	bl	8001bc6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe feed 	bl	80010b8 <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fee9 	bl	80010b8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b0a      	cmp	r3, #10
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e08d      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80022f4:	f7ff fc75 	bl	8001be2 <LL_RCC_PLL_IsReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f1      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_OscConfig+0x730>)
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232a:	430a      	orrs	r2, r1
 800232c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	f7ff fc39 	bl	8001baa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe feb6 	bl	80010b8 <HAL_GetTick>
 800234c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe feb2 	bl	80010b8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b0a      	cmp	r3, #10
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e056      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002362:	f7ff fc3e 	bl	8001be2 <LL_RCC_PLL_IsReady>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f1      	beq.n	8002350 <HAL_RCC_OscConfig+0x668>
 800236c:	e04f      	b.n	800240e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	f7ff fc2a 	bl	8001bc6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe fe8f 	bl	80010b8 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fe8b 	bl	80010b8 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b0a      	cmp	r3, #10
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e02f      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80023b0:	f7ff fc17 	bl	8001be2 <LL_RCC_PLL_IsReady>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f1      	bne.n	800239e <HAL_RCC_OscConfig+0x6b6>
 80023ba:	e028      	b.n	800240e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e023      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 0203 	and.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	429a      	cmp	r2, r3
 80023dc:	d115      	bne.n	800240a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	11c1808c 	.word	0x11c1808c

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e10f      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d91b      	bls.n	8002476 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4984      	ldr	r1, [pc, #528]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244e:	f7fe fe33 	bl	80010b8 <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002454:	e008      	b.n	8002468 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002456:	f7fe fe2f 	bl	80010b8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0f3      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fb12 	bl	8001ab0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800248c:	f7fe fe14 	bl	80010b8 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002494:	f7fe fe10 	bl	80010b8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0d4      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80024a6:	f7ff fbda 	bl	8001c5e <LL_RCC_IsActiveFlag_HPRE>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f1      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d016      	beq.n	80024ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fb08 	bl	8001ad6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024c6:	f7fe fdf7 	bl	80010b8 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024ce:	f7fe fdf3 	bl	80010b8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0b7      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024e0:	f7ff fbce 	bl	8001c80 <LL_RCC_IsActiveFlag_SHDHPRE>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f1      	beq.n	80024ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fb01 	bl	8001b02 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002500:	f7fe fdda 	bl	80010b8 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002508:	f7fe fdd6 	bl	80010b8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e09a      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800251a:	f7ff fbc3 	bl	8001ca4 <LL_RCC_IsActiveFlag_PPRE1>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f1      	beq.n	8002508 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff faf6 	bl	8001b28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800253c:	f7fe fdbc 	bl	80010b8 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002544:	f7fe fdb8 	bl	80010b8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e07c      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002556:	f7ff fbb6 	bl	8001cc6 <LL_RCC_IsActiveFlag_PPRE2>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f1      	beq.n	8002544 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d043      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d106      	bne.n	8002582 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002574:	f7ff f983 	bl	800187e <LL_RCC_HSE_IsReady>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11e      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e066      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d106      	bne.n	8002598 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800258a:	f7ff fb2a 	bl	8001be2 <LL_RCC_PLL_IsReady>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d113      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e05b      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80025a0:	f7ff fa1d 	bl	80019de <LL_RCC_MSI_IsReady>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e050      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80025ae:	f7ff f993 	bl	80018d8 <LL_RCC_HSI_IsReady>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e049      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fa57 	bl	8001a74 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c6:	f7fe fd77 	bl	80010b8 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ce:	f7fe fd73 	bl	80010b8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e035      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	f7ff fa59 	bl	8001a9a <LL_RCC_GetSysClkSource>
 80025e8:	4602      	mov	r2, r0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1ec      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d21b      	bcs.n	800263a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4913      	ldr	r1, [pc, #76]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002612:	f7fe fd51 	bl	80010b8 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002618:	e008      	b.n	800262c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800261a:	f7fe fd4d 	bl	80010b8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e011      	b.n	8002650 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x23c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d1ef      	bne.n	800261a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800263a:	f000 f8b3 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 800263e:	4603      	mov	r3, r0
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <HAL_RCC_ClockConfig+0x240>)
 8002642:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fce9 	bl	8001020 <HAL_InitTick>
 800264e:	4603      	mov	r3, r0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	58004000 	.word	0x58004000
 800265c:	20000004 	.word	0x20000004
 8002660:	20000008 	.word	0x20000008

08002664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	f7ff fa12 	bl	8001a9a <LL_RCC_GetSysClkSource>
 8002676:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002678:	f7ff fae6 	bl	8001c48 <LL_RCC_PLL_GetMainSource>
 800267c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x2c>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d139      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d136      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002690:	f7ff f9b5 	bl	80019fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_GetSysClockFreq+0x62>
 800269a:	f7ff f9b0 	bl	80019fe <LL_RCC_MSI_IsEnabledRangeSelect>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x4e>
 80026a4:	f7ff f9bb 	bl	8001a1e <LL_RCC_MSI_GetRange>
 80026a8:	4603      	mov	r3, r0
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	e005      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x5a>
 80026b2:	f7ff f9bf 	bl	8001a34 <LL_RCC_MSI_GetRangeAfterStandby>
 80026b6:	4603      	mov	r3, r0
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a36      	ldr	r2, [pc, #216]	; (8002798 <HAL_RCC_GetSysClockFreq+0x134>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	e014      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x8c>
 80026c6:	f7ff f99a 	bl	80019fe <LL_RCC_MSI_IsEnabledRangeSelect>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x7a>
 80026d0:	f7ff f9a5 	bl	8001a1e <LL_RCC_MSI_GetRange>
 80026d4:	4603      	mov	r3, r0
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	e005      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x86>
 80026de:	f7ff f9a9 	bl	8001a34 <LL_RCC_MSI_GetRangeAfterStandby>
 80026e2:	4603      	mov	r3, r0
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <HAL_RCC_GetSysClockFreq+0x134>)
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d115      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026fc:	e012      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d102      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_RCC_GetSysClockFreq+0x138>)
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e00c      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d109      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002710:	f7ff f888 	bl	8001824 <LL_RCC_HSE_IsEnabledDiv2>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_RCC_GetSysClockFreq+0x138>)
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e001      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002722:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	f7ff f9b9 	bl	8001a9a <LL_RCC_GetSysClkSource>
 8002728:	4603      	mov	r3, r0
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d12f      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800272e:	f7ff fa8b 	bl	8001c48 <LL_RCC_PLL_GetMainSource>
 8002732:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0xde>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xe4>
 8002740:	e00d      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_RCC_GetSysClockFreq+0x138>)
 8002744:	60fb      	str	r3, [r7, #12]
        break;
 8002746:	e00d      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002748:	f7ff f86c 	bl	8001824 <LL_RCC_HSE_IsEnabledDiv2>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_RCC_GetSysClockFreq+0x138>)
 8002754:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800275a:	60fb      	str	r3, [r7, #12]
        break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	60fb      	str	r3, [r7, #12]
        break;
 8002762:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002764:	f7ff fa4e 	bl	8001c04 <LL_RCC_PLL_GetN>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	fb03 f402 	mul.w	r4, r3, r2
 8002770:	f7ff fa5f 	bl	8001c32 <LL_RCC_PLL_GetDivider>
 8002774:	4603      	mov	r3, r0
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	3301      	adds	r3, #1
 800277a:	fbb4 f4f3 	udiv	r4, r4, r3
 800277e:	f7ff fa4d 	bl	8001c1c <LL_RCC_PLL_GetR>
 8002782:	4603      	mov	r3, r0
 8002784:	0f5b      	lsrs	r3, r3, #29
 8002786:	3301      	adds	r3, #1
 8002788:	fbb4 f3f3 	udiv	r3, r4, r3
 800278c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800278e:	697b      	ldr	r3, [r7, #20]
}
 8002790:	4618      	mov	r0, r3
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	08008bd8 	.word	0x08008bd8
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	01e84800 	.word	0x01e84800

080027a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b598      	push	{r3, r4, r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80027a8:	f7ff ff5c 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80027ac:	4604      	mov	r4, r0
 80027ae:	f7ff f9ce 	bl	8001b4e <LL_RCC_GetAHBPrescaler>
 80027b2:	4603      	mov	r3, r0
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd98      	pop	{r3, r4, r7, pc}
 80027c8:	08008b78 	.word	0x08008b78

080027cc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b598      	push	{r3, r4, r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027d0:	f7ff ffe8 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4604      	mov	r4, r0
 80027d6:	f7ff f9d2 	bl	8001b7e <LL_RCC_GetAPB1Prescaler>
 80027da:	4603      	mov	r3, r0
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	4a03      	ldr	r2, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd98      	pop	{r3, r4, r7, pc}
 80027ec:	08008bb8 	.word	0x08008bb8

080027f0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b598      	push	{r3, r4, r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80027f4:	f7ff ffd6 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027f8:	4604      	mov	r4, r0
 80027fa:	f7ff f9cb 	bl	8001b94 <LL_RCC_GetAPB2Prescaler>
 80027fe:	4603      	mov	r3, r0
 8002800:	0adb      	lsrs	r3, r3, #11
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	fa24 f303 	lsr.w	r3, r4, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd98      	pop	{r3, r4, r7, pc}
 8002810:	08008bb8 	.word	0x08008bb8

08002814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800282c:	f7ff f99a 	bl	8001b64 <LL_RCC_GetAHB3Prescaler>
 8002830:	4603      	mov	r3, r0
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9c      	lsrs	r4, r3, #18
 8002850:	f7fe ffae 	bl	80017b0 <HAL_PWREx_GetVoltageRange>
 8002854:	4603      	mov	r3, r0
 8002856:	4619      	mov	r1, r3
 8002858:	4620      	mov	r0, r4
 800285a:	f000 f80b 	bl	8002874 <RCC_SetFlashLatency>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	08008bd8 	.word	0x08008bd8
 800286c:	08008b78 	.word	0x08008b78
 8002870:	431bde83 	.word	0x431bde83

08002874 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800287e:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <RCC_SetFlashLatency+0xfc>)
 8002880:	f107 0320 	add.w	r3, r7, #32
 8002884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002888:	6018      	str	r0, [r3, #0]
 800288a:	3304      	adds	r3, #4
 800288c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <RCC_SetFlashLatency+0x100>)
 8002890:	f107 0318 	add.w	r3, r7, #24
 8002894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002898:	6018      	str	r0, [r3, #0]
 800289a:	3304      	adds	r3, #4
 800289c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800289e:	4a36      	ldr	r2, [pc, #216]	; (8002978 <RCC_SetFlashLatency+0x104>)
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d11d      	bne.n	80028f2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ba:	e016      	b.n	80028ea <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028c4:	4413      	add	r3, r2
 80028c6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d808      	bhi.n	80028e4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028da:	4413      	add	r3, r2
 80028dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028e2:	e023      	b.n	800292c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	3301      	adds	r3, #1
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d9e5      	bls.n	80028bc <RCC_SetFlashLatency+0x48>
 80028f0:	e01c      	b.n	800292c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	e016      	b.n	8002926 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002900:	4413      	add	r3, r2
 8002902:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4293      	cmp	r3, r2
 800290c:	d808      	bhi.n	8002920 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002916:	4413      	add	r3, r2
 8002918:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800291e:	e005      	b.n	800292c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	3301      	adds	r3, #1
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	2b02      	cmp	r3, #2
 800292a:	d9e5      	bls.n	80028f8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <RCC_SetFlashLatency+0x108>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 0207 	bic.w	r2, r3, #7
 8002934:	4911      	ldr	r1, [pc, #68]	; (800297c <RCC_SetFlashLatency+0x108>)
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800293c:	f7fe fbbc 	bl	80010b8 <HAL_GetTick>
 8002940:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002942:	e008      	b.n	8002956 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002944:	f7fe fbb8 	bl	80010b8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e007      	b.n	8002966 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <RCC_SetFlashLatency+0x108>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002960:	429a      	cmp	r2, r3
 8002962:	d1ef      	bne.n	8002944 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3738      	adds	r7, #56	; 0x38
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	08008b28 	.word	0x08008b28
 8002974:	08008b30 	.word	0x08008b30
 8002978:	08008b38 	.word	0x08008b38
 800297c:	58004000 	.word	0x58004000

08002980 <LL_RCC_LSE_IsReady>:
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d101      	bne.n	8002998 <LL_RCC_LSE_IsReady+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_RCC_LSE_IsReady+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_SetUSARTClockSource>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <LL_RCC_SetI2SClockSource>:
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_SetLPUARTClockSource>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_SetI2CClockSource>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	401a      	ands	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_SetLPTIMClockSource>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_SetRNGClockSource>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_SetADCClockSource>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_SetRTCClockSource>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_GetRTCClockSource>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_ForceBackupDomainReset>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002b74:	2300      	movs	r3, #0
 8002b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b78:	2300      	movs	r3, #0
 8002b7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d058      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002b88:	f7fe fe04 	bl	8001794 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fa94 	bl	80010b8 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b92:	e009      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b94:	f7fe fa90 	bl	80010b8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba6:	e006      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ba8:	4b7b      	ldr	r3, [pc, #492]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d13c      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002bbc:	f7ff ffa7 	bl	8002b0e <LL_RCC_GetRTCClockSource>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d00f      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd8:	f7ff ffa5 	bl	8002b26 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bdc:	f7ff ffb3 	bl	8002b46 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d014      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa60 	bl	80010b8 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa5c 	bl	80010b8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d902      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	74fb      	strb	r3, [r7, #19]
            break;
 8002c12:	e004      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002c14:	f7ff feb4 	bl	8002980 <LL_RCC_LSE_IsReady>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d1ee      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5b 	bl	8002ae4 <LL_RCC_SetRTCClockSource>
 8002c2e:	e004      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
 8002c34:	e001      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fea9 	bl	80029a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe9e 	bl	80029a2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fec0 	bl	80029fc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fee6 	bl	8002a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fedb 	bl	8002a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fed0 	bl	8002a5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fea9 	bl	8002a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fe9e 	bl	8002a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d004      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fe93 	bl	8002a26 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d011      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fe5e 	bl	80029d2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fea5 	bl	8002a90 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d011      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fea3 	bl	8002aba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	58000400 	.word	0x58000400

08002d9c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dac:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	58000400 	.word	0x58000400

08002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	58000400 	.word	0x58000400

08002de4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	58000400 	.word	0x58000400

08002e04 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0e:	619a      	str	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	58000400 	.word	0x58000400

08002e1c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d101      	bne.n	8002e30 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	58000400 	.word	0x58000400

08002e40 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d101      	bne.n	8002e54 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	58000400 	.word	0x58000400

08002e64 <LL_RCC_RF_DisableReset>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_IsRFUnderReset>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e98:	d101      	bne.n	8002e9e <LL_RCC_IsRFUnderReset+0x1a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_RCC_IsRFUnderReset+0x1c>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <LL_EXTI_EnableIT_32_63+0x24>)
 8002eb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002eb6:	4905      	ldr	r1, [pc, #20]	; (8002ecc <LL_EXTI_EnableIT_32_63+0x24>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	58000800 	.word	0x58000800

08002ed0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
    return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	e04b      	b.n	8002f7e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	799b      	ldrb	r3, [r3, #6]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd fd2c 	bl	8000958 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8002f06:	f7ff ffad 	bl	8002e64 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002f0a:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <HAL_SUBGHZ_Init+0xb8>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	0cdb      	lsrs	r3, r3, #19
 8002f18:	2264      	movs	r2, #100	; 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]
      break;
 8002f30:	e007      	b.n	8002f42 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002f38:	f7ff ffa4 	bl	8002e84 <LL_RCC_IsRFUnderReset>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ee      	bne.n	8002f20 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f42:	f7ff ff3f 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002f46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f4a:	f7ff ffad 	bl	8002ea8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002f4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f52:	f7ff ff23 	bl	8002d9c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002f56:	f7ff ff55 	bl	8002e04 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fab3 	bl	80034d0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	719a      	strb	r2, [r3, #6]

  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	461a      	mov	r2, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	799b      	ldrb	r3, [r3, #6]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d14a      	bne.n	8003040 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	795b      	ldrb	r3, [r3, #5]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e045      	b.n	8003042 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fb52 	bl	800366c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002fc8:	f7ff ff0c 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002fcc:	210d      	movs	r1, #13
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fa9e 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa96 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa90 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	82bb      	strh	r3, [r7, #20]
 8002ff4:	e00a      	b.n	800300c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002ff6:	8abb      	ldrh	r3, [r7, #20]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fa85 	bl	8003510 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003006:	8abb      	ldrh	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	82bb      	strh	r3, [r7, #20]
 800300c:	8aba      	ldrh	r2, [r7, #20]
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	d3f0      	bcc.n	8002ff6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003014:	f7ff fed6 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fb4b 	bl	80036b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	75fb      	strb	r3, [r7, #23]
 800302a:	e001      	b.n	8003030 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	715a      	strb	r2, [r3, #5]

    return status;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	e000      	b.n	8003042 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b088      	sub	sp, #32
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	461a      	mov	r2, r3
 8003056:	460b      	mov	r3, r1
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	4613      	mov	r3, r2
 800305c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d14a      	bne.n	8003102 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	795b      	ldrb	r3, [r3, #5]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003074:	2302      	movs	r3, #2
 8003076:	e045      	b.n	8003104 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 faf4 	bl	800366c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003084:	f7ff feae 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003088:	211d      	movs	r1, #29
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa40 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa38 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa32 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80030ac:	2100      	movs	r1, #0
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fa2e 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	82fb      	strh	r3, [r7, #22]
 80030b8:	e009      	b.n	80030ce <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa7d 	bl	80035bc <SUBGHZSPI_Receive>
      pData++;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	3301      	adds	r3, #1
 80030cc:	82fb      	strh	r3, [r7, #22]
 80030ce:	8afa      	ldrh	r2, [r7, #22]
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3f1      	bcc.n	80030ba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80030d6:	f7ff fe75 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 faea 	bl	80036b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e001      	b.n	80030f2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	715a      	strb	r2, [r3, #5]

    return status;
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	e000      	b.n	8003104 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	72fb      	strb	r3, [r7, #11]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	799b      	ldrb	r3, [r3, #6]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d14a      	bne.n	80031c0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	795b      	ldrb	r3, [r3, #5]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003132:	2302      	movs	r3, #2
 8003134:	e045      	b.n	80031c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fa95 	bl	800366c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	2b84      	cmp	r3, #132	; 0x84
 8003146:	d002      	beq.n	800314e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	2b94      	cmp	r3, #148	; 0x94
 800314c:	d103      	bne.n	8003156 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	711a      	strb	r2, [r3, #4]
 8003154:	e002      	b.n	800315c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800315c:	f7ff fe42 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003160:	7afb      	ldrb	r3, [r7, #11]
 8003162:	4619      	mov	r1, r3
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f9d3 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	82bb      	strh	r3, [r7, #20]
 800316e:	e00a      	b.n	8003186 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003170:	8abb      	ldrh	r3, [r7, #20]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9c8 	bl	8003510 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003180:	8abb      	ldrh	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	82bb      	strh	r3, [r7, #20]
 8003186:	8aba      	ldrh	r2, [r7, #20]
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d3f0      	bcc.n	8003170 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800318e:	f7ff fe19 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	2b84      	cmp	r3, #132	; 0x84
 8003196:	d002      	beq.n	800319e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa8b 	bl	80036b4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
 80031aa:	e001      	b.n	80031b0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	715a      	strb	r2, [r3, #5]

    return status;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	e000      	b.n	80031c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	461a      	mov	r2, r3
 80031d6:	460b      	mov	r3, r1
 80031d8:	72fb      	strb	r3, [r7, #11]
 80031da:	4613      	mov	r3, r2
 80031dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	799b      	ldrb	r3, [r3, #6]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d13d      	bne.n	8003268 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	795b      	ldrb	r3, [r3, #5]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e038      	b.n	800326a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa34 	bl	800366c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003204:	f7ff fdee 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003208:	7afb      	ldrb	r3, [r7, #11]
 800320a:	4619      	mov	r1, r3
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f97f 	bl	8003510 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003212:	2100      	movs	r1, #0
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f97b 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800321a:	2300      	movs	r3, #0
 800321c:	82fb      	strh	r3, [r7, #22]
 800321e:	e009      	b.n	8003234 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003220:	69b9      	ldr	r1, [r7, #24]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f9ca 	bl	80035bc <SUBGHZSPI_Receive>
      pData++;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3301      	adds	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	3301      	adds	r3, #1
 8003232:	82fb      	strh	r3, [r7, #22]
 8003234:	8afa      	ldrh	r2, [r7, #22]
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	d3f1      	bcc.n	8003220 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800323c:	f7ff fdc2 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa37 	bl	80036b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e001      	b.n	8003258 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	715a      	strb	r2, [r3, #5]

    return status;
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	e000      	b.n	800326a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	461a      	mov	r2, r3
 800327e:	460b      	mov	r3, r1
 8003280:	72fb      	strb	r3, [r7, #11]
 8003282:	4613      	mov	r3, r2
 8003284:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d13e      	bne.n	800330e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	795b      	ldrb	r3, [r3, #5]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003298:	2302      	movs	r3, #2
 800329a:	e039      	b.n	8003310 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f9e2 	bl	800366c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80032a8:	f7ff fd9c 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80032ac:	210e      	movs	r1, #14
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f92e 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80032b4:	7afb      	ldrb	r3, [r7, #11]
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f929 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	82bb      	strh	r3, [r7, #20]
 80032c2:	e00a      	b.n	80032da <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80032c4:	8abb      	ldrh	r3, [r7, #20]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f91e 	bl	8003510 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80032d4:	8abb      	ldrh	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	82bb      	strh	r3, [r7, #20]
 80032da:	8aba      	ldrh	r2, [r7, #20]
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3f0      	bcc.n	80032c4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80032e2:	f7ff fd6f 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f9e4 	bl	80036b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
 80032f8:	e001      	b.n	80032fe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	715a      	strb	r2, [r3, #5]

    return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	e000      	b.n	8003310 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	460b      	mov	r3, r1
 8003326:	72fb      	strb	r3, [r7, #11]
 8003328:	4613      	mov	r3, r2
 800332a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	799b      	ldrb	r3, [r3, #6]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d141      	bne.n	80033be <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	795b      	ldrb	r3, [r3, #5]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003342:	2302      	movs	r3, #2
 8003344:	e03c      	b.n	80033c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f98d 	bl	800366c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003352:	f7ff fd47 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003356:	211e      	movs	r1, #30
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f8d9 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	4619      	mov	r1, r3
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f8d4 	bl	8003510 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003368:	2100      	movs	r1, #0
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8d0 	bl	8003510 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	82fb      	strh	r3, [r7, #22]
 8003374:	e009      	b.n	800338a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f91f 	bl	80035bc <SUBGHZSPI_Receive>
      pData++;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3301      	adds	r3, #1
 8003382:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003384:	8afb      	ldrh	r3, [r7, #22]
 8003386:	3301      	adds	r3, #1
 8003388:	82fb      	strh	r3, [r7, #22]
 800338a:	8afa      	ldrh	r2, [r7, #22]
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3f1      	bcc.n	8003376 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003392:	f7ff fd17 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f98c 	bl	80036b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e001      	b.n	80033ae <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	715a      	strb	r2, [r3, #5]

    return status;
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	e000      	b.n	80033c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80033d0:	2300      	movs	r3, #0
 80033d2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80033d4:	f107 020c 	add.w	r2, r7, #12
 80033d8:	2302      	movs	r3, #2
 80033da:	2112      	movs	r1, #18
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fef4 	bl	80031ca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80033e2:	7b3b      	ldrb	r3, [r7, #12]
 80033e4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80033e6:	89fb      	ldrh	r3, [r7, #14]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	7b7b      	ldrb	r3, [r7, #13]
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    //APP_LOG(TS_ON, VLEVEL_L, "callback\n\r");
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f004 f8ff 	bl	8007604 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_SUBGHZ_IRQHandler+0x56>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    printf("rx callback\n\r");
 8003412:	482e      	ldr	r0, [pc, #184]	; (80034cc <HAL_SUBGHZ_IRQHandler+0x104>)
 8003414:	f004 fbbc 	bl	8007b90 <iprintf>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f004 f901 	bl	8007620 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SUBGHZ_IRQHandler+0x68>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f004 f950 	bl	80076d0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	08db      	lsrs	r3, r3, #3
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SUBGHZ_IRQHandler+0x7a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f004 f955 	bl	80076ec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003442:	89fb      	ldrh	r3, [r7, #14]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f004 f95a 	bl	8007708 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003454:	89fb      	ldrh	r3, [r7, #14]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f004 f927 	bl	80076b4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_SUBGHZ_IRQHandler+0xb0>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f004 f8e2 	bl	800763c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	09db      	lsrs	r3, r3, #7
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003490:	2101      	movs	r1, #1
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f004 f8e0 	bl	8007658 <HAL_SUBGHZ_CADStatusCallback>
 8003498:	e003      	b.n	80034a2 <HAL_SUBGHZ_IRQHandler+0xda>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800349a:	2100      	movs	r1, #0
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f004 f8db 	bl	8007658 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f004 f8f0 	bl	8007694 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80034b4:	f107 020c 	add.w	r2, r7, #12
 80034b8:	2302      	movs	r3, #2
 80034ba:	2102      	movs	r1, #2
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fe25 	bl	800310c <HAL_SUBGHZ_ExecSetCmd>
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	08008b44 	.word	0x08008b44

080034d0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80034ec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034f0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80034f4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <SUBGHZSPI_Init+0x3c>)
 80034fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003500:	6013      	str	r3, [r2, #0]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	58010000 	.word	0x58010000

08003510 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <SUBGHZSPI_Transmit+0xa0>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	0cdb      	lsrs	r3, r3, #19
 800352e:	2264      	movs	r2, #100	; 0x64
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	609a      	str	r2, [r3, #8]
      break;
 8003546:	e008      	b.n	800355a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3b01      	subs	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <SUBGHZSPI_Transmit+0xa4>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d1ed      	bne.n	8003536 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <SUBGHZSPI_Transmit+0xa8>)
 800355c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <SUBGHZSPI_Transmit+0xa0>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	0cdb      	lsrs	r3, r3, #19
 8003572:	2264      	movs	r2, #100	; 0x64
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	609a      	str	r2, [r3, #8]
      break;
 800358a:	e008      	b.n	800359e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <SUBGHZSPI_Transmit+0xa4>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d1ed      	bne.n	800357a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SUBGHZSPI_Transmit+0xa4>)
 80035a0:	68db      	ldr	r3, [r3, #12]

  return status;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000004 	.word	0x20000004
 80035b4:	58010000 	.word	0x58010000
 80035b8:	5801000c 	.word	0x5801000c

080035bc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80035ca:	4b25      	ldr	r3, [pc, #148]	; (8003660 <SUBGHZSPI_Receive+0xa4>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	0cdb      	lsrs	r3, r3, #19
 80035d8:	2264      	movs	r2, #100	; 0x64
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	609a      	str	r2, [r3, #8]
      break;
 80035f0:	e008      	b.n	8003604 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <SUBGHZSPI_Receive+0xa8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d1ed      	bne.n	80035e0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <SUBGHZSPI_Receive+0xac>)
 8003606:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <SUBGHZSPI_Receive+0xa4>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	0cdb      	lsrs	r3, r3, #19
 800361c:	2264      	movs	r2, #100	; 0x64
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e008      	b.n	8003648 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3b01      	subs	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <SUBGHZSPI_Receive+0xa8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d1ed      	bne.n	8003624 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <SUBGHZSPI_Receive+0xa8>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	701a      	strb	r2, [r3, #0]

  return status;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000004 	.word	0x20000004
 8003664:	58010000 	.word	0x58010000
 8003668:	5801000c 	.word	0x5801000c

0800366c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	791b      	ldrb	r3, [r3, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d111      	bne.n	80036a0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <SUBGHZ_CheckDeviceReady+0x44>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800368c:	f7ff fbaa 	bl	8002de4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3b01      	subs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f9      	bne.n	8003690 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800369c:	f7ff fb92 	bl	8002dc4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f807 	bl	80036b4 <SUBGHZ_WaitOnBusy>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000004 	.word	0x20000004

080036b4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <SUBGHZ_WaitOnBusy+0x58>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	0d1b      	lsrs	r3, r3, #20
 80036ce:	2264      	movs	r2, #100	; 0x64
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80036d6:	f7ff fbb3 	bl	8002e40 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80036da:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	609a      	str	r2, [r3, #8]
      break;
 80036ec:	e009      	b.n	8003702 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80036f4:	f7ff fb92 	bl	8002e1c <LL_PWR_IsActiveFlag_RFBUSYS>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d0e9      	beq.n	80036d6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000004 	.word	0x20000004

08003710 <LL_RCC_GetUSARTClockSource>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	401a      	ands	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	4313      	orrs	r3, r2
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <LL_RCC_GetLPUARTClockSource>:
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4013      	ands	r3, r2
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e042      	b.n	80037ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd f83a 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fbf9 	bl	8003f8c <UART_SetConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e022      	b.n	80037ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fe3d 	bl	800442c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fec3 	bl	800456e <UART_CheckIdleState>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08a      	sub	sp, #40	; 0x28
 80037f6:	af02      	add	r7, sp, #8
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 8083 	bne.w	8003914 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_Transmit+0x28>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07b      	b.n	8003916 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UART_Transmit+0x3a>
 8003828:	2302      	movs	r3, #2
 800382a:	e074      	b.n	8003916 <HAL_UART_Transmit+0x124>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2221      	movs	r2, #33	; 0x21
 8003840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003844:	f7fd fc38 	bl	80010b8 <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	d108      	bne.n	8003876 <HAL_UART_Transmit+0x84>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e003      	b.n	800387e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003886:	e02c      	b.n	80038e2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 feb6 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e039      	b.n	8003916 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3302      	adds	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e007      	b.n	80038d0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3301      	adds	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cc      	bne.n	8003888 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fe83 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e006      	b.n	8003916 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b0ba      	sub	sp, #232	; 0xe8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800394a:	f640 030f 	movw	r3, #2063	; 0x80f
 800394e:	4013      	ands	r3, r2
 8003950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11b      	bne.n	8003994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800395c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 82d6 	beq.w	8003f36 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      }
      return;
 8003992:	e2d0      	b.n	8003f36 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 811f 	beq.w	8003bdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800399e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80039a2:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <HAL_UART_IRQHandler+0x2b0>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039ae:	4b89      	ldr	r3, [pc, #548]	; (8003bd4 <HAL_UART_IRQHandler+0x2b4>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8112 	beq.w	8003bdc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d011      	beq.n	80039e8 <HAL_UART_IRQHandler+0xc8>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d011      	beq.n	8003a18 <HAL_UART_IRQHandler+0xf8>
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d011      	beq.n	8003a48 <HAL_UART_IRQHandler+0x128>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2204      	movs	r2, #4
 8003a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003a64:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <HAL_UART_IRQHandler+0x2b0>)
 8003a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2208      	movs	r2, #8
 8003a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7a:	f043 0208 	orr.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x196>
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 823c 	beq.w	8003f3a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d013      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04f      	beq.n	8003bba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fe3a 	bl	8004794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d141      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3308      	adds	r3, #8
 8003b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d9      	bne.n	8003b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d013      	beq.n	8003baa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b86:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_UART_IRQHandler+0x2b8>)
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fc29 	bl	80013e6 <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d017      	beq.n	8003bca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00f      	b.n	8003bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9d9 	bl	8003f62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e00b      	b.n	8003bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9d5 	bl	8003f62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e007      	b.n	8003bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9d1 	bl	8003f62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003bc8:	e1b7      	b.n	8003f3a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bca:	bf00      	nop
    return;
 8003bcc:	e1b5      	b.n	8003f3a <HAL_UART_IRQHandler+0x61a>
 8003bce:	bf00      	nop
 8003bd0:	10000001 	.word	0x10000001
 8003bd4:	04000120 	.word	0x04000120
 8003bd8:	0800485f 	.word	0x0800485f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 814a 	bne.w	8003e7a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8143 	beq.w	8003e7a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 813c 	beq.w	8003e7a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	f040 80b5 	bne.w	8003d84 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003c26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8187 	beq.w	8003f3e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	f080 817f 	bcs.w	8003f3e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 8086 	bne.w	8003d68 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1da      	bne.n	8003c5c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e1      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e3      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e4      	bne.n	8003d28 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd fae1 	bl	800132a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8f9 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d82:	e0dc      	b.n	8003f3e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80ce 	beq.w	8003f42 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80c9 	beq.w	8003f42 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e4      	bne.n	8003db0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	623b      	str	r3, [r7, #32]
   return(result);
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e1      	bne.n	8003de6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0310 	bic.w	r3, r3, #16
 8003e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	69b9      	ldr	r1, [r7, #24]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	617b      	str	r3, [r7, #20]
   return(result);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e4      	bne.n	8003e36 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f87e 	bl	8003f74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e78:	e063      	b.n	8003f42 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x584>
 8003e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fd1f 	bl	80048e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ea2:	e051      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d014      	beq.n	8003eda <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d03a      	beq.n	8003f46 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
    }
    return;
 8003ed8:	e035      	b.n	8003f46 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_UART_IRQHandler+0x5da>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fcc9 	bl	800488a <UART_EndTransmit_IT>
    return;
 8003ef8:	e026      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_UART_IRQHandler+0x5fa>
 8003f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fcf6 	bl	8004904 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f18:	e016      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_UART_IRQHandler+0x628>
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da0c      	bge.n	8003f48 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fcdf 	bl	80048f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f34:	e008      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
      return;
 8003f36:	bf00      	nop
 8003f38:	e006      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
    return;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
      return;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
      return;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_UART_IRQHandler+0x628>
    return;
 8003f46:	bf00      	nop
  }
}
 8003f48:	37e8      	adds	r7, #232	; 0xe8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4bab      	ldr	r3, [pc, #684]	; (8004264 <UART_SetConfig+0x2d8>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	69f9      	ldr	r1, [r7, #28]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4aa0      	ldr	r2, [pc, #640]	; (8004268 <UART_SetConfig+0x2dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	69f9      	ldr	r1, [r7, #28]
 8004008:	430b      	orrs	r3, r1
 800400a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f023 010f 	bic.w	r1, r3, #15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a91      	ldr	r2, [pc, #580]	; (800426c <UART_SetConfig+0x2e0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d122      	bne.n	8004072 <UART_SetConfig+0xe6>
 800402c:	2003      	movs	r0, #3
 800402e:	f7ff fb6f 	bl	8003710 <LL_RCC_GetUSARTClockSource>
 8004032:	4603      	mov	r3, r0
 8004034:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004038:	2b03      	cmp	r3, #3
 800403a:	d817      	bhi.n	800406c <UART_SetConfig+0xe0>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0xb8>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004055 	.word	0x08004055
 8004048:	08004061 	.word	0x08004061
 800404c:	0800405b 	.word	0x0800405b
 8004050:	08004067 	.word	0x08004067
 8004054:	2301      	movs	r3, #1
 8004056:	76fb      	strb	r3, [r7, #27]
 8004058:	e072      	b.n	8004140 <UART_SetConfig+0x1b4>
 800405a:	2302      	movs	r3, #2
 800405c:	76fb      	strb	r3, [r7, #27]
 800405e:	e06f      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004060:	2304      	movs	r3, #4
 8004062:	76fb      	strb	r3, [r7, #27]
 8004064:	e06c      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004066:	2308      	movs	r3, #8
 8004068:	76fb      	strb	r3, [r7, #27]
 800406a:	e069      	b.n	8004140 <UART_SetConfig+0x1b4>
 800406c:	2310      	movs	r3, #16
 800406e:	76fb      	strb	r3, [r7, #27]
 8004070:	e066      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7e      	ldr	r2, [pc, #504]	; (8004270 <UART_SetConfig+0x2e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d134      	bne.n	80040e6 <UART_SetConfig+0x15a>
 800407c:	200c      	movs	r0, #12
 800407e:	f7ff fb47 	bl	8003710 <LL_RCC_GetUSARTClockSource>
 8004082:	4603      	mov	r3, r0
 8004084:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d829      	bhi.n	80040e0 <UART_SetConfig+0x154>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <UART_SetConfig+0x108>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080040e1 	.word	0x080040e1
 800409c:	080040e1 	.word	0x080040e1
 80040a0:	080040e1 	.word	0x080040e1
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040e1 	.word	0x080040e1
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040cf 	.word	0x080040cf
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e1 	.word	0x080040e1
 80040c4:	080040db 	.word	0x080040db
 80040c8:	2300      	movs	r3, #0
 80040ca:	76fb      	strb	r3, [r7, #27]
 80040cc:	e038      	b.n	8004140 <UART_SetConfig+0x1b4>
 80040ce:	2302      	movs	r3, #2
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	e035      	b.n	8004140 <UART_SetConfig+0x1b4>
 80040d4:	2304      	movs	r3, #4
 80040d6:	76fb      	strb	r3, [r7, #27]
 80040d8:	e032      	b.n	8004140 <UART_SetConfig+0x1b4>
 80040da:	2308      	movs	r3, #8
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e02f      	b.n	8004140 <UART_SetConfig+0x1b4>
 80040e0:	2310      	movs	r3, #16
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e02c      	b.n	8004140 <UART_SetConfig+0x1b4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5f      	ldr	r2, [pc, #380]	; (8004268 <UART_SetConfig+0x2dc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d125      	bne.n	800413c <UART_SetConfig+0x1b0>
 80040f0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80040f4:	f7ff fb1e 	bl	8003734 <LL_RCC_GetLPUARTClockSource>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fe:	d017      	beq.n	8004130 <UART_SetConfig+0x1a4>
 8004100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004104:	d817      	bhi.n	8004136 <UART_SetConfig+0x1aa>
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d00b      	beq.n	8004124 <UART_SetConfig+0x198>
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004110:	d811      	bhi.n	8004136 <UART_SetConfig+0x1aa>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <UART_SetConfig+0x192>
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d006      	beq.n	800412a <UART_SetConfig+0x19e>
 800411c:	e00b      	b.n	8004136 <UART_SetConfig+0x1aa>
 800411e:	2300      	movs	r3, #0
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e00d      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004124:	2302      	movs	r3, #2
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e00a      	b.n	8004140 <UART_SetConfig+0x1b4>
 800412a:	2304      	movs	r3, #4
 800412c:	76fb      	strb	r3, [r7, #27]
 800412e:	e007      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004130:	2308      	movs	r3, #8
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e004      	b.n	8004140 <UART_SetConfig+0x1b4>
 8004136:	2310      	movs	r3, #16
 8004138:	76fb      	strb	r3, [r7, #27]
 800413a:	e001      	b.n	8004140 <UART_SetConfig+0x1b4>
 800413c:	2310      	movs	r3, #16
 800413e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a48      	ldr	r2, [pc, #288]	; (8004268 <UART_SetConfig+0x2dc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	f040 8098 	bne.w	800427c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414c:	7efb      	ldrb	r3, [r7, #27]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d823      	bhi.n	800419a <UART_SetConfig+0x20e>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x1cc>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	0800419b 	.word	0x0800419b
 8004160:	08004185 	.word	0x08004185
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800418b 	.word	0x0800418b
 800416c:	0800419b 	.word	0x0800419b
 8004170:	0800419b 	.word	0x0800419b
 8004174:	0800419b 	.word	0x0800419b
 8004178:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe fb26 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004180:	6178      	str	r0, [r7, #20]
        break;
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <UART_SetConfig+0x2e8>)
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e00c      	b.n	80041a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fe fa6b 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800418e:	6178      	str	r0, [r7, #20]
        break;
 8004190:	e008      	b.n	80041a4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	617b      	str	r3, [r7, #20]
        break;
 8004198:	e004      	b.n	80041a4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	76bb      	strb	r3, [r7, #26]
        break;
 80041a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8128 	beq.w	80043fc <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	4a31      	ldr	r2, [pc, #196]	; (8004278 <UART_SetConfig+0x2ec>)
 80041b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b6:	461a      	mov	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d305      	bcc.n	80041dc <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d902      	bls.n	80041e2 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	76bb      	strb	r3, [r7, #26]
 80041e0:	e10c      	b.n	80043fc <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	4a22      	ldr	r2, [pc, #136]	; (8004278 <UART_SetConfig+0x2ec>)
 80041f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f7fc f819 	bl	8000230 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	020b      	lsls	r3, r1, #8
 8004210:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004214:	0202      	lsls	r2, r0, #8
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	6849      	ldr	r1, [r1, #4]
 800421a:	0849      	lsrs	r1, r1, #1
 800421c:	4608      	mov	r0, r1
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	1814      	adds	r4, r2, r0
 8004224:	eb43 0501 	adc.w	r5, r3, r1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	4620      	mov	r0, r4
 8004234:	4629      	mov	r1, r5
 8004236:	f7fb fffb 	bl	8000230 <__aeabi_uldivmod>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4613      	mov	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004248:	d308      	bcc.n	800425c <UART_SetConfig+0x2d0>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004250:	d204      	bcs.n	800425c <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e0cf      	b.n	80043fc <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	76bb      	strb	r3, [r7, #26]
 8004260:	e0cc      	b.n	80043fc <UART_SetConfig+0x470>
 8004262:	bf00      	nop
 8004264:	cfff69f3 	.word	0xcfff69f3
 8004268:	40008000 	.word	0x40008000
 800426c:	40013800 	.word	0x40013800
 8004270:	40004400 	.word	0x40004400
 8004274:	00f42400 	.word	0x00f42400
 8004278:	08008c18 	.word	0x08008c18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d165      	bne.n	8004352 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004286:	7efb      	ldrb	r3, [r7, #27]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d828      	bhi.n	80042de <UART_SetConfig+0x352>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x308>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042df 	.word	0x080042df
 80042a4:	080042cf 	.word	0x080042cf
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042df 	.word	0x080042df
 80042b4:	080042d7 	.word	0x080042d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe fa88 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 80042bc:	6178      	str	r0, [r7, #20]
        break;
 80042be:	e013      	b.n	80042e8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fe fa96 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80042c4:	6178      	str	r0, [r7, #20]
        break;
 80042c6:	e00f      	b.n	80042e8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <UART_SetConfig+0x498>)
 80042ca:	617b      	str	r3, [r7, #20]
        break;
 80042cc:	e00c      	b.n	80042e8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7fe f9c9 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 80042d2:	6178      	str	r0, [r7, #20]
        break;
 80042d4:	e008      	b.n	80042e8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042da:	617b      	str	r3, [r7, #20]
        break;
 80042dc:	e004      	b.n	80042e8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	76bb      	strb	r3, [r7, #26]
        break;
 80042e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8086 	beq.w	80043fc <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <UART_SetConfig+0x49c>)
 80042f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042fa:	461a      	mov	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004302:	005a      	lsls	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	441a      	add	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d916      	bls.n	800434c <UART_SetConfig+0x3c0>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d212      	bcs.n	800434c <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f023 030f 	bic.w	r3, r3, #15
 800432e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	b29a      	uxth	r2, r3
 800433c:	89fb      	ldrh	r3, [r7, #14]
 800433e:	4313      	orrs	r3, r2
 8004340:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	89fa      	ldrh	r2, [r7, #14]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	e057      	b.n	80043fc <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	76bb      	strb	r3, [r7, #26]
 8004350:	e054      	b.n	80043fc <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004352:	7efb      	ldrb	r3, [r7, #27]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d828      	bhi.n	80043aa <UART_SetConfig+0x41e>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0x3d4>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004385 	.word	0x08004385
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004395 	.word	0x08004395
 800436c:	080043ab 	.word	0x080043ab
 8004370:	0800439b 	.word	0x0800439b
 8004374:	080043ab 	.word	0x080043ab
 8004378:	080043ab 	.word	0x080043ab
 800437c:	080043ab 	.word	0x080043ab
 8004380:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe fa22 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004388:	6178      	str	r0, [r7, #20]
        break;
 800438a:	e013      	b.n	80043b4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7fe fa30 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b23      	ldr	r3, [pc, #140]	; (8004424 <UART_SetConfig+0x498>)
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7fe f963 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800439e:	6178      	str	r0, [r7, #20]
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76bb      	strb	r3, [r7, #26]
        break;
 80043b2:	bf00      	nop
    }

    if (pclk != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <UART_SetConfig+0x49c>)
 80043c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c4:	461a      	mov	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	441a      	add	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d908      	bls.n	80043f8 <UART_SetConfig+0x46c>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d204      	bcs.n	80043f8 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e001      	b.n	80043fc <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004418:	7ebb      	ldrb	r3, [r7, #26]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	00f42400 	.word	0x00f42400
 8004428:	08008c18 	.word	0x08008c18

0800442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452a:	d10a      	bne.n	8004542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af02      	add	r7, sp, #8
 8004574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800457e:	f7fc fd9b 	bl	80010b8 <HAL_GetTick>
 8004582:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d10e      	bne.n	80045b0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f82f 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e025      	b.n	80045fc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d10e      	bne.n	80045dc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f819 	bl	8004604 <UART_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e00f      	b.n	80045fc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b09c      	sub	sp, #112	; 0x70
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004614:	e0a9      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	f000 80a5 	beq.w	800476a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004620:	f7fc fd4a 	bl	80010b8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <UART_WaitOnFlagUntilTimeout+0x32>
 8004630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004632:	2b00      	cmp	r3, #0
 8004634:	d140      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800464a:	667b      	str	r3, [r7, #100]	; 0x64
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004656:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800465a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	663b      	str	r3, [r7, #96]	; 0x60
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004688:	64ba      	str	r2, [r7, #72]	; 0x48
 800468a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800468e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e069      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d051      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d4:	d149      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004700:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e6      	bne.n	80046e0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	613b      	str	r3, [r7, #16]
   return(result);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	66bb      	str	r3, [r7, #104]	; 0x68
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004732:	623a      	str	r2, [r7, #32]
 8004734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	69f9      	ldr	r1, [r7, #28]
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e010      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	f43f af46 	beq.w	8004616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3770      	adds	r7, #112	; 0x70
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b095      	sub	sp, #84	; 0x54
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
 80047bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e6      	bne.n	800479c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d118      	bne.n	8004840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	60bb      	str	r3, [r7, #8]
   return(result);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6979      	ldr	r1, [r7, #20]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	613b      	str	r3, [r7, #16]
   return(result);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004854:	bf00      	nop
 8004856:	3754      	adds	r7, #84	; 0x54
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fb70 	bl	8003f62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b088      	sub	sp, #32
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6979      	ldr	r1, [r7, #20]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	613b      	str	r3, [r7, #16]
   return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fb3c 	bl	8003f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d8:	bf00      	nop
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_UARTEx_DisableFifoMode+0x16>
 8004928:	2302      	movs	r3, #2
 800492a:	e027      	b.n	800497c <HAL_UARTEx_DisableFifoMode+0x66>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	; 0x24
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800495a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800499a:	2302      	movs	r3, #2
 800499c:	e02d      	b.n	80049fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f850 	bl	8004a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e02d      	b.n	8004a76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f812 	bl	8004a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004aa0:	e031      	b.n	8004b06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	0e5b      	lsrs	r3, r3, #25
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	0f5b      	lsrs	r3, r3, #29
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	7b3a      	ldrb	r2, [r7, #12]
 8004ace:	4910      	ldr	r1, [pc, #64]	; (8004b10 <UARTEx_SetNbDataToProcess+0x90>)
 8004ad0:	5c8a      	ldrb	r2, [r1, r2]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ad6:	7b3a      	ldrb	r2, [r7, #12]
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <UARTEx_SetNbDataToProcess+0x94>)
 8004ada:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	7b7a      	ldrb	r2, [r7, #13]
 8004aec:	4908      	ldr	r1, [pc, #32]	; (8004b10 <UARTEx_SetNbDataToProcess+0x90>)
 8004aee:	5c8a      	ldrb	r2, [r1, r2]
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004af4:	7b7a      	ldrb	r2, [r7, #13]
 8004af6:	4907      	ldr	r1, [pc, #28]	; (8004b14 <UARTEx_SetNbDataToProcess+0x94>)
 8004af8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	08008c30 	.word	0x08008c30
 8004b14:	08008c38 	.word	0x08008c38

08004b18 <RadioInit>:


/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <RadioInit+0x60>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <RadioInit+0x64>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <RadioInit+0x64>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <RadioInit+0x64>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8004b38:	4811      	ldr	r0, [pc, #68]	; (8004b80 <RadioInit+0x68>)
 8004b3a:	f001 fdc1 	bl	80066c0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f000 ffb0 	bl	8005aa4 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8004b44:	f002 f852 	bl	8006bec <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f002 fba8 	bl	80072a0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8004b50:	2204      	movs	r2, #4
 8004b52:	2100      	movs	r1, #0
 8004b54:	2001      	movs	r0, #1
 8004b56:	f002 f9d3 	bl	8006f00 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004b66:	f002 f907 	bl	8006d78 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8004b6a:	f000 fe4f 	bl	800580c <RadioSleep>
    // Initialize driver timeout timers
    //TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
   // TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
  //  TimerStop( &TxTimeoutTimer );
   // TimerStop( &RxTimeoutTimer );
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200003c0 	.word	0x200003c0
 8004b7c:	2000047c 	.word	0x2000047c
 8004b80:	08005b11 	.word	0x08005b11

08004b84 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8004b88:	f001 fddc 	bl	8006744 <SUBGRF_GetOperatingMode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d00a      	beq.n	8004ba8 <RadioGetStatus+0x24>
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	dc0a      	bgt.n	8004bac <RadioGetStatus+0x28>
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d002      	beq.n	8004ba0 <RadioGetStatus+0x1c>
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d002      	beq.n	8004ba4 <RadioGetStatus+0x20>
 8004b9e:	e005      	b.n	8004bac <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e004      	b.n	8004bae <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e002      	b.n	8004bae <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e000      	b.n	8004bae <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8004bac:	2300      	movs	r3, #0
    }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8004bbe:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <RadioSetModem+0xa0>)
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 fedf 	bl	800798a <RFW_SetRadioModem>
    switch( modem )
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d80b      	bhi.n	8004bec <RadioSetModem+0x38>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <RadioSetModem+0x28>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bfb 	.word	0x08004bfb
 8004be0:	08004c21 	.word	0x08004c21
 8004be4:	08004c2f 	.word	0x08004c2f
 8004be8:	08004c3d 	.word	0x08004c3d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8004bec:	2000      	movs	r0, #0
 8004bee:	f002 f961 	bl	8006eb4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <RadioSetModem+0xa0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	735a      	strb	r2, [r3, #13]
        break;
 8004bf8:	e028      	b.n	8004c4c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f002 f95a 	bl	8006eb4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <RadioSetModem+0xa0>)
 8004c02:	7b5a      	ldrb	r2, [r3, #13]
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <RadioSetModem+0xa0>)
 8004c06:	7b1b      	ldrb	r3, [r3, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d01e      	beq.n	8004c4a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <RadioSetModem+0xa0>)
 8004c0e:	7b1a      	ldrb	r2, [r3, #12]
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <RadioSetModem+0xa0>)
 8004c12:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <RadioSetModem+0xa0>)
 8004c16:	7b5b      	ldrb	r3, [r3, #13]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 ff43 	bl	8005aa4 <RadioSetPublicNetwork>
        }
        break;
 8004c1e:	e014      	b.n	8004c4a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8004c20:	2002      	movs	r0, #2
 8004c22:	f002 f947 	bl	8006eb4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <RadioSetModem+0xa0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	735a      	strb	r2, [r3, #13]
        break;
 8004c2c:	e00e      	b.n	8004c4c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8004c2e:	2002      	movs	r0, #2
 8004c30:	f002 f940 	bl	8006eb4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <RadioSetModem+0xa0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	735a      	strb	r2, [r3, #13]
        break;
 8004c3a:	e007      	b.n	8004c4c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f002 f939 	bl	8006eb4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <RadioSetModem+0xa0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	735a      	strb	r2, [r3, #13]
        break;
 8004c48:	e000      	b.n	8004c4c <RadioSetModem+0x98>
        break;
 8004c4a:	bf00      	nop
    }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2000047c 	.word	0x2000047c

08004c58 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f002 f8e5 	bl	8006e30 <SUBGRF_SetRfFrequency>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b090      	sub	sp, #64	; 0x40
 8004c72:	af0a      	add	r7, sp, #40	; 0x28
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8004c8a:	f000 fdd2 	bl	8005832 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7ff ff90 	bl	8004bb4 <RadioSetModem>

    RadioSetChannel( freq );
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff ffdf 	bl	8004c58 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9308      	str	r3, [sp, #32]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9306      	str	r3, [sp, #24]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9303      	str	r3, [sp, #12]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9302      	str	r3, [sp, #8]
 8004cba:	2303      	movs	r3, #3
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f000 f826 	bl	8004d1c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f000 fdb5 	bl	8005840 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8004cd6:	f000 ff13 	bl	8005b00 <RadioGetWakeupTime>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fc f9f5 	bl	80010cc <HAL_Delay>
            break;
        }
    }
    */
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8004ce2:	f000 fda6 	bl	8005832 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f7ff ff5a 	bl	8004bb4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	2100      	movs	r1, #0
 8004d06:	2000      	movs	r0, #0
 8004d08:	f002 f836 	bl	8006d78 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8004d0c:	f001 fdeb 	bl	80068e6 <SUBGRF_GetRandom>
 8004d10:	6078      	str	r0, [r7, #4]

    return rnd;
 8004d12:	687b      	ldr	r3, [r7, #4]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8004d30:	4abd      	ldr	r2, [pc, #756]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004d32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004d36:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8004d38:	f002 fde5 	bl	8007906 <RFW_DeInit>
    if( rxContinuous == true )
 8004d3c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8004d48:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8004d50:	4ab6      	ldr	r2, [pc, #728]	; (800502c <RadioSetRxConfig+0x310>)
 8004d52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004d56:	7013      	strb	r3, [r2, #0]
 8004d58:	e002      	b.n	8004d60 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8004d5a:	4bb4      	ldr	r3, [pc, #720]	; (800502c <RadioSetRxConfig+0x310>)
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d009      	beq.n	8004d7a <RadioSetRxConfig+0x5e>
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	f300 81da 	bgt.w	8005120 <RadioSetRxConfig+0x404>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80bf 	beq.w	8004ef0 <RadioSetRxConfig+0x1d4>
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	f000 812c 	beq.w	8004fd0 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8004d78:	e1d2      	b.n	8005120 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f001 fef8 	bl	8006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8004d80:	4ba9      	ldr	r3, [pc, #676]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8004d88:	4aa7      	ldr	r2, [pc, #668]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8004d8e:	4ba6      	ldr	r3, [pc, #664]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004d90:	2209      	movs	r2, #9
 8004d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8004d96:	4ba4      	ldr	r3, [pc, #656]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004d98:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8004d9e:	68b8      	ldr	r0, [r7, #8]
 8004da0:	f002 fce2 	bl	8007768 <SUBGRF_GetFskBandwidthRegValue>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b9f      	ldr	r3, [pc, #636]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004dae:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8004db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	4b9b      	ldr	r3, [pc, #620]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004dbc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8004dbe:	4b9a      	ldr	r3, [pc, #616]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8004dc4:	4b98      	ldr	r3, [pc, #608]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8004dca:	4b97      	ldr	r3, [pc, #604]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8004dd0:	4b95      	ldr	r3, [pc, #596]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8004dd6:	4b95      	ldr	r3, [pc, #596]	; (800502c <RadioSetRxConfig+0x310>)
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	4b93      	ldr	r3, [pc, #588]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004ddc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8004dde:	4b92      	ldr	r3, [pc, #584]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8004de4:	4b90      	ldr	r3, [pc, #576]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8004dea:	2004      	movs	r0, #4
 8004dec:	f7ff fee2 	bl	8004bb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004df0:	488f      	ldr	r0, [pc, #572]	; (8005030 <RadioSetRxConfig+0x314>)
 8004df2:	f002 f8eb 	bl	8006fcc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004df6:	488f      	ldr	r0, [pc, #572]	; (8005034 <RadioSetRxConfig+0x318>)
 8004df8:	f002 f9b4 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8004dfc:	4a8e      	ldr	r2, [pc, #568]	; (8005038 <RadioSetRxConfig+0x31c>)
 8004dfe:	f107 031c 	add.w	r3, r7, #28
 8004e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e06:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e0a:	f107 031c 	add.w	r3, r7, #28
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fce7 	bl	80067e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8004e14:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e18:	f001 fd32 	bl	8006880 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8004e1c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8004e20:	f000 fdde 	bl	80059e0 <RadioRead>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8004e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8004e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8004e40:	f000 fdbc 	bl	80059bc <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8004e44:	2104      	movs	r1, #4
 8004e46:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8004e4a:	f000 fdb7 	bl	80059bc <RadioWrite>
            modReg= RadioRead(0x89b);
 8004e4e:	f640 009b 	movw	r0, #2203	; 0x89b
 8004e52:	f000 fdc5 	bl	80059e0 <RadioRead>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e60:	f023 031c 	bic.w	r3, r3, #28
 8004e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8004e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e6c:	f043 0308 	orr.w	r3, r3, #8
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	f640 009b 	movw	r0, #2203	; 0x89b
 8004e78:	f000 fda0 	bl	80059bc <RadioWrite>
            modReg= RadioRead(0x6d1);
 8004e7c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8004e80:	f000 fdae 	bl	80059e0 <RadioRead>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8004e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8e:	f023 0318 	bic.w	r3, r3, #24
 8004e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8004e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e9a:	f043 0318 	orr.w	r3, r3, #24
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8004ea6:	f000 fd89 	bl	80059bc <RadioWrite>
            modReg= RadioRead(0x6ac);
 8004eaa:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8004eae:	f000 fd97 	bl	80059e0 <RadioRead>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8004eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8004ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8004ed4:	f000 fd72 	bl	80059bc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8004ed8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eda:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	4a4f      	ldr	r2, [pc, #316]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004eec:	6093      	str	r3, [r2, #8]
            break;
 8004eee:	e118      	b.n	8005122 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f001 fe3d 	bl	8006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8004efe:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8004f04:	4b48      	ldr	r3, [pc, #288]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f06:	220b      	movs	r2, #11
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8004f0c:	68b8      	ldr	r0, [r7, #8]
 8004f0e:	f002 fc2b 	bl	8007768 <SUBGRF_GetFskBandwidthRegValue>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b44      	ldr	r3, [pc, #272]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8004f22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	4b3f      	ldr	r3, [pc, #252]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f2a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8004f2c:	4b3e      	ldr	r3, [pc, #248]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f2e:	2204      	movs	r2, #4
 8004f30:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f34:	2218      	movs	r2, #24
 8004f36:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8004f38:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8004f3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b37      	ldr	r3, [pc, #220]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f4c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8004f4e:	4b37      	ldr	r3, [pc, #220]	; (800502c <RadioSetRxConfig+0x310>)
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	4b35      	ldr	r3, [pc, #212]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f54:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8004f56:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8004f5e:	4b32      	ldr	r3, [pc, #200]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f60:	22f2      	movs	r2, #242	; 0xf2
 8004f62:	75da      	strb	r2, [r3, #23]
 8004f64:	e002      	b.n	8004f6c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8004f66:	4b30      	ldr	r3, [pc, #192]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8004f72:	f000 fc5e 	bl	8005832 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8004f76:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fe14 	bl	8004bb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004f8c:	4828      	ldr	r0, [pc, #160]	; (8005030 <RadioSetRxConfig+0x314>)
 8004f8e:	f002 f81d 	bl	8006fcc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004f92:	4828      	ldr	r0, [pc, #160]	; (8005034 <RadioSetRxConfig+0x318>)
 8004f94:	f002 f8e6 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8004f98:	4a28      	ldr	r2, [pc, #160]	; (800503c <RadioSetRxConfig+0x320>)
 8004f9a:	f107 0314 	add.w	r3, r7, #20
 8004f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 fc19 	bl	80067e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8004fb0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fb4:	f001 fc64 	bl	8006880 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8004fb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004fcc:	6093      	str	r3, [r2, #8]
            break;
 8004fce:	e0a8      	b.n	8005122 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f001 fdcd 	bl	8006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <RadioSetRxConfig+0x324>)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <RadioSetRxConfig+0x30c>)
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <RadioSetRxConfig+0x2f4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b0b      	cmp	r3, #11
 8005008:	d008      	beq.n	800501c <RadioSetRxConfig+0x300>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d005      	beq.n	800501c <RadioSetRxConfig+0x300>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d116      	bne.n	8005044 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d113      	bne.n	8005044 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800501c:	4b02      	ldr	r3, [pc, #8]	; (8005028 <RadioSetRxConfig+0x30c>)
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005024:	e012      	b.n	800504c <RadioSetRxConfig+0x330>
 8005026:	bf00      	nop
 8005028:	2000047c 	.word	0x2000047c
 800502c:	2000000d 	.word	0x2000000d
 8005030:	200004b4 	.word	0x200004b4
 8005034:	2000048a 	.word	0x2000048a
 8005038:	08008b54 	.word	0x08008b54
 800503c:	08008b5c 	.word	0x08008b5c
 8005040:	08008cc4 	.word	0x08008cc4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <RadioSetRxConfig+0x410>)
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <RadioSetRxConfig+0x410>)
 800504e:	2201      	movs	r2, #1
 8005050:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <RadioSetRxConfig+0x410>)
 8005054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005058:	2b05      	cmp	r3, #5
 800505a:	d004      	beq.n	8005066 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800505c:	4b33      	ldr	r3, [pc, #204]	; (800512c <RadioSetRxConfig+0x410>)
 800505e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005062:	2b06      	cmp	r3, #6
 8005064:	d10a      	bne.n	800507c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8005066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005068:	2b0b      	cmp	r3, #11
 800506a:	d803      	bhi.n	8005074 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800506c:	4b2f      	ldr	r3, [pc, #188]	; (800512c <RadioSetRxConfig+0x410>)
 800506e:	220c      	movs	r2, #12
 8005070:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005072:	e006      	b.n	8005082 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005074:	4a2d      	ldr	r2, [pc, #180]	; (800512c <RadioSetRxConfig+0x410>)
 8005076:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005078:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800507a:	e002      	b.n	8005082 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <RadioSetRxConfig+0x410>)
 800507e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005080:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005082:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <RadioSetRxConfig+0x410>)
 8005088:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <RadioSetRxConfig+0x414>)
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	4b27      	ldr	r3, [pc, #156]	; (800512c <RadioSetRxConfig+0x410>)
 8005090:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005092:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005096:	4b25      	ldr	r3, [pc, #148]	; (800512c <RadioSetRxConfig+0x410>)
 8005098:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800509c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80050a0:	4b22      	ldr	r3, [pc, #136]	; (800512c <RadioSetRxConfig+0x410>)
 80050a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80050a6:	f000 fbc4 	bl	8005832 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <RadioSetRxConfig+0x410>)
 80050ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fd7a 	bl	8004bb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80050c0:	481c      	ldr	r0, [pc, #112]	; (8005134 <RadioSetRxConfig+0x418>)
 80050c2:	f001 ff83 	bl	8006fcc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80050c6:	481c      	ldr	r0, [pc, #112]	; (8005138 <RadioSetRxConfig+0x41c>)
 80050c8:	f002 f84c 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80050cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fd5c 	bl	8006b8e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <RadioSetRxConfig+0x410>)
 80050d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10d      	bne.n	80050fc <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80050e0:	f240 7036 	movw	r0, #1846	; 0x736
 80050e4:	f002 f99a 	bl	800741c <SUBGRF_ReadRegister>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	f240 7036 	movw	r0, #1846	; 0x736
 80050f6:	f002 f97d 	bl	80073f4 <SUBGRF_WriteRegister>
 80050fa:	e00c      	b.n	8005116 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80050fc:	f240 7036 	movw	r0, #1846	; 0x736
 8005100:	f002 f98c 	bl	800741c <SUBGRF_ReadRegister>
 8005104:	4603      	mov	r3, r0
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	f240 7036 	movw	r0, #1846	; 0x736
 8005112:	f002 f96f 	bl	80073f4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <RadioSetRxConfig+0x410>)
 8005118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800511c:	609a      	str	r2, [r3, #8]
            break;
 800511e:	e000      	b.n	8005122 <RadioSetRxConfig+0x406>
            break;
 8005120:	bf00      	nop
    }
}
 8005122:	bf00      	nop
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000047c 	.word	0x2000047c
 8005130:	2000000d 	.word	0x2000000d
 8005134:	200004b4 	.word	0x200004b4
 8005138:	2000048a 	.word	0x2000048a

0800513c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60ba      	str	r2, [r7, #8]
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	4603      	mov	r3, r0
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	460b      	mov	r3, r1
 800514c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800514e:	f002 fbda 	bl	8007906 <RFW_DeInit>
    switch( modem )
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b03      	cmp	r3, #3
 8005156:	f000 80d7 	beq.w	8005308 <RadioSetTxConfig+0x1cc>
 800515a:	2b03      	cmp	r3, #3
 800515c:	f300 80e6 	bgt.w	800532c <RadioSetTxConfig+0x1f0>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <RadioSetTxConfig+0x2e>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d061      	beq.n	800522c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8005168:	e0e0      	b.n	800532c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800516a:	4b7c      	ldr	r3, [pc, #496]	; (800535c <RadioSetTxConfig+0x220>)
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005172:	4a7a      	ldr	r2, [pc, #488]	; (800535c <RadioSetTxConfig+0x220>)
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <RadioSetTxConfig+0x220>)
 800517a:	220b      	movs	r2, #11
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f002 faf1 	bl	8007768 <SUBGRF_GetFskBandwidthRegValue>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	4b74      	ldr	r3, [pc, #464]	; (800535c <RadioSetTxConfig+0x220>)
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005190:	4a72      	ldr	r2, [pc, #456]	; (800535c <RadioSetTxConfig+0x220>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005196:	4b71      	ldr	r3, [pc, #452]	; (800535c <RadioSetTxConfig+0x220>)
 8005198:	2200      	movs	r2, #0
 800519a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800519c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	4b6e      	ldr	r3, [pc, #440]	; (800535c <RadioSetTxConfig+0x220>)
 80051a4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <RadioSetTxConfig+0x220>)
 80051a8:	2204      	movs	r2, #4
 80051aa:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80051ac:	4b6b      	ldr	r3, [pc, #428]	; (800535c <RadioSetTxConfig+0x220>)
 80051ae:	2218      	movs	r2, #24
 80051b0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80051b2:	4b6a      	ldr	r3, [pc, #424]	; (800535c <RadioSetTxConfig+0x220>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80051b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051bc:	f083 0301 	eor.w	r3, r3, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b65      	ldr	r3, [pc, #404]	; (800535c <RadioSetTxConfig+0x220>)
 80051c6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80051c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80051d0:	4b62      	ldr	r3, [pc, #392]	; (800535c <RadioSetTxConfig+0x220>)
 80051d2:	22f2      	movs	r2, #242	; 0xf2
 80051d4:	75da      	strb	r2, [r3, #23]
 80051d6:	e002      	b.n	80051de <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80051d8:	4b60      	ldr	r3, [pc, #384]	; (800535c <RadioSetTxConfig+0x220>)
 80051da:	2201      	movs	r2, #1
 80051dc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80051de:	4b5f      	ldr	r3, [pc, #380]	; (800535c <RadioSetTxConfig+0x220>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80051e4:	f000 fb25 	bl	8005832 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80051e8:	4b5c      	ldr	r3, [pc, #368]	; (800535c <RadioSetTxConfig+0x220>)
 80051ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fcdb 	bl	8004bb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80051fe:	4858      	ldr	r0, [pc, #352]	; (8005360 <RadioSetTxConfig+0x224>)
 8005200:	f001 fee4 	bl	8006fcc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005204:	4857      	ldr	r0, [pc, #348]	; (8005364 <RadioSetTxConfig+0x228>)
 8005206:	f001 ffad 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800520a:	4a57      	ldr	r2, [pc, #348]	; (8005368 <RadioSetTxConfig+0x22c>)
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005214:	e883 0003 	stmia.w	r3, {r0, r1}
 8005218:	f107 0310 	add.w	r3, r7, #16
 800521c:	4618      	mov	r0, r3
 800521e:	f001 fae0 	bl	80067e2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8005222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005226:	f001 fb2b 	bl	8006880 <SUBGRF_SetWhiteningSeed>
            break;
 800522a:	e080      	b.n	800532e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800522c:	4b4b      	ldr	r3, [pc, #300]	; (800535c <RadioSetTxConfig+0x220>)
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	4b48      	ldr	r3, [pc, #288]	; (800535c <RadioSetTxConfig+0x220>)
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800523e:	4a4b      	ldr	r2, [pc, #300]	; (800536c <RadioSetTxConfig+0x230>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4413      	add	r3, r2
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	4b45      	ldr	r3, [pc, #276]	; (800535c <RadioSetTxConfig+0x220>)
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800524c:	4a43      	ldr	r2, [pc, #268]	; (800535c <RadioSetTxConfig+0x220>)
 800524e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005252:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <RadioSetTxConfig+0x12c>
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b0b      	cmp	r3, #11
 8005260:	d008      	beq.n	8005274 <RadioSetTxConfig+0x138>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d005      	beq.n	8005274 <RadioSetTxConfig+0x138>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d104      	bne.n	800527e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005274:	4b39      	ldr	r3, [pc, #228]	; (800535c <RadioSetTxConfig+0x220>)
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800527c:	e003      	b.n	8005286 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800527e:	4b37      	ldr	r3, [pc, #220]	; (800535c <RadioSetTxConfig+0x220>)
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005286:	4b35      	ldr	r3, [pc, #212]	; (800535c <RadioSetTxConfig+0x220>)
 8005288:	2201      	movs	r2, #1
 800528a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800528c:	4b33      	ldr	r3, [pc, #204]	; (800535c <RadioSetTxConfig+0x220>)
 800528e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005292:	2b05      	cmp	r3, #5
 8005294:	d004      	beq.n	80052a0 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <RadioSetTxConfig+0x220>)
 8005298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800529c:	2b06      	cmp	r3, #6
 800529e:	d10a      	bne.n	80052b6 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80052a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052a2:	2b0b      	cmp	r3, #11
 80052a4:	d803      	bhi.n	80052ae <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80052a6:	4b2d      	ldr	r3, [pc, #180]	; (800535c <RadioSetTxConfig+0x220>)
 80052a8:	220c      	movs	r2, #12
 80052aa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80052ac:	e006      	b.n	80052bc <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <RadioSetTxConfig+0x220>)
 80052b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052b2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80052b4:	e002      	b.n	80052bc <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80052b6:	4a29      	ldr	r2, [pc, #164]	; (800535c <RadioSetTxConfig+0x220>)
 80052b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052ba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80052bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <RadioSetTxConfig+0x220>)
 80052c2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80052c4:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <RadioSetTxConfig+0x234>)
 80052c6:	781a      	ldrb	r2, [r3, #0]
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <RadioSetTxConfig+0x220>)
 80052ca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80052cc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <RadioSetTxConfig+0x220>)
 80052d2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80052d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <RadioSetTxConfig+0x220>)
 80052dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80052e0:	f000 faa7 	bl	8005832 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <RadioSetTxConfig+0x220>)
 80052e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fc5d 	bl	8004bb4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80052fa:	4819      	ldr	r0, [pc, #100]	; (8005360 <RadioSetTxConfig+0x224>)
 80052fc:	f001 fe66 	bl	8006fcc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005300:	4818      	ldr	r0, [pc, #96]	; (8005364 <RadioSetTxConfig+0x228>)
 8005302:	f001 ff2f 	bl	8007164 <SUBGRF_SetPacketParams>
            break;
 8005306:	e012      	b.n	800532e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8005308:	2003      	movs	r0, #3
 800530a:	f7ff fc53 	bl	8004bb4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <RadioSetTxConfig+0x220>)
 8005310:	2202      	movs	r2, #2
 8005312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8005316:	4a11      	ldr	r2, [pc, #68]	; (800535c <RadioSetTxConfig+0x220>)
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <RadioSetTxConfig+0x220>)
 800531e:	2216      	movs	r2, #22
 8005320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005324:	480e      	ldr	r0, [pc, #56]	; (8005360 <RadioSetTxConfig+0x224>)
 8005326:	f001 fe51 	bl	8006fcc <SUBGRF_SetModulationParams>
            break;
 800532a:	e000      	b.n	800532e <RadioSetTxConfig+0x1f2>
            break;
 800532c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800532e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005332:	4618      	mov	r0, r3
 8005334:	f002 f92a 	bl	800758c <SUBGRF_SetRfTxPower>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <RadioSetTxConfig+0x220>)
 800533e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <RadioSetTxConfig+0x220>)
 8005344:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005348:	4618      	mov	r0, r3
 800534a:	f002 faf0 	bl	800792e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800534e:	4a03      	ldr	r2, [pc, #12]	; (800535c <RadioSetTxConfig+0x220>)
 8005350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005352:	6053      	str	r3, [r2, #4]
}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	2000047c 	.word	0x2000047c
 8005360:	200004b4 	.word	0x200004b4
 8005364:	2000048a 	.word	0x2000048a
 8005368:	08008b5c 	.word	0x08008b5c
 800536c:	08008cc4 	.word	0x08008cc4
 8005370:	2000000d 	.word	0x2000000d

08005374 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
    return true;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2b0a      	cmp	r3, #10
 800539a:	d83e      	bhi.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <RadioGetLoRaBandwidthInHz+0x1c>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053e1 	.word	0x080053e1
 80053ac:	080053f1 	.word	0x080053f1
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005409 	.word	0x08005409
 80053b8:	0800540f 	.word	0x0800540f
 80053bc:	08005415 	.word	0x08005415
 80053c0:	0800541b 	.word	0x0800541b
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053e9 	.word	0x080053e9
 80053cc:	080053f9 	.word	0x080053f9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80053d0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80053d4:	60fb      	str	r3, [r7, #12]
        break;
 80053d6:	e020      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80053d8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80053dc:	60fb      	str	r3, [r7, #12]
        break;
 80053de:	e01c      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80053e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80053e4:	60fb      	str	r3, [r7, #12]
        break;
 80053e6:	e018      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80053e8:	f245 1361 	movw	r3, #20833	; 0x5161
 80053ec:	60fb      	str	r3, [r7, #12]
        break;
 80053ee:	e014      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80053f0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80053f4:	60fb      	str	r3, [r7, #12]
        break;
 80053f6:	e010      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80053f8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80053fc:	60fb      	str	r3, [r7, #12]
        break;
 80053fe:	e00c      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005400:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005404:	60fb      	str	r3, [r7, #12]
        break;
 8005406:	e008      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <RadioGetLoRaBandwidthInHz+0xa0>)
 800540a:	60fb      	str	r3, [r7, #12]
        break;
 800540c:	e005      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <RadioGetLoRaBandwidthInHz+0xa4>)
 8005410:	60fb      	str	r3, [r7, #12]
        break;
 8005412:	e002      	b.n	800541a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <RadioGetLoRaBandwidthInHz+0xa8>)
 8005416:	60fb      	str	r3, [r7, #12]
        break;
 8005418:	bf00      	nop
    }

    return bandwidthInHz;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	0001e848 	.word	0x0001e848
 800542c:	0003d090 	.word	0x0003d090
 8005430:	0007a120 	.word	0x0007a120

08005434 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	461a      	mov	r2, r3
 8005442:	4603      	mov	r3, r0
 8005444:	70fb      	strb	r3, [r7, #3]
 8005446:	460b      	mov	r3, r1
 8005448:	803b      	strh	r3, [r7, #0]
 800544a:	4613      	mov	r3, r2
 800544c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800544e:	883b      	ldrh	r3, [r7, #0]
 8005450:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005452:	78ba      	ldrb	r2, [r7, #2]
 8005454:	f082 0201 	eor.w	r2, r2, #1
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	2a00      	cmp	r2, #0
 800545c:	d001      	beq.n	8005462 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800545e:	2208      	movs	r2, #8
 8005460:	e000      	b.n	8005464 <RadioGetGfskTimeOnAirNumerator+0x30>
 8005462:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005464:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005466:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800546a:	7c3b      	ldrb	r3, [r7, #16]
 800546c:	7d39      	ldrb	r1, [r7, #20]
 800546e:	2900      	cmp	r1, #0
 8005470:	d001      	beq.n	8005476 <RadioGetGfskTimeOnAirNumerator+0x42>
 8005472:	2102      	movs	r1, #2
 8005474:	e000      	b.n	8005478 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005476:	2100      	movs	r1, #0
 8005478:	440b      	add	r3, r1
 800547a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800547c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005488:	b480      	push	{r7}
 800548a:	b08b      	sub	sp, #44	; 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	460b      	mov	r3, r1
 8005498:	71fb      	strb	r3, [r7, #7]
 800549a:	4613      	mov	r3, r2
 800549c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	3304      	adds	r3, #4
 80054a2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b05      	cmp	r3, #5
 80054ae:	d002      	beq.n	80054b6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d104      	bne.n	80054c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80054b6:	88bb      	ldrh	r3, [r7, #4]
 80054b8:	2b0b      	cmp	r3, #11
 80054ba:	d801      	bhi.n	80054c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80054bc:	230c      	movs	r3, #12
 80054be:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b0b      	cmp	r3, #11
 80054ca:	d008      	beq.n	80054de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	d005      	beq.n	80054de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d102      	bne.n	80054e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80054e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80054e8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80054ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	d001      	beq.n	80054f6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80054f2:	2210      	movs	r2, #16
 80054f4:	e000      	b.n	80054f8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80054f6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80054f8:	4413      	add	r3, r2
 80054fa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005500:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005502:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005506:	2a00      	cmp	r2, #0
 8005508:	d001      	beq.n	800550e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800550a:	2200      	movs	r2, #0
 800550c:	e000      	b.n	8005510 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800550e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005510:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005512:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d803      	bhi.n	8005522 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	e00e      	b.n	8005540 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3308      	adds	r3, #8
 8005526:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	3b02      	subs	r3, #2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	e002      	b.n	8005540 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da01      	bge.n	800554a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	4413      	add	r3, r2
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	fb92 f3f3 	sdiv	r3, r2, r3
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	fb02 f203 	mul.w	r2, r2, r3
 800555e:	88bb      	ldrh	r3, [r7, #4]
 8005560:	4413      	add	r3, r2
    int32_t intermediate =
 8005562:	330c      	adds	r3, #12
 8005564:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b06      	cmp	r3, #6
 800556a:	d802      	bhi.n	8005572 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3302      	adds	r3, #2
 8005570:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	3b02      	subs	r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	372c      	adds	r7, #44	; 0x2c
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
	...

0800558c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af04      	add	r7, sp, #16
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	461a      	mov	r2, r3
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	4613      	mov	r3, r2
 800559e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80055a4:	2301      	movs	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <RadioTimeOnAir+0x28>
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d017      	beq.n	80055e2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80055b2:	e035      	b.n	8005620 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80055b4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80055b8:	8c3a      	ldrh	r2, [r7, #32]
 80055ba:	7bb9      	ldrb	r1, [r7, #14]
 80055bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4603      	mov	r3, r0
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ff32 	bl	8005434 <RadioGetGfskTimeOnAirNumerator>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	613b      	str	r3, [r7, #16]
        break;
 80055e0:	e01e      	b.n	8005620 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80055e2:	8c39      	ldrh	r1, [r7, #32]
 80055e4:	7bba      	ldrb	r2, [r7, #14]
 80055e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	460b      	mov	r3, r1
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7ff ff43 	bl	8005488 <RadioGetLoRaTimeOnAirNumerator>
 8005602:	4603      	mov	r3, r0
 8005604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800560e:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <RadioTimeOnAir+0xac>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff feb6 	bl	8005388 <RadioGetLoRaBandwidthInHz>
 800561c:	6138      	str	r0, [r7, #16]
        break;
 800561e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	1e5a      	subs	r2, r3, #1
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	08008cc4 	.word	0x08008cc4

0800563c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005648:	2300      	movs	r3, #0
 800564a:	2200      	movs	r2, #0
 800564c:	f240 2101 	movw	r1, #513	; 0x201
 8005650:	f240 2001 	movw	r0, #513	; 0x201
 8005654:	f001 fb90 	bl	8006d78 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <RadioSend+0x1c4>)
 800565a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f001 ff6b 	bl	800753c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8005666:	4b66      	ldr	r3, [pc, #408]	; (8005800 <RadioSend+0x1c4>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d112      	bne.n	8005694 <RadioSend+0x58>
 800566e:	4b64      	ldr	r3, [pc, #400]	; (8005800 <RadioSend+0x1c4>)
 8005670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005674:	2b06      	cmp	r3, #6
 8005676:	d10d      	bne.n	8005694 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8005678:	f640 0089 	movw	r0, #2185	; 0x889
 800567c:	f001 fece 	bl	800741c <SUBGRF_ReadRegister>
 8005680:	4603      	mov	r3, r0
 8005682:	f023 0304 	bic.w	r3, r3, #4
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	f640 0089 	movw	r0, #2185	; 0x889
 800568e:	f001 feb1 	bl	80073f4 <SUBGRF_WriteRegister>
 8005692:	e00c      	b.n	80056ae <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8005694:	f640 0089 	movw	r0, #2185	; 0x889
 8005698:	f001 fec0 	bl	800741c <SUBGRF_ReadRegister>
 800569c:	4603      	mov	r3, r0
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	4619      	mov	r1, r3
 80056a6:	f640 0089 	movw	r0, #2185	; 0x889
 80056aa:	f001 fea3 	bl	80073f4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80056ae:	4b54      	ldr	r3, [pc, #336]	; (8005800 <RadioSend+0x1c4>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	f200 809e 	bhi.w	80057f4 <RadioSend+0x1b8>
 80056b8:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <RadioSend+0x84>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056d1 	.word	0x080056d1
 80056c8:	0800573d 	.word	0x0800573d
 80056cc:	0800575d 	.word	0x0800575d
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80056d0:	4a4b      	ldr	r2, [pc, #300]	; (8005800 <RadioSend+0x1c4>)
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80056d6:	484b      	ldr	r0, [pc, #300]	; (8005804 <RadioSend+0x1c8>)
 80056d8:	f001 fd44 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2200      	movs	r2, #0
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f86a 	bl	80067bc <SUBGRF_SendPayload>
            break;
 80056e8:	e087      	b.n	80057fa <RadioSend+0x1be>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80056ea:	f002 f912 	bl	8007912 <RFW_Is_Init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d116      	bne.n	8005722 <RadioSend+0xe6>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80056f4:	f107 020d 	add.w	r2, r7, #13
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f002 f920 	bl	8007942 <RFW_TransmitInit>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d177      	bne.n	80057f8 <RadioSend+0x1bc>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005708:	7b7a      	ldrb	r2, [r7, #13]
 800570a:	4b3d      	ldr	r3, [pc, #244]	; (8005800 <RadioSend+0x1c4>)
 800570c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800570e:	483d      	ldr	r0, [pc, #244]	; (8005804 <RadioSend+0x1c8>)
 8005710:	f001 fd28 	bl	8007164 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8005714:	7b7b      	ldrb	r3, [r7, #13]
 8005716:	2200      	movs	r2, #0
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 f84e 	bl	80067bc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005720:	e06b      	b.n	80057fa <RadioSend+0x1be>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005722:	4a37      	ldr	r2, [pc, #220]	; (8005800 <RadioSend+0x1c4>)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005728:	4836      	ldr	r0, [pc, #216]	; (8005804 <RadioSend+0x1c8>)
 800572a:	f001 fd1b 	bl	8007164 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2200      	movs	r2, #0
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 f841 	bl	80067bc <SUBGRF_SendPayload>
            break;
 800573a:	e05e      	b.n	80057fa <RadioSend+0x1be>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800573c:	4b30      	ldr	r3, [pc, #192]	; (8005800 <RadioSend+0x1c4>)
 800573e:	2202      	movs	r2, #2
 8005740:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005742:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <RadioSend+0x1c4>)
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005748:	482e      	ldr	r0, [pc, #184]	; (8005804 <RadioSend+0x1c8>)
 800574a:	f001 fd0b 	bl	8007164 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	2200      	movs	r2, #0
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f831 	bl	80067bc <SUBGRF_SendPayload>
            break;
 800575a:	e04e      	b.n	80057fa <RadioSend+0x1be>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	461a      	mov	r2, r3
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4829      	ldr	r0, [pc, #164]	; (8005808 <RadioSend+0x1cc>)
 8005764:	f000 fbb1 	bl	8005eca <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <RadioSend+0x1c4>)
 800576a:	2202      	movs	r2, #2
 800576c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b22      	ldr	r3, [pc, #136]	; (8005800 <RadioSend+0x1c4>)
 8005776:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005778:	4822      	ldr	r0, [pc, #136]	; (8005804 <RadioSend+0x1c8>)
 800577a:	f001 fcf3 	bl	8007164 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800577e:	2100      	movs	r1, #0
 8005780:	20f1      	movs	r0, #241	; 0xf1
 8005782:	f000 f91b 	bl	80059bc <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8005786:	2100      	movs	r1, #0
 8005788:	20f0      	movs	r0, #240	; 0xf0
 800578a:	f000 f917 	bl	80059bc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <RadioSend+0x1c4>)
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d108      	bne.n	80057a8 <RadioSend+0x16c>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8005796:	2170      	movs	r1, #112	; 0x70
 8005798:	20f3      	movs	r0, #243	; 0xf3
 800579a:	f000 f90f 	bl	80059bc <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800579e:	211d      	movs	r1, #29
 80057a0:	20f2      	movs	r0, #242	; 0xf2
 80057a2:	f000 f90b 	bl	80059bc <RadioWrite>
 80057a6:	e007      	b.n	80057b8 <RadioSend+0x17c>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80057a8:	21e1      	movs	r1, #225	; 0xe1
 80057aa:	20f3      	movs	r0, #243	; 0xf3
 80057ac:	f000 f906 	bl	80059bc <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80057b0:	2104      	movs	r1, #4
 80057b2:	20f2      	movs	r0, #242	; 0xf2
 80057b4:	f000 f902 	bl	80059bc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3302      	adds	r3, #2
 80057c2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80057c4:	89fb      	ldrh	r3, [r7, #14]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	20f4      	movs	r0, #244	; 0xf4
 80057d0:	f000 f8f4 	bl	80059bc <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80057d4:	89fb      	ldrh	r3, [r7, #14]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	20f5      	movs	r0, #245	; 0xf5
 80057dc:	f000 f8ee 	bl	80059bc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	3301      	adds	r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80057ea:	4619      	mov	r1, r3
 80057ec:	4806      	ldr	r0, [pc, #24]	; (8005808 <RadioSend+0x1cc>)
 80057ee:	f000 ffe5 	bl	80067bc <SUBGRF_SendPayload>
            break;
 80057f2:	e002      	b.n	80057fa <RadioSend+0x1be>
        }
        default:
            break;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <RadioSend+0x1be>
                return;
 80057f8:	bf00      	nop
    }

    //TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
    //TimerStart( &TxTimeoutTimer );
}
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	2000047c 	.word	0x2000047c
 8005804:	2000048a 	.word	0x2000048a
 8005808:	200002c0 	.word	0x200002c0

0800580c <RadioSleep>:

static void RadioSleep( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005812:	2300      	movs	r3, #0
 8005814:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005816:	793b      	ldrb	r3, [r7, #4]
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800581e:	7938      	ldrb	r0, [r7, #4]
 8005820:	f001 f8a8 	bl	8006974 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005824:	2002      	movs	r0, #2
 8005826:	f7fb fc51 	bl	80010cc <HAL_Delay>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <RadioStandby>:

static void RadioStandby( void )
{
 8005832:	b580      	push	{r7, lr}
 8005834:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005836:	2000      	movs	r0, #0
 8005838:	f001 f8ce 	bl	80069d8 <SUBGRF_SetStandby>
}
 800583c:	bf00      	nop
 800583e:	bd80      	pop	{r7, pc}

08005840 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8005848:	f002 f863 	bl	8007912 <RFW_Is_Init>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	d102      	bne.n	8005858 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8005852:	f002 f886 	bl	8007962 <RFW_ReceiveInit>
 8005856:	e007      	b.n	8005868 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005858:	2300      	movs	r3, #0
 800585a:	2200      	movs	r2, #0
 800585c:	f240 2162 	movw	r1, #610	; 0x262
 8005860:	f240 2062 	movw	r0, #610	; 0x262
 8005864:	f001 fa88 	bl	8006d78 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <RadioRx+0x5c>)
 800586a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fe63 	bl	800753c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <RadioRx+0x5c>)
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <RadioRx+0x48>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800587e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005882:	f001 f8e5 	bl	8006a50 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005886:	e005      	b.n	8005894 <RadioRx+0x54>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <RadioRx+0x5c>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f8de 	bl	8006a50 <SUBGRF_SetRx>
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2000047c 	.word	0x2000047c

080058a0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80058a8:	f002 f833 	bl	8007912 <RFW_Is_Init>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80058b2:	f002 f856 	bl	8007962 <RFW_ReceiveInit>
 80058b6:	e007      	b.n	80058c8 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80058b8:	2300      	movs	r3, #0
 80058ba:	2200      	movs	r2, #0
 80058bc:	f240 2162 	movw	r1, #610	; 0x262
 80058c0:	f240 2062 	movw	r0, #610	; 0x262
 80058c4:	f001 fa58 	bl	8006d78 <SUBGRF_SetDioIrqParams>
        //TimerSetValue( &RxTimeoutTimer, timeout );
        //TimerStart( &RxTimeoutTimer );
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <RadioRxBoosted+0x5c>)
 80058ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fe33 	bl	800753c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <RadioRxBoosted+0x5c>)
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <RadioRxBoosted+0x48>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80058de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80058e2:	f001 f8d5 	bl	8006a90 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80058e6:	e005      	b.n	80058f4 <RadioRxBoosted+0x54>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <RadioRxBoosted+0x5c>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 f8ce 	bl	8006a90 <SUBGRF_SetRxBoosted>
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2000047c 	.word	0x2000047c

08005900 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <RadioSetRxDutyCycle+0x28>)
 800590c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fe12 	bl	800753c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 f8dc 	bl	8006ad8 <SUBGRF_SetRxDutyCycle>
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000047c 	.word	0x2000047c

0800592c <RadioStartCad>:

static void RadioStartCad( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <RadioStartCad+0x2c>)
 8005932:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fdff 	bl	800753c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800593e:	2300      	movs	r3, #0
 8005940:	2200      	movs	r2, #0
 8005942:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005946:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800594a:	f001 fa15 	bl	8006d78 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800594e:	f001 f8ef 	bl	8006b30 <SUBGRF_SetCad>
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000047c 	.word	0x2000047c

0800595c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
 8005968:	4613      	mov	r3, r2
 800596a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800596c:	883b      	ldrh	r3, [r7, #0]
 800596e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f001 fa59 	bl	8006e30 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800597e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fe02 	bl	800758c <SUBGRF_SetRfTxPower>
 8005988:	4603      	mov	r3, r0
 800598a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800598c:	7afb      	ldrb	r3, [r7, #11]
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fdd3 	bl	800753c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005996:	f001 f8d9 	bl	8006b4c <SUBGRF_SetTxContinuousWave>

    //TimerSetValue( &TxTimeoutTimer, timeout );
    //TimerStart( &TxTimeoutTimer );
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	4603      	mov	r3, r0
 80059aa:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80059ac:	f001 fc8f 	bl	80072ce <SUBGRF_GetRssiInst>
 80059b0:	4603      	mov	r3, r0
 80059b2:	b21b      	sxth	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	460a      	mov	r2, r1
 80059c6:	80fb      	strh	r3, [r7, #6]
 80059c8:	4613      	mov	r3, r2
 80059ca:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80059cc:	797a      	ldrb	r2, [r7, #5]
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 fd0e 	bl	80073f4 <SUBGRF_WriteRegister>
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fd15 	bl	800741c <SUBGRF_ReadRegister>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	80fb      	strh	r3, [r7, #6]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005a0c:	797b      	ldrb	r3, [r7, #5]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fd15 	bl	8007444 <SUBGRF_WriteRegisters>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	6039      	str	r1, [r7, #0]
 8005a2c:	80fb      	strh	r3, [r7, #6]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005a32:	797b      	ldrb	r3, [r7, #5]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fd16 	bl	800746c <SUBGRF_ReadRegisters>
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	460a      	mov	r2, r1
 8005a52:	71fb      	strb	r3, [r7, #7]
 8005a54:	4613      	mov	r3, r2
 8005a56:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10a      	bne.n	8005a74 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005a5e:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <RadioSetMaxPayloadLength+0x50>)
 8005a60:	79bb      	ldrb	r3, [r7, #6]
 8005a62:	7013      	strb	r3, [r2, #0]
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <RadioSetMaxPayloadLength+0x50>)
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <RadioSetMaxPayloadLength+0x54>)
 8005a6a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <RadioSetMaxPayloadLength+0x58>)
 8005a6e:	f001 fb79 	bl	8007164 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8005a72:	e00d      	b.n	8005a90 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <RadioSetMaxPayloadLength+0x54>)
 8005a76:	7d5b      	ldrb	r3, [r3, #21]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d109      	bne.n	8005a90 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005a7c:	4a06      	ldr	r2, [pc, #24]	; (8005a98 <RadioSetMaxPayloadLength+0x50>)
 8005a7e:	79bb      	ldrb	r3, [r7, #6]
 8005a80:	7013      	strb	r3, [r2, #0]
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <RadioSetMaxPayloadLength+0x50>)
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <RadioSetMaxPayloadLength+0x54>)
 8005a88:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <RadioSetMaxPayloadLength+0x58>)
 8005a8c:	f001 fb6a 	bl	8007164 <SUBGRF_SetPacketParams>
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2000000d 	.word	0x2000000d
 8005a9c:	2000047c 	.word	0x2000047c
 8005aa0:	2000048a 	.word	0x2000048a

08005aa4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <RadioSetPublicNetwork+0x58>)
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	7313      	strb	r3, [r2, #12]
 8005ab4:	4b11      	ldr	r3, [pc, #68]	; (8005afc <RadioSetPublicNetwork+0x58>)
 8005ab6:	7b1a      	ldrb	r2, [r3, #12]
 8005ab8:	4b10      	ldr	r3, [pc, #64]	; (8005afc <RadioSetPublicNetwork+0x58>)
 8005aba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7ff f879 	bl	8004bb4 <RadioSetModem>
    if( enable == true )
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005ac8:	2134      	movs	r1, #52	; 0x34
 8005aca:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005ace:	f001 fc91 	bl	80073f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005ad2:	2144      	movs	r1, #68	; 0x44
 8005ad4:	f240 7041 	movw	r0, #1857	; 0x741
 8005ad8:	f001 fc8c 	bl	80073f4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8005adc:	e009      	b.n	8005af2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8005ade:	2114      	movs	r1, #20
 8005ae0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005ae4:	f001 fc86 	bl	80073f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005ae8:	2124      	movs	r1, #36	; 0x24
 8005aea:	f240 7041 	movw	r0, #1857	; 0x741
 8005aee:	f001 fc81 	bl	80073f4 <SUBGRF_WriteRegister>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000047c 	.word	0x2000047c

08005b00 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005b04:	f001 fd76 	bl	80075f4 <SUBGRF_GetRadioWakeUpTime>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	3303      	adds	r3, #3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <RadioOnDioIrq>:
        RadioEvents->RxTimeout( );
    }
}

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8005b1a:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <RadioOnDioIrq+0x20>)
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8005b22:	f000 f807 	bl	8005b34 <RadioIrqProcess>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	2000047c 	.word	0x2000047c

08005b34 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8005b42:	4bab      	ldr	r3, [pc, #684]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005b44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	f000 8104 	beq.w	8005d58 <RadioIrqProcess+0x224>
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	f300 816e 	bgt.w	8005e34 <RadioIrqProcess+0x300>
 8005b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5c:	f000 80ea 	beq.w	8005d34 <RadioIrqProcess+0x200>
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b64:	f300 8166 	bgt.w	8005e34 <RadioIrqProcess+0x300>
 8005b68:	2b80      	cmp	r3, #128	; 0x80
 8005b6a:	f000 80cf 	beq.w	8005d0c <RadioIrqProcess+0x1d8>
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	f300 8160 	bgt.w	8005e34 <RadioIrqProcess+0x300>
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	dc49      	bgt.n	8005c0c <RadioIrqProcess+0xd8>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f340 815b 	ble.w	8005e34 <RadioIrqProcess+0x300>
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2b1f      	cmp	r3, #31
 8005b82:	f200 8157 	bhi.w	8005e34 <RadioIrqProcess+0x300>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <RadioIrqProcess+0x58>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005c15 	.word	0x08005c15
 8005b90:	08005c49 	.word	0x08005c49
 8005b94:	08005e35 	.word	0x08005e35
 8005b98:	08005e35 	.word	0x08005e35
 8005b9c:	08005e35 	.word	0x08005e35
 8005ba0:	08005e35 	.word	0x08005e35
 8005ba4:	08005e35 	.word	0x08005e35
 8005ba8:	08005db1 	.word	0x08005db1
 8005bac:	08005e35 	.word	0x08005e35
 8005bb0:	08005e35 	.word	0x08005e35
 8005bb4:	08005e35 	.word	0x08005e35
 8005bb8:	08005e35 	.word	0x08005e35
 8005bbc:	08005e35 	.word	0x08005e35
 8005bc0:	08005e35 	.word	0x08005e35
 8005bc4:	08005e35 	.word	0x08005e35
 8005bc8:	08005e35 	.word	0x08005e35
 8005bcc:	08005e35 	.word	0x08005e35
 8005bd0:	08005e35 	.word	0x08005e35
 8005bd4:	08005e35 	.word	0x08005e35
 8005bd8:	08005e35 	.word	0x08005e35
 8005bdc:	08005e35 	.word	0x08005e35
 8005be0:	08005e35 	.word	0x08005e35
 8005be4:	08005e35 	.word	0x08005e35
 8005be8:	08005e35 	.word	0x08005e35
 8005bec:	08005e35 	.word	0x08005e35
 8005bf0:	08005e35 	.word	0x08005e35
 8005bf4:	08005e35 	.word	0x08005e35
 8005bf8:	08005e35 	.word	0x08005e35
 8005bfc:	08005e35 	.word	0x08005e35
 8005c00:	08005e35 	.word	0x08005e35
 8005c04:	08005e35 	.word	0x08005e35
 8005c08:	08005dc1 	.word	0x08005dc1
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	f000 80f9 	beq.w	8005e04 <RadioIrqProcess+0x2d0>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8005c12:	e10f      	b.n	8005e34 <RadioIrqProcess+0x300>
        SUBGRF_SetStandby( STDBY_RC );
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 fedf 	bl	80069d8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8005c1a:	f001 fe81 	bl	8007920 <RFW_Is_LongPacketModeEnabled>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <RadioIrqProcess+0xf4>
            RFW_DeInit_TxLongPacket( );
 8005c24:	f001 fea5 	bl	8007972 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005c28:	4b72      	ldr	r3, [pc, #456]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8103 	beq.w	8005e38 <RadioIrqProcess+0x304>
 8005c32:	4b70      	ldr	r3, [pc, #448]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80fd 	beq.w	8005e38 <RadioIrqProcess+0x304>
            RadioEvents->TxDone( );
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4798      	blx	r3
        break;
 8005c46:	e0f7      	b.n	8005e38 <RadioIrqProcess+0x304>
        if( SubgRf.RxContinuous == false )
 8005c48:	4b69      	ldr	r3, [pc, #420]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <RadioIrqProcess+0x14c>
            SUBGRF_SetStandby( STDBY_RC );
 8005c56:	2000      	movs	r0, #0
 8005c58:	f000 febe 	bl	80069d8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f640 1002 	movw	r0, #2306	; 0x902
 8005c62:	f001 fbc7 	bl	80073f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8005c66:	f640 1044 	movw	r0, #2372	; 0x944
 8005c6a:	f001 fbd7 	bl	800741c <SUBGRF_ReadRegister>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	f640 1044 	movw	r0, #2372	; 0x944
 8005c7c:	f001 fbba 	bl	80073f4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	4619      	mov	r1, r3
 8005c86:	485c      	ldr	r0, [pc, #368]	; (8005df8 <RadioIrqProcess+0x2c4>)
 8005c88:	f000 fd76 	bl	8006778 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8005c8c:	485b      	ldr	r0, [pc, #364]	; (8005dfc <RadioIrqProcess+0x2c8>)
 8005c8e:	f001 fb5f 	bl	8007350 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005c92:	4b58      	ldr	r3, [pc, #352]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d036      	beq.n	8005d08 <RadioIrqProcess+0x1d4>
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d031      	beq.n	8005d08 <RadioIrqProcess+0x1d4>
            switch ( SubgRf.PacketStatus.packetType )
 8005ca4:	4b52      	ldr	r3, [pc, #328]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10e      	bne.n	8005ccc <RadioIrqProcess+0x198>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8005cae:	4b51      	ldr	r3, [pc, #324]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689c      	ldr	r4, [r3, #8]
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	4b4d      	ldr	r3, [pc, #308]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005cba:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8005cbe:	b21a      	sxth	r2, r3
 8005cc0:	4b4b      	ldr	r3, [pc, #300]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005cc2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8005cc6:	484c      	ldr	r0, [pc, #304]	; (8005df8 <RadioIrqProcess+0x2c4>)
 8005cc8:	47a0      	blx	r4
                break;
 8005cca:	e01e      	b.n	8005d0a <RadioIrqProcess+0x1d6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8005ccc:	4b48      	ldr	r3, [pc, #288]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	463a      	mov	r2, r7
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 fd6f 	bl	80077b8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8005cda:	4b46      	ldr	r3, [pc, #280]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689c      	ldr	r4, [r3, #8]
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	b299      	uxth	r1, r3
 8005ce4:	4b42      	ldr	r3, [pc, #264]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005ce6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8005cea:	b218      	sxth	r0, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005cf2:	4a43      	ldr	r2, [pc, #268]	; (8005e00 <RadioIrqProcess+0x2cc>)
 8005cf4:	fb82 c203 	smull	ip, r2, r2, r3
 8005cf8:	1192      	asrs	r2, r2, #6
 8005cfa:	17db      	asrs	r3, r3, #31
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	4602      	mov	r2, r0
 8005d02:	483d      	ldr	r0, [pc, #244]	; (8005df8 <RadioIrqProcess+0x2c4>)
 8005d04:	47a0      	blx	r4
                break;
 8005d06:	e000      	b.n	8005d0a <RadioIrqProcess+0x1d6>
        }
 8005d08:	bf00      	nop
        break;
 8005d0a:	e0a2      	b.n	8005e52 <RadioIrqProcess+0x31e>
        SUBGRF_SetStandby( STDBY_RC );
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f000 fe63 	bl	80069d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d12:	4b38      	ldr	r3, [pc, #224]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8090 	beq.w	8005e3c <RadioIrqProcess+0x308>
 8005d1c:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 808a 	beq.w	8005e3c <RadioIrqProcess+0x308>
            RadioEvents->CadDone( false );
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2000      	movs	r0, #0
 8005d30:	4798      	blx	r3
        break;
 8005d32:	e083      	b.n	8005e3c <RadioIrqProcess+0x308>
        SUBGRF_SetStandby( STDBY_RC );
 8005d34:	2000      	movs	r0, #0
 8005d36:	f000 fe4f 	bl	80069d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005d3a:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d07e      	beq.n	8005e40 <RadioIrqProcess+0x30c>
 8005d42:	4b2c      	ldr	r3, [pc, #176]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d079      	beq.n	8005e40 <RadioIrqProcess+0x30c>
            RadioEvents->CadDone( true );
 8005d4c:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2001      	movs	r0, #1
 8005d54:	4798      	blx	r3
        break;
 8005d56:	e073      	b.n	8005e40 <RadioIrqProcess+0x30c>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8005d58:	f000 fcf4 	bl	8006744 <SUBGRF_GetOperatingMode>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d110      	bne.n	8005d84 <RadioIrqProcess+0x250>
            SUBGRF_SetStandby( STDBY_RC );
 8005d62:	2000      	movs	r0, #0
 8005d64:	f000 fe38 	bl	80069d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005d68:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d069      	beq.n	8005e44 <RadioIrqProcess+0x310>
 8005d70:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d064      	beq.n	8005e44 <RadioIrqProcess+0x310>
                RadioEvents->TxTimeout( );
 8005d7a:	4b1e      	ldr	r3, [pc, #120]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4798      	blx	r3
        break;
 8005d82:	e05f      	b.n	8005e44 <RadioIrqProcess+0x310>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8005d84:	f000 fcde 	bl	8006744 <SUBGRF_GetOperatingMode>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d15a      	bne.n	8005e44 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f000 fe22 	bl	80069d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d053      	beq.n	8005e44 <RadioIrqProcess+0x310>
 8005d9c:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d04e      	beq.n	8005e44 <RadioIrqProcess+0x310>
                RadioEvents->RxTimeout( );
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4798      	blx	r3
        break;
 8005dae:	e049      	b.n	8005e44 <RadioIrqProcess+0x310>
        if ( 1UL == RFW_Is_Init( ) )
 8005db0:	f001 fdaf 	bl	8007912 <RFW_Is_Init>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d146      	bne.n	8005e48 <RadioIrqProcess+0x314>
            RFW_ReceivePayload( );
 8005dba:	f001 fde0 	bl	800797e <RFW_ReceivePayload>
        break;
 8005dbe:	e043      	b.n	8005e48 <RadioIrqProcess+0x314>
        if( SubgRf.RxContinuous == false )
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <RadioIrqProcess+0x2bc>)
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	f083 0301 	eor.w	r3, r3, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <RadioIrqProcess+0x2a0>
            SUBGRF_SetStandby( STDBY_RC );
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f000 fe02 	bl	80069d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d037      	beq.n	8005e4c <RadioIrqProcess+0x318>
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d032      	beq.n	8005e4c <RadioIrqProcess+0x318>
            RadioEvents->RxTimeout( );
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <RadioIrqProcess+0x2c0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4798      	blx	r3
        break;
 8005dee:	e02d      	b.n	8005e4c <RadioIrqProcess+0x318>
 8005df0:	2000047c 	.word	0x2000047c
 8005df4:	200003c0 	.word	0x200003c0
 8005df8:	200002c0 	.word	0x200002c0
 8005dfc:	200004a0 	.word	0x200004a0
 8005e00:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <RadioIrqProcess+0x328>)
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	f083 0301 	eor.w	r3, r3, #1
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <RadioIrqProcess+0x2e4>
            SUBGRF_SetStandby( STDBY_RC );
 8005e12:	2000      	movs	r0, #0
 8005e14:	f000 fde0 	bl	80069d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <RadioIrqProcess+0x32c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <RadioIrqProcess+0x31c>
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <RadioIrqProcess+0x32c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <RadioIrqProcess+0x31c>
            RadioEvents->RxError( );
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <RadioIrqProcess+0x32c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	4798      	blx	r3
        break;
 8005e32:	e00d      	b.n	8005e50 <RadioIrqProcess+0x31c>
        break;
 8005e34:	bf00      	nop
 8005e36:	e00c      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e38:	bf00      	nop
 8005e3a:	e00a      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e3c:	bf00      	nop
 8005e3e:	e008      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e40:	bf00      	nop
 8005e42:	e006      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e44:	bf00      	nop
 8005e46:	e004      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <RadioIrqProcess+0x31e>
        break;
 8005e50:	bf00      	nop
  }
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2000047c 	.word	0x2000047c
 8005e60:	200003c0 	.word	0x200003c0

08005e64 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <RadioTxPrbs+0x2c>)
 8005e6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 fb63 	bl	800753c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <RadioTxPrbs+0x30>)
 8005e78:	212d      	movs	r1, #45	; 0x2d
 8005e7a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005e7e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8005e80:	f000 fe6d 	bl	8006b5e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8005e84:	4804      	ldr	r0, [pc, #16]	; (8005e98 <RadioTxPrbs+0x34>)
 8005e86:	f000 fdc3 	bl	8006a10 <SUBGRF_SetTx>
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000047c 	.word	0x2000047c
 8005e94:	080059bd 	.word	0x080059bd
 8005e98:	000fffff 	.word	0x000fffff

08005e9c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fb6e 	bl	800758c <SUBGRF_SetRfTxPower>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fb3f 	bl	800753c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005ebe:	f000 fe45 	bl	8006b4c <SUBGRF_SetTxContinuousWave>
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b089      	sub	sp, #36	; 0x24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e011      	b.n	8005f0a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4413      	add	r3, r2
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	440b      	add	r3, r1
 8005ef4:	43d2      	mvns	r2, r2
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	dbe9      	blt.n	8005ee6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e049      	b.n	8005fac <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	425a      	negs	r2, r3
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	f002 0207 	and.w	r2, r2, #7
 8005f24:	bf58      	it	pl
 8005f26:	4253      	negpl	r3, r2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f1c3 0307 	rsb	r3, r3, #7
 8005f2e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da00      	bge.n	8005f38 <payload_integration+0x6e>
 8005f36:	3307      	adds	r3, #7
 8005f38:	10db      	asrs	r3, r3, #3
 8005f3a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	425a      	negs	r2, r3
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	f002 0207 	and.w	r2, r2, #7
 8005f4a:	bf58      	it	pl
 8005f4c:	4253      	negpl	r3, r2
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f1c3 0307 	rsb	r3, r3, #7
 8005f54:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da00      	bge.n	8005f60 <payload_integration+0x96>
 8005f5e:	3307      	adds	r3, #7
 8005f60:	10db      	asrs	r3, r3, #3
 8005f62:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8005f64:	7dbb      	ldrb	r3, [r7, #22]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	fa42 f303 	asr.w	r3, r2, r3
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8005f7c:	7ffa      	ldrb	r2, [r7, #31]
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	4053      	eors	r3, r2
 8005f82:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8005f84:	7d3b      	ldrb	r3, [r7, #20]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b25a      	sxtb	r2, r3
 8005f8e:	7ff9      	ldrb	r1, [r7, #31]
 8005f90:	7d7b      	ldrb	r3, [r7, #21]
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b259      	sxtb	r1, r3
 8005f9c:	7d3b      	ldrb	r3, [r7, #20]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	b2ca      	uxtb	r2, r1
 8005fa4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	dbb0      	blt.n	8005f18 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	01db      	lsls	r3, r3, #7
 8005fba:	b25a      	sxtb	r2, r3
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
 8005fbe:	019b      	lsls	r3, r3, #6
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b25b      	sxtb	r3, r3
 8005fc6:	7ffa      	ldrb	r2, [r7, #31]
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d101      	bne.n	8005fd0 <payload_integration+0x106>
 8005fcc:	2220      	movs	r2, #32
 8005fce:	e000      	b.n	8005fd2 <payload_integration+0x108>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b259      	sxtb	r1, r3
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	b2ca      	uxtb	r2, r1
 8005fde:	701a      	strb	r2, [r3, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	3724      	adds	r7, #36	; 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
	...

08005fec <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	; 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	2300      	movs	r3, #0
 8006006:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006008:	f001 fc7d 	bl	8007906 <RFW_DeInit>

    if( rxContinuous != 0 )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4ba9      	ldr	r3, [pc, #676]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006024:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <RadioSetRxGenericConfig+0x48>
 800602c:	2b01      	cmp	r3, #1
 800602e:	f000 80e8 	beq.w	8006202 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8006032:	e1a0      	b.n	8006376 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <RadioSetRxGenericConfig+0x58>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	e196      	b.n	8006378 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	7d5b      	ldrb	r3, [r3, #21]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d902      	bls.n	8006058 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	e18f      	b.n	8006378 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006058:	2300      	movs	r3, #0
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
 800605c:	e00d      	b.n	800607a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	4413      	add	r3, r2
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	f107 021c 	add.w	r2, r7, #28
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	4413      	add	r3, r2
 8006070:	460a      	mov	r2, r1
 8006072:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	3301      	adds	r3, #1
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	7d5b      	ldrb	r3, [r3, #21]
 800607e:	461a      	mov	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	4293      	cmp	r3, r2
 8006084:	dbeb      	blt.n	800605e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd6b 	bl	8006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800609a:	4b8b      	ldr	r3, [pc, #556]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4a88      	ldr	r2, [pc, #544]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060a8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	791a      	ldrb	r2, [r3, #4]
 80060ae:	4b86      	ldr	r3, [pc, #536]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fb55 	bl	8007768 <SUBGRF_GetFskBandwidthRegValue>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80060c8:	4b7f      	ldr	r3, [pc, #508]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060da:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	7d1a      	ldrb	r2, [r3, #20]
 80060e0:	4b79      	ldr	r3, [pc, #484]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060e2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	7d5b      	ldrb	r3, [r3, #21]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	4b76      	ldr	r3, [pc, #472]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060ee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80060f6:	4b74      	ldr	r3, [pc, #464]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80060f8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4b6f      	ldr	r3, [pc, #444]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800610c:	759a      	strb	r2, [r3, #22]
 800610e:	e00b      	b.n	8006128 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006116:	2b02      	cmp	r3, #2
 8006118:	d103      	bne.n	8006122 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800611a:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800611c:	22ff      	movs	r2, #255	; 0xff
 800611e:	759a      	strb	r2, [r3, #22]
 8006120:	e002      	b.n	8006128 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006122:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006124:	22ff      	movs	r2, #255	; 0xff
 8006126:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800612e:	2b02      	cmp	r3, #2
 8006130:	d004      	beq.n	800613c <RadioSetRxGenericConfig+0x150>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006138:	2b02      	cmp	r3, #2
 800613a:	d12d      	bne.n	8006198 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006142:	2bf1      	cmp	r3, #241	; 0xf1
 8006144:	d00c      	beq.n	8006160 <RadioSetRxGenericConfig+0x174>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800614c:	2bf2      	cmp	r3, #242	; 0xf2
 800614e:	d007      	beq.n	8006160 <RadioSetRxGenericConfig+0x174>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006156:	2b01      	cmp	r3, #1
 8006158:	d002      	beq.n	8006160 <RadioSetRxGenericConfig+0x174>
            return -1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	e10b      	b.n	8006378 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8006160:	2300      	movs	r3, #0
 8006162:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006168:	4b58      	ldr	r3, [pc, #352]	; (80062cc <RadioSetRxGenericConfig+0x2e0>)
 800616a:	6819      	ldr	r1, [r3, #0]
 800616c:	f107 0310 	add.w	r3, r7, #16
 8006170:	4a57      	ldr	r2, [pc, #348]	; (80062d0 <RadioSetRxGenericConfig+0x2e4>)
 8006172:	4618      	mov	r0, r3
 8006174:	f001 fbba 	bl	80078ec <RFW_Init>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <RadioSetRxGenericConfig+0x198>
            return -1;
 800617e:	f04f 33ff 	mov.w	r3, #4294967295
 8006182:	e0f9      	b.n	8006378 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006184:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006186:	2200      	movs	r2, #0
 8006188:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800618a:	4b4f      	ldr	r3, [pc, #316]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800618c:	2201      	movs	r2, #1
 800618e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006190:	4b4d      	ldr	r3, [pc, #308]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006192:	2200      	movs	r2, #0
 8006194:	755a      	strb	r2, [r3, #21]
        {
 8006196:	e00e      	b.n	80061b6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800619e:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80061a0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80061a8:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80061aa:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80061b2:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80061b4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80061b6:	f7ff fb3c 	bl	8005832 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80061ba:	2000      	movs	r0, #0
 80061bc:	f7fe fcfa 	bl	8004bb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80061c0:	4844      	ldr	r0, [pc, #272]	; (80062d4 <RadioSetRxGenericConfig+0x2e8>)
 80061c2:	f000 ff03 	bl	8006fcc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80061c6:	4844      	ldr	r0, [pc, #272]	; (80062d8 <RadioSetRxGenericConfig+0x2ec>)
 80061c8:	f000 ffcc 	bl	8007164 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80061cc:	f107 031c 	add.w	r3, r7, #28
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fb06 	bl	80067e2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	8c1b      	ldrh	r3, [r3, #32]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fb50 	bl	8006880 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fb2b 	bl	8006840 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80061f0:	fb02 f203 	mul.w	r2, r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	4a32      	ldr	r2, [pc, #200]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80061fe:	6093      	str	r3, [r2, #8]
        break;
 8006200:	e0b9      	b.n	8006376 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <RadioSetRxGenericConfig+0x224>
            return -1;
 800620a:	f04f 33ff 	mov.w	r3, #4294967295
 800620e:	e0b3      	b.n	8006378 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006216:	2b01      	cmp	r3, #1
 8006218:	d104      	bne.n	8006224 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006222:	e002      	b.n	800622a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8006224:	23ff      	movs	r3, #255	; 0xff
 8006226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	bf14      	ite	ne
 8006232:	2301      	movne	r3, #1
 8006234:	2300      	moveq	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fc99 	bl	8006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fca3 	bl	8006b8e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006248:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006270:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800627a:	2b02      	cmp	r3, #2
 800627c:	d010      	beq.n	80062a0 <RadioSetRxGenericConfig+0x2b4>
 800627e:	2b02      	cmp	r3, #2
 8006280:	dc2c      	bgt.n	80062dc <RadioSetRxGenericConfig+0x2f0>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <RadioSetRxGenericConfig+0x2a0>
 8006286:	2b01      	cmp	r3, #1
 8006288:	d005      	beq.n	8006296 <RadioSetRxGenericConfig+0x2aa>
            break;
 800628a:	e027      	b.n	80062dc <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006294:	e023      	b.n	80062de <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800629e:	e01e      	b.n	80062de <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062a6:	2b0b      	cmp	r3, #11
 80062a8:	d004      	beq.n	80062b4 <RadioSetRxGenericConfig+0x2c8>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d104      	bne.n	80062be <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80062b4:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80062bc:	e00f      	b.n	80062de <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80062be:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <RadioSetRxGenericConfig+0x2dc>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80062c6:	e00a      	b.n	80062de <RadioSetRxGenericConfig+0x2f2>
 80062c8:	2000047c 	.word	0x2000047c
 80062cc:	200003c0 	.word	0x200003c0
 80062d0:	200004d5 	.word	0x200004d5
 80062d4:	200004b4 	.word	0x200004b4
 80062d8:	2000048a 	.word	0x2000048a
            break;
 80062dc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 80062ea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 80062f4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80062f6:	4a22      	ldr	r2, [pc, #136]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 80062f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062fc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8006304:	4b1e      	ldr	r3, [pc, #120]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 8006306:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 8006312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006316:	f7ff fa8c 	bl	8005832 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800631a:	2001      	movs	r0, #1
 800631c:	f7fe fc4a 	bl	8004bb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006320:	4818      	ldr	r0, [pc, #96]	; (8006384 <RadioSetRxGenericConfig+0x398>)
 8006322:	f000 fe53 	bl	8006fcc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006326:	4818      	ldr	r0, [pc, #96]	; (8006388 <RadioSetRxGenericConfig+0x39c>)
 8006328:	f000 ff1c 	bl	8007164 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 800632e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10d      	bne.n	8006352 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006336:	f240 7036 	movw	r0, #1846	; 0x736
 800633a:	f001 f86f 	bl	800741c <SUBGRF_ReadRegister>
 800633e:	4603      	mov	r3, r0
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	b2db      	uxtb	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	f240 7036 	movw	r0, #1846	; 0x736
 800634c:	f001 f852 	bl	80073f4 <SUBGRF_WriteRegister>
 8006350:	e00c      	b.n	800636c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8006352:	f240 7036 	movw	r0, #1846	; 0x736
 8006356:	f001 f861 	bl	800741c <SUBGRF_ReadRegister>
 800635a:	4603      	mov	r3, r0
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	b2db      	uxtb	r3, r3
 8006362:	4619      	mov	r1, r3
 8006364:	f240 7036 	movw	r0, #1846	; 0x736
 8006368:	f001 f844 	bl	80073f4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800636c:	4b04      	ldr	r3, [pc, #16]	; (8006380 <RadioSetRxGenericConfig+0x394>)
 800636e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006372:	609a      	str	r2, [r3, #8]
        break;
 8006374:	bf00      	nop
    }
    return status;
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006378:	4618      	mov	r0, r3
 800637a:	3730      	adds	r7, #48	; 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2000047c 	.word	0x2000047c
 8006384:	200004b4 	.word	0x200004b4
 8006388:	2000048a 	.word	0x2000048a

0800638c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	4613      	mov	r3, r2
 800639c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80063a6:	f001 faae 	bl	8007906 <RFW_DeInit>
    switch( modem )
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	f000 8144 	beq.w	800663a <RadioSetTxGenericConfig+0x2ae>
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	f300 8160 	bgt.w	8006678 <RadioSetTxGenericConfig+0x2ec>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <RadioSetTxGenericConfig+0x38>
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f000 80b7 	beq.w	8006530 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80063c2:	e159      	b.n	8006678 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <RadioSetTxGenericConfig+0x48>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <RadioSetTxGenericConfig+0x4e>
            return -1;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	e163      	b.n	80066a2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	7d1b      	ldrb	r3, [r3, #20]
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d902      	bls.n	80063e8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	e15c      	b.n	80066a2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
 80063ec:	e00d      	b.n	800640a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	4413      	add	r3, r2
 80063f6:	7819      	ldrb	r1, [r3, #0]
 80063f8:	f107 021c 	add.w	r2, r7, #28
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	4413      	add	r3, r2
 8006400:	460a      	mov	r2, r1
 8006402:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3301      	adds	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	7d1b      	ldrb	r3, [r3, #20]
 800640e:	461a      	mov	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	4293      	cmp	r3, r2
 8006414:	dbeb      	blt.n	80063ee <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006416:	4ba5      	ldr	r3, [pc, #660]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	4aa2      	ldr	r2, [pc, #648]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006424:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	4ba0      	ldr	r3, [pc, #640]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800642c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f997 	bl	8007768 <SUBGRF_GetFskBandwidthRegValue>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	4b9b      	ldr	r3, [pc, #620]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a98      	ldr	r2, [pc, #608]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800644a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800644c:	4b97      	ldr	r3, [pc, #604]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800644e:	2200      	movs	r2, #0
 8006450:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	b29b      	uxth	r3, r3
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	b29a      	uxth	r2, r3
 800645c:	4b93      	ldr	r3, [pc, #588]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800645e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006460:	4b92      	ldr	r3, [pc, #584]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006462:	2204      	movs	r2, #4
 8006464:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7d1b      	ldrb	r3, [r3, #20]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b8f      	ldr	r3, [pc, #572]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006470:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006472:	4b8e      	ldr	r3, [pc, #568]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006474:	2200      	movs	r2, #0
 8006476:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800647e:	2b02      	cmp	r3, #2
 8006480:	d003      	beq.n	800648a <RadioSetTxGenericConfig+0xfe>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7f9b      	ldrb	r3, [r3, #30]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d12a      	bne.n	80064e0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	7fdb      	ldrb	r3, [r3, #31]
 800648e:	2bf1      	cmp	r3, #241	; 0xf1
 8006490:	d00a      	beq.n	80064a8 <RadioSetTxGenericConfig+0x11c>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	7fdb      	ldrb	r3, [r3, #31]
 8006496:	2bf2      	cmp	r3, #242	; 0xf2
 8006498:	d006      	beq.n	80064a8 <RadioSetTxGenericConfig+0x11c>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	7fdb      	ldrb	r3, [r3, #31]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d002      	beq.n	80064a8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
 80064a6:	e0fc      	b.n	80066a2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80064a8:	2301      	movs	r3, #1
 80064aa:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80064b0:	4b7f      	ldr	r3, [pc, #508]	; (80066b0 <RadioSetTxGenericConfig+0x324>)
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	f107 0310 	add.w	r3, r7, #16
 80064b8:	4a7e      	ldr	r2, [pc, #504]	; (80066b4 <RadioSetTxGenericConfig+0x328>)
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fa16 	bl	80078ec <RFW_Init>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <RadioSetTxGenericConfig+0x140>
              return -1;
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ca:	e0ea      	b.n	80066a2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80064cc:	4b77      	ldr	r3, [pc, #476]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80064d2:	4b76      	ldr	r3, [pc, #472]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80064d8:	4b74      	ldr	r3, [pc, #464]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064da:	2200      	movs	r2, #0
 80064dc:	755a      	strb	r2, [r3, #21]
        {
 80064de:	e00c      	b.n	80064fa <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	7fda      	ldrb	r2, [r3, #31]
 80064e4:	4b71      	ldr	r3, [pc, #452]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064e6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80064ee:	4b6f      	ldr	r3, [pc, #444]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064f0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	7f9a      	ldrb	r2, [r3, #30]
 80064f6:	4b6d      	ldr	r3, [pc, #436]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80064f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80064fa:	f7ff f99a 	bl	8005832 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80064fe:	2000      	movs	r0, #0
 8006500:	f7fe fb58 	bl	8004bb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006504:	486c      	ldr	r0, [pc, #432]	; (80066b8 <RadioSetTxGenericConfig+0x32c>)
 8006506:	f000 fd61 	bl	8006fcc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800650a:	486c      	ldr	r0, [pc, #432]	; (80066bc <RadioSetTxGenericConfig+0x330>)
 800650c:	f000 fe2a 	bl	8007164 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006510:	f107 031c 	add.w	r3, r7, #28
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f964 	bl	80067e2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	8b9b      	ldrh	r3, [r3, #28]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f9ae 	bl	8006880 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	8c1b      	ldrh	r3, [r3, #32]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f989 	bl	8006840 <SUBGRF_SetCrcPolynomial>
        break;
 800652e:	e0a4      	b.n	800667a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006530:	4b5e      	ldr	r3, [pc, #376]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800653e:	4b5b      	ldr	r3, [pc, #364]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800654a:	4b58      	ldr	r3, [pc, #352]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006556:	4b55      	ldr	r3, [pc, #340]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006558:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006562:	2b02      	cmp	r3, #2
 8006564:	d010      	beq.n	8006588 <RadioSetTxGenericConfig+0x1fc>
 8006566:	2b02      	cmp	r3, #2
 8006568:	dc22      	bgt.n	80065b0 <RadioSetTxGenericConfig+0x224>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <RadioSetTxGenericConfig+0x1e8>
 800656e:	2b01      	cmp	r3, #1
 8006570:	d005      	beq.n	800657e <RadioSetTxGenericConfig+0x1f2>
            break;
 8006572:	e01d      	b.n	80065b0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006574:	4b4d      	ldr	r3, [pc, #308]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800657c:	e019      	b.n	80065b2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800657e:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006586:	e014      	b.n	80065b2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	2b0b      	cmp	r3, #11
 8006590:	d004      	beq.n	800659c <RadioSetTxGenericConfig+0x210>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d104      	bne.n	80065a6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80065a4:	e005      	b.n	80065b2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80065a6:	4b41      	ldr	r3, [pc, #260]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80065ae:	e000      	b.n	80065b2 <RadioSetTxGenericConfig+0x226>
            break;
 80065b0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80065b2:	4b3e      	ldr	r3, [pc, #248]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065bc:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065be:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065c8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80065dc:	4b33      	ldr	r3, [pc, #204]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80065e2:	f7ff f926 	bl	8005832 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80065e6:	2001      	movs	r0, #1
 80065e8:	f7fe fae4 	bl	8004bb4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80065ec:	4832      	ldr	r0, [pc, #200]	; (80066b8 <RadioSetTxGenericConfig+0x32c>)
 80065ee:	f000 fced 	bl	8006fcc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80065f2:	4832      	ldr	r0, [pc, #200]	; (80066bc <RadioSetTxGenericConfig+0x330>)
 80065f4:	f000 fdb6 	bl	8007164 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80065f8:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fe:	2b06      	cmp	r3, #6
 8006600:	d10d      	bne.n	800661e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006602:	f640 0089 	movw	r0, #2185	; 0x889
 8006606:	f000 ff09 	bl	800741c <SUBGRF_ReadRegister>
 800660a:	4603      	mov	r3, r0
 800660c:	f023 0304 	bic.w	r3, r3, #4
 8006610:	b2db      	uxtb	r3, r3
 8006612:	4619      	mov	r1, r3
 8006614:	f640 0089 	movw	r0, #2185	; 0x889
 8006618:	f000 feec 	bl	80073f4 <SUBGRF_WriteRegister>
        break;
 800661c:	e02d      	b.n	800667a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800661e:	f640 0089 	movw	r0, #2185	; 0x889
 8006622:	f000 fefb 	bl	800741c <SUBGRF_ReadRegister>
 8006626:	4603      	mov	r3, r0
 8006628:	f043 0304 	orr.w	r3, r3, #4
 800662c:	b2db      	uxtb	r3, r3
 800662e:	4619      	mov	r1, r3
 8006630:	f640 0089 	movw	r0, #2185	; 0x889
 8006634:	f000 fede 	bl	80073f4 <SUBGRF_WriteRegister>
        break;
 8006638:	e01f      	b.n	800667a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <RadioSetTxGenericConfig+0x2c0>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800664a:	d902      	bls.n	8006652 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295
 8006650:	e027      	b.n	80066a2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8006652:	2002      	movs	r0, #2
 8006654:	f7fe faae 	bl	8004bb4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006658:	4b14      	ldr	r3, [pc, #80]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	4a11      	ldr	r2, [pc, #68]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006666:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006668:	4b10      	ldr	r3, [pc, #64]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800666a:	2216      	movs	r2, #22
 800666c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006670:	4811      	ldr	r0, [pc, #68]	; (80066b8 <RadioSetTxGenericConfig+0x32c>)
 8006672:	f000 fcab 	bl	8006fcc <SUBGRF_SetModulationParams>
        break;
 8006676:	e000      	b.n	800667a <RadioSetTxGenericConfig+0x2ee>
        break;
 8006678:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800667a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 ff84 	bl	800758c <SUBGRF_SetRfTxPower>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	4b08      	ldr	r3, [pc, #32]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800668a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 8006690:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006694:	4618      	mov	r0, r3
 8006696:	f001 f94a 	bl	800792e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800669a:	4a04      	ldr	r2, [pc, #16]	; (80066ac <RadioSetTxGenericConfig+0x320>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6053      	str	r3, [r2, #4]
    return 0;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	2000047c 	.word	0x2000047c
 80066b0:	200003c0 	.word	0x200003c0
 80066b4:	200004d4 	.word	0x200004d4
 80066b8:	200004b4 	.word	0x200004b4
 80066bc:	2000048a 	.word	0x2000048a

080066c0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80066ce:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <SUBGRF_Init+0x78>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80066d4:	f7fa f92e 	bl	8000934 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80066d8:	2002      	movs	r0, #2
 80066da:	f001 f823 	bl	8007724 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80066de:	4b17      	ldr	r3, [pc, #92]	; (800673c <SUBGRF_Init+0x7c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80066e4:	2000      	movs	r0, #0
 80066e6:	f000 f977 	bl	80069d8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80066ea:	f7fa f83d 	bl	8000768 <RBI_IsTCXO>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d10e      	bne.n	8006712 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	2001      	movs	r0, #1
 80066f8:	f000 fb78 	bl	8006dec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80066fc:	2100      	movs	r1, #0
 80066fe:	f640 1011 	movw	r0, #2321	; 0x911
 8006702:	f000 fe77 	bl	80073f4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006706:	237f      	movs	r3, #127	; 0x7f
 8006708:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800670a:	7b38      	ldrb	r0, [r7, #12]
 800670c:	f000 fa85 	bl	8006c1a <SUBGRF_Calibrate>
 8006710:	e009      	b.n	8006726 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006712:	2120      	movs	r1, #32
 8006714:	f640 1011 	movw	r0, #2321	; 0x911
 8006718:	f000 fe6c 	bl	80073f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800671c:	2120      	movs	r1, #32
 800671e:	f640 1012 	movw	r0, #2322	; 0x912
 8006722:	f000 fe67 	bl	80073f4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006726:	f7fa f803 	bl	8000730 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <SUBGRF_Init+0x80>)
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	200003d0 	.word	0x200003d0
 800673c:	200003cc 	.word	0x200003cc
 8006740:	200003c4 	.word	0x200003c4

08006744 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
    return OperatingMode;
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <SUBGRF_GetOperatingMode+0x10>)
 800674a:	781b      	ldrb	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr
 8006754:	200003c4 	.word	0x200003c4

08006758 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	461a      	mov	r2, r3
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	2000      	movs	r0, #0
 800676c:	f000 fe92 	bl	8007494 <SUBGRF_WriteBuffer>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800678a:	f107 0317 	add.w	r3, r7, #23
 800678e:	4619      	mov	r1, r3
 8006790:	68b8      	ldr	r0, [r7, #8]
 8006792:	f000 fdb1 	bl	80072f8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	79fa      	ldrb	r2, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d201      	bcs.n	80067a4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e007      	b.n	80067b4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80067a4:	7df8      	ldrb	r0, [r7, #23]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68f9      	ldr	r1, [r7, #12]
 80067ae:	f000 fe87 	bl	80074c0 <SUBGRF_ReadBuffer>

    return 0;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	460b      	mov	r3, r1
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff ffc2 	bl	8006758 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f91b 	bl	8006a10 <SUBGRF_SetTx>
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80067ea:	2208      	movs	r2, #8
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80067f2:	f000 fe27 	bl	8007444 <SUBGRF_WriteRegisters>
    return 0;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	b29b      	uxth	r3, r3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800681a:	f000 fb67 	bl	8006eec <SUBGRF_GetPacketType>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	2202      	movs	r2, #2
 800682a:	4619      	mov	r1, r3
 800682c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006830:	f000 fe08 	bl	8007444 <SUBGRF_WriteRegisters>
            break;
 8006834:	e000      	b.n	8006838 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006836:	bf00      	nop
    }
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	b29b      	uxth	r3, r3
 8006850:	b2db      	uxtb	r3, r3
 8006852:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800685a:	f000 fb47 	bl	8006eec <SUBGRF_GetPacketType>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d108      	bne.n	8006876 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	2202      	movs	r2, #2
 800686a:	4619      	mov	r1, r3
 800686c:	f240 60be 	movw	r0, #1726	; 0x6be
 8006870:	f000 fde8 	bl	8007444 <SUBGRF_WriteRegisters>
            break;
 8006874:	e000      	b.n	8006878 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006876:	bf00      	nop
    }
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800688e:	f000 fb2d 	bl	8006eec <SUBGRF_GetPacketType>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d121      	bne.n	80068dc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006898:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800689c:	f000 fdbe 	bl	800741c <SUBGRF_ReadRegister>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	4619      	mov	r1, r3
 80068c4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80068c8:	f000 fd94 	bl	80073f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80068d6:	f000 fd8d 	bl	80073f4 <SUBGRF_WriteRegister>
            break;
 80068da:	e000      	b.n	80068de <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80068dc:	bf00      	nop
    }
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80068f8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80068fc:	f000 fd8e 	bl	800741c <SUBGRF_ReadRegister>
 8006900:	4603      	mov	r3, r0
 8006902:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006912:	f000 fd6f 	bl	80073f4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006916:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800691a:	f000 fd7f 	bl	800741c <SUBGRF_ReadRegister>
 800691e:	4603      	mov	r3, r0
 8006920:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006922:	79bb      	ldrb	r3, [r7, #6]
 8006924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006928:	b2db      	uxtb	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006930:	f000 fd60 	bl	80073f4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006934:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006938:	f000 f88a 	bl	8006a50 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800693c:	463b      	mov	r3, r7
 800693e:	2204      	movs	r2, #4
 8006940:	4619      	mov	r1, r3
 8006942:	f640 0019 	movw	r0, #2073	; 0x819
 8006946:	f000 fd91 	bl	800746c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800694a:	2000      	movs	r0, #0
 800694c:	f000 f844 	bl	80069d8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	4619      	mov	r1, r3
 8006954:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006958:	f000 fd4c 	bl	80073f4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800695c:	79bb      	ldrb	r3, [r7, #6]
 800695e:	4619      	mov	r1, r3
 8006960:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006964:	f000 fd46 	bl	80073f4 <SUBGRF_WriteRegister>

    return number;
 8006968:	683b      	ldr	r3, [r7, #0]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800697c:	2000      	movs	r0, #0
 800697e:	f7f9 fede 	bl	800073e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006982:	2002      	movs	r0, #2
 8006984:	f000 fece 	bl	8007724 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006988:	793b      	ldrb	r3, [r7, #4]
 800698a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006994:	793b      	ldrb	r3, [r7, #4]
 8006996:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80069a4:	793b      	ldrb	r3, [r7, #4]
 80069a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80069b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80069b6:	f107 030f 	add.w	r3, r7, #15
 80069ba:	2201      	movs	r2, #1
 80069bc:	4619      	mov	r1, r3
 80069be:	2084      	movs	r0, #132	; 0x84
 80069c0:	f000 fd94 	bl	80074ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <SUBGRF_SetSleep+0x60>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200003c4 	.word	0x200003c4

080069d8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80069e2:	1dfb      	adds	r3, r7, #7
 80069e4:	2201      	movs	r2, #1
 80069e6:	4619      	mov	r1, r3
 80069e8:	2080      	movs	r0, #128	; 0x80
 80069ea:	f000 fd7f 	bl	80074ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <SUBGRF_SetStandby+0x34>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80069fa:	e002      	b.n	8006a02 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <SUBGRF_SetStandby+0x34>)
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200003c4 	.word	0x200003c4

08006a10 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <SUBGRF_SetTx+0x3c>)
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	2083      	movs	r0, #131	; 0x83
 8006a3e:	f000 fd55 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200003c4 	.word	0x200003c4

08006a50 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <SUBGRF_SetRx+0x3c>)
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0a1b      	lsrs	r3, r3, #8
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006a74:	f107 030c 	add.w	r3, r7, #12
 8006a78:	2203      	movs	r2, #3
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	2082      	movs	r0, #130	; 0x82
 8006a7e:	f000 fd35 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200003c4 	.word	0x200003c4

08006a90 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006a98:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <SUBGRF_SetRxBoosted+0x44>)
 8006a9a:	2205      	movs	r2, #5
 8006a9c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006a9e:	2197      	movs	r1, #151	; 0x97
 8006aa0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006aa4:	f000 fca6 	bl	80073f4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006abe:	f107 030c 	add.w	r3, r7, #12
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	2082      	movs	r0, #130	; 0x82
 8006ac8:	f000 fd10 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200003c4 	.word	0x200003c4

08006ad8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	0c1b      	lsrs	r3, r3, #16
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006b0e:	f107 0308 	add.w	r3, r7, #8
 8006b12:	2206      	movs	r2, #6
 8006b14:	4619      	mov	r1, r3
 8006b16:	2094      	movs	r0, #148	; 0x94
 8006b18:	f000 fce8 	bl	80074ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <SUBGRF_SetRxDutyCycle+0x54>)
 8006b1e:	2206      	movs	r2, #6
 8006b20:	701a      	strb	r2, [r3, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200003c4 	.word	0x200003c4

08006b30 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	20c5      	movs	r0, #197	; 0xc5
 8006b3a:	f000 fcd7 	bl	80074ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006b3e:	4b02      	ldr	r3, [pc, #8]	; (8006b48 <SUBGRF_SetCad+0x18>)
 8006b40:	2207      	movs	r2, #7
 8006b42:	701a      	strb	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200003c4 	.word	0x200003c4

08006b4c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006b50:	2200      	movs	r2, #0
 8006b52:	2100      	movs	r1, #0
 8006b54:	20d1      	movs	r0, #209	; 0xd1
 8006b56:	f000 fcc9 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	20d2      	movs	r0, #210	; 0xd2
 8006b68:	f000 fcc0 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006b7a:	1dfb      	adds	r3, r7, #7
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4619      	mov	r1, r3
 8006b80:	209f      	movs	r0, #159	; 0x9f
 8006b82:	f000 fcb3 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	4603      	mov	r3, r0
 8006b96:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006b98:	1dfb      	adds	r3, r7, #7
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	20a0      	movs	r0, #160	; 0xa0
 8006ba0:	f000 fca4 	bl	80074ec <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b3f      	cmp	r3, #63	; 0x3f
 8006ba8:	d91c      	bls.n	8006be4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8006bb8:	e005      	b.n	8006bc6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	73fb      	strb	r3, [r7, #15]
            exp++;
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b1f      	cmp	r3, #31
 8006bca:	d8f6      	bhi.n	8006bba <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006bd8:	7b7b      	ldrb	r3, [r7, #13]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	f240 7006 	movw	r0, #1798	; 0x706
 8006be0:	f000 fc08 	bl	80073f4 <SUBGRF_WriteRegister>
    }
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006bf2:	f7f9 fdc0 	bl	8000776 <RBI_IsDCDC>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	71fb      	strb	r3, [r7, #7]
 8006c00:	e001      	b.n	8006c06 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8006c02:	2300      	movs	r3, #0
 8006c04:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006c06:	1dfb      	adds	r3, r7, #7
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	2096      	movs	r0, #150	; 0x96
 8006c0e:	f000 fc6d 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006c22:	793b      	ldrb	r3, [r7, #4]
 8006c24:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	019b      	lsls	r3, r3, #6
 8006c2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006c2e:	793b      	ldrb	r3, [r7, #4]
 8006c30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006c3e:	793b      	ldrb	r3, [r7, #4]
 8006c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006c4e:	793b      	ldrb	r3, [r7, #4]
 8006c50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006c5e:	793b      	ldrb	r3, [r7, #4]
 8006c60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006c6e:	793b      	ldrb	r3, [r7, #4]
 8006c70:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006c7e:	793b      	ldrb	r3, [r7, #4]
 8006c80:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006c8e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006c90:	f107 030f 	add.w	r3, r7, #15
 8006c94:	2201      	movs	r2, #1
 8006c96:	4619      	mov	r1, r3
 8006c98:	2089      	movs	r0, #137	; 0x89
 8006c9a:	f000 fc27 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <SUBGRF_CalibrateImage+0x78>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d904      	bls.n	8006cc2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006cb8:	23e1      	movs	r3, #225	; 0xe1
 8006cba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8006cbc:	23e9      	movs	r3, #233	; 0xe9
 8006cbe:	737b      	strb	r3, [r7, #13]
 8006cc0:	e022      	b.n	8006d08 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <SUBGRF_CalibrateImage+0x7c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d904      	bls.n	8006cd4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8006cca:	23d7      	movs	r3, #215	; 0xd7
 8006ccc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8006cce:	23db      	movs	r3, #219	; 0xdb
 8006cd0:	737b      	strb	r3, [r7, #13]
 8006cd2:	e019      	b.n	8006d08 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <SUBGRF_CalibrateImage+0x80>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d904      	bls.n	8006ce6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8006cdc:	23c1      	movs	r3, #193	; 0xc1
 8006cde:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8006ce0:	23c5      	movs	r3, #197	; 0xc5
 8006ce2:	737b      	strb	r3, [r7, #13]
 8006ce4:	e010      	b.n	8006d08 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <SUBGRF_CalibrateImage+0x84>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d904      	bls.n	8006cf8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8006cee:	2375      	movs	r3, #117	; 0x75
 8006cf0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8006cf2:	2381      	movs	r3, #129	; 0x81
 8006cf4:	737b      	strb	r3, [r7, #13]
 8006cf6:	e007      	b.n	8006d08 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <SUBGRF_CalibrateImage+0x88>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d903      	bls.n	8006d08 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8006d00:	236b      	movs	r3, #107	; 0x6b
 8006d02:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8006d04:	236f      	movs	r3, #111	; 0x6f
 8006d06:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006d08:	f107 030c 	add.w	r3, r7, #12
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	2098      	movs	r0, #152	; 0x98
 8006d12:	f000 fbeb 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	35a4e900 	.word	0x35a4e900
 8006d24:	32a9f880 	.word	0x32a9f880
 8006d28:	2de54480 	.word	0x2de54480
 8006d2c:	1b6b0b00 	.word	0x1b6b0b00
 8006d30:	1954fc40 	.word	0x1954fc40

08006d34 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4623      	mov	r3, r4
 8006d44:	71fb      	strb	r3, [r7, #7]
 8006d46:	4603      	mov	r3, r0
 8006d48:	71bb      	strb	r3, [r7, #6]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	717b      	strb	r3, [r7, #5]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8006d56:	79bb      	ldrb	r3, [r7, #6]
 8006d58:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8006d5a:	797b      	ldrb	r3, [r7, #5]
 8006d5c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8006d5e:	793b      	ldrb	r3, [r7, #4]
 8006d60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006d62:	f107 030c 	add.w	r3, r7, #12
 8006d66:	2204      	movs	r2, #4
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2095      	movs	r0, #149	; 0x95
 8006d6c:	f000 fbbe 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd90      	pop	{r4, r7, pc}

08006d78 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4623      	mov	r3, r4
 8006d88:	80fb      	strh	r3, [r7, #6]
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	80bb      	strh	r3, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	807b      	strh	r3, [r7, #2]
 8006d92:	4613      	mov	r3, r2
 8006d94:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	0a1b      	lsrs	r3, r3, #8
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006da6:	88bb      	ldrh	r3, [r7, #4]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006db0:	88bb      	ldrh	r3, [r7, #4]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006db6:	887b      	ldrh	r3, [r7, #2]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006dc0:	887b      	ldrh	r3, [r7, #2]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006dc6:	883b      	ldrh	r3, [r7, #0]
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8006dd0:	883b      	ldrh	r3, [r7, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	2208      	movs	r2, #8
 8006ddc:	4619      	mov	r1, r3
 8006dde:	2008      	movs	r0, #8
 8006de0:	f000 fb84 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd90      	pop	{r4, r7, pc}

08006dec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	2097      	movs	r0, #151	; 0x97
 8006e22:	f000 fb63 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <SUBGRF_SetRfFrequency+0x7c>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff ff2c 	bl	8006ca8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <SUBGRF_SetRfFrequency+0x7c>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	09d5      	lsrs	r5, r2, #7
 8006e60:	0654      	lsls	r4, r2, #25
 8006e62:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <SUBGRF_SetRfFrequency+0x80>)
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 f9e0 	bl	8000230 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	0c1b      	lsrs	r3, r3, #16
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	2086      	movs	r0, #134	; 0x86
 8006ea0:	f000 fb24 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8006eac:	200003cc 	.word	0x200003cc
 8006eb0:	01e84800 	.word	0x01e84800

08006eb4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8006ebe:	79fa      	ldrb	r2, [r7, #7]
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <SUBGRF_SetPacketType+0x34>)
 8006ec2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006ed0:	f000 fa90 	bl	80073f4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8006ed4:	1dfb      	adds	r3, r7, #7
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4619      	mov	r1, r3
 8006eda:	208a      	movs	r0, #138	; 0x8a
 8006edc:	f000 fb06 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	200003c5 	.word	0x200003c5

08006eec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
    return PacketType;
 8006ef0:	4b02      	ldr	r3, [pc, #8]	; (8006efc <SUBGRF_GetPacketType+0x10>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr
 8006efc:	200003c5 	.word	0x200003c5

08006f00 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	71bb      	strb	r3, [r7, #6]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d124      	bne.n	8006f62 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8006f18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d106      	bne.n	8006f2e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8006f20:	2301      	movs	r3, #1
 8006f22:	2201      	movs	r2, #1
 8006f24:	2100      	movs	r1, #0
 8006f26:	2006      	movs	r0, #6
 8006f28:	f7ff ff04 	bl	8006d34 <SUBGRF_SetPaConfig>
 8006f2c:	e005      	b.n	8006f3a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8006f2e:	2301      	movs	r3, #1
 8006f30:	2201      	movs	r2, #1
 8006f32:	2100      	movs	r1, #0
 8006f34:	2004      	movs	r0, #4
 8006f36:	f7ff fefd 	bl	8006d34 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8006f3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f3e:	2b0d      	cmp	r3, #13
 8006f40:	dd02      	ble.n	8006f48 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8006f42:	230e      	movs	r3, #14
 8006f44:	71bb      	strb	r3, [r7, #6]
 8006f46:	e006      	b.n	8006f56 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8006f48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f4c:	f113 0f11 	cmn.w	r3, #17
 8006f50:	da01      	bge.n	8006f56 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8006f52:	23ef      	movs	r3, #239	; 0xef
 8006f54:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8006f56:	2118      	movs	r1, #24
 8006f58:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006f5c:	f000 fa4a 	bl	80073f4 <SUBGRF_WriteRegister>
 8006f60:	e025      	b.n	8006fae <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8006f62:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006f66:	f000 fa59 	bl	800741c <SUBGRF_ReadRegister>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f043 031e 	orr.w	r3, r3, #30
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006f78:	f000 fa3c 	bl	80073f4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2107      	movs	r1, #7
 8006f82:	2004      	movs	r0, #4
 8006f84:	f7ff fed6 	bl	8006d34 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8006f88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f8c:	2b16      	cmp	r3, #22
 8006f8e:	dd02      	ble.n	8006f96 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8006f90:	2316      	movs	r3, #22
 8006f92:	71bb      	strb	r3, [r7, #6]
 8006f94:	e006      	b.n	8006fa4 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8006f96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f9a:	f113 0f09 	cmn.w	r3, #9
 8006f9e:	da01      	bge.n	8006fa4 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8006fa0:	23f7      	movs	r3, #247	; 0xf7
 8006fa2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8006fa4:	2138      	movs	r1, #56	; 0x38
 8006fa6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006faa:	f000 fa23 	bl	80073f4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006fae:	79bb      	ldrb	r3, [r7, #6]
 8006fb0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8006fb2:	797b      	ldrb	r3, [r7, #5]
 8006fb4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	208e      	movs	r0, #142	; 0x8e
 8006fc0:	f000 fa94 	bl	80074ec <SUBGRF_WriteCommand>
}
 8006fc4:	bf00      	nop
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006fcc:	b5b0      	push	{r4, r5, r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <SUBGRF_SetModulationParams+0x188>)
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fe2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	4b5b      	ldr	r3, [pc, #364]	; (8007158 <SUBGRF_SetModulationParams+0x18c>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d004      	beq.n	8006ffc <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff ff5c 	bl	8006eb4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	f200 80a2 	bhi.w	800714a <SUBGRF_SetModulationParams+0x17e>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <SUBGRF_SetModulationParams+0x40>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	0800701d 	.word	0x0800701d
 8007010:	080070d9 	.word	0x080070d9
 8007014:	0800709b 	.word	0x0800709b
 8007018:	08007107 	.word	0x08007107
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800701c:	2308      	movs	r3, #8
 800701e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4a4d      	ldr	r2, [pc, #308]	; (800715c <SUBGRF_SetModulationParams+0x190>)
 8007026:	fbb2 f3f3 	udiv	r3, r2, r3
 800702a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	b2db      	uxtb	r3, r3
 8007032:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	b2db      	uxtb	r3, r3
 800703a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7b1b      	ldrb	r3, [r3, #12]
 8007046:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7b5b      	ldrb	r3, [r3, #13]
 800704c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	461a      	mov	r2, r3
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	09d5      	lsrs	r5, r2, #7
 800705a:	0654      	lsls	r4, r2, #25
 800705c:	4a40      	ldr	r2, [pc, #256]	; (8007160 <SUBGRF_SetModulationParams+0x194>)
 800705e:	f04f 0300 	mov.w	r3, #0
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 f8e3 	bl	8000230 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4613      	mov	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	b2db      	uxtb	r3, r3
 8007078:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	b2db      	uxtb	r3, r3
 8007080:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	b29a      	uxth	r2, r3
 800708c:	f107 0308 	add.w	r3, r7, #8
 8007090:	4619      	mov	r1, r3
 8007092:	208b      	movs	r0, #139	; 0x8b
 8007094:	f000 fa2a 	bl	80074ec <SUBGRF_WriteCommand>
        break;
 8007098:	e058      	b.n	800714c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800709a:	2304      	movs	r3, #4
 800709c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	4a2e      	ldr	r2, [pc, #184]	; (800715c <SUBGRF_SetModulationParams+0x190>)
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7d1b      	ldrb	r3, [r3, #20]
 80070c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80070c6:	7cfb      	ldrb	r3, [r7, #19]
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	f107 0308 	add.w	r3, r7, #8
 80070ce:	4619      	mov	r1, r3
 80070d0:	208b      	movs	r0, #139	; 0x8b
 80070d2:	f000 fa0b 	bl	80074ec <SUBGRF_WriteCommand>
        break;
 80070d6:	e039      	b.n	800714c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 80070d8:	2304      	movs	r3, #4
 80070da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7e1b      	ldrb	r3, [r3, #24]
 80070e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7e5b      	ldrb	r3, [r3, #25]
 80070e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7e9b      	ldrb	r3, [r3, #26]
 80070ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7edb      	ldrb	r3, [r3, #27]
 80070f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80070f4:	7cfb      	ldrb	r3, [r7, #19]
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f107 0308 	add.w	r3, r7, #8
 80070fc:	4619      	mov	r1, r3
 80070fe:	208b      	movs	r0, #139	; 0x8b
 8007100:	f000 f9f4 	bl	80074ec <SUBGRF_WriteCommand>

        break;
 8007104:	e022      	b.n	800714c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007106:	2305      	movs	r3, #5
 8007108:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4a13      	ldr	r2, [pc, #76]	; (800715c <SUBGRF_SetModulationParams+0x190>)
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	b2db      	uxtb	r3, r3
 800711c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	b2db      	uxtb	r3, r3
 8007124:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7b1b      	ldrb	r3, [r3, #12]
 8007130:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7b5b      	ldrb	r3, [r3, #13]
 8007136:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007138:	7cfb      	ldrb	r3, [r7, #19]
 800713a:	b29a      	uxth	r2, r3
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	4619      	mov	r1, r3
 8007142:	208b      	movs	r0, #139	; 0x8b
 8007144:	f000 f9d2 	bl	80074ec <SUBGRF_WriteCommand>
        break;
 8007148:	e000      	b.n	800714c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800714a:	bf00      	nop
    }
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bdb0      	pop	{r4, r5, r7, pc}
 8007154:	08008b64 	.word	0x08008b64
 8007158:	200003c5 	.word	0x200003c5
 800715c:	3d090000 	.word	0x3d090000
 8007160:	01e84800 	.word	0x01e84800

08007164 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007170:	4a48      	ldr	r2, [pc, #288]	; (8007294 <SUBGRF_SetPacketParams+0x130>)
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	ca07      	ldmia	r2, {r0, r1, r2}
 8007178:	c303      	stmia	r3!, {r0, r1}
 800717a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	4b45      	ldr	r3, [pc, #276]	; (8007298 <SUBGRF_SetPacketParams+0x134>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d004      	beq.n	8007192 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fe91 	bl	8006eb4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d878      	bhi.n	800728c <SUBGRF_SetPacketParams+0x128>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <SUBGRF_SetPacketParams+0x3c>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	08007241 	.word	0x08007241
 80071a8:	08007235 	.word	0x08007235
 80071ac:	080071b1 	.word	0x080071b1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7a5b      	ldrb	r3, [r3, #9]
 80071b4:	2bf1      	cmp	r3, #241	; 0xf1
 80071b6:	d10a      	bne.n	80071ce <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80071b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80071bc:	f7ff fb20 	bl	8006800 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80071c0:	f248 0005 	movw	r0, #32773	; 0x8005
 80071c4:	f7ff fb3c 	bl	8006840 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80071c8:	2302      	movs	r3, #2
 80071ca:	75bb      	strb	r3, [r7, #22]
 80071cc:	e011      	b.n	80071f2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7a5b      	ldrb	r3, [r3, #9]
 80071d2:	2bf2      	cmp	r3, #242	; 0xf2
 80071d4:	d10a      	bne.n	80071ec <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80071d6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80071da:	f7ff fb11 	bl	8006800 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80071de:	f241 0021 	movw	r0, #4129	; 0x1021
 80071e2:	f7ff fb2d 	bl	8006840 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80071e6:	2306      	movs	r3, #6
 80071e8:	75bb      	strb	r3, [r7, #22]
 80071ea:	e002      	b.n	80071f2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7a5b      	ldrb	r3, [r3, #9]
 80071f0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80071f2:	2309      	movs	r3, #9
 80071f4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	795b      	ldrb	r3, [r3, #5]
 8007214:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	799b      	ldrb	r3, [r3, #6]
 800721a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	79db      	ldrb	r3, [r3, #7]
 8007220:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7a1b      	ldrb	r3, [r3, #8]
 8007226:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007228:	7dbb      	ldrb	r3, [r7, #22]
 800722a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7a9b      	ldrb	r3, [r3, #10]
 8007230:	753b      	strb	r3, [r7, #20]
        break;
 8007232:	e022      	b.n	800727a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7b1b      	ldrb	r3, [r3, #12]
 800723c:	733b      	strb	r3, [r7, #12]
        break;
 800723e:	e01c      	b.n	800727a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007240:	2306      	movs	r3, #6
 8007242:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	89db      	ldrh	r3, [r3, #14]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	b29b      	uxth	r3, r3
 800724c:	b2db      	uxtb	r3, r3
 800724e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	89db      	ldrh	r3, [r3, #14]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	7c1a      	ldrb	r2, [r3, #16]
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <SUBGRF_SetPacketParams+0x138>)
 800725e:	4611      	mov	r1, r2
 8007260:	7019      	strb	r1, [r3, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7c5b      	ldrb	r3, [r3, #17]
 800726a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c9b      	ldrb	r3, [r3, #18]
 8007270:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7cdb      	ldrb	r3, [r3, #19]
 8007276:	747b      	strb	r3, [r7, #17]
        break;
 8007278:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	b29a      	uxth	r2, r3
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4619      	mov	r1, r3
 8007284:	208c      	movs	r0, #140	; 0x8c
 8007286:	f000 f931 	bl	80074ec <SUBGRF_WriteCommand>
 800728a:	e000      	b.n	800728e <SUBGRF_SetPacketParams+0x12a>
        return;
 800728c:	bf00      	nop
}
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	08008b6c 	.word	0x08008b6c
 8007298:	200003c5 	.word	0x200003c5
 800729c:	200003c6 	.word	0x200003c6

080072a0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	460a      	mov	r2, r1
 80072aa:	71fb      	strb	r3, [r7, #7]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80072b4:	79bb      	ldrb	r3, [r7, #6]
 80072b6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	2202      	movs	r2, #2
 80072be:	4619      	mov	r1, r3
 80072c0:	208f      	movs	r0, #143	; 0x8f
 80072c2:	f000 f913 	bl	80074ec <SUBGRF_WriteCommand>
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	2015      	movs	r0, #21
 80072e0:	f000 f918 	bl	8007514 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80072e4:	793b      	ldrb	r3, [r7, #4]
 80072e6:	425b      	negs	r3, r3
 80072e8:	105b      	asrs	r3, r3, #1
 80072ea:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80072ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007302:	f107 030c 	add.w	r3, r7, #12
 8007306:	2202      	movs	r2, #2
 8007308:	4619      	mov	r1, r3
 800730a:	2013      	movs	r0, #19
 800730c:	f000 f902 	bl	8007514 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007310:	f7ff fdec 	bl	8006eec <SUBGRF_GetPacketType>
 8007314:	4603      	mov	r3, r0
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10d      	bne.n	8007336 <SUBGRF_GetRxBufferStatus+0x3e>
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <SUBGRF_GetRxBufferStatus+0x54>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b01      	cmp	r3, #1
 8007322:	d108      	bne.n	8007336 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007324:	f240 7002 	movw	r0, #1794	; 0x702
 8007328:	f000 f878 	bl	800741c <SUBGRF_ReadRegister>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	e002      	b.n	800733c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007336:	7b3a      	ldrb	r2, [r7, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800733c:	7b7a      	ldrb	r2, [r7, #13]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	701a      	strb	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200003c6 	.word	0x200003c6

08007350 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	2203      	movs	r2, #3
 800735e:	4619      	mov	r1, r3
 8007360:	2014      	movs	r0, #20
 8007362:	f000 f8d7 	bl	8007514 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007366:	f7ff fdc1 	bl	8006eec <SUBGRF_GetPacketType>
 800736a:	4603      	mov	r3, r0
 800736c:	461a      	mov	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <SUBGRF_GetPacketStatus+0x30>
 800737a:	2b01      	cmp	r3, #1
 800737c:	d013      	beq.n	80073a6 <SUBGRF_GetPacketStatus+0x56>
 800737e:	e02a      	b.n	80073d6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007380:	7b3a      	ldrb	r2, [r7, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007386:	7b7b      	ldrb	r3, [r7, #13]
 8007388:	425b      	negs	r3, r3
 800738a:	105b      	asrs	r3, r3, #1
 800738c:	b25a      	sxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	425b      	negs	r3, r3
 8007396:	105b      	asrs	r3, r3, #1
 8007398:	b25a      	sxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
            break;
 80073a4:	e020      	b.n	80073e8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80073a6:	7b3b      	ldrb	r3, [r7, #12]
 80073a8:	425b      	negs	r3, r3
 80073aa:	105b      	asrs	r3, r3, #1
 80073ac:	b25a      	sxtb	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80073b2:	7b7b      	ldrb	r3, [r7, #13]
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	3302      	adds	r3, #2
 80073b8:	109b      	asrs	r3, r3, #2
 80073ba:	b25a      	sxtb	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	425b      	negs	r3, r3
 80073c4:	105b      	asrs	r3, r3, #1
 80073c6:	b25a      	sxtb	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80073cc:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <SUBGRF_GetPacketStatus+0xa0>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	611a      	str	r2, [r3, #16]
            break;
 80073d4:	e008      	b.n	80073e8 <SUBGRF_GetPacketStatus+0x98>
        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            //RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
        	memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 80073d6:	2214      	movs	r2, #20
 80073d8:	2100      	movs	r1, #0
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fb28 	bl	8007a30 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220f      	movs	r2, #15
 80073e4:	701a      	strb	r2, [r3, #0]
            break;
 80073e6:	bf00      	nop
    }
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200003c8 	.word	0x200003c8

080073f4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	460a      	mov	r2, r1
 80073fe:	80fb      	strh	r3, [r7, #6]
 8007400:	4613      	mov	r3, r2
 8007402:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007404:	1d7a      	adds	r2, r7, #5
 8007406:	88f9      	ldrh	r1, [r7, #6]
 8007408:	2301      	movs	r3, #1
 800740a:	4803      	ldr	r0, [pc, #12]	; (8007418 <SUBGRF_WriteRegister+0x24>)
 800740c:	f7fb fdbe 	bl	8002f8c <HAL_SUBGHZ_WriteRegisters>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	2000046c 	.word	0x2000046c

0800741c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007426:	f107 020f 	add.w	r2, r7, #15
 800742a:	88f9      	ldrh	r1, [r7, #6]
 800742c:	2301      	movs	r3, #1
 800742e:	4804      	ldr	r0, [pc, #16]	; (8007440 <SUBGRF_ReadRegister+0x24>)
 8007430:	f7fb fe0b 	bl	800304a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	2000046c 	.word	0x2000046c

08007444 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	80fb      	strh	r3, [r7, #6]
 8007450:	4613      	mov	r3, r2
 8007452:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007454:	88bb      	ldrh	r3, [r7, #4]
 8007456:	88f9      	ldrh	r1, [r7, #6]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	4803      	ldr	r0, [pc, #12]	; (8007468 <SUBGRF_WriteRegisters+0x24>)
 800745c:	f7fb fd96 	bl	8002f8c <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2000046c 	.word	0x2000046c

0800746c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	80fb      	strh	r3, [r7, #6]
 8007478:	4613      	mov	r3, r2
 800747a:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800747c:	88bb      	ldrh	r3, [r7, #4]
 800747e:	88f9      	ldrh	r1, [r7, #6]
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	4803      	ldr	r0, [pc, #12]	; (8007490 <SUBGRF_ReadRegisters+0x24>)
 8007484:	f7fb fde1 	bl	800304a <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	2000046c 	.word	0x2000046c

08007494 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80074a4:	79bb      	ldrb	r3, [r7, #6]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	79f9      	ldrb	r1, [r7, #7]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	4803      	ldr	r0, [pc, #12]	; (80074bc <SUBGRF_WriteBuffer+0x28>)
 80074ae:	f7fb fee0 	bl	8003272 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000046c 	.word	0x2000046c

080074c0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
 80074cc:	4613      	mov	r3, r2
 80074ce:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80074d0:	79bb      	ldrb	r3, [r7, #6]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	79f9      	ldrb	r1, [r7, #7]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4803      	ldr	r0, [pc, #12]	; (80074e8 <SUBGRF_ReadBuffer+0x28>)
 80074da:	f7fb ff1d 	bl	8003318 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2000046c 	.word	0x2000046c

080074ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	6039      	str	r1, [r7, #0]
 80074f6:	71fb      	strb	r3, [r7, #7]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80074fc:	88bb      	ldrh	r3, [r7, #4]
 80074fe:	79f9      	ldrb	r1, [r7, #7]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	4803      	ldr	r0, [pc, #12]	; (8007510 <SUBGRF_WriteCommand+0x24>)
 8007504:	f7fb fe02 	bl	800310c <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	2000046c 	.word	0x2000046c

08007514 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	71fb      	strb	r3, [r7, #7]
 8007520:	4613      	mov	r3, r2
 8007522:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007524:	88bb      	ldrh	r3, [r7, #4]
 8007526:	79f9      	ldrb	r1, [r7, #7]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	4803      	ldr	r0, [pc, #12]	; (8007538 <SUBGRF_ReadCommand+0x24>)
 800752c:	f7fb fe4d 	bl	80031ca <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007530:	bf00      	nop
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	2000046c 	.word	0x2000046c

0800753c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	460a      	mov	r2, r1
 8007546:	71fb      	strb	r3, [r7, #7]
 8007548:	4613      	mov	r3, r2
 800754a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007550:	79bb      	ldrb	r3, [r7, #6]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d10d      	bne.n	8007572 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d104      	bne.n	8007566 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800755c:	2302      	movs	r3, #2
 800755e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007560:	2004      	movs	r0, #4
 8007562:	f000 f8df 	bl	8007724 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d107      	bne.n	800757c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800756c:	2303      	movs	r3, #3
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	e004      	b.n	800757c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007572:	79bb      	ldrb	r3, [r7, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4618      	mov	r0, r3
 8007580:	f7f9 f8dd 	bl	800073e <RBI_ConfigRFSwitch>
}
 8007584:	bf00      	nop
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800759a:	f7f9 f8de 	bl	800075a <RBI_GetTxConfig>
 800759e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d016      	beq.n	80075d4 <SUBGRF_SetRfTxPower+0x48>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	dc16      	bgt.n	80075da <SUBGRF_SetRfTxPower+0x4e>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <SUBGRF_SetRfTxPower+0x2e>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d00a      	beq.n	80075ce <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80075b8:	e00f      	b.n	80075da <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80075ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	dd02      	ble.n	80075c8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80075c2:	2302      	movs	r3, #2
 80075c4:	73fb      	strb	r3, [r7, #15]
            break;
 80075c6:	e009      	b.n	80075dc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80075c8:	2301      	movs	r3, #1
 80075ca:	73fb      	strb	r3, [r7, #15]
            break;
 80075cc:	e006      	b.n	80075dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
            break;
 80075d2:	e003      	b.n	80075dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80075d4:	2302      	movs	r3, #2
 80075d6:	73fb      	strb	r3, [r7, #15]
            break;
 80075d8:	e000      	b.n	80075dc <SUBGRF_SetRfTxPower+0x50>
            break;
 80075da:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80075dc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2202      	movs	r2, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fc8b 	bl	8006f00 <SUBGRF_SetTxParams>

    return paSelect;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80075f8:	2301      	movs	r3, #1
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
	...

08007604 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800760c:	4b03      	ldr	r3, [pc, #12]	; (800761c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2001      	movs	r0, #1
 8007612:	4798      	blx	r3
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	200003d0 	.word	0x200003d0

08007620 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007628:	4b03      	ldr	r3, [pc, #12]	; (8007638 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2002      	movs	r0, #2
 800762e:	4798      	blx	r3
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200003d0 	.word	0x200003d0

0800763c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2040      	movs	r0, #64	; 0x40
 800764a:	4798      	blx	r3
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	200003d0 	.word	0x200003d0

08007658 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800766a:	2b01      	cmp	r3, #1
 800766c:	d005      	beq.n	800767a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800766e:	e00a      	b.n	8007686 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2080      	movs	r0, #128	; 0x80
 8007676:	4798      	blx	r3
            break;
 8007678:	e005      	b.n	8007686 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007682:	4798      	blx	r3
            break;
 8007684:	bf00      	nop
    }
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200003d0 	.word	0x200003d0

08007694 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800769c:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80076a4:	4798      	blx	r3
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200003d0 	.word	0x200003d0

080076b4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80076bc:	4b03      	ldr	r3, [pc, #12]	; (80076cc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2020      	movs	r0, #32
 80076c2:	4798      	blx	r3
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200003d0 	.word	0x200003d0

080076d0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80076d8:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2004      	movs	r0, #4
 80076de:	4798      	blx	r3
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200003d0 	.word	0x200003d0

080076ec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80076f4:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2008      	movs	r0, #8
 80076fa:	4798      	blx	r3
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	200003d0 	.word	0x200003d0

08007708 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2010      	movs	r0, #16
 8007716:	4798      	blx	r3
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	200003d0 	.word	0x200003d0

08007724 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800772e:	f7f9 f822 	bl	8000776 <RBI_IsDCDC>
 8007732:	4603      	mov	r3, r0
 8007734:	2b01      	cmp	r3, #1
 8007736:	d112      	bne.n	800775e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007738:	f640 1023 	movw	r0, #2339	; 0x923
 800773c:	f7ff fe6e 	bl	800741c <SUBGRF_ReadRegister>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	f023 0306 	bic.w	r3, r3, #6
 800774a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800774c:	7bfa      	ldrb	r2, [r7, #15]
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	4313      	orrs	r3, r2
 8007752:	b2db      	uxtb	r3, r3
 8007754:	4619      	mov	r1, r3
 8007756:	f640 1023 	movw	r0, #2339	; 0x923
 800775a:	f7ff fe4b 	bl	80073f4 <SUBGRF_WriteRegister>
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8007776:	231f      	movs	r3, #31
 8007778:	e016      	b.n	80077a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
 800777e:	e00f      	b.n	80077a0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d205      	bcs.n	800779a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	4413      	add	r3, r2
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	e006      	b.n	80077a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	3301      	adds	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b15      	cmp	r3, #21
 80077a4:	d9ec      	bls.n	8007780 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80077a6:	e7fe      	b.n	80077a6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	08008cc8 	.word	0x08008cc8

080077b8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <SUBGRF_GetCFO+0xe4>)
 80077c4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80077c6:	f640 0007 	movw	r0, #2055	; 0x807
 80077ca:	f7ff fe27 	bl	800741c <SUBGRF_ReadRegister>
 80077ce:	4603      	mov	r3, r0
 80077d0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80077d2:	7ffb      	ldrb	r3, [r7, #31]
 80077d4:	08db      	lsrs	r3, r3, #3
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077e0:	4413      	add	r3, r2
 80077e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80077e6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80077e8:	7ffb      	ldrb	r3, [r7, #31]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80077f0:	7fba      	ldrb	r2, [r7, #30]
 80077f2:	7f7b      	ldrb	r3, [r7, #29]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	4b28      	ldr	r3, [pc, #160]	; (80078a0 <SUBGRF_GetCFO+0xe8>)
 80077fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	fb02 f303 	mul.w	r3, r2, r3
 800781e:	2b07      	cmp	r3, #7
 8007820:	d802      	bhi.n	8007828 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8007822:	2302      	movs	r3, #2
 8007824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8007828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	fb02 f303 	mul.w	r3, r2, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d802      	bhi.n	800783c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8007836:	2304      	movs	r3, #4
 8007838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800783c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8007848:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800784c:	f7ff fde6 	bl	800741c <SUBGRF_ReadRegister>
 8007850:	4603      	mov	r3, r0
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007858:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800785a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800785e:	f7ff fddd 	bl	800741c <SUBGRF_ReadRegister>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	4313      	orrs	r3, r2
 800786a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800787c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8007880:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	6a3a      	ldr	r2, [r7, #32]
 8007888:	fb02 f303 	mul.w	r3, r2, r3
 800788c:	11da      	asrs	r2, r3, #7
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	3728      	adds	r7, #40	; 0x28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	0c0a0804 	.word	0x0c0a0804
 80078a0:	01e84800 	.word	0x01e84800

080078a4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80078bc:	697b      	ldr	r3, [r7, #20]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8007906:	b480      	push	{r7}
 8007908:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800790a:	bf00      	nop
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr

08007912 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8007912:	b480      	push	{r7}
 8007914:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8007916:	2300      	movs	r3, #0
#endif
}
 8007918:	4618      	mov	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8007924:	2300      	movs	r3, #0
#endif
}
 8007926:	4618      	mov	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	4603      	mov	r3, r0
 8007936:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8007942:	b480      	push	{r7}
 8007944:	b087      	sub	sp, #28
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	460b      	mov	r3, r1
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8007950:	f04f 33ff 	mov.w	r3, #4294967295
 8007954:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8007956:	697b      	ldr	r3, [r7, #20]
}
 8007958:	4618      	mov	r0, r3
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8007962:	b480      	push	{r7}
 8007964:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800796a:	4618      	mov	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr

08007972 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8007972:	b480      	push	{r7}
 8007974:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8007976:	bf00      	nop
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800797e:	b480      	push	{r7}
 8007980:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8007982:	bf00      	nop
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	4603      	mov	r3, r0
 8007992:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr
	...

080079a0 <__errno>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	; (80079a8 <__errno+0x8>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000010 	.word	0x20000010

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	; (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	; (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	; (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	; (80079f0 <__libc_init_array+0x44>)
 80079c0:	f001 f806 	bl	80089d0 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	08008e18 	.word	0x08008e18
 80079e8:	08008e18 	.word	0x08008e18
 80079ec:	08008e18 	.word	0x08008e18
 80079f0:	08008e1c 	.word	0x08008e1c

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 b86f 	b.w	8007adc <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	20000010 	.word	0x20000010

08007a04 <free>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <free+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f000 b819 	b.w	8007a40 <_free_r>
 8007a0e:	bf00      	nop
 8007a10:	20000010 	.word	0x20000010

08007a14 <memcpy>:
 8007a14:	440a      	add	r2, r1
 8007a16:	4291      	cmp	r1, r2
 8007a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	4770      	bx	lr
 8007a20:	b510      	push	{r4, lr}
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	d1f9      	bne.n	8007a22 <memcpy+0xe>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <memset>:
 8007a30:	4402      	add	r2, r0
 8007a32:	4603      	mov	r3, r0
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d100      	bne.n	8007a3a <memset+0xa>
 8007a38:	4770      	bx	lr
 8007a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3e:	e7f9      	b.n	8007a34 <memset+0x4>

08007a40 <_free_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4605      	mov	r5, r0
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d045      	beq.n	8007ad4 <_free_r+0x94>
 8007a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4c:	1f0c      	subs	r4, r1, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfb8      	it	lt
 8007a52:	18e4      	addlt	r4, r4, r3
 8007a54:	f000 fc18 	bl	8008288 <__malloc_lock>
 8007a58:	4a1f      	ldr	r2, [pc, #124]	; (8007ad8 <_free_r+0x98>)
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	b933      	cbnz	r3, 8007a6e <_free_r+0x2e>
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	6014      	str	r4, [r2, #0]
 8007a64:	4628      	mov	r0, r5
 8007a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6a:	f000 bc13 	b.w	8008294 <__malloc_unlock>
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	d90b      	bls.n	8007a8a <_free_r+0x4a>
 8007a72:	6821      	ldr	r1, [r4, #0]
 8007a74:	1862      	adds	r2, r4, r1
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bf04      	itt	eq
 8007a7a:	681a      	ldreq	r2, [r3, #0]
 8007a7c:	685b      	ldreq	r3, [r3, #4]
 8007a7e:	6063      	str	r3, [r4, #4]
 8007a80:	bf04      	itt	eq
 8007a82:	1852      	addeq	r2, r2, r1
 8007a84:	6022      	streq	r2, [r4, #0]
 8007a86:	6004      	str	r4, [r0, #0]
 8007a88:	e7ec      	b.n	8007a64 <_free_r+0x24>
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b10b      	cbz	r3, 8007a94 <_free_r+0x54>
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d9fa      	bls.n	8007a8a <_free_r+0x4a>
 8007a94:	6811      	ldr	r1, [r2, #0]
 8007a96:	1850      	adds	r0, r2, r1
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d10b      	bne.n	8007ab4 <_free_r+0x74>
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	4401      	add	r1, r0
 8007aa0:	1850      	adds	r0, r2, r1
 8007aa2:	4283      	cmp	r3, r0
 8007aa4:	6011      	str	r1, [r2, #0]
 8007aa6:	d1dd      	bne.n	8007a64 <_free_r+0x24>
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	6053      	str	r3, [r2, #4]
 8007aae:	4401      	add	r1, r0
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	e7d7      	b.n	8007a64 <_free_r+0x24>
 8007ab4:	d902      	bls.n	8007abc <_free_r+0x7c>
 8007ab6:	230c      	movs	r3, #12
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	e7d3      	b.n	8007a64 <_free_r+0x24>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	1821      	adds	r1, r4, r0
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	bf04      	itt	eq
 8007ac4:	6819      	ldreq	r1, [r3, #0]
 8007ac6:	685b      	ldreq	r3, [r3, #4]
 8007ac8:	6063      	str	r3, [r4, #4]
 8007aca:	bf04      	itt	eq
 8007acc:	1809      	addeq	r1, r1, r0
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	6054      	str	r4, [r2, #4]
 8007ad2:	e7c7      	b.n	8007a64 <_free_r+0x24>
 8007ad4:	bd38      	pop	{r3, r4, r5, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200003d4 	.word	0x200003d4

08007adc <_malloc_r>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	1ccd      	adds	r5, r1, #3
 8007ae0:	f025 0503 	bic.w	r5, r5, #3
 8007ae4:	3508      	adds	r5, #8
 8007ae6:	2d0c      	cmp	r5, #12
 8007ae8:	bf38      	it	cc
 8007aea:	250c      	movcc	r5, #12
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	4606      	mov	r6, r0
 8007af0:	db01      	blt.n	8007af6 <_malloc_r+0x1a>
 8007af2:	42a9      	cmp	r1, r5
 8007af4:	d903      	bls.n	8007afe <_malloc_r+0x22>
 8007af6:	230c      	movs	r3, #12
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	2000      	movs	r0, #0
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afe:	f000 fbc3 	bl	8008288 <__malloc_lock>
 8007b02:	4921      	ldr	r1, [pc, #132]	; (8007b88 <_malloc_r+0xac>)
 8007b04:	680a      	ldr	r2, [r1, #0]
 8007b06:	4614      	mov	r4, r2
 8007b08:	b99c      	cbnz	r4, 8007b32 <_malloc_r+0x56>
 8007b0a:	4f20      	ldr	r7, [pc, #128]	; (8007b8c <_malloc_r+0xb0>)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b923      	cbnz	r3, 8007b1a <_malloc_r+0x3e>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4630      	mov	r0, r6
 8007b14:	f000 f8ca 	bl	8007cac <_sbrk_r>
 8007b18:	6038      	str	r0, [r7, #0]
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 f8c5 	bl	8007cac <_sbrk_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d123      	bne.n	8007b6e <_malloc_r+0x92>
 8007b26:	230c      	movs	r3, #12
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f000 fbb2 	bl	8008294 <__malloc_unlock>
 8007b30:	e7e3      	b.n	8007afa <_malloc_r+0x1e>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	1b5b      	subs	r3, r3, r5
 8007b36:	d417      	bmi.n	8007b68 <_malloc_r+0x8c>
 8007b38:	2b0b      	cmp	r3, #11
 8007b3a:	d903      	bls.n	8007b44 <_malloc_r+0x68>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	441c      	add	r4, r3
 8007b40:	6025      	str	r5, [r4, #0]
 8007b42:	e004      	b.n	8007b4e <_malloc_r+0x72>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	42a2      	cmp	r2, r4
 8007b48:	bf0c      	ite	eq
 8007b4a:	600b      	streq	r3, [r1, #0]
 8007b4c:	6053      	strne	r3, [r2, #4]
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f000 fba0 	bl	8008294 <__malloc_unlock>
 8007b54:	f104 000b 	add.w	r0, r4, #11
 8007b58:	1d23      	adds	r3, r4, #4
 8007b5a:	f020 0007 	bic.w	r0, r0, #7
 8007b5e:	1ac2      	subs	r2, r0, r3
 8007b60:	d0cc      	beq.n	8007afc <_malloc_r+0x20>
 8007b62:	1a1b      	subs	r3, r3, r0
 8007b64:	50a3      	str	r3, [r4, r2]
 8007b66:	e7c9      	b.n	8007afc <_malloc_r+0x20>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	6864      	ldr	r4, [r4, #4]
 8007b6c:	e7cc      	b.n	8007b08 <_malloc_r+0x2c>
 8007b6e:	1cc4      	adds	r4, r0, #3
 8007b70:	f024 0403 	bic.w	r4, r4, #3
 8007b74:	42a0      	cmp	r0, r4
 8007b76:	d0e3      	beq.n	8007b40 <_malloc_r+0x64>
 8007b78:	1a21      	subs	r1, r4, r0
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f000 f896 	bl	8007cac <_sbrk_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d1dd      	bne.n	8007b40 <_malloc_r+0x64>
 8007b84:	e7cf      	b.n	8007b26 <_malloc_r+0x4a>
 8007b86:	bf00      	nop
 8007b88:	200003d4 	.word	0x200003d4
 8007b8c:	200003d8 	.word	0x200003d8

08007b90 <iprintf>:
 8007b90:	b40f      	push	{r0, r1, r2, r3}
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <iprintf+0x2c>)
 8007b94:	b513      	push	{r0, r1, r4, lr}
 8007b96:	681c      	ldr	r4, [r3, #0]
 8007b98:	b124      	cbz	r4, 8007ba4 <iprintf+0x14>
 8007b9a:	69a3      	ldr	r3, [r4, #24]
 8007b9c:	b913      	cbnz	r3, 8007ba4 <iprintf+0x14>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 fa6e 	bl	8008080 <__sinit>
 8007ba4:	ab05      	add	r3, sp, #20
 8007ba6:	9a04      	ldr	r2, [sp, #16]
 8007ba8:	68a1      	ldr	r1, [r4, #8]
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fb9f 	bl	80082f0 <_vfiprintf_r>
 8007bb2:	b002      	add	sp, #8
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	b004      	add	sp, #16
 8007bba:	4770      	bx	lr
 8007bbc:	20000010 	.word	0x20000010

08007bc0 <_puts_r>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	b118      	cbz	r0, 8007bd0 <_puts_r+0x10>
 8007bc8:	6983      	ldr	r3, [r0, #24]
 8007bca:	b90b      	cbnz	r3, 8007bd0 <_puts_r+0x10>
 8007bcc:	f000 fa58 	bl	8008080 <__sinit>
 8007bd0:	69ab      	ldr	r3, [r5, #24]
 8007bd2:	68ac      	ldr	r4, [r5, #8]
 8007bd4:	b913      	cbnz	r3, 8007bdc <_puts_r+0x1c>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fa52 	bl	8008080 <__sinit>
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	; (8007c90 <_puts_r+0xd0>)
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d120      	bne.n	8007c24 <_puts_r+0x64>
 8007be2:	686c      	ldr	r4, [r5, #4]
 8007be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d405      	bmi.n	8007bf6 <_puts_r+0x36>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	0598      	lsls	r0, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_puts_r+0x36>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf2:	f000 fae3 	bl	80081bc <__retarget_lock_acquire_recursive>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	0719      	lsls	r1, r3, #28
 8007bfa:	d51d      	bpl.n	8007c38 <_puts_r+0x78>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	b1db      	cbz	r3, 8007c38 <_puts_r+0x78>
 8007c00:	3e01      	subs	r6, #1
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	bb39      	cbnz	r1, 8007c5e <_puts_r+0x9e>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da38      	bge.n	8007c84 <_puts_r+0xc4>
 8007c12:	4622      	mov	r2, r4
 8007c14:	210a      	movs	r1, #10
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 f858 	bl	8007ccc <__swbuf_r>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d011      	beq.n	8007c44 <_puts_r+0x84>
 8007c20:	250a      	movs	r5, #10
 8007c22:	e011      	b.n	8007c48 <_puts_r+0x88>
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <_puts_r+0xd4>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d101      	bne.n	8007c2e <_puts_r+0x6e>
 8007c2a:	68ac      	ldr	r4, [r5, #8]
 8007c2c:	e7da      	b.n	8007be4 <_puts_r+0x24>
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <_puts_r+0xd8>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	bf08      	it	eq
 8007c34:	68ec      	ldreq	r4, [r5, #12]
 8007c36:	e7d5      	b.n	8007be4 <_puts_r+0x24>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f898 	bl	8007d70 <__swsetup_r>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d0dd      	beq.n	8007c00 <_puts_r+0x40>
 8007c44:	f04f 35ff 	mov.w	r5, #4294967295
 8007c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c4a:	07da      	lsls	r2, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_puts_r+0x9a>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	059b      	lsls	r3, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_puts_r+0x9a>
 8007c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c56:	f000 fab2 	bl	80081be <__retarget_lock_release_recursive>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da04      	bge.n	8007c6c <_puts_r+0xac>
 8007c62:	69a2      	ldr	r2, [r4, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	dc06      	bgt.n	8007c76 <_puts_r+0xb6>
 8007c68:	290a      	cmp	r1, #10
 8007c6a:	d004      	beq.n	8007c76 <_puts_r+0xb6>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	7019      	strb	r1, [r3, #0]
 8007c74:	e7c5      	b.n	8007c02 <_puts_r+0x42>
 8007c76:	4622      	mov	r2, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f827 	bl	8007ccc <__swbuf_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d1bf      	bne.n	8007c02 <_puts_r+0x42>
 8007c82:	e7df      	b.n	8007c44 <_puts_r+0x84>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	250a      	movs	r5, #10
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	701d      	strb	r5, [r3, #0]
 8007c8e:	e7db      	b.n	8007c48 <_puts_r+0x88>
 8007c90:	08008d9c 	.word	0x08008d9c
 8007c94:	08008dbc 	.word	0x08008dbc
 8007c98:	08008d7c 	.word	0x08008d7c

08007c9c <puts>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <puts+0xc>)
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f7ff bf8d 	b.w	8007bc0 <_puts_r>
 8007ca6:	bf00      	nop
 8007ca8:	20000010 	.word	0x20000010

08007cac <_sbrk_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d06      	ldr	r5, [pc, #24]	; (8007cc8 <_sbrk_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	f7f9 f864 	bl	8000d84 <_sbrk>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_sbrk_r+0x1a>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_sbrk_r+0x1a>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	200004e0 	.word	0x200004e0

08007ccc <__swbuf_r>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	460e      	mov	r6, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b118      	cbz	r0, 8007cde <__swbuf_r+0x12>
 8007cd6:	6983      	ldr	r3, [r0, #24]
 8007cd8:	b90b      	cbnz	r3, 8007cde <__swbuf_r+0x12>
 8007cda:	f000 f9d1 	bl	8008080 <__sinit>
 8007cde:	4b21      	ldr	r3, [pc, #132]	; (8007d64 <__swbuf_r+0x98>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	d12b      	bne.n	8007d3c <__swbuf_r+0x70>
 8007ce4:	686c      	ldr	r4, [r5, #4]
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	071a      	lsls	r2, r3, #28
 8007cee:	d52f      	bpl.n	8007d50 <__swbuf_r+0x84>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	b36b      	cbz	r3, 8007d50 <__swbuf_r+0x84>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1ac0      	subs	r0, r0, r3
 8007cfa:	6963      	ldr	r3, [r4, #20]
 8007cfc:	b2f6      	uxtb	r6, r6
 8007cfe:	4283      	cmp	r3, r0
 8007d00:	4637      	mov	r7, r6
 8007d02:	dc04      	bgt.n	8007d0e <__swbuf_r+0x42>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 f926 	bl	8007f58 <_fflush_r>
 8007d0c:	bb30      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	60a3      	str	r3, [r4, #8]
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	701e      	strb	r6, [r3, #0]
 8007d1c:	6963      	ldr	r3, [r4, #20]
 8007d1e:	3001      	adds	r0, #1
 8007d20:	4283      	cmp	r3, r0
 8007d22:	d004      	beq.n	8007d2e <__swbuf_r+0x62>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	07db      	lsls	r3, r3, #31
 8007d28:	d506      	bpl.n	8007d38 <__swbuf_r+0x6c>
 8007d2a:	2e0a      	cmp	r6, #10
 8007d2c:	d104      	bne.n	8007d38 <__swbuf_r+0x6c>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f911 	bl	8007f58 <_fflush_r>
 8007d36:	b988      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d38:	4638      	mov	r0, r7
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <__swbuf_r+0x9c>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <__swbuf_r+0x7a>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7cf      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <__swbuf_r+0xa0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	bf08      	it	eq
 8007d4c:	68ec      	ldreq	r4, [r5, #12]
 8007d4e:	e7ca      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f80c 	bl	8007d70 <__swsetup_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d0cb      	beq.n	8007cf4 <__swbuf_r+0x28>
 8007d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d60:	e7ea      	b.n	8007d38 <__swbuf_r+0x6c>
 8007d62:	bf00      	nop
 8007d64:	08008d9c 	.word	0x08008d9c
 8007d68:	08008dbc 	.word	0x08008dbc
 8007d6c:	08008d7c 	.word	0x08008d7c

08007d70 <__swsetup_r>:
 8007d70:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <__swsetup_r+0xcc>)
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	4606      	mov	r6, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b125      	cbz	r5, 8007d86 <__swsetup_r+0x16>
 8007d7c:	69ab      	ldr	r3, [r5, #24]
 8007d7e:	b913      	cbnz	r3, 8007d86 <__swsetup_r+0x16>
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 f97d 	bl	8008080 <__sinit>
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <__swsetup_r+0xd0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d10f      	bne.n	8007dac <__swsetup_r+0x3c>
 8007d8c:	686c      	ldr	r4, [r5, #4]
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d94:	0719      	lsls	r1, r3, #28
 8007d96:	d42c      	bmi.n	8007df2 <__swsetup_r+0x82>
 8007d98:	06dd      	lsls	r5, r3, #27
 8007d9a:	d411      	bmi.n	8007dc0 <__swsetup_r+0x50>
 8007d9c:	2309      	movs	r3, #9
 8007d9e:	6033      	str	r3, [r6, #0]
 8007da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e03e      	b.n	8007e2a <__swsetup_r+0xba>
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <__swsetup_r+0xd4>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d101      	bne.n	8007db6 <__swsetup_r+0x46>
 8007db2:	68ac      	ldr	r4, [r5, #8]
 8007db4:	e7eb      	b.n	8007d8e <__swsetup_r+0x1e>
 8007db6:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <__swsetup_r+0xd8>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	bf08      	it	eq
 8007dbc:	68ec      	ldreq	r4, [r5, #12]
 8007dbe:	e7e6      	b.n	8007d8e <__swsetup_r+0x1e>
 8007dc0:	0758      	lsls	r0, r3, #29
 8007dc2:	d512      	bpl.n	8007dea <__swsetup_r+0x7a>
 8007dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc6:	b141      	cbz	r1, 8007dda <__swsetup_r+0x6a>
 8007dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d002      	beq.n	8007dd6 <__swsetup_r+0x66>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff fe35 	bl	8007a40 <_free_r>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	2300      	movs	r3, #0
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0308 	orr.w	r3, r3, #8
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	b94b      	cbnz	r3, 8007e0a <__swsetup_r+0x9a>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	d003      	beq.n	8007e0a <__swsetup_r+0x9a>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4630      	mov	r0, r6
 8007e06:	f000 f9ff 	bl	8008208 <__smakebuf_r>
 8007e0a:	89a0      	ldrh	r0, [r4, #12]
 8007e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e10:	f010 0301 	ands.w	r3, r0, #1
 8007e14:	d00a      	beq.n	8007e2c <__swsetup_r+0xbc>
 8007e16:	2300      	movs	r3, #0
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b943      	cbnz	r3, 8007e36 <__swsetup_r+0xc6>
 8007e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e28:	d1ba      	bne.n	8007da0 <__swsetup_r+0x30>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	0781      	lsls	r1, r0, #30
 8007e2e:	bf58      	it	pl
 8007e30:	6963      	ldrpl	r3, [r4, #20]
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	e7f4      	b.n	8007e20 <__swsetup_r+0xb0>
 8007e36:	2000      	movs	r0, #0
 8007e38:	e7f7      	b.n	8007e2a <__swsetup_r+0xba>
 8007e3a:	bf00      	nop
 8007e3c:	20000010 	.word	0x20000010
 8007e40:	08008d9c 	.word	0x08008d9c
 8007e44:	08008dbc 	.word	0x08008dbc
 8007e48:	08008d7c 	.word	0x08008d7c

08007e4c <__sflush_r>:
 8007e4c:	898a      	ldrh	r2, [r1, #12]
 8007e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	0710      	lsls	r0, r2, #28
 8007e56:	460c      	mov	r4, r1
 8007e58:	d458      	bmi.n	8007f0c <__sflush_r+0xc0>
 8007e5a:	684b      	ldr	r3, [r1, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc05      	bgt.n	8007e6c <__sflush_r+0x20>
 8007e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc02      	bgt.n	8007e6c <__sflush_r+0x20>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	d0f9      	beq.n	8007e66 <__sflush_r+0x1a>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e78:	682f      	ldr	r7, [r5, #0]
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	d032      	beq.n	8007ee4 <__sflush_r+0x98>
 8007e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	075a      	lsls	r2, r3, #29
 8007e84:	d505      	bpl.n	8007e92 <__sflush_r+0x46>
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	1ac0      	subs	r0, r0, r3
 8007e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e8c:	b10b      	cbz	r3, 8007e92 <__sflush_r+0x46>
 8007e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e90:	1ac0      	subs	r0, r0, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	4602      	mov	r2, r0
 8007e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e98:	6a21      	ldr	r1, [r4, #32]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b0      	blx	r6
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	d106      	bne.n	8007eb2 <__sflush_r+0x66>
 8007ea4:	6829      	ldr	r1, [r5, #0]
 8007ea6:	291d      	cmp	r1, #29
 8007ea8:	d82c      	bhi.n	8007f04 <__sflush_r+0xb8>
 8007eaa:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <__sflush_r+0x108>)
 8007eac:	40ca      	lsrs	r2, r1
 8007eae:	07d6      	lsls	r6, r2, #31
 8007eb0:	d528      	bpl.n	8007f04 <__sflush_r+0xb8>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	6062      	str	r2, [r4, #4]
 8007eb6:	04d9      	lsls	r1, r3, #19
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	d504      	bpl.n	8007ec8 <__sflush_r+0x7c>
 8007ebe:	1c42      	adds	r2, r0, #1
 8007ec0:	d101      	bne.n	8007ec6 <__sflush_r+0x7a>
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	b903      	cbnz	r3, 8007ec8 <__sflush_r+0x7c>
 8007ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eca:	602f      	str	r7, [r5, #0]
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d0ca      	beq.n	8007e66 <__sflush_r+0x1a>
 8007ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed4:	4299      	cmp	r1, r3
 8007ed6:	d002      	beq.n	8007ede <__sflush_r+0x92>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f7ff fdb1 	bl	8007a40 <_free_r>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ee2:	e7c1      	b.n	8007e68 <__sflush_r+0x1c>
 8007ee4:	6a21      	ldr	r1, [r4, #32]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b0      	blx	r6
 8007eec:	1c41      	adds	r1, r0, #1
 8007eee:	d1c7      	bne.n	8007e80 <__sflush_r+0x34>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0c4      	beq.n	8007e80 <__sflush_r+0x34>
 8007ef6:	2b1d      	cmp	r3, #29
 8007ef8:	d001      	beq.n	8007efe <__sflush_r+0xb2>
 8007efa:	2b16      	cmp	r3, #22
 8007efc:	d101      	bne.n	8007f02 <__sflush_r+0xb6>
 8007efe:	602f      	str	r7, [r5, #0]
 8007f00:	e7b1      	b.n	8007e66 <__sflush_r+0x1a>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	e7ad      	b.n	8007e68 <__sflush_r+0x1c>
 8007f0c:	690f      	ldr	r7, [r1, #16]
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d0a9      	beq.n	8007e66 <__sflush_r+0x1a>
 8007f12:	0793      	lsls	r3, r2, #30
 8007f14:	680e      	ldr	r6, [r1, #0]
 8007f16:	bf08      	it	eq
 8007f18:	694b      	ldreq	r3, [r1, #20]
 8007f1a:	600f      	str	r7, [r1, #0]
 8007f1c:	bf18      	it	ne
 8007f1e:	2300      	movne	r3, #0
 8007f20:	eba6 0807 	sub.w	r8, r6, r7
 8007f24:	608b      	str	r3, [r1, #8]
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	dd9c      	ble.n	8007e66 <__sflush_r+0x1a>
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f30:	4643      	mov	r3, r8
 8007f32:	463a      	mov	r2, r7
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b0      	blx	r6
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	dc06      	bgt.n	8007f4a <__sflush_r+0xfe>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e78e      	b.n	8007e68 <__sflush_r+0x1c>
 8007f4a:	4407      	add	r7, r0
 8007f4c:	eba8 0800 	sub.w	r8, r8, r0
 8007f50:	e7e9      	b.n	8007f26 <__sflush_r+0xda>
 8007f52:	bf00      	nop
 8007f54:	20400001 	.word	0x20400001

08007f58 <_fflush_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b913      	cbnz	r3, 8007f68 <_fflush_r+0x10>
 8007f62:	2500      	movs	r5, #0
 8007f64:	4628      	mov	r0, r5
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	b118      	cbz	r0, 8007f72 <_fflush_r+0x1a>
 8007f6a:	6983      	ldr	r3, [r0, #24]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <_fflush_r+0x1a>
 8007f6e:	f000 f887 	bl	8008080 <__sinit>
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <_fflush_r+0x6c>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	d11b      	bne.n	8007fb0 <_fflush_r+0x58>
 8007f78:	686c      	ldr	r4, [r5, #4]
 8007f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0ef      	beq.n	8007f62 <_fflush_r+0xa>
 8007f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f84:	07d0      	lsls	r0, r2, #31
 8007f86:	d404      	bmi.n	8007f92 <_fflush_r+0x3a>
 8007f88:	0599      	lsls	r1, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_fflush_r+0x3a>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f000 f915 	bl	80081bc <__retarget_lock_acquire_recursive>
 8007f92:	4628      	mov	r0, r5
 8007f94:	4621      	mov	r1, r4
 8007f96:	f7ff ff59 	bl	8007e4c <__sflush_r>
 8007f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f9c:	07da      	lsls	r2, r3, #31
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	d4e0      	bmi.n	8007f64 <_fflush_r+0xc>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	059b      	lsls	r3, r3, #22
 8007fa6:	d4dd      	bmi.n	8007f64 <_fflush_r+0xc>
 8007fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007faa:	f000 f908 	bl	80081be <__retarget_lock_release_recursive>
 8007fae:	e7d9      	b.n	8007f64 <_fflush_r+0xc>
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <_fflush_r+0x70>)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d101      	bne.n	8007fba <_fflush_r+0x62>
 8007fb6:	68ac      	ldr	r4, [r5, #8]
 8007fb8:	e7df      	b.n	8007f7a <_fflush_r+0x22>
 8007fba:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <_fflush_r+0x74>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	bf08      	it	eq
 8007fc0:	68ec      	ldreq	r4, [r5, #12]
 8007fc2:	e7da      	b.n	8007f7a <_fflush_r+0x22>
 8007fc4:	08008d9c 	.word	0x08008d9c
 8007fc8:	08008dbc 	.word	0x08008dbc
 8007fcc:	08008d7c 	.word	0x08008d7c

08007fd0 <std>:
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8007fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fde:	6083      	str	r3, [r0, #8]
 8007fe0:	8181      	strh	r1, [r0, #12]
 8007fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe4:	81c2      	strh	r2, [r0, #14]
 8007fe6:	6183      	str	r3, [r0, #24]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	2208      	movs	r2, #8
 8007fec:	305c      	adds	r0, #92	; 0x5c
 8007fee:	f7ff fd1f 	bl	8007a30 <memset>
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <std+0x38>)
 8007ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x3c>)
 8007ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <std+0x40>)
 8007ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <std+0x44>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	6323      	str	r3, [r4, #48]	; 0x30
 8008004:	bd10      	pop	{r4, pc}
 8008006:	bf00      	nop
 8008008:	08008879 	.word	0x08008879
 800800c:	0800889b 	.word	0x0800889b
 8008010:	080088d3 	.word	0x080088d3
 8008014:	080088f7 	.word	0x080088f7

08008018 <_cleanup_r>:
 8008018:	4901      	ldr	r1, [pc, #4]	; (8008020 <_cleanup_r+0x8>)
 800801a:	f000 b8af 	b.w	800817c <_fwalk_reent>
 800801e:	bf00      	nop
 8008020:	08007f59 	.word	0x08007f59

08008024 <__sfmoreglue>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	1e4a      	subs	r2, r1, #1
 8008028:	2568      	movs	r5, #104	; 0x68
 800802a:	4355      	muls	r5, r2
 800802c:	460e      	mov	r6, r1
 800802e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008032:	f7ff fd53 	bl	8007adc <_malloc_r>
 8008036:	4604      	mov	r4, r0
 8008038:	b140      	cbz	r0, 800804c <__sfmoreglue+0x28>
 800803a:	2100      	movs	r1, #0
 800803c:	e9c0 1600 	strd	r1, r6, [r0]
 8008040:	300c      	adds	r0, #12
 8008042:	60a0      	str	r0, [r4, #8]
 8008044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008048:	f7ff fcf2 	bl	8007a30 <memset>
 800804c:	4620      	mov	r0, r4
 800804e:	bd70      	pop	{r4, r5, r6, pc}

08008050 <__sfp_lock_acquire>:
 8008050:	4801      	ldr	r0, [pc, #4]	; (8008058 <__sfp_lock_acquire+0x8>)
 8008052:	f000 b8b3 	b.w	80081bc <__retarget_lock_acquire_recursive>
 8008056:	bf00      	nop
 8008058:	200004de 	.word	0x200004de

0800805c <__sfp_lock_release>:
 800805c:	4801      	ldr	r0, [pc, #4]	; (8008064 <__sfp_lock_release+0x8>)
 800805e:	f000 b8ae 	b.w	80081be <__retarget_lock_release_recursive>
 8008062:	bf00      	nop
 8008064:	200004de 	.word	0x200004de

08008068 <__sinit_lock_acquire>:
 8008068:	4801      	ldr	r0, [pc, #4]	; (8008070 <__sinit_lock_acquire+0x8>)
 800806a:	f000 b8a7 	b.w	80081bc <__retarget_lock_acquire_recursive>
 800806e:	bf00      	nop
 8008070:	200004d9 	.word	0x200004d9

08008074 <__sinit_lock_release>:
 8008074:	4801      	ldr	r0, [pc, #4]	; (800807c <__sinit_lock_release+0x8>)
 8008076:	f000 b8a2 	b.w	80081be <__retarget_lock_release_recursive>
 800807a:	bf00      	nop
 800807c:	200004d9 	.word	0x200004d9

08008080 <__sinit>:
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
 8008084:	f7ff fff0 	bl	8008068 <__sinit_lock_acquire>
 8008088:	69a3      	ldr	r3, [r4, #24]
 800808a:	b11b      	cbz	r3, 8008094 <__sinit+0x14>
 800808c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008090:	f7ff bff0 	b.w	8008074 <__sinit_lock_release>
 8008094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008098:	6523      	str	r3, [r4, #80]	; 0x50
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <__sinit+0x68>)
 800809c:	4a13      	ldr	r2, [pc, #76]	; (80080ec <__sinit+0x6c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	bf04      	itt	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	61a3      	streq	r3, [r4, #24]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f820 	bl	80080f0 <__sfp>
 80080b0:	6060      	str	r0, [r4, #4]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 f81c 	bl	80080f0 <__sfp>
 80080b8:	60a0      	str	r0, [r4, #8]
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 f818 	bl	80080f0 <__sfp>
 80080c0:	2200      	movs	r2, #0
 80080c2:	60e0      	str	r0, [r4, #12]
 80080c4:	2104      	movs	r1, #4
 80080c6:	6860      	ldr	r0, [r4, #4]
 80080c8:	f7ff ff82 	bl	8007fd0 <std>
 80080cc:	68a0      	ldr	r0, [r4, #8]
 80080ce:	2201      	movs	r2, #1
 80080d0:	2109      	movs	r1, #9
 80080d2:	f7ff ff7d 	bl	8007fd0 <std>
 80080d6:	68e0      	ldr	r0, [r4, #12]
 80080d8:	2202      	movs	r2, #2
 80080da:	2112      	movs	r1, #18
 80080dc:	f7ff ff78 	bl	8007fd0 <std>
 80080e0:	2301      	movs	r3, #1
 80080e2:	61a3      	str	r3, [r4, #24]
 80080e4:	e7d2      	b.n	800808c <__sinit+0xc>
 80080e6:	bf00      	nop
 80080e8:	08008d78 	.word	0x08008d78
 80080ec:	08008019 	.word	0x08008019

080080f0 <__sfp>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	4607      	mov	r7, r0
 80080f4:	f7ff ffac 	bl	8008050 <__sfp_lock_acquire>
 80080f8:	4b1e      	ldr	r3, [pc, #120]	; (8008174 <__sfp+0x84>)
 80080fa:	681e      	ldr	r6, [r3, #0]
 80080fc:	69b3      	ldr	r3, [r6, #24]
 80080fe:	b913      	cbnz	r3, 8008106 <__sfp+0x16>
 8008100:	4630      	mov	r0, r6
 8008102:	f7ff ffbd 	bl	8008080 <__sinit>
 8008106:	3648      	adds	r6, #72	; 0x48
 8008108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800810c:	3b01      	subs	r3, #1
 800810e:	d503      	bpl.n	8008118 <__sfp+0x28>
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	b30b      	cbz	r3, 8008158 <__sfp+0x68>
 8008114:	6836      	ldr	r6, [r6, #0]
 8008116:	e7f7      	b.n	8008108 <__sfp+0x18>
 8008118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800811c:	b9d5      	cbnz	r5, 8008154 <__sfp+0x64>
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <__sfp+0x88>)
 8008120:	60e3      	str	r3, [r4, #12]
 8008122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008126:	6665      	str	r5, [r4, #100]	; 0x64
 8008128:	f000 f847 	bl	80081ba <__retarget_lock_init_recursive>
 800812c:	f7ff ff96 	bl	800805c <__sfp_lock_release>
 8008130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008138:	6025      	str	r5, [r4, #0]
 800813a:	61a5      	str	r5, [r4, #24]
 800813c:	2208      	movs	r2, #8
 800813e:	4629      	mov	r1, r5
 8008140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008144:	f7ff fc74 	bl	8007a30 <memset>
 8008148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800814c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008150:	4620      	mov	r0, r4
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	3468      	adds	r4, #104	; 0x68
 8008156:	e7d9      	b.n	800810c <__sfp+0x1c>
 8008158:	2104      	movs	r1, #4
 800815a:	4638      	mov	r0, r7
 800815c:	f7ff ff62 	bl	8008024 <__sfmoreglue>
 8008160:	4604      	mov	r4, r0
 8008162:	6030      	str	r0, [r6, #0]
 8008164:	2800      	cmp	r0, #0
 8008166:	d1d5      	bne.n	8008114 <__sfp+0x24>
 8008168:	f7ff ff78 	bl	800805c <__sfp_lock_release>
 800816c:	230c      	movs	r3, #12
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	e7ee      	b.n	8008150 <__sfp+0x60>
 8008172:	bf00      	nop
 8008174:	08008d78 	.word	0x08008d78
 8008178:	ffff0001 	.word	0xffff0001

0800817c <_fwalk_reent>:
 800817c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008180:	4606      	mov	r6, r0
 8008182:	4688      	mov	r8, r1
 8008184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008188:	2700      	movs	r7, #0
 800818a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800818e:	f1b9 0901 	subs.w	r9, r9, #1
 8008192:	d505      	bpl.n	80081a0 <_fwalk_reent+0x24>
 8008194:	6824      	ldr	r4, [r4, #0]
 8008196:	2c00      	cmp	r4, #0
 8008198:	d1f7      	bne.n	800818a <_fwalk_reent+0xe>
 800819a:	4638      	mov	r0, r7
 800819c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a0:	89ab      	ldrh	r3, [r5, #12]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d907      	bls.n	80081b6 <_fwalk_reent+0x3a>
 80081a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081aa:	3301      	adds	r3, #1
 80081ac:	d003      	beq.n	80081b6 <_fwalk_reent+0x3a>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4630      	mov	r0, r6
 80081b2:	47c0      	blx	r8
 80081b4:	4307      	orrs	r7, r0
 80081b6:	3568      	adds	r5, #104	; 0x68
 80081b8:	e7e9      	b.n	800818e <_fwalk_reent+0x12>

080081ba <__retarget_lock_init_recursive>:
 80081ba:	4770      	bx	lr

080081bc <__retarget_lock_acquire_recursive>:
 80081bc:	4770      	bx	lr

080081be <__retarget_lock_release_recursive>:
 80081be:	4770      	bx	lr

080081c0 <__swhatbuf_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	460e      	mov	r6, r1
 80081c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c8:	2900      	cmp	r1, #0
 80081ca:	b096      	sub	sp, #88	; 0x58
 80081cc:	4614      	mov	r4, r2
 80081ce:	461d      	mov	r5, r3
 80081d0:	da07      	bge.n	80081e2 <__swhatbuf_r+0x22>
 80081d2:	2300      	movs	r3, #0
 80081d4:	602b      	str	r3, [r5, #0]
 80081d6:	89b3      	ldrh	r3, [r6, #12]
 80081d8:	061a      	lsls	r2, r3, #24
 80081da:	d410      	bmi.n	80081fe <__swhatbuf_r+0x3e>
 80081dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e0:	e00e      	b.n	8008200 <__swhatbuf_r+0x40>
 80081e2:	466a      	mov	r2, sp
 80081e4:	f000 fbae 	bl	8008944 <_fstat_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	dbf2      	blt.n	80081d2 <__swhatbuf_r+0x12>
 80081ec:	9a01      	ldr	r2, [sp, #4]
 80081ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081f6:	425a      	negs	r2, r3
 80081f8:	415a      	adcs	r2, r3
 80081fa:	602a      	str	r2, [r5, #0]
 80081fc:	e7ee      	b.n	80081dc <__swhatbuf_r+0x1c>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	2000      	movs	r0, #0
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	b016      	add	sp, #88	; 0x58
 8008206:	bd70      	pop	{r4, r5, r6, pc}

08008208 <__smakebuf_r>:
 8008208:	898b      	ldrh	r3, [r1, #12]
 800820a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800820c:	079d      	lsls	r5, r3, #30
 800820e:	4606      	mov	r6, r0
 8008210:	460c      	mov	r4, r1
 8008212:	d507      	bpl.n	8008224 <__smakebuf_r+0x1c>
 8008214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	2301      	movs	r3, #1
 800821e:	6163      	str	r3, [r4, #20]
 8008220:	b002      	add	sp, #8
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	ab01      	add	r3, sp, #4
 8008226:	466a      	mov	r2, sp
 8008228:	f7ff ffca 	bl	80081c0 <__swhatbuf_r>
 800822c:	9900      	ldr	r1, [sp, #0]
 800822e:	4605      	mov	r5, r0
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fc53 	bl	8007adc <_malloc_r>
 8008236:	b948      	cbnz	r0, 800824c <__smakebuf_r+0x44>
 8008238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823c:	059a      	lsls	r2, r3, #22
 800823e:	d4ef      	bmi.n	8008220 <__smakebuf_r+0x18>
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	f043 0302 	orr.w	r3, r3, #2
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	e7e3      	b.n	8008214 <__smakebuf_r+0xc>
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <__smakebuf_r+0x7c>)
 800824e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	6020      	str	r0, [r4, #0]
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	6163      	str	r3, [r4, #20]
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	6120      	str	r0, [r4, #16]
 8008262:	b15b      	cbz	r3, 800827c <__smakebuf_r+0x74>
 8008264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008268:	4630      	mov	r0, r6
 800826a:	f000 fb7d 	bl	8008968 <_isatty_r>
 800826e:	b128      	cbz	r0, 800827c <__smakebuf_r+0x74>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	f023 0303 	bic.w	r3, r3, #3
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	89a0      	ldrh	r0, [r4, #12]
 800827e:	4305      	orrs	r5, r0
 8008280:	81a5      	strh	r5, [r4, #12]
 8008282:	e7cd      	b.n	8008220 <__smakebuf_r+0x18>
 8008284:	08008019 	.word	0x08008019

08008288 <__malloc_lock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_lock+0x8>)
 800828a:	f7ff bf97 	b.w	80081bc <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	200004da 	.word	0x200004da

08008294 <__malloc_unlock>:
 8008294:	4801      	ldr	r0, [pc, #4]	; (800829c <__malloc_unlock+0x8>)
 8008296:	f7ff bf92 	b.w	80081be <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	200004da 	.word	0x200004da

080082a0 <__sfputc_r>:
 80082a0:	6893      	ldr	r3, [r2, #8]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	b410      	push	{r4}
 80082a8:	6093      	str	r3, [r2, #8]
 80082aa:	da07      	bge.n	80082bc <__sfputc_r+0x1c>
 80082ac:	6994      	ldr	r4, [r2, #24]
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	db01      	blt.n	80082b6 <__sfputc_r+0x16>
 80082b2:	290a      	cmp	r1, #10
 80082b4:	d102      	bne.n	80082bc <__sfputc_r+0x1c>
 80082b6:	bc10      	pop	{r4}
 80082b8:	f7ff bd08 	b.w	8007ccc <__swbuf_r>
 80082bc:	6813      	ldr	r3, [r2, #0]
 80082be:	1c58      	adds	r0, r3, #1
 80082c0:	6010      	str	r0, [r2, #0]
 80082c2:	7019      	strb	r1, [r3, #0]
 80082c4:	4608      	mov	r0, r1
 80082c6:	bc10      	pop	{r4}
 80082c8:	4770      	bx	lr

080082ca <__sfputs_r>:
 80082ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	4614      	mov	r4, r2
 80082d2:	18d5      	adds	r5, r2, r3
 80082d4:	42ac      	cmp	r4, r5
 80082d6:	d101      	bne.n	80082dc <__sfputs_r+0x12>
 80082d8:	2000      	movs	r0, #0
 80082da:	e007      	b.n	80082ec <__sfputs_r+0x22>
 80082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e0:	463a      	mov	r2, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff ffdc 	bl	80082a0 <__sfputc_r>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d1f3      	bne.n	80082d4 <__sfputs_r+0xa>
 80082ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082f0 <_vfiprintf_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	460d      	mov	r5, r1
 80082f6:	b09d      	sub	sp, #116	; 0x74
 80082f8:	4614      	mov	r4, r2
 80082fa:	4698      	mov	r8, r3
 80082fc:	4606      	mov	r6, r0
 80082fe:	b118      	cbz	r0, 8008308 <_vfiprintf_r+0x18>
 8008300:	6983      	ldr	r3, [r0, #24]
 8008302:	b90b      	cbnz	r3, 8008308 <_vfiprintf_r+0x18>
 8008304:	f7ff febc 	bl	8008080 <__sinit>
 8008308:	4b89      	ldr	r3, [pc, #548]	; (8008530 <_vfiprintf_r+0x240>)
 800830a:	429d      	cmp	r5, r3
 800830c:	d11b      	bne.n	8008346 <_vfiprintf_r+0x56>
 800830e:	6875      	ldr	r5, [r6, #4]
 8008310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d405      	bmi.n	8008322 <_vfiprintf_r+0x32>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d402      	bmi.n	8008322 <_vfiprintf_r+0x32>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7ff ff4d 	bl	80081bc <__retarget_lock_acquire_recursive>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	071b      	lsls	r3, r3, #28
 8008326:	d501      	bpl.n	800832c <_vfiprintf_r+0x3c>
 8008328:	692b      	ldr	r3, [r5, #16]
 800832a:	b9eb      	cbnz	r3, 8008368 <_vfiprintf_r+0x78>
 800832c:	4629      	mov	r1, r5
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff fd1e 	bl	8007d70 <__swsetup_r>
 8008334:	b1c0      	cbz	r0, 8008368 <_vfiprintf_r+0x78>
 8008336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008338:	07dc      	lsls	r4, r3, #31
 800833a:	d50e      	bpl.n	800835a <_vfiprintf_r+0x6a>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b01d      	add	sp, #116	; 0x74
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	4b7b      	ldr	r3, [pc, #492]	; (8008534 <_vfiprintf_r+0x244>)
 8008348:	429d      	cmp	r5, r3
 800834a:	d101      	bne.n	8008350 <_vfiprintf_r+0x60>
 800834c:	68b5      	ldr	r5, [r6, #8]
 800834e:	e7df      	b.n	8008310 <_vfiprintf_r+0x20>
 8008350:	4b79      	ldr	r3, [pc, #484]	; (8008538 <_vfiprintf_r+0x248>)
 8008352:	429d      	cmp	r5, r3
 8008354:	bf08      	it	eq
 8008356:	68f5      	ldreq	r5, [r6, #12]
 8008358:	e7da      	b.n	8008310 <_vfiprintf_r+0x20>
 800835a:	89ab      	ldrh	r3, [r5, #12]
 800835c:	0598      	lsls	r0, r3, #22
 800835e:	d4ed      	bmi.n	800833c <_vfiprintf_r+0x4c>
 8008360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008362:	f7ff ff2c 	bl	80081be <__retarget_lock_release_recursive>
 8008366:	e7e9      	b.n	800833c <_vfiprintf_r+0x4c>
 8008368:	2300      	movs	r3, #0
 800836a:	9309      	str	r3, [sp, #36]	; 0x24
 800836c:	2320      	movs	r3, #32
 800836e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008372:	f8cd 800c 	str.w	r8, [sp, #12]
 8008376:	2330      	movs	r3, #48	; 0x30
 8008378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800853c <_vfiprintf_r+0x24c>
 800837c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008380:	f04f 0901 	mov.w	r9, #1
 8008384:	4623      	mov	r3, r4
 8008386:	469a      	mov	sl, r3
 8008388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800838c:	b10a      	cbz	r2, 8008392 <_vfiprintf_r+0xa2>
 800838e:	2a25      	cmp	r2, #37	; 0x25
 8008390:	d1f9      	bne.n	8008386 <_vfiprintf_r+0x96>
 8008392:	ebba 0b04 	subs.w	fp, sl, r4
 8008396:	d00b      	beq.n	80083b0 <_vfiprintf_r+0xc0>
 8008398:	465b      	mov	r3, fp
 800839a:	4622      	mov	r2, r4
 800839c:	4629      	mov	r1, r5
 800839e:	4630      	mov	r0, r6
 80083a0:	f7ff ff93 	bl	80082ca <__sfputs_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	f000 80aa 	beq.w	80084fe <_vfiprintf_r+0x20e>
 80083aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ac:	445a      	add	r2, fp
 80083ae:	9209      	str	r2, [sp, #36]	; 0x24
 80083b0:	f89a 3000 	ldrb.w	r3, [sl]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80a2 	beq.w	80084fe <_vfiprintf_r+0x20e>
 80083ba:	2300      	movs	r3, #0
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c4:	f10a 0a01 	add.w	sl, sl, #1
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d0:	931a      	str	r3, [sp, #104]	; 0x68
 80083d2:	4654      	mov	r4, sl
 80083d4:	2205      	movs	r2, #5
 80083d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083da:	4858      	ldr	r0, [pc, #352]	; (800853c <_vfiprintf_r+0x24c>)
 80083dc:	f7f7 fed8 	bl	8000190 <memchr>
 80083e0:	9a04      	ldr	r2, [sp, #16]
 80083e2:	b9d8      	cbnz	r0, 800841c <_vfiprintf_r+0x12c>
 80083e4:	06d1      	lsls	r1, r2, #27
 80083e6:	bf44      	itt	mi
 80083e8:	2320      	movmi	r3, #32
 80083ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ee:	0713      	lsls	r3, r2, #28
 80083f0:	bf44      	itt	mi
 80083f2:	232b      	movmi	r3, #43	; 0x2b
 80083f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f8:	f89a 3000 	ldrb.w	r3, [sl]
 80083fc:	2b2a      	cmp	r3, #42	; 0x2a
 80083fe:	d015      	beq.n	800842c <_vfiprintf_r+0x13c>
 8008400:	9a07      	ldr	r2, [sp, #28]
 8008402:	4654      	mov	r4, sl
 8008404:	2000      	movs	r0, #0
 8008406:	f04f 0c0a 	mov.w	ip, #10
 800840a:	4621      	mov	r1, r4
 800840c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008410:	3b30      	subs	r3, #48	; 0x30
 8008412:	2b09      	cmp	r3, #9
 8008414:	d94e      	bls.n	80084b4 <_vfiprintf_r+0x1c4>
 8008416:	b1b0      	cbz	r0, 8008446 <_vfiprintf_r+0x156>
 8008418:	9207      	str	r2, [sp, #28]
 800841a:	e014      	b.n	8008446 <_vfiprintf_r+0x156>
 800841c:	eba0 0308 	sub.w	r3, r0, r8
 8008420:	fa09 f303 	lsl.w	r3, r9, r3
 8008424:	4313      	orrs	r3, r2
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	46a2      	mov	sl, r4
 800842a:	e7d2      	b.n	80083d2 <_vfiprintf_r+0xe2>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1d19      	adds	r1, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	9103      	str	r1, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfbb      	ittet	lt
 8008438:	425b      	neglt	r3, r3
 800843a:	f042 0202 	orrlt.w	r2, r2, #2
 800843e:	9307      	strge	r3, [sp, #28]
 8008440:	9307      	strlt	r3, [sp, #28]
 8008442:	bfb8      	it	lt
 8008444:	9204      	strlt	r2, [sp, #16]
 8008446:	7823      	ldrb	r3, [r4, #0]
 8008448:	2b2e      	cmp	r3, #46	; 0x2e
 800844a:	d10c      	bne.n	8008466 <_vfiprintf_r+0x176>
 800844c:	7863      	ldrb	r3, [r4, #1]
 800844e:	2b2a      	cmp	r3, #42	; 0x2a
 8008450:	d135      	bne.n	80084be <_vfiprintf_r+0x1ce>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	9203      	str	r2, [sp, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfb8      	it	lt
 800845e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008462:	3402      	adds	r4, #2
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800854c <_vfiprintf_r+0x25c>
 800846a:	7821      	ldrb	r1, [r4, #0]
 800846c:	2203      	movs	r2, #3
 800846e:	4650      	mov	r0, sl
 8008470:	f7f7 fe8e 	bl	8000190 <memchr>
 8008474:	b140      	cbz	r0, 8008488 <_vfiprintf_r+0x198>
 8008476:	2340      	movs	r3, #64	; 0x40
 8008478:	eba0 000a 	sub.w	r0, r0, sl
 800847c:	fa03 f000 	lsl.w	r0, r3, r0
 8008480:	9b04      	ldr	r3, [sp, #16]
 8008482:	4303      	orrs	r3, r0
 8008484:	3401      	adds	r4, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	482c      	ldr	r0, [pc, #176]	; (8008540 <_vfiprintf_r+0x250>)
 800848e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008492:	2206      	movs	r2, #6
 8008494:	f7f7 fe7c 	bl	8000190 <memchr>
 8008498:	2800      	cmp	r0, #0
 800849a:	d03f      	beq.n	800851c <_vfiprintf_r+0x22c>
 800849c:	4b29      	ldr	r3, [pc, #164]	; (8008544 <_vfiprintf_r+0x254>)
 800849e:	bb1b      	cbnz	r3, 80084e8 <_vfiprintf_r+0x1f8>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	3307      	adds	r3, #7
 80084a4:	f023 0307 	bic.w	r3, r3, #7
 80084a8:	3308      	adds	r3, #8
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	443b      	add	r3, r7
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
 80084b2:	e767      	b.n	8008384 <_vfiprintf_r+0x94>
 80084b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b8:	460c      	mov	r4, r1
 80084ba:	2001      	movs	r0, #1
 80084bc:	e7a5      	b.n	800840a <_vfiprintf_r+0x11a>
 80084be:	2300      	movs	r3, #0
 80084c0:	3401      	adds	r4, #1
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4620      	mov	r0, r4
 80084cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d0:	3a30      	subs	r2, #48	; 0x30
 80084d2:	2a09      	cmp	r2, #9
 80084d4:	d903      	bls.n	80084de <_vfiprintf_r+0x1ee>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c5      	beq.n	8008466 <_vfiprintf_r+0x176>
 80084da:	9105      	str	r1, [sp, #20]
 80084dc:	e7c3      	b.n	8008466 <_vfiprintf_r+0x176>
 80084de:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e2:	4604      	mov	r4, r0
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f0      	b.n	80084ca <_vfiprintf_r+0x1da>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b16      	ldr	r3, [pc, #88]	; (8008548 <_vfiprintf_r+0x258>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4630      	mov	r0, r6
 80084f4:	f3af 8000 	nop.w
 80084f8:	4607      	mov	r7, r0
 80084fa:	1c78      	adds	r0, r7, #1
 80084fc:	d1d6      	bne.n	80084ac <_vfiprintf_r+0x1bc>
 80084fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008500:	07d9      	lsls	r1, r3, #31
 8008502:	d405      	bmi.n	8008510 <_vfiprintf_r+0x220>
 8008504:	89ab      	ldrh	r3, [r5, #12]
 8008506:	059a      	lsls	r2, r3, #22
 8008508:	d402      	bmi.n	8008510 <_vfiprintf_r+0x220>
 800850a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850c:	f7ff fe57 	bl	80081be <__retarget_lock_release_recursive>
 8008510:	89ab      	ldrh	r3, [r5, #12]
 8008512:	065b      	lsls	r3, r3, #25
 8008514:	f53f af12 	bmi.w	800833c <_vfiprintf_r+0x4c>
 8008518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800851a:	e711      	b.n	8008340 <_vfiprintf_r+0x50>
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462a      	mov	r2, r5
 8008522:	4b09      	ldr	r3, [pc, #36]	; (8008548 <_vfiprintf_r+0x258>)
 8008524:	a904      	add	r1, sp, #16
 8008526:	4630      	mov	r0, r6
 8008528:	f000 f880 	bl	800862c <_printf_i>
 800852c:	e7e4      	b.n	80084f8 <_vfiprintf_r+0x208>
 800852e:	bf00      	nop
 8008530:	08008d9c 	.word	0x08008d9c
 8008534:	08008dbc 	.word	0x08008dbc
 8008538:	08008d7c 	.word	0x08008d7c
 800853c:	08008ddc 	.word	0x08008ddc
 8008540:	08008de6 	.word	0x08008de6
 8008544:	00000000 	.word	0x00000000
 8008548:	080082cb 	.word	0x080082cb
 800854c:	08008de2 	.word	0x08008de2

08008550 <_printf_common>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	4616      	mov	r6, r2
 8008556:	4699      	mov	r9, r3
 8008558:	688a      	ldr	r2, [r1, #8]
 800855a:	690b      	ldr	r3, [r1, #16]
 800855c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008560:	4293      	cmp	r3, r2
 8008562:	bfb8      	it	lt
 8008564:	4613      	movlt	r3, r2
 8008566:	6033      	str	r3, [r6, #0]
 8008568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800856c:	4607      	mov	r7, r0
 800856e:	460c      	mov	r4, r1
 8008570:	b10a      	cbz	r2, 8008576 <_printf_common+0x26>
 8008572:	3301      	adds	r3, #1
 8008574:	6033      	str	r3, [r6, #0]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	0699      	lsls	r1, r3, #26
 800857a:	bf42      	ittt	mi
 800857c:	6833      	ldrmi	r3, [r6, #0]
 800857e:	3302      	addmi	r3, #2
 8008580:	6033      	strmi	r3, [r6, #0]
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	f015 0506 	ands.w	r5, r5, #6
 8008588:	d106      	bne.n	8008598 <_printf_common+0x48>
 800858a:	f104 0a19 	add.w	sl, r4, #25
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	6832      	ldr	r2, [r6, #0]
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	42ab      	cmp	r3, r5
 8008596:	dc26      	bgt.n	80085e6 <_printf_common+0x96>
 8008598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800859c:	1e13      	subs	r3, r2, #0
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	bf18      	it	ne
 80085a2:	2301      	movne	r3, #1
 80085a4:	0692      	lsls	r2, r2, #26
 80085a6:	d42b      	bmi.n	8008600 <_printf_common+0xb0>
 80085a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ac:	4649      	mov	r1, r9
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c0      	blx	r8
 80085b2:	3001      	adds	r0, #1
 80085b4:	d01e      	beq.n	80085f4 <_printf_common+0xa4>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	68e5      	ldr	r5, [r4, #12]
 80085ba:	6832      	ldr	r2, [r6, #0]
 80085bc:	f003 0306 	and.w	r3, r3, #6
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	bf08      	it	eq
 80085c4:	1aad      	subeq	r5, r5, r2
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	bf0c      	ite	eq
 80085cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d0:	2500      	movne	r5, #0
 80085d2:	4293      	cmp	r3, r2
 80085d4:	bfc4      	itt	gt
 80085d6:	1a9b      	subgt	r3, r3, r2
 80085d8:	18ed      	addgt	r5, r5, r3
 80085da:	2600      	movs	r6, #0
 80085dc:	341a      	adds	r4, #26
 80085de:	42b5      	cmp	r5, r6
 80085e0:	d11a      	bne.n	8008618 <_printf_common+0xc8>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e008      	b.n	80085f8 <_printf_common+0xa8>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4652      	mov	r2, sl
 80085ea:	4649      	mov	r1, r9
 80085ec:	4638      	mov	r0, r7
 80085ee:	47c0      	blx	r8
 80085f0:	3001      	adds	r0, #1
 80085f2:	d103      	bne.n	80085fc <_printf_common+0xac>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	3501      	adds	r5, #1
 80085fe:	e7c6      	b.n	800858e <_printf_common+0x3e>
 8008600:	18e1      	adds	r1, r4, r3
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	2030      	movs	r0, #48	; 0x30
 8008606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800860a:	4422      	add	r2, r4
 800860c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008614:	3302      	adds	r3, #2
 8008616:	e7c7      	b.n	80085a8 <_printf_common+0x58>
 8008618:	2301      	movs	r3, #1
 800861a:	4622      	mov	r2, r4
 800861c:	4649      	mov	r1, r9
 800861e:	4638      	mov	r0, r7
 8008620:	47c0      	blx	r8
 8008622:	3001      	adds	r0, #1
 8008624:	d0e6      	beq.n	80085f4 <_printf_common+0xa4>
 8008626:	3601      	adds	r6, #1
 8008628:	e7d9      	b.n	80085de <_printf_common+0x8e>
	...

0800862c <_printf_i>:
 800862c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	460c      	mov	r4, r1
 8008632:	4691      	mov	r9, r2
 8008634:	7e27      	ldrb	r7, [r4, #24]
 8008636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008638:	2f78      	cmp	r7, #120	; 0x78
 800863a:	4680      	mov	r8, r0
 800863c:	469a      	mov	sl, r3
 800863e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008642:	d807      	bhi.n	8008654 <_printf_i+0x28>
 8008644:	2f62      	cmp	r7, #98	; 0x62
 8008646:	d80a      	bhi.n	800865e <_printf_i+0x32>
 8008648:	2f00      	cmp	r7, #0
 800864a:	f000 80d8 	beq.w	80087fe <_printf_i+0x1d2>
 800864e:	2f58      	cmp	r7, #88	; 0x58
 8008650:	f000 80a3 	beq.w	800879a <_printf_i+0x16e>
 8008654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800865c:	e03a      	b.n	80086d4 <_printf_i+0xa8>
 800865e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008662:	2b15      	cmp	r3, #21
 8008664:	d8f6      	bhi.n	8008654 <_printf_i+0x28>
 8008666:	a001      	add	r0, pc, #4	; (adr r0, 800866c <_printf_i+0x40>)
 8008668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800866c:	080086c5 	.word	0x080086c5
 8008670:	080086d9 	.word	0x080086d9
 8008674:	08008655 	.word	0x08008655
 8008678:	08008655 	.word	0x08008655
 800867c:	08008655 	.word	0x08008655
 8008680:	08008655 	.word	0x08008655
 8008684:	080086d9 	.word	0x080086d9
 8008688:	08008655 	.word	0x08008655
 800868c:	08008655 	.word	0x08008655
 8008690:	08008655 	.word	0x08008655
 8008694:	08008655 	.word	0x08008655
 8008698:	080087e5 	.word	0x080087e5
 800869c:	08008709 	.word	0x08008709
 80086a0:	080087c7 	.word	0x080087c7
 80086a4:	08008655 	.word	0x08008655
 80086a8:	08008655 	.word	0x08008655
 80086ac:	08008807 	.word	0x08008807
 80086b0:	08008655 	.word	0x08008655
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008655 	.word	0x08008655
 80086bc:	08008655 	.word	0x08008655
 80086c0:	080087cf 	.word	0x080087cf
 80086c4:	680b      	ldr	r3, [r1, #0]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	600a      	str	r2, [r1, #0]
 80086cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0a3      	b.n	8008820 <_printf_i+0x1f4>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	6808      	ldr	r0, [r1, #0]
 80086dc:	062e      	lsls	r6, r5, #24
 80086de:	f100 0304 	add.w	r3, r0, #4
 80086e2:	d50a      	bpl.n	80086fa <_printf_i+0xce>
 80086e4:	6805      	ldr	r5, [r0, #0]
 80086e6:	600b      	str	r3, [r1, #0]
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	da03      	bge.n	80086f4 <_printf_i+0xc8>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	426d      	negs	r5, r5
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f4:	485e      	ldr	r0, [pc, #376]	; (8008870 <_printf_i+0x244>)
 80086f6:	230a      	movs	r3, #10
 80086f8:	e019      	b.n	800872e <_printf_i+0x102>
 80086fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086fe:	6805      	ldr	r5, [r0, #0]
 8008700:	600b      	str	r3, [r1, #0]
 8008702:	bf18      	it	ne
 8008704:	b22d      	sxthne	r5, r5
 8008706:	e7ef      	b.n	80086e8 <_printf_i+0xbc>
 8008708:	680b      	ldr	r3, [r1, #0]
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	1d18      	adds	r0, r3, #4
 800870e:	6008      	str	r0, [r1, #0]
 8008710:	0628      	lsls	r0, r5, #24
 8008712:	d501      	bpl.n	8008718 <_printf_i+0xec>
 8008714:	681d      	ldr	r5, [r3, #0]
 8008716:	e002      	b.n	800871e <_printf_i+0xf2>
 8008718:	0669      	lsls	r1, r5, #25
 800871a:	d5fb      	bpl.n	8008714 <_printf_i+0xe8>
 800871c:	881d      	ldrh	r5, [r3, #0]
 800871e:	4854      	ldr	r0, [pc, #336]	; (8008870 <_printf_i+0x244>)
 8008720:	2f6f      	cmp	r7, #111	; 0x6f
 8008722:	bf0c      	ite	eq
 8008724:	2308      	moveq	r3, #8
 8008726:	230a      	movne	r3, #10
 8008728:	2100      	movs	r1, #0
 800872a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800872e:	6866      	ldr	r6, [r4, #4]
 8008730:	60a6      	str	r6, [r4, #8]
 8008732:	2e00      	cmp	r6, #0
 8008734:	bfa2      	ittt	ge
 8008736:	6821      	ldrge	r1, [r4, #0]
 8008738:	f021 0104 	bicge.w	r1, r1, #4
 800873c:	6021      	strge	r1, [r4, #0]
 800873e:	b90d      	cbnz	r5, 8008744 <_printf_i+0x118>
 8008740:	2e00      	cmp	r6, #0
 8008742:	d04d      	beq.n	80087e0 <_printf_i+0x1b4>
 8008744:	4616      	mov	r6, r2
 8008746:	fbb5 f1f3 	udiv	r1, r5, r3
 800874a:	fb03 5711 	mls	r7, r3, r1, r5
 800874e:	5dc7      	ldrb	r7, [r0, r7]
 8008750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008754:	462f      	mov	r7, r5
 8008756:	42bb      	cmp	r3, r7
 8008758:	460d      	mov	r5, r1
 800875a:	d9f4      	bls.n	8008746 <_printf_i+0x11a>
 800875c:	2b08      	cmp	r3, #8
 800875e:	d10b      	bne.n	8008778 <_printf_i+0x14c>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	07df      	lsls	r7, r3, #31
 8008764:	d508      	bpl.n	8008778 <_printf_i+0x14c>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6861      	ldr	r1, [r4, #4]
 800876a:	4299      	cmp	r1, r3
 800876c:	bfde      	ittt	le
 800876e:	2330      	movle	r3, #48	; 0x30
 8008770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008778:	1b92      	subs	r2, r2, r6
 800877a:	6122      	str	r2, [r4, #16]
 800877c:	f8cd a000 	str.w	sl, [sp]
 8008780:	464b      	mov	r3, r9
 8008782:	aa03      	add	r2, sp, #12
 8008784:	4621      	mov	r1, r4
 8008786:	4640      	mov	r0, r8
 8008788:	f7ff fee2 	bl	8008550 <_printf_common>
 800878c:	3001      	adds	r0, #1
 800878e:	d14c      	bne.n	800882a <_printf_i+0x1fe>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b004      	add	sp, #16
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	4835      	ldr	r0, [pc, #212]	; (8008870 <_printf_i+0x244>)
 800879c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	680e      	ldr	r6, [r1, #0]
 80087a4:	061f      	lsls	r7, r3, #24
 80087a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80087aa:	600e      	str	r6, [r1, #0]
 80087ac:	d514      	bpl.n	80087d8 <_printf_i+0x1ac>
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	bf44      	itt	mi
 80087b2:	f043 0320 	orrmi.w	r3, r3, #32
 80087b6:	6023      	strmi	r3, [r4, #0]
 80087b8:	b91d      	cbnz	r5, 80087c2 <_printf_i+0x196>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	f023 0320 	bic.w	r3, r3, #32
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	2310      	movs	r3, #16
 80087c4:	e7b0      	b.n	8008728 <_printf_i+0xfc>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f043 0320 	orr.w	r3, r3, #32
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	2378      	movs	r3, #120	; 0x78
 80087d0:	4828      	ldr	r0, [pc, #160]	; (8008874 <_printf_i+0x248>)
 80087d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087d6:	e7e3      	b.n	80087a0 <_printf_i+0x174>
 80087d8:	065e      	lsls	r6, r3, #25
 80087da:	bf48      	it	mi
 80087dc:	b2ad      	uxthmi	r5, r5
 80087de:	e7e6      	b.n	80087ae <_printf_i+0x182>
 80087e0:	4616      	mov	r6, r2
 80087e2:	e7bb      	b.n	800875c <_printf_i+0x130>
 80087e4:	680b      	ldr	r3, [r1, #0]
 80087e6:	6826      	ldr	r6, [r4, #0]
 80087e8:	6960      	ldr	r0, [r4, #20]
 80087ea:	1d1d      	adds	r5, r3, #4
 80087ec:	600d      	str	r5, [r1, #0]
 80087ee:	0635      	lsls	r5, r6, #24
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	d501      	bpl.n	80087f8 <_printf_i+0x1cc>
 80087f4:	6018      	str	r0, [r3, #0]
 80087f6:	e002      	b.n	80087fe <_printf_i+0x1d2>
 80087f8:	0671      	lsls	r1, r6, #25
 80087fa:	d5fb      	bpl.n	80087f4 <_printf_i+0x1c8>
 80087fc:	8018      	strh	r0, [r3, #0]
 80087fe:	2300      	movs	r3, #0
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	4616      	mov	r6, r2
 8008804:	e7ba      	b.n	800877c <_printf_i+0x150>
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	600a      	str	r2, [r1, #0]
 800880c:	681e      	ldr	r6, [r3, #0]
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	2100      	movs	r1, #0
 8008812:	4630      	mov	r0, r6
 8008814:	f7f7 fcbc 	bl	8000190 <memchr>
 8008818:	b108      	cbz	r0, 800881e <_printf_i+0x1f2>
 800881a:	1b80      	subs	r0, r0, r6
 800881c:	6060      	str	r0, [r4, #4]
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	2300      	movs	r3, #0
 8008824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008828:	e7a8      	b.n	800877c <_printf_i+0x150>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	4632      	mov	r2, r6
 800882e:	4649      	mov	r1, r9
 8008830:	4640      	mov	r0, r8
 8008832:	47d0      	blx	sl
 8008834:	3001      	adds	r0, #1
 8008836:	d0ab      	beq.n	8008790 <_printf_i+0x164>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	079b      	lsls	r3, r3, #30
 800883c:	d413      	bmi.n	8008866 <_printf_i+0x23a>
 800883e:	68e0      	ldr	r0, [r4, #12]
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	4298      	cmp	r0, r3
 8008844:	bfb8      	it	lt
 8008846:	4618      	movlt	r0, r3
 8008848:	e7a4      	b.n	8008794 <_printf_i+0x168>
 800884a:	2301      	movs	r3, #1
 800884c:	4632      	mov	r2, r6
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	47d0      	blx	sl
 8008854:	3001      	adds	r0, #1
 8008856:	d09b      	beq.n	8008790 <_printf_i+0x164>
 8008858:	3501      	adds	r5, #1
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	9903      	ldr	r1, [sp, #12]
 800885e:	1a5b      	subs	r3, r3, r1
 8008860:	42ab      	cmp	r3, r5
 8008862:	dcf2      	bgt.n	800884a <_printf_i+0x21e>
 8008864:	e7eb      	b.n	800883e <_printf_i+0x212>
 8008866:	2500      	movs	r5, #0
 8008868:	f104 0619 	add.w	r6, r4, #25
 800886c:	e7f5      	b.n	800885a <_printf_i+0x22e>
 800886e:	bf00      	nop
 8008870:	08008ded 	.word	0x08008ded
 8008874:	08008dfe 	.word	0x08008dfe

08008878 <__sread>:
 8008878:	b510      	push	{r4, lr}
 800887a:	460c      	mov	r4, r1
 800887c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008880:	f000 f894 	bl	80089ac <_read_r>
 8008884:	2800      	cmp	r0, #0
 8008886:	bfab      	itete	ge
 8008888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800888a:	89a3      	ldrhlt	r3, [r4, #12]
 800888c:	181b      	addge	r3, r3, r0
 800888e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008892:	bfac      	ite	ge
 8008894:	6563      	strge	r3, [r4, #84]	; 0x54
 8008896:	81a3      	strhlt	r3, [r4, #12]
 8008898:	bd10      	pop	{r4, pc}

0800889a <__swrite>:
 800889a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889e:	461f      	mov	r7, r3
 80088a0:	898b      	ldrh	r3, [r1, #12]
 80088a2:	05db      	lsls	r3, r3, #23
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	4616      	mov	r6, r2
 80088aa:	d505      	bpl.n	80088b8 <__swrite+0x1e>
 80088ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b0:	2302      	movs	r3, #2
 80088b2:	2200      	movs	r2, #0
 80088b4:	f000 f868 	bl	8008988 <_lseek_r>
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088c2:	81a3      	strh	r3, [r4, #12]
 80088c4:	4632      	mov	r2, r6
 80088c6:	463b      	mov	r3, r7
 80088c8:	4628      	mov	r0, r5
 80088ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ce:	f000 b817 	b.w	8008900 <_write_r>

080088d2 <__sseek>:
 80088d2:	b510      	push	{r4, lr}
 80088d4:	460c      	mov	r4, r1
 80088d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088da:	f000 f855 	bl	8008988 <_lseek_r>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	bf15      	itete	ne
 80088e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ee:	81a3      	strheq	r3, [r4, #12]
 80088f0:	bf18      	it	ne
 80088f2:	81a3      	strhne	r3, [r4, #12]
 80088f4:	bd10      	pop	{r4, pc}

080088f6 <__sclose>:
 80088f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fa:	f000 b813 	b.w	8008924 <_close_r>
	...

08008900 <_write_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	; (8008920 <_write_r+0x20>)
 8008904:	4604      	mov	r4, r0
 8008906:	4608      	mov	r0, r1
 8008908:	4611      	mov	r1, r2
 800890a:	2200      	movs	r2, #0
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7f8 f9eb 	bl	8000cea <_write>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_write_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_write_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	200004e0 	.word	0x200004e0

08008924 <_close_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_close_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7f8 f9f7 	bl	8000d22 <_close>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_close_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_close_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	200004e0 	.word	0x200004e0

08008944 <_fstat_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d07      	ldr	r5, [pc, #28]	; (8008964 <_fstat_r+0x20>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	4611      	mov	r1, r2
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	f7f8 f9f1 	bl	8000d38 <_fstat>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d102      	bne.n	8008960 <_fstat_r+0x1c>
 800895a:	682b      	ldr	r3, [r5, #0]
 800895c:	b103      	cbz	r3, 8008960 <_fstat_r+0x1c>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	bd38      	pop	{r3, r4, r5, pc}
 8008962:	bf00      	nop
 8008964:	200004e0 	.word	0x200004e0

08008968 <_isatty_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d06      	ldr	r5, [pc, #24]	; (8008984 <_isatty_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7f8 f9ef 	bl	8000d56 <_isatty>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_isatty_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_isatty_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	200004e0 	.word	0x200004e0

08008988 <_lseek_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_lseek_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7f8 f9e7 	bl	8000d6a <_lseek>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_lseek_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_lseek_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	200004e0 	.word	0x200004e0

080089ac <_read_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d07      	ldr	r5, [pc, #28]	; (80089cc <_read_r+0x20>)
 80089b0:	4604      	mov	r4, r0
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	602a      	str	r2, [r5, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7f8 f978 	bl	8000cb0 <_read>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_read_r+0x1e>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_read_r+0x1e>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	200004e0 	.word	0x200004e0

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
